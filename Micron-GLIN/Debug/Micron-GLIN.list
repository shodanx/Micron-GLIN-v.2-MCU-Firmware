
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea30  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800eb70  0800eb70  0001eb70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f130  0800f130  000206bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f130  0800f130  0001f130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f138  0800f138  000206bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f138  0800f138  0001f138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f13c  0800f13c  0001f13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006bc  20000000  0800f140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf0  200006bc  0800f7fc  000206bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ac  0800f7fc  000213ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024826  00000000  00000000  000206e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c32  00000000  00000000  00044f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00049b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  0004af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199c5  00000000  00000000  0004c0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019dab  00000000  00000000  00065a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844dd  00000000  00000000  0007f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103d25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006328  00000000  00000000  00103d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200006bc 	.word	0x200006bc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800eb58 	.word	0x0800eb58

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200006c0 	.word	0x200006c0
 800017c:	0800eb58 	.word	0x0800eb58

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_d2f>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a98:	bf24      	itt	cs
 8000a9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa2:	d90d      	bls.n	8000ac0 <__aeabi_d2f+0x30>
 8000aa4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab8:	bf08      	it	eq
 8000aba:	f020 0001 	biceq.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac4:	d121      	bne.n	8000b0a <__aeabi_d2f+0x7a>
 8000ac6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aca:	bfbc      	itt	lt
 8000acc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	4770      	bxlt	lr
 8000ad2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ada:	f1c2 0218 	rsb	r2, r2, #24
 8000ade:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aea:	bf18      	it	ne
 8000aec:	f040 0001 	orrne.w	r0, r0, #1
 8000af0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000afc:	ea40 000c 	orr.w	r0, r0, ip
 8000b00:	fa23 f302 	lsr.w	r3, r3, r2
 8000b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b08:	e7cc      	b.n	8000aa4 <__aeabi_d2f+0x14>
 8000b0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0e:	d107      	bne.n	8000b20 <__aeabi_d2f+0x90>
 8000b10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b14:	bf1e      	ittt	ne
 8000b16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1e:	4770      	bxne	lr
 8000b20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_frsub>:
 8000b30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	e002      	b.n	8000b3c <__addsf3>
 8000b36:	bf00      	nop

08000b38 <__aeabi_fsub>:
 8000b38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b3c <__addsf3>:
 8000b3c:	0042      	lsls	r2, r0, #1
 8000b3e:	bf1f      	itttt	ne
 8000b40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b44:	ea92 0f03 	teqne	r2, r3
 8000b48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b50:	d06a      	beq.n	8000c28 <__addsf3+0xec>
 8000b52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5a:	bfc1      	itttt	gt
 8000b5c:	18d2      	addgt	r2, r2, r3
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	4048      	eorgt	r0, r1
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	bfb8      	it	lt
 8000b66:	425b      	neglt	r3, r3
 8000b68:	2b19      	cmp	r3, #25
 8000b6a:	bf88      	it	hi
 8000b6c:	4770      	bxhi	lr
 8000b6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8a:	bf18      	it	ne
 8000b8c:	4249      	negne	r1, r1
 8000b8e:	ea92 0f03 	teq	r2, r3
 8000b92:	d03f      	beq.n	8000c14 <__addsf3+0xd8>
 8000b94:	f1a2 0201 	sub.w	r2, r2, #1
 8000b98:	fa41 fc03 	asr.w	ip, r1, r3
 8000b9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ba0:	f1c3 0320 	rsb	r3, r3, #32
 8000ba4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	d502      	bpl.n	8000bb4 <__addsf3+0x78>
 8000bae:	4249      	negs	r1, r1
 8000bb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb8:	d313      	bcc.n	8000be2 <__addsf3+0xa6>
 8000bba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bbe:	d306      	bcc.n	8000bce <__addsf3+0x92>
 8000bc0:	0840      	lsrs	r0, r0, #1
 8000bc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc6:	f102 0201 	add.w	r2, r2, #1
 8000bca:	2afe      	cmp	r2, #254	; 0xfe
 8000bcc:	d251      	bcs.n	8000c72 <__addsf3+0x136>
 8000bce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd6:	bf08      	it	eq
 8000bd8:	f020 0001 	biceq.w	r0, r0, #1
 8000bdc:	ea40 0003 	orr.w	r0, r0, r3
 8000be0:	4770      	bx	lr
 8000be2:	0049      	lsls	r1, r1, #1
 8000be4:	eb40 0000 	adc.w	r0, r0, r0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	bf28      	it	cs
 8000bec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf0:	d2ed      	bcs.n	8000bce <__addsf3+0x92>
 8000bf2:	fab0 fc80 	clz	ip, r0
 8000bf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c02:	bfaa      	itet	ge
 8000c04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c08:	4252      	neglt	r2, r2
 8000c0a:	4318      	orrge	r0, r3
 8000c0c:	bfbc      	itt	lt
 8000c0e:	40d0      	lsrlt	r0, r2
 8000c10:	4318      	orrlt	r0, r3
 8000c12:	4770      	bx	lr
 8000c14:	f092 0f00 	teq	r2, #0
 8000c18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c1c:	bf06      	itte	eq
 8000c1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c22:	3201      	addeq	r2, #1
 8000c24:	3b01      	subne	r3, #1
 8000c26:	e7b5      	b.n	8000b94 <__addsf3+0x58>
 8000c28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c30:	bf18      	it	ne
 8000c32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c36:	d021      	beq.n	8000c7c <__addsf3+0x140>
 8000c38:	ea92 0f03 	teq	r2, r3
 8000c3c:	d004      	beq.n	8000c48 <__addsf3+0x10c>
 8000c3e:	f092 0f00 	teq	r2, #0
 8000c42:	bf08      	it	eq
 8000c44:	4608      	moveq	r0, r1
 8000c46:	4770      	bx	lr
 8000c48:	ea90 0f01 	teq	r0, r1
 8000c4c:	bf1c      	itt	ne
 8000c4e:	2000      	movne	r0, #0
 8000c50:	4770      	bxne	lr
 8000c52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c56:	d104      	bne.n	8000c62 <__addsf3+0x126>
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	4770      	bx	lr
 8000c62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c66:	bf3c      	itt	cc
 8000c68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bxcc	lr
 8000c6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7a:	4770      	bx	lr
 8000c7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c80:	bf16      	itet	ne
 8000c82:	4608      	movne	r0, r1
 8000c84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c88:	4601      	movne	r1, r0
 8000c8a:	0242      	lsls	r2, r0, #9
 8000c8c:	bf06      	itte	eq
 8000c8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c92:	ea90 0f01 	teqeq	r0, r1
 8000c96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_ui2f>:
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e004      	b.n	8000cac <__aeabi_i2f+0x8>
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_i2f>:
 8000ca4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca8:	bf48      	it	mi
 8000caa:	4240      	negmi	r0, r0
 8000cac:	ea5f 0c00 	movs.w	ip, r0
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb8:	4601      	mov	r1, r0
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	e01c      	b.n	8000cfa <__aeabi_l2f+0x2a>

08000cc0 <__aeabi_ul2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e00a      	b.n	8000ce4 <__aeabi_l2f+0x14>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_l2f>:
 8000cd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd4:	bf08      	it	eq
 8000cd6:	4770      	bxeq	lr
 8000cd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cdc:	d502      	bpl.n	8000ce4 <__aeabi_l2f+0x14>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	ea5f 0c01 	movs.w	ip, r1
 8000ce8:	bf02      	ittt	eq
 8000cea:	4684      	moveq	ip, r0
 8000cec:	4601      	moveq	r1, r0
 8000cee:	2000      	moveq	r0, #0
 8000cf0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf4:	bf08      	it	eq
 8000cf6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfe:	fabc f28c 	clz	r2, ip
 8000d02:	3a08      	subs	r2, #8
 8000d04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d08:	db10      	blt.n	8000d2c <__aeabi_l2f+0x5c>
 8000d0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0e:	4463      	add	r3, ip
 8000d10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	f020 0001 	biceq.w	r0, r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	f102 0220 	add.w	r2, r2, #32
 8000d30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_fmul>:
 8000d4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d54:	bf1e      	ittt	ne
 8000d56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5a:	ea92 0f0c 	teqne	r2, ip
 8000d5e:	ea93 0f0c 	teqne	r3, ip
 8000d62:	d06f      	beq.n	8000e44 <__aeabi_fmul+0xf8>
 8000d64:	441a      	add	r2, r3
 8000d66:	ea80 0c01 	eor.w	ip, r0, r1
 8000d6a:	0240      	lsls	r0, r0, #9
 8000d6c:	bf18      	it	ne
 8000d6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d72:	d01e      	beq.n	8000db2 <__aeabi_fmul+0x66>
 8000d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d80:	fba0 3101 	umull	r3, r1, r0, r1
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d8c:	bf3e      	ittt	cc
 8000d8e:	0049      	lslcc	r1, r1, #1
 8000d90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d94:	005b      	lslcc	r3, r3, #1
 8000d96:	ea40 0001 	orr.w	r0, r0, r1
 8000d9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9e:	2afd      	cmp	r2, #253	; 0xfd
 8000da0:	d81d      	bhi.n	8000dde <__aeabi_fmul+0x92>
 8000da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000daa:	bf08      	it	eq
 8000dac:	f020 0001 	biceq.w	r0, r0, #1
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dba:	bf08      	it	eq
 8000dbc:	0249      	lsleq	r1, r1, #9
 8000dbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc6:	3a7f      	subs	r2, #127	; 0x7f
 8000dc8:	bfc2      	ittt	gt
 8000dca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd2:	4770      	bxgt	lr
 8000dd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	3a01      	subs	r2, #1
 8000dde:	dc5d      	bgt.n	8000e9c <__aeabi_fmul+0x150>
 8000de0:	f112 0f19 	cmn.w	r2, #25
 8000de4:	bfdc      	itt	le
 8000de6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dea:	4770      	bxle	lr
 8000dec:	f1c2 0200 	rsb	r2, r2, #0
 8000df0:	0041      	lsls	r1, r0, #1
 8000df2:	fa21 f102 	lsr.w	r1, r1, r2
 8000df6:	f1c2 0220 	rsb	r2, r2, #32
 8000dfa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e02:	f140 0000 	adc.w	r0, r0, #0
 8000e06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e0a:	bf08      	it	eq
 8000e0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e10:	4770      	bx	lr
 8000e12:	f092 0f00 	teq	r2, #0
 8000e16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0040      	lsleq	r0, r0, #1
 8000e1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e22:	3a01      	subeq	r2, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xce>
 8000e26:	ea40 000c 	orr.w	r0, r0, ip
 8000e2a:	f093 0f00 	teq	r3, #0
 8000e2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0049      	lsleq	r1, r1, #1
 8000e36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3a:	3b01      	subeq	r3, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xe6>
 8000e3e:	ea41 010c 	orr.w	r1, r1, ip
 8000e42:	e78f      	b.n	8000d64 <__aeabi_fmul+0x18>
 8000e44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e48:	ea92 0f0c 	teq	r2, ip
 8000e4c:	bf18      	it	ne
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d00a      	beq.n	8000e6a <__aeabi_fmul+0x11e>
 8000e54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e58:	bf18      	it	ne
 8000e5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5e:	d1d8      	bne.n	8000e12 <__aeabi_fmul+0xc6>
 8000e60:	ea80 0001 	eor.w	r0, r0, r1
 8000e64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e68:	4770      	bx	lr
 8000e6a:	f090 0f00 	teq	r0, #0
 8000e6e:	bf17      	itett	ne
 8000e70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e74:	4608      	moveq	r0, r1
 8000e76:	f091 0f00 	teqne	r1, #0
 8000e7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7e:	d014      	beq.n	8000eaa <__aeabi_fmul+0x15e>
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	d101      	bne.n	8000e8a <__aeabi_fmul+0x13e>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d10f      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e8a:	ea93 0f0c 	teq	r3, ip
 8000e8e:	d103      	bne.n	8000e98 <__aeabi_fmul+0x14c>
 8000e90:	024b      	lsls	r3, r1, #9
 8000e92:	bf18      	it	ne
 8000e94:	4608      	movne	r0, r1
 8000e96:	d108      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	4770      	bx	lr
 8000eaa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_fdiv>:
 8000eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ebc:	bf1e      	ittt	ne
 8000ebe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec2:	ea92 0f0c 	teqne	r2, ip
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d069      	beq.n	8000fa0 <__aeabi_fdiv+0xec>
 8000ecc:	eba2 0203 	sub.w	r2, r2, r3
 8000ed0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed4:	0249      	lsls	r1, r1, #9
 8000ed6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eda:	d037      	beq.n	8000f4c <__aeabi_fdiv+0x98>
 8000edc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eec:	428b      	cmp	r3, r1
 8000eee:	bf38      	it	cc
 8000ef0:	005b      	lslcc	r3, r3, #1
 8000ef2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000efa:	428b      	cmp	r3, r1
 8000efc:	bf24      	itt	cs
 8000efe:	1a5b      	subcs	r3, r3, r1
 8000f00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f16:	bf24      	itt	cs
 8000f18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	bf18      	it	ne
 8000f32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f36:	d1e0      	bne.n	8000efa <__aeabi_fdiv+0x46>
 8000f38:	2afd      	cmp	r2, #253	; 0xfd
 8000f3a:	f63f af50 	bhi.w	8000dde <__aeabi_fmul+0x92>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f44:	bf08      	it	eq
 8000f46:	f020 0001 	biceq.w	r0, r0, #1
 8000f4a:	4770      	bx	lr
 8000f4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f54:	327f      	adds	r2, #127	; 0x7f
 8000f56:	bfc2      	ittt	gt
 8000f58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f60:	4770      	bxgt	lr
 8000f62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	3a01      	subs	r2, #1
 8000f6c:	e737      	b.n	8000dde <__aeabi_fmul+0x92>
 8000f6e:	f092 0f00 	teq	r2, #0
 8000f72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0040      	lsleq	r0, r0, #1
 8000f7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7e:	3a01      	subeq	r2, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xc2>
 8000f82:	ea40 000c 	orr.w	r0, r0, ip
 8000f86:	f093 0f00 	teq	r3, #0
 8000f8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0049      	lsleq	r1, r1, #1
 8000f92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f96:	3b01      	subeq	r3, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xda>
 8000f9a:	ea41 010c 	orr.w	r1, r1, ip
 8000f9e:	e795      	b.n	8000ecc <__aeabi_fdiv+0x18>
 8000fa0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa4:	ea92 0f0c 	teq	r2, ip
 8000fa8:	d108      	bne.n	8000fbc <__aeabi_fdiv+0x108>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	f47f af7d 	bne.w	8000eaa <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	f47f af70 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e776      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	d104      	bne.n	8000fcc <__aeabi_fdiv+0x118>
 8000fc2:	024b      	lsls	r3, r1, #9
 8000fc4:	f43f af4c 	beq.w	8000e60 <__aeabi_fmul+0x114>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e76e      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd0:	bf18      	it	ne
 8000fd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	d1ca      	bne.n	8000f6e <__aeabi_fdiv+0xba>
 8000fd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fdc:	f47f af5c 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fe0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe4:	f47f af3c 	bne.w	8000e60 <__aeabi_fmul+0x114>
 8000fe8:	e75f      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fea:	bf00      	nop

08000fec <__gesf2>:
 8000fec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ff0:	e006      	b.n	8001000 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__lesf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	e002      	b.n	8001000 <__cmpsf2+0x4>
 8000ffa:	bf00      	nop

08000ffc <__cmpsf2>:
 8000ffc:	f04f 0c01 	mov.w	ip, #1
 8001000:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001004:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001008:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800100c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001010:	bf18      	it	ne
 8001012:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001016:	d011      	beq.n	800103c <__cmpsf2+0x40>
 8001018:	b001      	add	sp, #4
 800101a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800101e:	bf18      	it	ne
 8001020:	ea90 0f01 	teqne	r0, r1
 8001024:	bf58      	it	pl
 8001026:	ebb2 0003 	subspl.w	r0, r2, r3
 800102a:	bf88      	it	hi
 800102c:	17c8      	asrhi	r0, r1, #31
 800102e:	bf38      	it	cc
 8001030:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001034:	bf18      	it	ne
 8001036:	f040 0001 	orrne.w	r0, r0, #1
 800103a:	4770      	bx	lr
 800103c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001040:	d102      	bne.n	8001048 <__cmpsf2+0x4c>
 8001042:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001046:	d105      	bne.n	8001054 <__cmpsf2+0x58>
 8001048:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800104c:	d1e4      	bne.n	8001018 <__cmpsf2+0x1c>
 800104e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001052:	d0e1      	beq.n	8001018 <__cmpsf2+0x1c>
 8001054:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <__aeabi_cfrcmple>:
 800105c:	4684      	mov	ip, r0
 800105e:	4608      	mov	r0, r1
 8001060:	4661      	mov	r1, ip
 8001062:	e7ff      	b.n	8001064 <__aeabi_cfcmpeq>

08001064 <__aeabi_cfcmpeq>:
 8001064:	b50f      	push	{r0, r1, r2, r3, lr}
 8001066:	f7ff ffc9 	bl	8000ffc <__cmpsf2>
 800106a:	2800      	cmp	r0, #0
 800106c:	bf48      	it	mi
 800106e:	f110 0f00 	cmnmi.w	r0, #0
 8001072:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001074 <__aeabi_fcmpeq>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff fff4 	bl	8001064 <__aeabi_cfcmpeq>
 800107c:	bf0c      	ite	eq
 800107e:	2001      	moveq	r0, #1
 8001080:	2000      	movne	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmplt>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffea 	bl	8001064 <__aeabi_cfcmpeq>
 8001090:	bf34      	ite	cc
 8001092:	2001      	movcc	r0, #1
 8001094:	2000      	movcs	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmple>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffe0 	bl	8001064 <__aeabi_cfcmpeq>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpge>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffd2 	bl	800105c <__aeabi_cfrcmple>
 80010b8:	bf94      	ite	ls
 80010ba:	2001      	movls	r0, #1
 80010bc:	2000      	movhi	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmpgt>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffc8 	bl	800105c <__aeabi_cfrcmple>
 80010cc:	bf34      	ite	cc
 80010ce:	2001      	movcc	r0, #1
 80010d0:	2000      	movcs	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_f2uiz>:
 80010d8:	0042      	lsls	r2, r0, #1
 80010da:	d20e      	bcs.n	80010fa <__aeabi_f2uiz+0x22>
 80010dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e0:	d30b      	bcc.n	80010fa <__aeabi_f2uiz+0x22>
 80010e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ea:	d409      	bmi.n	8001100 <__aeabi_f2uiz+0x28>
 80010ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f4:	fa23 f002 	lsr.w	r0, r3, r2
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2uiz+0x32>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d102      	bne.n	8001110 <__aeabi_f2uiz+0x38>
 800110a:	f04f 30ff 	mov.w	r0, #4294967295
 800110e:	4770      	bx	lr
 8001110:	f04f 0000 	mov.w	r0, #0
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <__aeabi_uldivmod>:
 8001118:	b953      	cbnz	r3, 8001130 <__aeabi_uldivmod+0x18>
 800111a:	b94a      	cbnz	r2, 8001130 <__aeabi_uldivmod+0x18>
 800111c:	2900      	cmp	r1, #0
 800111e:	bf08      	it	eq
 8001120:	2800      	cmpeq	r0, #0
 8001122:	bf1c      	itt	ne
 8001124:	f04f 31ff 	movne.w	r1, #4294967295
 8001128:	f04f 30ff 	movne.w	r0, #4294967295
 800112c:	f000 b9a6 	b.w	800147c <__aeabi_idiv0>
 8001130:	f1ad 0c08 	sub.w	ip, sp, #8
 8001134:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001138:	f000 f83e 	bl	80011b8 <__udivmoddi4>
 800113c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001144:	b004      	add	sp, #16
 8001146:	4770      	bx	lr

08001148 <__aeabi_d2lz>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	460c      	mov	r4, r1
 800114c:	4605      	mov	r5, r0
 800114e:	4621      	mov	r1, r4
 8001150:	4628      	mov	r0, r5
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	f7ff fc53 	bl	8000a00 <__aeabi_dcmplt>
 800115a:	b928      	cbnz	r0, 8001168 <__aeabi_d2lz+0x20>
 800115c:	4628      	mov	r0, r5
 800115e:	4621      	mov	r1, r4
 8001160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001164:	f000 b80a 	b.w	800117c <__aeabi_d2ulz>
 8001168:	4628      	mov	r0, r5
 800116a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800116e:	f000 f805 	bl	800117c <__aeabi_d2ulz>
 8001172:	4240      	negs	r0, r0
 8001174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop

0800117c <__aeabi_d2ulz>:
 800117c:	b5d0      	push	{r4, r6, r7, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__aeabi_d2ulz+0x34>)
 8001182:	4606      	mov	r6, r0
 8001184:	460f      	mov	r7, r1
 8001186:	f7ff f9c9 	bl	800051c <__aeabi_dmul>
 800118a:	f7ff fc61 	bl	8000a50 <__aeabi_d2uiz>
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff f94a 	bl	8000428 <__aeabi_ui2d>
 8001194:	2200      	movs	r2, #0
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <__aeabi_d2ulz+0x38>)
 8001198:	f7ff f9c0 	bl	800051c <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4630      	mov	r0, r6
 80011a2:	4639      	mov	r1, r7
 80011a4:	f7ff f802 	bl	80001ac <__aeabi_dsub>
 80011a8:	f7ff fc52 	bl	8000a50 <__aeabi_d2uiz>
 80011ac:	4621      	mov	r1, r4
 80011ae:	bdd0      	pop	{r4, r6, r7, pc}
 80011b0:	3df00000 	.word	0x3df00000
 80011b4:	41f00000 	.word	0x41f00000

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	9e08      	ldr	r6, [sp, #32]
 80011be:	460d      	mov	r5, r1
 80011c0:	4604      	mov	r4, r0
 80011c2:	468e      	mov	lr, r1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f040 8083 	bne.w	80012d0 <__udivmoddi4+0x118>
 80011ca:	428a      	cmp	r2, r1
 80011cc:	4617      	mov	r7, r2
 80011ce:	d947      	bls.n	8001260 <__udivmoddi4+0xa8>
 80011d0:	fab2 f382 	clz	r3, r2
 80011d4:	b14b      	cbz	r3, 80011ea <__udivmoddi4+0x32>
 80011d6:	f1c3 0120 	rsb	r1, r3, #32
 80011da:	fa05 fe03 	lsl.w	lr, r5, r3
 80011de:	fa20 f101 	lsr.w	r1, r0, r1
 80011e2:	409f      	lsls	r7, r3
 80011e4:	ea41 0e0e 	orr.w	lr, r1, lr
 80011e8:	409c      	lsls	r4, r3
 80011ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011ee:	fbbe fcf8 	udiv	ip, lr, r8
 80011f2:	fa1f f987 	uxth.w	r9, r7
 80011f6:	fb08 e21c 	mls	r2, r8, ip, lr
 80011fa:	fb0c f009 	mul.w	r0, ip, r9
 80011fe:	0c21      	lsrs	r1, r4, #16
 8001200:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001204:	4290      	cmp	r0, r2
 8001206:	d90a      	bls.n	800121e <__udivmoddi4+0x66>
 8001208:	18ba      	adds	r2, r7, r2
 800120a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800120e:	f080 8118 	bcs.w	8001442 <__udivmoddi4+0x28a>
 8001212:	4290      	cmp	r0, r2
 8001214:	f240 8115 	bls.w	8001442 <__udivmoddi4+0x28a>
 8001218:	f1ac 0c02 	sub.w	ip, ip, #2
 800121c:	443a      	add	r2, r7
 800121e:	1a12      	subs	r2, r2, r0
 8001220:	fbb2 f0f8 	udiv	r0, r2, r8
 8001224:	fb08 2210 	mls	r2, r8, r0, r2
 8001228:	fb00 f109 	mul.w	r1, r0, r9
 800122c:	b2a4      	uxth	r4, r4
 800122e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001232:	42a1      	cmp	r1, r4
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x92>
 8001236:	193c      	adds	r4, r7, r4
 8001238:	f100 32ff 	add.w	r2, r0, #4294967295
 800123c:	f080 8103 	bcs.w	8001446 <__udivmoddi4+0x28e>
 8001240:	42a1      	cmp	r1, r4
 8001242:	f240 8100 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001246:	3802      	subs	r0, #2
 8001248:	443c      	add	r4, r7
 800124a:	1a64      	subs	r4, r4, r1
 800124c:	2100      	movs	r1, #0
 800124e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001252:	b11e      	cbz	r6, 800125c <__udivmoddi4+0xa4>
 8001254:	2200      	movs	r2, #0
 8001256:	40dc      	lsrs	r4, r3
 8001258:	e9c6 4200 	strd	r4, r2, [r6]
 800125c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001260:	b902      	cbnz	r2, 8001264 <__udivmoddi4+0xac>
 8001262:	deff      	udf	#255	; 0xff
 8001264:	fab2 f382 	clz	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d14f      	bne.n	800130c <__udivmoddi4+0x154>
 800126c:	1a8d      	subs	r5, r1, r2
 800126e:	2101      	movs	r1, #1
 8001270:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001274:	fa1f f882 	uxth.w	r8, r2
 8001278:	fbb5 fcfe 	udiv	ip, r5, lr
 800127c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001280:	fb08 f00c 	mul.w	r0, r8, ip
 8001284:	0c22      	lsrs	r2, r4, #16
 8001286:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800128a:	42a8      	cmp	r0, r5
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0xe6>
 800128e:	197d      	adds	r5, r7, r5
 8001290:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001294:	d202      	bcs.n	800129c <__udivmoddi4+0xe4>
 8001296:	42a8      	cmp	r0, r5
 8001298:	f200 80e9 	bhi.w	800146e <__udivmoddi4+0x2b6>
 800129c:	4694      	mov	ip, r2
 800129e:	1a2d      	subs	r5, r5, r0
 80012a0:	fbb5 f0fe 	udiv	r0, r5, lr
 80012a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80012a8:	fb08 f800 	mul.w	r8, r8, r0
 80012ac:	b2a4      	uxth	r4, r4
 80012ae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012b2:	45a0      	cmp	r8, r4
 80012b4:	d907      	bls.n	80012c6 <__udivmoddi4+0x10e>
 80012b6:	193c      	adds	r4, r7, r4
 80012b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80012bc:	d202      	bcs.n	80012c4 <__udivmoddi4+0x10c>
 80012be:	45a0      	cmp	r8, r4
 80012c0:	f200 80d9 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012c4:	4610      	mov	r0, r2
 80012c6:	eba4 0408 	sub.w	r4, r4, r8
 80012ca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012ce:	e7c0      	b.n	8001252 <__udivmoddi4+0x9a>
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d908      	bls.n	80012e6 <__udivmoddi4+0x12e>
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	f000 80b1 	beq.w	800143c <__udivmoddi4+0x284>
 80012da:	2100      	movs	r1, #0
 80012dc:	e9c6 0500 	strd	r0, r5, [r6]
 80012e0:	4608      	mov	r0, r1
 80012e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e6:	fab3 f183 	clz	r1, r3
 80012ea:	2900      	cmp	r1, #0
 80012ec:	d14b      	bne.n	8001386 <__udivmoddi4+0x1ce>
 80012ee:	42ab      	cmp	r3, r5
 80012f0:	d302      	bcc.n	80012f8 <__udivmoddi4+0x140>
 80012f2:	4282      	cmp	r2, r0
 80012f4:	f200 80b9 	bhi.w	800146a <__udivmoddi4+0x2b2>
 80012f8:	1a84      	subs	r4, r0, r2
 80012fa:	eb65 0303 	sbc.w	r3, r5, r3
 80012fe:	2001      	movs	r0, #1
 8001300:	469e      	mov	lr, r3
 8001302:	2e00      	cmp	r6, #0
 8001304:	d0aa      	beq.n	800125c <__udivmoddi4+0xa4>
 8001306:	e9c6 4e00 	strd	r4, lr, [r6]
 800130a:	e7a7      	b.n	800125c <__udivmoddi4+0xa4>
 800130c:	409f      	lsls	r7, r3
 800130e:	f1c3 0220 	rsb	r2, r3, #32
 8001312:	40d1      	lsrs	r1, r2
 8001314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001318:	fbb1 f0fe 	udiv	r0, r1, lr
 800131c:	fa1f f887 	uxth.w	r8, r7
 8001320:	fb0e 1110 	mls	r1, lr, r0, r1
 8001324:	fa24 f202 	lsr.w	r2, r4, r2
 8001328:	409d      	lsls	r5, r3
 800132a:	fb00 fc08 	mul.w	ip, r0, r8
 800132e:	432a      	orrs	r2, r5
 8001330:	0c15      	lsrs	r5, r2, #16
 8001332:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001336:	45ac      	cmp	ip, r5
 8001338:	fa04 f403 	lsl.w	r4, r4, r3
 800133c:	d909      	bls.n	8001352 <__udivmoddi4+0x19a>
 800133e:	197d      	adds	r5, r7, r5
 8001340:	f100 31ff 	add.w	r1, r0, #4294967295
 8001344:	f080 808f 	bcs.w	8001466 <__udivmoddi4+0x2ae>
 8001348:	45ac      	cmp	ip, r5
 800134a:	f240 808c 	bls.w	8001466 <__udivmoddi4+0x2ae>
 800134e:	3802      	subs	r0, #2
 8001350:	443d      	add	r5, r7
 8001352:	eba5 050c 	sub.w	r5, r5, ip
 8001356:	fbb5 f1fe 	udiv	r1, r5, lr
 800135a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800135e:	fb01 f908 	mul.w	r9, r1, r8
 8001362:	b295      	uxth	r5, r2
 8001364:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001368:	45a9      	cmp	r9, r5
 800136a:	d907      	bls.n	800137c <__udivmoddi4+0x1c4>
 800136c:	197d      	adds	r5, r7, r5
 800136e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001372:	d274      	bcs.n	800145e <__udivmoddi4+0x2a6>
 8001374:	45a9      	cmp	r9, r5
 8001376:	d972      	bls.n	800145e <__udivmoddi4+0x2a6>
 8001378:	3902      	subs	r1, #2
 800137a:	443d      	add	r5, r7
 800137c:	eba5 0509 	sub.w	r5, r5, r9
 8001380:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001384:	e778      	b.n	8001278 <__udivmoddi4+0xc0>
 8001386:	f1c1 0720 	rsb	r7, r1, #32
 800138a:	408b      	lsls	r3, r1
 800138c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001390:	ea4c 0c03 	orr.w	ip, ip, r3
 8001394:	fa25 f407 	lsr.w	r4, r5, r7
 8001398:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800139c:	fbb4 f9fe 	udiv	r9, r4, lr
 80013a0:	fa1f f88c 	uxth.w	r8, ip
 80013a4:	fb0e 4419 	mls	r4, lr, r9, r4
 80013a8:	fa20 f307 	lsr.w	r3, r0, r7
 80013ac:	fb09 fa08 	mul.w	sl, r9, r8
 80013b0:	408d      	lsls	r5, r1
 80013b2:	431d      	orrs	r5, r3
 80013b4:	0c2b      	lsrs	r3, r5, #16
 80013b6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013ba:	45a2      	cmp	sl, r4
 80013bc:	fa02 f201 	lsl.w	r2, r2, r1
 80013c0:	fa00 f301 	lsl.w	r3, r0, r1
 80013c4:	d909      	bls.n	80013da <__udivmoddi4+0x222>
 80013c6:	eb1c 0404 	adds.w	r4, ip, r4
 80013ca:	f109 30ff 	add.w	r0, r9, #4294967295
 80013ce:	d248      	bcs.n	8001462 <__udivmoddi4+0x2aa>
 80013d0:	45a2      	cmp	sl, r4
 80013d2:	d946      	bls.n	8001462 <__udivmoddi4+0x2aa>
 80013d4:	f1a9 0902 	sub.w	r9, r9, #2
 80013d8:	4464      	add	r4, ip
 80013da:	eba4 040a 	sub.w	r4, r4, sl
 80013de:	fbb4 f0fe 	udiv	r0, r4, lr
 80013e2:	fb0e 4410 	mls	r4, lr, r0, r4
 80013e6:	fb00 fa08 	mul.w	sl, r0, r8
 80013ea:	b2ad      	uxth	r5, r5
 80013ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013f0:	45a2      	cmp	sl, r4
 80013f2:	d908      	bls.n	8001406 <__udivmoddi4+0x24e>
 80013f4:	eb1c 0404 	adds.w	r4, ip, r4
 80013f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80013fc:	d22d      	bcs.n	800145a <__udivmoddi4+0x2a2>
 80013fe:	45a2      	cmp	sl, r4
 8001400:	d92b      	bls.n	800145a <__udivmoddi4+0x2a2>
 8001402:	3802      	subs	r0, #2
 8001404:	4464      	add	r4, ip
 8001406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800140a:	fba0 8902 	umull	r8, r9, r0, r2
 800140e:	eba4 040a 	sub.w	r4, r4, sl
 8001412:	454c      	cmp	r4, r9
 8001414:	46c6      	mov	lr, r8
 8001416:	464d      	mov	r5, r9
 8001418:	d319      	bcc.n	800144e <__udivmoddi4+0x296>
 800141a:	d016      	beq.n	800144a <__udivmoddi4+0x292>
 800141c:	b15e      	cbz	r6, 8001436 <__udivmoddi4+0x27e>
 800141e:	ebb3 020e 	subs.w	r2, r3, lr
 8001422:	eb64 0405 	sbc.w	r4, r4, r5
 8001426:	fa04 f707 	lsl.w	r7, r4, r7
 800142a:	fa22 f301 	lsr.w	r3, r2, r1
 800142e:	431f      	orrs	r7, r3
 8001430:	40cc      	lsrs	r4, r1
 8001432:	e9c6 7400 	strd	r7, r4, [r6]
 8001436:	2100      	movs	r1, #0
 8001438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800143c:	4631      	mov	r1, r6
 800143e:	4630      	mov	r0, r6
 8001440:	e70c      	b.n	800125c <__udivmoddi4+0xa4>
 8001442:	468c      	mov	ip, r1
 8001444:	e6eb      	b.n	800121e <__udivmoddi4+0x66>
 8001446:	4610      	mov	r0, r2
 8001448:	e6ff      	b.n	800124a <__udivmoddi4+0x92>
 800144a:	4543      	cmp	r3, r8
 800144c:	d2e6      	bcs.n	800141c <__udivmoddi4+0x264>
 800144e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001452:	eb69 050c 	sbc.w	r5, r9, ip
 8001456:	3801      	subs	r0, #1
 8001458:	e7e0      	b.n	800141c <__udivmoddi4+0x264>
 800145a:	4628      	mov	r0, r5
 800145c:	e7d3      	b.n	8001406 <__udivmoddi4+0x24e>
 800145e:	4611      	mov	r1, r2
 8001460:	e78c      	b.n	800137c <__udivmoddi4+0x1c4>
 8001462:	4681      	mov	r9, r0
 8001464:	e7b9      	b.n	80013da <__udivmoddi4+0x222>
 8001466:	4608      	mov	r0, r1
 8001468:	e773      	b.n	8001352 <__udivmoddi4+0x19a>
 800146a:	4608      	mov	r0, r1
 800146c:	e749      	b.n	8001302 <__udivmoddi4+0x14a>
 800146e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001472:	443d      	add	r5, r7
 8001474:	e713      	b.n	800129e <__udivmoddi4+0xe6>
 8001476:	3802      	subs	r0, #2
 8001478:	443c      	add	r4, r7
 800147a:	e724      	b.n	80012c6 <__udivmoddi4+0x10e>

0800147c <__aeabi_idiv0>:
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	889b      	ldrh	r3, [r3, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	88db      	ldrh	r3, [r3, #6]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
	if (total < 0)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b00      	cmp	r3, #0
 800149e:	da05      	bge.n	80014ac <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	891b      	ldrh	r3, [r3, #8]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

	if (total == 0)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e031      	b.n	800151c <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	88db      	ldrh	r3, [r3, #6]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	8912      	ldrh	r2, [r2, #8]
 80014c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80014c8:	fb02 f200 	mul.w	r2, r2, r0
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	461a      	mov	r2, r3
			* circ_buf->element_size);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	895b      	ldrh	r3, [r3, #10]
 80014d6:	fb03 f302 	mul.w	r3, r3, r2
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 80014da:	440b      	add	r3, r1
 80014dc:	613b      	str	r3, [r7, #16]

	if (elem)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	895b      	ldrh	r3, [r3, #10]
 80014e8:	461a      	mov	r2, r3
 80014ea:	6939      	ldr	r1, [r7, #16]
 80014ec:	68b8      	ldr	r0, [r7, #8]
 80014ee:	f00a fc67 	bl	800bdc0 <memcpy>

	if (!read_only) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d110      	bne.n	800151a <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	88db      	ldrh	r3, [r3, #6]
 80014fc:	3301      	adds	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	88db      	ldrh	r3, [r3, #6]
 8001508:	461a      	mov	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	891b      	ldrh	r3, [r3, #8]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	429a      	cmp	r2, r3
 8001512:	db02      	blt.n	800151a <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	88db      	ldrh	r3, [r3, #6]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da05      	bge.n	800154e <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	891b      	ldrh	r3, [r3, #8]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	891b      	ldrh	r3, [r3, #8]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4293      	cmp	r3, r2
 8001558:	db02      	blt.n	8001560 <__circ_gbuf_push+0x3c>
		return -1; // Full
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e02b      	b.n	80015b8 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	889b      	ldrh	r3, [r3, #4]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	8912      	ldrh	r2, [r2, #8]
 800156c:	fbb3 f0f2 	udiv	r0, r3, r2
 8001570:	fb02 f200 	mul.w	r2, r2, r0
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	b29b      	uxth	r3, r3
 8001578:	461a      	mov	r2, r3
			* circ_buf->element_size );
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	895b      	ldrh	r3, [r3, #10]
 800157e:	fb03 f302 	mul.w	r3, r3, r2
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8001582:	440b      	add	r3, r1
 8001584:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	895b      	ldrh	r3, [r3, #10]
 800158a:	461a      	mov	r2, r3
 800158c:	6839      	ldr	r1, [r7, #0]
 800158e:	68b8      	ldr	r0, [r7, #8]
 8001590:	f00a fc16 	bl	800bdc0 <memcpy>
	circ_buf->push_count++;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	889b      	ldrh	r3, [r3, #4]
 8001598:	3301      	adds	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	461a      	mov	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	891b      	ldrh	r3, [r3, #8]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	429a      	cmp	r2, r3
 80015ae:	db02      	blt.n	80015b6 <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	809a      	strh	r2, [r3, #4]
	return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <DAC_Write>:
#include "dac_and_dds_func.h"

//==============================================================================================
void DAC_Write(uint32_t value)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <DAC_Write+0x64>)
 80015ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015ce:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015d8:	f023 030f 	bic.w	r3, r3, #15
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <DAC_Write+0x64>)
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <DAC_Write+0x64>)
 80015e4:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <DAC_Write+0x64>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	0c1b      	lsrs	r3, r3, #16
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <DAC_Write+0x68>)
 80015f0:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <DAC_Write+0x64>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <DAC_Write+0x68>)
 80015fa:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2110      	movs	r1, #16
 8001600:	480a      	ldr	r0, [pc, #40]	; (800162c <DAC_Write+0x6c>)
 8001602:	f002 fd2a 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001606:	2302      	movs	r3, #2
 8001608:	2202      	movs	r2, #2
 800160a:	4907      	ldr	r1, [pc, #28]	; (8001628 <DAC_Write+0x68>)
 800160c:	4808      	ldr	r0, [pc, #32]	; (8001630 <DAC_Write+0x70>)
 800160e:	f004 ff8f 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2110      	movs	r1, #16
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <DAC_Write+0x6c>)
 8001618:	f002 fd1f 	bl	800405a <HAL_GPIO_WritePin>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000920 	.word	0x20000920
 8001628:	2000091c 	.word	0x2000091c
 800162c:	40020000 	.word	0x40020000
 8001630:	200009e0 	.word	0x200009e0

08001634 <DAC_Write_FAST>:

//==============================================================================================
void DAC_Write_FAST(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2110      	movs	r1, #16
 800163c:	4807      	ldr	r0, [pc, #28]	; (800165c <DAC_Write_FAST+0x28>)
 800163e:	f002 fd0c 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001642:	2302      	movs	r3, #2
 8001644:	2202      	movs	r2, #2
 8001646:	4906      	ldr	r1, [pc, #24]	; (8001660 <DAC_Write_FAST+0x2c>)
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <DAC_Write_FAST+0x30>)
 800164a:	f004 ff71 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800164e:	2201      	movs	r2, #1
 8001650:	2110      	movs	r1, #16
 8001652:	4802      	ldr	r0, [pc, #8]	; (800165c <DAC_Write_FAST+0x28>)
 8001654:	f002 fd01 	bl	800405a <HAL_GPIO_WritePin>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020000 	.word	0x40020000
 8001660:	2000091c 	.word	0x2000091c
 8001664:	200009e0 	.word	0x200009e0

08001668 <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0

	DAC_tx_buffer=0x02000000; // Write CONFIG1
 800166c:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <DAC_SendInit+0xfc>)
 800166e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001672:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <DAC_SendInit+0x100>)
 8001676:	7a1b      	ldrb	r3, [r3, #8]
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	f003 0210 	and.w	r2, r3, #16
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <DAC_SendInit+0xfc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a37      	ldr	r2, [pc, #220]	; (8001764 <DAC_SendInit+0xfc>)
 8001686:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x0F)<<6;
 8001688:	4b37      	ldr	r3, [pc, #220]	; (8001768 <DAC_SendInit+0x100>)
 800168a:	79db      	ldrb	r3, [r3, #7]
 800168c:	019b      	lsls	r3, r3, #6
 800168e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
 8001692:	4b34      	ldr	r3, [pc, #208]	; (8001764 <DAC_SendInit+0xfc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a32      	ldr	r2, [pc, #200]	; (8001764 <DAC_SendInit+0xfc>)
 800169a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <DAC_SendInit+0x100>)
 800169e:	799b      	ldrb	r3, [r3, #6]
 80016a0:	029b      	lsls	r3, r3, #10
 80016a2:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <DAC_SendInit+0xfc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a2d      	ldr	r2, [pc, #180]	; (8001764 <DAC_SendInit+0xfc>)
 80016ae:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <DAC_SendInit+0x100>)
 80016b2:	795b      	ldrb	r3, [r3, #5]
 80016b4:	02db      	lsls	r3, r3, #11
 80016b6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <DAC_SendInit+0xfc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a28      	ldr	r2, [pc, #160]	; (8001764 <DAC_SendInit+0xfc>)
 80016c2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <DAC_SendInit+0x100>)
 80016c6:	791b      	ldrb	r3, [r3, #4]
 80016c8:	031b      	lsls	r3, r3, #12
 80016ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <DAC_SendInit+0xfc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a23      	ldr	r2, [pc, #140]	; (8001764 <DAC_SendInit+0xfc>)
 80016d6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <DAC_SendInit+0x100>)
 80016da:	78db      	ldrb	r3, [r3, #3]
 80016dc:	035b      	lsls	r3, r3, #13
 80016de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <DAC_SendInit+0xfc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <DAC_SendInit+0xfc>)
 80016ea:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <DAC_SendInit+0x100>)
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	039b      	lsls	r3, r3, #14
 80016f2:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <DAC_SendInit+0xfc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <DAC_SendInit+0xfc>)
 80016fe:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <DAC_SendInit+0x100>)
 8001702:	785b      	ldrb	r3, [r3, #1]
 8001704:	049b      	lsls	r3, r3, #18
 8001706:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <DAC_SendInit+0xfc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <DAC_SendInit+0xfc>)
 8001712:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <DAC_SendInit+0x100>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	05db      	lsls	r3, r3, #23
 800171a:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <DAC_SendInit+0xfc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <DAC_SendInit+0xfc>)
 8001726:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <DAC_SendInit+0xfc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0c1b      	lsrs	r3, r3, #16
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <DAC_SendInit+0x104>)
 8001732:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <DAC_SendInit+0xfc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <DAC_SendInit+0x104>)
 800173c:	805a      	strh	r2, [r3, #2]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2110      	movs	r1, #16
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <DAC_SendInit+0x108>)
 8001744:	f002 fc89 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 8001748:	2305      	movs	r3, #5
 800174a:	2202      	movs	r2, #2
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <DAC_SendInit+0x104>)
 800174e:	4809      	ldr	r0, [pc, #36]	; (8001774 <DAC_SendInit+0x10c>)
 8001750:	f004 feee 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	2110      	movs	r1, #16
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <DAC_SendInit+0x108>)
 800175a:	f002 fc7e 	bl	800405a <HAL_GPIO_WritePin>

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000920 	.word	0x20000920
 8001768:	20000910 	.word	0x20000910
 800176c:	2000091c 	.word	0x2000091c
 8001770:	40020000 	.word	0x40020000
 8001774:	200009e0 	.word	0x200009e0

08001778 <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b08e      	sub	sp, #56	; 0x38
 800177c:	af00      	add	r7, sp, #0
	uint32_t DAC_tx_buffer;
	uint16_t DAC_tx_tmp_buffer[2];

	uint8_t OK[]="OK\n\r";
 800177e:	4a5a      	ldr	r2, [pc, #360]	; (80018e8 <DAC_TEMP_CAL+0x170>)
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001788:	6018      	str	r0, [r3, #0]
 800178a:	3304      	adds	r3, #4
 800178c:	7019      	strb	r1, [r3, #0]
	uint8_t run_cal[]="\r\nCalibration in progress..";
 800178e:	4b57      	ldr	r3, [pc, #348]	; (80018ec <DAC_TEMP_CAL+0x174>)
 8001790:	f107 0408 	add.w	r4, r7, #8
 8001794:	461d      	mov	r5, r3
 8001796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800179e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	80bb      	strh	r3, [r7, #4]
 80017a6:	2300      	movs	r3, #0
 80017a8:	80fb      	strh	r3, [r7, #6]
 80017aa:	2300      	movs	r3, #0
 80017ac:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint8_t count_tmp=HAL_GPIO_ReadPin(COUNT_EN_GPIO_Port, COUNT_EN_Pin); // Save LDAC signal state
 80017ae:	2108      	movs	r1, #8
 80017b0:	484f      	ldr	r0, [pc, #316]	; (80018f0 <DAC_TEMP_CAL+0x178>)
 80017b2:	f002 fc3b 	bl	800402c <HAL_GPIO_ReadPin>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

//	DDS_prepare_to_tempcal();

	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 80017bc:	2201      	movs	r2, #1
 80017be:	2108      	movs	r1, #8
 80017c0:	484b      	ldr	r0, [pc, #300]	; (80018f0 <DAC_TEMP_CAL+0x178>)
 80017c2:	f002 fc4a 	bl	800405a <HAL_GPIO_WritePin>

	cfg.EN_TMP_CAL=1;
 80017c6:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <DAC_TEMP_CAL+0x17c>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
	DAC_SendInit();
 80017cc:	f7ff ff4c 	bl	8001668 <DAC_SendInit>
	HAL_Delay(10);
 80017d0:	200a      	movs	r0, #10
 80017d2:	f001 fddd 	bl	8003390 <HAL_Delay>

	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 80017d6:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <DAC_TEMP_CAL+0x180>)
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80017da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	b29b      	uxth	r3, r3
 80017e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80017e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

	DAC_tx_buffer=0x85000000; // read status register
 80017e8:	f04f 4305 	mov.w	r3, #2231369728	; 0x85000000
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30

	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80017ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f0:	0c1b      	lsrs	r3, r3, #16
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	803b      	strh	r3, [r7, #0]
	DAC_tx_tmp_buffer2[1]=(DAC_tx_buffer & 0x0000FFFF);
 80017f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2110      	movs	r1, #16
 8001800:	483e      	ldr	r0, [pc, #248]	; (80018fc <DAC_TEMP_CAL+0x184>)
 8001802:	f002 fc2a 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001806:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800180a:	2302      	movs	r3, #2
 800180c:	2202      	movs	r2, #2
 800180e:	483c      	ldr	r0, [pc, #240]	; (8001900 <DAC_TEMP_CAL+0x188>)
 8001810:	f004 fe8e 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	2110      	movs	r1, #16
 8001818:	4838      	ldr	r0, [pc, #224]	; (80018fc <DAC_TEMP_CAL+0x184>)
 800181a:	f002 fc1e 	bl	800405a <HAL_GPIO_WritePin>

	HAL_Delay(10);
 800181e:	200a      	movs	r0, #10
 8001820:	f001 fdb6 	bl	8003390 <HAL_Delay>
	CDC_Transmit_FS(run_cal, strlen((const char *)run_cal));
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fcb3 	bl	8000194 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f009 fea1 	bl	800b580 <CDC_Transmit_FS>
	HAL_Delay(500); // Wait some time....
 800183e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001842:	f001 fda5 	bl	8003390 <HAL_Delay>

	do{ // Check complete flag
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	2110      	movs	r1, #16
 800184a:	482c      	ldr	r0, [pc, #176]	; (80018fc <DAC_TEMP_CAL+0x184>)
 800184c:	f002 fc05 	bl	800405a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 8001850:	4639      	mov	r1, r7
 8001852:	2302      	movs	r3, #2
 8001854:	2202      	movs	r2, #2
 8001856:	482a      	ldr	r0, [pc, #168]	; (8001900 <DAC_TEMP_CAL+0x188>)
 8001858:	f004 fe6a 	bl	8006530 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	2110      	movs	r1, #16
 8001860:	4826      	ldr	r0, [pc, #152]	; (80018fc <DAC_TEMP_CAL+0x184>)
 8001862:	f002 fbfa 	bl	800405a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2110      	movs	r1, #16
 800186a:	4824      	ldr	r0, [pc, #144]	; (80018fc <DAC_TEMP_CAL+0x184>)
 800186c:	f002 fbf5 	bl	800405a <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 2, 2);
 8001870:	1d39      	adds	r1, r7, #4
 8001872:	2302      	movs	r3, #2
 8001874:	2202      	movs	r2, #2
 8001876:	4822      	ldr	r0, [pc, #136]	; (8001900 <DAC_TEMP_CAL+0x188>)
 8001878:	f004 ff96 	bl	80067a8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2110      	movs	r1, #16
 8001880:	481e      	ldr	r0, [pc, #120]	; (80018fc <DAC_TEMP_CAL+0x184>)
 8001882:	f002 fbea 	bl	800405a <HAL_GPIO_WritePin>
		ALM=(spi_receive[1] & 0x1000) >> 12;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	131b      	asrs	r3, r3, #12
 800188a:	b29b      	uxth	r3, r3
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	86fb      	strh	r3, [r7, #54]	; 0x36
		if(ALM!=1)HAL_Delay(1000);
 8001892:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001894:	2b01      	cmp	r3, #1
 8001896:	d003      	beq.n	80018a0 <DAC_TEMP_CAL+0x128>
 8001898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800189c:	f001 fd78 	bl	8003390 <HAL_Delay>
	}while(ALM!=1);
 80018a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d1cf      	bne.n	8001846 <DAC_TEMP_CAL+0xce>

	HAL_Delay(10);
 80018a6:	200a      	movs	r0, #10
 80018a8:	f001 fd72 	bl	8003390 <HAL_Delay>
	CDC_Transmit_FS(OK, strlen((const char *)OK));
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fc6f 	bl	8000194 <strlen>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f009 fe5d 	bl	800b580 <CDC_Transmit_FS>
	HAL_Delay(10);
 80018c6:	200a      	movs	r0, #10
 80018c8:	f001 fd62 	bl	8003390 <HAL_Delay>

	DDS_Init();
 80018cc:	f000 f81a 	bl	8001904 <DDS_Init>
	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, count_tmp); // Back LDAC signal state
 80018d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80018d4:	461a      	mov	r2, r3
 80018d6:	2108      	movs	r1, #8
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <DAC_TEMP_CAL+0x178>)
 80018da:	f002 fbbe 	bl	800405a <HAL_GPIO_WritePin>
}
 80018de:	bf00      	nop
 80018e0:	3738      	adds	r7, #56	; 0x38
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bdb0      	pop	{r4, r5, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	0800eb70 	.word	0x0800eb70
 80018ec:	0800eb78 	.word	0x0800eb78
 80018f0:	40020400 	.word	0x40020400
 80018f4:	20000910 	.word	0x20000910
 80018f8:	04000100 	.word	0x04000100
 80018fc:	40020000 	.word	0x40020000
 8001900:	200009e0 	.word	0x200009e0

08001904 <DDS_Init>:

//==============================================================================================
void DDS_Init(void)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];
	float hw_limit=1000; // 1(256)kHz hardware optimized limit
 800190a:	4b97      	ldr	r3, [pc, #604]	; (8001b68 <DDS_Init+0x264>)
 800190c:	60fb      	str	r3, [r7, #12]
	float dac_counts=1048576;
 800190e:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8001912:	60bb      	str	r3, [r7, #8]


	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001914:	4b95      	ldr	r3, [pc, #596]	; (8001b6c <DDS_Init+0x268>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a95      	ldr	r2, [pc, #596]	; (8001b70 <DDS_Init+0x26c>)
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fac8 	bl	8000eb4 <__aeabi_fdiv>
 8001924:	4603      	mov	r3, r0
 8001926:	4619      	mov	r1, r3
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	f7ff fac3 	bl	8000eb4 <__aeabi_fdiv>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	4b90      	ldr	r3, [pc, #576]	; (8001b74 <DDS_Init+0x270>)
 8001934:	601a      	str	r2, [r3, #0]

	if(DDS_target_frequecny>hw_limit)
 8001936:	4b8f      	ldr	r3, [pc, #572]	; (8001b74 <DDS_Init+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4619      	mov	r1, r3
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7ff fba3 	bl	8001088 <__aeabi_fcmplt>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d02e      	beq.n	80019a6 <DDS_Init+0xa2>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 8001948:	4b8a      	ldr	r3, [pc, #552]	; (8001b74 <DDS_Init+0x270>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68f9      	ldr	r1, [r7, #12]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fab0 	bl	8000eb4 <__aeabi_fdiv>
 8001954:	4603      	mov	r3, r0
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fbbe 	bl	80010d8 <__aeabi_f2uiz>
 800195c:	4603      	mov	r3, r0
 800195e:	4a86      	ldr	r2, [pc, #536]	; (8001b78 <DDS_Init+0x274>)
 8001960:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001962:	4b82      	ldr	r3, [pc, #520]	; (8001b6c <DDS_Init+0x268>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a82      	ldr	r2, [pc, #520]	; (8001b70 <DDS_Init+0x26c>)
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff faa1 	bl	8000eb4 <__aeabi_fdiv>
 8001972:	4603      	mov	r3, r0
 8001974:	4619      	mov	r1, r3
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f7ff fa9c 	bl	8000eb4 <__aeabi_fdiv>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	4b7c      	ldr	r3, [pc, #496]	; (8001b74 <DDS_Init+0x270>)
 8001982:	601a      	str	r2, [r3, #0]
		DDS_target_frequecny/=(float)DDS_target_multipiller;
 8001984:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <DDS_Init+0x270>)
 8001986:	681c      	ldr	r4, [r3, #0]
 8001988:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <DDS_Init+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f985 	bl	8000c9c <__aeabi_ui2f>
 8001992:	4603      	mov	r3, r0
 8001994:	4619      	mov	r1, r3
 8001996:	4620      	mov	r0, r4
 8001998:	f7ff fa8c 	bl	8000eb4 <__aeabi_fdiv>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	4b74      	ldr	r3, [pc, #464]	; (8001b74 <DDS_Init+0x270>)
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e002      	b.n	80019ac <DDS_Init+0xa8>
	} else DDS_target_multipiller = 1;
 80019a6:	4b74      	ldr	r3, [pc, #464]	; (8001b78 <DDS_Init+0x274>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

	float DDS_FTW=((DDS_target_frequecny*256)/DDS_clock_frequecny)*(float)0xFFFFFFFF;
 80019ac:	4b71      	ldr	r3, [pc, #452]	; (8001b74 <DDS_Init+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f9c9 	bl	8000d4c <__aeabi_fmul>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	4b6f      	ldr	r3, [pc, #444]	; (8001b7c <DDS_Init+0x278>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4619      	mov	r1, r3
 80019c4:	4610      	mov	r0, r2
 80019c6:	f7ff fa75 	bl	8000eb4 <__aeabi_fdiv>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f9bb 	bl	8000d4c <__aeabi_fmul>
 80019d6:	4603      	mov	r3, r0
 80019d8:	607b      	str	r3, [r7, #4]

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Control DDS (D15=1, D14=1)
 80019da:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019de:	803b      	strh	r3, [r7, #0]
	DDS_tx_buffer[0]+=1 << 12; // Enter DDS to Reset mode, RST (D12) = 1
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f0:	4863      	ldr	r0, [pc, #396]	; (8001b80 <DDS_Init+0x27c>)
 80019f2:	f002 fb32 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 80019f6:	4639      	mov	r1, r7
 80019f8:	2305      	movs	r3, #5
 80019fa:	2201      	movs	r2, #1
 80019fc:	4861      	ldr	r0, [pc, #388]	; (8001b84 <DDS_Init+0x280>)
 80019fe:	f004 fd97 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a08:	485d      	ldr	r0, [pc, #372]	; (8001b80 <DDS_Init+0x27c>)
 8001a0a:	f002 fb26 	bl	800405a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001a0e:	2005      	movs	r0, #5
 8001a10:	f001 fcbe 	bl	8003390 <HAL_Delay>

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001a14:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001a18:	803b      	strh	r3, [r7, #0]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001a1a:	883c      	ldrh	r4, [r7, #0]
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fb5b 	bl	80010d8 <__aeabi_f2uiz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	0e1b      	lsrs	r3, r3, #24
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4423      	add	r3, r4
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a34:	4852      	ldr	r0, [pc, #328]	; (8001b80 <DDS_Init+0x27c>)
 8001a36:	f002 fb10 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001a3a:	4639      	mov	r1, r7
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4850      	ldr	r0, [pc, #320]	; (8001b84 <DDS_Init+0x280>)
 8001a42:	f004 fd75 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4c:	484c      	ldr	r0, [pc, #304]	; (8001b80 <DDS_Init+0x27c>)
 8001a4e:	f002 fb04 	bl	800405a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001a52:	2005      	movs	r0, #5
 8001a54:	f001 fc9c 	bl	8003390 <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001a58:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001a5c:	803b      	strh	r3, [r7, #0]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001a5e:	883c      	ldrh	r4, [r7, #0]
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff fb39 	bl	80010d8 <__aeabi_f2uiz>
 8001a66:	4603      	mov	r3, r0
 8001a68:	0c1b      	lsrs	r3, r3, #16
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4423      	add	r3, r4
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7c:	4840      	ldr	r0, [pc, #256]	; (8001b80 <DDS_Init+0x27c>)
 8001a7e:	f002 faec 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001a82:	4639      	mov	r1, r7
 8001a84:	2305      	movs	r3, #5
 8001a86:	2201      	movs	r2, #1
 8001a88:	483e      	ldr	r0, [pc, #248]	; (8001b84 <DDS_Init+0x280>)
 8001a8a:	f004 fd51 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a94:	483a      	ldr	r0, [pc, #232]	; (8001b80 <DDS_Init+0x27c>)
 8001a96:	f002 fae0 	bl	800405a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001a9a:	2005      	movs	r0, #5
 8001a9c:	f001 fc78 	bl	8003390 <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001aa0:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001aa4:	803b      	strh	r3, [r7, #0]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001aa6:	883c      	ldrh	r4, [r7, #0]
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fb15 	bl	80010d8 <__aeabi_f2uiz>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4423      	add	r3, r4
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac4:	482e      	ldr	r0, [pc, #184]	; (8001b80 <DDS_Init+0x27c>)
 8001ac6:	f002 fac8 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001aca:	4639      	mov	r1, r7
 8001acc:	2305      	movs	r3, #5
 8001ace:	2201      	movs	r2, #1
 8001ad0:	482c      	ldr	r0, [pc, #176]	; (8001b84 <DDS_Init+0x280>)
 8001ad2:	f004 fd2d 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001adc:	4828      	ldr	r0, [pc, #160]	; (8001b80 <DDS_Init+0x27c>)
 8001ade:	f002 fabc 	bl	800405a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001ae2:	2005      	movs	r0, #5
 8001ae4:	f001 fc54 	bl	8003390 <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aec:	803b      	strh	r3, [r7, #0]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001aee:	883c      	ldrh	r4, [r7, #0]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff faf1 	bl	80010d8 <__aeabi_f2uiz>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4423      	add	r3, r4
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b0a:	481d      	ldr	r0, [pc, #116]	; (8001b80 <DDS_Init+0x27c>)
 8001b0c:	f002 faa5 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001b10:	4639      	mov	r1, r7
 8001b12:	2305      	movs	r3, #5
 8001b14:	2201      	movs	r2, #1
 8001b16:	481b      	ldr	r0, [pc, #108]	; (8001b84 <DDS_Init+0x280>)
 8001b18:	f004 fd0a 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b22:	4817      	ldr	r0, [pc, #92]	; (8001b80 <DDS_Init+0x27c>)
 8001b24:	f002 fa99 	bl	800405a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001b28:	2005      	movs	r0, #5
 8001b2a:	f001 fc31 	bl	8003390 <HAL_Delay>

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Exit DAC from Sleep+Reset mode
 8001b2e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b32:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3a:	4811      	ldr	r0, [pc, #68]	; (8001b80 <DDS_Init+0x27c>)
 8001b3c:	f002 fa8d 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001b40:	4639      	mov	r1, r7
 8001b42:	2305      	movs	r3, #5
 8001b44:	2201      	movs	r2, #1
 8001b46:	480f      	ldr	r0, [pc, #60]	; (8001b84 <DDS_Init+0x280>)
 8001b48:	f004 fcf2 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b52:	480b      	ldr	r0, [pc, #44]	; (8001b80 <DDS_Init+0x27c>)
 8001b54:	f002 fa81 	bl	800405a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001b58:	2005      	movs	r0, #5
 8001b5a:	f001 fc19 	bl	8003390 <HAL_Delay>

}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	447a0000 	.word	0x447a0000
 8001b6c:	2000095c 	.word	0x2000095c
 8001b70:	20000980 	.word	0x20000980
 8001b74:	20000930 	.word	0x20000930
 8001b78:	2000035c 	.word	0x2000035c
 8001b7c:	20000358 	.word	0x20000358
 8001b80:	40020400 	.word	0x40020400
 8001b84:	20000988 	.word	0x20000988

08001b88 <DDS_Update>:

//==============================================================================================
void DDS_Update(void)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];
	float hw_limit=1000; // 1(256)kHz hardware optimized limit
 8001b8e:	4b9f      	ldr	r3, [pc, #636]	; (8001e0c <DDS_Update+0x284>)
 8001b90:	617b      	str	r3, [r7, #20]
	float dac_counts=1048576;
 8001b92:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8001b96:	613b      	str	r3, [r7, #16]
	float corr_coeff;
	float dac_tmp=DAC_code;
 8001b98:	4b9d      	ldr	r3, [pc, #628]	; (8001e10 <DDS_Update+0x288>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f87d 	bl	8000c9c <__aeabi_ui2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60fb      	str	r3, [r7, #12]

	corr_coeff=corr_coeff_1*dac_tmp*dac_tmp;
 8001ba6:	4b9b      	ldr	r3, [pc, #620]	; (8001e14 <DDS_Update+0x28c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68f9      	ldr	r1, [r7, #12]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f8cd 	bl	8000d4c <__aeabi_fmul>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff f8c8 	bl	8000d4c <__aeabi_fmul>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60bb      	str	r3, [r7, #8]
	corr_coeff+=corr_coeff_2*dac_tmp;
 8001bc0:	4b95      	ldr	r3, [pc, #596]	; (8001e18 <DDS_Update+0x290>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68f9      	ldr	r1, [r7, #12]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f8c0 	bl	8000d4c <__aeabi_fmul>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	68b8      	ldr	r0, [r7, #8]
 8001bd2:	f7fe ffb3 	bl	8000b3c <__addsf3>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	60bb      	str	r3, [r7, #8]
	corr_coeff+=corr_coeff_3;
 8001bda:	4b90      	ldr	r3, [pc, #576]	; (8001e1c <DDS_Update+0x294>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	68b8      	ldr	r0, [r7, #8]
 8001be2:	f7fe ffab 	bl	8000b3c <__addsf3>
 8001be6:	4603      	mov	r3, r0
 8001be8:	60bb      	str	r3, [r7, #8]

	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001bea:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <DDS_Update+0x298>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a8d      	ldr	r2, [pc, #564]	; (8001e24 <DDS_Update+0x29c>)
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f95d 	bl	8000eb4 <__aeabi_fdiv>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	6938      	ldr	r0, [r7, #16]
 8001c00:	f7ff f958 	bl	8000eb4 <__aeabi_fdiv>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	4b87      	ldr	r3, [pc, #540]	; (8001e28 <DDS_Update+0x2a0>)
 8001c0a:	601a      	str	r2, [r3, #0]

	if(DDS_target_frequecny>hw_limit)
 8001c0c:	4b86      	ldr	r3, [pc, #536]	; (8001e28 <DDS_Update+0x2a0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7ff fa38 	bl	8001088 <__aeabi_fcmplt>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d02e      	beq.n	8001c7c <DDS_Update+0xf4>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 8001c1e:	4b82      	ldr	r3, [pc, #520]	; (8001e28 <DDS_Update+0x2a0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6979      	ldr	r1, [r7, #20]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff f945 	bl	8000eb4 <__aeabi_fdiv>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fa53 	bl	80010d8 <__aeabi_f2uiz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4a7d      	ldr	r2, [pc, #500]	; (8001e2c <DDS_Update+0x2a4>)
 8001c36:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001c38:	4b79      	ldr	r3, [pc, #484]	; (8001e20 <DDS_Update+0x298>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a79      	ldr	r2, [pc, #484]	; (8001e24 <DDS_Update+0x29c>)
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f936 	bl	8000eb4 <__aeabi_fdiv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6938      	ldr	r0, [r7, #16]
 8001c4e:	f7ff f931 	bl	8000eb4 <__aeabi_fdiv>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b74      	ldr	r3, [pc, #464]	; (8001e28 <DDS_Update+0x2a0>)
 8001c58:	601a      	str	r2, [r3, #0]
		DDS_target_frequecny/=(float)DDS_target_multipiller;
 8001c5a:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <DDS_Update+0x2a0>)
 8001c5c:	681c      	ldr	r4, [r3, #0]
 8001c5e:	4b73      	ldr	r3, [pc, #460]	; (8001e2c <DDS_Update+0x2a4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f81a 	bl	8000c9c <__aeabi_ui2f>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff f921 	bl	8000eb4 <__aeabi_fdiv>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b6c      	ldr	r3, [pc, #432]	; (8001e28 <DDS_Update+0x2a0>)
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e002      	b.n	8001c82 <DDS_Update+0xfa>
	} else DDS_target_multipiller = 1;
 8001c7c:	4b6b      	ldr	r3, [pc, #428]	; (8001e2c <DDS_Update+0x2a4>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

	float DDS_FTW=(((DDS_target_frequecny/corr_coeff)*256)/DDS_clock_frequecny)*(float)0xFFFFFFFF;
 8001c82:	4b69      	ldr	r3, [pc, #420]	; (8001e28 <DDS_Update+0x2a0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f913 	bl	8000eb4 <__aeabi_fdiv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f859 	bl	8000d4c <__aeabi_fmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b64      	ldr	r3, [pc, #400]	; (8001e30 <DDS_Update+0x2a8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	f7ff f905 	bl	8000eb4 <__aeabi_fdiv>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f84b 	bl	8000d4c <__aeabi_fmul>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	607b      	str	r3, [r7, #4]

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001cba:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001cbe:	803b      	strh	r3, [r7, #0]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001cc0:	883c      	ldrh	r4, [r7, #0]
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fa08 	bl	80010d8 <__aeabi_f2uiz>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	0e1b      	lsrs	r3, r3, #24
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4423      	add	r3, r4
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cda:	4856      	ldr	r0, [pc, #344]	; (8001e34 <DDS_Update+0x2ac>)
 8001cdc:	f002 f9bd 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ce0:	4639      	mov	r1, r7
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4854      	ldr	r0, [pc, #336]	; (8001e38 <DDS_Update+0x2b0>)
 8001ce8:	f004 fc22 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf2:	4850      	ldr	r0, [pc, #320]	; (8001e34 <DDS_Update+0x2ac>)
 8001cf4:	f002 f9b1 	bl	800405a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001cf8:	2005      	movs	r0, #5
 8001cfa:	f001 fb49 	bl	8003390 <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001cfe:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001d02:	803b      	strh	r3, [r7, #0]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001d04:	883c      	ldrh	r4, [r7, #0]
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff f9e6 	bl	80010d8 <__aeabi_f2uiz>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4423      	add	r3, r4
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d22:	4844      	ldr	r0, [pc, #272]	; (8001e34 <DDS_Update+0x2ac>)
 8001d24:	f002 f999 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001d28:	4639      	mov	r1, r7
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4842      	ldr	r0, [pc, #264]	; (8001e38 <DDS_Update+0x2b0>)
 8001d30:	f004 fbfe 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d3a:	483e      	ldr	r0, [pc, #248]	; (8001e34 <DDS_Update+0x2ac>)
 8001d3c:	f002 f98d 	bl	800405a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001d40:	2005      	movs	r0, #5
 8001d42:	f001 fb25 	bl	8003390 <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001d46:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001d4a:	803b      	strh	r3, [r7, #0]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001d4c:	883c      	ldrh	r4, [r7, #0]
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff f9c2 	bl	80010d8 <__aeabi_f2uiz>
 8001d54:	4603      	mov	r3, r0
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4423      	add	r3, r4
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6a:	4832      	ldr	r0, [pc, #200]	; (8001e34 <DDS_Update+0x2ac>)
 8001d6c:	f002 f975 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001d70:	4639      	mov	r1, r7
 8001d72:	2305      	movs	r3, #5
 8001d74:	2201      	movs	r2, #1
 8001d76:	4830      	ldr	r0, [pc, #192]	; (8001e38 <DDS_Update+0x2b0>)
 8001d78:	f004 fbda 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d82:	482c      	ldr	r0, [pc, #176]	; (8001e34 <DDS_Update+0x2ac>)
 8001d84:	f002 f969 	bl	800405a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001d88:	2005      	movs	r0, #5
 8001d8a:	f001 fb01 	bl	8003390 <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d92:	803b      	strh	r3, [r7, #0]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001d94:	883c      	ldrh	r4, [r7, #0]
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff f99e 	bl	80010d8 <__aeabi_f2uiz>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4423      	add	r3, r4
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001db0:	4820      	ldr	r0, [pc, #128]	; (8001e34 <DDS_Update+0x2ac>)
 8001db2:	f002 f952 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001db6:	4639      	mov	r1, r7
 8001db8:	2305      	movs	r3, #5
 8001dba:	2201      	movs	r2, #1
 8001dbc:	481e      	ldr	r0, [pc, #120]	; (8001e38 <DDS_Update+0x2b0>)
 8001dbe:	f004 fbb7 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc8:	481a      	ldr	r0, [pc, #104]	; (8001e34 <DDS_Update+0x2ac>)
 8001dca:	f002 f946 	bl	800405a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001dce:	2005      	movs	r0, #5
 8001dd0:	f001 fade 	bl	8003390 <HAL_Delay>

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0x9000; // Latch to output by synchonizing data. In this case, the SELSRC bit is again set to 1 using Command Bits [1:0] for C15 and C14.
 8001dd4:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001dd8:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001de0:	4814      	ldr	r0, [pc, #80]	; (8001e34 <DDS_Update+0x2ac>)
 8001de2:	f002 f93a 	bl	800405a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001de6:	4639      	mov	r1, r7
 8001de8:	2305      	movs	r3, #5
 8001dea:	2201      	movs	r2, #1
 8001dec:	4812      	ldr	r0, [pc, #72]	; (8001e38 <DDS_Update+0x2b0>)
 8001dee:	f004 fb9f 	bl	8006530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df8:	480e      	ldr	r0, [pc, #56]	; (8001e34 <DDS_Update+0x2ac>)
 8001dfa:	f002 f92e 	bl	800405a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001dfe:	2005      	movs	r0, #5
 8001e00:	f001 fac6 	bl	8003390 <HAL_Delay>

}
 8001e04:	bf00      	nop
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd90      	pop	{r4, r7, pc}
 8001e0c:	447a0000 	.word	0x447a0000
 8001e10:	200006d8 	.word	0x200006d8
 8001e14:	20000958 	.word	0x20000958
 8001e18:	20000928 	.word	0x20000928
 8001e1c:	20000924 	.word	0x20000924
 8001e20:	2000095c 	.word	0x2000095c
 8001e24:	20000980 	.word	0x20000980
 8001e28:	20000930 	.word	0x20000930
 8001e2c:	2000035c 	.word	0x2000035c
 8001e30:	20000358 	.word	0x20000358
 8001e34:	40020400 	.word	0x40020400
 8001e38:	20000988 	.word	0x20000988

08001e3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e52:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <MX_GPIO_Init+0x114>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a3e      	ldr	r2, [pc, #248]	; (8001f50 <MX_GPIO_Init+0x114>)
 8001e58:	f043 0320 	orr.w	r3, r3, #32
 8001e5c:	61d3      	str	r3, [r2, #28]
 8001e5e:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <MX_GPIO_Init+0x114>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <MX_GPIO_Init+0x114>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a38      	ldr	r2, [pc, #224]	; (8001f50 <MX_GPIO_Init+0x114>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	61d3      	str	r3, [r2, #28]
 8001e76:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <MX_GPIO_Init+0x114>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <MX_GPIO_Init+0x114>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a32      	ldr	r2, [pc, #200]	; (8001f50 <MX_GPIO_Init+0x114>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <MX_GPIO_Init+0x114>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2111      	movs	r1, #17
 8001e9e:	482d      	ldr	r0, [pc, #180]	; (8001f54 <MX_GPIO_Init+0x118>)
 8001ea0:	f002 f8db 	bl	800405a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|COUNT_EN_Pin, GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f241 0108 	movw	r1, #4104	; 0x1008
 8001eaa:	482b      	ldr	r0, [pc, #172]	; (8001f58 <MX_GPIO_Init+0x11c>)
 8001eac:	f002 f8d5 	bl	800405a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_CLR_Pin;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001eb4:	2311      	movs	r3, #17
 8001eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_CLR_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4823      	ldr	r0, [pc, #140]	; (8001f54 <MX_GPIO_Init+0x118>)
 8001ec8:	f001 ff30 	bl	8003d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	4619      	mov	r1, r3
 8001ede:	481d      	ldr	r0, [pc, #116]	; (8001f54 <MX_GPIO_Init+0x118>)
 8001ee0:	f001 ff24 	bl	8003d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CPU_LDAC_Pin;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ee8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CPU_LDAC_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4816      	ldr	r0, [pc, #88]	; (8001f54 <MX_GPIO_Init+0x118>)
 8001efa:	f001 ff17 	bl	8003d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8001efe:	2310      	movs	r3, #16
 8001f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f06:	2301      	movs	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	f107 030c 	add.w	r3, r7, #12
 8001f12:	4619      	mov	r1, r3
 8001f14:	480f      	ldr	r0, [pc, #60]	; (8001f54 <MX_GPIO_Init+0x118>)
 8001f16:	f001 ff09 	bl	8003d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|COUNT_EN_Pin;
 8001f1a:	f241 0308 	movw	r3, #4104	; 0x1008
 8001f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	4619      	mov	r1, r3
 8001f32:	4809      	ldr	r0, [pc, #36]	; (8001f58 <MX_GPIO_Init+0x11c>)
 8001f34:	f001 fefa 	bl	8003d2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2008      	movs	r0, #8
 8001f3e:	f001 fb20 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f42:	2008      	movs	r0, #8
 8001f44:	f001 fb39 	bl	80035ba <HAL_NVIC_EnableIRQ>

}
 8001f48:	bf00      	nop
 8001f4a:	3720      	adds	r7, #32
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400

08001f5c <USB_rx_command_buffer_push_refd>:
FunctionalState DAC_code_direction;

FunctionalState Need_update_DDS=0;

// #define CRICBUF_CLEAN_ON_POP
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4804      	ldr	r0, [pc, #16]	; (8001f78 <USB_rx_command_buffer_push_refd+0x1c>)
 8001f68:	f7ff fadc 	bl	8001524 <__circ_gbuf_push>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000360 	.word	0x20000360

08001f7c <USB_rx_command_buffer_pop_refd>:
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <USB_rx_command_buffer_pop_refd+0x1c>)
 8001f8a:	f7ff fa79 	bl	8001480 <__circ_gbuf_pop>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000360 	.word	0x20000360

08001f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <main+0x1a4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 8001fa8:	4b65      	ldr	r3, [pc, #404]	; (8002140 <main+0x1a4>)
 8001faa:	2208      	movs	r2, #8
 8001fac:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8001fae:	4b64      	ldr	r3, [pc, #400]	; (8002140 <main+0x1a4>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 8001fb4:	4b62      	ldr	r3, [pc, #392]	; (8002140 <main+0x1a4>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 8001fba:	4b61      	ldr	r3, [pc, #388]	; (8002140 <main+0x1a4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8001fc0:	4b5f      	ldr	r3, [pc, #380]	; (8002140 <main+0x1a4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 8001fc6:	4b5e      	ldr	r3, [pc, #376]	; (8002140 <main+0x1a4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 8001fcc:	4b5c      	ldr	r3, [pc, #368]	; (8002140 <main+0x1a4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 8001fd2:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <main+0x1a4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]

	DAC_target_speed=0.001; //  V/s
 8001fd8:	4b5a      	ldr	r3, [pc, #360]	; (8002144 <main+0x1a8>)
 8001fda:	4a5b      	ldr	r2, [pc, #364]	; (8002148 <main+0x1ac>)
 8001fdc:	601a      	str	r2, [r3, #0]
	DAC_code=0x7FFFF;
 8001fde:	4b5b      	ldr	r3, [pc, #364]	; (800214c <main+0x1b0>)
 8001fe0:	4a5b      	ldr	r2, [pc, #364]	; (8002150 <main+0x1b4>)
 8001fe2:	601a      	str	r2, [r3, #0]
	DAC_code_direction=0;
 8001fe4:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <main+0x1b8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fea:	f001 f962 	bl	80032b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fee:	f000 f8cd 	bl	800218c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff2:	f7ff ff23 	bl	8001e3c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001ff6:	f000 fe71 	bl	8002cdc <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ffa:	f000 fea7 	bl	8002d4c <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001ffe:	f009 f9bb 	bl	800b378 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002002:	f001 f8bd 	bl	8003180 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(20); //WarmUP
 8002006:	2014      	movs	r0, #20
 8002008:	f001 f9c2 	bl	8003390 <HAL_Delay>
	cal_DAC_up_voltage=((float)EEPROM_read(0x00))/1000000; // Read top voltage calibration from EEPROM in uV value
 800200c:	2000      	movs	r0, #0
 800200e:	f000 fe1b 	bl	8002c48 <EEPROM_read>
 8002012:	4603      	mov	r3, r0
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fe41 	bl	8000c9c <__aeabi_ui2f>
 800201a:	4603      	mov	r3, r0
 800201c:	494e      	ldr	r1, [pc, #312]	; (8002158 <main+0x1bc>)
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe ff48 	bl	8000eb4 <__aeabi_fdiv>
 8002024:	4603      	mov	r3, r0
 8002026:	461a      	mov	r2, r3
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <main+0x1c0>)
 800202a:	601a      	str	r2, [r3, #0]
	cal_DAC_down_voltage=((float)EEPROM_read(0x08))/-1000000; // Read top voltage calibration from EEPROM in uV value
 800202c:	2008      	movs	r0, #8
 800202e:	f000 fe0b 	bl	8002c48 <EEPROM_read>
 8002032:	4603      	mov	r3, r0
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fe31 	bl	8000c9c <__aeabi_ui2f>
 800203a:	4603      	mov	r3, r0
 800203c:	4948      	ldr	r1, [pc, #288]	; (8002160 <main+0x1c4>)
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe ff38 	bl	8000eb4 <__aeabi_fdiv>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	4b46      	ldr	r3, [pc, #280]	; (8002164 <main+0x1c8>)
 800204a:	601a      	str	r2, [r3, #0]

	corr_coeff_1=((float)EEPROM_read(0x10));
 800204c:	2010      	movs	r0, #16
 800204e:	f000 fdfb 	bl	8002c48 <EEPROM_read>
 8002052:	4603      	mov	r3, r0
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fe21 	bl	8000c9c <__aeabi_ui2f>
 800205a:	4603      	mov	r3, r0
 800205c:	4a42      	ldr	r2, [pc, #264]	; (8002168 <main+0x1cc>)
 800205e:	6013      	str	r3, [r2, #0]
	corr_coeff_2=((float)EEPROM_read(0x18));
 8002060:	2018      	movs	r0, #24
 8002062:	f000 fdf1 	bl	8002c48 <EEPROM_read>
 8002066:	4603      	mov	r3, r0
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fe17 	bl	8000c9c <__aeabi_ui2f>
 800206e:	4603      	mov	r3, r0
 8002070:	4a3e      	ldr	r2, [pc, #248]	; (800216c <main+0x1d0>)
 8002072:	6013      	str	r3, [r2, #0]
	corr_coeff_3=((float)EEPROM_read(0x20));
 8002074:	2020      	movs	r0, #32
 8002076:	f000 fde7 	bl	8002c48 <EEPROM_read>
 800207a:	4603      	mov	r3, r0
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fe0d 	bl	8000c9c <__aeabi_ui2f>
 8002082:	4603      	mov	r3, r0
 8002084:	4a3a      	ldr	r2, [pc, #232]	; (8002170 <main+0x1d4>)
 8002086:	6013      	str	r3, [r2, #0]

	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002088:	4b34      	ldr	r3, [pc, #208]	; (800215c <main+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a35      	ldr	r2, [pc, #212]	; (8002164 <main+0x1c8>)
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fd50 	bl	8000b38 <__aeabi_fsub>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	4b35      	ldr	r3, [pc, #212]	; (8002174 <main+0x1d8>)
 800209e:	601a      	str	r2, [r3, #0]

	DDS_Init();
 80020a0:	f7ff fc30 	bl	8001904 <DDS_Init>
	HAL_Delay(250); //WarmUP
 80020a4:	20fa      	movs	r0, #250	; 0xfa
 80020a6:	f001 f973 	bl	8003390 <HAL_Delay>
	DAC_SendInit();
 80020aa:	f7ff fadd 	bl	8001668 <DAC_SendInit>

	DAC_Write(DAC_code); //Middle
 80020ae:	4b27      	ldr	r3, [pc, #156]	; (800214c <main+0x1b0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fa84 	bl	80015c0 <DAC_Write>

	HAL_Delay(10);
 80020b8:	200a      	movs	r0, #10
 80020ba:	f001 f969 	bl	8003390 <HAL_Delay>
	CDC_Transmit_FS(clear, strlen((const char *)clear));
 80020be:	482e      	ldr	r0, [pc, #184]	; (8002178 <main+0x1dc>)
 80020c0:	f7fe f868 	bl	8000194 <strlen>
 80020c4:	4603      	mov	r3, r0
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4619      	mov	r1, r3
 80020ca:	482b      	ldr	r0, [pc, #172]	; (8002178 <main+0x1dc>)
 80020cc:	f009 fa58 	bl	800b580 <CDC_Transmit_FS>
	HAL_Delay(10);
 80020d0:	200a      	movs	r0, #10
 80020d2:	f001 f95d 	bl	8003390 <HAL_Delay>

	HAL_TIM_Base_Start_IT(&htim3);
 80020d6:	4829      	ldr	r0, [pc, #164]	; (800217c <main+0x1e0>)
 80020d8:	f005 f88e 	bl	80071f8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(USB_CDC_End_Line_Received)
 80020dc:	4b28      	ldr	r3, [pc, #160]	; (8002180 <main+0x1e4>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d021      	beq.n	800212a <main+0x18e>
		{
			uint8_t i=0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	71fb      	strb	r3, [r7, #7]
			USB_CDC_End_Line_Received=0;
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <main+0x1e4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
			while (1) {
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	4a24      	ldr	r2, [pc, #144]	; (8002184 <main+0x1e8>)
 80020f4:	4413      	add	r3, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff40 	bl	8001f7c <USB_rx_command_buffer_pop_refd>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <main+0x16e>
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <main+0x1e8>)
 8002106:	210a      	movs	r1, #10
 8002108:	54d1      	strb	r1, [r2, r3]
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <main+0x1e8>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	2b0a      	cmp	r3, #10
 8002112:	d008      	beq.n	8002126 <main+0x18a>
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <main+0x1e8>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	2b0d      	cmp	r3, #13
 800211c:	d003      	beq.n	8002126 <main+0x18a>
				i++;
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	3301      	adds	r3, #1
 8002122:	71fb      	strb	r3, [r7, #7]
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8002124:	e7e4      	b.n	80020f0 <main+0x154>
			}
			Parsing_command();
 8002126:	f000 f94b 	bl	80023c0 <Parsing_command>
		}

		if(Need_update_DDS)
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <main+0x1ec>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0d4      	beq.n	80020dc <main+0x140>
		{
			Need_update_DDS=0;
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <main+0x1ec>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
			DDS_Update();
 8002138:	f7ff fd26 	bl	8001b88 <DDS_Update>
		if(USB_CDC_End_Line_Received)
 800213c:	e7ce      	b.n	80020dc <main+0x140>
 800213e:	bf00      	nop
 8002140:	20000910 	.word	0x20000910
 8002144:	20000980 	.word	0x20000980
 8002148:	3a83126f 	.word	0x3a83126f
 800214c:	200006d8 	.word	0x200006d8
 8002150:	0007ffff 	.word	0x0007ffff
 8002154:	20000984 	.word	0x20000984
 8002158:	49742400 	.word	0x49742400
 800215c:	20000954 	.word	0x20000954
 8002160:	c9742400 	.word	0xc9742400
 8002164:	2000092c 	.word	0x2000092c
 8002168:	20000958 	.word	0x20000958
 800216c:	20000928 	.word	0x20000928
 8002170:	20000924 	.word	0x20000924
 8002174:	2000095c 	.word	0x2000095c
 8002178:	20000000 	.word	0x20000000
 800217c:	20000a38 	.word	0x20000a38
 8002180:	2000097f 	.word	0x2000097f
 8002184:	20000960 	.word	0x20000960
 8002188:	200006dc 	.word	0x200006dc

0800218c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b092      	sub	sp, #72	; 0x48
 8002190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	2234      	movs	r2, #52	; 0x34
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f009 fe1e 	bl	800bddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a0:	463b      	mov	r3, r7
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
 80021ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <SystemClock_Config+0x94>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80021b6:	4a1a      	ldr	r2, [pc, #104]	; (8002220 <SystemClock_Config+0x94>)
 80021b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021bc:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021be:	2301      	movs	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021c2:	2301      	movs	r3, #1
 80021c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c6:	2302      	movs	r3, #2
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80021d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80021d6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fb97 	bl	8005914 <HAL_RCC_OscConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80021ec:	f000 fd70 	bl	8002cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f0:	230f      	movs	r3, #15
 80021f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f4:	2303      	movs	r3, #3
 80021f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002204:	463b      	mov	r3, r7
 8002206:	2101      	movs	r1, #1
 8002208:	4618      	mov	r0, r3
 800220a:	f003 feb3 	bl	8005f74 <HAL_RCC_ClockConfig>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002214:	f000 fd5c 	bl	8002cd0 <Error_Handler>
  }
}
 8002218:	bf00      	nop
 800221a:	3748      	adds	r7, #72	; 0x48
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40007000 	.word	0x40007000

08002224 <HAL_TIM_PeriodElapsedCallback>:
//==============================================================================================


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim3 )
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d102      	bne.n	800223a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    Need_update_DDS=1;
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	20000a38 	.word	0x20000a38
 8002248:	200006dc 	.word	0x200006dc

0800224c <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
	DAC_Write_FAST();
 8002256:	f7ff f9ed 	bl	8001634 <DAC_Write_FAST>

	if(GPIO_Pin == GPIO_PIN_2)
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	2b04      	cmp	r3, #4
 800225e:	f040 8082 	bne.w	8002366 <HAL_GPIO_EXTI_Callback+0x11a>
	{
		if(DAC_code_direction)
 8002262:	4b42      	ldr	r3, [pc, #264]	; (800236c <HAL_GPIO_EXTI_Callback+0x120>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d040      	beq.n	80022ec <HAL_GPIO_EXTI_Callback+0xa0>
		{
			if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <HAL_GPIO_EXTI_Callback+0x124>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8002272:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002276:	4a3f      	ldr	r2, [pc, #252]	; (8002374 <HAL_GPIO_EXTI_Callback+0x128>)
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	4293      	cmp	r3, r2
 800227c:	d322      	bcc.n	80022c4 <HAL_GPIO_EXTI_Callback+0x78>
			{
				DAC_code+=DDS_target_multipiller;
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_GPIO_EXTI_Callback+0x128>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_GPIO_EXTI_Callback+0x124>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a3a      	ldr	r2, [pc, #232]	; (8002374 <HAL_GPIO_EXTI_Callback+0x128>)
 800228a:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 800228c:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <HAL_GPIO_EXTI_Callback+0x12c>)
 800228e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002292:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8002294:	4b37      	ldr	r3, [pc, #220]	; (8002374 <HAL_GPIO_EXTI_Callback+0x128>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800229e:	f023 030f 	bic.w	r3, r3, #15
 80022a2:	4a35      	ldr	r2, [pc, #212]	; (8002378 <HAL_GPIO_EXTI_Callback+0x12c>)
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a33      	ldr	r2, [pc, #204]	; (8002378 <HAL_GPIO_EXTI_Callback+0x12c>)
 80022aa:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80022ac:	4b32      	ldr	r3, [pc, #200]	; (8002378 <HAL_GPIO_EXTI_Callback+0x12c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_GPIO_EXTI_Callback+0x130>)
 80022b6:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80022b8:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <HAL_GPIO_EXTI_Callback+0x12c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4b2f      	ldr	r3, [pc, #188]	; (800237c <HAL_GPIO_EXTI_Callback+0x130>)
 80022c0:	805a      	strh	r2, [r3, #2]
 80022c2:	e050      	b.n	8002366 <HAL_GPIO_EXTI_Callback+0x11a>

			} else  {
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 80022c4:	2201      	movs	r2, #1
 80022c6:	2108      	movs	r1, #8
 80022c8:	482d      	ldr	r0, [pc, #180]	; (8002380 <HAL_GPIO_EXTI_Callback+0x134>)
 80022ca:	f001 fec6 	bl	800405a <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_GPIO_EXTI_Callback+0x138>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 80022d4:	f7ff f9c8 	bl	8001668 <DAC_SendInit>
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 80022d8:	482b      	ldr	r0, [pc, #172]	; (8002388 <HAL_GPIO_EXTI_Callback+0x13c>)
 80022da:	f7fd ff5b 	bl	8000194 <strlen>
 80022de:	4603      	mov	r3, r0
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4619      	mov	r1, r3
 80022e4:	4828      	ldr	r0, [pc, #160]	; (8002388 <HAL_GPIO_EXTI_Callback+0x13c>)
 80022e6:	f009 f94b 	bl	800b580 <CDC_Transmit_FS>
				return;
 80022ea:	e03c      	b.n	8002366 <HAL_GPIO_EXTI_Callback+0x11a>
			}
		}
		else
		{
			if(DAC_code>=DDS_target_multipiller)
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_GPIO_EXTI_Callback+0x128>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <HAL_GPIO_EXTI_Callback+0x124>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d322      	bcc.n	800233e <HAL_GPIO_EXTI_Callback+0xf2>
			{
				DAC_code-=DDS_target_multipiller;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_GPIO_EXTI_Callback+0x128>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_GPIO_EXTI_Callback+0x124>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	4a1c      	ldr	r2, [pc, #112]	; (8002374 <HAL_GPIO_EXTI_Callback+0x128>)
 8002304:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800230c:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_GPIO_EXTI_Callback+0x128>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002318:	f023 030f 	bic.w	r3, r3, #15
 800231c:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_GPIO_EXTI_Callback+0x12c>)
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	4413      	add	r3, r2
 8002322:	4a15      	ldr	r2, [pc, #84]	; (8002378 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002324:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	b29a      	uxth	r2, r3
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <HAL_GPIO_EXTI_Callback+0x130>)
 8002330:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29a      	uxth	r2, r3
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <HAL_GPIO_EXTI_Callback+0x130>)
 800233a:	805a      	strh	r2, [r3, #2]
 800233c:	e013      	b.n	8002366 <HAL_GPIO_EXTI_Callback+0x11a>

			} else {
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 800233e:	2201      	movs	r2, #1
 8002340:	2108      	movs	r1, #8
 8002342:	480f      	ldr	r0, [pc, #60]	; (8002380 <HAL_GPIO_EXTI_Callback+0x134>)
 8002344:	f001 fe89 	bl	800405a <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_GPIO_EXTI_Callback+0x138>)
 800234a:	2200      	movs	r2, #0
 800234c:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 800234e:	f7ff f98b 	bl	8001668 <DAC_SendInit>
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 8002352:	480d      	ldr	r0, [pc, #52]	; (8002388 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002354:	f7fd ff1e 	bl	8000194 <strlen>
 8002358:	4603      	mov	r3, r0
 800235a:	b29b      	uxth	r3, r3
 800235c:	4619      	mov	r1, r3
 800235e:	480a      	ldr	r0, [pc, #40]	; (8002388 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002360:	f009 f90e 	bl	800b580 <CDC_Transmit_FS>
				return;
 8002364:	bf00      	nop
			}
		}
	}
}
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000984 	.word	0x20000984
 8002370:	2000035c 	.word	0x2000035c
 8002374:	200006d8 	.word	0x200006d8
 8002378:	20000920 	.word	0x20000920
 800237c:	2000091c 	.word	0x2000091c
 8002380:	40020400 	.word	0x40020400
 8002384:	20000910 	.word	0x20000910
 8002388:	20000340 	.word	0x20000340

0800238c <Write_to_circ_buffer>:

//==============================================================================================
void Write_to_circ_buffer(uint8_t Buf)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 8002396:	1dfb      	adds	r3, r7, #7
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fddf 	bl	8001f5c <USB_rx_command_buffer_push_refd>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <Write_to_circ_buffer+0x24>
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <Write_to_circ_buffer+0x2c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	809a      	strh	r2, [r3, #4]
 80023aa:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <Write_to_circ_buffer+0x2c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	80da      	strh	r2, [r3, #6]
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000360 	.word	0x20000360
 80023bc:	00000000 	.word	0x00000000

080023c0 <Parsing_command>:

//==============================================================================================
void Parsing_command(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b094      	sub	sp, #80	; 0x50
 80023c4:	af00      	add	r7, sp, #0
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];
	float dac_resolution;

	found = strtok((char *)command_buffer," ");
 80023c6:	49bd      	ldr	r1, [pc, #756]	; (80026bc <Parsing_command+0x2fc>)
 80023c8:	48bd      	ldr	r0, [pc, #756]	; (80026c0 <Parsing_command+0x300>)
 80023ca:	f00a fb39 	bl	800ca40 <strtok>
 80023ce:	64b8      	str	r0, [r7, #72]	; 0x48
	if(found!=NULL)
 80023d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00e      	beq.n	80023f4 <Parsing_command+0x34>
	{
		strcpy(decoded_string_1,found);
 80023d6:	f107 0320 	add.w	r3, r7, #32
 80023da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80023dc:	4618      	mov	r0, r3
 80023de:	f009 fd05 	bl	800bdec <strcpy>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
		HAL_Delay(10);
		return;
	}

	found = strtok(NULL,"\r");
 80023e2:	49b8      	ldr	r1, [pc, #736]	; (80026c4 <Parsing_command+0x304>)
 80023e4:	2000      	movs	r0, #0
 80023e6:	f00a fb2b 	bl	800ca40 <strtok>
 80023ea:	64b8      	str	r0, [r7, #72]	; 0x48
	if(found!=NULL)
 80023ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d02f      	beq.n	8002452 <Parsing_command+0x92>
 80023f2:	e00f      	b.n	8002414 <Parsing_command+0x54>
		HAL_Delay(10);
 80023f4:	200a      	movs	r0, #10
 80023f6:	f000 ffcb 	bl	8003390 <HAL_Delay>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 80023fa:	48b3      	ldr	r0, [pc, #716]	; (80026c8 <Parsing_command+0x308>)
 80023fc:	f7fd feca 	bl	8000194 <strlen>
 8002400:	4603      	mov	r3, r0
 8002402:	b29b      	uxth	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	48b0      	ldr	r0, [pc, #704]	; (80026c8 <Parsing_command+0x308>)
 8002408:	f009 f8ba 	bl	800b580 <CDC_Transmit_FS>
		HAL_Delay(10);
 800240c:	200a      	movs	r0, #10
 800240e:	f000 ffbf 	bl	8003390 <HAL_Delay>
		return;
 8002412:	e3ec      	b.n	8002bee <Parsing_command+0x82e>
	{
		strcpy(decoded_string_2,found);
 8002414:	463b      	mov	r3, r7
 8002416:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002418:	4618      	mov	r0, r3
 800241a:	f009 fce7 	bl	800bdec <strcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 800241e:	2300      	movs	r3, #0
 8002420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002422:	e00d      	b.n	8002440 <Parsing_command+0x80>
 8002424:	463a      	mov	r2, r7
 8002426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002428:	4413      	add	r3, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b20      	cmp	r3, #32
 800242e:	d104      	bne.n	800243a <Parsing_command+0x7a>
 8002430:	463a      	mov	r2, r7
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	4413      	add	r3, r2
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243c:	3301      	adds	r3, #1
 800243e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002440:	463b      	mov	r3, r7
 8002442:	4618      	mov	r0, r3
 8002444:	f7fd fea6 	bl	8000194 <strlen>
 8002448:	4602      	mov	r2, r0
 800244a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800244c:	429a      	cmp	r2, r3
 800244e:	d8e9      	bhi.n	8002424 <Parsing_command+0x64>
 8002450:	e00f      	b.n	8002472 <Parsing_command+0xb2>
	}
	else
	{
		HAL_Delay(10);
 8002452:	200a      	movs	r0, #10
 8002454:	f000 ff9c 	bl	8003390 <HAL_Delay>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002458:	489b      	ldr	r0, [pc, #620]	; (80026c8 <Parsing_command+0x308>)
 800245a:	f7fd fe9b 	bl	8000194 <strlen>
 800245e:	4603      	mov	r3, r0
 8002460:	b29b      	uxth	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	4898      	ldr	r0, [pc, #608]	; (80026c8 <Parsing_command+0x308>)
 8002466:	f009 f88b 	bl	800b580 <CDC_Transmit_FS>
		HAL_Delay(10);
 800246a:	200a      	movs	r0, #10
 800246c:	f000 ff90 	bl	8003390 <HAL_Delay>
		return;
 8002470:	e3bd      	b.n	8002bee <Parsing_command+0x82e>
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8002472:	f107 0320 	add.w	r3, r7, #32
 8002476:	4995      	ldr	r1, [pc, #596]	; (80026cc <Parsing_command+0x30c>)
 8002478:	4618      	mov	r0, r3
 800247a:	f7fd fe81 	bl	8000180 <strcmp>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d157      	bne.n	8002534 <Parsing_command+0x174>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8002484:	463b      	mov	r3, r7
 8002486:	4992      	ldr	r1, [pc, #584]	; (80026d0 <Parsing_command+0x310>)
 8002488:	4618      	mov	r0, r3
 800248a:	f7fd fe79 	bl	8000180 <strcmp>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d11d      	bne.n	80024d0 <Parsing_command+0x110>
			DAC_TEMP_CAL();
 8002494:	f7ff f970 	bl	8001778 <DAC_TEMP_CAL>
			HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_RESET); // Enable LDAC signal
 8002498:	2200      	movs	r2, #0
 800249a:	2108      	movs	r1, #8
 800249c:	488d      	ldr	r0, [pc, #564]	; (80026d4 <Parsing_command+0x314>)
 800249e:	f001 fddc 	bl	800405a <HAL_GPIO_WritePin>
			cfg.LDACMODE=1;
 80024a2:	4b8d      	ldr	r3, [pc, #564]	; (80026d8 <Parsing_command+0x318>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 80024a8:	f7ff f8de 	bl	8001668 <DAC_SendInit>
			DDS_Init();
 80024ac:	f7ff fa2a 	bl	8001904 <DDS_Init>
			HAL_Delay(10);
 80024b0:	200a      	movs	r0, #10
 80024b2:	f000 ff6d 	bl	8003390 <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 80024b6:	4889      	ldr	r0, [pc, #548]	; (80026dc <Parsing_command+0x31c>)
 80024b8:	f7fd fe6c 	bl	8000194 <strlen>
 80024bc:	4603      	mov	r3, r0
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4619      	mov	r1, r3
 80024c2:	4886      	ldr	r0, [pc, #536]	; (80026dc <Parsing_command+0x31c>)
 80024c4:	f009 f85c 	bl	800b580 <CDC_Transmit_FS>
			HAL_Delay(10);
 80024c8:	200a      	movs	r0, #10
 80024ca:	f000 ff61 	bl	8003390 <HAL_Delay>
			return;
 80024ce:	e38e      	b.n	8002bee <Parsing_command+0x82e>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP"))){
 80024d0:	463b      	mov	r3, r7
 80024d2:	4983      	ldr	r1, [pc, #524]	; (80026e0 <Parsing_command+0x320>)
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd fe53 	bl	8000180 <strcmp>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d119      	bne.n	8002514 <Parsing_command+0x154>
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 80024e0:	2201      	movs	r2, #1
 80024e2:	2108      	movs	r1, #8
 80024e4:	487b      	ldr	r0, [pc, #492]	; (80026d4 <Parsing_command+0x314>)
 80024e6:	f001 fdb8 	bl	800405a <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 80024ea:	4b7b      	ldr	r3, [pc, #492]	; (80026d8 <Parsing_command+0x318>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 80024f0:	f7ff f8ba 	bl	8001668 <DAC_SendInit>
				HAL_Delay(10);
 80024f4:	200a      	movs	r0, #10
 80024f6:	f000 ff4b 	bl	8003390 <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 80024fa:	4878      	ldr	r0, [pc, #480]	; (80026dc <Parsing_command+0x31c>)
 80024fc:	f7fd fe4a 	bl	8000194 <strlen>
 8002500:	4603      	mov	r3, r0
 8002502:	b29b      	uxth	r3, r3
 8002504:	4619      	mov	r1, r3
 8002506:	4875      	ldr	r0, [pc, #468]	; (80026dc <Parsing_command+0x31c>)
 8002508:	f009 f83a 	bl	800b580 <CDC_Transmit_FS>
				HAL_Delay(10);
 800250c:	200a      	movs	r0, #10
 800250e:	f000 ff3f 	bl	8003390 <HAL_Delay>
				return;
 8002512:	e36c      	b.n	8002bee <Parsing_command+0x82e>
			}
			else
			{
				HAL_Delay(10);
 8002514:	200a      	movs	r0, #10
 8002516:	f000 ff3b 	bl	8003390 <HAL_Delay>
				CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 800251a:	486b      	ldr	r0, [pc, #428]	; (80026c8 <Parsing_command+0x308>)
 800251c:	f7fd fe3a 	bl	8000194 <strlen>
 8002520:	4603      	mov	r3, r0
 8002522:	b29b      	uxth	r3, r3
 8002524:	4619      	mov	r1, r3
 8002526:	4868      	ldr	r0, [pc, #416]	; (80026c8 <Parsing_command+0x308>)
 8002528:	f009 f82a 	bl	800b580 <CDC_Transmit_FS>
				HAL_Delay(10);
 800252c:	200a      	movs	r0, #10
 800252e:	f000 ff2f 	bl	8003390 <HAL_Delay>
				return;
 8002532:	e35c      	b.n	8002bee <Parsing_command+0x82e>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 8002534:	f107 0320 	add.w	r3, r7, #32
 8002538:	496a      	ldr	r1, [pc, #424]	; (80026e4 <Parsing_command+0x324>)
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd fe20 	bl	8000180 <strcmp>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	f040 80e2 	bne.w	800270c <Parsing_command+0x34c>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 8002548:	463b      	mov	r3, r7
 800254a:	4967      	ldr	r1, [pc, #412]	; (80026e8 <Parsing_command+0x328>)
 800254c:	4618      	mov	r0, r3
 800254e:	f7fd fe17 	bl	8000180 <strcmp>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d11f      	bne.n	8002598 <Parsing_command+0x1d8>
			DAC_code=0xFFFFF;
 8002558:	4b64      	ldr	r3, [pc, #400]	; (80026ec <Parsing_command+0x32c>)
 800255a:	4a65      	ldr	r2, [pc, #404]	; (80026f0 <Parsing_command+0x330>)
 800255c:	601a      	str	r2, [r3, #0]
			DAC_code_direction=0;
 800255e:	4b65      	ldr	r3, [pc, #404]	; (80026f4 <Parsing_command+0x334>)
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
			cfg.LDACMODE=0;
 8002564:	4b5c      	ldr	r3, [pc, #368]	; (80026d8 <Parsing_command+0x318>)
 8002566:	2200      	movs	r2, #0
 8002568:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 800256a:	f7ff f87d 	bl	8001668 <DAC_SendInit>
			DAC_Write(DAC_code);
 800256e:	4b5f      	ldr	r3, [pc, #380]	; (80026ec <Parsing_command+0x32c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f824 	bl	80015c0 <DAC_Write>
			HAL_Delay(10);
 8002578:	200a      	movs	r0, #10
 800257a:	f000 ff09 	bl	8003390 <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 800257e:	4857      	ldr	r0, [pc, #348]	; (80026dc <Parsing_command+0x31c>)
 8002580:	f7fd fe08 	bl	8000194 <strlen>
 8002584:	4603      	mov	r3, r0
 8002586:	b29b      	uxth	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	4854      	ldr	r0, [pc, #336]	; (80026dc <Parsing_command+0x31c>)
 800258c:	f008 fff8 	bl	800b580 <CDC_Transmit_FS>
			HAL_Delay(10);
 8002590:	200a      	movs	r0, #10
 8002592:	f000 fefd 	bl	8003390 <HAL_Delay>
			return;
 8002596:	e32a      	b.n	8002bee <Parsing_command+0x82e>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8002598:	463b      	mov	r3, r7
 800259a:	4957      	ldr	r1, [pc, #348]	; (80026f8 <Parsing_command+0x338>)
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fdef 	bl	8000180 <strcmp>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d11f      	bne.n	80025e8 <Parsing_command+0x228>
				DAC_code=0x0;
 80025a8:	4b50      	ldr	r3, [pc, #320]	; (80026ec <Parsing_command+0x32c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
				DAC_code_direction=1;
 80025ae:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <Parsing_command+0x334>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
				cfg.LDACMODE=0;
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <Parsing_command+0x318>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 80025ba:	f7ff f855 	bl	8001668 <DAC_SendInit>
				DAC_Write(DAC_code);
 80025be:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <Parsing_command+0x32c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fffc 	bl	80015c0 <DAC_Write>
				HAL_Delay(10);
 80025c8:	200a      	movs	r0, #10
 80025ca:	f000 fee1 	bl	8003390 <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 80025ce:	4843      	ldr	r0, [pc, #268]	; (80026dc <Parsing_command+0x31c>)
 80025d0:	f7fd fde0 	bl	8000194 <strlen>
 80025d4:	4603      	mov	r3, r0
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4619      	mov	r1, r3
 80025da:	4840      	ldr	r0, [pc, #256]	; (80026dc <Parsing_command+0x31c>)
 80025dc:	f008 ffd0 	bl	800b580 <CDC_Transmit_FS>
				HAL_Delay(10);
 80025e0:	200a      	movs	r0, #10
 80025e2:	f000 fed5 	bl	8003390 <HAL_Delay>
				return;
 80025e6:	e302      	b.n	8002bee <Parsing_command+0x82e>
			}
			else
			{
				atof_tmp=atof(decoded_string_2);
 80025e8:	463b      	mov	r3, r7
 80025ea:	4618      	mov	r0, r3
 80025ec:	f009 fbba 	bl	800bd64 <atof>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f7fe fa4a 	bl	8000a90 <__aeabi_d2f>
 80025fc:	4603      	mov	r3, r0
 80025fe:	647b      	str	r3, [r7, #68]	; 0x44
				if(atof_tmp>=cal_DAC_down_voltage && atof_tmp<=cal_DAC_up_voltage)
 8002600:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <Parsing_command+0x33c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002608:	f7fe fd52 	bl	80010b0 <__aeabi_fcmpge>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d043      	beq.n	800269a <Parsing_command+0x2da>
 8002612:	4b3b      	ldr	r3, [pc, #236]	; (8002700 <Parsing_command+0x340>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800261a:	f7fe fd3f 	bl	800109c <__aeabi_fcmple>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03a      	beq.n	800269a <Parsing_command+0x2da>
				{
					dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 8002624:	4b36      	ldr	r3, [pc, #216]	; (8002700 <Parsing_command+0x340>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a34      	ldr	r2, [pc, #208]	; (80026fc <Parsing_command+0x33c>)
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fa82 	bl	8000b38 <__aeabi_fsub>
 8002634:	4603      	mov	r3, r0
 8002636:	4933      	ldr	r1, [pc, #204]	; (8002704 <Parsing_command+0x344>)
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fc3b 	bl	8000eb4 <__aeabi_fdiv>
 800263e:	4603      	mov	r3, r0
 8002640:	643b      	str	r3, [r7, #64]	; 0x40
					DAC_code=(uint32_t)((atof_tmp-cal_DAC_down_voltage)/dac_resolution);
 8002642:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <Parsing_command+0x33c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4619      	mov	r1, r3
 8002648:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800264a:	f7fe fa75 	bl	8000b38 <__aeabi_fsub>
 800264e:	4603      	mov	r3, r0
 8002650:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fc2e 	bl	8000eb4 <__aeabi_fdiv>
 8002658:	4603      	mov	r3, r0
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fd3c 	bl	80010d8 <__aeabi_f2uiz>
 8002660:	4603      	mov	r3, r0
 8002662:	4a22      	ldr	r2, [pc, #136]	; (80026ec <Parsing_command+0x32c>)
 8002664:	6013      	str	r3, [r2, #0]

					cfg.LDACMODE=0;
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <Parsing_command+0x318>)
 8002668:	2200      	movs	r2, #0
 800266a:	709a      	strb	r2, [r3, #2]
					DAC_TEMP_CAL();
 800266c:	f7ff f884 	bl	8001778 <DAC_TEMP_CAL>
					DAC_Write(DAC_code);
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <Parsing_command+0x32c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe ffa3 	bl	80015c0 <DAC_Write>

					HAL_Delay(10);
 800267a:	200a      	movs	r0, #10
 800267c:	f000 fe88 	bl	8003390 <HAL_Delay>
					CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002680:	4816      	ldr	r0, [pc, #88]	; (80026dc <Parsing_command+0x31c>)
 8002682:	f7fd fd87 	bl	8000194 <strlen>
 8002686:	4603      	mov	r3, r0
 8002688:	b29b      	uxth	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	4813      	ldr	r0, [pc, #76]	; (80026dc <Parsing_command+0x31c>)
 800268e:	f008 ff77 	bl	800b580 <CDC_Transmit_FS>
					HAL_Delay(10);
 8002692:	200a      	movs	r0, #10
 8002694:	f000 fe7c 	bl	8003390 <HAL_Delay>
					return;
 8002698:	e2a9      	b.n	8002bee <Parsing_command+0x82e>
				}
				else
				{
					HAL_Delay(10);
 800269a:	200a      	movs	r0, #10
 800269c:	f000 fe78 	bl	8003390 <HAL_Delay>
					CDC_Transmit_FS(Error2, strlen((const char *)Error2));  // SEND ERROR TO CDC!!!
 80026a0:	4819      	ldr	r0, [pc, #100]	; (8002708 <Parsing_command+0x348>)
 80026a2:	f7fd fd77 	bl	8000194 <strlen>
 80026a6:	4603      	mov	r3, r0
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	4816      	ldr	r0, [pc, #88]	; (8002708 <Parsing_command+0x348>)
 80026ae:	f008 ff67 	bl	800b580 <CDC_Transmit_FS>
					HAL_Delay(10);
 80026b2:	200a      	movs	r0, #10
 80026b4:	f000 fe6c 	bl	8003390 <HAL_Delay>
					return;
 80026b8:	e299      	b.n	8002bee <Parsing_command+0x82e>
 80026ba:	bf00      	nop
 80026bc:	0800eb94 	.word	0x0800eb94
 80026c0:	20000960 	.word	0x20000960
 80026c4:	0800eb98 	.word	0x0800eb98
 80026c8:	20000008 	.word	0x20000008
 80026cc:	0800eb9c 	.word	0x0800eb9c
 80026d0:	0800eba4 	.word	0x0800eba4
 80026d4:	40020400 	.word	0x40020400
 80026d8:	20000910 	.word	0x20000910
 80026dc:	200002fc 	.word	0x200002fc
 80026e0:	0800ebac 	.word	0x0800ebac
 80026e4:	0800ebb4 	.word	0x0800ebb4
 80026e8:	0800ebbc 	.word	0x0800ebbc
 80026ec:	200006d8 	.word	0x200006d8
 80026f0:	000fffff 	.word	0x000fffff
 80026f4:	20000984 	.word	0x20000984
 80026f8:	0800ebc0 	.word	0x0800ebc0
 80026fc:	2000092c 	.word	0x2000092c
 8002700:	20000954 	.word	0x20000954
 8002704:	497ffff0 	.word	0x497ffff0
 8002708:	20000314 	.word	0x20000314

		}
	}

	// ==== DAC_CAL_TEMP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TEMP")))
 800270c:	f107 0320 	add.w	r3, r7, #32
 8002710:	4999      	ldr	r1, [pc, #612]	; (8002978 <Parsing_command+0x5b8>)
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fd34 	bl	8000180 <strcmp>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d127      	bne.n	800276e <Parsing_command+0x3ae>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 800271e:	463b      	mov	r3, r7
 8002720:	4996      	ldr	r1, [pc, #600]	; (800297c <Parsing_command+0x5bc>)
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd fd2c 	bl	8000180 <strcmp>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10f      	bne.n	800274e <Parsing_command+0x38e>
			DAC_code=0x7FFFF;
 800272e:	4b94      	ldr	r3, [pc, #592]	; (8002980 <Parsing_command+0x5c0>)
 8002730:	4a94      	ldr	r2, [pc, #592]	; (8002984 <Parsing_command+0x5c4>)
 8002732:	601a      	str	r2, [r3, #0]
			DAC_Write(DAC_code);
 8002734:	4b92      	ldr	r3, [pc, #584]	; (8002980 <Parsing_command+0x5c0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe ff41 	bl	80015c0 <DAC_Write>
			DAC_TEMP_CAL();
 800273e:	f7ff f81b 	bl	8001778 <DAC_TEMP_CAL>
			DAC_Write(DAC_code);
 8002742:	4b8f      	ldr	r3, [pc, #572]	; (8002980 <Parsing_command+0x5c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe ff3a 	bl	80015c0 <DAC_Write>
			return;
 800274c:	e24f      	b.n	8002bee <Parsing_command+0x82e>
		}
		else
		{
			HAL_Delay(10);
 800274e:	200a      	movs	r0, #10
 8002750:	f000 fe1e 	bl	8003390 <HAL_Delay>
			CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!`
 8002754:	488c      	ldr	r0, [pc, #560]	; (8002988 <Parsing_command+0x5c8>)
 8002756:	f7fd fd1d 	bl	8000194 <strlen>
 800275a:	4603      	mov	r3, r0
 800275c:	b29b      	uxth	r3, r3
 800275e:	4619      	mov	r1, r3
 8002760:	4889      	ldr	r0, [pc, #548]	; (8002988 <Parsing_command+0x5c8>)
 8002762:	f008 ff0d 	bl	800b580 <CDC_Transmit_FS>
			HAL_Delay(10);
 8002766:	200a      	movs	r0, #10
 8002768:	f000 fe12 	bl	8003390 <HAL_Delay>
			return;
 800276c:	e23f      	b.n	8002bee <Parsing_command+0x82e>
		}
	}

	// ==== DAC_CAL_POLY_A command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_A")))
 800276e:	f107 0320 	add.w	r3, r7, #32
 8002772:	4986      	ldr	r1, [pc, #536]	; (800298c <Parsing_command+0x5cc>)
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fd03 	bl	8000180 <strcmp>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d126      	bne.n	80027ce <Parsing_command+0x40e>
	{
		atof_tmp=atof(decoded_string_2);
 8002780:	463b      	mov	r3, r7
 8002782:	4618      	mov	r0, r3
 8002784:	f009 faee 	bl	800bd64 <atof>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	f7fe f97e 	bl	8000a90 <__aeabi_d2f>
 8002794:	4603      	mov	r3, r0
 8002796:	647b      	str	r3, [r7, #68]	; 0x44
		corr_coeff_1=atof_tmp;
 8002798:	4a7d      	ldr	r2, [pc, #500]	; (8002990 <Parsing_command+0x5d0>)
 800279a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279c:	6013      	str	r3, [r2, #0]
		EEPROM_write(0x10,atof_tmp);
 800279e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027a0:	f7fe fc9a 	bl	80010d8 <__aeabi_f2uiz>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4619      	mov	r1, r3
 80027a8:	2010      	movs	r0, #16
 80027aa:	f000 fa67 	bl	8002c7c <EEPROM_write>
		HAL_Delay(10);
 80027ae:	200a      	movs	r0, #10
 80027b0:	f000 fdee 	bl	8003390 <HAL_Delay>
		CDC_Transmit_FS(OK, strlen((const char *)OK));
 80027b4:	4877      	ldr	r0, [pc, #476]	; (8002994 <Parsing_command+0x5d4>)
 80027b6:	f7fd fced 	bl	8000194 <strlen>
 80027ba:	4603      	mov	r3, r0
 80027bc:	b29b      	uxth	r3, r3
 80027be:	4619      	mov	r1, r3
 80027c0:	4874      	ldr	r0, [pc, #464]	; (8002994 <Parsing_command+0x5d4>)
 80027c2:	f008 fedd 	bl	800b580 <CDC_Transmit_FS>
		HAL_Delay(10);
 80027c6:	200a      	movs	r0, #10
 80027c8:	f000 fde2 	bl	8003390 <HAL_Delay>
		return;
 80027cc:	e20f      	b.n	8002bee <Parsing_command+0x82e>
	}

	// ==== DAC_CAL_POLY_B command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_B")))
 80027ce:	f107 0320 	add.w	r3, r7, #32
 80027d2:	4971      	ldr	r1, [pc, #452]	; (8002998 <Parsing_command+0x5d8>)
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fcd3 	bl	8000180 <strcmp>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d126      	bne.n	800282e <Parsing_command+0x46e>
	{
		atof_tmp=atof(decoded_string_2);
 80027e0:	463b      	mov	r3, r7
 80027e2:	4618      	mov	r0, r3
 80027e4:	f009 fabe 	bl	800bd64 <atof>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7fe f94e 	bl	8000a90 <__aeabi_d2f>
 80027f4:	4603      	mov	r3, r0
 80027f6:	647b      	str	r3, [r7, #68]	; 0x44
		corr_coeff_2=atof_tmp;
 80027f8:	4a68      	ldr	r2, [pc, #416]	; (800299c <Parsing_command+0x5dc>)
 80027fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fc:	6013      	str	r3, [r2, #0]
		EEPROM_write(0x18,atof_tmp);
 80027fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002800:	f7fe fc6a 	bl	80010d8 <__aeabi_f2uiz>
 8002804:	4603      	mov	r3, r0
 8002806:	4619      	mov	r1, r3
 8002808:	2018      	movs	r0, #24
 800280a:	f000 fa37 	bl	8002c7c <EEPROM_write>
		HAL_Delay(10);
 800280e:	200a      	movs	r0, #10
 8002810:	f000 fdbe 	bl	8003390 <HAL_Delay>
		CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002814:	485f      	ldr	r0, [pc, #380]	; (8002994 <Parsing_command+0x5d4>)
 8002816:	f7fd fcbd 	bl	8000194 <strlen>
 800281a:	4603      	mov	r3, r0
 800281c:	b29b      	uxth	r3, r3
 800281e:	4619      	mov	r1, r3
 8002820:	485c      	ldr	r0, [pc, #368]	; (8002994 <Parsing_command+0x5d4>)
 8002822:	f008 fead 	bl	800b580 <CDC_Transmit_FS>
		HAL_Delay(10);
 8002826:	200a      	movs	r0, #10
 8002828:	f000 fdb2 	bl	8003390 <HAL_Delay>
		return;
 800282c:	e1df      	b.n	8002bee <Parsing_command+0x82e>
	}

	// ==== DAC_CAL_POLY_C command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_C")))
 800282e:	f107 0320 	add.w	r3, r7, #32
 8002832:	495b      	ldr	r1, [pc, #364]	; (80029a0 <Parsing_command+0x5e0>)
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fca3 	bl	8000180 <strcmp>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d126      	bne.n	800288e <Parsing_command+0x4ce>
	{
		atof_tmp=atof(decoded_string_2);
 8002840:	463b      	mov	r3, r7
 8002842:	4618      	mov	r0, r3
 8002844:	f009 fa8e 	bl	800bd64 <atof>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	f7fe f91e 	bl	8000a90 <__aeabi_d2f>
 8002854:	4603      	mov	r3, r0
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
		corr_coeff_3=atof_tmp;
 8002858:	4a52      	ldr	r2, [pc, #328]	; (80029a4 <Parsing_command+0x5e4>)
 800285a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285c:	6013      	str	r3, [r2, #0]
		EEPROM_write(0x20,atof_tmp);
 800285e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002860:	f7fe fc3a 	bl	80010d8 <__aeabi_f2uiz>
 8002864:	4603      	mov	r3, r0
 8002866:	4619      	mov	r1, r3
 8002868:	2020      	movs	r0, #32
 800286a:	f000 fa07 	bl	8002c7c <EEPROM_write>
		HAL_Delay(10);
 800286e:	200a      	movs	r0, #10
 8002870:	f000 fd8e 	bl	8003390 <HAL_Delay>
		CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002874:	4847      	ldr	r0, [pc, #284]	; (8002994 <Parsing_command+0x5d4>)
 8002876:	f7fd fc8d 	bl	8000194 <strlen>
 800287a:	4603      	mov	r3, r0
 800287c:	b29b      	uxth	r3, r3
 800287e:	4619      	mov	r1, r3
 8002880:	4844      	ldr	r0, [pc, #272]	; (8002994 <Parsing_command+0x5d4>)
 8002882:	f008 fe7d 	bl	800b580 <CDC_Transmit_FS>
		HAL_Delay(10);
 8002886:	200a      	movs	r0, #10
 8002888:	f000 fd82 	bl	8003390 <HAL_Delay>
		return;
 800288c:	e1af      	b.n	8002bee <Parsing_command+0x82e>
	}

	// ==== DAC_CAL_TOP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TOP")))
 800288e:	f107 0320 	add.w	r3, r7, #32
 8002892:	4945      	ldr	r1, [pc, #276]	; (80029a8 <Parsing_command+0x5e8>)
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fc73 	bl	8000180 <strcmp>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	f040 808f 	bne.w	80029c0 <Parsing_command+0x600>
	{
		atof_tmp=atof(decoded_string_2);
 80028a2:	463b      	mov	r3, r7
 80028a4:	4618      	mov	r0, r3
 80028a6:	f009 fa5d 	bl	800bd64 <atof>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	f7fe f8ed 	bl	8000a90 <__aeabi_d2f>
 80028b6:	4603      	mov	r3, r0
 80028b8:	647b      	str	r3, [r7, #68]	; 0x44
		if(atof_tmp>9.9 && atof_tmp<10.1)
 80028ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80028bc:	f7fd fdd6 	bl	800046c <__aeabi_f2d>
 80028c0:	a329      	add	r3, pc, #164	; (adr r3, 8002968 <Parsing_command+0x5a8>)
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	f7fe f8b9 	bl	8000a3c <__aeabi_dcmpgt>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d03a      	beq.n	8002946 <Parsing_command+0x586>
 80028d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80028d2:	f7fd fdcb 	bl	800046c <__aeabi_f2d>
 80028d6:	a326      	add	r3, pc, #152	; (adr r3, 8002970 <Parsing_command+0x5b0>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fe f890 	bl	8000a00 <__aeabi_dcmplt>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d02f      	beq.n	8002946 <Parsing_command+0x586>
		{
			cal_DAC_up_voltage=atof_tmp;
 80028e6:	4a31      	ldr	r2, [pc, #196]	; (80029ac <Parsing_command+0x5ec>)
 80028e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ea:	6013      	str	r3, [r2, #0]
			EEPROM_write(0x00,(uint32_t)(cal_DAC_up_voltage*1000000)); // Write top voltage calibration to EEPROM in uV value
 80028ec:	4b2f      	ldr	r3, [pc, #188]	; (80029ac <Parsing_command+0x5ec>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	492f      	ldr	r1, [pc, #188]	; (80029b0 <Parsing_command+0x5f0>)
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fa2a 	bl	8000d4c <__aeabi_fmul>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fbec 	bl	80010d8 <__aeabi_f2uiz>
 8002900:	4603      	mov	r3, r0
 8002902:	4619      	mov	r1, r3
 8002904:	2000      	movs	r0, #0
 8002906:	f000 f9b9 	bl	8002c7c <EEPROM_write>
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 800290a:	4b28      	ldr	r3, [pc, #160]	; (80029ac <Parsing_command+0x5ec>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a29      	ldr	r2, [pc, #164]	; (80029b4 <Parsing_command+0x5f4>)
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe f90f 	bl	8000b38 <__aeabi_fsub>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <Parsing_command+0x5f8>)
 8002920:	601a      	str	r2, [r3, #0]
			DDS_Init();
 8002922:	f7fe ffef 	bl	8001904 <DDS_Init>

			HAL_Delay(10);
 8002926:	200a      	movs	r0, #10
 8002928:	f000 fd32 	bl	8003390 <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 800292c:	4819      	ldr	r0, [pc, #100]	; (8002994 <Parsing_command+0x5d4>)
 800292e:	f7fd fc31 	bl	8000194 <strlen>
 8002932:	4603      	mov	r3, r0
 8002934:	b29b      	uxth	r3, r3
 8002936:	4619      	mov	r1, r3
 8002938:	4816      	ldr	r0, [pc, #88]	; (8002994 <Parsing_command+0x5d4>)
 800293a:	f008 fe21 	bl	800b580 <CDC_Transmit_FS>
			HAL_Delay(10);
 800293e:	200a      	movs	r0, #10
 8002940:	f000 fd26 	bl	8003390 <HAL_Delay>
			return;
 8002944:	e153      	b.n	8002bee <Parsing_command+0x82e>
		}
		else
		{
			HAL_Delay(10);
 8002946:	200a      	movs	r0, #10
 8002948:	f000 fd22 	bl	8003390 <HAL_Delay>
			CDC_Transmit_FS(Error2, strlen((const char *)Error2));  // SEND ERROR TO CDC!!!
 800294c:	481b      	ldr	r0, [pc, #108]	; (80029bc <Parsing_command+0x5fc>)
 800294e:	f7fd fc21 	bl	8000194 <strlen>
 8002952:	4603      	mov	r3, r0
 8002954:	b29b      	uxth	r3, r3
 8002956:	4619      	mov	r1, r3
 8002958:	4818      	ldr	r0, [pc, #96]	; (80029bc <Parsing_command+0x5fc>)
 800295a:	f008 fe11 	bl	800b580 <CDC_Transmit_FS>
			HAL_Delay(10);
 800295e:	200a      	movs	r0, #10
 8002960:	f000 fd16 	bl	8003390 <HAL_Delay>
			return;
 8002964:	e143      	b.n	8002bee <Parsing_command+0x82e>
 8002966:	bf00      	nop
 8002968:	cccccccd 	.word	0xcccccccd
 800296c:	4023cccc 	.word	0x4023cccc
 8002970:	33333333 	.word	0x33333333
 8002974:	40243333 	.word	0x40243333
 8002978:	0800ebc8 	.word	0x0800ebc8
 800297c:	0800eba4 	.word	0x0800eba4
 8002980:	200006d8 	.word	0x200006d8
 8002984:	0007ffff 	.word	0x0007ffff
 8002988:	20000008 	.word	0x20000008
 800298c:	0800ebd8 	.word	0x0800ebd8
 8002990:	20000958 	.word	0x20000958
 8002994:	200002fc 	.word	0x200002fc
 8002998:	0800ebe8 	.word	0x0800ebe8
 800299c:	20000928 	.word	0x20000928
 80029a0:	0800ebf8 	.word	0x0800ebf8
 80029a4:	20000924 	.word	0x20000924
 80029a8:	0800ec08 	.word	0x0800ec08
 80029ac:	20000954 	.word	0x20000954
 80029b0:	49742400 	.word	0x49742400
 80029b4:	2000092c 	.word	0x2000092c
 80029b8:	2000095c 	.word	0x2000095c
 80029bc:	20000314 	.word	0x20000314
		}
	}


	// ==== DAC_CAL_DOWN command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_DOWN")))
 80029c0:	f107 0320 	add.w	r3, r7, #32
 80029c4:	4992      	ldr	r1, [pc, #584]	; (8002c10 <Parsing_command+0x850>)
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fbda 	bl	8000180 <strcmp>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d161      	bne.n	8002a96 <Parsing_command+0x6d6>
	{
		atof_tmp=atof(decoded_string_2);
 80029d2:	463b      	mov	r3, r7
 80029d4:	4618      	mov	r0, r3
 80029d6:	f009 f9c5 	bl	800bd64 <atof>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4610      	mov	r0, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	f7fe f855 	bl	8000a90 <__aeabi_d2f>
 80029e6:	4603      	mov	r3, r0
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
		if(atof_tmp>-10.1 && atof_tmp<-9.9)
 80029ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80029ec:	f7fd fd3e 	bl	800046c <__aeabi_f2d>
 80029f0:	a381      	add	r3, pc, #516	; (adr r3, 8002bf8 <Parsing_command+0x838>)
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	f7fe f821 	bl	8000a3c <__aeabi_dcmpgt>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d03a      	beq.n	8002a76 <Parsing_command+0x6b6>
 8002a00:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a02:	f7fd fd33 	bl	800046c <__aeabi_f2d>
 8002a06:	a37e      	add	r3, pc, #504	; (adr r3, 8002c00 <Parsing_command+0x840>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fff8 	bl	8000a00 <__aeabi_dcmplt>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d02f      	beq.n	8002a76 <Parsing_command+0x6b6>
		{
			cal_DAC_down_voltage=atof_tmp;
 8002a16:	4a7f      	ldr	r2, [pc, #508]	; (8002c14 <Parsing_command+0x854>)
 8002a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a1a:	6013      	str	r3, [r2, #0]
			EEPROM_write(0x08,(uint32_t)(cal_DAC_down_voltage*-1000000)); // Write top voltage calibration to EEPROM in uV value
 8002a1c:	4b7d      	ldr	r3, [pc, #500]	; (8002c14 <Parsing_command+0x854>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	497d      	ldr	r1, [pc, #500]	; (8002c18 <Parsing_command+0x858>)
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe f992 	bl	8000d4c <__aeabi_fmul>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fb54 	bl	80010d8 <__aeabi_f2uiz>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4619      	mov	r1, r3
 8002a34:	2008      	movs	r0, #8
 8002a36:	f000 f921 	bl	8002c7c <EEPROM_write>
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002a3a:	4b78      	ldr	r3, [pc, #480]	; (8002c1c <Parsing_command+0x85c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a75      	ldr	r2, [pc, #468]	; (8002c14 <Parsing_command+0x854>)
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe f877 	bl	8000b38 <__aeabi_fsub>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b74      	ldr	r3, [pc, #464]	; (8002c20 <Parsing_command+0x860>)
 8002a50:	601a      	str	r2, [r3, #0]
			DDS_Init();
 8002a52:	f7fe ff57 	bl	8001904 <DDS_Init>

			HAL_Delay(10);
 8002a56:	200a      	movs	r0, #10
 8002a58:	f000 fc9a 	bl	8003390 <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002a5c:	4871      	ldr	r0, [pc, #452]	; (8002c24 <Parsing_command+0x864>)
 8002a5e:	f7fd fb99 	bl	8000194 <strlen>
 8002a62:	4603      	mov	r3, r0
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4619      	mov	r1, r3
 8002a68:	486e      	ldr	r0, [pc, #440]	; (8002c24 <Parsing_command+0x864>)
 8002a6a:	f008 fd89 	bl	800b580 <CDC_Transmit_FS>
			HAL_Delay(10);
 8002a6e:	200a      	movs	r0, #10
 8002a70:	f000 fc8e 	bl	8003390 <HAL_Delay>
			return;
 8002a74:	e0bb      	b.n	8002bee <Parsing_command+0x82e>
		}
		else
		{
			HAL_Delay(10);
 8002a76:	200a      	movs	r0, #10
 8002a78:	f000 fc8a 	bl	8003390 <HAL_Delay>
			CDC_Transmit_FS(Error2, strlen((const char *)Error2));  // SEND ERROR TO CDC!!!
 8002a7c:	486a      	ldr	r0, [pc, #424]	; (8002c28 <Parsing_command+0x868>)
 8002a7e:	f7fd fb89 	bl	8000194 <strlen>
 8002a82:	4603      	mov	r3, r0
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	4867      	ldr	r0, [pc, #412]	; (8002c28 <Parsing_command+0x868>)
 8002a8a:	f008 fd79 	bl	800b580 <CDC_Transmit_FS>
			HAL_Delay(10);
 8002a8e:	200a      	movs	r0, #10
 8002a90:	f000 fc7e 	bl	8003390 <HAL_Delay>
			return;
 8002a94:	e0ab      	b.n	8002bee <Parsing_command+0x82e>
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 8002a96:	f107 0320 	add.w	r3, r7, #32
 8002a9a:	4964      	ldr	r1, [pc, #400]	; (8002c2c <Parsing_command+0x86c>)
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fb6f 	bl	8000180 <strcmp>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d143      	bne.n	8002b30 <Parsing_command+0x770>
	{
		atof_tmp=atof(decoded_string_2);
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f009 f95a 	bl	800bd64 <atof>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fd ffea 	bl	8000a90 <__aeabi_d2f>
 8002abc:	4603      	mov	r3, r0
 8002abe:	647b      	str	r3, [r7, #68]	; 0x44
		if(atof_tmp<0.001 || atof_tmp>1)
 8002ac0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002ac2:	f7fd fcd3 	bl	800046c <__aeabi_f2d>
 8002ac6:	a350      	add	r3, pc, #320	; (adr r3, 8002c08 <Parsing_command+0x848>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f7fd ff98 	bl	8000a00 <__aeabi_dcmplt>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <Parsing_command+0x726>
 8002ad6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002ada:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002adc:	f7fe faf2 	bl	80010c4 <__aeabi_fcmpgt>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00f      	beq.n	8002b06 <Parsing_command+0x746>
		{
			HAL_Delay(10);
 8002ae6:	200a      	movs	r0, #10
 8002ae8:	f000 fc52 	bl	8003390 <HAL_Delay>
			CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002aec:	4850      	ldr	r0, [pc, #320]	; (8002c30 <Parsing_command+0x870>)
 8002aee:	f7fd fb51 	bl	8000194 <strlen>
 8002af2:	4603      	mov	r3, r0
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	4619      	mov	r1, r3
 8002af8:	484d      	ldr	r0, [pc, #308]	; (8002c30 <Parsing_command+0x870>)
 8002afa:	f008 fd41 	bl	800b580 <CDC_Transmit_FS>
			HAL_Delay(10);
 8002afe:	200a      	movs	r0, #10
 8002b00:	f000 fc46 	bl	8003390 <HAL_Delay>
			return;
 8002b04:	e073      	b.n	8002bee <Parsing_command+0x82e>
		}
		else
		{
			DAC_target_speed=atof_tmp;
 8002b06:	4a4b      	ldr	r2, [pc, #300]	; (8002c34 <Parsing_command+0x874>)
 8002b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0a:	6013      	str	r3, [r2, #0]
			DDS_Init();
 8002b0c:	f7fe fefa 	bl	8001904 <DDS_Init>

			HAL_Delay(10);
 8002b10:	200a      	movs	r0, #10
 8002b12:	f000 fc3d 	bl	8003390 <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002b16:	4843      	ldr	r0, [pc, #268]	; (8002c24 <Parsing_command+0x864>)
 8002b18:	f7fd fb3c 	bl	8000194 <strlen>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	4619      	mov	r1, r3
 8002b22:	4840      	ldr	r0, [pc, #256]	; (8002c24 <Parsing_command+0x864>)
 8002b24:	f008 fd2c 	bl	800b580 <CDC_Transmit_FS>
			HAL_Delay(10);
 8002b28:	200a      	movs	r0, #10
 8002b2a:	f000 fc31 	bl	8003390 <HAL_Delay>
			return;
 8002b2e:	e05e      	b.n	8002bee <Parsing_command+0x82e>
		}
	}

	// ==== SWEEP_DIRECTION command ====
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 8002b30:	f107 0320 	add.w	r3, r7, #32
 8002b34:	4940      	ldr	r1, [pc, #256]	; (8002c38 <Parsing_command+0x878>)
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fb22 	bl	8000180 <strcmp>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d145      	bne.n	8002bce <Parsing_command+0x80e>
	{
		if(!(strcmp(decoded_string_2,"UP"))){
 8002b42:	463b      	mov	r3, r7
 8002b44:	493d      	ldr	r1, [pc, #244]	; (8002c3c <Parsing_command+0x87c>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fb1a 	bl	8000180 <strcmp>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d112      	bne.n	8002b78 <Parsing_command+0x7b8>
			DAC_code_direction=1;
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <Parsing_command+0x880>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
			HAL_Delay(10);
 8002b58:	200a      	movs	r0, #10
 8002b5a:	f000 fc19 	bl	8003390 <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002b5e:	4831      	ldr	r0, [pc, #196]	; (8002c24 <Parsing_command+0x864>)
 8002b60:	f7fd fb18 	bl	8000194 <strlen>
 8002b64:	4603      	mov	r3, r0
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	482e      	ldr	r0, [pc, #184]	; (8002c24 <Parsing_command+0x864>)
 8002b6c:	f008 fd08 	bl	800b580 <CDC_Transmit_FS>
			HAL_Delay(10);
 8002b70:	200a      	movs	r0, #10
 8002b72:	f000 fc0d 	bl	8003390 <HAL_Delay>
			return;
 8002b76:	e03a      	b.n	8002bee <Parsing_command+0x82e>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8002b78:	463b      	mov	r3, r7
 8002b7a:	4932      	ldr	r1, [pc, #200]	; (8002c44 <Parsing_command+0x884>)
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd faff 	bl	8000180 <strcmp>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d112      	bne.n	8002bae <Parsing_command+0x7ee>
				DAC_code_direction=0;
 8002b88:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <Parsing_command+0x880>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
				HAL_Delay(10);
 8002b8e:	200a      	movs	r0, #10
 8002b90:	f000 fbfe 	bl	8003390 <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002b94:	4823      	ldr	r0, [pc, #140]	; (8002c24 <Parsing_command+0x864>)
 8002b96:	f7fd fafd 	bl	8000194 <strlen>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4820      	ldr	r0, [pc, #128]	; (8002c24 <Parsing_command+0x864>)
 8002ba2:	f008 fced 	bl	800b580 <CDC_Transmit_FS>
				HAL_Delay(10);
 8002ba6:	200a      	movs	r0, #10
 8002ba8:	f000 fbf2 	bl	8003390 <HAL_Delay>
				return;
 8002bac:	e01f      	b.n	8002bee <Parsing_command+0x82e>
			}
			else
			{
				HAL_Delay(10);
 8002bae:	200a      	movs	r0, #10
 8002bb0:	f000 fbee 	bl	8003390 <HAL_Delay>
				CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002bb4:	481e      	ldr	r0, [pc, #120]	; (8002c30 <Parsing_command+0x870>)
 8002bb6:	f7fd faed 	bl	8000194 <strlen>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	481b      	ldr	r0, [pc, #108]	; (8002c30 <Parsing_command+0x870>)
 8002bc2:	f008 fcdd 	bl	800b580 <CDC_Transmit_FS>
				HAL_Delay(10);
 8002bc6:	200a      	movs	r0, #10
 8002bc8:	f000 fbe2 	bl	8003390 <HAL_Delay>
				return;
 8002bcc:	e00f      	b.n	8002bee <Parsing_command+0x82e>





	HAL_Delay(10);
 8002bce:	200a      	movs	r0, #10
 8002bd0:	f000 fbde 	bl	8003390 <HAL_Delay>
	CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002bd4:	4816      	ldr	r0, [pc, #88]	; (8002c30 <Parsing_command+0x870>)
 8002bd6:	f7fd fadd 	bl	8000194 <strlen>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	4619      	mov	r1, r3
 8002be0:	4813      	ldr	r0, [pc, #76]	; (8002c30 <Parsing_command+0x870>)
 8002be2:	f008 fccd 	bl	800b580 <CDC_Transmit_FS>
	HAL_Delay(10);
 8002be6:	200a      	movs	r0, #10
 8002be8:	f000 fbd2 	bl	8003390 <HAL_Delay>
	return;
 8002bec:	bf00      	nop
}
 8002bee:	3750      	adds	r7, #80	; 0x50
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	33333333 	.word	0x33333333
 8002bfc:	c0243333 	.word	0xc0243333
 8002c00:	cccccccd 	.word	0xcccccccd
 8002c04:	c023cccc 	.word	0xc023cccc
 8002c08:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c0c:	3f50624d 	.word	0x3f50624d
 8002c10:	0800ec14 	.word	0x0800ec14
 8002c14:	2000092c 	.word	0x2000092c
 8002c18:	c9742400 	.word	0xc9742400
 8002c1c:	20000954 	.word	0x20000954
 8002c20:	2000095c 	.word	0x2000095c
 8002c24:	200002fc 	.word	0x200002fc
 8002c28:	20000314 	.word	0x20000314
 8002c2c:	0800ec24 	.word	0x0800ec24
 8002c30:	20000008 	.word	0x20000008
 8002c34:	20000980 	.word	0x20000980
 8002c38:	0800ec30 	.word	0x0800ec30
 8002c3c:	0800ec40 	.word	0x0800ec40
 8002c40:	20000984 	.word	0x20000984
 8002c44:	0800ebc0 	.word	0x0800ebc0

08002c48 <EEPROM_read>:

//==============================================================================================
uint32_t EEPROM_read(uint32_t address_of_read)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	uint32_t Address;

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002c56:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002c5a:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a06      	ldr	r2, [pc, #24]	; (8002c78 <EEPROM_read+0x30>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d301      	bcc.n	8002c68 <EEPROM_read+0x20>
	{
		return 0x00;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e001      	b.n	8002c6c <EEPROM_read+0x24>
	}
	return *(__IO uint32_t *) Address;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	08082800 	.word	0x08082800

08002c7c <EEPROM_write>:
//==============================================================================================
void EEPROM_write(uint32_t address_of_read, uint32_t data)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
	/* Clear all pending flags */
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR | FLASH_FLAG_OPTVERRUSR);

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
	     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002c8c:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002c90:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <EEPROM_write+0x50>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d212      	bcs.n	8002cc0 <EEPROM_write+0x44>
	{
		return;
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 8002c9a:	f000 fd8f 	bl	80037bc <HAL_FLASHEx_DATAEEPROM_Unlock>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	68f9      	ldr	r1, [r7, #12]
 8002ca2:	2002      	movs	r0, #2
 8002ca4:	f000 fde8 	bl	8003878 <HAL_FLASHEx_DATAEEPROM_Program>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	72fb      	strb	r3, [r7, #11]
	HAL_FLASHEx_DATAEEPROM_Lock();
 8002cac:	f000 fda2 	bl	80037f4 <HAL_FLASHEx_DATAEEPROM_Lock>

	if(FLASHStatus != HAL_OK)
 8002cb0:	7afb      	ldrb	r3, [r7, #11]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <EEPROM_write+0x48>
	{
		return;
	}
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR);

	if(*(__IO uint32_t *) Address != data)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	e002      	b.n	8002cc6 <EEPROM_write+0x4a>
		return;
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <EEPROM_write+0x4a>
		return;
 8002cc4:	bf00      	nop
	{
		return;
	}

}
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	08082800 	.word	0x08082800

08002cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd4:	b672      	cpsid	i
}
 8002cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <Error_Handler+0x8>
	...

08002cdc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002ce2:	4a19      	ldr	r2, [pc, #100]	; (8002d48 <MX_SPI1_Init+0x6c>)
 8002ce4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002d12:	2218      	movs	r2, #24
 8002d14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002d2a:	220a      	movs	r2, #10
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d2e:	4805      	ldr	r0, [pc, #20]	; (8002d44 <MX_SPI1_Init+0x68>)
 8002d30:	f003 fb82 	bl	8006438 <HAL_SPI_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002d3a:	f7ff ffc9 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200009e0 	.word	0x200009e0
 8002d48:	40013000 	.word	0x40013000

08002d4c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d52:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <MX_SPI2_Init+0x6c>)
 8002d54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d56:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002d64:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d6a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d82:	2218      	movs	r2, #24
 8002d84:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002d9a:	220a      	movs	r2, #10
 8002d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <MX_SPI2_Init+0x68>)
 8002da0:	f003 fb4a 	bl	8006438 <HAL_SPI_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002daa:	f7ff ff91 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000988 	.word	0x20000988
 8002db8:	40003800 	.word	0x40003800

08002dbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	; 0x30
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 031c 	add.w	r3, r7, #28
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <HAL_SPI_MspInit+0xe8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d130      	bne.n	8002e40 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dde:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df2:	61bb      	str	r3, [r7, #24]
 8002df4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df6:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	61d3      	str	r3, [r2, #28]
 8002e02:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e0e:	23e0      	movs	r3, #224	; 0xe0
 8002e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e1e:	2305      	movs	r3, #5
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e22:	f107 031c 	add.w	r3, r7, #28
 8002e26:	4619      	mov	r1, r3
 8002e28:	4820      	ldr	r0, [pc, #128]	; (8002eac <HAL_SPI_MspInit+0xf0>)
 8002e2a:	f000 ff7f 	bl	8003d2c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2101      	movs	r1, #1
 8002e32:	2023      	movs	r0, #35	; 0x23
 8002e34:	f000 fba5 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002e38:	2023      	movs	r0, #35	; 0x23
 8002e3a:	f000 fbbe 	bl	80035ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002e3e:	e02d      	b.n	8002e9c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <HAL_SPI_MspInit+0xf4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d128      	bne.n	8002e9c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e54:	6253      	str	r3, [r2, #36]	; 0x24
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4a10      	ldr	r2, [pc, #64]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	61d3      	str	r3, [r2, #28]
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_SPI_MspInit+0xec>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002e7a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e8c:	2305      	movs	r3, #5
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	4619      	mov	r1, r3
 8002e96:	4807      	ldr	r0, [pc, #28]	; (8002eb4 <HAL_SPI_MspInit+0xf8>)
 8002e98:	f000 ff48 	bl	8003d2c <HAL_GPIO_Init>
}
 8002e9c:	bf00      	nop
 8002e9e:	3730      	adds	r7, #48	; 0x30
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40013000 	.word	0x40013000
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020000 	.word	0x40020000
 8002eb0:	40003800 	.word	0x40003800
 8002eb4:	40020400 	.word	0x40020400

08002eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_MspInit+0xa0>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <HAL_MspInit+0xa0>)
 8002ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ec8:	6253      	str	r3, [r2, #36]	; 0x24
 8002eca:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <HAL_MspInit+0xa0>)
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_MspInit+0xa0>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a1f      	ldr	r2, [pc, #124]	; (8002f58 <HAL_MspInit+0xa0>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6213      	str	r3, [r2, #32]
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_MspInit+0xa0>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_MspInit+0xa0>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <HAL_MspInit+0xa0>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6253      	str	r3, [r2, #36]	; 0x24
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_MspInit+0xa0>)
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2101      	movs	r1, #1
 8002f0a:	f06f 000b 	mvn.w	r0, #11
 8002f0e:	f000 fb38 	bl	8003582 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2101      	movs	r1, #1
 8002f16:	f06f 000a 	mvn.w	r0, #10
 8002f1a:	f000 fb32 	bl	8003582 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2101      	movs	r1, #1
 8002f22:	f06f 0009 	mvn.w	r0, #9
 8002f26:	f000 fb2c 	bl	8003582 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	f06f 0004 	mvn.w	r0, #4
 8002f32:	f000 fb26 	bl	8003582 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2101      	movs	r1, #1
 8002f3a:	f06f 0003 	mvn.w	r0, #3
 8002f3e:	f000 fb20 	bl	8003582 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2101      	movs	r1, #1
 8002f46:	f06f 0001 	mvn.w	r0, #1
 8002f4a:	f000 fb1a 	bl	8003582 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800

08002f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f60:	e7fe      	b.n	8002f60 <NMI_Handler+0x4>

08002f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f66:	e7fe      	b.n	8002f66 <HardFault_Handler+0x4>

08002f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f6c:	e7fe      	b.n	8002f6c <MemManage_Handler+0x4>

08002f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f72:	e7fe      	b.n	8002f72 <BusFault_Handler+0x4>

08002f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <UsageFault_Handler+0x4>

08002f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa2:	f000 f9d9 	bl	8003358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CPU_LDAC_Pin);
 8002fae:	2004      	movs	r0, #4
 8002fb0:	f001 f86c 	bl	800408c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <USB_LP_IRQHandler+0x10>)
 8002fbe:	f001 f981 	bl	80042c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200010b0 	.word	0x200010b0

08002fcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <TIM3_IRQHandler+0x10>)
 8002fd2:	f004 f963 	bl	800729c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000a38 	.word	0x20000a38

08002fe0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <SPI1_IRQHandler+0x10>)
 8002fe6:	f003 fe93 	bl	8006d10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	200009e0 	.word	0x200009e0

08002ff4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
	return 1;
 8002ff8:	2301      	movs	r3, #1
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <_kill>:

int _kill(int pid, int sig)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800300c:	f008 feae 	bl	800bd6c <__errno>
 8003010:	4603      	mov	r3, r0
 8003012:	2216      	movs	r2, #22
 8003014:	601a      	str	r2, [r3, #0]
	return -1;
 8003016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_exit>:

void _exit (int status)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800302a:	f04f 31ff 	mov.w	r1, #4294967295
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ffe7 	bl	8003002 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003034:	e7fe      	b.n	8003034 <_exit+0x12>

08003036 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	e00a      	b.n	800305e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003048:	f3af 8000 	nop.w
 800304c:	4601      	mov	r1, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	60ba      	str	r2, [r7, #8]
 8003054:	b2ca      	uxtb	r2, r1
 8003056:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	3301      	adds	r3, #1
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	dbf0      	blt.n	8003048 <_read+0x12>
	}

return len;
 8003066:	687b      	ldr	r3, [r7, #4]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e009      	b.n	8003096 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	60ba      	str	r2, [r7, #8]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3301      	adds	r3, #1
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	dbf1      	blt.n	8003082 <_write+0x12>
	}
	return len;
 800309e:	687b      	ldr	r3, [r7, #4]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_close>:

int _close(int file)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	return -1;
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ce:	605a      	str	r2, [r3, #4]
	return 0;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <_isatty>:

int _isatty(int file)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	return 1;
 80030e4:	2301      	movs	r3, #1
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
	return 0;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <_sbrk+0x5c>)
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <_sbrk+0x60>)
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <_sbrk+0x64>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <_sbrk+0x64>)
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <_sbrk+0x68>)
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <_sbrk+0x64>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	429a      	cmp	r2, r3
 8003136:	d207      	bcs.n	8003148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003138:	f008 fe18 	bl	800bd6c <__errno>
 800313c:	4603      	mov	r3, r0
 800313e:	220c      	movs	r2, #12
 8003140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	e009      	b.n	800315c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <_sbrk+0x64>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	4a05      	ldr	r2, [pc, #20]	; (800316c <_sbrk+0x64>)
 8003158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315a:	68fb      	ldr	r3, [r7, #12]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20004000 	.word	0x20004000
 8003168:	00000400 	.word	0x00000400
 800316c:	200006e0 	.word	0x200006e0
 8003170:	200013b0 	.word	0x200013b0

08003174 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	609a      	str	r2, [r3, #8]
 8003192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003194:	463b      	mov	r3, r7
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <MX_TIM3_Init+0x94>)
 800319e:	4a1e      	ldr	r2, [pc, #120]	; (8003218 <MX_TIM3_Init+0x98>)
 80031a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 -1;
 80031a2:	4b1c      	ldr	r3, [pc, #112]	; (8003214 <MX_TIM3_Init+0x94>)
 80031a4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80031a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031aa:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <MX_TIM3_Init+0x94>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 -1;
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <MX_TIM3_Init+0x94>)
 80031b2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80031b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b8:	4b16      	ldr	r3, [pc, #88]	; (8003214 <MX_TIM3_Init+0x94>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <MX_TIM3_Init+0x94>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031c4:	4813      	ldr	r0, [pc, #76]	; (8003214 <MX_TIM3_Init+0x94>)
 80031c6:	f003 ffd7 	bl	8007178 <HAL_TIM_Base_Init>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80031d0:	f7ff fd7e 	bl	8002cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80031da:	f107 0308 	add.w	r3, r7, #8
 80031de:	4619      	mov	r1, r3
 80031e0:	480c      	ldr	r0, [pc, #48]	; (8003214 <MX_TIM3_Init+0x94>)
 80031e2:	f004 f937 	bl	8007454 <HAL_TIM_ConfigClockSource>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80031ec:	f7ff fd70 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031f0:	2300      	movs	r3, #0
 80031f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031f8:	463b      	mov	r3, r7
 80031fa:	4619      	mov	r1, r3
 80031fc:	4805      	ldr	r0, [pc, #20]	; (8003214 <MX_TIM3_Init+0x94>)
 80031fe:	f004 fb09 	bl	8007814 <HAL_TIMEx_MasterConfigSynchronization>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003208:	f7ff fd62 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800320c:	bf00      	nop
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20000a38 	.word	0x20000a38
 8003218:	40000400 	.word	0x40000400

0800321c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0d      	ldr	r2, [pc, #52]	; (8003260 <HAL_TIM_Base_MspInit+0x44>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d113      	bne.n	8003256 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <HAL_TIM_Base_MspInit+0x48>)
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <HAL_TIM_Base_MspInit+0x48>)
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	6253      	str	r3, [r2, #36]	; 0x24
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <HAL_TIM_Base_MspInit+0x48>)
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	2100      	movs	r1, #0
 800324a:	201d      	movs	r0, #29
 800324c:	f000 f999 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003250:	201d      	movs	r0, #29
 8003252:	f000 f9b2 	bl	80035ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40000400 	.word	0x40000400
 8003264:	40023800 	.word	0x40023800

08003268 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003268:	480c      	ldr	r0, [pc, #48]	; (800329c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800326a:	490d      	ldr	r1, [pc, #52]	; (80032a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800326c:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800326e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003270:	e002      	b.n	8003278 <LoopCopyDataInit>

08003272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003276:	3304      	adds	r3, #4

08003278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800327c:	d3f9      	bcc.n	8003272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003280:	4c0a      	ldr	r4, [pc, #40]	; (80032ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003284:	e001      	b.n	800328a <LoopFillZerobss>

08003286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003288:	3204      	adds	r2, #4

0800328a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800328c:	d3fb      	bcc.n	8003286 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800328e:	f7ff ff71 	bl	8003174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003292:	f008 fd71 	bl	800bd78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003296:	f7fe fe81 	bl	8001f9c <main>
  bx lr
 800329a:	4770      	bx	lr
  ldr r0, =_sdata
 800329c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a0:	200006bc 	.word	0x200006bc
  ldr r2, =_sidata
 80032a4:	0800f140 	.word	0x0800f140
  ldr r2, =_sbss
 80032a8:	200006bc 	.word	0x200006bc
  ldr r4, =_ebss
 80032ac:	200013ac 	.word	0x200013ac

080032b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032b0:	e7fe      	b.n	80032b0 <ADC1_IRQHandler>

080032b2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032bc:	2003      	movs	r0, #3
 80032be:	f000 f955 	bl	800356c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032c2:	200f      	movs	r0, #15
 80032c4:	f000 f80e 	bl	80032e4 <HAL_InitTick>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	71fb      	strb	r3, [r7, #7]
 80032d2:	e001      	b.n	80032d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032d4:	f7ff fdf0 	bl	8002eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032d8:	79fb      	ldrb	r3, [r7, #7]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_InitTick+0x68>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d022      	beq.n	800333e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_InitTick+0x6c>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_InitTick+0x68>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003304:	fbb1 f3f3 	udiv	r3, r1, r3
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f962 	bl	80035d6 <HAL_SYSTICK_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10f      	bne.n	8003338 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b0f      	cmp	r3, #15
 800331c:	d809      	bhi.n	8003332 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800331e:	2200      	movs	r2, #0
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	f04f 30ff 	mov.w	r0, #4294967295
 8003326:	f000 f92c 	bl	8003582 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <HAL_InitTick+0x70>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e007      	b.n	8003342 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
 8003336:	e004      	b.n	8003342 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e001      	b.n	8003342 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003342:	7bfb      	ldrb	r3, [r7, #15]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000374 	.word	0x20000374
 8003350:	2000036c 	.word	0x2000036c
 8003354:	20000370 	.word	0x20000370

08003358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_IncTick+0x1c>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_IncTick+0x20>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4413      	add	r3, r2
 8003366:	4a03      	ldr	r2, [pc, #12]	; (8003374 <HAL_IncTick+0x1c>)
 8003368:	6013      	str	r3, [r2, #0]
}
 800336a:	bf00      	nop
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000a78 	.word	0x20000a78
 8003378:	20000374 	.word	0x20000374

0800337c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return uwTick;
 8003380:	4b02      	ldr	r3, [pc, #8]	; (800338c <HAL_GetTick+0x10>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	20000a78 	.word	0x20000a78

08003390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003398:	f7ff fff0 	bl	800337c <HAL_GetTick>
 800339c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d004      	beq.n	80033b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_Delay+0x40>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033b4:	bf00      	nop
 80033b6:	f7ff ffe1 	bl	800337c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d8f7      	bhi.n	80033b6 <HAL_Delay+0x26>
  {
  }
}
 80033c6:	bf00      	nop
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000374 	.word	0x20000374

080033d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <__NVIC_SetPriorityGrouping+0x44>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f0:	4013      	ands	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003406:	4a04      	ldr	r2, [pc, #16]	; (8003418 <__NVIC_SetPriorityGrouping+0x44>)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	60d3      	str	r3, [r2, #12]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <__NVIC_GetPriorityGrouping+0x18>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	0a1b      	lsrs	r3, r3, #8
 8003426:	f003 0307 	and.w	r3, r3, #7
}
 800342a:	4618      	mov	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	2b00      	cmp	r3, #0
 8003448:	db0b      	blt.n	8003462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	f003 021f 	and.w	r2, r3, #31
 8003450:	4906      	ldr	r1, [pc, #24]	; (800346c <__NVIC_EnableIRQ+0x34>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2001      	movs	r0, #1
 800345a:	fa00 f202 	lsl.w	r2, r0, r2
 800345e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	; (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	; (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
         );
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003538:	d301      	bcc.n	800353e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353a:	2301      	movs	r3, #1
 800353c:	e00f      	b.n	800355e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <SysTick_Config+0x40>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003546:	210f      	movs	r1, #15
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	f7ff ff90 	bl	8003470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <SysTick_Config+0x40>)
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003556:	4b04      	ldr	r3, [pc, #16]	; (8003568 <SysTick_Config+0x40>)
 8003558:	2207      	movs	r2, #7
 800355a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	e000e010 	.word	0xe000e010

0800356c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff2d 	bl	80033d4 <__NVIC_SetPriorityGrouping>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003594:	f7ff ff42 	bl	800341c <__NVIC_GetPriorityGrouping>
 8003598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f7ff ff90 	bl	80034c4 <NVIC_EncodePriority>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff5f 	bl	8003470 <__NVIC_SetPriority>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff35 	bl	8003438 <__NVIC_EnableIRQ>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ffa2 	bl	8003528 <SysTick_Config>
 80035e4:	4603      	mov	r3, r0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d005      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2204      	movs	r2, #4
 800360a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	e029      	b.n	8003666 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 020e 	bic.w	r2, r2, #14
 8003620:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f003 021c 	and.w	r2, r3, #28
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	2101      	movs	r1, #1
 8003640:	fa01 f202 	lsl.w	r2, r1, r2
 8003644:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
    }
  }
  return status;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003678:	f7ff fe80 	bl	800337c <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800367e:	e010      	b.n	80036a2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d00c      	beq.n	80036a2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <FLASH_WaitForLastOperation+0x2e>
 800368e:	f7ff fe75 	bl	800337c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	429a      	cmp	r2, r3
 800369c:	d201      	bcs.n	80036a2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e02f      	b.n	8003702 <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <FLASH_WaitForLastOperation+0x9c>)
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d0e8      	beq.n	8003680 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80036ae:	4b17      	ldr	r3, [pc, #92]	; (800370c <FLASH_WaitForLastOperation+0x9c>)
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d102      	bne.n	80036c0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <FLASH_WaitForLastOperation+0x9c>)
 80036bc:	2202      	movs	r2, #2
 80036be:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <FLASH_WaitForLastOperation+0x9c>)
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036cc:	d014      	beq.n	80036f8 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <FLASH_WaitForLastOperation+0x9c>)
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80036d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036da:	d00d      	beq.n	80036f8 <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <FLASH_WaitForLastOperation+0x9c>)
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80036e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e8:	d006      	beq.n	80036f8 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80036ea:	4b08      	ldr	r3, [pc, #32]	; (800370c <FLASH_WaitForLastOperation+0x9c>)
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 80036f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f6:	d103      	bne.n	8003700 <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80036f8:	f000 f80a 	bl	8003710 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023c00 	.word	0x40023c00

08003710 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800371a:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <FLASH_SetErrorCode+0xa4>)
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003726:	d109      	bne.n	800373c <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <FLASH_SetErrorCode+0xa8>)
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f043 0302 	orr.w	r3, r3, #2
 8003730:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <FLASH_SetErrorCode+0xa8>)
 8003732:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <FLASH_SetErrorCode+0xa4>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003748:	d109      	bne.n	800375e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800374a:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <FLASH_SetErrorCode+0xa8>)
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <FLASH_SetErrorCode+0xa8>)
 8003754:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800375c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800375e:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <FLASH_SetErrorCode+0xa4>)
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376a:	d109      	bne.n	8003780 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800376c:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <FLASH_SetErrorCode+0xa8>)
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	4a10      	ldr	r2, [pc, #64]	; (80037b8 <FLASH_SetErrorCode+0xa8>)
 8003776:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800377e:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <FLASH_SetErrorCode+0xa4>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378c:	d109      	bne.n	80037a2 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <FLASH_SetErrorCode+0xa8>)
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f043 0308 	orr.w	r3, r3, #8
 8003796:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <FLASH_SetErrorCode+0xa8>)
 8003798:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80037a2:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <FLASH_SetErrorCode+0xa4>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6193      	str	r3, [r2, #24]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40023c00 	.word	0x40023c00
 80037b8:	20000a7c 	.word	0x20000a7c

080037bc <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80037ce:	4a07      	ldr	r2, [pc, #28]	; (80037ec <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 80037d0:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80037d4:	4a06      	ldr	r2, [pc, #24]	; (80037f0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 80037d6:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
}
 80037de:	4618      	mov	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00
 80037ec:	89abcdef 	.word	0x89abcdef
 80037f0:	02030405 	.word	0x02030405

080037f4 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a04      	ldr	r2, [pc, #16]	; (8003810 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40023c00 	.word	0x40023c00

08003814 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003822:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003826:	f7ff ff23 	bl	8003670 <FLASH_WaitForLastOperation>
 800382a:	4603      	mov	r3, r0
 800382c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d11a      	bne.n	800386a <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003834:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 8003836:	2200      	movs	r2, #0
 8003838:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d102      	bne.n	8003846 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d102      	bne.n	8003852 <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800385e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003862:	f7ff ff05 	bl	8003670 <FLASH_WaitForLastOperation>
 8003866:	4603      	mov	r3, r0
 8003868:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 800386a:	7bfb      	ldrb	r3, [r7, #15]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000a7c 	.word	0x20000a7c

08003878 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003888:	4b31      	ldr	r3, [pc, #196]	; (8003950 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800388a:	7c1b      	ldrb	r3, [r3, #16]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 8003890:	2302      	movs	r3, #2
 8003892:	e058      	b.n	8003946 <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 8003894:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8003896:	2201      	movs	r2, #1
 8003898:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800389a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800389e:	f7ff fee7 	bl	8003670 <FLASH_WaitForLastOperation>
 80038a2:	4603      	mov	r3, r0
 80038a4:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d148      	bne.n	800393e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80038ac:	4b28      	ldr	r3, [pc, #160]	; (8003950 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d106      	bne.n	80038c6 <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	68b8      	ldr	r0, [r7, #8]
 80038bc:	f000 fa18 	bl	8003cf0 <FLASH_DATAEEPROM_ProgramWord>
 80038c0:	4603      	mov	r3, r0
 80038c2:	75fb      	strb	r3, [r7, #23]
 80038c4:	e03b      	b.n	800393e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d108      	bne.n	80038de <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4619      	mov	r1, r3
 80038d2:	68b8      	ldr	r0, [r7, #8]
 80038d4:	f000 f99c 	bl	8003c10 <FLASH_DATAEEPROM_ProgramHalfWord>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]
 80038dc:	e02f      	b.n	800393e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d108      	bne.n	80038f6 <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	4619      	mov	r1, r3
 80038ea:	68b8      	ldr	r0, [r7, #8]
 80038ec:	f000 f934 	bl	8003b58 <FLASH_DATAEEPROM_ProgramByte>
 80038f0:	4603      	mov	r3, r0
 80038f2:	75fb      	strb	r3, [r7, #23]
 80038f4:	e023      	b.n	800393e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d108      	bne.n	800390e <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	4619      	mov	r1, r3
 8003902:	68b8      	ldr	r0, [r7, #8]
 8003904:	f000 f826 	bl	8003954 <FLASH_DATAEEPROM_FastProgramByte>
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]
 800390c:	e017      	b.n	800393e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d108      	bne.n	8003926 <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	b29b      	uxth	r3, r3
 8003918:	4619      	mov	r1, r3
 800391a:	68b8      	ldr	r0, [r7, #8]
 800391c:	f000 f87e 	bl	8003a1c <FLASH_DATAEEPROM_FastProgramHalfWord>
 8003920:	4603      	mov	r3, r0
 8003922:	75fb      	strb	r3, [r7, #23]
 8003924:	e00b      	b.n	800393e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b10      	cmp	r3, #16
 800392a:	d106      	bne.n	800393a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	68b8      	ldr	r0, [r7, #8]
 8003930:	f000 f8ec 	bl	8003b0c <FLASH_DATAEEPROM_FastProgramWord>
 8003934:	4603      	mov	r3, r0
 8003936:	75fb      	strb	r3, [r7, #23]
 8003938:	e001      	b.n	800393e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8003940:	2200      	movs	r2, #0
 8003942:	741a      	strb	r2, [r3, #16]

  return status;
 8003944:	7dfb      	ldrb	r3, [r7, #23]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000a7c 	.word	0x20000a7c

08003954 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800396c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003970:	f7ff fe7e 	bl	8003670 <FLASH_WaitForLastOperation>
 8003974:	4603      	mov	r3, r0
 8003976:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d145      	bne.n	8003a0a <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800397e:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4a24      	ldr	r2, [pc, #144]	; (8003a14 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d009      	beq.n	80039a4 <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003996:	f24c 3050 	movw	r0, #50000	; 0xc350
 800399a:	f7ff fe69 	bl	8003670 <FLASH_WaitForLastOperation>
 800399e:	4603      	mov	r3, r0
 80039a0:	75fb      	strb	r3, [r7, #23]
 80039a2:	e032      	b.n	8003a0a <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	22ff      	movs	r2, #255	; 0xff
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f023 0303 	bic.w	r3, r3, #3
 80039d2:	4619      	mov	r1, r3
 80039d4:	2002      	movs	r0, #2
 80039d6:	f7ff ff1d 	bl	8003814 <HAL_FLASHEx_DATAEEPROM_Erase>
 80039da:	4603      	mov	r3, r0
 80039dc:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f023 0303 	bic.w	r3, r3, #3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4619      	mov	r1, r3
 80039ee:	2010      	movs	r0, #16
 80039f0:	f7ff ff42 	bl	8003878 <HAL_FLASHEx_DATAEEPROM_Program>
 80039f4:	4603      	mov	r3, r0
 80039f6:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80039f8:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80039fa:	7c1b      	ldrb	r3, [r3, #16]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e003      	b.n	8003a0c <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 8003a04:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40023c00 	.word	0x40023c00
 8003a18:	20000a7c 	.word	0x20000a7c

08003a1c <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a38:	f7ff fe1a 	bl	8003670 <FLASH_WaitForLastOperation>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d158      	bne.n	8003af8 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8003a46:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4a2e      	ldr	r2, [pc, #184]	; (8003b04 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 8003a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a50:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 8003a52:	887b      	ldrh	r3, [r7, #2]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	887a      	ldrh	r2, [r7, #2]
 8003a5c:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a62:	f7ff fe05 	bl	8003670 <FLASH_WaitForLastOperation>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]
 8003a6a:	e045      	b.n	8003af8 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003a6c:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d028      	beq.n	8003ace <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f023 0303 	bic.w	r3, r3, #3
 8003aac:	4619      	mov	r1, r3
 8003aae:	2002      	movs	r0, #2
 8003ab0:	f7ff feb0 	bl	8003814 <HAL_FLASHEx_DATAEEPROM_Erase>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	2010      	movs	r0, #16
 8003ac4:	f7ff fed8 	bl	8003878 <HAL_FLASHEx_DATAEEPROM_Program>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	75fb      	strb	r3, [r7, #23]
 8003acc:	e00b      	b.n	8003ae6 <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	2004      	movs	r0, #4
 8003ad4:	f7ff fed0 	bl	8003878 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3301      	adds	r3, #1
 8003adc:	2200      	movs	r2, #0
 8003ade:	4619      	mov	r1, r3
 8003ae0:	2004      	movs	r0, #4
 8003ae2:	f7ff fec9 	bl	8003878 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8003ae8:	7c1b      	ldrb	r3, [r3, #16]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e003      	b.n	8003afa <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40023c00 	.word	0x40023c00
 8003b08:	20000a7c 	.word	0x20000a7c

08003b0c <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b1e:	f7ff fda7 	bl	8003670 <FLASH_WaitForLastOperation>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10e      	bne.n	8003b4a <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8003b2c:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8003b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b36:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b42:	f7ff fd95 	bl	8003670 <FLASH_WaitForLastOperation>
 8003b46:	4603      	mov	r3, r0
 8003b48:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40023c00 	.word	0x40023c00

08003b58 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b74:	f7ff fd7c 	bl	8003670 <FLASH_WaitForLastOperation>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d13f      	bne.n	8003c02 <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b92:	f7ff fd6d 	bl	8003670 <FLASH_WaitForLastOperation>
 8003b96:	4603      	mov	r3, r0
 8003b98:	75fb      	strb	r3, [r7, #23]
 8003b9a:	e032      	b.n	8003c02 <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	22ff      	movs	r2, #255	; 0xff
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	4619      	mov	r1, r3
 8003bcc:	2002      	movs	r0, #2
 8003bce:	f7ff fe21 	bl	8003814 <HAL_FLASHEx_DATAEEPROM_Erase>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f023 0303 	bic.w	r3, r3, #3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4619      	mov	r1, r3
 8003be6:	2010      	movs	r0, #16
 8003be8:	f7ff fe46 	bl	8003878 <HAL_FLASHEx_DATAEEPROM_Program>
 8003bec:	4603      	mov	r3, r0
 8003bee:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8003bf2:	7c1b      	ldrb	r3, [r3, #16]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <FLASH_DATAEEPROM_ProgramByte+0xa4>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e003      	b.n	8003c04 <FLASH_DATAEEPROM_ProgramByte+0xac>
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000a7c 	.word	0x20000a7c

08003c10 <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c2c:	f7ff fd20 	bl	8003670 <FLASH_WaitForLastOperation>
 8003c30:	4603      	mov	r3, r0
 8003c32:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d152      	bne.n	8003ce0 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c4a:	f7ff fd11 	bl	8003670 <FLASH_WaitForLastOperation>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	75fb      	strb	r3, [r7, #23]
 8003c52:	e045      	b.n	8003ce0 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d028      	beq.n	8003cb6 <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f023 0303 	bic.w	r3, r3, #3
 8003c94:	4619      	mov	r1, r3
 8003c96:	2002      	movs	r0, #2
 8003c98:	f7ff fdbc 	bl	8003814 <HAL_FLASHEx_DATAEEPROM_Erase>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	2010      	movs	r0, #16
 8003cac:	f7ff fde4 	bl	8003878 <HAL_FLASHEx_DATAEEPROM_Program>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	75fb      	strb	r3, [r7, #23]
 8003cb4:	e00b      	b.n	8003cce <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	2004      	movs	r0, #4
 8003cbc:	f7ff fddc 	bl	8003878 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	2004      	movs	r0, #4
 8003cca:	f7ff fdd5 	bl	8003878 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8003cd0:	7c1b      	ldrb	r3, [r3, #16]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e003      	b.n	8003ce2 <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 8003cda:	4b04      	ldr	r3, [pc, #16]	; (8003cec <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000a7c 	.word	0x20000a7c

08003cf0 <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003cfe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d02:	f7ff fcb5 	bl	8003670 <FLASH_WaitForLastOperation>
 8003d06:	4603      	mov	r3, r0
 8003d08:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d108      	bne.n	8003d22 <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d1a:	f7ff fca9 	bl	8003670 <FLASH_WaitForLastOperation>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d42:	e154      	b.n	8003fee <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d50:	4013      	ands	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8146 	beq.w	8003fe8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d005      	beq.n	8003d74 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d130      	bne.n	8003dd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	2203      	movs	r2, #3
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003daa:	2201      	movs	r2, #1
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	f003 0201 	and.w	r2, r3, #1
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d017      	beq.n	8003e12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	2203      	movs	r2, #3
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4013      	ands	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d123      	bne.n	8003e66 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	08da      	lsrs	r2, r3, #3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3208      	adds	r2, #8
 8003e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	220f      	movs	r2, #15
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	08da      	lsrs	r2, r3, #3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3208      	adds	r2, #8
 8003e60:	6939      	ldr	r1, [r7, #16]
 8003e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	2203      	movs	r2, #3
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 0203 	and.w	r2, r3, #3
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80a0 	beq.w	8003fe8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea8:	4b58      	ldr	r3, [pc, #352]	; (800400c <HAL_GPIO_Init+0x2e0>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4a57      	ldr	r2, [pc, #348]	; (800400c <HAL_GPIO_Init+0x2e0>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6213      	str	r3, [r2, #32]
 8003eb4:	4b55      	ldr	r3, [pc, #340]	; (800400c <HAL_GPIO_Init+0x2e0>)
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ec0:	4a53      	ldr	r2, [pc, #332]	; (8004010 <HAL_GPIO_Init+0x2e4>)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ecc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	220f      	movs	r2, #15
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a4b      	ldr	r2, [pc, #300]	; (8004014 <HAL_GPIO_Init+0x2e8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d019      	beq.n	8003f20 <HAL_GPIO_Init+0x1f4>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a4a      	ldr	r2, [pc, #296]	; (8004018 <HAL_GPIO_Init+0x2ec>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_GPIO_Init+0x1f0>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a49      	ldr	r2, [pc, #292]	; (800401c <HAL_GPIO_Init+0x2f0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00d      	beq.n	8003f18 <HAL_GPIO_Init+0x1ec>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a48      	ldr	r2, [pc, #288]	; (8004020 <HAL_GPIO_Init+0x2f4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <HAL_GPIO_Init+0x1e8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a47      	ldr	r2, [pc, #284]	; (8004024 <HAL_GPIO_Init+0x2f8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <HAL_GPIO_Init+0x1e4>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	e008      	b.n	8003f22 <HAL_GPIO_Init+0x1f6>
 8003f10:	2305      	movs	r3, #5
 8003f12:	e006      	b.n	8003f22 <HAL_GPIO_Init+0x1f6>
 8003f14:	2303      	movs	r3, #3
 8003f16:	e004      	b.n	8003f22 <HAL_GPIO_Init+0x1f6>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e002      	b.n	8003f22 <HAL_GPIO_Init+0x1f6>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_GPIO_Init+0x1f6>
 8003f20:	2300      	movs	r3, #0
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	f002 0203 	and.w	r2, r2, #3
 8003f28:	0092      	lsls	r2, r2, #2
 8003f2a:	4093      	lsls	r3, r2
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f32:	4937      	ldr	r1, [pc, #220]	; (8004010 <HAL_GPIO_Init+0x2e4>)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	3302      	adds	r3, #2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f40:	4b39      	ldr	r3, [pc, #228]	; (8004028 <HAL_GPIO_Init+0x2fc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f64:	4a30      	ldr	r2, [pc, #192]	; (8004028 <HAL_GPIO_Init+0x2fc>)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f6a:	4b2f      	ldr	r3, [pc, #188]	; (8004028 <HAL_GPIO_Init+0x2fc>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f8e:	4a26      	ldr	r2, [pc, #152]	; (8004028 <HAL_GPIO_Init+0x2fc>)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_GPIO_Init+0x2fc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003fb8:	4a1b      	ldr	r2, [pc, #108]	; (8004028 <HAL_GPIO_Init+0x2fc>)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_GPIO_Init+0x2fc>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003fe2:	4a11      	ldr	r2, [pc, #68]	; (8004028 <HAL_GPIO_Init+0x2fc>)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	3301      	adds	r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f47f aea3 	bne.w	8003d44 <HAL_GPIO_Init+0x18>
  }
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40010000 	.word	0x40010000
 8004014:	40020000 	.word	0x40020000
 8004018:	40020400 	.word	0x40020400
 800401c:	40020800 	.word	0x40020800
 8004020:	40020c00 	.word	0x40020c00
 8004024:	40021000 	.word	0x40021000
 8004028:	40010400 	.word	0x40010400

0800402c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	887b      	ldrh	r3, [r7, #2]
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	e001      	b.n	800404e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	460b      	mov	r3, r1
 8004064:	807b      	strh	r3, [r7, #2]
 8004066:	4613      	mov	r3, r2
 8004068:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800406a:	787b      	ldrb	r3, [r7, #1]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004070:	887a      	ldrh	r2, [r7, #2]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004076:	e003      	b.n	8004080 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004078:	887b      	ldrh	r3, [r7, #2]
 800407a:	041a      	lsls	r2, r3, #16
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	619a      	str	r2, [r3, #24]
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
	...

0800408c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004096:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	4013      	ands	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040a2:	4a05      	ldr	r2, [pc, #20]	; (80040b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe f8ce 	bl	800224c <HAL_GPIO_EXTI_Callback>
  }
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40010400 	.word	0x40010400

080040bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040be:	b08b      	sub	sp, #44	; 0x2c
 80040c0:	af06      	add	r7, sp, #24
 80040c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e0d0      	b.n	8004270 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f007 fb9e 	bl	800b824 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2203      	movs	r2, #3
 80040ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f003 fc01 	bl	80078fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040fa:	2300      	movs	r3, #0
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	e04c      	b.n	800419a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	440b      	add	r3, r1
 8004110:	3301      	adds	r3, #1
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	440b      	add	r3, r1
 8004126:	7bfa      	ldrb	r2, [r7, #15]
 8004128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	b298      	uxth	r0, r3
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	440b      	add	r3, r1
 800413c:	3336      	adds	r3, #54	; 0x36
 800413e:	4602      	mov	r2, r0
 8004140:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	440b      	add	r3, r1
 8004152:	3303      	adds	r3, #3
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004158:	7bfa      	ldrb	r2, [r7, #15]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	440b      	add	r3, r1
 8004166:	3338      	adds	r3, #56	; 0x38
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	440b      	add	r3, r1
 800417a:	333c      	adds	r3, #60	; 0x3c
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	440b      	add	r3, r1
 800418e:	3340      	adds	r3, #64	; 0x40
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	3301      	adds	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d3ad      	bcc.n	8004100 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]
 80041a8:	e044      	b.n	8004234 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	440b      	add	r3, r1
 80041b8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	440b      	add	r3, r1
 80041ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041d6:	7bfa      	ldrb	r2, [r7, #15]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	440b      	add	r3, r1
 80041e4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	440b      	add	r3, r1
 80041fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004202:	7bfa      	ldrb	r2, [r7, #15]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	440b      	add	r3, r1
 8004210:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	440b      	add	r3, r1
 8004226:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	3301      	adds	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d3b5      	bcc.n	80041aa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	687e      	ldr	r6, [r7, #4]
 8004246:	466d      	mov	r5, sp
 8004248:	f106 0410 	add.w	r4, r6, #16
 800424c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800424e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	1d33      	adds	r3, r6, #4
 8004256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004258:	6838      	ldr	r0, [r7, #0]
 800425a:	f003 fb69 	bl	8007930 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004278 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_PCD_Start+0x16>
 800428a:	2302      	movs	r3, #2
 800428c:	e016      	b.n	80042bc <HAL_PCD_Start+0x44>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f003 fb18 	bl	80078d0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80042a0:	2101      	movs	r1, #1
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f007 faa0 	bl	800b7e8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f005 fcbc 	bl	8009c2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f005 fcb4 	bl	8009c3e <USB_ReadInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e0:	d102      	bne.n	80042e8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 faf5 	bl	80048d2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f005 fca6 	bl	8009c3e <USB_ReadInterrupts>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fc:	d112      	bne.n	8004324 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004306:	b29a      	uxth	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004310:	b292      	uxth	r2, r2
 8004312:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f007 faff 	bl	800b91a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800431c:	2100      	movs	r1, #0
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f8c7 	bl	80044b2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f005 fc88 	bl	8009c3e <USB_ReadInterrupts>
 800432e:	4603      	mov	r3, r0
 8004330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004338:	d10b      	bne.n	8004352 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004342:	b29a      	uxth	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800434c:	b292      	uxth	r2, r2
 800434e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f005 fc71 	bl	8009c3e <USB_ReadInterrupts>
 800435c:	4603      	mov	r3, r0
 800435e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004366:	d10b      	bne.n	8004380 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800437a:	b292      	uxth	r2, r2
 800437c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f005 fc5a 	bl	8009c3e <USB_ReadInterrupts>
 800438a:	4603      	mov	r3, r0
 800438c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004394:	d126      	bne.n	80043e4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800439e:	b29a      	uxth	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0204 	bic.w	r2, r2, #4
 80043a8:	b292      	uxth	r2, r2
 80043aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0208 	bic.w	r2, r2, #8
 80043c0:	b292      	uxth	r2, r2
 80043c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f007 fae0 	bl	800b98c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043de:	b292      	uxth	r2, r2
 80043e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f005 fc28 	bl	8009c3e <USB_ReadInterrupts>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f8:	d126      	bne.n	8004448 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004402:	b29a      	uxth	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0208 	orr.w	r2, r2, #8
 800440c:	b292      	uxth	r2, r2
 800440e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800441a:	b29a      	uxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004424:	b292      	uxth	r2, r2
 8004426:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004432:	b29a      	uxth	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0204 	orr.w	r2, r2, #4
 800443c:	b292      	uxth	r2, r2
 800443e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f007 fa88 	bl	800b958 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f005 fbf6 	bl	8009c3e <USB_ReadInterrupts>
 8004452:	4603      	mov	r3, r0
 8004454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445c:	d10e      	bne.n	800447c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004466:	b29a      	uxth	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004470:	b292      	uxth	r2, r2
 8004472:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f007 fa41 	bl	800b8fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f005 fbdc 	bl	8009c3e <USB_ReadInterrupts>
 8004486:	4603      	mov	r3, r0
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004490:	d10b      	bne.n	80044aa <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800449a:	b29a      	uxth	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a4:	b292      	uxth	r2, r2
 80044a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	460b      	mov	r3, r1
 80044bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_PCD_SetAddress+0x1a>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e013      	b.n	80044f4 <HAL_PCD_SetAddress+0x42>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	4611      	mov	r1, r2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f005 fb8d 	bl	8009c04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	4608      	mov	r0, r1
 8004506:	4611      	mov	r1, r2
 8004508:	461a      	mov	r2, r3
 800450a:	4603      	mov	r3, r0
 800450c:	70fb      	strb	r3, [r7, #3]
 800450e:	460b      	mov	r3, r1
 8004510:	803b      	strh	r3, [r7, #0]
 8004512:	4613      	mov	r3, r2
 8004514:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800451a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800451e:	2b00      	cmp	r3, #0
 8004520:	da0e      	bge.n	8004540 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4413      	add	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2201      	movs	r2, #1
 800453c:	705a      	strb	r2, [r3, #1]
 800453e:	e00e      	b.n	800455e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	f003 0207 	and.w	r2, r3, #7
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	b2da      	uxtb	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800456a:	883a      	ldrh	r2, [r7, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	78ba      	ldrb	r2, [r7, #2]
 8004574:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004588:	78bb      	ldrb	r3, [r7, #2]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d102      	bne.n	8004594 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_PCD_EP_Open+0xa6>
 800459e:	2302      	movs	r3, #2
 80045a0:	e00e      	b.n	80045c0 <HAL_PCD_EP_Open+0xc4>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f003 f9dd 	bl	8007970 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80045be:	7afb      	ldrb	r3, [r7, #11]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	da0e      	bge.n	80045fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4413      	add	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	705a      	strb	r2, [r3, #1]
 80045f8:	e00e      	b.n	8004618 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f003 0207 	and.w	r2, r3, #7
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	4413      	add	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	b2da      	uxtb	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_PCD_EP_Close+0x6a>
 800462e:	2302      	movs	r3, #2
 8004630:	e00e      	b.n	8004650 <HAL_PCD_EP_Close+0x88>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68f9      	ldr	r1, [r7, #12]
 8004640:	4618      	mov	r0, r3
 8004642:	f003 fcff 	bl	8008044 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	460b      	mov	r3, r1
 8004666:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004668:	7afb      	ldrb	r3, [r7, #11]
 800466a:	f003 0207 	and.w	r2, r3, #7
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2200      	movs	r2, #0
 8004690:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2200      	movs	r2, #0
 8004696:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004698:	7afb      	ldrb	r3, [r7, #11]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046a4:	7afb      	ldrb	r3, [r7, #11]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6979      	ldr	r1, [r7, #20]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f003 feb1 	bl	800841c <USB_EPStartXfer>
 80046ba:	e005      	b.n	80046c8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6979      	ldr	r1, [r7, #20]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f003 feaa 	bl	800841c <USB_EPStartXfer>
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	f003 0207 	and.w	r2, r3, #7
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	440b      	add	r3, r1
 80046f0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80046f4:	681b      	ldr	r3, [r3, #0]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	460b      	mov	r3, r1
 800470e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004710:	7afb      	ldrb	r3, [r7, #11]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2200      	movs	r2, #0
 8004744:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2201      	movs	r2, #1
 800474a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800474c:	7afb      	ldrb	r3, [r7, #11]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	b2da      	uxtb	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004758:	7afb      	ldrb	r3, [r7, #11]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6979      	ldr	r1, [r7, #20]
 8004768:	4618      	mov	r0, r3
 800476a:	f003 fe57 	bl	800841c <USB_EPStartXfer>
 800476e:	e005      	b.n	800477c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6979      	ldr	r1, [r7, #20]
 8004776:	4618      	mov	r0, r3
 8004778:	f003 fe50 	bl	800841c <USB_EPStartXfer>
  }

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	f003 0207 	and.w	r2, r3, #7
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	d901      	bls.n	80047a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e03e      	b.n	8004822 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	da0e      	bge.n	80047ca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	4413      	add	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	705a      	strb	r2, [r3, #1]
 80047c8:	e00c      	b.n	80047e4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	4413      	add	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_PCD_EP_SetStall+0x7e>
 8004800:	2302      	movs	r3, #2
 8004802:	e00e      	b.n	8004822 <HAL_PCD_EP_SetStall+0x9c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68f9      	ldr	r1, [r7, #12]
 8004812:	4618      	mov	r0, r3
 8004814:	f005 f8f9 	bl	8009a0a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	f003 020f 	and.w	r2, r3, #15
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d901      	bls.n	8004848 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e040      	b.n	80048ca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800484c:	2b00      	cmp	r3, #0
 800484e:	da0e      	bge.n	800486e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	4413      	add	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	705a      	strb	r2, [r3, #1]
 800486c:	e00e      	b.n	800488c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	f003 0207 	and.w	r2, r3, #7
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4413      	add	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_PCD_EP_ClrStall+0x82>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e00e      	b.n	80048ca <HAL_PCD_EP_ClrStall+0xa0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f005 f8f5 	bl	8009aaa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b08e      	sub	sp, #56	; 0x38
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048da:	e2ec      	b.n	8004eb6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048e4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80048e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80048f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f040 8161 	bne.w	8004bbe <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80048fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b00      	cmp	r3, #0
 8004904:	d152      	bne.n	80049ac <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29b      	uxth	r3, r3
 800490e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	81fb      	strh	r3, [r7, #14]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	89fb      	ldrh	r3, [r7, #14]
 800491e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004926:	b29b      	uxth	r3, r3
 8004928:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3328      	adds	r3, #40	; 0x28
 800492e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004938:	b29b      	uxth	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4413      	add	r3, r2
 8004944:	3302      	adds	r3, #2
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	441a      	add	r2, r3
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800496a:	2100      	movs	r1, #0
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f006 ffac 	bl	800b8ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 829b 	beq.w	8004eb6 <PCD_EP_ISR_Handler+0x5e4>
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f040 8296 	bne.w	8004eb6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004996:	b2da      	uxtb	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	b292      	uxth	r2, r2
 800499e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049aa:	e284      	b.n	8004eb6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80049bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d034      	beq.n	8004a30 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4413      	add	r3, r2
 80049da:	3306      	adds	r3, #6
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f005 f96e 	bl	8009ce6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a16:	4013      	ands	r3, r2
 8004a18:	823b      	strh	r3, [r7, #16]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	8a3a      	ldrh	r2, [r7, #16]
 8004a20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a24:	b292      	uxth	r2, r2
 8004a26:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f006 ff21 	bl	800b870 <HAL_PCD_SetupStageCallback>
 8004a2e:	e242      	b.n	8004eb6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a30:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f280 823e 	bge.w	8004eb6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a46:	4013      	ands	r3, r2
 8004a48:	83bb      	strh	r3, [r7, #28]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	8bba      	ldrh	r2, [r7, #28]
 8004a50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a54:	b292      	uxth	r2, r2
 8004a56:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3306      	adds	r3, #6
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d019      	beq.n	8004ac0 <PCD_EP_ISR_Handler+0x1ee>
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d015      	beq.n	8004ac0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	6959      	ldr	r1, [r3, #20]
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f005 f91e 	bl	8009ce6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	695a      	ldr	r2, [r3, #20]
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	441a      	add	r2, r3
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004ab8:	2100      	movs	r1, #0
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f006 feea 	bl	800b894 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f040 81f2 	bne.w	8004eb6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d112      	bne.n	8004b20 <PCD_EP_ISR_Handler+0x24e>
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	801a      	strh	r2, [r3, #0]
 8004b1e:	e02f      	b.n	8004b80 <PCD_EP_ISR_Handler+0x2ae>
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	2b3e      	cmp	r3, #62	; 0x3e
 8004b26:	d813      	bhi.n	8004b50 <PCD_EP_ISR_Handler+0x27e>
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <PCD_EP_ISR_Handler+0x270>
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	3301      	adds	r3, #1
 8004b40:	633b      	str	r3, [r7, #48]	; 0x30
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	029b      	lsls	r3, r3, #10
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	801a      	strh	r2, [r3, #0]
 8004b4e:	e017      	b.n	8004b80 <PCD_EP_ISR_Handler+0x2ae>
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	633b      	str	r3, [r7, #48]	; 0x30
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d102      	bne.n	8004b6a <PCD_EP_ISR_Handler+0x298>
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	3b01      	subs	r3, #1
 8004b68:	633b      	str	r3, [r7, #48]	; 0x30
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	029b      	lsls	r3, r3, #10
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b90:	827b      	strh	r3, [r7, #18]
 8004b92:	8a7b      	ldrh	r3, [r7, #18]
 8004b94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b98:	827b      	strh	r3, [r7, #18]
 8004b9a:	8a7b      	ldrh	r3, [r7, #18]
 8004b9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ba0:	827b      	strh	r3, [r7, #18]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	8a7b      	ldrh	r3, [r7, #18]
 8004ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	8013      	strh	r3, [r2, #0]
 8004bbc:	e17b      	b.n	8004eb6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004bd0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f280 80ea 	bge.w	8004dae <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	853b      	strh	r3, [r7, #40]	; 0x28
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004c04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c08:	b292      	uxth	r2, r2
 8004c0a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004c0c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	4413      	add	r3, r2
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	7b1b      	ldrb	r3, [r3, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d122      	bne.n	8004c70 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3306      	adds	r3, #6
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c52:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004c54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 8087 	beq.w	8004d6a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	6959      	ldr	r1, [r3, #20]
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	88da      	ldrh	r2, [r3, #6]
 8004c68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c6a:	f005 f83c 	bl	8009ce6 <USB_ReadPMA>
 8004c6e:	e07c      	b.n	8004d6a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	78db      	ldrb	r3, [r3, #3]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d108      	bne.n	8004c8a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004c78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f927 	bl	8004ed2 <HAL_PCD_EP_DB_Receive>
 8004c84:	4603      	mov	r3, r0
 8004c86:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c88:	e06f      	b.n	8004d6a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca4:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d021      	beq.n	8004d28 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d02a      	beq.n	8004d6a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	6959      	ldr	r1, [r3, #20]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	891a      	ldrh	r2, [r3, #8]
 8004d20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d22:	f004 ffe0 	bl	8009ce6 <USB_ReadPMA>
 8004d26:	e020      	b.n	8004d6a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	3306      	adds	r3, #6
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d50:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	6959      	ldr	r1, [r3, #20]
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	895a      	ldrh	r2, [r3, #10]
 8004d64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d66:	f004 ffbe 	bl	8009ce6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d70:	441a      	add	r2, r3
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d7c:	441a      	add	r2, r3
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d004      	beq.n	8004d94 <PCD_EP_ISR_Handler+0x4c2>
 8004d8a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d206      	bcs.n	8004da2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f006 fd7a 	bl	800b894 <HAL_PCD_DataOutStageCallback>
 8004da0:	e005      	b.n	8004dae <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da8:	4618      	mov	r0, r3
 8004daa:	f003 fb37 	bl	800841c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004dae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d07e      	beq.n	8004eb6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004db8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	843b      	strh	r3, [r7, #32]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	8c3b      	ldrh	r3, [r7, #32]
 8004df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	78db      	ldrb	r3, [r3, #3]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d00c      	beq.n	8004e26 <PCD_EP_ISR_Handler+0x554>
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	78db      	ldrb	r3, [r3, #3]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d146      	bne.n	8004eaa <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d141      	bne.n	8004eaa <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4413      	add	r3, r2
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e4e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	8bfb      	ldrh	r3, [r7, #30]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d906      	bls.n	8004e68 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	8bfb      	ldrh	r3, [r7, #30]
 8004e60:	1ad2      	subs	r2, r2, r3
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	619a      	str	r2, [r3, #24]
 8004e66:	e002      	b.n	8004e6e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f006 fd24 	bl	800b8ca <HAL_PCD_DataInStageCallback>
 8004e82:	e018      	b.n	8004eb6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	8bfb      	ldrh	r3, [r7, #30]
 8004e8a:	441a      	add	r2, r3
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	8bfb      	ldrh	r3, [r7, #30]
 8004e96:	441a      	add	r2, r3
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f003 faba 	bl	800841c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004ea8:	e005      	b.n	8004eb6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004eaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004eac:	461a      	mov	r2, r3
 8004eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f91b 	bl	80050ec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	b21b      	sxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f6ff ad0a 	blt.w	80048dc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3738      	adds	r7, #56	; 0x38
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b088      	sub	sp, #32
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	4613      	mov	r3, r2
 8004ede:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ee0:	88fb      	ldrh	r3, [r7, #6]
 8004ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d07e      	beq.n	8004fe8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4413      	add	r3, r2
 8004efe:	3302      	adds	r3, #2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f12:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	8b7b      	ldrh	r3, [r7, #26]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d306      	bcc.n	8004f2c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	8b7b      	ldrh	r3, [r7, #26]
 8004f24:	1ad2      	subs	r2, r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	619a      	str	r2, [r3, #24]
 8004f2a:	e002      	b.n	8004f32 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d123      	bne.n	8004f82 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f54:	833b      	strh	r3, [r7, #24]
 8004f56:	8b3b      	ldrh	r3, [r7, #24]
 8004f58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f5c:	833b      	strh	r3, [r7, #24]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	441a      	add	r2, r3
 8004f6c:	8b3b      	ldrh	r3, [r7, #24]
 8004f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01f      	beq.n	8004fcc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	82fb      	strh	r3, [r7, #22]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	8afb      	ldrh	r3, [r7, #22]
 8004fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004fcc:	8b7b      	ldrh	r3, [r7, #26]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8087 	beq.w	80050e2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6959      	ldr	r1, [r3, #20]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	891a      	ldrh	r2, [r3, #8]
 8004fe0:	8b7b      	ldrh	r3, [r7, #26]
 8004fe2:	f004 fe80 	bl	8009ce6 <USB_ReadPMA>
 8004fe6:	e07c      	b.n	80050e2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3306      	adds	r3, #6
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005010:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	8b7b      	ldrh	r3, [r7, #26]
 8005018:	429a      	cmp	r2, r3
 800501a:	d306      	bcc.n	800502a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	699a      	ldr	r2, [r3, #24]
 8005020:	8b7b      	ldrh	r3, [r7, #26]
 8005022:	1ad2      	subs	r2, r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	619a      	str	r2, [r3, #24]
 8005028:	e002      	b.n	8005030 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2200      	movs	r2, #0
 800502e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d123      	bne.n	8005080 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	83fb      	strh	r3, [r7, #30]
 8005054:	8bfb      	ldrh	r3, [r7, #30]
 8005056:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800505a:	83fb      	strh	r3, [r7, #30]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	441a      	add	r2, r3
 800506a:	8bfb      	ldrh	r3, [r7, #30]
 800506c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507c:	b29b      	uxth	r3, r3
 800507e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11f      	bne.n	80050ca <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b29b      	uxth	r3, r3
 800509c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a4:	83bb      	strh	r3, [r7, #28]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	441a      	add	r2, r3
 80050b4:	8bbb      	ldrh	r3, [r7, #28]
 80050b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050ca:	8b7b      	ldrh	r3, [r7, #26]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6959      	ldr	r1, [r3, #20]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	895a      	ldrh	r2, [r3, #10]
 80050dc:	8b7b      	ldrh	r3, [r7, #26]
 80050de:	f004 fe02 	bl	8009ce6 <USB_ReadPMA>
    }
  }

  return count;
 80050e2:	8b7b      	ldrh	r3, [r7, #26]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b0a2      	sub	sp, #136	; 0x88
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 81c7 	beq.w	8005494 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800510e:	b29b      	uxth	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	3302      	adds	r3, #2
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800512e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800513a:	429a      	cmp	r2, r3
 800513c:	d907      	bls.n	800514e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005146:	1ad2      	subs	r2, r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	619a      	str	r2, [r3, #24]
 800514c:	e002      	b.n	8005154 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2200      	movs	r2, #0
 8005152:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	f040 80b9 	bne.w	80052d0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d126      	bne.n	80051b4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	62bb      	str	r3, [r7, #40]	; 0x28
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005174:	b29b      	uxth	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	4413      	add	r3, r2
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	011a      	lsls	r2, r3, #4
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	4413      	add	r3, r2
 8005188:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005198:	b29a      	uxth	r2, r3
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	801a      	strh	r2, [r3, #0]
 80051b2:	e01a      	b.n	80051ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d116      	bne.n	80051ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	633b      	str	r3, [r7, #48]	; 0x30
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	4413      	add	r3, r2
 80051d2:	633b      	str	r3, [r7, #48]	; 0x30
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	011a      	lsls	r2, r3, #4
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	4413      	add	r3, r2
 80051de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	2200      	movs	r2, #0
 80051e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	623b      	str	r3, [r7, #32]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d126      	bne.n	8005246 <HAL_PCD_EP_DB_Transmit+0x15a>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005206:	b29b      	uxth	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	4413      	add	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	011a      	lsls	r2, r3, #4
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	4413      	add	r3, r2
 800521a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800522a:	b29a      	uxth	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800523a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800523e:	b29a      	uxth	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	801a      	strh	r2, [r3, #0]
 8005244:	e017      	b.n	8005276 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d113      	bne.n	8005276 <HAL_PCD_EP_DB_Transmit+0x18a>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005256:	b29b      	uxth	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	4413      	add	r3, r2
 800525e:	623b      	str	r3, [r7, #32]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	011a      	lsls	r2, r3, #4
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	4413      	add	r3, r2
 800526a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2200      	movs	r2, #0
 8005274:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	4619      	mov	r1, r3
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f006 fb24 	bl	800b8ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 82d4 	beq.w	8005836 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a8:	827b      	strh	r3, [r7, #18]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	441a      	add	r2, r3
 80052b8:	8a7b      	ldrh	r3, [r7, #18]
 80052ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	8013      	strh	r3, [r2, #0]
 80052ce:	e2b2      	b.n	8005836 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d021      	beq.n	800531e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	461a      	mov	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	441a      	add	r2, r3
 8005306:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800530a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005312:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531a:	b29b      	uxth	r3, r3
 800531c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005324:	2b01      	cmp	r3, #1
 8005326:	f040 8286 	bne.w	8005836 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	695a      	ldr	r2, [r3, #20]
 800532e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005332:	441a      	add	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005340:	441a      	add	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	6a1a      	ldr	r2, [r3, #32]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	429a      	cmp	r2, r3
 8005350:	d309      	bcc.n	8005366 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	621a      	str	r2, [r3, #32]
 8005364:	e015      	b.n	8005392 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d107      	bne.n	800537e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800536e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005372:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800537c:	e009      	b.n	8005392 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2200      	movs	r2, #0
 8005390:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	785b      	ldrb	r3, [r3, #1]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d155      	bne.n	8005446 <HAL_PCD_EP_DB_Transmit+0x35a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	63bb      	str	r3, [r7, #56]	; 0x38
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	4413      	add	r3, r2
 80053b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	011a      	lsls	r2, r3, #4
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	4413      	add	r3, r2
 80053bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053c0:	637b      	str	r3, [r7, #52]	; 0x34
 80053c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d112      	bne.n	80053ee <HAL_PCD_EP_DB_Transmit+0x302>
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e047      	b.n	800547e <HAL_PCD_EP_DB_Transmit+0x392>
 80053ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f0:	2b3e      	cmp	r3, #62	; 0x3e
 80053f2:	d811      	bhi.n	8005418 <HAL_PCD_EP_DB_Transmit+0x32c>
 80053f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_PCD_EP_DB_Transmit+0x31e>
 8005404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005406:	3301      	adds	r3, #1
 8005408:	64bb      	str	r3, [r7, #72]	; 0x48
 800540a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800540c:	b29b      	uxth	r3, r3
 800540e:	029b      	lsls	r3, r3, #10
 8005410:	b29a      	uxth	r2, r3
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	e032      	b.n	800547e <HAL_PCD_EP_DB_Transmit+0x392>
 8005418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	64bb      	str	r3, [r7, #72]	; 0x48
 800541e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	2b00      	cmp	r3, #0
 8005426:	d102      	bne.n	800542e <HAL_PCD_EP_DB_Transmit+0x342>
 8005428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800542a:	3b01      	subs	r3, #1
 800542c:	64bb      	str	r3, [r7, #72]	; 0x48
 800542e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005430:	b29b      	uxth	r3, r3
 8005432:	029b      	lsls	r3, r3, #10
 8005434:	b29b      	uxth	r3, r3
 8005436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800543a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543e:	b29a      	uxth	r2, r3
 8005440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005442:	801a      	strh	r2, [r3, #0]
 8005444:	e01b      	b.n	800547e <HAL_PCD_EP_DB_Transmit+0x392>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d117      	bne.n	800547e <HAL_PCD_EP_DB_Transmit+0x392>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	643b      	str	r3, [r7, #64]	; 0x40
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545c:	b29b      	uxth	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005462:	4413      	add	r3, r2
 8005464:	643b      	str	r3, [r7, #64]	; 0x40
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	011a      	lsls	r2, r3, #4
 800546c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800546e:	4413      	add	r3, r2
 8005470:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005478:	b29a      	uxth	r2, r3
 800547a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	6959      	ldr	r1, [r3, #20]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	891a      	ldrh	r2, [r3, #8]
 800548a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548c:	b29b      	uxth	r3, r3
 800548e:	f004 fbe5 	bl	8009c5c <USB_WritePMA>
 8005492:	e1d0      	b.n	8005836 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549c:	b29b      	uxth	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4413      	add	r3, r2
 80054a8:	3306      	adds	r3, #6
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d307      	bcc.n	80054dc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	699a      	ldr	r2, [r3, #24]
 80054d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054d4:	1ad2      	subs	r2, r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	619a      	str	r2, [r3, #24]
 80054da:	e002      	b.n	80054e2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2200      	movs	r2, #0
 80054e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f040 80c4 	bne.w	8005674 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d126      	bne.n	8005542 <HAL_PCD_EP_DB_Transmit+0x456>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005502:	b29b      	uxth	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005508:	4413      	add	r3, r2
 800550a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	011a      	lsls	r2, r3, #4
 8005512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005514:	4413      	add	r3, r2
 8005516:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800551a:	66bb      	str	r3, [r7, #104]	; 0x68
 800551c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005526:	b29a      	uxth	r2, r3
 8005528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800553a:	b29a      	uxth	r2, r3
 800553c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	e01a      	b.n	8005578 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d116      	bne.n	8005578 <HAL_PCD_EP_DB_Transmit+0x48c>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	677b      	str	r3, [r7, #116]	; 0x74
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005558:	b29b      	uxth	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800555e:	4413      	add	r3, r2
 8005560:	677b      	str	r3, [r7, #116]	; 0x74
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	011a      	lsls	r2, r3, #4
 8005568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800556a:	4413      	add	r3, r2
 800556c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005570:	673b      	str	r3, [r7, #112]	; 0x70
 8005572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005574:	2200      	movs	r2, #0
 8005576:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	67bb      	str	r3, [r7, #120]	; 0x78
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d12f      	bne.n	80055e6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005596:	b29b      	uxth	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800559e:	4413      	add	r3, r2
 80055a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	011a      	lsls	r2, r3, #4
 80055aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055ae:	4413      	add	r3, r2
 80055b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055dc:	b29a      	uxth	r2, r3
 80055de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e017      	b.n	8005616 <HAL_PCD_EP_DB_Transmit+0x52a>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d113      	bne.n	8005616 <HAL_PCD_EP_DB_Transmit+0x52a>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055fc:	4413      	add	r3, r2
 80055fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	011a      	lsls	r2, r3, #4
 8005606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005608:	4413      	add	r3, r2
 800560a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800560e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005610:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005612:	2200      	movs	r2, #0
 8005614:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	4619      	mov	r1, r3
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f006 f954 	bl	800b8ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005628:	2b00      	cmp	r3, #0
 800562a:	f040 8104 	bne.w	8005836 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29b      	uxth	r3, r3
 8005640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005648:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800565e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800566a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]
 8005672:	e0e0      	b.n	8005836 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d121      	bne.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005698:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80056ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056be:	b29b      	uxth	r3, r3
 80056c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	f040 80b4 	bne.w	8005836 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	695a      	ldr	r2, [r3, #20]
 80056d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056d6:	441a      	add	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056e4:	441a      	add	r2, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6a1a      	ldr	r2, [r3, #32]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d309      	bcc.n	800570a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	6a1a      	ldr	r2, [r3, #32]
 8005700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005702:	1ad2      	subs	r2, r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	621a      	str	r2, [r3, #32]
 8005708:	e015      	b.n	8005736 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d107      	bne.n	8005722 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005712:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005716:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005720:	e009      	b.n	8005736 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2200      	movs	r2, #0
 800572c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	667b      	str	r3, [r7, #100]	; 0x64
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d155      	bne.n	80057f0 <HAL_PCD_EP_DB_Transmit+0x704>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005752:	b29b      	uxth	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005758:	4413      	add	r3, r2
 800575a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	011a      	lsls	r2, r3, #4
 8005762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005764:	4413      	add	r3, r2
 8005766:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800576a:	65bb      	str	r3, [r7, #88]	; 0x58
 800576c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800576e:	2b00      	cmp	r3, #0
 8005770:	d112      	bne.n	8005798 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29b      	uxth	r3, r3
 8005778:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800577c:	b29a      	uxth	r2, r3
 800577e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005780:	801a      	strh	r2, [r3, #0]
 8005782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005790:	b29a      	uxth	r2, r3
 8005792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	e044      	b.n	8005822 <HAL_PCD_EP_DB_Transmit+0x736>
 8005798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800579a:	2b3e      	cmp	r3, #62	; 0x3e
 800579c:	d811      	bhi.n	80057c2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800579e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	657b      	str	r3, [r7, #84]	; 0x54
 80057a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80057ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b0:	3301      	adds	r3, #1
 80057b2:	657b      	str	r3, [r7, #84]	; 0x54
 80057b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	029b      	lsls	r3, r3, #10
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057be:	801a      	strh	r2, [r3, #0]
 80057c0:	e02f      	b.n	8005822 <HAL_PCD_EP_DB_Transmit+0x736>
 80057c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	657b      	str	r3, [r7, #84]	; 0x54
 80057c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80057d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d4:	3b01      	subs	r3, #1
 80057d6:	657b      	str	r3, [r7, #84]	; 0x54
 80057d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057da:	b29b      	uxth	r3, r3
 80057dc:	029b      	lsls	r3, r3, #10
 80057de:	b29b      	uxth	r3, r3
 80057e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	e018      	b.n	8005822 <HAL_PCD_EP_DB_Transmit+0x736>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d114      	bne.n	8005822 <HAL_PCD_EP_DB_Transmit+0x736>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005806:	4413      	add	r3, r2
 8005808:	667b      	str	r3, [r7, #100]	; 0x64
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	011a      	lsls	r2, r3, #4
 8005810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005812:	4413      	add	r3, r2
 8005814:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005818:	663b      	str	r3, [r7, #96]	; 0x60
 800581a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581c:	b29a      	uxth	r2, r3
 800581e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005820:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6959      	ldr	r1, [r3, #20]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	895a      	ldrh	r2, [r3, #10]
 800582e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005830:	b29b      	uxth	r3, r3
 8005832:	f004 fa13 	bl	8009c5c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800584c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005850:	823b      	strh	r3, [r7, #16]
 8005852:	8a3b      	ldrh	r3, [r7, #16]
 8005854:	f083 0310 	eor.w	r3, r3, #16
 8005858:	823b      	strh	r3, [r7, #16]
 800585a:	8a3b      	ldrh	r3, [r7, #16]
 800585c:	f083 0320 	eor.w	r3, r3, #32
 8005860:	823b      	strh	r3, [r7, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	441a      	add	r2, r3
 8005870:	8a3b      	ldrh	r3, [r7, #16]
 8005872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005882:	b29b      	uxth	r3, r3
 8005884:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3788      	adds	r7, #136	; 0x88
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	460b      	mov	r3, r1
 800589c:	817b      	strh	r3, [r7, #10]
 800589e:	4613      	mov	r3, r2
 80058a0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80058a2:	897b      	ldrh	r3, [r7, #10]
 80058a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ae:	897b      	ldrh	r3, [r7, #10]
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e009      	b.n	80058da <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058c6:	897a      	ldrh	r2, [r7, #10]
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80058da:	893b      	ldrh	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d107      	bne.n	80058f0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2200      	movs	r2, #0
 80058e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	80da      	strh	r2, [r3, #6]
 80058ee:	e00b      	b.n	8005908 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2201      	movs	r2, #1
 80058f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0c1b      	lsrs	r3, r3, #16
 8005902:	b29a      	uxth	r2, r3
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr

08005914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e31d      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005926:	4b94      	ldr	r3, [pc, #592]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
 800592e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005930:	4b91      	ldr	r3, [pc, #580]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005938:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d07b      	beq.n	8005a3e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d006      	beq.n	800595a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b0c      	cmp	r3, #12
 8005950:	d10f      	bne.n	8005972 <HAL_RCC_OscConfig+0x5e>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005958:	d10b      	bne.n	8005972 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595a:	4b87      	ldr	r3, [pc, #540]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d06a      	beq.n	8005a3c <HAL_RCC_OscConfig+0x128>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d166      	bne.n	8005a3c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e2f7      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d106      	bne.n	8005988 <HAL_RCC_OscConfig+0x74>
 800597a:	4b7f      	ldr	r3, [pc, #508]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a7e      	ldr	r2, [pc, #504]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e02d      	b.n	80059e4 <HAL_RCC_OscConfig+0xd0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10c      	bne.n	80059aa <HAL_RCC_OscConfig+0x96>
 8005990:	4b79      	ldr	r3, [pc, #484]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a78      	ldr	r2, [pc, #480]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	4b76      	ldr	r3, [pc, #472]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a75      	ldr	r2, [pc, #468]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 80059a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	e01c      	b.n	80059e4 <HAL_RCC_OscConfig+0xd0>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b05      	cmp	r3, #5
 80059b0:	d10c      	bne.n	80059cc <HAL_RCC_OscConfig+0xb8>
 80059b2:	4b71      	ldr	r3, [pc, #452]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a70      	ldr	r2, [pc, #448]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 80059b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	4b6e      	ldr	r3, [pc, #440]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a6d      	ldr	r2, [pc, #436]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 80059c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	e00b      	b.n	80059e4 <HAL_RCC_OscConfig+0xd0>
 80059cc:	4b6a      	ldr	r3, [pc, #424]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a69      	ldr	r2, [pc, #420]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 80059d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	4b67      	ldr	r3, [pc, #412]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a66      	ldr	r2, [pc, #408]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 80059de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d013      	beq.n	8005a14 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ec:	f7fd fcc6 	bl	800337c <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059f4:	f7fd fcc2 	bl	800337c <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b64      	cmp	r3, #100	; 0x64
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e2ad      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a06:	4b5c      	ldr	r3, [pc, #368]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0xe0>
 8005a12:	e014      	b.n	8005a3e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a14:	f7fd fcb2 	bl	800337c <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a1c:	f7fd fcae 	bl	800337c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b64      	cmp	r3, #100	; 0x64
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e299      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a2e:	4b52      	ldr	r3, [pc, #328]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x108>
 8005a3a:	e000      	b.n	8005a3e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d05a      	beq.n	8005b00 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b0c      	cmp	r3, #12
 8005a54:	d119      	bne.n	8005a8a <HAL_RCC_OscConfig+0x176>
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d116      	bne.n	8005a8a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a5c:	4b46      	ldr	r3, [pc, #280]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_RCC_OscConfig+0x160>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e276      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a74:	4b40      	ldr	r3, [pc, #256]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	493d      	ldr	r1, [pc, #244]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a88:	e03a      	b.n	8005b00 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d020      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a92:	4b3a      	ldr	r3, [pc, #232]	; (8005b7c <HAL_RCC_OscConfig+0x268>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a98:	f7fd fc70 	bl	800337c <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aa0:	f7fd fc6c 	bl	800337c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e257      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ab2:	4b31      	ldr	r3, [pc, #196]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abe:	4b2e      	ldr	r3, [pc, #184]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	492a      	ldr	r1, [pc, #168]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]
 8005ad2:	e015      	b.n	8005b00 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ad4:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <HAL_RCC_OscConfig+0x268>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ada:	f7fd fc4f 	bl	800337c <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ae2:	f7fd fc4b 	bl	800337c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e236      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005af4:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1f0      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80b8 	beq.w	8005c7e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d170      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b14:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <HAL_RCC_OscConfig+0x218>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e21a      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1a      	ldr	r2, [r3, #32]
 8005b30:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d921      	bls.n	8005b80 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fc19 	bl	8006378 <RCC_SetFlashLatencyFromMSIRange>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e208      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b50:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	4906      	ldr	r1, [pc, #24]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	061b      	lsls	r3, r3, #24
 8005b70:	4901      	ldr	r1, [pc, #4]	; (8005b78 <HAL_RCC_OscConfig+0x264>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	604b      	str	r3, [r1, #4]
 8005b76:	e020      	b.n	8005bba <HAL_RCC_OscConfig+0x2a6>
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b80:	4ba4      	ldr	r3, [pc, #656]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	49a1      	ldr	r1, [pc, #644]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b92:	4ba0      	ldr	r3, [pc, #640]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	061b      	lsls	r3, r3, #24
 8005ba0:	499c      	ldr	r1, [pc, #624]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fbe4 	bl	8006378 <RCC_SetFlashLatencyFromMSIRange>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e1d3      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	0b5b      	lsrs	r3, r3, #13
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005bca:	4a92      	ldr	r2, [pc, #584]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005bcc:	6892      	ldr	r2, [r2, #8]
 8005bce:	0912      	lsrs	r2, r2, #4
 8005bd0:	f002 020f 	and.w	r2, r2, #15
 8005bd4:	4990      	ldr	r1, [pc, #576]	; (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005bd6:	5c8a      	ldrb	r2, [r1, r2]
 8005bd8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005bda:	4a90      	ldr	r2, [pc, #576]	; (8005e1c <HAL_RCC_OscConfig+0x508>)
 8005bdc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005bde:	4b90      	ldr	r3, [pc, #576]	; (8005e20 <HAL_RCC_OscConfig+0x50c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fd fb7e 	bl	80032e4 <HAL_InitTick>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d045      	beq.n	8005c7e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	e1b5      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d029      	beq.n	8005c52 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005bfe:	4b89      	ldr	r3, [pc, #548]	; (8005e24 <HAL_RCC_OscConfig+0x510>)
 8005c00:	2201      	movs	r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c04:	f7fd fbba 	bl	800337c <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c0c:	f7fd fbb6 	bl	800337c <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e1a1      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c1e:	4b7d      	ldr	r3, [pc, #500]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f0      	beq.n	8005c0c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c2a:	4b7a      	ldr	r3, [pc, #488]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	4977      	ldr	r1, [pc, #476]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c3c:	4b75      	ldr	r3, [pc, #468]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	061b      	lsls	r3, r3, #24
 8005c4a:	4972      	ldr	r1, [pc, #456]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	604b      	str	r3, [r1, #4]
 8005c50:	e015      	b.n	8005c7e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c52:	4b74      	ldr	r3, [pc, #464]	; (8005e24 <HAL_RCC_OscConfig+0x510>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c58:	f7fd fb90 	bl	800337c <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c60:	f7fd fb8c 	bl	800337c <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e177      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005c72:	4b68      	ldr	r3, [pc, #416]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d030      	beq.n	8005cec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d016      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c92:	4b65      	ldr	r3, [pc, #404]	; (8005e28 <HAL_RCC_OscConfig+0x514>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c98:	f7fd fb70 	bl	800337c <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ca0:	f7fd fb6c 	bl	800337c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e157      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cb2:	4b58      	ldr	r3, [pc, #352]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x38c>
 8005cbe:	e015      	b.n	8005cec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc0:	4b59      	ldr	r3, [pc, #356]	; (8005e28 <HAL_RCC_OscConfig+0x514>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc6:	f7fd fb59 	bl	800337c <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cce:	f7fd fb55 	bl	800337c <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e140      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ce0:	4b4c      	ldr	r3, [pc, #304]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f0      	bne.n	8005cce <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80b5 	beq.w	8005e64 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cfe:	4b45      	ldr	r3, [pc, #276]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10d      	bne.n	8005d26 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d0a:	4b42      	ldr	r3, [pc, #264]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	4a41      	ldr	r2, [pc, #260]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d14:	6253      	str	r3, [r2, #36]	; 0x24
 8005d16:	4b3f      	ldr	r3, [pc, #252]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	60bb      	str	r3, [r7, #8]
 8005d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d22:	2301      	movs	r3, #1
 8005d24:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d26:	4b41      	ldr	r3, [pc, #260]	; (8005e2c <HAL_RCC_OscConfig+0x518>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d118      	bne.n	8005d64 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d32:	4b3e      	ldr	r3, [pc, #248]	; (8005e2c <HAL_RCC_OscConfig+0x518>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a3d      	ldr	r2, [pc, #244]	; (8005e2c <HAL_RCC_OscConfig+0x518>)
 8005d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d3e:	f7fd fb1d 	bl	800337c <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d46:	f7fd fb19 	bl	800337c <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b64      	cmp	r3, #100	; 0x64
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e104      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d58:	4b34      	ldr	r3, [pc, #208]	; (8005e2c <HAL_RCC_OscConfig+0x518>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d106      	bne.n	8005d7a <HAL_RCC_OscConfig+0x466>
 8005d6c:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d70:	4a28      	ldr	r2, [pc, #160]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d76:	6353      	str	r3, [r2, #52]	; 0x34
 8005d78:	e02d      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4c2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCC_OscConfig+0x488>
 8005d82:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	4a23      	ldr	r2, [pc, #140]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d8c:	6353      	str	r3, [r2, #52]	; 0x34
 8005d8e:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d92:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005d94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d98:	6353      	str	r3, [r2, #52]	; 0x34
 8005d9a:	e01c      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4c2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b05      	cmp	r3, #5
 8005da2:	d10c      	bne.n	8005dbe <HAL_RCC_OscConfig+0x4aa>
 8005da4:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da8:	4a1a      	ldr	r2, [pc, #104]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dae:	6353      	str	r3, [r2, #52]	; 0x34
 8005db0:	4b18      	ldr	r3, [pc, #96]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	4a17      	ldr	r2, [pc, #92]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dba:	6353      	str	r3, [r2, #52]	; 0x34
 8005dbc:	e00b      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4c2>
 8005dbe:	4b15      	ldr	r3, [pc, #84]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	4a14      	ldr	r2, [pc, #80]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc8:	6353      	str	r3, [r2, #52]	; 0x34
 8005dca:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	4a11      	ldr	r2, [pc, #68]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005dd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d015      	beq.n	8005e0a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dde:	f7fd facd 	bl	800337c <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005de4:	e00a      	b.n	8005dfc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de6:	f7fd fac9 	bl	800337c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e0b2      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0ee      	beq.n	8005de6 <HAL_RCC_OscConfig+0x4d2>
 8005e08:	e023      	b.n	8005e52 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e0a:	f7fd fab7 	bl	800337c <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e10:	e019      	b.n	8005e46 <HAL_RCC_OscConfig+0x532>
 8005e12:	bf00      	nop
 8005e14:	40023800 	.word	0x40023800
 8005e18:	0800ec88 	.word	0x0800ec88
 8005e1c:	2000036c 	.word	0x2000036c
 8005e20:	20000370 	.word	0x20000370
 8005e24:	42470020 	.word	0x42470020
 8005e28:	42470680 	.word	0x42470680
 8005e2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e30:	f7fd faa4 	bl	800337c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e08d      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e46:	4b49      	ldr	r3, [pc, #292]	; (8005f6c <HAL_RCC_OscConfig+0x658>)
 8005e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1ee      	bne.n	8005e30 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e52:	7ffb      	ldrb	r3, [r7, #31]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d105      	bne.n	8005e64 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e58:	4b44      	ldr	r3, [pc, #272]	; (8005f6c <HAL_RCC_OscConfig+0x658>)
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	4a43      	ldr	r2, [pc, #268]	; (8005f6c <HAL_RCC_OscConfig+0x658>)
 8005e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e62:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d079      	beq.n	8005f60 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d056      	beq.n	8005f20 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d13b      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7a:	4b3d      	ldr	r3, [pc, #244]	; (8005f70 <HAL_RCC_OscConfig+0x65c>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e80:	f7fd fa7c 	bl	800337c <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e88:	f7fd fa78 	bl	800337c <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e063      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e9a:	4b34      	ldr	r3, [pc, #208]	; (8005f6c <HAL_RCC_OscConfig+0x658>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ea6:	4b31      	ldr	r3, [pc, #196]	; (8005f6c <HAL_RCC_OscConfig+0x658>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	4319      	orrs	r1, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	492b      	ldr	r1, [pc, #172]	; (8005f6c <HAL_RCC_OscConfig+0x658>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ec4:	4b2a      	ldr	r3, [pc, #168]	; (8005f70 <HAL_RCC_OscConfig+0x65c>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eca:	f7fd fa57 	bl	800337c <HAL_GetTick>
 8005ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ed2:	f7fd fa53 	bl	800337c <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e03e      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ee4:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <HAL_RCC_OscConfig+0x658>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x5be>
 8005ef0:	e036      	b.n	8005f60 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef2:	4b1f      	ldr	r3, [pc, #124]	; (8005f70 <HAL_RCC_OscConfig+0x65c>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef8:	f7fd fa40 	bl	800337c <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f00:	f7fd fa3c 	bl	800337c <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e027      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f12:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <HAL_RCC_OscConfig+0x658>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f0      	bne.n	8005f00 <HAL_RCC_OscConfig+0x5ec>
 8005f1e:	e01f      	b.n	8005f60 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e01a      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f2c:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <HAL_RCC_OscConfig+0x658>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d10d      	bne.n	8005f5c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d106      	bne.n	8005f5c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3720      	adds	r7, #32
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	42470060 	.word	0x42470060

08005f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e11a      	b.n	80061be <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f88:	4b8f      	ldr	r3, [pc, #572]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d919      	bls.n	8005fca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d105      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x34>
 8005f9c:	4b8a      	ldr	r3, [pc, #552]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a89      	ldr	r2, [pc, #548]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 8005fa2:	f043 0304 	orr.w	r3, r3, #4
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	4b87      	ldr	r3, [pc, #540]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f023 0201 	bic.w	r2, r3, #1
 8005fb0:	4985      	ldr	r1, [pc, #532]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb8:	4b83      	ldr	r3, [pc, #524]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d001      	beq.n	8005fca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e0f9      	b.n	80061be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fd6:	4b7d      	ldr	r3, [pc, #500]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	497a      	ldr	r1, [pc, #488]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 808e 	beq.w	8006112 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d107      	bne.n	800600e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ffe:	4b73      	ldr	r3, [pc, #460]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d121      	bne.n	800604e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e0d7      	b.n	80061be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b03      	cmp	r3, #3
 8006014:	d107      	bne.n	8006026 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006016:	4b6d      	ldr	r3, [pc, #436]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d115      	bne.n	800604e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e0cb      	b.n	80061be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d107      	bne.n	800603e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800602e:	4b67      	ldr	r3, [pc, #412]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e0bf      	b.n	80061be <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800603e:	4b63      	ldr	r3, [pc, #396]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e0b7      	b.n	80061be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800604e:	4b5f      	ldr	r3, [pc, #380]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f023 0203 	bic.w	r2, r3, #3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	495c      	ldr	r1, [pc, #368]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 800605c:	4313      	orrs	r3, r2
 800605e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006060:	f7fd f98c 	bl	800337c <HAL_GetTick>
 8006064:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d112      	bne.n	8006094 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800606e:	e00a      	b.n	8006086 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006070:	f7fd f984 	bl	800337c <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	f241 3288 	movw	r2, #5000	; 0x1388
 800607e:	4293      	cmp	r3, r2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e09b      	b.n	80061be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006086:	4b51      	ldr	r3, [pc, #324]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 030c 	and.w	r3, r3, #12
 800608e:	2b08      	cmp	r3, #8
 8006090:	d1ee      	bne.n	8006070 <HAL_RCC_ClockConfig+0xfc>
 8006092:	e03e      	b.n	8006112 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d112      	bne.n	80060c2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800609c:	e00a      	b.n	80060b4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800609e:	f7fd f96d 	bl	800337c <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e084      	b.n	80061be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060b4:	4b45      	ldr	r3, [pc, #276]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 030c 	and.w	r3, r3, #12
 80060bc:	2b0c      	cmp	r3, #12
 80060be:	d1ee      	bne.n	800609e <HAL_RCC_ClockConfig+0x12a>
 80060c0:	e027      	b.n	8006112 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d11d      	bne.n	8006106 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80060ca:	e00a      	b.n	80060e2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060cc:	f7fd f956 	bl	800337c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e06d      	b.n	80061be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80060e2:	4b3a      	ldr	r3, [pc, #232]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d1ee      	bne.n	80060cc <HAL_RCC_ClockConfig+0x158>
 80060ee:	e010      	b.n	8006112 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f0:	f7fd f944 	bl	800337c <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e05b      	b.n	80061be <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006106:	4b31      	ldr	r3, [pc, #196]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1ee      	bne.n	80060f0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006112:	4b2d      	ldr	r3, [pc, #180]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d219      	bcs.n	8006154 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d105      	bne.n	8006132 <HAL_RCC_ClockConfig+0x1be>
 8006126:	4b28      	ldr	r3, [pc, #160]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a27      	ldr	r2, [pc, #156]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 800612c:	f043 0304 	orr.w	r3, r3, #4
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f023 0201 	bic.w	r2, r3, #1
 800613a:	4923      	ldr	r1, [pc, #140]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	4313      	orrs	r3, r2
 8006140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006142:	4b21      	ldr	r3, [pc, #132]	; (80061c8 <HAL_RCC_ClockConfig+0x254>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d001      	beq.n	8006154 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e034      	b.n	80061be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006160:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4917      	ldr	r1, [pc, #92]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800617e:	4b13      	ldr	r3, [pc, #76]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	490f      	ldr	r1, [pc, #60]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 800618e:	4313      	orrs	r3, r2
 8006190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006192:	f000 f823 	bl	80061dc <HAL_RCC_GetSysClockFreq>
 8006196:	4602      	mov	r2, r0
 8006198:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <HAL_RCC_ClockConfig+0x258>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	490b      	ldr	r1, [pc, #44]	; (80061d0 <HAL_RCC_ClockConfig+0x25c>)
 80061a4:	5ccb      	ldrb	r3, [r1, r3]
 80061a6:	fa22 f303 	lsr.w	r3, r2, r3
 80061aa:	4a0a      	ldr	r2, [pc, #40]	; (80061d4 <HAL_RCC_ClockConfig+0x260>)
 80061ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061ae:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <HAL_RCC_ClockConfig+0x264>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fd f896 	bl	80032e4 <HAL_InitTick>
 80061b8:	4603      	mov	r3, r0
 80061ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80061bc:	7afb      	ldrb	r3, [r7, #11]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40023c00 	.word	0x40023c00
 80061cc:	40023800 	.word	0x40023800
 80061d0:	0800ec88 	.word	0x0800ec88
 80061d4:	2000036c 	.word	0x2000036c
 80061d8:	20000370 	.word	0x20000370

080061dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061dc:	b5b0      	push	{r4, r5, r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80061e2:	4b61      	ldr	r3, [pc, #388]	; (8006368 <HAL_RCC_GetSysClockFreq+0x18c>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 030c 	and.w	r3, r3, #12
 80061ee:	2b0c      	cmp	r3, #12
 80061f0:	d00d      	beq.n	800620e <HAL_RCC_GetSysClockFreq+0x32>
 80061f2:	2b0c      	cmp	r3, #12
 80061f4:	f200 80a4 	bhi.w	8006340 <HAL_RCC_GetSysClockFreq+0x164>
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d002      	beq.n	8006202 <HAL_RCC_GetSysClockFreq+0x26>
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d003      	beq.n	8006208 <HAL_RCC_GetSysClockFreq+0x2c>
 8006200:	e09e      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006202:	4b5a      	ldr	r3, [pc, #360]	; (800636c <HAL_RCC_GetSysClockFreq+0x190>)
 8006204:	613b      	str	r3, [r7, #16]
      break;
 8006206:	e0a9      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006208:	4b59      	ldr	r3, [pc, #356]	; (8006370 <HAL_RCC_GetSysClockFreq+0x194>)
 800620a:	613b      	str	r3, [r7, #16]
      break;
 800620c:	e0a6      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	0c9b      	lsrs	r3, r3, #18
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	4a57      	ldr	r2, [pc, #348]	; (8006374 <HAL_RCC_GetSysClockFreq+0x198>)
 8006218:	5cd3      	ldrb	r3, [r2, r3]
 800621a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	0d9b      	lsrs	r3, r3, #22
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	3301      	adds	r3, #1
 8006226:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006228:	4b4f      	ldr	r3, [pc, #316]	; (8006368 <HAL_RCC_GetSysClockFreq+0x18c>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d041      	beq.n	80062b8 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	461c      	mov	r4, r3
 8006238:	f04f 0500 	mov.w	r5, #0
 800623c:	4620      	mov	r0, r4
 800623e:	4629      	mov	r1, r5
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	014b      	lsls	r3, r1, #5
 800624a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800624e:	0142      	lsls	r2, r0, #5
 8006250:	4610      	mov	r0, r2
 8006252:	4619      	mov	r1, r3
 8006254:	1b00      	subs	r0, r0, r4
 8006256:	eb61 0105 	sbc.w	r1, r1, r5
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	f04f 0300 	mov.w	r3, #0
 8006262:	018b      	lsls	r3, r1, #6
 8006264:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006268:	0182      	lsls	r2, r0, #6
 800626a:	1a12      	subs	r2, r2, r0
 800626c:	eb63 0301 	sbc.w	r3, r3, r1
 8006270:	f04f 0000 	mov.w	r0, #0
 8006274:	f04f 0100 	mov.w	r1, #0
 8006278:	00d9      	lsls	r1, r3, #3
 800627a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800627e:	00d0      	lsls	r0, r2, #3
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	1912      	adds	r2, r2, r4
 8006286:	eb45 0303 	adc.w	r3, r5, r3
 800628a:	f04f 0000 	mov.w	r0, #0
 800628e:	f04f 0100 	mov.w	r1, #0
 8006292:	0259      	lsls	r1, r3, #9
 8006294:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006298:	0250      	lsls	r0, r2, #9
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4610      	mov	r0, r2
 80062a0:	4619      	mov	r1, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	461a      	mov	r2, r3
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	f7fa ff35 	bl	8001118 <__aeabi_uldivmod>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4613      	mov	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	e040      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	461c      	mov	r4, r3
 80062bc:	f04f 0500 	mov.w	r5, #0
 80062c0:	4620      	mov	r0, r4
 80062c2:	4629      	mov	r1, r5
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	014b      	lsls	r3, r1, #5
 80062ce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80062d2:	0142      	lsls	r2, r0, #5
 80062d4:	4610      	mov	r0, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	1b00      	subs	r0, r0, r4
 80062da:	eb61 0105 	sbc.w	r1, r1, r5
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	018b      	lsls	r3, r1, #6
 80062e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80062ec:	0182      	lsls	r2, r0, #6
 80062ee:	1a12      	subs	r2, r2, r0
 80062f0:	eb63 0301 	sbc.w	r3, r3, r1
 80062f4:	f04f 0000 	mov.w	r0, #0
 80062f8:	f04f 0100 	mov.w	r1, #0
 80062fc:	00d9      	lsls	r1, r3, #3
 80062fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006302:	00d0      	lsls	r0, r2, #3
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	1912      	adds	r2, r2, r4
 800630a:	eb45 0303 	adc.w	r3, r5, r3
 800630e:	f04f 0000 	mov.w	r0, #0
 8006312:	f04f 0100 	mov.w	r1, #0
 8006316:	0299      	lsls	r1, r3, #10
 8006318:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800631c:	0290      	lsls	r0, r2, #10
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4610      	mov	r0, r2
 8006324:	4619      	mov	r1, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	461a      	mov	r2, r3
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	f7fa fef3 	bl	8001118 <__aeabi_uldivmod>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4613      	mov	r3, r2
 8006338:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	613b      	str	r3, [r7, #16]
      break;
 800633e:	e00d      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006340:	4b09      	ldr	r3, [pc, #36]	; (8006368 <HAL_RCC_GetSysClockFreq+0x18c>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	0b5b      	lsrs	r3, r3, #13
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	613b      	str	r3, [r7, #16]
      break;
 800635a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800635c:	693b      	ldr	r3, [r7, #16]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bdb0      	pop	{r4, r5, r7, pc}
 8006366:	bf00      	nop
 8006368:	40023800 	.word	0x40023800
 800636c:	00f42400 	.word	0x00f42400
 8006370:	007a1200 	.word	0x007a1200
 8006374:	0800ec7c 	.word	0x0800ec7c

08006378 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006380:	2300      	movs	r3, #0
 8006382:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006384:	4b29      	ldr	r3, [pc, #164]	; (800642c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d12c      	bne.n	80063ea <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006390:	4b26      	ldr	r3, [pc, #152]	; (800642c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800639c:	4b24      	ldr	r3, [pc, #144]	; (8006430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	e016      	b.n	80063d6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063a8:	4b20      	ldr	r3, [pc, #128]	; (800642c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	4a1f      	ldr	r2, [pc, #124]	; (800642c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80063ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b2:	6253      	str	r3, [r2, #36]	; 0x24
 80063b4:	4b1d      	ldr	r3, [pc, #116]	; (800642c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80063c0:	4b1b      	ldr	r3, [pc, #108]	; (8006430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80063c8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ca:	4b18      	ldr	r3, [pc, #96]	; (800642c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	4a17      	ldr	r2, [pc, #92]	; (800642c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80063d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063d4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80063dc:	d105      	bne.n	80063ea <RCC_SetFlashLatencyFromMSIRange+0x72>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063e4:	d101      	bne.n	80063ea <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80063e6:	2301      	movs	r3, #1
 80063e8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d105      	bne.n	80063fc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80063f0:	4b10      	ldr	r3, [pc, #64]	; (8006434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a0f      	ldr	r2, [pc, #60]	; (8006434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063f6:	f043 0304 	orr.w	r3, r3, #4
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f023 0201 	bic.w	r2, r3, #1
 8006404:	490b      	ldr	r1, [pc, #44]	; (8006434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	429a      	cmp	r2, r3
 8006418:	d001      	beq.n	800641e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40023800 	.word	0x40023800
 8006430:	40007000 	.word	0x40007000
 8006434:	40023c00 	.word	0x40023c00

08006438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e06e      	b.n	8006528 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d108      	bne.n	8006464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800645a:	d009      	beq.n	8006470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	61da      	str	r2, [r3, #28]
 8006462:	e005      	b.n	8006470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fc fc96 	bl	8002dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f4:	ea42 0103 	orr.w	r1, r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	0c1a      	lsrs	r2, r3, #16
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f002 0204 	and.w	r2, r2, #4
 8006516:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_SPI_Transmit+0x22>
 800654e:	2302      	movs	r3, #2
 8006550:	e126      	b.n	80067a0 <HAL_SPI_Transmit+0x270>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800655a:	f7fc ff0f 	bl	800337c <HAL_GetTick>
 800655e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006560:	88fb      	ldrh	r3, [r7, #6]
 8006562:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d002      	beq.n	8006576 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006570:	2302      	movs	r3, #2
 8006572:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006574:	e10b      	b.n	800678e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_SPI_Transmit+0x52>
 800657c:	88fb      	ldrh	r3, [r7, #6]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d102      	bne.n	8006588 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006586:	e102      	b.n	800678e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2203      	movs	r2, #3
 800658c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	88fa      	ldrh	r2, [r7, #6]
 80065a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ce:	d10f      	bne.n	80065f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	d007      	beq.n	800660e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800660c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006616:	d14b      	bne.n	80066b0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <HAL_SPI_Transmit+0xf6>
 8006620:	8afb      	ldrh	r3, [r7, #22]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d13e      	bne.n	80066a4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	881a      	ldrh	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	1c9a      	adds	r2, r3, #2
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800664a:	e02b      	b.n	80066a4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b02      	cmp	r3, #2
 8006658:	d112      	bne.n	8006680 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	881a      	ldrh	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	1c9a      	adds	r2, r3, #2
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	86da      	strh	r2, [r3, #54]	; 0x36
 800667e:	e011      	b.n	80066a4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006680:	f7fc fe7c 	bl	800337c <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d803      	bhi.n	8006698 <HAL_SPI_Transmit+0x168>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d102      	bne.n	800669e <HAL_SPI_Transmit+0x16e>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066a2:	e074      	b.n	800678e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1ce      	bne.n	800664c <HAL_SPI_Transmit+0x11c>
 80066ae:	e04c      	b.n	800674a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <HAL_SPI_Transmit+0x18e>
 80066b8:	8afb      	ldrh	r3, [r7, #22]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d140      	bne.n	8006740 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	330c      	adds	r3, #12
 80066c8:	7812      	ldrb	r2, [r2, #0]
 80066ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066e4:	e02c      	b.n	8006740 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d113      	bne.n	800671c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330c      	adds	r3, #12
 80066fe:	7812      	ldrb	r2, [r2, #0]
 8006700:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	86da      	strh	r2, [r3, #54]	; 0x36
 800671a:	e011      	b.n	8006740 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800671c:	f7fc fe2e 	bl	800337c <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	d803      	bhi.n	8006734 <HAL_SPI_Transmit+0x204>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006732:	d102      	bne.n	800673a <HAL_SPI_Transmit+0x20a>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800673e:	e026      	b.n	800678e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1cd      	bne.n	80066e6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 fcd0 	bl	80070f4 <SPI_EndRxTxTransaction>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006768:	2300      	movs	r3, #0
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e000      	b.n	800678e <HAL_SPI_Transmit+0x25e>
  }

error:
 800678c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800679e:	7ffb      	ldrb	r3, [r7, #31]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3720      	adds	r7, #32
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067c4:	d112      	bne.n	80067ec <HAL_SPI_Receive+0x44>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10e      	bne.n	80067ec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2204      	movs	r2, #4
 80067d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80067d6:	88fa      	ldrh	r2, [r7, #6]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	4613      	mov	r3, r2
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 f8f1 	bl	80069ca <HAL_SPI_TransmitReceive>
 80067e8:	4603      	mov	r3, r0
 80067ea:	e0ea      	b.n	80069c2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d101      	bne.n	80067fa <HAL_SPI_Receive+0x52>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e0e3      	b.n	80069c2 <HAL_SPI_Receive+0x21a>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006802:	f7fc fdbb 	bl	800337c <HAL_GetTick>
 8006806:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d002      	beq.n	800681a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006814:	2302      	movs	r3, #2
 8006816:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006818:	e0ca      	b.n	80069b0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_SPI_Receive+0x7e>
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d102      	bne.n	800682c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	75fb      	strb	r3, [r7, #23]
    goto error;
 800682a:	e0c1      	b.n	80069b0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2204      	movs	r2, #4
 8006830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	88fa      	ldrh	r2, [r7, #6]
 8006844:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	88fa      	ldrh	r2, [r7, #6]
 800684a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006872:	d10f      	bne.n	8006894 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006882:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006892:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d007      	beq.n	80068b2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d162      	bne.n	8006980 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80068ba:	e02e      	b.n	800691a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d115      	bne.n	80068f6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f103 020c 	add.w	r2, r3, #12
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	7812      	ldrb	r2, [r2, #0]
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068f4:	e011      	b.n	800691a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068f6:	f7fc fd41 	bl	800337c <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d803      	bhi.n	800690e <HAL_SPI_Receive+0x166>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	d102      	bne.n	8006914 <HAL_SPI_Receive+0x16c>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d102      	bne.n	800691a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006918:	e04a      	b.n	80069b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1cb      	bne.n	80068bc <HAL_SPI_Receive+0x114>
 8006924:	e031      	b.n	800698a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b01      	cmp	r3, #1
 8006932:	d113      	bne.n	800695c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693e:	b292      	uxth	r2, r2
 8006940:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	1c9a      	adds	r2, r3, #2
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	87da      	strh	r2, [r3, #62]	; 0x3e
 800695a:	e011      	b.n	8006980 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800695c:	f7fc fd0e 	bl	800337c <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d803      	bhi.n	8006974 <HAL_SPI_Receive+0x1cc>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d102      	bne.n	800697a <HAL_SPI_Receive+0x1d2>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d102      	bne.n	8006980 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800697e:	e017      	b.n	80069b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1cd      	bne.n	8006926 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fb4a 	bl	8007028 <SPI_EndRxTransaction>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
 80069ac:	e000      	b.n	80069b0 <HAL_SPI_Receive+0x208>
  }

error :
 80069ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b08c      	sub	sp, #48	; 0x30
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	607a      	str	r2, [r7, #4]
 80069d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069d8:	2301      	movs	r3, #1
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_SPI_TransmitReceive+0x26>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e18a      	b.n	8006d06 <HAL_SPI_TransmitReceive+0x33c>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069f8:	f7fc fcc0 	bl	800337c <HAL_GetTick>
 80069fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006a0e:	887b      	ldrh	r3, [r7, #2]
 8006a10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d00f      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0x70>
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a20:	d107      	bne.n	8006a32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d103      	bne.n	8006a32 <HAL_SPI_TransmitReceive+0x68>
 8006a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d003      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006a32:	2302      	movs	r3, #2
 8006a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a38:	e15b      	b.n	8006cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x82>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x82>
 8006a46:	887b      	ldrh	r3, [r7, #2]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d103      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a52:	e14e      	b.n	8006cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	d003      	beq.n	8006a68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2205      	movs	r2, #5
 8006a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	887a      	ldrh	r2, [r7, #2]
 8006a78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	887a      	ldrh	r2, [r7, #2]
 8006a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	887a      	ldrh	r2, [r7, #2]
 8006a8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	887a      	ldrh	r2, [r7, #2]
 8006a90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d007      	beq.n	8006abc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ac4:	d178      	bne.n	8006bb8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <HAL_SPI_TransmitReceive+0x10a>
 8006ace:	8b7b      	ldrh	r3, [r7, #26]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d166      	bne.n	8006ba2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad8:	881a      	ldrh	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	1c9a      	adds	r2, r3, #2
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006af8:	e053      	b.n	8006ba2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d11b      	bne.n	8006b40 <HAL_SPI_TransmitReceive+0x176>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d016      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x176>
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d113      	bne.n	8006b40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	881a      	ldrh	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	1c9a      	adds	r2, r3, #2
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d119      	bne.n	8006b82 <HAL_SPI_TransmitReceive+0x1b8>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d014      	beq.n	8006b82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	b292      	uxth	r2, r2
 8006b64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	1c9a      	adds	r2, r3, #2
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b82:	f7fc fbfb 	bl	800337c <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d807      	bhi.n	8006ba2 <HAL_SPI_TransmitReceive+0x1d8>
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d003      	beq.n	8006ba2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ba0:	e0a7      	b.n	8006cf2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1a6      	bne.n	8006afa <HAL_SPI_TransmitReceive+0x130>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1a1      	bne.n	8006afa <HAL_SPI_TransmitReceive+0x130>
 8006bb6:	e07c      	b.n	8006cb2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <HAL_SPI_TransmitReceive+0x1fc>
 8006bc0:	8b7b      	ldrh	r3, [r7, #26]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d16b      	bne.n	8006c9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	330c      	adds	r3, #12
 8006bd0:	7812      	ldrb	r2, [r2, #0]
 8006bd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bec:	e057      	b.n	8006c9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d11c      	bne.n	8006c36 <HAL_SPI_TransmitReceive+0x26c>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d017      	beq.n	8006c36 <HAL_SPI_TransmitReceive+0x26c>
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d114      	bne.n	8006c36 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	330c      	adds	r3, #12
 8006c16:	7812      	ldrb	r2, [r2, #0]
 8006c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d119      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x2ae>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d014      	beq.n	8006c78 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c74:	2301      	movs	r3, #1
 8006c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c78:	f7fc fb80 	bl	800337c <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d803      	bhi.n	8006c90 <HAL_SPI_TransmitReceive+0x2c6>
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d102      	bne.n	8006c96 <HAL_SPI_TransmitReceive+0x2cc>
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d103      	bne.n	8006c9e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c9c:	e029      	b.n	8006cf2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1a2      	bne.n	8006bee <HAL_SPI_TransmitReceive+0x224>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d19d      	bne.n	8006bee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fa1c 	bl	80070f4 <SPI_EndRxTxTransaction>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d006      	beq.n	8006cd0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006cce:	e010      	b.n	8006cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10b      	bne.n	8006cf0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	e000      	b.n	8006cf2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006cf0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3730      	adds	r7, #48	; 0x30
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	099b      	lsrs	r3, r3, #6
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10f      	bne.n	8006d54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	099b      	lsrs	r3, r3, #6
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	4798      	blx	r3
    return;
 8006d52:	e0be      	b.n	8006ed2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00a      	beq.n	8006d76 <HAL_SPI_IRQHandler+0x66>
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	09db      	lsrs	r3, r3, #7
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3
    return;
 8006d74:	e0ad      	b.n	8006ed2 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <HAL_SPI_IRQHandler+0x80>
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	099b      	lsrs	r3, r3, #6
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 80a1 	beq.w	8006ed2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	095b      	lsrs	r3, r3, #5
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 809a 	beq.w	8006ed2 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	099b      	lsrs	r3, r3, #6
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d023      	beq.n	8006df2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d011      	beq.n	8006dda <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dba:	f043 0204 	orr.w	r2, r3, #4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	617b      	str	r3, [r7, #20]
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	e00b      	b.n	8006df2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dda:	2300      	movs	r3, #0
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	693b      	ldr	r3, [r7, #16]
        return;
 8006df0:	e06f      	b.n	8006ed2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d014      	beq.n	8006e28 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e02:	f043 0201 	orr.w	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d04f      	beq.n	8006ed0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e3e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <HAL_SPI_IRQHandler+0x14c>
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d034      	beq.n	8006ec6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0203 	bic.w	r2, r2, #3
 8006e6a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d011      	beq.n	8006e98 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e78:	4a17      	ldr	r2, [pc, #92]	; (8006ed8 <HAL_SPI_IRQHandler+0x1c8>)
 8006e7a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fc fbb4 	bl	80035ee <HAL_DMA_Abort_IT>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d016      	beq.n	8006ece <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea4:	4a0c      	ldr	r2, [pc, #48]	; (8006ed8 <HAL_SPI_IRQHandler+0x1c8>)
 8006ea6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fc fb9e 	bl	80035ee <HAL_DMA_Abort_IT>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ebc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006ec4:	e003      	b.n	8006ece <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f808 	bl	8006edc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006ecc:	e000      	b.n	8006ed0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006ece:	bf00      	nop
    return;
 8006ed0:	bf00      	nop
  }
}
 8006ed2:	3720      	adds	r7, #32
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	08006eef 	.word	0x08006eef

08006edc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr

08006eee <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff ffe7 	bl	8006edc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	4613      	mov	r3, r2
 8006f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f28:	f7fc fa28 	bl	800337c <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	4413      	add	r3, r2
 8006f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f38:	f7fc fa20 	bl	800337c <HAL_GetTick>
 8006f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f3e:	4b39      	ldr	r3, [pc, #228]	; (8007024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	015b      	lsls	r3, r3, #5
 8006f44:	0d1b      	lsrs	r3, r3, #20
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	fb02 f303 	mul.w	r3, r2, r3
 8006f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f4e:	e054      	b.n	8006ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d050      	beq.n	8006ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f58:	f7fc fa10 	bl	800337c <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d902      	bls.n	8006f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d13d      	bne.n	8006fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f86:	d111      	bne.n	8006fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f90:	d004      	beq.n	8006f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9a:	d107      	bne.n	8006fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb4:	d10f      	bne.n	8006fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e017      	b.n	800701a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4013      	ands	r3, r2
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	429a      	cmp	r2, r3
 8007008:	bf0c      	ite	eq
 800700a:	2301      	moveq	r3, #1
 800700c:	2300      	movne	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	429a      	cmp	r2, r3
 8007016:	d19b      	bne.n	8006f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	2000036c 	.word	0x2000036c

08007028 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af02      	add	r7, sp, #8
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800703c:	d111      	bne.n	8007062 <SPI_EndRxTransaction+0x3a>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007046:	d004      	beq.n	8007052 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007050:	d107      	bne.n	8007062 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007060:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800706a:	d12a      	bne.n	80070c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007074:	d012      	beq.n	800709c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	2180      	movs	r1, #128	; 0x80
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff ff49 	bl	8006f18 <SPI_WaitFlagStateUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d02d      	beq.n	80070e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e026      	b.n	80070ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2200      	movs	r2, #0
 80070a4:	2101      	movs	r1, #1
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f7ff ff36 	bl	8006f18 <SPI_WaitFlagStateUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01a      	beq.n	80070e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b6:	f043 0220 	orr.w	r2, r3, #32
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e013      	b.n	80070ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2200      	movs	r2, #0
 80070ca:	2101      	movs	r1, #1
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff ff23 	bl	8006f18 <SPI_WaitFlagStateUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d007      	beq.n	80070e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070dc:	f043 0220 	orr.w	r2, r3, #32
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e000      	b.n	80070ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007100:	4b1b      	ldr	r3, [pc, #108]	; (8007170 <SPI_EndRxTxTransaction+0x7c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1b      	ldr	r2, [pc, #108]	; (8007174 <SPI_EndRxTxTransaction+0x80>)
 8007106:	fba2 2303 	umull	r2, r3, r2, r3
 800710a:	0d5b      	lsrs	r3, r3, #21
 800710c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007110:	fb02 f303 	mul.w	r3, r2, r3
 8007114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800711e:	d112      	bne.n	8007146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2200      	movs	r2, #0
 8007128:	2180      	movs	r1, #128	; 0x80
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff fef4 	bl	8006f18 <SPI_WaitFlagStateUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d016      	beq.n	8007164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713a:	f043 0220 	orr.w	r2, r3, #32
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e00f      	b.n	8007166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	3b01      	subs	r3, #1
 8007150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715c:	2b80      	cmp	r3, #128	; 0x80
 800715e:	d0f2      	beq.n	8007146 <SPI_EndRxTxTransaction+0x52>
 8007160:	e000      	b.n	8007164 <SPI_EndRxTxTransaction+0x70>
        break;
 8007162:	bf00      	nop
  }

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	2000036c 	.word	0x2000036c
 8007174:	165e9f81 	.word	0x165e9f81

08007178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e031      	b.n	80071ee <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fc f83c 	bl	800321c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f000 fa34 	bl	8007624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	d001      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e03a      	b.n	8007286 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007230:	d00e      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0x58>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a16      	ldr	r2, [pc, #88]	; (8007290 <HAL_TIM_Base_Start_IT+0x98>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d009      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0x58>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a14      	ldr	r2, [pc, #80]	; (8007294 <HAL_TIM_Base_Start_IT+0x9c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0x58>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a13      	ldr	r2, [pc, #76]	; (8007298 <HAL_TIM_Base_Start_IT+0xa0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d111      	bne.n	8007274 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b06      	cmp	r3, #6
 8007260:	d010      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f042 0201 	orr.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007272:	e007      	b.n	8007284 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40010800 	.word	0x40010800

0800729c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d122      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d11b      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0202 	mvn.w	r2, #2
 80072c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f985 	bl	80075ee <HAL_TIM_IC_CaptureCallback>
 80072e4:	e005      	b.n	80072f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f978 	bl	80075dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f987 	bl	8007600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0304 	and.w	r3, r3, #4
 8007302:	2b04      	cmp	r3, #4
 8007304:	d122      	bne.n	800734c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b04      	cmp	r3, #4
 8007312:	d11b      	bne.n	800734c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0204 	mvn.w	r2, #4
 800731c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f95b 	bl	80075ee <HAL_TIM_IC_CaptureCallback>
 8007338:	e005      	b.n	8007346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f94e 	bl	80075dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f95d 	bl	8007600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b08      	cmp	r3, #8
 8007358:	d122      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b08      	cmp	r3, #8
 8007366:	d11b      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0208 	mvn.w	r2, #8
 8007370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2204      	movs	r2, #4
 8007376:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f931 	bl	80075ee <HAL_TIM_IC_CaptureCallback>
 800738c:	e005      	b.n	800739a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f924 	bl	80075dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f933 	bl	8007600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0310 	and.w	r3, r3, #16
 80073aa:	2b10      	cmp	r3, #16
 80073ac:	d122      	bne.n	80073f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d11b      	bne.n	80073f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0210 	mvn.w	r2, #16
 80073c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2208      	movs	r2, #8
 80073ca:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f907 	bl	80075ee <HAL_TIM_IC_CaptureCallback>
 80073e0:	e005      	b.n	80073ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f8fa 	bl	80075dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f909 	bl	8007600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d10e      	bne.n	8007420 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b01      	cmp	r3, #1
 800740e:	d107      	bne.n	8007420 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f06f 0201 	mvn.w	r2, #1
 8007418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fa ff02 	bl	8002224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742a:	2b40      	cmp	r3, #64	; 0x40
 800742c:	d10e      	bne.n	800744c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d107      	bne.n	800744c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8e3 	bl	8007612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_TIM_ConfigClockSource+0x18>
 8007468:	2302      	movs	r3, #2
 800746a:	e0b3      	b.n	80075d4 <HAL_TIM_ConfigClockSource+0x180>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800748a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007492:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a4:	d03e      	beq.n	8007524 <HAL_TIM_ConfigClockSource+0xd0>
 80074a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074aa:	f200 8087 	bhi.w	80075bc <HAL_TIM_ConfigClockSource+0x168>
 80074ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b2:	f000 8085 	beq.w	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ba:	d87f      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x168>
 80074bc:	2b70      	cmp	r3, #112	; 0x70
 80074be:	d01a      	beq.n	80074f6 <HAL_TIM_ConfigClockSource+0xa2>
 80074c0:	2b70      	cmp	r3, #112	; 0x70
 80074c2:	d87b      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x168>
 80074c4:	2b60      	cmp	r3, #96	; 0x60
 80074c6:	d050      	beq.n	800756a <HAL_TIM_ConfigClockSource+0x116>
 80074c8:	2b60      	cmp	r3, #96	; 0x60
 80074ca:	d877      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x168>
 80074cc:	2b50      	cmp	r3, #80	; 0x50
 80074ce:	d03c      	beq.n	800754a <HAL_TIM_ConfigClockSource+0xf6>
 80074d0:	2b50      	cmp	r3, #80	; 0x50
 80074d2:	d873      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x168>
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d058      	beq.n	800758a <HAL_TIM_ConfigClockSource+0x136>
 80074d8:	2b40      	cmp	r3, #64	; 0x40
 80074da:	d86f      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x168>
 80074dc:	2b30      	cmp	r3, #48	; 0x30
 80074de:	d064      	beq.n	80075aa <HAL_TIM_ConfigClockSource+0x156>
 80074e0:	2b30      	cmp	r3, #48	; 0x30
 80074e2:	d86b      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x168>
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d060      	beq.n	80075aa <HAL_TIM_ConfigClockSource+0x156>
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d867      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x168>
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d05c      	beq.n	80075aa <HAL_TIM_ConfigClockSource+0x156>
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d05a      	beq.n	80075aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074f4:	e062      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	6899      	ldr	r1, [r3, #8]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f000 f966 	bl	80077d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007518:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	609a      	str	r2, [r3, #8]
      break;
 8007522:	e04e      	b.n	80075c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	6899      	ldr	r1, [r3, #8]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f000 f94f 	bl	80077d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007546:	609a      	str	r2, [r3, #8]
      break;
 8007548:	e03b      	b.n	80075c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	6859      	ldr	r1, [r3, #4]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	461a      	mov	r2, r3
 8007558:	f000 f8c6 	bl	80076e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2150      	movs	r1, #80	; 0x50
 8007562:	4618      	mov	r0, r3
 8007564:	f000 f91d 	bl	80077a2 <TIM_ITRx_SetConfig>
      break;
 8007568:	e02b      	b.n	80075c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	6859      	ldr	r1, [r3, #4]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	461a      	mov	r2, r3
 8007578:	f000 f8e4 	bl	8007744 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2160      	movs	r1, #96	; 0x60
 8007582:	4618      	mov	r0, r3
 8007584:	f000 f90d 	bl	80077a2 <TIM_ITRx_SetConfig>
      break;
 8007588:	e01b      	b.n	80075c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	6859      	ldr	r1, [r3, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	461a      	mov	r2, r3
 8007598:	f000 f8a6 	bl	80076e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2140      	movs	r1, #64	; 0x40
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 f8fd 	bl	80077a2 <TIM_ITRx_SetConfig>
      break;
 80075a8:	e00b      	b.n	80075c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f000 f8f4 	bl	80077a2 <TIM_ITRx_SetConfig>
        break;
 80075ba:	e002      	b.n	80075c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80075bc:	bf00      	nop
 80075be:	e000      	b.n	80075c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80075c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr

080075ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075f6:	bf00      	nop
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bc80      	pop	{r7}
 80075fe:	4770      	bx	lr

08007600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	bc80      	pop	{r7}
 8007610:	4770      	bx	lr

08007612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr

08007624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763a:	d007      	beq.n	800764c <TIM_Base_SetConfig+0x28>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a25      	ldr	r2, [pc, #148]	; (80076d4 <TIM_Base_SetConfig+0xb0>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d003      	beq.n	800764c <TIM_Base_SetConfig+0x28>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a24      	ldr	r2, [pc, #144]	; (80076d8 <TIM_Base_SetConfig+0xb4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d108      	bne.n	800765e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007664:	d013      	beq.n	800768e <TIM_Base_SetConfig+0x6a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a1a      	ldr	r2, [pc, #104]	; (80076d4 <TIM_Base_SetConfig+0xb0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00f      	beq.n	800768e <TIM_Base_SetConfig+0x6a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <TIM_Base_SetConfig+0xb4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d00b      	beq.n	800768e <TIM_Base_SetConfig+0x6a>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a18      	ldr	r2, [pc, #96]	; (80076dc <TIM_Base_SetConfig+0xb8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d007      	beq.n	800768e <TIM_Base_SetConfig+0x6a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a17      	ldr	r2, [pc, #92]	; (80076e0 <TIM_Base_SetConfig+0xbc>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d003      	beq.n	800768e <TIM_Base_SetConfig+0x6a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a16      	ldr	r2, [pc, #88]	; (80076e4 <TIM_Base_SetConfig+0xc0>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d108      	bne.n	80076a0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	615a      	str	r2, [r3, #20]
}
 80076ca:	bf00      	nop
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bc80      	pop	{r7}
 80076d2:	4770      	bx	lr
 80076d4:	40000400 	.word	0x40000400
 80076d8:	40000800 	.word	0x40000800
 80076dc:	40010800 	.word	0x40010800
 80076e0:	40010c00 	.word	0x40010c00
 80076e4:	40011000 	.word	0x40011000

080076e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	f023 0201 	bic.w	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	4313      	orrs	r3, r2
 800771c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f023 030a 	bic.w	r3, r3, #10
 8007724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4313      	orrs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	621a      	str	r2, [r3, #32]
}
 800773a:	bf00      	nop
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr

08007744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f023 0210 	bic.w	r2, r3, #16
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800776e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	031b      	lsls	r3, r3, #12
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007780:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4313      	orrs	r3, r2
 800778a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	621a      	str	r2, [r3, #32]
}
 8007798:	bf00      	nop
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr

080077a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	f043 0307 	orr.w	r3, r3, #7
 80077c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	609a      	str	r2, [r3, #8]
}
 80077cc:	bf00      	nop
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bc80      	pop	{r7}
 80077d4:	4770      	bx	lr

080077d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b087      	sub	sp, #28
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	021a      	lsls	r2, r3, #8
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	431a      	orrs	r2, r3
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	609a      	str	r2, [r3, #8]
}
 800780a:	bf00      	nop
 800780c:	371c      	adds	r7, #28
 800780e:	46bd      	mov	sp, r7
 8007810:	bc80      	pop	{r7}
 8007812:	4770      	bx	lr

08007814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007828:	2302      	movs	r3, #2
 800782a:	e046      	b.n	80078ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800786e:	d00e      	beq.n	800788e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a13      	ldr	r2, [pc, #76]	; (80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d009      	beq.n	800788e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a12      	ldr	r2, [pc, #72]	; (80078c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d004      	beq.n	800788e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a10      	ldr	r2, [pc, #64]	; (80078cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d10c      	bne.n	80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	4313      	orrs	r3, r2
 800789e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr
 80078c4:	40000400 	.word	0x40000400
 80078c8:	40000800 	.word	0x40000800
 80078cc:	40010800 	.word	0x40010800

080078d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80078e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80078e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr

080078fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007904:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007908:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007910:	b29a      	uxth	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	b29b      	uxth	r3, r3
 8007916:	43db      	mvns	r3, r3
 8007918:	b29b      	uxth	r3, r3
 800791a:	4013      	ands	r3, r2
 800791c:	b29a      	uxth	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr

08007930 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007930:	b084      	sub	sp, #16
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	f107 0014 	add.w	r0, r7, #20
 800793e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	bc80      	pop	{r7}
 800796c:	b004      	add	sp, #16
 800796e:	4770      	bx	lr

08007970 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007970:	b480      	push	{r7}
 8007972:	b09b      	sub	sp, #108	; 0x6c
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007996:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	78db      	ldrb	r3, [r3, #3]
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d81f      	bhi.n	80079e2 <USB_ActivateEndpoint+0x72>
 80079a2:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <USB_ActivateEndpoint+0x38>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079b9 	.word	0x080079b9
 80079ac:	080079d5 	.word	0x080079d5
 80079b0:	080079eb 	.word	0x080079eb
 80079b4:	080079c7 	.word	0x080079c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80079b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80079c4:	e012      	b.n	80079ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80079c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80079ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80079d2:	e00b      	b.n	80079ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80079d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80079e0:	e004      	b.n	80079ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80079e8:	e000      	b.n	80079ec <USB_ActivateEndpoint+0x7c>
      break;
 80079ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	441a      	add	r2, r3
 80079f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	441a      	add	r2, r3
 8007a3c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	7b1b      	ldrb	r3, [r3, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f040 8149 	bne.w	8007cf0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	785b      	ldrb	r3, [r3, #1]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8084 	beq.w	8007b70 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	461a      	mov	r2, r3
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	4413      	add	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	011a      	lsls	r2, r3, #4
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	88db      	ldrh	r3, [r3, #6]
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	81fb      	strh	r3, [r7, #14]
 8007aaa:	89fb      	ldrh	r3, [r7, #14]
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01b      	beq.n	8007aec <USB_ActivateEndpoint+0x17c>
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aca:	81bb      	strh	r3, [r7, #12]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	441a      	add	r2, r3
 8007ad6:	89bb      	ldrh	r3, [r7, #12]
 8007ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	78db      	ldrb	r3, [r3, #3]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d020      	beq.n	8007b36 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0a:	813b      	strh	r3, [r7, #8]
 8007b0c:	893b      	ldrh	r3, [r7, #8]
 8007b0e:	f083 0320 	eor.w	r3, r3, #32
 8007b12:	813b      	strh	r3, [r7, #8]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	893b      	ldrh	r3, [r7, #8]
 8007b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	8013      	strh	r3, [r2, #0]
 8007b34:	e27f      	b.n	8008036 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4c:	817b      	strh	r3, [r7, #10]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	441a      	add	r2, r3
 8007b58:	897b      	ldrh	r3, [r7, #10]
 8007b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	8013      	strh	r3, [r2, #0]
 8007b6e:	e262      	b.n	8008036 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	4413      	add	r3, r2
 8007b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	011a      	lsls	r2, r3, #4
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	88db      	ldrh	r3, [r3, #6]
 8007b98:	085b      	lsrs	r3, r3, #1
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	4413      	add	r3, r2
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	011a      	lsls	r2, r3, #4
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bc6:	623b      	str	r3, [r7, #32]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d112      	bne.n	8007bf6 <USB_ActivateEndpoint+0x286>
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	801a      	strh	r2, [r3, #0]
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	e02f      	b.n	8007c56 <USB_ActivateEndpoint+0x2e6>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	2b3e      	cmp	r3, #62	; 0x3e
 8007bfc:	d813      	bhi.n	8007c26 <USB_ActivateEndpoint+0x2b6>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	663b      	str	r3, [r7, #96]	; 0x60
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <USB_ActivateEndpoint+0x2a8>
 8007c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c14:	3301      	adds	r3, #1
 8007c16:	663b      	str	r3, [r7, #96]	; 0x60
 8007c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	029b      	lsls	r3, r3, #10
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	801a      	strh	r2, [r3, #0]
 8007c24:	e017      	b.n	8007c56 <USB_ActivateEndpoint+0x2e6>
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	095b      	lsrs	r3, r3, #5
 8007c2c:	663b      	str	r3, [r7, #96]	; 0x60
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d102      	bne.n	8007c40 <USB_ActivateEndpoint+0x2d0>
 8007c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8007c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	029b      	lsls	r3, r3, #10
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	83fb      	strh	r3, [r7, #30]
 8007c64:	8bfb      	ldrh	r3, [r7, #30]
 8007c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d01b      	beq.n	8007ca6 <USB_ActivateEndpoint+0x336>
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c84:	83bb      	strh	r3, [r7, #28]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	441a      	add	r2, r3
 8007c90:	8bbb      	ldrh	r3, [r7, #28]
 8007c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbc:	837b      	strh	r3, [r7, #26]
 8007cbe:	8b7b      	ldrh	r3, [r7, #26]
 8007cc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cc4:	837b      	strh	r3, [r7, #26]
 8007cc6:	8b7b      	ldrh	r3, [r7, #26]
 8007cc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ccc:	837b      	strh	r3, [r7, #26]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	441a      	add	r2, r3
 8007cd8:	8b7b      	ldrh	r3, [r7, #26]
 8007cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	8013      	strh	r3, [r2, #0]
 8007cee:	e1a2      	b.n	8008036 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	441a      	add	r2, r3
 8007d14:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d3c:	4413      	add	r3, r2
 8007d3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	011a      	lsls	r2, r3, #4
 8007d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	891b      	ldrh	r3, [r3, #8]
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d5e:	801a      	strh	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	653b      	str	r3, [r7, #80]	; 0x50
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d70:	4413      	add	r3, r2
 8007d72:	653b      	str	r3, [r7, #80]	; 0x50
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	011a      	lsls	r2, r3, #4
 8007d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	895b      	ldrh	r3, [r3, #10]
 8007d88:	085b      	lsrs	r3, r3, #1
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	785b      	ldrb	r3, [r3, #1]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 8091 	bne.w	8007ec0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007dac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d01b      	beq.n	8007dee <USB_ActivateEndpoint+0x47e>
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dcc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	441a      	add	r2, r3
 8007dd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	873b      	strh	r3, [r7, #56]	; 0x38
 8007dfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01b      	beq.n	8007e3e <USB_ActivateEndpoint+0x4ce>
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	441a      	add	r2, r3
 8007e28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	441a      	add	r2, r3
 8007e70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e9c:	867b      	strh	r3, [r7, #50]	; 0x32
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	441a      	add	r2, r3
 8007ea8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	8013      	strh	r3, [r2, #0]
 8007ebe:	e0ba      	b.n	8008036 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ed0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01d      	beq.n	8007f18 <USB_ActivateEndpoint+0x5a8>
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	441a      	add	r2, r3
 8007f00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007f28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01d      	beq.n	8007f70 <USB_ActivateEndpoint+0x600>
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	441a      	add	r2, r3
 8007f58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	78db      	ldrb	r3, [r3, #3]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d024      	beq.n	8007fc2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f96:	f083 0320 	eor.w	r3, r3, #32
 8007f9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	441a      	add	r2, r3
 8007fa8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	8013      	strh	r3, [r2, #0]
 8007fc0:	e01d      	b.n	8007ffe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	441a      	add	r2, r3
 8007fe6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	b29b      	uxth	r3, r3
 800800c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008014:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	441a      	add	r2, r3
 8008020:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800802e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008032:	b29b      	uxth	r3, r3
 8008034:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008036:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800803a:	4618      	mov	r0, r3
 800803c:	376c      	adds	r7, #108	; 0x6c
 800803e:	46bd      	mov	sp, r7
 8008040:	bc80      	pop	{r7}
 8008042:	4770      	bx	lr

08008044 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008044:	b480      	push	{r7}
 8008046:	b08d      	sub	sp, #52	; 0x34
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	7b1b      	ldrb	r3, [r3, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f040 808e 	bne.w	8008174 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d044      	beq.n	80080ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	81bb      	strh	r3, [r7, #12]
 800806e:	89bb      	ldrh	r3, [r7, #12]
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01b      	beq.n	80080b0 <USB_DeactivateEndpoint+0x6c>
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	817b      	strh	r3, [r7, #10]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	441a      	add	r2, r3
 800809a:	897b      	ldrh	r3, [r7, #10]
 800809c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c6:	813b      	strh	r3, [r7, #8]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	441a      	add	r2, r3
 80080d2:	893b      	ldrh	r3, [r7, #8]
 80080d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	8013      	strh	r3, [r2, #0]
 80080e8:	e192      	b.n	8008410 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	827b      	strh	r3, [r7, #18]
 80080f8:	8a7b      	ldrh	r3, [r7, #18]
 80080fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d01b      	beq.n	800813a <USB_DeactivateEndpoint+0xf6>
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008118:	823b      	strh	r3, [r7, #16]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	441a      	add	r2, r3
 8008124:	8a3b      	ldrh	r3, [r7, #16]
 8008126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800812a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800812e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008136:	b29b      	uxth	r3, r3
 8008138:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29b      	uxth	r3, r3
 8008148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800814c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008150:	81fb      	strh	r3, [r7, #14]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	441a      	add	r2, r3
 800815c:	89fb      	ldrh	r3, [r7, #14]
 800815e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800816a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816e:	b29b      	uxth	r3, r3
 8008170:	8013      	strh	r3, [r2, #0]
 8008172:	e14d      	b.n	8008410 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	785b      	ldrb	r3, [r3, #1]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f040 80a5 	bne.w	80082c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	843b      	strh	r3, [r7, #32]
 800818c:	8c3b      	ldrh	r3, [r7, #32]
 800818e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d01b      	beq.n	80081ce <USB_DeactivateEndpoint+0x18a>
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ac:	83fb      	strh	r3, [r7, #30]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	441a      	add	r2, r3
 80081b8:	8bfb      	ldrh	r3, [r7, #30]
 80081ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	83bb      	strh	r3, [r7, #28]
 80081dc:	8bbb      	ldrh	r3, [r7, #28]
 80081de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d01b      	beq.n	800821e <USB_DeactivateEndpoint+0x1da>
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081fc:	837b      	strh	r3, [r7, #26]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	441a      	add	r2, r3
 8008208:	8b7b      	ldrh	r3, [r7, #26]
 800820a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800820e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800821a:	b29b      	uxth	r3, r3
 800821c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	b29b      	uxth	r3, r3
 800822c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008234:	833b      	strh	r3, [r7, #24]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	441a      	add	r2, r3
 8008240:	8b3b      	ldrh	r3, [r7, #24]
 8008242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800824a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800824e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008252:	b29b      	uxth	r3, r3
 8008254:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	b29b      	uxth	r3, r3
 8008264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826c:	82fb      	strh	r3, [r7, #22]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	441a      	add	r2, r3
 8008278:	8afb      	ldrh	r3, [r7, #22]
 800827a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800827e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828a:	b29b      	uxth	r3, r3
 800828c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	b29b      	uxth	r3, r3
 800829c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a4:	82bb      	strh	r3, [r7, #20]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	441a      	add	r2, r3
 80082b0:	8abb      	ldrh	r3, [r7, #20]
 80082b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	8013      	strh	r3, [r2, #0]
 80082c6:	e0a3      	b.n	8008410 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80082d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01b      	beq.n	8008318 <USB_DeactivateEndpoint+0x2d4>
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	441a      	add	r2, r3
 8008302:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800830c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008314:	b29b      	uxth	r3, r3
 8008316:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	881b      	ldrh	r3, [r3, #0]
 8008324:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008326:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01b      	beq.n	8008368 <USB_DeactivateEndpoint+0x324>
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008346:	853b      	strh	r3, [r7, #40]	; 0x28
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	441a      	add	r2, r3
 8008352:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800835c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008360:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008364:	b29b      	uxth	r3, r3
 8008366:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	441a      	add	r2, r3
 800838a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800838c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839c:	b29b      	uxth	r3, r3
 800839e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	441a      	add	r2, r3
 80083c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	441a      	add	r2, r3
 80083fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840c:	b29b      	uxth	r3, r3
 800840e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3734      	adds	r7, #52	; 0x34
 8008416:	46bd      	mov	sp, r7
 8008418:	bc80      	pop	{r7}
 800841a:	4770      	bx	lr

0800841c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b0cc      	sub	sp, #304	; 0x130
 8008420:	af00      	add	r7, sp, #0
 8008422:	1d3b      	adds	r3, r7, #4
 8008424:	6018      	str	r0, [r3, #0]
 8008426:	463b      	mov	r3, r7
 8008428:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800842a:	463b      	mov	r3, r7
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	785b      	ldrb	r3, [r3, #1]
 8008430:	2b01      	cmp	r3, #1
 8008432:	f040 872e 	bne.w	8009292 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008436:	463b      	mov	r3, r7
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	699a      	ldr	r2, [r3, #24]
 800843c:	463b      	mov	r3, r7
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	429a      	cmp	r2, r3
 8008444:	d905      	bls.n	8008452 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008446:	463b      	mov	r3, r7
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008450:	e004      	b.n	800845c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008452:	463b      	mov	r3, r7
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800845c:	463b      	mov	r3, r7
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	7b1b      	ldrb	r3, [r3, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d134      	bne.n	80084d0 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008466:	463b      	mov	r3, r7
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6959      	ldr	r1, [r3, #20]
 800846c:	463b      	mov	r3, r7
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	88da      	ldrh	r2, [r3, #6]
 8008472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008476:	b29b      	uxth	r3, r3
 8008478:	1d38      	adds	r0, r7, #4
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	f001 fbee 	bl	8009c5c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008480:	f107 0310 	add.w	r3, r7, #16
 8008484:	1d3a      	adds	r2, r7, #4
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	1d3b      	adds	r3, r7, #4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008492:	b29b      	uxth	r3, r3
 8008494:	4619      	mov	r1, r3
 8008496:	f107 0310 	add.w	r3, r7, #16
 800849a:	f107 0210 	add.w	r2, r7, #16
 800849e:	6812      	ldr	r2, [r2, #0]
 80084a0:	440a      	add	r2, r1
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	463b      	mov	r3, r7
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	011a      	lsls	r2, r3, #4
 80084ac:	f107 0310 	add.w	r3, r7, #16
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4413      	add	r3, r2
 80084b4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80084b8:	f107 030c 	add.w	r3, r7, #12
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	f107 030c 	add.w	r3, r7, #12
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	801a      	strh	r2, [r3, #0]
 80084cc:	f000 beac 	b.w	8009228 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80084d0:	463b      	mov	r3, r7
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	78db      	ldrb	r3, [r3, #3]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	f040 838c 	bne.w	8008bf4 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80084dc:	463b      	mov	r3, r7
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6a1a      	ldr	r2, [r3, #32]
 80084e2:	463b      	mov	r3, r7
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	f240 8330 	bls.w	8008b4e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80084ee:	1d3b      	adds	r3, r7, #4
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	463b      	mov	r3, r7
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008508:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800850c:	1d3b      	adds	r3, r7, #4
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	463b      	mov	r3, r7
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	441a      	add	r2, r3
 800851a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800851e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008526:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800852a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852e:	b29b      	uxth	r3, r3
 8008530:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008532:	463b      	mov	r3, r7
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6a1a      	ldr	r2, [r3, #32]
 8008538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853c:	1ad2      	subs	r2, r2, r3
 800853e:	463b      	mov	r3, r7
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008544:	1d3b      	adds	r3, r7, #4
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	463b      	mov	r3, r7
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 819e 	beq.w	800889c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008560:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008564:	1d3a      	adds	r2, r7, #4
 8008566:	6812      	ldr	r2, [r2, #0]
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	463b      	mov	r3, r7
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	785b      	ldrb	r3, [r3, #1]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d17a      	bne.n	800866a <USB_EPStartXfer+0x24e>
 8008574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008578:	1d3a      	adds	r2, r7, #4
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	1d3b      	adds	r3, r7, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008586:	b29b      	uxth	r3, r3
 8008588:	4619      	mov	r1, r3
 800858a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800858e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008592:	6812      	ldr	r2, [r2, #0]
 8008594:	440a      	add	r2, r1
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	463b      	mov	r3, r7
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	011a      	lsls	r2, r3, #4
 80085a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4413      	add	r3, r2
 80085a8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80085ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d11a      	bne.n	80085f0 <USB_EPStartXfer+0x1d4>
 80085ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	801a      	strh	r2, [r3, #0]
 80085ee:	e062      	b.n	80086b6 <USB_EPStartXfer+0x29a>
 80085f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085f4:	2b3e      	cmp	r3, #62	; 0x3e
 80085f6:	d819      	bhi.n	800862c <USB_EPStartXfer+0x210>
 80085f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085fc:	085b      	lsrs	r3, r3, #1
 80085fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d004      	beq.n	8008618 <USB_EPStartXfer+0x1fc>
 800860e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008612:	3301      	adds	r3, #1
 8008614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008618:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800861c:	b29b      	uxth	r3, r3
 800861e:	029b      	lsls	r3, r3, #10
 8008620:	b29a      	uxth	r2, r3
 8008622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	801a      	strh	r2, [r3, #0]
 800862a:	e044      	b.n	80086b6 <USB_EPStartXfer+0x29a>
 800862c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008630:	095b      	lsrs	r3, r3, #5
 8008632:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800863a:	f003 031f 	and.w	r3, r3, #31
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <USB_EPStartXfer+0x230>
 8008642:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008646:	3b01      	subs	r3, #1
 8008648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800864c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008650:	b29b      	uxth	r3, r3
 8008652:	029b      	lsls	r3, r3, #10
 8008654:	b29b      	uxth	r3, r3
 8008656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800865a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800865e:	b29a      	uxth	r2, r3
 8008660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	801a      	strh	r2, [r3, #0]
 8008668:	e025      	b.n	80086b6 <USB_EPStartXfer+0x29a>
 800866a:	463b      	mov	r3, r7
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d120      	bne.n	80086b6 <USB_EPStartXfer+0x29a>
 8008674:	1d3b      	adds	r3, r7, #4
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800867c:	b29b      	uxth	r3, r3
 800867e:	4619      	mov	r1, r3
 8008680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008684:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008688:	6812      	ldr	r2, [r2, #0]
 800868a:	440a      	add	r2, r1
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	463b      	mov	r3, r7
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	011a      	lsls	r2, r3, #4
 8008696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4413      	add	r3, r2
 800869e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80086a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086b6:	463b      	mov	r3, r7
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	895b      	ldrh	r3, [r3, #10]
 80086bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086c0:	463b      	mov	r3, r7
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6959      	ldr	r1, [r3, #20]
 80086c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80086d0:	1d38      	adds	r0, r7, #4
 80086d2:	6800      	ldr	r0, [r0, #0]
 80086d4:	f001 fac2 	bl	8009c5c <USB_WritePMA>
            ep->xfer_buff += len;
 80086d8:	463b      	mov	r3, r7
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	695a      	ldr	r2, [r3, #20]
 80086de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e2:	441a      	add	r2, r3
 80086e4:	463b      	mov	r3, r7
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80086ea:	463b      	mov	r3, r7
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6a1a      	ldr	r2, [r3, #32]
 80086f0:	463b      	mov	r3, r7
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d909      	bls.n	800870e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80086fa:	463b      	mov	r3, r7
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6a1a      	ldr	r2, [r3, #32]
 8008700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008704:	1ad2      	subs	r2, r2, r3
 8008706:	463b      	mov	r3, r7
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	621a      	str	r2, [r3, #32]
 800870c:	e008      	b.n	8008720 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800870e:	463b      	mov	r3, r7
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008718:	463b      	mov	r3, r7
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2200      	movs	r2, #0
 800871e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008720:	463b      	mov	r3, r7
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	785b      	ldrb	r3, [r3, #1]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d17a      	bne.n	8008820 <USB_EPStartXfer+0x404>
 800872a:	f107 0318 	add.w	r3, r7, #24
 800872e:	1d3a      	adds	r2, r7, #4
 8008730:	6812      	ldr	r2, [r2, #0]
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	1d3b      	adds	r3, r7, #4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800873c:	b29b      	uxth	r3, r3
 800873e:	4619      	mov	r1, r3
 8008740:	f107 0318 	add.w	r3, r7, #24
 8008744:	f107 0218 	add.w	r2, r7, #24
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	440a      	add	r2, r1
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	463b      	mov	r3, r7
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	011a      	lsls	r2, r3, #4
 8008756:	f107 0318 	add.w	r3, r7, #24
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4413      	add	r3, r2
 800875e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008762:	f107 0314 	add.w	r3, r7, #20
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d11a      	bne.n	80087a6 <USB_EPStartXfer+0x38a>
 8008770:	f107 0314 	add.w	r3, r7, #20
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	b29b      	uxth	r3, r3
 800877a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800877e:	b29a      	uxth	r2, r3
 8008780:	f107 0314 	add.w	r3, r7, #20
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	801a      	strh	r2, [r3, #0]
 8008788:	f107 0314 	add.w	r3, r7, #20
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	881b      	ldrh	r3, [r3, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800879a:	b29a      	uxth	r2, r3
 800879c:	f107 0314 	add.w	r3, r7, #20
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	801a      	strh	r2, [r3, #0]
 80087a4:	e067      	b.n	8008876 <USB_EPStartXfer+0x45a>
 80087a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087aa:	2b3e      	cmp	r3, #62	; 0x3e
 80087ac:	d819      	bhi.n	80087e2 <USB_EPStartXfer+0x3c6>
 80087ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b2:	085b      	lsrs	r3, r3, #1
 80087b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80087b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d004      	beq.n	80087ce <USB_EPStartXfer+0x3b2>
 80087c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80087c8:	3301      	adds	r3, #1
 80087ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80087ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	029b      	lsls	r3, r3, #10
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	f107 0314 	add.w	r3, r7, #20
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	801a      	strh	r2, [r3, #0]
 80087e0:	e049      	b.n	8008876 <USB_EPStartXfer+0x45a>
 80087e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80087ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f0:	f003 031f 	and.w	r3, r3, #31
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d104      	bne.n	8008802 <USB_EPStartXfer+0x3e6>
 80087f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80087fc:	3b01      	subs	r3, #1
 80087fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008802:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008806:	b29b      	uxth	r3, r3
 8008808:	029b      	lsls	r3, r3, #10
 800880a:	b29b      	uxth	r3, r3
 800880c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008814:	b29a      	uxth	r2, r3
 8008816:	f107 0314 	add.w	r3, r7, #20
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	801a      	strh	r2, [r3, #0]
 800881e:	e02a      	b.n	8008876 <USB_EPStartXfer+0x45a>
 8008820:	463b      	mov	r3, r7
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	785b      	ldrb	r3, [r3, #1]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d125      	bne.n	8008876 <USB_EPStartXfer+0x45a>
 800882a:	f107 0320 	add.w	r3, r7, #32
 800882e:	1d3a      	adds	r2, r7, #4
 8008830:	6812      	ldr	r2, [r2, #0]
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	1d3b      	adds	r3, r7, #4
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800883c:	b29b      	uxth	r3, r3
 800883e:	4619      	mov	r1, r3
 8008840:	f107 0320 	add.w	r3, r7, #32
 8008844:	f107 0220 	add.w	r2, r7, #32
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	440a      	add	r2, r1
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	463b      	mov	r3, r7
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	011a      	lsls	r2, r3, #4
 8008856:	f107 0320 	add.w	r3, r7, #32
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4413      	add	r3, r2
 800885e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008862:	f107 031c 	add.w	r3, r7, #28
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800886c:	b29a      	uxth	r2, r3
 800886e:	f107 031c 	add.w	r3, r7, #28
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008876:	463b      	mov	r3, r7
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	891b      	ldrh	r3, [r3, #8]
 800887c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008880:	463b      	mov	r3, r7
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6959      	ldr	r1, [r3, #20]
 8008886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800888a:	b29b      	uxth	r3, r3
 800888c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008890:	1d38      	adds	r0, r7, #4
 8008892:	6800      	ldr	r0, [r0, #0]
 8008894:	f001 f9e2 	bl	8009c5c <USB_WritePMA>
 8008898:	f000 bcc6 	b.w	8009228 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800889c:	463b      	mov	r3, r7
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d164      	bne.n	8008970 <USB_EPStartXfer+0x554>
 80088a6:	1d3b      	adds	r3, r7, #4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80088ac:	1d3b      	adds	r3, r7, #4
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ba:	4413      	add	r3, r2
 80088bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80088be:	463b      	mov	r3, r7
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	011a      	lsls	r2, r3, #4
 80088c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c8:	4413      	add	r3, r2
 80088ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088ce:	647b      	str	r3, [r7, #68]	; 0x44
 80088d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d112      	bne.n	80088fe <USB_EPStartXfer+0x4e2>
 80088d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088e6:	801a      	strh	r2, [r3, #0]
 80088e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088fa:	801a      	strh	r2, [r3, #0]
 80088fc:	e057      	b.n	80089ae <USB_EPStartXfer+0x592>
 80088fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008902:	2b3e      	cmp	r3, #62	; 0x3e
 8008904:	d817      	bhi.n	8008936 <USB_EPStartXfer+0x51a>
 8008906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890a:	085b      	lsrs	r3, r3, #1
 800890c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <USB_EPStartXfer+0x50a>
 800891c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008920:	3301      	adds	r3, #1
 8008922:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008926:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800892a:	b29b      	uxth	r3, r3
 800892c:	029b      	lsls	r3, r3, #10
 800892e:	b29a      	uxth	r2, r3
 8008930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008932:	801a      	strh	r2, [r3, #0]
 8008934:	e03b      	b.n	80089ae <USB_EPStartXfer+0x592>
 8008936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800893a:	095b      	lsrs	r3, r3, #5
 800893c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008944:	f003 031f 	and.w	r3, r3, #31
 8008948:	2b00      	cmp	r3, #0
 800894a:	d104      	bne.n	8008956 <USB_EPStartXfer+0x53a>
 800894c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008950:	3b01      	subs	r3, #1
 8008952:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008956:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800895a:	b29b      	uxth	r3, r3
 800895c:	029b      	lsls	r3, r3, #10
 800895e:	b29b      	uxth	r3, r3
 8008960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008968:	b29a      	uxth	r2, r3
 800896a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800896c:	801a      	strh	r2, [r3, #0]
 800896e:	e01e      	b.n	80089ae <USB_EPStartXfer+0x592>
 8008970:	463b      	mov	r3, r7
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	785b      	ldrb	r3, [r3, #1]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d119      	bne.n	80089ae <USB_EPStartXfer+0x592>
 800897a:	1d3b      	adds	r3, r7, #4
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	653b      	str	r3, [r7, #80]	; 0x50
 8008980:	1d3b      	adds	r3, r7, #4
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008988:	b29b      	uxth	r3, r3
 800898a:	461a      	mov	r2, r3
 800898c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800898e:	4413      	add	r3, r2
 8008990:	653b      	str	r3, [r7, #80]	; 0x50
 8008992:	463b      	mov	r3, r7
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	011a      	lsls	r2, r3, #4
 800899a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800899c:	4413      	add	r3, r2
 800899e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80089ae:	463b      	mov	r3, r7
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	891b      	ldrh	r3, [r3, #8]
 80089b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089b8:	463b      	mov	r3, r7
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6959      	ldr	r1, [r3, #20]
 80089be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089c8:	1d38      	adds	r0, r7, #4
 80089ca:	6800      	ldr	r0, [r0, #0]
 80089cc:	f001 f946 	bl	8009c5c <USB_WritePMA>
            ep->xfer_buff += len;
 80089d0:	463b      	mov	r3, r7
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	695a      	ldr	r2, [r3, #20]
 80089d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089da:	441a      	add	r2, r3
 80089dc:	463b      	mov	r3, r7
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80089e2:	463b      	mov	r3, r7
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6a1a      	ldr	r2, [r3, #32]
 80089e8:	463b      	mov	r3, r7
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d909      	bls.n	8008a06 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80089f2:	463b      	mov	r3, r7
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6a1a      	ldr	r2, [r3, #32]
 80089f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089fc:	1ad2      	subs	r2, r2, r3
 80089fe:	463b      	mov	r3, r7
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	621a      	str	r2, [r3, #32]
 8008a04:	e008      	b.n	8008a18 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a06:	463b      	mov	r3, r7
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008a10:	463b      	mov	r3, r7
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2200      	movs	r2, #0
 8008a16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a18:	1d3b      	adds	r3, r7, #4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8008a1e:	463b      	mov	r3, r7
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	785b      	ldrb	r3, [r3, #1]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d164      	bne.n	8008af2 <USB_EPStartXfer+0x6d6>
 8008a28:	1d3b      	adds	r3, r7, #4
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a2e:	1d3b      	adds	r3, r7, #4
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3c:	4413      	add	r3, r2
 8008a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a40:	463b      	mov	r3, r7
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	011a      	lsls	r2, r3, #4
 8008a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
 8008a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d112      	bne.n	8008a80 <USB_EPStartXfer+0x664>
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a68:	801a      	strh	r2, [r3, #0]
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7c:	801a      	strh	r2, [r3, #0]
 8008a7e:	e054      	b.n	8008b2a <USB_EPStartXfer+0x70e>
 8008a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a84:	2b3e      	cmp	r3, #62	; 0x3e
 8008a86:	d817      	bhi.n	8008ab8 <USB_EPStartXfer+0x69c>
 8008a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8c:	085b      	lsrs	r3, r3, #1
 8008a8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d004      	beq.n	8008aa8 <USB_EPStartXfer+0x68c>
 8008a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	029b      	lsls	r3, r3, #10
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	801a      	strh	r2, [r3, #0]
 8008ab6:	e038      	b.n	8008b2a <USB_EPStartXfer+0x70e>
 8008ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008abc:	095b      	lsrs	r3, r3, #5
 8008abe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d104      	bne.n	8008ad8 <USB_EPStartXfer+0x6bc>
 8008ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	029b      	lsls	r3, r3, #10
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aee:	801a      	strh	r2, [r3, #0]
 8008af0:	e01b      	b.n	8008b2a <USB_EPStartXfer+0x70e>
 8008af2:	463b      	mov	r3, r7
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	785b      	ldrb	r3, [r3, #1]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d116      	bne.n	8008b2a <USB_EPStartXfer+0x70e>
 8008afc:	1d3b      	adds	r3, r7, #4
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	461a      	mov	r2, r3
 8008b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b0a:	4413      	add	r3, r2
 8008b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b0e:	463b      	mov	r3, r7
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	011a      	lsls	r2, r3, #4
 8008b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b18:	4413      	add	r3, r2
 8008b1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b2a:	463b      	mov	r3, r7
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	895b      	ldrh	r3, [r3, #10]
 8008b30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b34:	463b      	mov	r3, r7
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6959      	ldr	r1, [r3, #20]
 8008b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b44:	1d38      	adds	r0, r7, #4
 8008b46:	6800      	ldr	r0, [r0, #0]
 8008b48:	f001 f888 	bl	8009c5c <USB_WritePMA>
 8008b4c:	e36c      	b.n	8009228 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008b4e:	463b      	mov	r3, r7
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008b58:	1d3b      	adds	r3, r7, #4
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b72:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008b76:	1d3b      	adds	r3, r7, #4
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	463b      	mov	r3, r7
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	441a      	add	r2, r3
 8008b84:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b9c:	1d3b      	adds	r3, r7, #4
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ba2:	1d3b      	adds	r3, r7, #4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bb0:	4413      	add	r3, r2
 8008bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bb4:	463b      	mov	r3, r7
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	011a      	lsls	r2, r3, #4
 8008bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008bd0:	463b      	mov	r3, r7
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	891b      	ldrh	r3, [r3, #8]
 8008bd6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bda:	463b      	mov	r3, r7
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6959      	ldr	r1, [r3, #20]
 8008be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008bea:	1d38      	adds	r0, r7, #4
 8008bec:	6800      	ldr	r0, [r0, #0]
 8008bee:	f001 f835 	bl	8009c5c <USB_WritePMA>
 8008bf2:	e319      	b.n	8009228 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008bf4:	1d3b      	adds	r3, r7, #4
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	463b      	mov	r3, r7
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c0e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008c12:	1d3b      	adds	r3, r7, #4
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	463b      	mov	r3, r7
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	441a      	add	r2, r3
 8008c20:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008c38:	463b      	mov	r3, r7
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6a1a      	ldr	r2, [r3, #32]
 8008c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c42:	1ad2      	subs	r2, r2, r3
 8008c44:	463b      	mov	r3, r7
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c4a:	1d3b      	adds	r3, r7, #4
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	463b      	mov	r3, r7
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8162 	beq.w	8008f2a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c66:	1d3b      	adds	r3, r7, #4
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c6e:	463b      	mov	r3, r7
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d164      	bne.n	8008d42 <USB_EPStartXfer+0x926>
 8008c78:	1d3b      	adds	r3, r7, #4
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c7e:	1d3b      	adds	r3, r7, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c8c:	4413      	add	r3, r2
 8008c8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c90:	463b      	mov	r3, r7
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	011a      	lsls	r2, r3, #4
 8008c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ca0:	677b      	str	r3, [r7, #116]	; 0x74
 8008ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d112      	bne.n	8008cd0 <USB_EPStartXfer+0x8b4>
 8008caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cb8:	801a      	strh	r2, [r3, #0]
 8008cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ccc:	801a      	strh	r2, [r3, #0]
 8008cce:	e057      	b.n	8008d80 <USB_EPStartXfer+0x964>
 8008cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd4:	2b3e      	cmp	r3, #62	; 0x3e
 8008cd6:	d817      	bhi.n	8008d08 <USB_EPStartXfer+0x8ec>
 8008cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cdc:	085b      	lsrs	r3, r3, #1
 8008cde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d004      	beq.n	8008cf8 <USB_EPStartXfer+0x8dc>
 8008cee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008cf8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	029b      	lsls	r3, r3, #10
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	e03b      	b.n	8008d80 <USB_EPStartXfer+0x964>
 8008d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d0c:	095b      	lsrs	r3, r3, #5
 8008d0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d16:	f003 031f 	and.w	r3, r3, #31
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d104      	bne.n	8008d28 <USB_EPStartXfer+0x90c>
 8008d1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d22:	3b01      	subs	r3, #1
 8008d24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008d28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	029b      	lsls	r3, r3, #10
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d3e:	801a      	strh	r2, [r3, #0]
 8008d40:	e01e      	b.n	8008d80 <USB_EPStartXfer+0x964>
 8008d42:	463b      	mov	r3, r7
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	785b      	ldrb	r3, [r3, #1]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d119      	bne.n	8008d80 <USB_EPStartXfer+0x964>
 8008d4c:	1d3b      	adds	r3, r7, #4
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	461a      	mov	r2, r3
 8008d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d62:	463b      	mov	r3, r7
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	011a      	lsls	r2, r3, #4
 8008d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d6e:	4413      	add	r3, r2
 8008d70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008d80:	463b      	mov	r3, r7
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	895b      	ldrh	r3, [r3, #10]
 8008d86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d8a:	463b      	mov	r3, r7
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6959      	ldr	r1, [r3, #20]
 8008d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008d9a:	1d38      	adds	r0, r7, #4
 8008d9c:	6800      	ldr	r0, [r0, #0]
 8008d9e:	f000 ff5d 	bl	8009c5c <USB_WritePMA>
          ep->xfer_buff += len;
 8008da2:	463b      	mov	r3, r7
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	695a      	ldr	r2, [r3, #20]
 8008da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dac:	441a      	add	r2, r3
 8008dae:	463b      	mov	r3, r7
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008db4:	463b      	mov	r3, r7
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6a1a      	ldr	r2, [r3, #32]
 8008dba:	463b      	mov	r3, r7
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d909      	bls.n	8008dd8 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008dc4:	463b      	mov	r3, r7
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6a1a      	ldr	r2, [r3, #32]
 8008dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dce:	1ad2      	subs	r2, r2, r3
 8008dd0:	463b      	mov	r3, r7
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	621a      	str	r2, [r3, #32]
 8008dd6:	e008      	b.n	8008dea <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008dd8:	463b      	mov	r3, r7
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008de2:	463b      	mov	r3, r7
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2200      	movs	r2, #0
 8008de8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 821a 	beq.w	8009228 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008df4:	463b      	mov	r3, r7
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	785b      	ldrb	r3, [r3, #1]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d164      	bne.n	8008ec8 <USB_EPStartXfer+0xaac>
 8008dfe:	1d3b      	adds	r3, r7, #4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e04:	1d3b      	adds	r3, r7, #4
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e12:	4413      	add	r3, r2
 8008e14:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e16:	463b      	mov	r3, r7
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	011a      	lsls	r2, r3, #4
 8008e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e20:	4413      	add	r3, r2
 8008e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e26:	667b      	str	r3, [r7, #100]	; 0x64
 8008e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d112      	bne.n	8008e56 <USB_EPStartXfer+0xa3a>
 8008e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e3e:	801a      	strh	r2, [r3, #0]
 8008e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e52:	801a      	strh	r2, [r3, #0]
 8008e54:	e057      	b.n	8008f06 <USB_EPStartXfer+0xaea>
 8008e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e5c:	d817      	bhi.n	8008e8e <USB_EPStartXfer+0xa72>
 8008e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d004      	beq.n	8008e7e <USB_EPStartXfer+0xa62>
 8008e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e78:	3301      	adds	r3, #1
 8008e7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	029b      	lsls	r3, r3, #10
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e8a:	801a      	strh	r2, [r3, #0]
 8008e8c:	e03b      	b.n	8008f06 <USB_EPStartXfer+0xaea>
 8008e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e92:	095b      	lsrs	r3, r3, #5
 8008e94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e9c:	f003 031f 	and.w	r3, r3, #31
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <USB_EPStartXfer+0xa92>
 8008ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	029b      	lsls	r3, r3, #10
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ec4:	801a      	strh	r2, [r3, #0]
 8008ec6:	e01e      	b.n	8008f06 <USB_EPStartXfer+0xaea>
 8008ec8:	463b      	mov	r3, r7
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	785b      	ldrb	r3, [r3, #1]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d119      	bne.n	8008f06 <USB_EPStartXfer+0xaea>
 8008ed2:	1d3b      	adds	r3, r7, #4
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8008ed8:	1d3b      	adds	r3, r7, #4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ee6:	4413      	add	r3, r2
 8008ee8:	673b      	str	r3, [r7, #112]	; 0x70
 8008eea:	463b      	mov	r3, r7
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	011a      	lsls	r2, r3, #4
 8008ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008efa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f06:	463b      	mov	r3, r7
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	891b      	ldrh	r3, [r3, #8]
 8008f0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f10:	463b      	mov	r3, r7
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6959      	ldr	r1, [r3, #20]
 8008f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f20:	1d38      	adds	r0, r7, #4
 8008f22:	6800      	ldr	r0, [r0, #0]
 8008f24:	f000 fe9a 	bl	8009c5c <USB_WritePMA>
 8008f28:	e17e      	b.n	8009228 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f2a:	463b      	mov	r3, r7
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	785b      	ldrb	r3, [r3, #1]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d16f      	bne.n	8009014 <USB_EPStartXfer+0xbf8>
 8008f34:	1d3b      	adds	r3, r7, #4
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f3c:	1d3b      	adds	r3, r7, #4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	461a      	mov	r2, r3
 8008f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f52:	463b      	mov	r3, r7
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	011a      	lsls	r2, r3, #4
 8008f5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f5e:	4413      	add	r3, r2
 8008f60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d116      	bne.n	8008f9e <USB_EPStartXfer+0xb82>
 8008f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f82:	801a      	strh	r2, [r3, #0]
 8008f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f9a:	801a      	strh	r2, [r3, #0]
 8008f9c:	e05f      	b.n	800905e <USB_EPStartXfer+0xc42>
 8008f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8008fa4:	d818      	bhi.n	8008fd8 <USB_EPStartXfer+0xbbc>
 8008fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008faa:	085b      	lsrs	r3, r3, #1
 8008fac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d004      	beq.n	8008fc6 <USB_EPStartXfer+0xbaa>
 8008fbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	029b      	lsls	r3, r3, #10
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fd4:	801a      	strh	r2, [r3, #0]
 8008fd6:	e042      	b.n	800905e <USB_EPStartXfer+0xc42>
 8008fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fdc:	095b      	lsrs	r3, r3, #5
 8008fde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe6:	f003 031f 	and.w	r3, r3, #31
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d104      	bne.n	8008ff8 <USB_EPStartXfer+0xbdc>
 8008fee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008ff8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	029b      	lsls	r3, r3, #10
 8009000:	b29b      	uxth	r3, r3
 8009002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800900a:	b29a      	uxth	r2, r3
 800900c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009010:	801a      	strh	r2, [r3, #0]
 8009012:	e024      	b.n	800905e <USB_EPStartXfer+0xc42>
 8009014:	463b      	mov	r3, r7
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	785b      	ldrb	r3, [r3, #1]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d11f      	bne.n	800905e <USB_EPStartXfer+0xc42>
 800901e:	1d3b      	adds	r3, r7, #4
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009026:	1d3b      	adds	r3, r7, #4
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800902e:	b29b      	uxth	r3, r3
 8009030:	461a      	mov	r2, r3
 8009032:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009036:	4413      	add	r3, r2
 8009038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800903c:	463b      	mov	r3, r7
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	011a      	lsls	r2, r3, #4
 8009044:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009048:	4413      	add	r3, r2
 800904a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800904e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009056:	b29a      	uxth	r2, r3
 8009058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800905c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800905e:	463b      	mov	r3, r7
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	891b      	ldrh	r3, [r3, #8]
 8009064:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009068:	463b      	mov	r3, r7
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6959      	ldr	r1, [r3, #20]
 800906e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009072:	b29b      	uxth	r3, r3
 8009074:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009078:	1d38      	adds	r0, r7, #4
 800907a:	6800      	ldr	r0, [r0, #0]
 800907c:	f000 fdee 	bl	8009c5c <USB_WritePMA>
          ep->xfer_buff += len;
 8009080:	463b      	mov	r3, r7
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695a      	ldr	r2, [r3, #20]
 8009086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800908a:	441a      	add	r2, r3
 800908c:	463b      	mov	r3, r7
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009092:	463b      	mov	r3, r7
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6a1a      	ldr	r2, [r3, #32]
 8009098:	463b      	mov	r3, r7
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d909      	bls.n	80090b6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80090a2:	463b      	mov	r3, r7
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6a1a      	ldr	r2, [r3, #32]
 80090a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ac:	1ad2      	subs	r2, r2, r3
 80090ae:	463b      	mov	r3, r7
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	621a      	str	r2, [r3, #32]
 80090b4:	e008      	b.n	80090c8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80090b6:	463b      	mov	r3, r7
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6a1b      	ldr	r3, [r3, #32]
 80090bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80090c0:	463b      	mov	r3, r7
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2200      	movs	r2, #0
 80090c6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80090c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 80ab 	beq.w	8009228 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090d2:	1d3b      	adds	r3, r7, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090da:	463b      	mov	r3, r7
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	785b      	ldrb	r3, [r3, #1]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d16f      	bne.n	80091c4 <USB_EPStartXfer+0xda8>
 80090e4:	1d3b      	adds	r3, r7, #4
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090ec:	1d3b      	adds	r3, r7, #4
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	461a      	mov	r2, r3
 80090f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090fc:	4413      	add	r3, r2
 80090fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009102:	463b      	mov	r3, r7
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	011a      	lsls	r2, r3, #4
 800910a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800910e:	4413      	add	r3, r2
 8009110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800911c:	2b00      	cmp	r3, #0
 800911e:	d116      	bne.n	800914e <USB_EPStartXfer+0xd32>
 8009120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	b29b      	uxth	r3, r3
 8009128:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800912c:	b29a      	uxth	r2, r3
 800912e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009132:	801a      	strh	r2, [r3, #0]
 8009134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009144:	b29a      	uxth	r2, r3
 8009146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800914a:	801a      	strh	r2, [r3, #0]
 800914c:	e05b      	b.n	8009206 <USB_EPStartXfer+0xdea>
 800914e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009152:	2b3e      	cmp	r3, #62	; 0x3e
 8009154:	d818      	bhi.n	8009188 <USB_EPStartXfer+0xd6c>
 8009156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800915a:	085b      	lsrs	r3, r3, #1
 800915c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d004      	beq.n	8009176 <USB_EPStartXfer+0xd5a>
 800916c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009170:	3301      	adds	r3, #1
 8009172:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800917a:	b29b      	uxth	r3, r3
 800917c:	029b      	lsls	r3, r3, #10
 800917e:	b29a      	uxth	r2, r3
 8009180:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009184:	801a      	strh	r2, [r3, #0]
 8009186:	e03e      	b.n	8009206 <USB_EPStartXfer+0xdea>
 8009188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800918c:	095b      	lsrs	r3, r3, #5
 800918e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009196:	f003 031f 	and.w	r3, r3, #31
 800919a:	2b00      	cmp	r3, #0
 800919c:	d104      	bne.n	80091a8 <USB_EPStartXfer+0xd8c>
 800919e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091a2:	3b01      	subs	r3, #1
 80091a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	029b      	lsls	r3, r3, #10
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091c0:	801a      	strh	r2, [r3, #0]
 80091c2:	e020      	b.n	8009206 <USB_EPStartXfer+0xdea>
 80091c4:	463b      	mov	r3, r7
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	785b      	ldrb	r3, [r3, #1]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d11b      	bne.n	8009206 <USB_EPStartXfer+0xdea>
 80091ce:	1d3b      	adds	r3, r7, #4
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	461a      	mov	r2, r3
 80091da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091de:	4413      	add	r3, r2
 80091e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091e4:	463b      	mov	r3, r7
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	011a      	lsls	r2, r3, #4
 80091ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091f0:	4413      	add	r3, r2
 80091f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091fe:	b29a      	uxth	r2, r3
 8009200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009204:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009206:	463b      	mov	r3, r7
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	895b      	ldrh	r3, [r3, #10]
 800920c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009210:	463b      	mov	r3, r7
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6959      	ldr	r1, [r3, #20]
 8009216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800921a:	b29b      	uxth	r3, r3
 800921c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009220:	1d38      	adds	r0, r7, #4
 8009222:	6800      	ldr	r0, [r0, #0]
 8009224:	f000 fd1a 	bl	8009c5c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009228:	1d3b      	adds	r3, r7, #4
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	463b      	mov	r3, r7
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	b29b      	uxth	r3, r3
 800923a:	f107 020a 	add.w	r2, r7, #10
 800923e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009246:	8013      	strh	r3, [r2, #0]
 8009248:	f107 030a 	add.w	r3, r7, #10
 800924c:	f107 020a 	add.w	r2, r7, #10
 8009250:	8812      	ldrh	r2, [r2, #0]
 8009252:	f082 0210 	eor.w	r2, r2, #16
 8009256:	801a      	strh	r2, [r3, #0]
 8009258:	f107 030a 	add.w	r3, r7, #10
 800925c:	f107 020a 	add.w	r2, r7, #10
 8009260:	8812      	ldrh	r2, [r2, #0]
 8009262:	f082 0220 	eor.w	r2, r2, #32
 8009266:	801a      	strh	r2, [r3, #0]
 8009268:	1d3b      	adds	r3, r7, #4
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	463b      	mov	r3, r7
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	441a      	add	r2, r3
 8009276:	f107 030a 	add.w	r3, r7, #10
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928c:	b29b      	uxth	r3, r3
 800928e:	8013      	strh	r3, [r2, #0]
 8009290:	e3b5      	b.n	80099fe <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009292:	463b      	mov	r3, r7
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	7b1b      	ldrb	r3, [r3, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	f040 8090 	bne.w	80093be <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800929e:	463b      	mov	r3, r7
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	699a      	ldr	r2, [r3, #24]
 80092a4:	463b      	mov	r3, r7
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d90e      	bls.n	80092cc <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80092ae:	463b      	mov	r3, r7
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80092b8:	463b      	mov	r3, r7
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	699a      	ldr	r2, [r3, #24]
 80092be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c2:	1ad2      	subs	r2, r2, r3
 80092c4:	463b      	mov	r3, r7
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	619a      	str	r2, [r3, #24]
 80092ca:	e008      	b.n	80092de <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80092cc:	463b      	mov	r3, r7
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80092d6:	463b      	mov	r3, r7
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2200      	movs	r2, #0
 80092dc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80092de:	1d3b      	adds	r3, r7, #4
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092e6:	1d3b      	adds	r3, r7, #4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	461a      	mov	r2, r3
 80092f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80092f6:	4413      	add	r3, r2
 80092f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092fc:	463b      	mov	r3, r7
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	011a      	lsls	r2, r3, #4
 8009304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009308:	4413      	add	r3, r2
 800930a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800930e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d116      	bne.n	8009348 <USB_EPStartXfer+0xf2c>
 800931a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	b29b      	uxth	r3, r3
 8009322:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009326:	b29a      	uxth	r2, r3
 8009328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800932c:	801a      	strh	r2, [r3, #0]
 800932e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	b29b      	uxth	r3, r3
 8009336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800933a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800933e:	b29a      	uxth	r2, r3
 8009340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009344:	801a      	strh	r2, [r3, #0]
 8009346:	e32c      	b.n	80099a2 <USB_EPStartXfer+0x1586>
 8009348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800934c:	2b3e      	cmp	r3, #62	; 0x3e
 800934e:	d818      	bhi.n	8009382 <USB_EPStartXfer+0xf66>
 8009350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009354:	085b      	lsrs	r3, r3, #1
 8009356:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800935a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d004      	beq.n	8009370 <USB_EPStartXfer+0xf54>
 8009366:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800936a:	3301      	adds	r3, #1
 800936c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009370:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009374:	b29b      	uxth	r3, r3
 8009376:	029b      	lsls	r3, r3, #10
 8009378:	b29a      	uxth	r2, r3
 800937a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800937e:	801a      	strh	r2, [r3, #0]
 8009380:	e30f      	b.n	80099a2 <USB_EPStartXfer+0x1586>
 8009382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009386:	095b      	lsrs	r3, r3, #5
 8009388:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800938c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009390:	f003 031f 	and.w	r3, r3, #31
 8009394:	2b00      	cmp	r3, #0
 8009396:	d104      	bne.n	80093a2 <USB_EPStartXfer+0xf86>
 8009398:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800939c:	3b01      	subs	r3, #1
 800939e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80093a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	029b      	lsls	r3, r3, #10
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093ba:	801a      	strh	r2, [r3, #0]
 80093bc:	e2f1      	b.n	80099a2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80093be:	463b      	mov	r3, r7
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	78db      	ldrb	r3, [r3, #3]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	f040 818f 	bne.w	80096e8 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80093ca:	463b      	mov	r3, r7
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d175      	bne.n	80094c0 <USB_EPStartXfer+0x10a4>
 80093d4:	1d3b      	adds	r3, r7, #4
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093dc:	1d3b      	adds	r3, r7, #4
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	461a      	mov	r2, r3
 80093e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80093ec:	4413      	add	r3, r2
 80093ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093f2:	463b      	mov	r3, r7
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	011a      	lsls	r2, r3, #4
 80093fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80093fe:	4413      	add	r3, r2
 8009400:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009408:	463b      	mov	r3, r7
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d116      	bne.n	8009440 <USB_EPStartXfer+0x1024>
 8009412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009416:	881b      	ldrh	r3, [r3, #0]
 8009418:	b29b      	uxth	r3, r3
 800941a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800941e:	b29a      	uxth	r2, r3
 8009420:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009424:	801a      	strh	r2, [r3, #0]
 8009426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	b29b      	uxth	r3, r3
 800942e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009436:	b29a      	uxth	r2, r3
 8009438:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800943c:	801a      	strh	r2, [r3, #0]
 800943e:	e065      	b.n	800950c <USB_EPStartXfer+0x10f0>
 8009440:	463b      	mov	r3, r7
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	2b3e      	cmp	r3, #62	; 0x3e
 8009448:	d81a      	bhi.n	8009480 <USB_EPStartXfer+0x1064>
 800944a:	463b      	mov	r3, r7
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	085b      	lsrs	r3, r3, #1
 8009452:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009456:	463b      	mov	r3, r7
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d004      	beq.n	800946e <USB_EPStartXfer+0x1052>
 8009464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009468:	3301      	adds	r3, #1
 800946a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800946e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009472:	b29b      	uxth	r3, r3
 8009474:	029b      	lsls	r3, r3, #10
 8009476:	b29a      	uxth	r2, r3
 8009478:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800947c:	801a      	strh	r2, [r3, #0]
 800947e:	e045      	b.n	800950c <USB_EPStartXfer+0x10f0>
 8009480:	463b      	mov	r3, r7
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	095b      	lsrs	r3, r3, #5
 8009488:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800948c:	463b      	mov	r3, r7
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 031f 	and.w	r3, r3, #31
 8009496:	2b00      	cmp	r3, #0
 8009498:	d104      	bne.n	80094a4 <USB_EPStartXfer+0x1088>
 800949a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800949e:	3b01      	subs	r3, #1
 80094a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80094a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	029b      	lsls	r3, r3, #10
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	e025      	b.n	800950c <USB_EPStartXfer+0x10f0>
 80094c0:	463b      	mov	r3, r7
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d120      	bne.n	800950c <USB_EPStartXfer+0x10f0>
 80094ca:	1d3b      	adds	r3, r7, #4
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80094d2:	1d3b      	adds	r3, r7, #4
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094da:	b29b      	uxth	r3, r3
 80094dc:	461a      	mov	r2, r3
 80094de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094e2:	4413      	add	r3, r2
 80094e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80094e8:	463b      	mov	r3, r7
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	011a      	lsls	r2, r3, #4
 80094f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094f4:	4413      	add	r3, r2
 80094f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094fe:	463b      	mov	r3, r7
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	b29a      	uxth	r2, r3
 8009506:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800950a:	801a      	strh	r2, [r3, #0]
 800950c:	1d3b      	adds	r3, r7, #4
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009514:	463b      	mov	r3, r7
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d175      	bne.n	800960a <USB_EPStartXfer+0x11ee>
 800951e:	1d3b      	adds	r3, r7, #4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009526:	1d3b      	adds	r3, r7, #4
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800952e:	b29b      	uxth	r3, r3
 8009530:	461a      	mov	r2, r3
 8009532:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009536:	4413      	add	r3, r2
 8009538:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800953c:	463b      	mov	r3, r7
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	011a      	lsls	r2, r3, #4
 8009544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009548:	4413      	add	r3, r2
 800954a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800954e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009552:	463b      	mov	r3, r7
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d116      	bne.n	800958a <USB_EPStartXfer+0x116e>
 800955c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	b29b      	uxth	r3, r3
 8009564:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009568:	b29a      	uxth	r2, r3
 800956a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800957c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009580:	b29a      	uxth	r2, r3
 8009582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009586:	801a      	strh	r2, [r3, #0]
 8009588:	e061      	b.n	800964e <USB_EPStartXfer+0x1232>
 800958a:	463b      	mov	r3, r7
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	2b3e      	cmp	r3, #62	; 0x3e
 8009592:	d81a      	bhi.n	80095ca <USB_EPStartXfer+0x11ae>
 8009594:	463b      	mov	r3, r7
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	085b      	lsrs	r3, r3, #1
 800959c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095a0:	463b      	mov	r3, r7
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d004      	beq.n	80095b8 <USB_EPStartXfer+0x119c>
 80095ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095b2:	3301      	adds	r3, #1
 80095b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095bc:	b29b      	uxth	r3, r3
 80095be:	029b      	lsls	r3, r3, #10
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095c6:	801a      	strh	r2, [r3, #0]
 80095c8:	e041      	b.n	800964e <USB_EPStartXfer+0x1232>
 80095ca:	463b      	mov	r3, r7
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	095b      	lsrs	r3, r3, #5
 80095d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095d6:	463b      	mov	r3, r7
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	f003 031f 	and.w	r3, r3, #31
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d104      	bne.n	80095ee <USB_EPStartXfer+0x11d2>
 80095e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095e8:	3b01      	subs	r3, #1
 80095ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	029b      	lsls	r3, r3, #10
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009600:	b29a      	uxth	r2, r3
 8009602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009606:	801a      	strh	r2, [r3, #0]
 8009608:	e021      	b.n	800964e <USB_EPStartXfer+0x1232>
 800960a:	463b      	mov	r3, r7
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	785b      	ldrb	r3, [r3, #1]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d11c      	bne.n	800964e <USB_EPStartXfer+0x1232>
 8009614:	1d3b      	adds	r3, r7, #4
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800961c:	b29b      	uxth	r3, r3
 800961e:	461a      	mov	r2, r3
 8009620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009624:	4413      	add	r3, r2
 8009626:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800962a:	463b      	mov	r3, r7
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	011a      	lsls	r2, r3, #4
 8009632:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009636:	4413      	add	r3, r2
 8009638:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800963c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009640:	463b      	mov	r3, r7
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	b29a      	uxth	r2, r3
 8009648:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800964c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800964e:	463b      	mov	r3, r7
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 81a4 	beq.w	80099a2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800965a:	1d3b      	adds	r3, r7, #4
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	463b      	mov	r3, r7
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800966e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d005      	beq.n	8009686 <USB_EPStartXfer+0x126a>
 800967a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800967e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10d      	bne.n	80096a2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009686:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800968a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800968e:	2b00      	cmp	r3, #0
 8009690:	f040 8187 	bne.w	80099a2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009694:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969c:	2b00      	cmp	r3, #0
 800969e:	f040 8180 	bne.w	80099a2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80096a2:	1d3b      	adds	r3, r7, #4
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	463b      	mov	r3, r7
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096bc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80096c0:	1d3b      	adds	r3, r7, #4
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	463b      	mov	r3, r7
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	441a      	add	r2, r3
 80096ce:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80096d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	8013      	strh	r3, [r2, #0]
 80096e6:	e15c      	b.n	80099a2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80096e8:	463b      	mov	r3, r7
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	78db      	ldrb	r3, [r3, #3]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	f040 8155 	bne.w	800999e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80096f4:	463b      	mov	r3, r7
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	463b      	mov	r3, r7
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	429a      	cmp	r2, r3
 8009702:	d90e      	bls.n	8009722 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8009704:	463b      	mov	r3, r7
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800970e:	463b      	mov	r3, r7
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	699a      	ldr	r2, [r3, #24]
 8009714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009718:	1ad2      	subs	r2, r2, r3
 800971a:	463b      	mov	r3, r7
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	619a      	str	r2, [r3, #24]
 8009720:	e008      	b.n	8009734 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009722:	463b      	mov	r3, r7
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800972c:	463b      	mov	r3, r7
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2200      	movs	r2, #0
 8009732:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009734:	463b      	mov	r3, r7
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	785b      	ldrb	r3, [r3, #1]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d16f      	bne.n	800981e <USB_EPStartXfer+0x1402>
 800973e:	1d3b      	adds	r3, r7, #4
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009746:	1d3b      	adds	r3, r7, #4
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800974e:	b29b      	uxth	r3, r3
 8009750:	461a      	mov	r2, r3
 8009752:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009756:	4413      	add	r3, r2
 8009758:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800975c:	463b      	mov	r3, r7
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	011a      	lsls	r2, r3, #4
 8009764:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009768:	4413      	add	r3, r2
 800976a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800976e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009776:	2b00      	cmp	r3, #0
 8009778:	d116      	bne.n	80097a8 <USB_EPStartXfer+0x138c>
 800977a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	b29b      	uxth	r3, r3
 8009782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009786:	b29a      	uxth	r2, r3
 8009788:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800978c:	801a      	strh	r2, [r3, #0]
 800978e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800979a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800979e:	b29a      	uxth	r2, r3
 80097a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097a4:	801a      	strh	r2, [r3, #0]
 80097a6:	e05f      	b.n	8009868 <USB_EPStartXfer+0x144c>
 80097a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ac:	2b3e      	cmp	r3, #62	; 0x3e
 80097ae:	d818      	bhi.n	80097e2 <USB_EPStartXfer+0x13c6>
 80097b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097b4:	085b      	lsrs	r3, r3, #1
 80097b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d004      	beq.n	80097d0 <USB_EPStartXfer+0x13b4>
 80097c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097ca:	3301      	adds	r3, #1
 80097cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	029b      	lsls	r3, r3, #10
 80097d8:	b29a      	uxth	r2, r3
 80097da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097de:	801a      	strh	r2, [r3, #0]
 80097e0:	e042      	b.n	8009868 <USB_EPStartXfer+0x144c>
 80097e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e6:	095b      	lsrs	r3, r3, #5
 80097e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097f0:	f003 031f 	and.w	r3, r3, #31
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d104      	bne.n	8009802 <USB_EPStartXfer+0x13e6>
 80097f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097fc:	3b01      	subs	r3, #1
 80097fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009806:	b29b      	uxth	r3, r3
 8009808:	029b      	lsls	r3, r3, #10
 800980a:	b29b      	uxth	r3, r3
 800980c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009814:	b29a      	uxth	r2, r3
 8009816:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800981a:	801a      	strh	r2, [r3, #0]
 800981c:	e024      	b.n	8009868 <USB_EPStartXfer+0x144c>
 800981e:	463b      	mov	r3, r7
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	785b      	ldrb	r3, [r3, #1]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d11f      	bne.n	8009868 <USB_EPStartXfer+0x144c>
 8009828:	1d3b      	adds	r3, r7, #4
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009830:	1d3b      	adds	r3, r7, #4
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009838:	b29b      	uxth	r3, r3
 800983a:	461a      	mov	r2, r3
 800983c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009840:	4413      	add	r3, r2
 8009842:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009846:	463b      	mov	r3, r7
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	011a      	lsls	r2, r3, #4
 800984e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009852:	4413      	add	r3, r2
 8009854:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009858:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800985c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009860:	b29a      	uxth	r2, r3
 8009862:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009866:	801a      	strh	r2, [r3, #0]
 8009868:	1d3b      	adds	r3, r7, #4
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009870:	463b      	mov	r3, r7
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	785b      	ldrb	r3, [r3, #1]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d16f      	bne.n	800995a <USB_EPStartXfer+0x153e>
 800987a:	1d3b      	adds	r3, r7, #4
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009882:	1d3b      	adds	r3, r7, #4
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800988a:	b29b      	uxth	r3, r3
 800988c:	461a      	mov	r2, r3
 800988e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009892:	4413      	add	r3, r2
 8009894:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009898:	463b      	mov	r3, r7
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	011a      	lsls	r2, r3, #4
 80098a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098a4:	4413      	add	r3, r2
 80098a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d116      	bne.n	80098e4 <USB_EPStartXfer+0x14c8>
 80098b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	b29b      	uxth	r3, r3
 80098be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098c8:	801a      	strh	r2, [r3, #0]
 80098ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098da:	b29a      	uxth	r2, r3
 80098dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098e0:	801a      	strh	r2, [r3, #0]
 80098e2:	e05e      	b.n	80099a2 <USB_EPStartXfer+0x1586>
 80098e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098e8:	2b3e      	cmp	r3, #62	; 0x3e
 80098ea:	d818      	bhi.n	800991e <USB_EPStartXfer+0x1502>
 80098ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098f0:	085b      	lsrs	r3, r3, #1
 80098f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d004      	beq.n	800990c <USB_EPStartXfer+0x14f0>
 8009902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009906:	3301      	adds	r3, #1
 8009908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800990c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009910:	b29b      	uxth	r3, r3
 8009912:	029b      	lsls	r3, r3, #10
 8009914:	b29a      	uxth	r2, r3
 8009916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800991a:	801a      	strh	r2, [r3, #0]
 800991c:	e041      	b.n	80099a2 <USB_EPStartXfer+0x1586>
 800991e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800992c:	f003 031f 	and.w	r3, r3, #31
 8009930:	2b00      	cmp	r3, #0
 8009932:	d104      	bne.n	800993e <USB_EPStartXfer+0x1522>
 8009934:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009938:	3b01      	subs	r3, #1
 800993a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800993e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009942:	b29b      	uxth	r3, r3
 8009944:	029b      	lsls	r3, r3, #10
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009950:	b29a      	uxth	r2, r3
 8009952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009956:	801a      	strh	r2, [r3, #0]
 8009958:	e023      	b.n	80099a2 <USB_EPStartXfer+0x1586>
 800995a:	463b      	mov	r3, r7
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	785b      	ldrb	r3, [r3, #1]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d11e      	bne.n	80099a2 <USB_EPStartXfer+0x1586>
 8009964:	1d3b      	adds	r3, r7, #4
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800996c:	b29b      	uxth	r3, r3
 800996e:	461a      	mov	r2, r3
 8009970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009974:	4413      	add	r3, r2
 8009976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800997a:	463b      	mov	r3, r7
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	011a      	lsls	r2, r3, #4
 8009982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009986:	4413      	add	r3, r2
 8009988:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800998c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009994:	b29a      	uxth	r2, r3
 8009996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800999a:	801a      	strh	r2, [r3, #0]
 800999c:	e001      	b.n	80099a2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e02e      	b.n	8009a00 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099a2:	1d3b      	adds	r3, r7, #4
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	463b      	mov	r3, r7
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099bc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80099c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80099c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099c8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80099cc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80099d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099d4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80099d8:	1d3b      	adds	r3, r7, #4
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	463b      	mov	r3, r7
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	441a      	add	r2, r3
 80099e6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80099ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b085      	sub	sp, #20
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	785b      	ldrb	r3, [r3, #1]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d020      	beq.n	8009a5e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a32:	81bb      	strh	r3, [r7, #12]
 8009a34:	89bb      	ldrh	r3, [r7, #12]
 8009a36:	f083 0310 	eor.w	r3, r3, #16
 8009a3a:	81bb      	strh	r3, [r7, #12]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	441a      	add	r2, r3
 8009a46:	89bb      	ldrh	r3, [r7, #12]
 8009a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	8013      	strh	r3, [r2, #0]
 8009a5c:	e01f      	b.n	8009a9e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a74:	81fb      	strh	r3, [r7, #14]
 8009a76:	89fb      	ldrh	r3, [r7, #14]
 8009a78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a7c:	81fb      	strh	r3, [r7, #14]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	441a      	add	r2, r3
 8009a88:	89fb      	ldrh	r3, [r7, #14]
 8009a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bc80      	pop	{r7}
 8009aa8:	4770      	bx	lr

08009aaa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b087      	sub	sp, #28
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	7b1b      	ldrb	r3, [r3, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f040 809d 	bne.w	8009bf8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	785b      	ldrb	r3, [r3, #1]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d04c      	beq.n	8009b60 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	823b      	strh	r3, [r7, #16]
 8009ad4:	8a3b      	ldrh	r3, [r7, #16]
 8009ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d01b      	beq.n	8009b16 <USB_EPClearStall+0x6c>
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af4:	81fb      	strh	r3, [r7, #14]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	441a      	add	r2, r3
 8009b00:	89fb      	ldrh	r3, [r7, #14]
 8009b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	78db      	ldrb	r3, [r3, #3]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d06c      	beq.n	8009bf8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b34:	81bb      	strh	r3, [r7, #12]
 8009b36:	89bb      	ldrh	r3, [r7, #12]
 8009b38:	f083 0320 	eor.w	r3, r3, #32
 8009b3c:	81bb      	strh	r3, [r7, #12]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	441a      	add	r2, r3
 8009b48:	89bb      	ldrh	r3, [r7, #12]
 8009b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	8013      	strh	r3, [r2, #0]
 8009b5e:	e04b      	b.n	8009bf8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	82fb      	strh	r3, [r7, #22]
 8009b6e:	8afb      	ldrh	r3, [r7, #22]
 8009b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d01b      	beq.n	8009bb0 <USB_EPClearStall+0x106>
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8e:	82bb      	strh	r3, [r7, #20]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	441a      	add	r2, r3
 8009b9a:	8abb      	ldrh	r3, [r7, #20]
 8009b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ba4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc6:	827b      	strh	r3, [r7, #18]
 8009bc8:	8a7b      	ldrh	r3, [r7, #18]
 8009bca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009bce:	827b      	strh	r3, [r7, #18]
 8009bd0:	8a7b      	ldrh	r3, [r7, #18]
 8009bd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009bd6:	827b      	strh	r3, [r7, #18]
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	441a      	add	r2, r3
 8009be2:	8a7b      	ldrh	r3, [r7, #18]
 8009be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bc80      	pop	{r7}
 8009c02:	4770      	bx	lr

08009c04 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009c10:	78fb      	ldrb	r3, [r7, #3]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d103      	bne.n	8009c1e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2280      	movs	r2, #128	; 0x80
 8009c1a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bc80      	pop	{r7}
 8009c28:	4770      	bx	lr

08009c2a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr

08009c3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b085      	sub	sp, #20
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009c50:	68fb      	ldr	r3, [r7, #12]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bc80      	pop	{r7}
 8009c5a:	4770      	bx	lr

08009c5c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b08d      	sub	sp, #52	; 0x34
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4611      	mov	r1, r2
 8009c68:	461a      	mov	r2, r3
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	80fb      	strh	r3, [r7, #6]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c72:	88bb      	ldrh	r3, [r7, #4]
 8009c74:	3301      	adds	r3, #1
 8009c76:	085b      	lsrs	r3, r3, #1
 8009c78:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c82:	88fb      	ldrh	r3, [r7, #6]
 8009c84:	005a      	lsls	r2, r3, #1
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c8e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c94:	e01e      	b.n	8009cd4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	021b      	lsls	r3, r3, #8
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	461a      	mov	r2, r3
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbe:	3302      	adds	r3, #2
 8009cc0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	3301      	adds	r3, #1
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1dd      	bne.n	8009c96 <USB_WritePMA+0x3a>
  }
}
 8009cda:	bf00      	nop
 8009cdc:	bf00      	nop
 8009cde:	3734      	adds	r7, #52	; 0x34
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bc80      	pop	{r7}
 8009ce4:	4770      	bx	lr

08009ce6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b08b      	sub	sp, #44	; 0x2c
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	60f8      	str	r0, [r7, #12]
 8009cee:	60b9      	str	r1, [r7, #8]
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	80fb      	strh	r3, [r7, #6]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009cfc:	88bb      	ldrh	r3, [r7, #4]
 8009cfe:	085b      	lsrs	r3, r3, #1
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009d0c:	88fb      	ldrh	r3, [r7, #6]
 8009d0e:	005a      	lsls	r2, r3, #1
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d18:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d1e:	e01b      	b.n	8009d58 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	3302      	adds	r3, #2
 8009d2c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	0a1b      	lsrs	r3, r3, #8
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	3302      	adds	r3, #2
 8009d50:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	3b01      	subs	r3, #1
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1e0      	bne.n	8009d20 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009d5e:	88bb      	ldrh	r3, [r7, #4]
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d007      	beq.n	8009d7a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	701a      	strb	r2, [r3, #0]
  }
}
 8009d7a:	bf00      	nop
 8009d7c:	372c      	adds	r7, #44	; 0x2c
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bc80      	pop	{r7}
 8009d82:	4770      	bx	lr

08009d84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	7c1b      	ldrb	r3, [r3, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d115      	bne.n	8009dc8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009da0:	2202      	movs	r2, #2
 8009da2:	2181      	movs	r1, #129	; 0x81
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f001 fe74 	bl	800ba92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009db4:	2202      	movs	r2, #2
 8009db6:	2101      	movs	r1, #1
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f001 fe6a 	bl	800ba92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8009dc6:	e012      	b.n	8009dee <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	2202      	movs	r2, #2
 8009dcc:	2181      	movs	r1, #129	; 0x81
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 fe5f 	bl	800ba92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009dda:	2340      	movs	r3, #64	; 0x40
 8009ddc:	2202      	movs	r2, #2
 8009dde:	2101      	movs	r1, #1
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 fe56 	bl	800ba92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009dee:	2308      	movs	r3, #8
 8009df0:	2203      	movs	r2, #3
 8009df2:	2182      	movs	r1, #130	; 0x82
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f001 fe4c 	bl	800ba92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8009e00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009e04:	f001 ff6c 	bl	800bce0 <USBD_static_malloc>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d102      	bne.n	8009e20 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	73fb      	strb	r3, [r7, #15]
 8009e1e:	e026      	b.n	8009e6e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e26:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	7c1b      	ldrb	r3, [r3, #16]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d109      	bne.n	8009e5e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e54:	2101      	movs	r1, #1
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 ff0c 	bl	800bc74 <USBD_LL_PrepareReceive>
 8009e5c:	e007      	b.n	8009e6e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e64:	2340      	movs	r3, #64	; 0x40
 8009e66:	2101      	movs	r1, #1
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 ff03 	bl	800bc74 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e88:	2181      	movs	r1, #129	; 0x81
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f001 fe27 	bl	800bade <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e96:	2101      	movs	r1, #1
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 fe20 	bl	800bade <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009ea6:	2182      	movs	r1, #130	; 0x82
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f001 fe18 	bl	800bade <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00e      	beq.n	8009edc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f001 ff12 	bl	800bcf8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b086      	sub	sp, #24
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ef6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d039      	beq.n	8009f84 <USBD_CDC_Setup+0x9e>
 8009f10:	2b20      	cmp	r3, #32
 8009f12:	d17f      	bne.n	800a014 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	88db      	ldrh	r3, [r3, #6]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d029      	beq.n	8009f70 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	b25b      	sxtb	r3, r3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	da11      	bge.n	8009f4a <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8009f32:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	88d2      	ldrh	r2, [r2, #6]
 8009f38:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f3a:	6939      	ldr	r1, [r7, #16]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	88db      	ldrh	r3, [r3, #6]
 8009f40:	461a      	mov	r2, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 f993 	bl	800b26e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8009f48:	e06b      	b.n	800a022 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	785a      	ldrb	r2, [r3, #1]
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	88db      	ldrh	r3, [r3, #6]
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f60:	6939      	ldr	r1, [r7, #16]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	88db      	ldrh	r3, [r3, #6]
 8009f66:	461a      	mov	r2, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 f9ae 	bl	800b2ca <USBD_CtlPrepareRx>
    break;
 8009f6e:	e058      	b.n	800a022 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	7850      	ldrb	r0, [r2, #1]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	4798      	blx	r3
    break;
 8009f82:	e04e      	b.n	800a022 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	785b      	ldrb	r3, [r3, #1]
 8009f88:	2b0b      	cmp	r3, #11
 8009f8a:	d02e      	beq.n	8009fea <USBD_CDC_Setup+0x104>
 8009f8c:	2b0b      	cmp	r3, #11
 8009f8e:	dc38      	bgt.n	800a002 <USBD_CDC_Setup+0x11c>
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d002      	beq.n	8009f9a <USBD_CDC_Setup+0xb4>
 8009f94:	2b0a      	cmp	r3, #10
 8009f96:	d014      	beq.n	8009fc2 <USBD_CDC_Setup+0xdc>
 8009f98:	e033      	b.n	800a002 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009fa0:	2b03      	cmp	r3, #3
 8009fa2:	d107      	bne.n	8009fb4 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8009fa4:	f107 030c 	add.w	r3, r7, #12
 8009fa8:	2202      	movs	r2, #2
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 f95e 	bl	800b26e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009fb2:	e02e      	b.n	800a012 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f001 f8ef 	bl	800b19a <USBD_CtlError>
			  ret = USBD_FAIL;
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009fc0:	e027      	b.n	800a012 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	d107      	bne.n	8009fdc <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8009fcc:	f107 030f 	add.w	r3, r7, #15
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f001 f94a 	bl	800b26e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009fda:	e01a      	b.n	800a012 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f001 f8db 	bl	800b19a <USBD_CtlError>
			  ret = USBD_FAIL;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe8:	e013      	b.n	800a012 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d00d      	beq.n	800a010 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f001 f8cf 	bl	800b19a <USBD_CtlError>
			  ret = USBD_FAIL;
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a000:	e006      	b.n	800a010 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f001 f8c8 	bl	800b19a <USBD_CtlError>
      ret = USBD_FAIL;
 800a00a:	2302      	movs	r3, #2
 800a00c:	75fb      	strb	r3, [r7, #23]
      break;
 800a00e:	e000      	b.n	800a012 <USBD_CDC_Setup+0x12c>
      break;
 800a010:	bf00      	nop
    }
    break;
 800a012:	e006      	b.n	800a022 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f001 f8bf 	bl	800b19a <USBD_CtlError>
    ret = USBD_FAIL;
 800a01c:	2302      	movs	r3, #2
 800a01e:	75fb      	strb	r3, [r7, #23]
    break;
 800a020:	bf00      	nop
  }

  return ret;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a03e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a046:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d03a      	beq.n	800a0c8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a052:	78fa      	ldrb	r2, [r7, #3]
 800a054:	6879      	ldr	r1, [r7, #4]
 800a056:	4613      	mov	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	440b      	add	r3, r1
 800a060:	331c      	adds	r3, #28
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d029      	beq.n	800a0bc <USBD_CDC_DataIn+0x90>
 800a068:	78fa      	ldrb	r2, [r7, #3]
 800a06a:	6879      	ldr	r1, [r7, #4]
 800a06c:	4613      	mov	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	440b      	add	r3, r1
 800a076:	331c      	adds	r3, #28
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	78f9      	ldrb	r1, [r7, #3]
 800a07c:	68b8      	ldr	r0, [r7, #8]
 800a07e:	460b      	mov	r3, r1
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	440b      	add	r3, r1
 800a084:	00db      	lsls	r3, r3, #3
 800a086:	4403      	add	r3, r0
 800a088:	3338      	adds	r3, #56	; 0x38
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a090:	fb03 f301 	mul.w	r3, r3, r1
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d110      	bne.n	800a0bc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a09a:	78fa      	ldrb	r2, [r7, #3]
 800a09c:	6879      	ldr	r1, [r7, #4]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	440b      	add	r3, r1
 800a0a8:	331c      	adds	r3, #28
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800a0ae:	78f9      	ldrb	r1, [r7, #3]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 fdba 	bl	800bc2e <USBD_LL_Transmit>
 800a0ba:	e003      	b.n	800a0c4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	e000      	b.n	800a0ca <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a0c8:	2302      	movs	r3, #2
  }
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	460b      	mov	r3, r1
 800a0dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a0e4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800a0e6:	78fb      	ldrb	r3, [r7, #3]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 fde5 	bl	800bcba <USBD_LL_GetRxDataSize>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00d      	beq.n	800a11e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a116:	4611      	mov	r1, r2
 800a118:	4798      	blx	r3

    return USBD_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	e000      	b.n	800a120 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a11e:	2302      	movs	r3, #2
  }
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a136:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d015      	beq.n	800a16e <USBD_CDC_EP0_RxReady+0x46>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a148:	2bff      	cmp	r3, #255	; 0xff
 800a14a:	d010      	beq.n	800a16e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a15a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a162:	b292      	uxth	r2, r2
 800a164:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	22ff      	movs	r2, #255	; 0xff
 800a16a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2243      	movs	r2, #67	; 0x43
 800a184:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a186:	4b03      	ldr	r3, [pc, #12]	; (800a194 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a188:	4618      	mov	r0, r3
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	20000400 	.word	0x20000400

0800a198 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2243      	movs	r2, #67	; 0x43
 800a1a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a1a6:	4b03      	ldr	r3, [pc, #12]	; (800a1b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bc80      	pop	{r7}
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	200003bc 	.word	0x200003bc

0800a1b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2243      	movs	r2, #67	; 0x43
 800a1c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a1c6:	4b03      	ldr	r3, [pc, #12]	; (800a1d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bc80      	pop	{r7}
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	20000444 	.word	0x20000444

0800a1d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	220a      	movs	r2, #10
 800a1e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a1e6:	4b03      	ldr	r3, [pc, #12]	; (800a1f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bc80      	pop	{r7}
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	20000378 	.word	0x20000378

0800a1f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a202:	2302      	movs	r3, #2
 800a204:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d005      	beq.n	800a218 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a218:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	bc80      	pop	{r7}
 800a222:	4770      	bx	lr

0800a224 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800a224:	b480      	push	{r7}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a238:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a242:	88fa      	ldrh	r2, [r7, #6]
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	371c      	adds	r7, #28
 800a250:	46bd      	mov	sp, r7
 800a252:	bc80      	pop	{r7}
 800a254:	4770      	bx	lr

0800a256 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800a256:	b480      	push	{r7}
 800a258:	b085      	sub	sp, #20
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a266:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	bc80      	pop	{r7}
 800a27a:	4770      	bx	lr

0800a27c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a28a:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a292:	2b00      	cmp	r3, #0
 800a294:	d01c      	beq.n	800a2d0 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d115      	bne.n	800a2cc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	2181      	movs	r1, #129	; 0x81
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f001 fcb3 	bl	800bc2e <USBD_LL_Transmit>

      return USBD_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	e002      	b.n	800a2d2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e000      	b.n	800a2d2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a2d0:	2302      	movs	r3, #2
  }
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b084      	sub	sp, #16
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a2e8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d017      	beq.n	800a324 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	7c1b      	ldrb	r3, [r3, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d109      	bne.n	800a310 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a302:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a306:	2101      	movs	r1, #1
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f001 fcb3 	bl	800bc74 <USBD_LL_PrepareReceive>
 800a30e:	e007      	b.n	800a320 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a316:	2340      	movs	r3, #64	; 0x40
 800a318:	2101      	movs	r1, #1
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 fcaa 	bl	800bc74 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	e000      	b.n	800a326 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a324:	2302      	movs	r3, #2
  }
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b084      	sub	sp, #16
 800a332:	af00      	add	r7, sp, #0
 800a334:	60f8      	str	r0, [r7, #12]
 800a336:	60b9      	str	r1, [r7, #8]
 800a338:	4613      	mov	r3, r2
 800a33a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a342:	2302      	movs	r3, #2
 800a344:	e01a      	b.n	800a37c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d003      	beq.n	800a358 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2201      	movs	r2, #1
 800a36a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	79fa      	ldrb	r2, [r7, #7]
 800a372:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f001 fb17 	bl	800b9a8 <USBD_LL_Init>

  return USBD_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d006      	beq.n	800a3a6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73fb      	strb	r3, [r7, #15]
 800a3a4:	e001      	b.n	800a3aa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bc80      	pop	{r7}
 800a3b4:	4770      	bx	lr

0800a3b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f001 fb4c 	bl	800ba5c <USBD_LL_Start>

  return USBD_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bc80      	pop	{r7}
 800a3e0:	4770      	bx	lr

0800a3e2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00c      	beq.n	800a416 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	78fa      	ldrb	r2, [r7, #3]
 800a406:	4611      	mov	r1, r2
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	4798      	blx	r3
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a416:	7bfb      	ldrb	r3, [r7, #15]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	4611      	mov	r1, r2
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	4798      	blx	r3
  return USBD_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b082      	sub	sp, #8
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 fe62 	bl	800b122 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800a46c:	461a      	mov	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a47a:	f003 031f 	and.w	r3, r3, #31
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d016      	beq.n	800a4b0 <USBD_LL_SetupStage+0x6a>
 800a482:	2b02      	cmp	r3, #2
 800a484:	d81c      	bhi.n	800a4c0 <USBD_LL_SetupStage+0x7a>
 800a486:	2b00      	cmp	r3, #0
 800a488:	d002      	beq.n	800a490 <USBD_LL_SetupStage+0x4a>
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d008      	beq.n	800a4a0 <USBD_LL_SetupStage+0x5a>
 800a48e:	e017      	b.n	800a4c0 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f9c5 	bl	800a828 <USBD_StdDevReq>
    break;
 800a49e:	e01a      	b.n	800a4d6 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fa27 	bl	800a8fc <USBD_StdItfReq>
    break;
 800a4ae:	e012      	b.n	800a4d6 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fa67 	bl	800a98c <USBD_StdEPReq>
    break;
 800a4be:	e00a      	b.n	800a4d6 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a4c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f001 fb24 	bl	800bb1c <USBD_LL_StallEP>
    break;
 800a4d4:	bf00      	nop
  }

  return USBD_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800a4ee:	7afb      	ldrb	r3, [r7, #11]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d14b      	bne.n	800a58c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a4fa:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a502:	2b03      	cmp	r3, #3
 800a504:	d134      	bne.n	800a570 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	68da      	ldr	r2, [r3, #12]
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d919      	bls.n	800a546 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	68da      	ldr	r2, [r3, #12]
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	1ad2      	subs	r2, r2, r3
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	68da      	ldr	r2, [r3, #12]
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a528:	429a      	cmp	r2, r3
 800a52a:	d203      	bcs.n	800a534 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800a530:	b29b      	uxth	r3, r3
 800a532:	e002      	b.n	800a53a <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a538:	b29b      	uxth	r3, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	6879      	ldr	r1, [r7, #4]
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f000 fee1 	bl	800b306 <USBD_CtlContinueRx>
 800a544:	e038      	b.n	800a5b8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d105      	bne.n	800a568 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 fede 	bl	800b32a <USBD_CtlSendStatus>
 800a56e:	e023      	b.n	800a5b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a576:	2b05      	cmp	r3, #5
 800a578:	d11e      	bne.n	800a5b8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800a582:	2100      	movs	r1, #0
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f001 fac9 	bl	800bb1c <USBD_LL_StallEP>
 800a58a:	e015      	b.n	800a5b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00d      	beq.n	800a5b4 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	d108      	bne.n	800a5b4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	7afa      	ldrb	r2, [r7, #11]
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	4798      	blx	r3
 800a5b2:	e001      	b.n	800a5b8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e000      	b.n	800a5ba <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b086      	sub	sp, #24
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	60f8      	str	r0, [r7, #12]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	607a      	str	r2, [r7, #4]
 800a5ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800a5d0:	7afb      	ldrb	r3, [r7, #11]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d17f      	bne.n	800a6d6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	3314      	adds	r3, #20
 800a5da:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d15c      	bne.n	800a6a0 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	68da      	ldr	r2, [r3, #12]
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d915      	bls.n	800a61e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	68da      	ldr	r2, [r3, #12]
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	1ad2      	subs	r2, r2, r3
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	b29b      	uxth	r3, r3
 800a606:	461a      	mov	r2, r3
 800a608:	6879      	ldr	r1, [r7, #4]
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 fe4b 	bl	800b2a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a610:	2300      	movs	r3, #0
 800a612:	2200      	movs	r2, #0
 800a614:	2100      	movs	r1, #0
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f001 fb2c 	bl	800bc74 <USBD_LL_PrepareReceive>
 800a61c:	e04e      	b.n	800a6bc <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	6912      	ldr	r2, [r2, #16]
 800a626:	fbb3 f1f2 	udiv	r1, r3, r2
 800a62a:	fb02 f201 	mul.w	r2, r2, r1
 800a62e:	1a9b      	subs	r3, r3, r2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d11c      	bne.n	800a66e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	689a      	ldr	r2, [r3, #8]
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d316      	bcc.n	800a66e <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	689a      	ldr	r2, [r3, #8]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d20f      	bcs.n	800a66e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a64e:	2200      	movs	r2, #0
 800a650:	2100      	movs	r1, #0
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 fe27 	bl	800b2a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a660:	2300      	movs	r3, #0
 800a662:	2200      	movs	r2, #0
 800a664:	2100      	movs	r1, #0
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f001 fb04 	bl	800bc74 <USBD_LL_PrepareReceive>
 800a66c:	e026      	b.n	800a6bc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00a      	beq.n	800a690 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a680:	2b03      	cmp	r3, #3
 800a682:	d105      	bne.n	800a690 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a690:	2180      	movs	r1, #128	; 0x80
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f001 fa42 	bl	800bb1c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f000 fe59 	bl	800b350 <USBD_CtlReceiveStatus>
 800a69e:	e00d      	b.n	800a6bc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d004      	beq.n	800a6b4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d103      	bne.n	800a6bc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a6b4:	2180      	movs	r1, #128	; 0x80
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f001 fa30 	bl	800bb1c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d11d      	bne.n	800a702 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f7ff fe81 	bl	800a3ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800a6d4:	e015      	b.n	800a702 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00d      	beq.n	800a6fe <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d108      	bne.n	800a6fe <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	7afa      	ldrb	r2, [r7, #11]
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	4798      	blx	r3
 800a6fc:	e001      	b.n	800a702 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6fe:	2302      	movs	r3, #2
 800a700:	e000      	b.n	800a704 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a714:	2340      	movs	r3, #64	; 0x40
 800a716:	2200      	movs	r2, #0
 800a718:	2100      	movs	r1, #0
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 f9b9 	bl	800ba92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2240      	movs	r2, #64	; 0x40
 800a72c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a730:	2340      	movs	r3, #64	; 0x40
 800a732:	2200      	movs	r2, #0
 800a734:	2180      	movs	r1, #128	; 0x80
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f001 f9ab 	bl	800ba92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2240      	movs	r2, #64	; 0x40
 800a746:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d009      	beq.n	800a784 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	6852      	ldr	r2, [r2, #4]
 800a77c:	b2d2      	uxtb	r2, r2
 800a77e:	4611      	mov	r1, r2
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	4798      	blx	r3
  }

  return USBD_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	460b      	mov	r3, r1
 800a798:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	78fa      	ldrb	r2, [r7, #3]
 800a79e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bc80      	pop	{r7}
 800a7aa:	4770      	bx	lr

0800a7ac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bc80      	pop	{r7}
 800a7d2:	4770      	bx	lr

0800a7d4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bc80      	pop	{r7}
 800a7f2:	4770      	bx	lr

0800a7f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a802:	2b03      	cmp	r3, #3
 800a804:	d10b      	bne.n	800a81e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d005      	beq.n	800a81e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a83e:	2b40      	cmp	r3, #64	; 0x40
 800a840:	d005      	beq.n	800a84e <USBD_StdDevReq+0x26>
 800a842:	2b40      	cmp	r3, #64	; 0x40
 800a844:	d84f      	bhi.n	800a8e6 <USBD_StdDevReq+0xbe>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d009      	beq.n	800a85e <USBD_StdDevReq+0x36>
 800a84a:	2b20      	cmp	r3, #32
 800a84c:	d14b      	bne.n	800a8e6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	4798      	blx	r3
    break;
 800a85c:	e048      	b.n	800a8f0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	785b      	ldrb	r3, [r3, #1]
 800a862:	2b09      	cmp	r3, #9
 800a864:	d839      	bhi.n	800a8da <USBD_StdDevReq+0xb2>
 800a866:	a201      	add	r2, pc, #4	; (adr r2, 800a86c <USBD_StdDevReq+0x44>)
 800a868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86c:	0800a8bd 	.word	0x0800a8bd
 800a870:	0800a8d1 	.word	0x0800a8d1
 800a874:	0800a8db 	.word	0x0800a8db
 800a878:	0800a8c7 	.word	0x0800a8c7
 800a87c:	0800a8db 	.word	0x0800a8db
 800a880:	0800a89f 	.word	0x0800a89f
 800a884:	0800a895 	.word	0x0800a895
 800a888:	0800a8db 	.word	0x0800a8db
 800a88c:	0800a8b3 	.word	0x0800a8b3
 800a890:	0800a8a9 	.word	0x0800a8a9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f9da 	bl	800ac50 <USBD_GetDescriptor>
      break;
 800a89c:	e022      	b.n	800a8e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 facf 	bl	800ae44 <USBD_SetAddress>
      break;
 800a8a6:	e01d      	b.n	800a8e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fb0e 	bl	800aecc <USBD_SetConfig>
      break;
 800a8b0:	e018      	b.n	800a8e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fb97 	bl	800afe8 <USBD_GetConfig>
      break;
 800a8ba:	e013      	b.n	800a8e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800a8bc:	6839      	ldr	r1, [r7, #0]
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fbc7 	bl	800b052 <USBD_GetStatus>
      break;
 800a8c4:	e00e      	b.n	800a8e4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fbf5 	bl	800b0b8 <USBD_SetFeature>
      break;
 800a8ce:	e009      	b.n	800a8e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fc04 	bl	800b0e0 <USBD_ClrFeature>
      break;
 800a8d8:	e004      	b.n	800a8e4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fc5c 	bl	800b19a <USBD_CtlError>
      break;
 800a8e2:	bf00      	nop
    }
    break;
 800a8e4:	e004      	b.n	800a8f0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fc56 	bl	800b19a <USBD_CtlError>
    break;
 800a8ee:	bf00      	nop
  }

  return ret;
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop

0800a8fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a912:	2b40      	cmp	r3, #64	; 0x40
 800a914:	d005      	beq.n	800a922 <USBD_StdItfReq+0x26>
 800a916:	2b40      	cmp	r3, #64	; 0x40
 800a918:	d82e      	bhi.n	800a978 <USBD_StdItfReq+0x7c>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <USBD_StdItfReq+0x26>
 800a91e:	2b20      	cmp	r3, #32
 800a920:	d12a      	bne.n	800a978 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a928:	3b01      	subs	r3, #1
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d81d      	bhi.n	800a96a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	889b      	ldrh	r3, [r3, #4]
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b01      	cmp	r3, #1
 800a936:	d813      	bhi.n	800a960 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	4798      	blx	r3
 800a946:	4603      	mov	r3, r0
 800a948:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	88db      	ldrh	r3, [r3, #6]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d110      	bne.n	800a974 <USBD_StdItfReq+0x78>
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10d      	bne.n	800a974 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fce6 	bl	800b32a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a95e:	e009      	b.n	800a974 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800a960:	6839      	ldr	r1, [r7, #0]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fc19 	bl	800b19a <USBD_CtlError>
      break;
 800a968:	e004      	b.n	800a974 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800a96a:	6839      	ldr	r1, [r7, #0]
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fc14 	bl	800b19a <USBD_CtlError>
      break;
 800a972:	e000      	b.n	800a976 <USBD_StdItfReq+0x7a>
      break;
 800a974:	bf00      	nop
    }
    break;
 800a976:	e004      	b.n	800a982 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fc0d 	bl	800b19a <USBD_CtlError>
    break;
 800a980:	bf00      	nop
  }

  return USBD_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	889b      	ldrh	r3, [r3, #4]
 800a99e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9a8:	2b40      	cmp	r3, #64	; 0x40
 800a9aa:	d007      	beq.n	800a9bc <USBD_StdEPReq+0x30>
 800a9ac:	2b40      	cmp	r3, #64	; 0x40
 800a9ae:	f200 8144 	bhi.w	800ac3a <USBD_StdEPReq+0x2ae>
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00a      	beq.n	800a9cc <USBD_StdEPReq+0x40>
 800a9b6:	2b20      	cmp	r3, #32
 800a9b8:	f040 813f 	bne.w	800ac3a <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	4798      	blx	r3
    break;
 800a9ca:	e13b      	b.n	800ac44 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9d4:	2b20      	cmp	r3, #32
 800a9d6:	d10a      	bne.n	800a9ee <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	4798      	blx	r3
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73fb      	strb	r3, [r7, #15]

      return ret;
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	e12b      	b.n	800ac46 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	785b      	ldrb	r3, [r3, #1]
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d007      	beq.n	800aa06 <USBD_StdEPReq+0x7a>
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	f300 8119 	bgt.w	800ac2e <USBD_StdEPReq+0x2a2>
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d072      	beq.n	800aae6 <USBD_StdEPReq+0x15a>
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d03a      	beq.n	800aa7a <USBD_StdEPReq+0xee>
 800aa04:	e113      	b.n	800ac2e <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d002      	beq.n	800aa16 <USBD_StdEPReq+0x8a>
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d015      	beq.n	800aa40 <USBD_StdEPReq+0xb4>
 800aa14:	e02b      	b.n	800aa6e <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa16:	7bbb      	ldrb	r3, [r7, #14]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00c      	beq.n	800aa36 <USBD_StdEPReq+0xaa>
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	2b80      	cmp	r3, #128	; 0x80
 800aa20:	d009      	beq.n	800aa36 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f001 f878 	bl	800bb1c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800aa2c:	2180      	movs	r1, #128	; 0x80
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 f874 	bl	800bb1c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800aa34:	e020      	b.n	800aa78 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fbae 	bl	800b19a <USBD_CtlError>
        break;
 800aa3e:	e01b      	b.n	800aa78 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	885b      	ldrh	r3, [r3, #2]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10e      	bne.n	800aa66 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00b      	beq.n	800aa66 <USBD_StdEPReq+0xda>
 800aa4e:	7bbb      	ldrb	r3, [r7, #14]
 800aa50:	2b80      	cmp	r3, #128	; 0x80
 800aa52:	d008      	beq.n	800aa66 <USBD_StdEPReq+0xda>
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	88db      	ldrh	r3, [r3, #6]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d104      	bne.n	800aa66 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800aa5c:	7bbb      	ldrb	r3, [r7, #14]
 800aa5e:	4619      	mov	r1, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 f85b 	bl	800bb1c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fc5f 	bl	800b32a <USBD_CtlSendStatus>

        break;
 800aa6c:	e004      	b.n	800aa78 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fb92 	bl	800b19a <USBD_CtlError>
        break;
 800aa76:	bf00      	nop
      }
      break;
 800aa78:	e0de      	b.n	800ac38 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d002      	beq.n	800aa8a <USBD_StdEPReq+0xfe>
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d015      	beq.n	800aab4 <USBD_StdEPReq+0x128>
 800aa88:	e026      	b.n	800aad8 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00c      	beq.n	800aaaa <USBD_StdEPReq+0x11e>
 800aa90:	7bbb      	ldrb	r3, [r7, #14]
 800aa92:	2b80      	cmp	r3, #128	; 0x80
 800aa94:	d009      	beq.n	800aaaa <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f001 f83e 	bl	800bb1c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800aaa0:	2180      	movs	r1, #128	; 0x80
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f001 f83a 	bl	800bb1c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800aaa8:	e01c      	b.n	800aae4 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fb74 	bl	800b19a <USBD_CtlError>
        break;
 800aab2:	e017      	b.n	800aae4 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	885b      	ldrh	r3, [r3, #2]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d112      	bne.n	800aae2 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d004      	beq.n	800aad0 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	4619      	mov	r1, r3
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f001 f845 	bl	800bb5a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fc2a 	bl	800b32a <USBD_CtlSendStatus>
        }
        break;
 800aad6:	e004      	b.n	800aae2 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fb5d 	bl	800b19a <USBD_CtlError>
        break;
 800aae0:	e000      	b.n	800aae4 <USBD_StdEPReq+0x158>
        break;
 800aae2:	bf00      	nop
      }
      break;
 800aae4:	e0a8      	b.n	800ac38 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d002      	beq.n	800aaf6 <USBD_StdEPReq+0x16a>
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	d031      	beq.n	800ab58 <USBD_StdEPReq+0x1cc>
 800aaf4:	e095      	b.n	800ac22 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d007      	beq.n	800ab0c <USBD_StdEPReq+0x180>
 800aafc:	7bbb      	ldrb	r3, [r7, #14]
 800aafe:	2b80      	cmp	r3, #128	; 0x80
 800ab00:	d004      	beq.n	800ab0c <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fb48 	bl	800b19a <USBD_CtlError>
          break;
 800ab0a:	e08f      	b.n	800ac2c <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ab0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	da0b      	bge.n	800ab2c <USBD_StdEPReq+0x1a0>
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	3310      	adds	r3, #16
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	4413      	add	r3, r2
 800ab28:	3304      	adds	r3, #4
 800ab2a:	e00a      	b.n	800ab42 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ab2c:	7bbb      	ldrb	r3, [r7, #14]
 800ab2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ab32:	4613      	mov	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	4413      	add	r3, r2
 800ab42:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2200      	movs	r2, #0
 800ab48:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2202      	movs	r2, #2
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fb8c 	bl	800b26e <USBD_CtlSendData>
          break;
 800ab56:	e069      	b.n	800ac2c <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800ab58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	da11      	bge.n	800ab84 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	f003 020f 	and.w	r2, r3, #15
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	440b      	add	r3, r1
 800ab72:	3318      	adds	r3, #24
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d117      	bne.n	800abaa <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fb0c 	bl	800b19a <USBD_CtlError>
            break;
 800ab82:	e053      	b.n	800ac2c <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab84:	7bbb      	ldrb	r3, [r7, #14]
 800ab86:	f003 020f 	and.w	r2, r3, #15
 800ab8a:	6879      	ldr	r1, [r7, #4]
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	440b      	add	r3, r1
 800ab96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d104      	bne.n	800abaa <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 faf9 	bl	800b19a <USBD_CtlError>
            break;
 800aba8:	e040      	b.n	800ac2c <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800abaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	da0b      	bge.n	800abca <USBD_StdEPReq+0x23e>
 800abb2:	7bbb      	ldrb	r3, [r7, #14]
 800abb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abb8:	4613      	mov	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	3310      	adds	r3, #16
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	4413      	add	r3, r2
 800abc6:	3304      	adds	r3, #4
 800abc8:	e00a      	b.n	800abe0 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800abd0:	4613      	mov	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	4413      	add	r3, r2
 800abe0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800abe2:	7bbb      	ldrb	r3, [r7, #14]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <USBD_StdEPReq+0x262>
 800abe8:	7bbb      	ldrb	r3, [r7, #14]
 800abea:	2b80      	cmp	r3, #128	; 0x80
 800abec:	d103      	bne.n	800abf6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2200      	movs	r2, #0
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	e00e      	b.n	800ac14 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800abf6:	7bbb      	ldrb	r3, [r7, #14]
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 ffcc 	bl	800bb98 <USBD_LL_IsStallEP>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d003      	beq.n	800ac0e <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	e002      	b.n	800ac14 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2200      	movs	r2, #0
 800ac12:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2202      	movs	r2, #2
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fb27 	bl	800b26e <USBD_CtlSendData>
          break;
 800ac20:	e004      	b.n	800ac2c <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fab8 	bl	800b19a <USBD_CtlError>
        break;
 800ac2a:	bf00      	nop
      }
      break;
 800ac2c:	e004      	b.n	800ac38 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fab2 	bl	800b19a <USBD_CtlError>
      break;
 800ac36:	bf00      	nop
    }
    break;
 800ac38:	e004      	b.n	800ac44 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 faac 	bl	800b19a <USBD_CtlError>
    break;
 800ac42:	bf00      	nop
  }

  return ret;
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	885b      	ldrh	r3, [r3, #2]
 800ac5e:	0a1b      	lsrs	r3, r3, #8
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	3b01      	subs	r3, #1
 800ac64:	2b06      	cmp	r3, #6
 800ac66:	f200 80c9 	bhi.w	800adfc <USBD_GetDescriptor+0x1ac>
 800ac6a:	a201      	add	r2, pc, #4	; (adr r2, 800ac70 <USBD_GetDescriptor+0x20>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ac8d 	.word	0x0800ac8d
 800ac74:	0800aca5 	.word	0x0800aca5
 800ac78:	0800ace5 	.word	0x0800ace5
 800ac7c:	0800adfd 	.word	0x0800adfd
 800ac80:	0800adfd 	.word	0x0800adfd
 800ac84:	0800ada9 	.word	0x0800ada9
 800ac88:	0800adcf 	.word	0x0800adcf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	7c12      	ldrb	r2, [r2, #16]
 800ac98:	f107 010a 	add.w	r1, r7, #10
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	4798      	blx	r3
 800aca0:	60f8      	str	r0, [r7, #12]
    break;
 800aca2:	e0b0      	b.n	800ae06 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	7c1b      	ldrb	r3, [r3, #16]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10d      	bne.n	800acc8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800acb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb4:	f107 020a 	add.w	r2, r7, #10
 800acb8:	4610      	mov	r0, r2
 800acba:	4798      	blx	r3
 800acbc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3301      	adds	r3, #1
 800acc2:	2202      	movs	r2, #2
 800acc4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800acc6:	e09e      	b.n	800ae06 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800acce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd0:	f107 020a 	add.w	r2, r7, #10
 800acd4:	4610      	mov	r0, r2
 800acd6:	4798      	blx	r3
 800acd8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	3301      	adds	r3, #1
 800acde:	2202      	movs	r2, #2
 800ace0:	701a      	strb	r2, [r3, #0]
    break;
 800ace2:	e090      	b.n	800ae06 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	885b      	ldrh	r3, [r3, #2]
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b05      	cmp	r3, #5
 800acec:	d856      	bhi.n	800ad9c <USBD_GetDescriptor+0x14c>
 800acee:	a201      	add	r2, pc, #4	; (adr r2, 800acf4 <USBD_GetDescriptor+0xa4>)
 800acf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf4:	0800ad0d 	.word	0x0800ad0d
 800acf8:	0800ad25 	.word	0x0800ad25
 800acfc:	0800ad3d 	.word	0x0800ad3d
 800ad00:	0800ad55 	.word	0x0800ad55
 800ad04:	0800ad6d 	.word	0x0800ad6d
 800ad08:	0800ad85 	.word	0x0800ad85
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	7c12      	ldrb	r2, [r2, #16]
 800ad18:	f107 010a 	add.w	r1, r7, #10
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4798      	blx	r3
 800ad20:	60f8      	str	r0, [r7, #12]
      break;
 800ad22:	e040      	b.n	800ada6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	7c12      	ldrb	r2, [r2, #16]
 800ad30:	f107 010a 	add.w	r1, r7, #10
 800ad34:	4610      	mov	r0, r2
 800ad36:	4798      	blx	r3
 800ad38:	60f8      	str	r0, [r7, #12]
      break;
 800ad3a:	e034      	b.n	800ada6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	7c12      	ldrb	r2, [r2, #16]
 800ad48:	f107 010a 	add.w	r1, r7, #10
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	4798      	blx	r3
 800ad50:	60f8      	str	r0, [r7, #12]
      break;
 800ad52:	e028      	b.n	800ada6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	7c12      	ldrb	r2, [r2, #16]
 800ad60:	f107 010a 	add.w	r1, r7, #10
 800ad64:	4610      	mov	r0, r2
 800ad66:	4798      	blx	r3
 800ad68:	60f8      	str	r0, [r7, #12]
      break;
 800ad6a:	e01c      	b.n	800ada6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	7c12      	ldrb	r2, [r2, #16]
 800ad78:	f107 010a 	add.w	r1, r7, #10
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4798      	blx	r3
 800ad80:	60f8      	str	r0, [r7, #12]
      break;
 800ad82:	e010      	b.n	800ada6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	7c12      	ldrb	r2, [r2, #16]
 800ad90:	f107 010a 	add.w	r1, r7, #10
 800ad94:	4610      	mov	r0, r2
 800ad96:	4798      	blx	r3
 800ad98:	60f8      	str	r0, [r7, #12]
      break;
 800ad9a:	e004      	b.n	800ada6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f9fb 	bl	800b19a <USBD_CtlError>
      return;
 800ada4:	e04b      	b.n	800ae3e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800ada6:	e02e      	b.n	800ae06 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	7c1b      	ldrb	r3, [r3, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d109      	bne.n	800adc4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800adb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb8:	f107 020a 	add.w	r2, r7, #10
 800adbc:	4610      	mov	r0, r2
 800adbe:	4798      	blx	r3
 800adc0:	60f8      	str	r0, [r7, #12]
      break;
 800adc2:	e020      	b.n	800ae06 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f9e7 	bl	800b19a <USBD_CtlError>
      return;
 800adcc:	e037      	b.n	800ae3e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	7c1b      	ldrb	r3, [r3, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10d      	bne.n	800adf2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800addc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adde:	f107 020a 	add.w	r2, r7, #10
 800ade2:	4610      	mov	r0, r2
 800ade4:	4798      	blx	r3
 800ade6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3301      	adds	r3, #1
 800adec:	2207      	movs	r2, #7
 800adee:	701a      	strb	r2, [r3, #0]
      break;
 800adf0:	e009      	b.n	800ae06 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 f9d0 	bl	800b19a <USBD_CtlError>
      return;
 800adfa:	e020      	b.n	800ae3e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f9cb 	bl	800b19a <USBD_CtlError>
    return;
 800ae04:	e01b      	b.n	800ae3e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800ae06:	897b      	ldrh	r3, [r7, #10]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d011      	beq.n	800ae30 <USBD_GetDescriptor+0x1e0>
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	88db      	ldrh	r3, [r3, #6]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00d      	beq.n	800ae30 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	88da      	ldrh	r2, [r3, #6]
 800ae18:	897b      	ldrh	r3, [r7, #10]
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	bf28      	it	cs
 800ae1e:	4613      	movcs	r3, r2
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800ae24:	897b      	ldrh	r3, [r7, #10]
 800ae26:	461a      	mov	r2, r3
 800ae28:	68f9      	ldr	r1, [r7, #12]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fa1f 	bl	800b26e <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	88db      	ldrh	r3, [r3, #6]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d102      	bne.n	800ae3e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fa76 	bl	800b32a <USBD_CtlSendStatus>
  }
}
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	889b      	ldrh	r3, [r3, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d130      	bne.n	800aeb8 <USBD_SetAddress+0x74>
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	88db      	ldrh	r3, [r3, #6]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d12c      	bne.n	800aeb8 <USBD_SetAddress+0x74>
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	885b      	ldrh	r3, [r3, #2]
 800ae62:	2b7f      	cmp	r3, #127	; 0x7f
 800ae64:	d828      	bhi.n	800aeb8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	885b      	ldrh	r3, [r3, #2]
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d104      	bne.n	800ae86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f98b 	bl	800b19a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae84:	e01d      	b.n	800aec2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	7bfa      	ldrb	r2, [r7, #15]
 800ae8a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 feac 	bl	800bbf0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fa46 	bl	800b32a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d004      	beq.n	800aeae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2202      	movs	r2, #2
 800aea8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeac:	e009      	b.n	800aec2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb6:	e004      	b.n	800aec2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f96d 	bl	800b19a <USBD_CtlError>
  }
}
 800aec0:	bf00      	nop
 800aec2:	bf00      	nop
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
	...

0800aecc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	885b      	ldrh	r3, [r3, #2]
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	4b41      	ldr	r3, [pc, #260]	; (800afe4 <USBD_SetConfig+0x118>)
 800aede:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aee0:	4b40      	ldr	r3, [pc, #256]	; (800afe4 <USBD_SetConfig+0x118>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d904      	bls.n	800aef2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f955 	bl	800b19a <USBD_CtlError>
 800aef0:	e075      	b.n	800afde <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d002      	beq.n	800af02 <USBD_SetConfig+0x36>
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d023      	beq.n	800af48 <USBD_SetConfig+0x7c>
 800af00:	e062      	b.n	800afc8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800af02:	4b38      	ldr	r3, [pc, #224]	; (800afe4 <USBD_SetConfig+0x118>)
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d01a      	beq.n	800af40 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800af0a:	4b36      	ldr	r3, [pc, #216]	; (800afe4 <USBD_SetConfig+0x118>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2203      	movs	r2, #3
 800af18:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af1c:	4b31      	ldr	r3, [pc, #196]	; (800afe4 <USBD_SetConfig+0x118>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7ff fa5d 	bl	800a3e2 <USBD_SetClassConfig>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d104      	bne.n	800af38 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f932 	bl	800b19a <USBD_CtlError>
          return;
 800af36:	e052      	b.n	800afde <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f9f6 	bl	800b32a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800af3e:	e04e      	b.n	800afde <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 f9f2 	bl	800b32a <USBD_CtlSendStatus>
      break;
 800af46:	e04a      	b.n	800afde <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af48:	4b26      	ldr	r3, [pc, #152]	; (800afe4 <USBD_SetConfig+0x118>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d112      	bne.n	800af76 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2202      	movs	r2, #2
 800af54:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800af58:	4b22      	ldr	r3, [pc, #136]	; (800afe4 <USBD_SetConfig+0x118>)
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	461a      	mov	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800af62:	4b20      	ldr	r3, [pc, #128]	; (800afe4 <USBD_SetConfig+0x118>)
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff fa59 	bl	800a420 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f9db 	bl	800b32a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800af74:	e033      	b.n	800afde <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800af76:	4b1b      	ldr	r3, [pc, #108]	; (800afe4 <USBD_SetConfig+0x118>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	429a      	cmp	r2, r3
 800af82:	d01d      	beq.n	800afc0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7ff fa47 	bl	800a420 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af92:	4b14      	ldr	r3, [pc, #80]	; (800afe4 <USBD_SetConfig+0x118>)
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	461a      	mov	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af9c:	4b11      	ldr	r3, [pc, #68]	; (800afe4 <USBD_SetConfig+0x118>)
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	4619      	mov	r1, r3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7ff fa1d 	bl	800a3e2 <USBD_SetClassConfig>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d104      	bne.n	800afb8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f8f2 	bl	800b19a <USBD_CtlError>
          return;
 800afb6:	e012      	b.n	800afde <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f9b6 	bl	800b32a <USBD_CtlSendStatus>
      break;
 800afbe:	e00e      	b.n	800afde <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f9b2 	bl	800b32a <USBD_CtlSendStatus>
      break;
 800afc6:	e00a      	b.n	800afde <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f8e5 	bl	800b19a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800afd0:	4b04      	ldr	r3, [pc, #16]	; (800afe4 <USBD_SetConfig+0x118>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7ff fa22 	bl	800a420 <USBD_ClrClassConfig>
      break;
 800afdc:	bf00      	nop
    }
  }
}
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	200006e4 	.word	0x200006e4

0800afe8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	88db      	ldrh	r3, [r3, #6]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d004      	beq.n	800b004 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f8cc 	bl	800b19a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800b002:	e022      	b.n	800b04a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	dc02      	bgt.n	800b014 <USBD_GetConfig+0x2c>
 800b00e:	2b00      	cmp	r3, #0
 800b010:	dc03      	bgt.n	800b01a <USBD_GetConfig+0x32>
 800b012:	e015      	b.n	800b040 <USBD_GetConfig+0x58>
 800b014:	2b03      	cmp	r3, #3
 800b016:	d00b      	beq.n	800b030 <USBD_GetConfig+0x48>
 800b018:	e012      	b.n	800b040 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3308      	adds	r3, #8
 800b024:	2201      	movs	r2, #1
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f920 	bl	800b26e <USBD_CtlSendData>
      break;
 800b02e:	e00c      	b.n	800b04a <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	3304      	adds	r3, #4
 800b034:	2201      	movs	r2, #1
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f918 	bl	800b26e <USBD_CtlSendData>
      break;
 800b03e:	e004      	b.n	800b04a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f8a9 	bl	800b19a <USBD_CtlError>
      break;
 800b048:	bf00      	nop
}
 800b04a:	bf00      	nop
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b082      	sub	sp, #8
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b062:	3b01      	subs	r3, #1
 800b064:	2b02      	cmp	r3, #2
 800b066:	d81e      	bhi.n	800b0a6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	88db      	ldrh	r3, [r3, #6]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d004      	beq.n	800b07a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f891 	bl	800b19a <USBD_CtlError>
      break;
 800b078:	e01a      	b.n	800b0b0 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800b086:	2b00      	cmp	r3, #0
 800b088:	d005      	beq.n	800b096 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	f043 0202 	orr.w	r2, r3, #2
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	330c      	adds	r3, #12
 800b09a:	2202      	movs	r2, #2
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f8e5 	bl	800b26e <USBD_CtlSendData>
    break;
 800b0a4:	e004      	b.n	800b0b0 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f876 	bl	800b19a <USBD_CtlError>
    break;
 800b0ae:	bf00      	nop
  }
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	885b      	ldrh	r3, [r3, #2]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d106      	bne.n	800b0d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f929 	bl	800b32a <USBD_CtlSendStatus>
  }

}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d80b      	bhi.n	800b10e <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	885b      	ldrh	r3, [r3, #2]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d10c      	bne.n	800b118 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f90f 	bl	800b32a <USBD_CtlSendStatus>
    }
    break;
 800b10c:	e004      	b.n	800b118 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f842 	bl	800b19a <USBD_CtlError>
    break;
 800b116:	e000      	b.n	800b11a <USBD_ClrFeature+0x3a>
    break;
 800b118:	bf00      	nop
  }
}
 800b11a:	bf00      	nop
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b122:	b480      	push	{r7}
 800b124:	b083      	sub	sp, #12
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	781a      	ldrb	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	785a      	ldrb	r2, [r3, #1]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	3302      	adds	r3, #2
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	b29a      	uxth	r2, r3
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	3303      	adds	r3, #3
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	021b      	lsls	r3, r3, #8
 800b14e:	b29b      	uxth	r3, r3
 800b150:	4413      	add	r3, r2
 800b152:	b29a      	uxth	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	3304      	adds	r3, #4
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	b29a      	uxth	r2, r3
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	3305      	adds	r3, #5
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	b29b      	uxth	r3, r3
 800b168:	021b      	lsls	r3, r3, #8
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	4413      	add	r3, r2
 800b16e:	b29a      	uxth	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	3306      	adds	r3, #6
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	3307      	adds	r3, #7
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	b29b      	uxth	r3, r3
 800b184:	021b      	lsls	r3, r3, #8
 800b186:	b29b      	uxth	r3, r3
 800b188:	4413      	add	r3, r2
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	80da      	strh	r2, [r3, #6]

}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	bc80      	pop	{r7}
 800b198:	4770      	bx	lr

0800b19a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b082      	sub	sp, #8
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800b1a4:	2180      	movs	r1, #128	; 0x80
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fcb8 	bl	800bb1c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fcb4 	bl	800bb1c <USBD_LL_StallEP>
}
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d032      	beq.n	800b238 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 f834 	bl	800b240 <USBD_GetLen>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	3301      	adds	r3, #1
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	005b      	lsls	r3, r3, #1
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b1e6:	7dfb      	ldrb	r3, [r7, #23]
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	75fa      	strb	r2, [r7, #23]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	7812      	ldrb	r2, [r2, #0]
 800b1f6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b1f8:	7dfb      	ldrb	r3, [r7, #23]
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	75fa      	strb	r2, [r7, #23]
 800b1fe:	461a      	mov	r2, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	4413      	add	r3, r2
 800b204:	2203      	movs	r2, #3
 800b206:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b208:	e012      	b.n	800b230 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	1c5a      	adds	r2, r3, #1
 800b20e:	60fa      	str	r2, [r7, #12]
 800b210:	7dfa      	ldrb	r2, [r7, #23]
 800b212:	1c51      	adds	r1, r2, #1
 800b214:	75f9      	strb	r1, [r7, #23]
 800b216:	4611      	mov	r1, r2
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	440a      	add	r2, r1
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b220:	7dfb      	ldrb	r3, [r7, #23]
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	75fa      	strb	r2, [r7, #23]
 800b226:	461a      	mov	r2, r3
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	4413      	add	r3, r2
 800b22c:	2200      	movs	r2, #0
 800b22e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e8      	bne.n	800b20a <USBD_GetString+0x4e>
    }
  }
}
 800b238:	bf00      	nop
 800b23a:	3718      	adds	r7, #24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800b24c:	e005      	b.n	800b25a <USBD_GetLen+0x1a>
    {
        len++;
 800b24e:	7bfb      	ldrb	r3, [r7, #15]
 800b250:	3301      	adds	r3, #1
 800b252:	73fb      	strb	r3, [r7, #15]
        buf++;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3301      	adds	r3, #1
 800b258:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1f5      	bne.n	800b24e <USBD_GetLen+0xe>
    }

    return len;
 800b262:	7bfb      	ldrb	r3, [r7, #15]
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	bc80      	pop	{r7}
 800b26c:	4770      	bx	lr

0800b26e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	60f8      	str	r0, [r7, #12]
 800b276:	60b9      	str	r1, [r7, #8]
 800b278:	4613      	mov	r3, r2
 800b27a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2202      	movs	r2, #2
 800b280:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800b284:	88fa      	ldrh	r2, [r7, #6]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b28a:	88fa      	ldrh	r2, [r7, #6]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b290:	88fb      	ldrh	r3, [r7, #6]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	2100      	movs	r1, #0
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f000 fcc9 	bl	800bc2e <USBD_LL_Transmit>

  return USBD_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b084      	sub	sp, #16
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	60f8      	str	r0, [r7, #12]
 800b2ae:	60b9      	str	r1, [r7, #8]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b2b4:	88fb      	ldrh	r3, [r7, #6]
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 fcb7 	bl	800bc2e <USBD_LL_Transmit>

  return USBD_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b084      	sub	sp, #16
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	60b9      	str	r1, [r7, #8]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2203      	movs	r2, #3
 800b2dc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800b2e0:	88fa      	ldrh	r2, [r7, #6]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800b2e8:	88fa      	ldrh	r2, [r7, #6]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800b2f0:	88fb      	ldrh	r3, [r7, #6]
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f000 fcbc 	bl	800bc74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b084      	sub	sp, #16
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	60f8      	str	r0, [r7, #12]
 800b30e:	60b9      	str	r1, [r7, #8]
 800b310:	4613      	mov	r3, r2
 800b312:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b314:	88fb      	ldrh	r3, [r7, #6]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	2100      	movs	r1, #0
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 fcaa 	bl	800bc74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b082      	sub	sp, #8
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2204      	movs	r2, #4
 800b336:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b33a:	2300      	movs	r3, #0
 800b33c:	2200      	movs	r2, #0
 800b33e:	2100      	movs	r1, #0
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fc74 	bl	800bc2e <USBD_LL_Transmit>

  return USBD_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2205      	movs	r2, #5
 800b35c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b360:	2300      	movs	r3, #0
 800b362:	2200      	movs	r2, #0
 800b364:	2100      	movs	r1, #0
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fc84 	bl	800bc74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
	...

0800b378 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b37c:	2200      	movs	r2, #0
 800b37e:	4912      	ldr	r1, [pc, #72]	; (800b3c8 <MX_USB_DEVICE_Init+0x50>)
 800b380:	4812      	ldr	r0, [pc, #72]	; (800b3cc <MX_USB_DEVICE_Init+0x54>)
 800b382:	f7fe ffd4 	bl	800a32e <USBD_Init>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b38c:	f7f7 fca0 	bl	8002cd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b390:	490f      	ldr	r1, [pc, #60]	; (800b3d0 <MX_USB_DEVICE_Init+0x58>)
 800b392:	480e      	ldr	r0, [pc, #56]	; (800b3cc <MX_USB_DEVICE_Init+0x54>)
 800b394:	f7fe fff6 	bl	800a384 <USBD_RegisterClass>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b39e:	f7f7 fc97 	bl	8002cd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b3a2:	490c      	ldr	r1, [pc, #48]	; (800b3d4 <MX_USB_DEVICE_Init+0x5c>)
 800b3a4:	4809      	ldr	r0, [pc, #36]	; (800b3cc <MX_USB_DEVICE_Init+0x54>)
 800b3a6:	f7fe ff27 	bl	800a1f8 <USBD_CDC_RegisterInterface>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d001      	beq.n	800b3b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b3b0:	f7f7 fc8e 	bl	8002cd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b3b4:	4805      	ldr	r0, [pc, #20]	; (800b3cc <MX_USB_DEVICE_Init+0x54>)
 800b3b6:	f7fe fffe 	bl	800a3b6 <USBD_Start>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b3c0:	f7f7 fc86 	bl	8002cd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b3c4:	bf00      	nop
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	20000498 	.word	0x20000498
 800b3cc:	20000a94 	.word	0x20000a94
 800b3d0:	20000384 	.word	0x20000384
 800b3d4:	20000488 	.word	0x20000488

0800b3d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b3dc:	2200      	movs	r2, #0
 800b3de:	4905      	ldr	r1, [pc, #20]	; (800b3f4 <CDC_Init_FS+0x1c>)
 800b3e0:	4805      	ldr	r0, [pc, #20]	; (800b3f8 <CDC_Init_FS+0x20>)
 800b3e2:	f7fe ff1f 	bl	800a224 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b3e6:	4905      	ldr	r1, [pc, #20]	; (800b3fc <CDC_Init_FS+0x24>)
 800b3e8:	4803      	ldr	r0, [pc, #12]	; (800b3f8 <CDC_Init_FS+0x20>)
 800b3ea:	f7fe ff34 	bl	800a256 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b3ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	20000db0 	.word	0x20000db0
 800b3f8:	20000a94 	.word	0x20000a94
 800b3fc:	20000d30 	.word	0x20000d30

0800b400 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b400:	b480      	push	{r7}
 800b402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b404:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b406:	4618      	mov	r0, r3
 800b408:	46bd      	mov	sp, r7
 800b40a:	bc80      	pop	{r7}
 800b40c:	4770      	bx	lr
	...

0800b410 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	4603      	mov	r3, r0
 800b418:	6039      	str	r1, [r7, #0]
 800b41a:	71fb      	strb	r3, [r7, #7]
 800b41c:	4613      	mov	r3, r2
 800b41e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b420:	79fb      	ldrb	r3, [r7, #7]
 800b422:	2b23      	cmp	r3, #35	; 0x23
 800b424:	d866      	bhi.n	800b4f4 <CDC_Control_FS+0xe4>
 800b426:	a201      	add	r2, pc, #4	; (adr r2, 800b42c <CDC_Control_FS+0x1c>)
 800b428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42c:	0800b4f5 	.word	0x0800b4f5
 800b430:	0800b4f5 	.word	0x0800b4f5
 800b434:	0800b4f5 	.word	0x0800b4f5
 800b438:	0800b4f5 	.word	0x0800b4f5
 800b43c:	0800b4f5 	.word	0x0800b4f5
 800b440:	0800b4f5 	.word	0x0800b4f5
 800b444:	0800b4f5 	.word	0x0800b4f5
 800b448:	0800b4f5 	.word	0x0800b4f5
 800b44c:	0800b4f5 	.word	0x0800b4f5
 800b450:	0800b4f5 	.word	0x0800b4f5
 800b454:	0800b4f5 	.word	0x0800b4f5
 800b458:	0800b4f5 	.word	0x0800b4f5
 800b45c:	0800b4f5 	.word	0x0800b4f5
 800b460:	0800b4f5 	.word	0x0800b4f5
 800b464:	0800b4f5 	.word	0x0800b4f5
 800b468:	0800b4f5 	.word	0x0800b4f5
 800b46c:	0800b4f5 	.word	0x0800b4f5
 800b470:	0800b4f5 	.word	0x0800b4f5
 800b474:	0800b4f5 	.word	0x0800b4f5
 800b478:	0800b4f5 	.word	0x0800b4f5
 800b47c:	0800b4f5 	.word	0x0800b4f5
 800b480:	0800b4f5 	.word	0x0800b4f5
 800b484:	0800b4f5 	.word	0x0800b4f5
 800b488:	0800b4f5 	.word	0x0800b4f5
 800b48c:	0800b4f5 	.word	0x0800b4f5
 800b490:	0800b4f5 	.word	0x0800b4f5
 800b494:	0800b4f5 	.word	0x0800b4f5
 800b498:	0800b4f5 	.word	0x0800b4f5
 800b49c:	0800b4f5 	.word	0x0800b4f5
 800b4a0:	0800b4f5 	.word	0x0800b4f5
 800b4a4:	0800b4f5 	.word	0x0800b4f5
 800b4a8:	0800b4f5 	.word	0x0800b4f5
 800b4ac:	0800b4f5 	.word	0x0800b4f5
 800b4b0:	0800b4bd 	.word	0x0800b4bd
 800b4b4:	0800b4f5 	.word	0x0800b4f5
 800b4b8:	0800b4f5 	.word	0x0800b4f5
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2220      	movs	r2, #32
 800b4c0:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	22c2      	movs	r2, #194	; 0xc2
 800b4c8:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	3302      	adds	r3, #2
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	3303      	adds	r3, #3
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	3304      	adds	r3, #4
 800b4de:	2200      	movs	r2, #0
 800b4e0:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	3305      	adds	r3, #5
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	3306      	adds	r3, #6
 800b4ee:	2208      	movs	r2, #8
 800b4f0:	701a      	strb	r2, [r3, #0]
    break;
 800b4f2:	e000      	b.n	800b4f6 <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b4f4:	bf00      	nop
  }

  return (USBD_OK);
 800b4f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bc80      	pop	{r7}
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop

0800b504 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800b50e:	2300      	movs	r3, #0
 800b510:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800b512:	e018      	b.n	800b546 <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	4413      	add	r3, r2
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b0a      	cmp	r3, #10
 800b51e:	d005      	beq.n	800b52c <CDC_Receive_FS+0x28>
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	4413      	add	r3, r2
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	2b0d      	cmp	r3, #13
 800b52a:	d102      	bne.n	800b532 <CDC_Receive_FS+0x2e>
 800b52c:	4b12      	ldr	r3, [pc, #72]	; (800b578 <CDC_Receive_FS+0x74>)
 800b52e:	2201      	movs	r2, #1
 800b530:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	4413      	add	r3, r2
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7f6 ff26 	bl	800238c <Write_to_circ_buffer>
	  i++;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	3301      	adds	r3, #1
 800b544:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d3e1      	bcc.n	800b514 <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	b29b      	uxth	r3, r3
 800b556:	4619      	mov	r1, r3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f811 	bl	800b580 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b55e:	6879      	ldr	r1, [r7, #4]
 800b560:	4806      	ldr	r0, [pc, #24]	; (800b57c <CDC_Receive_FS+0x78>)
 800b562:	f7fe fe78 	bl	800a256 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b566:	4805      	ldr	r0, [pc, #20]	; (800b57c <CDC_Receive_FS+0x78>)
 800b568:	f7fe feb7 	bl	800a2da <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b56c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	2000097f 	.word	0x2000097f
 800b57c:	20000a94 	.word	0x20000a94

0800b580 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	460b      	mov	r3, r1
 800b58a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b590:	4b0d      	ldr	r3, [pc, #52]	; (800b5c8 <CDC_Transmit_FS+0x48>)
 800b592:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b596:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d001      	beq.n	800b5a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e00b      	b.n	800b5be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b5a6:	887b      	ldrh	r3, [r7, #2]
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	6879      	ldr	r1, [r7, #4]
 800b5ac:	4806      	ldr	r0, [pc, #24]	; (800b5c8 <CDC_Transmit_FS+0x48>)
 800b5ae:	f7fe fe39 	bl	800a224 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b5b2:	4805      	ldr	r0, [pc, #20]	; (800b5c8 <CDC_Transmit_FS+0x48>)
 800b5b4:	f7fe fe62 	bl	800a27c <USBD_CDC_TransmitPacket>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20000a94 	.word	0x20000a94

0800b5cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	2212      	movs	r2, #18
 800b5dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5de:	4b03      	ldr	r3, [pc, #12]	; (800b5ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bc80      	pop	{r7}
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	200004b4 	.word	0x200004b4

0800b5f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	6039      	str	r1, [r7, #0]
 800b5fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2204      	movs	r2, #4
 800b600:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b602:	4b03      	ldr	r3, [pc, #12]	; (800b610 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b604:	4618      	mov	r0, r3
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	bc80      	pop	{r7}
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	200004c8 	.word	0x200004c8

0800b614 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	4603      	mov	r3, r0
 800b61c:	6039      	str	r1, [r7, #0]
 800b61e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b620:	79fb      	ldrb	r3, [r7, #7]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d105      	bne.n	800b632 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b626:	683a      	ldr	r2, [r7, #0]
 800b628:	4907      	ldr	r1, [pc, #28]	; (800b648 <USBD_FS_ProductStrDescriptor+0x34>)
 800b62a:	4808      	ldr	r0, [pc, #32]	; (800b64c <USBD_FS_ProductStrDescriptor+0x38>)
 800b62c:	f7ff fdc6 	bl	800b1bc <USBD_GetString>
 800b630:	e004      	b.n	800b63c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	4904      	ldr	r1, [pc, #16]	; (800b648 <USBD_FS_ProductStrDescriptor+0x34>)
 800b636:	4805      	ldr	r0, [pc, #20]	; (800b64c <USBD_FS_ProductStrDescriptor+0x38>)
 800b638:	f7ff fdc0 	bl	800b1bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b63c:	4b02      	ldr	r3, [pc, #8]	; (800b648 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	20000eb0 	.word	0x20000eb0
 800b64c:	0800ec44 	.word	0x0800ec44

0800b650 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	4603      	mov	r3, r0
 800b658:	6039      	str	r1, [r7, #0]
 800b65a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	4904      	ldr	r1, [pc, #16]	; (800b670 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b660:	4804      	ldr	r0, [pc, #16]	; (800b674 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b662:	f7ff fdab 	bl	800b1bc <USBD_GetString>
  return USBD_StrDesc;
 800b666:	4b02      	ldr	r3, [pc, #8]	; (800b670 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000eb0 	.word	0x20000eb0
 800b674:	0800ec50 	.word	0x0800ec50

0800b678 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	6039      	str	r1, [r7, #0]
 800b682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	221a      	movs	r2, #26
 800b688:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b68a:	f000 f843 	bl	800b714 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b68e:	4b02      	ldr	r3, [pc, #8]	; (800b698 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	200004cc 	.word	0x200004cc

0800b69c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	6039      	str	r1, [r7, #0]
 800b6a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b6a8:	79fb      	ldrb	r3, [r7, #7]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d105      	bne.n	800b6ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	4907      	ldr	r1, [pc, #28]	; (800b6d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6b2:	4808      	ldr	r0, [pc, #32]	; (800b6d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6b4:	f7ff fd82 	bl	800b1bc <USBD_GetString>
 800b6b8:	e004      	b.n	800b6c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	4904      	ldr	r1, [pc, #16]	; (800b6d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6be:	4805      	ldr	r0, [pc, #20]	; (800b6d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6c0:	f7ff fd7c 	bl	800b1bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6c4:	4b02      	ldr	r3, [pc, #8]	; (800b6d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20000eb0 	.word	0x20000eb0
 800b6d4:	0800ec60 	.word	0x0800ec60

0800b6d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	6039      	str	r1, [r7, #0]
 800b6e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6e4:	79fb      	ldrb	r3, [r7, #7]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d105      	bne.n	800b6f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	4907      	ldr	r1, [pc, #28]	; (800b70c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6ee:	4808      	ldr	r0, [pc, #32]	; (800b710 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6f0:	f7ff fd64 	bl	800b1bc <USBD_GetString>
 800b6f4:	e004      	b.n	800b700 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	4904      	ldr	r1, [pc, #16]	; (800b70c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6fa:	4805      	ldr	r0, [pc, #20]	; (800b710 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6fc:	f7ff fd5e 	bl	800b1bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b700:	4b02      	ldr	r3, [pc, #8]	; (800b70c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b702:	4618      	mov	r0, r3
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	20000eb0 	.word	0x20000eb0
 800b710:	0800ec6c 	.word	0x0800ec6c

0800b714 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b71a:	4b0f      	ldr	r3, [pc, #60]	; (800b758 <Get_SerialNum+0x44>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b720:	4b0e      	ldr	r3, [pc, #56]	; (800b75c <Get_SerialNum+0x48>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b726:	4b0e      	ldr	r3, [pc, #56]	; (800b760 <Get_SerialNum+0x4c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4413      	add	r3, r2
 800b732:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d009      	beq.n	800b74e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b73a:	2208      	movs	r2, #8
 800b73c:	4909      	ldr	r1, [pc, #36]	; (800b764 <Get_SerialNum+0x50>)
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f000 f814 	bl	800b76c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b744:	2204      	movs	r2, #4
 800b746:	4908      	ldr	r1, [pc, #32]	; (800b768 <Get_SerialNum+0x54>)
 800b748:	68b8      	ldr	r0, [r7, #8]
 800b74a:	f000 f80f 	bl	800b76c <IntToUnicode>
  }
}
 800b74e:	bf00      	nop
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	1ff80050 	.word	0x1ff80050
 800b75c:	1ff80054 	.word	0x1ff80054
 800b760:	1ff80058 	.word	0x1ff80058
 800b764:	200004ce 	.word	0x200004ce
 800b768:	200004de 	.word	0x200004de

0800b76c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b087      	sub	sp, #28
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	4613      	mov	r3, r2
 800b778:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b77e:	2300      	movs	r3, #0
 800b780:	75fb      	strb	r3, [r7, #23]
 800b782:	e027      	b.n	800b7d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	0f1b      	lsrs	r3, r3, #28
 800b788:	2b09      	cmp	r3, #9
 800b78a:	d80b      	bhi.n	800b7a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	0f1b      	lsrs	r3, r3, #28
 800b790:	b2da      	uxtb	r2, r3
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	005b      	lsls	r3, r3, #1
 800b796:	4619      	mov	r1, r3
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	440b      	add	r3, r1
 800b79c:	3230      	adds	r2, #48	; 0x30
 800b79e:	b2d2      	uxtb	r2, r2
 800b7a0:	701a      	strb	r2, [r3, #0]
 800b7a2:	e00a      	b.n	800b7ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	0f1b      	lsrs	r3, r3, #28
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
 800b7ac:	005b      	lsls	r3, r3, #1
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	440b      	add	r3, r1
 800b7b4:	3237      	adds	r2, #55	; 0x37
 800b7b6:	b2d2      	uxtb	r2, r2
 800b7b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	011b      	lsls	r3, r3, #4
 800b7be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7c0:	7dfb      	ldrb	r3, [r7, #23]
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7ce:	7dfb      	ldrb	r3, [r7, #23]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	75fb      	strb	r3, [r7, #23]
 800b7d4:	7dfa      	ldrb	r2, [r7, #23]
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d3d3      	bcc.n	800b784 <IntToUnicode+0x18>
  }
}
 800b7dc:	bf00      	nop
 800b7de:	bf00      	nop
 800b7e0:	371c      	adds	r7, #28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bc80      	pop	{r7}
 800b7e6:	4770      	bx	lr

0800b7e8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800b7f4:	78fb      	ldrb	r3, [r7, #3]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d106      	bne.n	800b808 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800b7fa:	4b09      	ldr	r3, [pc, #36]	; (800b820 <HAL_PCDEx_SetConnectionState+0x38>)
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	4a08      	ldr	r2, [pc, #32]	; (800b820 <HAL_PCDEx_SetConnectionState+0x38>)
 800b800:	f043 0301 	orr.w	r3, r3, #1
 800b804:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800b806:	e005      	b.n	800b814 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800b808:	4b05      	ldr	r3, [pc, #20]	; (800b820 <HAL_PCDEx_SetConnectionState+0x38>)
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	4a04      	ldr	r2, [pc, #16]	; (800b820 <HAL_PCDEx_SetConnectionState+0x38>)
 800b80e:	f023 0301 	bic.w	r3, r3, #1
 800b812:	6053      	str	r3, [r2, #4]
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	bc80      	pop	{r7}
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	40010000 	.word	0x40010000

0800b824 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a0d      	ldr	r2, [pc, #52]	; (800b868 <HAL_PCD_MspInit+0x44>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d113      	bne.n	800b85e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b836:	4b0d      	ldr	r3, [pc, #52]	; (800b86c <HAL_PCD_MspInit+0x48>)
 800b838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83a:	4a0c      	ldr	r2, [pc, #48]	; (800b86c <HAL_PCD_MspInit+0x48>)
 800b83c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b840:	6253      	str	r3, [r2, #36]	; 0x24
 800b842:	4b0a      	ldr	r3, [pc, #40]	; (800b86c <HAL_PCD_MspInit+0x48>)
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800b84e:	2200      	movs	r2, #0
 800b850:	2101      	movs	r1, #1
 800b852:	2014      	movs	r0, #20
 800b854:	f7f7 fe95 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b858:	2014      	movs	r0, #20
 800b85a:	f7f7 feae 	bl	80035ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b85e:	bf00      	nop
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	40005c00 	.word	0x40005c00
 800b86c:	40023800 	.word	0x40023800

0800b870 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b884:	4619      	mov	r1, r3
 800b886:	4610      	mov	r0, r2
 800b888:	f7fe fddd 	bl	800a446 <USBD_LL_SetupStage>
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b8a6:	78fa      	ldrb	r2, [r7, #3]
 800b8a8:	6879      	ldr	r1, [r7, #4]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	4413      	add	r3, r2
 800b8b0:	00db      	lsls	r3, r3, #3
 800b8b2:	440b      	add	r3, r1
 800b8b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	78fb      	ldrb	r3, [r7, #3]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	f7fe fe0f 	bl	800a4e0 <USBD_LL_DataOutStage>
}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b8dc:	78fa      	ldrb	r2, [r7, #3]
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	4413      	add	r3, r2
 800b8e6:	00db      	lsls	r3, r3, #3
 800b8e8:	440b      	add	r3, r1
 800b8ea:	333c      	adds	r3, #60	; 0x3c
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	78fb      	ldrb	r3, [r7, #3]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	f7fe fe66 	bl	800a5c2 <USBD_LL_DataInStage>
}
 800b8f6:	bf00      	nop
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b082      	sub	sp, #8
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fe ff71 	bl	800a7f4 <USBD_LL_SOF>
}
 800b912:	bf00      	nop
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b084      	sub	sp, #16
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b922:	2301      	movs	r3, #1
 800b924:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d001      	beq.n	800b932 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b92e:	f7f7 f9cf 	bl	8002cd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b938:	7bfa      	ldrb	r2, [r7, #15]
 800b93a:	4611      	mov	r1, r2
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fe ff26 	bl	800a78e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b948:	4618      	mov	r0, r3
 800b94a:	f7fe fedf 	bl	800a70c <USBD_LL_Reset>
}
 800b94e:	bf00      	nop
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe ff20 	bl	800a7ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d005      	beq.n	800b980 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b974:	4b04      	ldr	r3, [pc, #16]	; (800b988 <HAL_PCD_SuspendCallback+0x30>)
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	4a03      	ldr	r2, [pc, #12]	; (800b988 <HAL_PCD_SuspendCallback+0x30>)
 800b97a:	f043 0306 	orr.w	r3, r3, #6
 800b97e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b980:	bf00      	nop
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	e000ed00 	.word	0xe000ed00

0800b98c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe ff1a 	bl	800a7d4 <USBD_LL_Resume>
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b9b0:	4a28      	ldr	r2, [pc, #160]	; (800ba54 <USBD_LL_Init+0xac>)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a26      	ldr	r2, [pc, #152]	; (800ba54 <USBD_LL_Init+0xac>)
 800b9bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800b9c0:	4b24      	ldr	r3, [pc, #144]	; (800ba54 <USBD_LL_Init+0xac>)
 800b9c2:	4a25      	ldr	r2, [pc, #148]	; (800ba58 <USBD_LL_Init+0xb0>)
 800b9c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b9c6:	4b23      	ldr	r3, [pc, #140]	; (800ba54 <USBD_LL_Init+0xac>)
 800b9c8:	2208      	movs	r2, #8
 800b9ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b9cc:	4b21      	ldr	r3, [pc, #132]	; (800ba54 <USBD_LL_Init+0xac>)
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b9d2:	4b20      	ldr	r3, [pc, #128]	; (800ba54 <USBD_LL_Init+0xac>)
 800b9d4:	2202      	movs	r2, #2
 800b9d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b9d8:	4b1e      	ldr	r3, [pc, #120]	; (800ba54 <USBD_LL_Init+0xac>)
 800b9da:	2200      	movs	r2, #0
 800b9dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b9de:	4b1d      	ldr	r3, [pc, #116]	; (800ba54 <USBD_LL_Init+0xac>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b9e4:	481b      	ldr	r0, [pc, #108]	; (800ba54 <USBD_LL_Init+0xac>)
 800b9e6:	f7f8 fb69 	bl	80040bc <HAL_PCD_Init>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d001      	beq.n	800b9f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b9f0:	f7f7 f96e 	bl	8002cd0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b9fa:	2318      	movs	r3, #24
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	2100      	movs	r1, #0
 800ba00:	f7f9 ff46 	bl	8005890 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ba0a:	2358      	movs	r3, #88	; 0x58
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2180      	movs	r1, #128	; 0x80
 800ba10:	f7f9 ff3e 	bl	8005890 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ba1a:	23c0      	movs	r3, #192	; 0xc0
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2181      	movs	r1, #129	; 0x81
 800ba20:	f7f9 ff36 	bl	8005890 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ba2a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2101      	movs	r1, #1
 800ba32:	f7f9 ff2d 	bl	8005890 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ba3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba40:	2200      	movs	r2, #0
 800ba42:	2182      	movs	r1, #130	; 0x82
 800ba44:	f7f9 ff24 	bl	8005890 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	200010b0 	.word	0x200010b0
 800ba58:	40005c00 	.word	0x40005c00

0800ba5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7f8 fc00 	bl	8004278 <HAL_PCD_Start>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f000 f944 	bl	800bd0c <USBD_Get_USB_Status>
 800ba84:	4603      	mov	r3, r0
 800ba86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	4608      	mov	r0, r1
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	461a      	mov	r2, r3
 800baa0:	4603      	mov	r3, r0
 800baa2:	70fb      	strb	r3, [r7, #3]
 800baa4:	460b      	mov	r3, r1
 800baa6:	70bb      	strb	r3, [r7, #2]
 800baa8:	4613      	mov	r3, r2
 800baaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800baba:	78bb      	ldrb	r3, [r7, #2]
 800babc:	883a      	ldrh	r2, [r7, #0]
 800babe:	78f9      	ldrb	r1, [r7, #3]
 800bac0:	f7f8 fd1c 	bl	80044fc <HAL_PCD_EP_Open>
 800bac4:	4603      	mov	r3, r0
 800bac6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 f91e 	bl	800bd0c <USBD_Get_USB_Status>
 800bad0:	4603      	mov	r3, r0
 800bad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b084      	sub	sp, #16
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	460b      	mov	r3, r1
 800bae8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800baf8:	78fa      	ldrb	r2, [r7, #3]
 800bafa:	4611      	mov	r1, r2
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7f8 fd63 	bl	80045c8 <HAL_PCD_EP_Close>
 800bb02:	4603      	mov	r3, r0
 800bb04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 f8ff 	bl	800bd0c <USBD_Get_USB_Status>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb36:	78fa      	ldrb	r2, [r7, #3]
 800bb38:	4611      	mov	r1, r2
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7f8 fe23 	bl	8004786 <HAL_PCD_EP_SetStall>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 f8e0 	bl	800bd0c <USBD_Get_USB_Status>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	460b      	mov	r3, r1
 800bb64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb66:	2300      	movs	r3, #0
 800bb68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb74:	78fa      	ldrb	r2, [r7, #3]
 800bb76:	4611      	mov	r1, r2
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7f8 fe56 	bl	800482a <HAL_PCD_EP_ClrStall>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 f8c1 	bl	800bd0c <USBD_Get_USB_Status>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	460b      	mov	r3, r1
 800bba2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bbaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bbac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	da0c      	bge.n	800bbce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbba:	68f9      	ldr	r1, [r7, #12]
 800bbbc:	1c5a      	adds	r2, r3, #1
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4413      	add	r3, r2
 800bbc4:	00db      	lsls	r3, r3, #3
 800bbc6:	440b      	add	r3, r1
 800bbc8:	3302      	adds	r3, #2
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	e00b      	b.n	800bbe6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bbce:	78fb      	ldrb	r3, [r7, #3]
 800bbd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbd4:	68f9      	ldr	r1, [r7, #12]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	00db      	lsls	r3, r3, #3
 800bbde:	440b      	add	r3, r1
 800bbe0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bbe4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bc80      	pop	{r7}
 800bbee:	4770      	bx	lr

0800bbf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc0a:	78fa      	ldrb	r2, [r7, #3]
 800bc0c:	4611      	mov	r1, r2
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7f8 fc4f 	bl	80044b2 <HAL_PCD_SetAddress>
 800bc14:	4603      	mov	r3, r0
 800bc16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 f876 	bl	800bd0c <USBD_Get_USB_Status>
 800bc20:	4603      	mov	r3, r0
 800bc22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc24:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b086      	sub	sp, #24
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	60f8      	str	r0, [r7, #12]
 800bc36:	607a      	str	r2, [r7, #4]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	72fb      	strb	r3, [r7, #11]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bc50:	893b      	ldrh	r3, [r7, #8]
 800bc52:	7af9      	ldrb	r1, [r7, #11]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	f7f8 fd53 	bl	8004700 <HAL_PCD_EP_Transmit>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc5e:	7dfb      	ldrb	r3, [r7, #23]
 800bc60:	4618      	mov	r0, r3
 800bc62:	f000 f853 	bl	800bd0c <USBD_Get_USB_Status>
 800bc66:	4603      	mov	r3, r0
 800bc68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc6a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3718      	adds	r7, #24
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b086      	sub	sp, #24
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	607a      	str	r2, [r7, #4]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	460b      	mov	r3, r1
 800bc82:	72fb      	strb	r3, [r7, #11]
 800bc84:	4613      	mov	r3, r2
 800bc86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bc96:	893b      	ldrh	r3, [r7, #8]
 800bc98:	7af9      	ldrb	r1, [r7, #11]
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	f7f8 fcdc 	bl	8004658 <HAL_PCD_EP_Receive>
 800bca0:	4603      	mov	r3, r0
 800bca2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bca4:	7dfb      	ldrb	r3, [r7, #23]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f000 f830 	bl	800bd0c <USBD_Get_USB_Status>
 800bcac:	4603      	mov	r3, r0
 800bcae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bcb0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3718      	adds	r7, #24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bccc:	78fa      	ldrb	r2, [r7, #3]
 800bcce:	4611      	mov	r1, r2
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7f8 fcfe 	bl	80046d2 <HAL_PCD_EP_GetRxCount>
 800bcd6:	4603      	mov	r3, r0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bce8:	4b02      	ldr	r3, [pc, #8]	; (800bcf4 <USBD_static_malloc+0x14>)
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	370c      	adds	r7, #12
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bc80      	pop	{r7}
 800bcf2:	4770      	bx	lr
 800bcf4:	200006e8 	.word	0x200006e8

0800bcf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]

}
 800bd00:	bf00      	nop
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bc80      	pop	{r7}
 800bd08:	4770      	bx	lr
	...

0800bd0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	4603      	mov	r3, r0
 800bd14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd16:	2300      	movs	r3, #0
 800bd18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d817      	bhi.n	800bd50 <USBD_Get_USB_Status+0x44>
 800bd20:	a201      	add	r2, pc, #4	; (adr r2, 800bd28 <USBD_Get_USB_Status+0x1c>)
 800bd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd26:	bf00      	nop
 800bd28:	0800bd39 	.word	0x0800bd39
 800bd2c:	0800bd3f 	.word	0x0800bd3f
 800bd30:	0800bd45 	.word	0x0800bd45
 800bd34:	0800bd4b 	.word	0x0800bd4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3c:	e00b      	b.n	800bd56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd3e:	2302      	movs	r3, #2
 800bd40:	73fb      	strb	r3, [r7, #15]
    break;
 800bd42:	e008      	b.n	800bd56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd44:	2301      	movs	r3, #1
 800bd46:	73fb      	strb	r3, [r7, #15]
    break;
 800bd48:	e005      	b.n	800bd56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd4a:	2302      	movs	r3, #2
 800bd4c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd4e:	e002      	b.n	800bd56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bd50:	2302      	movs	r3, #2
 800bd52:	73fb      	strb	r3, [r7, #15]
    break;
 800bd54:	bf00      	nop
  }
  return usb_status;
 800bd56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bc80      	pop	{r7}
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop

0800bd64 <atof>:
 800bd64:	2100      	movs	r1, #0
 800bd66:	f000 be5f 	b.w	800ca28 <strtod>
	...

0800bd6c <__errno>:
 800bd6c:	4b01      	ldr	r3, [pc, #4]	; (800bd74 <__errno+0x8>)
 800bd6e:	6818      	ldr	r0, [r3, #0]
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	200004e8 	.word	0x200004e8

0800bd78 <__libc_init_array>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	2600      	movs	r6, #0
 800bd7c:	4d0c      	ldr	r5, [pc, #48]	; (800bdb0 <__libc_init_array+0x38>)
 800bd7e:	4c0d      	ldr	r4, [pc, #52]	; (800bdb4 <__libc_init_array+0x3c>)
 800bd80:	1b64      	subs	r4, r4, r5
 800bd82:	10a4      	asrs	r4, r4, #2
 800bd84:	42a6      	cmp	r6, r4
 800bd86:	d109      	bne.n	800bd9c <__libc_init_array+0x24>
 800bd88:	f002 fee6 	bl	800eb58 <_init>
 800bd8c:	2600      	movs	r6, #0
 800bd8e:	4d0a      	ldr	r5, [pc, #40]	; (800bdb8 <__libc_init_array+0x40>)
 800bd90:	4c0a      	ldr	r4, [pc, #40]	; (800bdbc <__libc_init_array+0x44>)
 800bd92:	1b64      	subs	r4, r4, r5
 800bd94:	10a4      	asrs	r4, r4, #2
 800bd96:	42a6      	cmp	r6, r4
 800bd98:	d105      	bne.n	800bda6 <__libc_init_array+0x2e>
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bda0:	4798      	blx	r3
 800bda2:	3601      	adds	r6, #1
 800bda4:	e7ee      	b.n	800bd84 <__libc_init_array+0xc>
 800bda6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdaa:	4798      	blx	r3
 800bdac:	3601      	adds	r6, #1
 800bdae:	e7f2      	b.n	800bd96 <__libc_init_array+0x1e>
 800bdb0:	0800f138 	.word	0x0800f138
 800bdb4:	0800f138 	.word	0x0800f138
 800bdb8:	0800f138 	.word	0x0800f138
 800bdbc:	0800f13c 	.word	0x0800f13c

0800bdc0 <memcpy>:
 800bdc0:	440a      	add	r2, r1
 800bdc2:	4291      	cmp	r1, r2
 800bdc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdc8:	d100      	bne.n	800bdcc <memcpy+0xc>
 800bdca:	4770      	bx	lr
 800bdcc:	b510      	push	{r4, lr}
 800bdce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdd2:	4291      	cmp	r1, r2
 800bdd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdd8:	d1f9      	bne.n	800bdce <memcpy+0xe>
 800bdda:	bd10      	pop	{r4, pc}

0800bddc <memset>:
 800bddc:	4603      	mov	r3, r0
 800bdde:	4402      	add	r2, r0
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d100      	bne.n	800bde6 <memset+0xa>
 800bde4:	4770      	bx	lr
 800bde6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdea:	e7f9      	b.n	800bde0 <memset+0x4>

0800bdec <strcpy>:
 800bdec:	4603      	mov	r3, r0
 800bdee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdf2:	f803 2b01 	strb.w	r2, [r3], #1
 800bdf6:	2a00      	cmp	r2, #0
 800bdf8:	d1f9      	bne.n	800bdee <strcpy+0x2>
 800bdfa:	4770      	bx	lr

0800bdfc <sulp>:
 800bdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be00:	460f      	mov	r7, r1
 800be02:	4690      	mov	r8, r2
 800be04:	f001 fd98 	bl	800d938 <__ulp>
 800be08:	4604      	mov	r4, r0
 800be0a:	460d      	mov	r5, r1
 800be0c:	f1b8 0f00 	cmp.w	r8, #0
 800be10:	d011      	beq.n	800be36 <sulp+0x3a>
 800be12:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800be16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	dd0b      	ble.n	800be36 <sulp+0x3a>
 800be1e:	2400      	movs	r4, #0
 800be20:	051b      	lsls	r3, r3, #20
 800be22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800be26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800be2a:	4622      	mov	r2, r4
 800be2c:	462b      	mov	r3, r5
 800be2e:	f7f4 fb75 	bl	800051c <__aeabi_dmul>
 800be32:	4604      	mov	r4, r0
 800be34:	460d      	mov	r5, r1
 800be36:	4620      	mov	r0, r4
 800be38:	4629      	mov	r1, r5
 800be3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800be40 <_strtod_l>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	469b      	mov	fp, r3
 800be46:	2300      	movs	r3, #0
 800be48:	b0a1      	sub	sp, #132	; 0x84
 800be4a:	931c      	str	r3, [sp, #112]	; 0x70
 800be4c:	4ba1      	ldr	r3, [pc, #644]	; (800c0d4 <_strtod_l+0x294>)
 800be4e:	4682      	mov	sl, r0
 800be50:	681f      	ldr	r7, [r3, #0]
 800be52:	460e      	mov	r6, r1
 800be54:	4638      	mov	r0, r7
 800be56:	9217      	str	r2, [sp, #92]	; 0x5c
 800be58:	f7f4 f99c 	bl	8000194 <strlen>
 800be5c:	f04f 0800 	mov.w	r8, #0
 800be60:	4604      	mov	r4, r0
 800be62:	f04f 0900 	mov.w	r9, #0
 800be66:	961b      	str	r6, [sp, #108]	; 0x6c
 800be68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be6a:	781a      	ldrb	r2, [r3, #0]
 800be6c:	2a2b      	cmp	r2, #43	; 0x2b
 800be6e:	d04c      	beq.n	800bf0a <_strtod_l+0xca>
 800be70:	d83a      	bhi.n	800bee8 <_strtod_l+0xa8>
 800be72:	2a0d      	cmp	r2, #13
 800be74:	d833      	bhi.n	800bede <_strtod_l+0x9e>
 800be76:	2a08      	cmp	r2, #8
 800be78:	d833      	bhi.n	800bee2 <_strtod_l+0xa2>
 800be7a:	2a00      	cmp	r2, #0
 800be7c:	d03d      	beq.n	800befa <_strtod_l+0xba>
 800be7e:	2300      	movs	r3, #0
 800be80:	930c      	str	r3, [sp, #48]	; 0x30
 800be82:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800be84:	782b      	ldrb	r3, [r5, #0]
 800be86:	2b30      	cmp	r3, #48	; 0x30
 800be88:	f040 80af 	bne.w	800bfea <_strtod_l+0x1aa>
 800be8c:	786b      	ldrb	r3, [r5, #1]
 800be8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be92:	2b58      	cmp	r3, #88	; 0x58
 800be94:	d16c      	bne.n	800bf70 <_strtod_l+0x130>
 800be96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be98:	4650      	mov	r0, sl
 800be9a:	9301      	str	r3, [sp, #4]
 800be9c:	ab1c      	add	r3, sp, #112	; 0x70
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	4a8d      	ldr	r2, [pc, #564]	; (800c0d8 <_strtod_l+0x298>)
 800bea2:	f8cd b008 	str.w	fp, [sp, #8]
 800bea6:	ab1d      	add	r3, sp, #116	; 0x74
 800bea8:	a91b      	add	r1, sp, #108	; 0x6c
 800beaa:	f000 febd 	bl	800cc28 <__gethex>
 800beae:	f010 0607 	ands.w	r6, r0, #7
 800beb2:	4604      	mov	r4, r0
 800beb4:	d005      	beq.n	800bec2 <_strtod_l+0x82>
 800beb6:	2e06      	cmp	r6, #6
 800beb8:	d129      	bne.n	800bf0e <_strtod_l+0xce>
 800beba:	2300      	movs	r3, #0
 800bebc:	3501      	adds	r5, #1
 800bebe:	951b      	str	r5, [sp, #108]	; 0x6c
 800bec0:	930c      	str	r3, [sp, #48]	; 0x30
 800bec2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f040 8596 	bne.w	800c9f6 <_strtod_l+0xbb6>
 800beca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800becc:	b1d3      	cbz	r3, 800bf04 <_strtod_l+0xc4>
 800bece:	4642      	mov	r2, r8
 800bed0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bed4:	4610      	mov	r0, r2
 800bed6:	4619      	mov	r1, r3
 800bed8:	b021      	add	sp, #132	; 0x84
 800beda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bede:	2a20      	cmp	r2, #32
 800bee0:	d1cd      	bne.n	800be7e <_strtod_l+0x3e>
 800bee2:	3301      	adds	r3, #1
 800bee4:	931b      	str	r3, [sp, #108]	; 0x6c
 800bee6:	e7bf      	b.n	800be68 <_strtod_l+0x28>
 800bee8:	2a2d      	cmp	r2, #45	; 0x2d
 800beea:	d1c8      	bne.n	800be7e <_strtod_l+0x3e>
 800beec:	2201      	movs	r2, #1
 800beee:	920c      	str	r2, [sp, #48]	; 0x30
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	921b      	str	r2, [sp, #108]	; 0x6c
 800bef4:	785b      	ldrb	r3, [r3, #1]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1c3      	bne.n	800be82 <_strtod_l+0x42>
 800befa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800befc:	961b      	str	r6, [sp, #108]	; 0x6c
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f040 8577 	bne.w	800c9f2 <_strtod_l+0xbb2>
 800bf04:	4642      	mov	r2, r8
 800bf06:	464b      	mov	r3, r9
 800bf08:	e7e4      	b.n	800bed4 <_strtod_l+0x94>
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	e7ef      	b.n	800beee <_strtod_l+0xae>
 800bf0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bf10:	b13a      	cbz	r2, 800bf22 <_strtod_l+0xe2>
 800bf12:	2135      	movs	r1, #53	; 0x35
 800bf14:	a81e      	add	r0, sp, #120	; 0x78
 800bf16:	f001 fe13 	bl	800db40 <__copybits>
 800bf1a:	4650      	mov	r0, sl
 800bf1c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf1e:	f001 f9db 	bl	800d2d8 <_Bfree>
 800bf22:	3e01      	subs	r6, #1
 800bf24:	2e05      	cmp	r6, #5
 800bf26:	d807      	bhi.n	800bf38 <_strtod_l+0xf8>
 800bf28:	e8df f006 	tbb	[pc, r6]
 800bf2c:	1d180b0e 	.word	0x1d180b0e
 800bf30:	030e      	.short	0x030e
 800bf32:	f04f 0900 	mov.w	r9, #0
 800bf36:	46c8      	mov	r8, r9
 800bf38:	0721      	lsls	r1, r4, #28
 800bf3a:	d5c2      	bpl.n	800bec2 <_strtod_l+0x82>
 800bf3c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800bf40:	e7bf      	b.n	800bec2 <_strtod_l+0x82>
 800bf42:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800bf46:	e7f7      	b.n	800bf38 <_strtod_l+0xf8>
 800bf48:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bf4a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800bf4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bf52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bf56:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bf5a:	e7ed      	b.n	800bf38 <_strtod_l+0xf8>
 800bf5c:	f04f 0800 	mov.w	r8, #0
 800bf60:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c0dc <_strtod_l+0x29c>
 800bf64:	e7e8      	b.n	800bf38 <_strtod_l+0xf8>
 800bf66:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bf6a:	f04f 38ff 	mov.w	r8, #4294967295
 800bf6e:	e7e3      	b.n	800bf38 <_strtod_l+0xf8>
 800bf70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf72:	1c5a      	adds	r2, r3, #1
 800bf74:	921b      	str	r2, [sp, #108]	; 0x6c
 800bf76:	785b      	ldrb	r3, [r3, #1]
 800bf78:	2b30      	cmp	r3, #48	; 0x30
 800bf7a:	d0f9      	beq.n	800bf70 <_strtod_l+0x130>
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d0a0      	beq.n	800bec2 <_strtod_l+0x82>
 800bf80:	2301      	movs	r3, #1
 800bf82:	9307      	str	r3, [sp, #28]
 800bf84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf86:	220a      	movs	r2, #10
 800bf88:	9308      	str	r3, [sp, #32]
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	469b      	mov	fp, r3
 800bf8e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800bf92:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bf94:	7805      	ldrb	r5, [r0, #0]
 800bf96:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800bf9a:	b2d9      	uxtb	r1, r3
 800bf9c:	2909      	cmp	r1, #9
 800bf9e:	d926      	bls.n	800bfee <_strtod_l+0x1ae>
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	4639      	mov	r1, r7
 800bfa4:	f002 f9c8 	bl	800e338 <strncmp>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d032      	beq.n	800c012 <_strtod_l+0x1d2>
 800bfac:	2000      	movs	r0, #0
 800bfae:	462b      	mov	r3, r5
 800bfb0:	465c      	mov	r4, fp
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	9004      	str	r0, [sp, #16]
 800bfb6:	2b65      	cmp	r3, #101	; 0x65
 800bfb8:	d001      	beq.n	800bfbe <_strtod_l+0x17e>
 800bfba:	2b45      	cmp	r3, #69	; 0x45
 800bfbc:	d113      	bne.n	800bfe6 <_strtod_l+0x1a6>
 800bfbe:	b91c      	cbnz	r4, 800bfc8 <_strtod_l+0x188>
 800bfc0:	9b07      	ldr	r3, [sp, #28]
 800bfc2:	4303      	orrs	r3, r0
 800bfc4:	d099      	beq.n	800befa <_strtod_l+0xba>
 800bfc6:	2400      	movs	r4, #0
 800bfc8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bfca:	1c73      	adds	r3, r6, #1
 800bfcc:	931b      	str	r3, [sp, #108]	; 0x6c
 800bfce:	7873      	ldrb	r3, [r6, #1]
 800bfd0:	2b2b      	cmp	r3, #43	; 0x2b
 800bfd2:	d078      	beq.n	800c0c6 <_strtod_l+0x286>
 800bfd4:	2b2d      	cmp	r3, #45	; 0x2d
 800bfd6:	d07b      	beq.n	800c0d0 <_strtod_l+0x290>
 800bfd8:	2700      	movs	r7, #0
 800bfda:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bfde:	2909      	cmp	r1, #9
 800bfe0:	f240 8082 	bls.w	800c0e8 <_strtod_l+0x2a8>
 800bfe4:	961b      	str	r6, [sp, #108]	; 0x6c
 800bfe6:	2500      	movs	r5, #0
 800bfe8:	e09e      	b.n	800c128 <_strtod_l+0x2e8>
 800bfea:	2300      	movs	r3, #0
 800bfec:	e7c9      	b.n	800bf82 <_strtod_l+0x142>
 800bfee:	f1bb 0f08 	cmp.w	fp, #8
 800bff2:	bfd5      	itete	le
 800bff4:	9906      	ldrle	r1, [sp, #24]
 800bff6:	9905      	ldrgt	r1, [sp, #20]
 800bff8:	fb02 3301 	mlale	r3, r2, r1, r3
 800bffc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c000:	f100 0001 	add.w	r0, r0, #1
 800c004:	bfd4      	ite	le
 800c006:	9306      	strle	r3, [sp, #24]
 800c008:	9305      	strgt	r3, [sp, #20]
 800c00a:	f10b 0b01 	add.w	fp, fp, #1
 800c00e:	901b      	str	r0, [sp, #108]	; 0x6c
 800c010:	e7bf      	b.n	800bf92 <_strtod_l+0x152>
 800c012:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c014:	191a      	adds	r2, r3, r4
 800c016:	921b      	str	r2, [sp, #108]	; 0x6c
 800c018:	5d1b      	ldrb	r3, [r3, r4]
 800c01a:	f1bb 0f00 	cmp.w	fp, #0
 800c01e:	d036      	beq.n	800c08e <_strtod_l+0x24e>
 800c020:	465c      	mov	r4, fp
 800c022:	9004      	str	r0, [sp, #16]
 800c024:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c028:	2a09      	cmp	r2, #9
 800c02a:	d912      	bls.n	800c052 <_strtod_l+0x212>
 800c02c:	2201      	movs	r2, #1
 800c02e:	e7c2      	b.n	800bfb6 <_strtod_l+0x176>
 800c030:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c032:	3001      	adds	r0, #1
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	921b      	str	r2, [sp, #108]	; 0x6c
 800c038:	785b      	ldrb	r3, [r3, #1]
 800c03a:	2b30      	cmp	r3, #48	; 0x30
 800c03c:	d0f8      	beq.n	800c030 <_strtod_l+0x1f0>
 800c03e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c042:	2a08      	cmp	r2, #8
 800c044:	f200 84dc 	bhi.w	800ca00 <_strtod_l+0xbc0>
 800c048:	9004      	str	r0, [sp, #16]
 800c04a:	2000      	movs	r0, #0
 800c04c:	4604      	mov	r4, r0
 800c04e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c050:	9208      	str	r2, [sp, #32]
 800c052:	3b30      	subs	r3, #48	; 0x30
 800c054:	f100 0201 	add.w	r2, r0, #1
 800c058:	d013      	beq.n	800c082 <_strtod_l+0x242>
 800c05a:	9904      	ldr	r1, [sp, #16]
 800c05c:	1905      	adds	r5, r0, r4
 800c05e:	4411      	add	r1, r2
 800c060:	9104      	str	r1, [sp, #16]
 800c062:	4622      	mov	r2, r4
 800c064:	210a      	movs	r1, #10
 800c066:	42aa      	cmp	r2, r5
 800c068:	d113      	bne.n	800c092 <_strtod_l+0x252>
 800c06a:	1822      	adds	r2, r4, r0
 800c06c:	2a08      	cmp	r2, #8
 800c06e:	f104 0401 	add.w	r4, r4, #1
 800c072:	4404      	add	r4, r0
 800c074:	dc1b      	bgt.n	800c0ae <_strtod_l+0x26e>
 800c076:	220a      	movs	r2, #10
 800c078:	9906      	ldr	r1, [sp, #24]
 800c07a:	fb02 3301 	mla	r3, r2, r1, r3
 800c07e:	9306      	str	r3, [sp, #24]
 800c080:	2200      	movs	r2, #0
 800c082:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c084:	4610      	mov	r0, r2
 800c086:	1c59      	adds	r1, r3, #1
 800c088:	911b      	str	r1, [sp, #108]	; 0x6c
 800c08a:	785b      	ldrb	r3, [r3, #1]
 800c08c:	e7ca      	b.n	800c024 <_strtod_l+0x1e4>
 800c08e:	4658      	mov	r0, fp
 800c090:	e7d3      	b.n	800c03a <_strtod_l+0x1fa>
 800c092:	2a08      	cmp	r2, #8
 800c094:	dc04      	bgt.n	800c0a0 <_strtod_l+0x260>
 800c096:	9f06      	ldr	r7, [sp, #24]
 800c098:	434f      	muls	r7, r1
 800c09a:	9706      	str	r7, [sp, #24]
 800c09c:	3201      	adds	r2, #1
 800c09e:	e7e2      	b.n	800c066 <_strtod_l+0x226>
 800c0a0:	1c57      	adds	r7, r2, #1
 800c0a2:	2f10      	cmp	r7, #16
 800c0a4:	bfde      	ittt	le
 800c0a6:	9f05      	ldrle	r7, [sp, #20]
 800c0a8:	434f      	mulle	r7, r1
 800c0aa:	9705      	strle	r7, [sp, #20]
 800c0ac:	e7f6      	b.n	800c09c <_strtod_l+0x25c>
 800c0ae:	2c10      	cmp	r4, #16
 800c0b0:	bfdf      	itttt	le
 800c0b2:	220a      	movle	r2, #10
 800c0b4:	9905      	ldrle	r1, [sp, #20]
 800c0b6:	fb02 3301 	mlale	r3, r2, r1, r3
 800c0ba:	9305      	strle	r3, [sp, #20]
 800c0bc:	e7e0      	b.n	800c080 <_strtod_l+0x240>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	9304      	str	r3, [sp, #16]
 800c0c4:	e77c      	b.n	800bfc0 <_strtod_l+0x180>
 800c0c6:	2700      	movs	r7, #0
 800c0c8:	1cb3      	adds	r3, r6, #2
 800c0ca:	931b      	str	r3, [sp, #108]	; 0x6c
 800c0cc:	78b3      	ldrb	r3, [r6, #2]
 800c0ce:	e784      	b.n	800bfda <_strtod_l+0x19a>
 800c0d0:	2701      	movs	r7, #1
 800c0d2:	e7f9      	b.n	800c0c8 <_strtod_l+0x288>
 800c0d4:	0800ee28 	.word	0x0800ee28
 800c0d8:	0800eca8 	.word	0x0800eca8
 800c0dc:	7ff00000 	.word	0x7ff00000
 800c0e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0e2:	1c59      	adds	r1, r3, #1
 800c0e4:	911b      	str	r1, [sp, #108]	; 0x6c
 800c0e6:	785b      	ldrb	r3, [r3, #1]
 800c0e8:	2b30      	cmp	r3, #48	; 0x30
 800c0ea:	d0f9      	beq.n	800c0e0 <_strtod_l+0x2a0>
 800c0ec:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c0f0:	2908      	cmp	r1, #8
 800c0f2:	f63f af78 	bhi.w	800bfe6 <_strtod_l+0x1a6>
 800c0f6:	f04f 0e0a 	mov.w	lr, #10
 800c0fa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800c0fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c100:	9309      	str	r3, [sp, #36]	; 0x24
 800c102:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c104:	1c59      	adds	r1, r3, #1
 800c106:	911b      	str	r1, [sp, #108]	; 0x6c
 800c108:	785b      	ldrb	r3, [r3, #1]
 800c10a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800c10e:	2d09      	cmp	r5, #9
 800c110:	d935      	bls.n	800c17e <_strtod_l+0x33e>
 800c112:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c114:	1b49      	subs	r1, r1, r5
 800c116:	2908      	cmp	r1, #8
 800c118:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c11c:	dc02      	bgt.n	800c124 <_strtod_l+0x2e4>
 800c11e:	4565      	cmp	r5, ip
 800c120:	bfa8      	it	ge
 800c122:	4665      	movge	r5, ip
 800c124:	b107      	cbz	r7, 800c128 <_strtod_l+0x2e8>
 800c126:	426d      	negs	r5, r5
 800c128:	2c00      	cmp	r4, #0
 800c12a:	d14c      	bne.n	800c1c6 <_strtod_l+0x386>
 800c12c:	9907      	ldr	r1, [sp, #28]
 800c12e:	4301      	orrs	r1, r0
 800c130:	f47f aec7 	bne.w	800bec2 <_strtod_l+0x82>
 800c134:	2a00      	cmp	r2, #0
 800c136:	f47f aee0 	bne.w	800befa <_strtod_l+0xba>
 800c13a:	2b69      	cmp	r3, #105	; 0x69
 800c13c:	d026      	beq.n	800c18c <_strtod_l+0x34c>
 800c13e:	dc23      	bgt.n	800c188 <_strtod_l+0x348>
 800c140:	2b49      	cmp	r3, #73	; 0x49
 800c142:	d023      	beq.n	800c18c <_strtod_l+0x34c>
 800c144:	2b4e      	cmp	r3, #78	; 0x4e
 800c146:	f47f aed8 	bne.w	800befa <_strtod_l+0xba>
 800c14a:	499c      	ldr	r1, [pc, #624]	; (800c3bc <_strtod_l+0x57c>)
 800c14c:	a81b      	add	r0, sp, #108	; 0x6c
 800c14e:	f000 ffb9 	bl	800d0c4 <__match>
 800c152:	2800      	cmp	r0, #0
 800c154:	f43f aed1 	beq.w	800befa <_strtod_l+0xba>
 800c158:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	2b28      	cmp	r3, #40	; 0x28
 800c15e:	d12c      	bne.n	800c1ba <_strtod_l+0x37a>
 800c160:	4997      	ldr	r1, [pc, #604]	; (800c3c0 <_strtod_l+0x580>)
 800c162:	aa1e      	add	r2, sp, #120	; 0x78
 800c164:	a81b      	add	r0, sp, #108	; 0x6c
 800c166:	f000 ffc1 	bl	800d0ec <__hexnan>
 800c16a:	2805      	cmp	r0, #5
 800c16c:	d125      	bne.n	800c1ba <_strtod_l+0x37a>
 800c16e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c170:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c174:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c178:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c17c:	e6a1      	b.n	800bec2 <_strtod_l+0x82>
 800c17e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800c182:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c186:	e7bc      	b.n	800c102 <_strtod_l+0x2c2>
 800c188:	2b6e      	cmp	r3, #110	; 0x6e
 800c18a:	e7dc      	b.n	800c146 <_strtod_l+0x306>
 800c18c:	498d      	ldr	r1, [pc, #564]	; (800c3c4 <_strtod_l+0x584>)
 800c18e:	a81b      	add	r0, sp, #108	; 0x6c
 800c190:	f000 ff98 	bl	800d0c4 <__match>
 800c194:	2800      	cmp	r0, #0
 800c196:	f43f aeb0 	beq.w	800befa <_strtod_l+0xba>
 800c19a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c19c:	498a      	ldr	r1, [pc, #552]	; (800c3c8 <_strtod_l+0x588>)
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	a81b      	add	r0, sp, #108	; 0x6c
 800c1a2:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1a4:	f000 ff8e 	bl	800d0c4 <__match>
 800c1a8:	b910      	cbnz	r0, 800c1b0 <_strtod_l+0x370>
 800c1aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1b0:	f04f 0800 	mov.w	r8, #0
 800c1b4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800c3d8 <_strtod_l+0x598>
 800c1b8:	e683      	b.n	800bec2 <_strtod_l+0x82>
 800c1ba:	4884      	ldr	r0, [pc, #528]	; (800c3cc <_strtod_l+0x58c>)
 800c1bc:	f002 f8a6 	bl	800e30c <nan>
 800c1c0:	4680      	mov	r8, r0
 800c1c2:	4689      	mov	r9, r1
 800c1c4:	e67d      	b.n	800bec2 <_strtod_l+0x82>
 800c1c6:	9b04      	ldr	r3, [sp, #16]
 800c1c8:	f1bb 0f00 	cmp.w	fp, #0
 800c1cc:	bf08      	it	eq
 800c1ce:	46a3      	moveq	fp, r4
 800c1d0:	1aeb      	subs	r3, r5, r3
 800c1d2:	2c10      	cmp	r4, #16
 800c1d4:	9806      	ldr	r0, [sp, #24]
 800c1d6:	4626      	mov	r6, r4
 800c1d8:	9307      	str	r3, [sp, #28]
 800c1da:	bfa8      	it	ge
 800c1dc:	2610      	movge	r6, #16
 800c1de:	f7f4 f923 	bl	8000428 <__aeabi_ui2d>
 800c1e2:	2c09      	cmp	r4, #9
 800c1e4:	4680      	mov	r8, r0
 800c1e6:	4689      	mov	r9, r1
 800c1e8:	dd13      	ble.n	800c212 <_strtod_l+0x3d2>
 800c1ea:	4b79      	ldr	r3, [pc, #484]	; (800c3d0 <_strtod_l+0x590>)
 800c1ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c1f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c1f4:	f7f4 f992 	bl	800051c <__aeabi_dmul>
 800c1f8:	4680      	mov	r8, r0
 800c1fa:	9805      	ldr	r0, [sp, #20]
 800c1fc:	4689      	mov	r9, r1
 800c1fe:	f7f4 f913 	bl	8000428 <__aeabi_ui2d>
 800c202:	4602      	mov	r2, r0
 800c204:	460b      	mov	r3, r1
 800c206:	4640      	mov	r0, r8
 800c208:	4649      	mov	r1, r9
 800c20a:	f7f3 ffd1 	bl	80001b0 <__adddf3>
 800c20e:	4680      	mov	r8, r0
 800c210:	4689      	mov	r9, r1
 800c212:	2c0f      	cmp	r4, #15
 800c214:	dc36      	bgt.n	800c284 <_strtod_l+0x444>
 800c216:	9b07      	ldr	r3, [sp, #28]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f43f ae52 	beq.w	800bec2 <_strtod_l+0x82>
 800c21e:	dd22      	ble.n	800c266 <_strtod_l+0x426>
 800c220:	2b16      	cmp	r3, #22
 800c222:	dc09      	bgt.n	800c238 <_strtod_l+0x3f8>
 800c224:	4c6a      	ldr	r4, [pc, #424]	; (800c3d0 <_strtod_l+0x590>)
 800c226:	4642      	mov	r2, r8
 800c228:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800c22c:	464b      	mov	r3, r9
 800c22e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c232:	f7f4 f973 	bl	800051c <__aeabi_dmul>
 800c236:	e7c3      	b.n	800c1c0 <_strtod_l+0x380>
 800c238:	9a07      	ldr	r2, [sp, #28]
 800c23a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c23e:	4293      	cmp	r3, r2
 800c240:	db20      	blt.n	800c284 <_strtod_l+0x444>
 800c242:	4d63      	ldr	r5, [pc, #396]	; (800c3d0 <_strtod_l+0x590>)
 800c244:	f1c4 040f 	rsb	r4, r4, #15
 800c248:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c24c:	4642      	mov	r2, r8
 800c24e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c252:	464b      	mov	r3, r9
 800c254:	f7f4 f962 	bl	800051c <__aeabi_dmul>
 800c258:	9b07      	ldr	r3, [sp, #28]
 800c25a:	1b1c      	subs	r4, r3, r4
 800c25c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c260:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c264:	e7e5      	b.n	800c232 <_strtod_l+0x3f2>
 800c266:	9b07      	ldr	r3, [sp, #28]
 800c268:	3316      	adds	r3, #22
 800c26a:	db0b      	blt.n	800c284 <_strtod_l+0x444>
 800c26c:	9b04      	ldr	r3, [sp, #16]
 800c26e:	4a58      	ldr	r2, [pc, #352]	; (800c3d0 <_strtod_l+0x590>)
 800c270:	1b5d      	subs	r5, r3, r5
 800c272:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c276:	4640      	mov	r0, r8
 800c278:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c27c:	4649      	mov	r1, r9
 800c27e:	f7f4 fa77 	bl	8000770 <__aeabi_ddiv>
 800c282:	e79d      	b.n	800c1c0 <_strtod_l+0x380>
 800c284:	9b07      	ldr	r3, [sp, #28]
 800c286:	1ba6      	subs	r6, r4, r6
 800c288:	441e      	add	r6, r3
 800c28a:	2e00      	cmp	r6, #0
 800c28c:	dd71      	ble.n	800c372 <_strtod_l+0x532>
 800c28e:	f016 030f 	ands.w	r3, r6, #15
 800c292:	d00a      	beq.n	800c2aa <_strtod_l+0x46a>
 800c294:	494e      	ldr	r1, [pc, #312]	; (800c3d0 <_strtod_l+0x590>)
 800c296:	4642      	mov	r2, r8
 800c298:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c29c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2a0:	464b      	mov	r3, r9
 800c2a2:	f7f4 f93b 	bl	800051c <__aeabi_dmul>
 800c2a6:	4680      	mov	r8, r0
 800c2a8:	4689      	mov	r9, r1
 800c2aa:	f036 060f 	bics.w	r6, r6, #15
 800c2ae:	d050      	beq.n	800c352 <_strtod_l+0x512>
 800c2b0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800c2b4:	dd27      	ble.n	800c306 <_strtod_l+0x4c6>
 800c2b6:	f04f 0b00 	mov.w	fp, #0
 800c2ba:	f8cd b010 	str.w	fp, [sp, #16]
 800c2be:	f8cd b020 	str.w	fp, [sp, #32]
 800c2c2:	f8cd b018 	str.w	fp, [sp, #24]
 800c2c6:	2322      	movs	r3, #34	; 0x22
 800c2c8:	f04f 0800 	mov.w	r8, #0
 800c2cc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c3d8 <_strtod_l+0x598>
 800c2d0:	f8ca 3000 	str.w	r3, [sl]
 800c2d4:	9b08      	ldr	r3, [sp, #32]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f43f adf3 	beq.w	800bec2 <_strtod_l+0x82>
 800c2dc:	4650      	mov	r0, sl
 800c2de:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c2e0:	f000 fffa 	bl	800d2d8 <_Bfree>
 800c2e4:	4650      	mov	r0, sl
 800c2e6:	9906      	ldr	r1, [sp, #24]
 800c2e8:	f000 fff6 	bl	800d2d8 <_Bfree>
 800c2ec:	4650      	mov	r0, sl
 800c2ee:	9904      	ldr	r1, [sp, #16]
 800c2f0:	f000 fff2 	bl	800d2d8 <_Bfree>
 800c2f4:	4650      	mov	r0, sl
 800c2f6:	9908      	ldr	r1, [sp, #32]
 800c2f8:	f000 ffee 	bl	800d2d8 <_Bfree>
 800c2fc:	4659      	mov	r1, fp
 800c2fe:	4650      	mov	r0, sl
 800c300:	f000 ffea 	bl	800d2d8 <_Bfree>
 800c304:	e5dd      	b.n	800bec2 <_strtod_l+0x82>
 800c306:	2300      	movs	r3, #0
 800c308:	4640      	mov	r0, r8
 800c30a:	4649      	mov	r1, r9
 800c30c:	461f      	mov	r7, r3
 800c30e:	1136      	asrs	r6, r6, #4
 800c310:	2e01      	cmp	r6, #1
 800c312:	dc21      	bgt.n	800c358 <_strtod_l+0x518>
 800c314:	b10b      	cbz	r3, 800c31a <_strtod_l+0x4da>
 800c316:	4680      	mov	r8, r0
 800c318:	4689      	mov	r9, r1
 800c31a:	4b2e      	ldr	r3, [pc, #184]	; (800c3d4 <_strtod_l+0x594>)
 800c31c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c320:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c324:	4642      	mov	r2, r8
 800c326:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c32a:	464b      	mov	r3, r9
 800c32c:	f7f4 f8f6 	bl	800051c <__aeabi_dmul>
 800c330:	4b29      	ldr	r3, [pc, #164]	; (800c3d8 <_strtod_l+0x598>)
 800c332:	460a      	mov	r2, r1
 800c334:	400b      	ands	r3, r1
 800c336:	4929      	ldr	r1, [pc, #164]	; (800c3dc <_strtod_l+0x59c>)
 800c338:	4680      	mov	r8, r0
 800c33a:	428b      	cmp	r3, r1
 800c33c:	d8bb      	bhi.n	800c2b6 <_strtod_l+0x476>
 800c33e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c342:	428b      	cmp	r3, r1
 800c344:	bf86      	itte	hi
 800c346:	f04f 38ff 	movhi.w	r8, #4294967295
 800c34a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800c3e0 <_strtod_l+0x5a0>
 800c34e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c352:	2300      	movs	r3, #0
 800c354:	9305      	str	r3, [sp, #20]
 800c356:	e07e      	b.n	800c456 <_strtod_l+0x616>
 800c358:	07f2      	lsls	r2, r6, #31
 800c35a:	d507      	bpl.n	800c36c <_strtod_l+0x52c>
 800c35c:	4b1d      	ldr	r3, [pc, #116]	; (800c3d4 <_strtod_l+0x594>)
 800c35e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c366:	f7f4 f8d9 	bl	800051c <__aeabi_dmul>
 800c36a:	2301      	movs	r3, #1
 800c36c:	3701      	adds	r7, #1
 800c36e:	1076      	asrs	r6, r6, #1
 800c370:	e7ce      	b.n	800c310 <_strtod_l+0x4d0>
 800c372:	d0ee      	beq.n	800c352 <_strtod_l+0x512>
 800c374:	4276      	negs	r6, r6
 800c376:	f016 020f 	ands.w	r2, r6, #15
 800c37a:	d00a      	beq.n	800c392 <_strtod_l+0x552>
 800c37c:	4b14      	ldr	r3, [pc, #80]	; (800c3d0 <_strtod_l+0x590>)
 800c37e:	4640      	mov	r0, r8
 800c380:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c384:	4649      	mov	r1, r9
 800c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38a:	f7f4 f9f1 	bl	8000770 <__aeabi_ddiv>
 800c38e:	4680      	mov	r8, r0
 800c390:	4689      	mov	r9, r1
 800c392:	1136      	asrs	r6, r6, #4
 800c394:	d0dd      	beq.n	800c352 <_strtod_l+0x512>
 800c396:	2e1f      	cmp	r6, #31
 800c398:	dd24      	ble.n	800c3e4 <_strtod_l+0x5a4>
 800c39a:	f04f 0b00 	mov.w	fp, #0
 800c39e:	f8cd b010 	str.w	fp, [sp, #16]
 800c3a2:	f8cd b020 	str.w	fp, [sp, #32]
 800c3a6:	f8cd b018 	str.w	fp, [sp, #24]
 800c3aa:	2322      	movs	r3, #34	; 0x22
 800c3ac:	f04f 0800 	mov.w	r8, #0
 800c3b0:	f04f 0900 	mov.w	r9, #0
 800c3b4:	f8ca 3000 	str.w	r3, [sl]
 800c3b8:	e78c      	b.n	800c2d4 <_strtod_l+0x494>
 800c3ba:	bf00      	nop
 800c3bc:	0800eca5 	.word	0x0800eca5
 800c3c0:	0800ecbc 	.word	0x0800ecbc
 800c3c4:	0800ec9c 	.word	0x0800ec9c
 800c3c8:	0800ec9f 	.word	0x0800ec9f
 800c3cc:	0800edab 	.word	0x0800edab
 800c3d0:	0800eec8 	.word	0x0800eec8
 800c3d4:	0800eea0 	.word	0x0800eea0
 800c3d8:	7ff00000 	.word	0x7ff00000
 800c3dc:	7ca00000 	.word	0x7ca00000
 800c3e0:	7fefffff 	.word	0x7fefffff
 800c3e4:	f016 0310 	ands.w	r3, r6, #16
 800c3e8:	bf18      	it	ne
 800c3ea:	236a      	movne	r3, #106	; 0x6a
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	9305      	str	r3, [sp, #20]
 800c3f0:	4649      	mov	r1, r9
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	4fb2      	ldr	r7, [pc, #712]	; (800c6c0 <_strtod_l+0x880>)
 800c3f6:	07f2      	lsls	r2, r6, #31
 800c3f8:	d504      	bpl.n	800c404 <_strtod_l+0x5c4>
 800c3fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3fe:	f7f4 f88d 	bl	800051c <__aeabi_dmul>
 800c402:	2301      	movs	r3, #1
 800c404:	1076      	asrs	r6, r6, #1
 800c406:	f107 0708 	add.w	r7, r7, #8
 800c40a:	d1f4      	bne.n	800c3f6 <_strtod_l+0x5b6>
 800c40c:	b10b      	cbz	r3, 800c412 <_strtod_l+0x5d2>
 800c40e:	4680      	mov	r8, r0
 800c410:	4689      	mov	r9, r1
 800c412:	9b05      	ldr	r3, [sp, #20]
 800c414:	b1bb      	cbz	r3, 800c446 <_strtod_l+0x606>
 800c416:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800c41a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c41e:	2b00      	cmp	r3, #0
 800c420:	4649      	mov	r1, r9
 800c422:	dd10      	ble.n	800c446 <_strtod_l+0x606>
 800c424:	2b1f      	cmp	r3, #31
 800c426:	f340 812b 	ble.w	800c680 <_strtod_l+0x840>
 800c42a:	2b34      	cmp	r3, #52	; 0x34
 800c42c:	bfd8      	it	le
 800c42e:	f04f 32ff 	movle.w	r2, #4294967295
 800c432:	f04f 0800 	mov.w	r8, #0
 800c436:	bfcf      	iteee	gt
 800c438:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c43c:	3b20      	suble	r3, #32
 800c43e:	fa02 f303 	lslle.w	r3, r2, r3
 800c442:	ea03 0901 	andle.w	r9, r3, r1
 800c446:	2200      	movs	r2, #0
 800c448:	2300      	movs	r3, #0
 800c44a:	4640      	mov	r0, r8
 800c44c:	4649      	mov	r1, r9
 800c44e:	f7f4 facd 	bl	80009ec <__aeabi_dcmpeq>
 800c452:	2800      	cmp	r0, #0
 800c454:	d1a1      	bne.n	800c39a <_strtod_l+0x55a>
 800c456:	9b06      	ldr	r3, [sp, #24]
 800c458:	465a      	mov	r2, fp
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	4650      	mov	r0, sl
 800c45e:	4623      	mov	r3, r4
 800c460:	9908      	ldr	r1, [sp, #32]
 800c462:	f000 ffa5 	bl	800d3b0 <__s2b>
 800c466:	9008      	str	r0, [sp, #32]
 800c468:	2800      	cmp	r0, #0
 800c46a:	f43f af24 	beq.w	800c2b6 <_strtod_l+0x476>
 800c46e:	9b04      	ldr	r3, [sp, #16]
 800c470:	f04f 0b00 	mov.w	fp, #0
 800c474:	1b5d      	subs	r5, r3, r5
 800c476:	9b07      	ldr	r3, [sp, #28]
 800c478:	f8cd b010 	str.w	fp, [sp, #16]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	bfb4      	ite	lt
 800c480:	462b      	movlt	r3, r5
 800c482:	2300      	movge	r3, #0
 800c484:	930e      	str	r3, [sp, #56]	; 0x38
 800c486:	9b07      	ldr	r3, [sp, #28]
 800c488:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c48c:	9316      	str	r3, [sp, #88]	; 0x58
 800c48e:	9b08      	ldr	r3, [sp, #32]
 800c490:	4650      	mov	r0, sl
 800c492:	6859      	ldr	r1, [r3, #4]
 800c494:	f000 fee0 	bl	800d258 <_Balloc>
 800c498:	9006      	str	r0, [sp, #24]
 800c49a:	2800      	cmp	r0, #0
 800c49c:	f43f af13 	beq.w	800c2c6 <_strtod_l+0x486>
 800c4a0:	9b08      	ldr	r3, [sp, #32]
 800c4a2:	300c      	adds	r0, #12
 800c4a4:	691a      	ldr	r2, [r3, #16]
 800c4a6:	f103 010c 	add.w	r1, r3, #12
 800c4aa:	3202      	adds	r2, #2
 800c4ac:	0092      	lsls	r2, r2, #2
 800c4ae:	f7ff fc87 	bl	800bdc0 <memcpy>
 800c4b2:	ab1e      	add	r3, sp, #120	; 0x78
 800c4b4:	9301      	str	r3, [sp, #4]
 800c4b6:	ab1d      	add	r3, sp, #116	; 0x74
 800c4b8:	9300      	str	r3, [sp, #0]
 800c4ba:	4642      	mov	r2, r8
 800c4bc:	464b      	mov	r3, r9
 800c4be:	4650      	mov	r0, sl
 800c4c0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800c4c4:	f001 fab2 	bl	800da2c <__d2b>
 800c4c8:	901c      	str	r0, [sp, #112]	; 0x70
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	f43f aefb 	beq.w	800c2c6 <_strtod_l+0x486>
 800c4d0:	2101      	movs	r1, #1
 800c4d2:	4650      	mov	r0, sl
 800c4d4:	f001 f804 	bl	800d4e0 <__i2b>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	9004      	str	r0, [sp, #16]
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	f43f aef2 	beq.w	800c2c6 <_strtod_l+0x486>
 800c4e2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c4e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c4e6:	2d00      	cmp	r5, #0
 800c4e8:	bfab      	itete	ge
 800c4ea:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c4ec:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c4ee:	18ee      	addge	r6, r5, r3
 800c4f0:	1b5c      	sublt	r4, r3, r5
 800c4f2:	9b05      	ldr	r3, [sp, #20]
 800c4f4:	bfa8      	it	ge
 800c4f6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800c4f8:	eba5 0503 	sub.w	r5, r5, r3
 800c4fc:	4415      	add	r5, r2
 800c4fe:	4b71      	ldr	r3, [pc, #452]	; (800c6c4 <_strtod_l+0x884>)
 800c500:	f105 35ff 	add.w	r5, r5, #4294967295
 800c504:	bfb8      	it	lt
 800c506:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800c508:	429d      	cmp	r5, r3
 800c50a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c50e:	f280 80c9 	bge.w	800c6a4 <_strtod_l+0x864>
 800c512:	1b5b      	subs	r3, r3, r5
 800c514:	2b1f      	cmp	r3, #31
 800c516:	f04f 0701 	mov.w	r7, #1
 800c51a:	eba2 0203 	sub.w	r2, r2, r3
 800c51e:	f300 80b6 	bgt.w	800c68e <_strtod_l+0x84e>
 800c522:	2500      	movs	r5, #0
 800c524:	fa07 f303 	lsl.w	r3, r7, r3
 800c528:	930f      	str	r3, [sp, #60]	; 0x3c
 800c52a:	18b7      	adds	r7, r6, r2
 800c52c:	9b05      	ldr	r3, [sp, #20]
 800c52e:	42be      	cmp	r6, r7
 800c530:	4414      	add	r4, r2
 800c532:	441c      	add	r4, r3
 800c534:	4633      	mov	r3, r6
 800c536:	bfa8      	it	ge
 800c538:	463b      	movge	r3, r7
 800c53a:	42a3      	cmp	r3, r4
 800c53c:	bfa8      	it	ge
 800c53e:	4623      	movge	r3, r4
 800c540:	2b00      	cmp	r3, #0
 800c542:	bfc2      	ittt	gt
 800c544:	1aff      	subgt	r7, r7, r3
 800c546:	1ae4      	subgt	r4, r4, r3
 800c548:	1af6      	subgt	r6, r6, r3
 800c54a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	dd17      	ble.n	800c580 <_strtod_l+0x740>
 800c550:	461a      	mov	r2, r3
 800c552:	4650      	mov	r0, sl
 800c554:	9904      	ldr	r1, [sp, #16]
 800c556:	f001 f87d 	bl	800d654 <__pow5mult>
 800c55a:	9004      	str	r0, [sp, #16]
 800c55c:	2800      	cmp	r0, #0
 800c55e:	f43f aeb2 	beq.w	800c2c6 <_strtod_l+0x486>
 800c562:	4601      	mov	r1, r0
 800c564:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c566:	4650      	mov	r0, sl
 800c568:	f000 ffd0 	bl	800d50c <__multiply>
 800c56c:	9009      	str	r0, [sp, #36]	; 0x24
 800c56e:	2800      	cmp	r0, #0
 800c570:	f43f aea9 	beq.w	800c2c6 <_strtod_l+0x486>
 800c574:	4650      	mov	r0, sl
 800c576:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c578:	f000 feae 	bl	800d2d8 <_Bfree>
 800c57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c57e:	931c      	str	r3, [sp, #112]	; 0x70
 800c580:	2f00      	cmp	r7, #0
 800c582:	f300 8093 	bgt.w	800c6ac <_strtod_l+0x86c>
 800c586:	9b07      	ldr	r3, [sp, #28]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	dd08      	ble.n	800c59e <_strtod_l+0x75e>
 800c58c:	4650      	mov	r0, sl
 800c58e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c590:	9906      	ldr	r1, [sp, #24]
 800c592:	f001 f85f 	bl	800d654 <__pow5mult>
 800c596:	9006      	str	r0, [sp, #24]
 800c598:	2800      	cmp	r0, #0
 800c59a:	f43f ae94 	beq.w	800c2c6 <_strtod_l+0x486>
 800c59e:	2c00      	cmp	r4, #0
 800c5a0:	dd08      	ble.n	800c5b4 <_strtod_l+0x774>
 800c5a2:	4622      	mov	r2, r4
 800c5a4:	4650      	mov	r0, sl
 800c5a6:	9906      	ldr	r1, [sp, #24]
 800c5a8:	f001 f8ae 	bl	800d708 <__lshift>
 800c5ac:	9006      	str	r0, [sp, #24]
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	f43f ae89 	beq.w	800c2c6 <_strtod_l+0x486>
 800c5b4:	2e00      	cmp	r6, #0
 800c5b6:	dd08      	ble.n	800c5ca <_strtod_l+0x78a>
 800c5b8:	4632      	mov	r2, r6
 800c5ba:	4650      	mov	r0, sl
 800c5bc:	9904      	ldr	r1, [sp, #16]
 800c5be:	f001 f8a3 	bl	800d708 <__lshift>
 800c5c2:	9004      	str	r0, [sp, #16]
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	f43f ae7e 	beq.w	800c2c6 <_strtod_l+0x486>
 800c5ca:	4650      	mov	r0, sl
 800c5cc:	9a06      	ldr	r2, [sp, #24]
 800c5ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c5d0:	f001 f922 	bl	800d818 <__mdiff>
 800c5d4:	4683      	mov	fp, r0
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	f43f ae75 	beq.w	800c2c6 <_strtod_l+0x486>
 800c5dc:	2400      	movs	r4, #0
 800c5de:	68c3      	ldr	r3, [r0, #12]
 800c5e0:	9904      	ldr	r1, [sp, #16]
 800c5e2:	60c4      	str	r4, [r0, #12]
 800c5e4:	930d      	str	r3, [sp, #52]	; 0x34
 800c5e6:	f001 f8fb 	bl	800d7e0 <__mcmp>
 800c5ea:	42a0      	cmp	r0, r4
 800c5ec:	da70      	bge.n	800c6d0 <_strtod_l+0x890>
 800c5ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5f0:	ea53 0308 	orrs.w	r3, r3, r8
 800c5f4:	f040 8096 	bne.w	800c724 <_strtod_l+0x8e4>
 800c5f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f040 8091 	bne.w	800c724 <_strtod_l+0x8e4>
 800c602:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c606:	0d1b      	lsrs	r3, r3, #20
 800c608:	051b      	lsls	r3, r3, #20
 800c60a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c60e:	f240 8089 	bls.w	800c724 <_strtod_l+0x8e4>
 800c612:	f8db 3014 	ldr.w	r3, [fp, #20]
 800c616:	b923      	cbnz	r3, 800c622 <_strtod_l+0x7e2>
 800c618:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	f340 8081 	ble.w	800c724 <_strtod_l+0x8e4>
 800c622:	4659      	mov	r1, fp
 800c624:	2201      	movs	r2, #1
 800c626:	4650      	mov	r0, sl
 800c628:	f001 f86e 	bl	800d708 <__lshift>
 800c62c:	9904      	ldr	r1, [sp, #16]
 800c62e:	4683      	mov	fp, r0
 800c630:	f001 f8d6 	bl	800d7e0 <__mcmp>
 800c634:	2800      	cmp	r0, #0
 800c636:	dd75      	ble.n	800c724 <_strtod_l+0x8e4>
 800c638:	9905      	ldr	r1, [sp, #20]
 800c63a:	464b      	mov	r3, r9
 800c63c:	4a22      	ldr	r2, [pc, #136]	; (800c6c8 <_strtod_l+0x888>)
 800c63e:	2900      	cmp	r1, #0
 800c640:	f000 8091 	beq.w	800c766 <_strtod_l+0x926>
 800c644:	ea02 0109 	and.w	r1, r2, r9
 800c648:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c64c:	f300 808b 	bgt.w	800c766 <_strtod_l+0x926>
 800c650:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c654:	f77f aea9 	ble.w	800c3aa <_strtod_l+0x56a>
 800c658:	2300      	movs	r3, #0
 800c65a:	4a1c      	ldr	r2, [pc, #112]	; (800c6cc <_strtod_l+0x88c>)
 800c65c:	4640      	mov	r0, r8
 800c65e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c662:	4649      	mov	r1, r9
 800c664:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c668:	f7f3 ff58 	bl	800051c <__aeabi_dmul>
 800c66c:	460b      	mov	r3, r1
 800c66e:	4303      	orrs	r3, r0
 800c670:	bf08      	it	eq
 800c672:	2322      	moveq	r3, #34	; 0x22
 800c674:	4680      	mov	r8, r0
 800c676:	4689      	mov	r9, r1
 800c678:	bf08      	it	eq
 800c67a:	f8ca 3000 	streq.w	r3, [sl]
 800c67e:	e62d      	b.n	800c2dc <_strtod_l+0x49c>
 800c680:	f04f 32ff 	mov.w	r2, #4294967295
 800c684:	fa02 f303 	lsl.w	r3, r2, r3
 800c688:	ea03 0808 	and.w	r8, r3, r8
 800c68c:	e6db      	b.n	800c446 <_strtod_l+0x606>
 800c68e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800c692:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800c696:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800c69a:	35e2      	adds	r5, #226	; 0xe2
 800c69c:	fa07 f505 	lsl.w	r5, r7, r5
 800c6a0:	970f      	str	r7, [sp, #60]	; 0x3c
 800c6a2:	e742      	b.n	800c52a <_strtod_l+0x6ea>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	2500      	movs	r5, #0
 800c6a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6aa:	e73e      	b.n	800c52a <_strtod_l+0x6ea>
 800c6ac:	463a      	mov	r2, r7
 800c6ae:	4650      	mov	r0, sl
 800c6b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6b2:	f001 f829 	bl	800d708 <__lshift>
 800c6b6:	901c      	str	r0, [sp, #112]	; 0x70
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	f47f af64 	bne.w	800c586 <_strtod_l+0x746>
 800c6be:	e602      	b.n	800c2c6 <_strtod_l+0x486>
 800c6c0:	0800ecd0 	.word	0x0800ecd0
 800c6c4:	fffffc02 	.word	0xfffffc02
 800c6c8:	7ff00000 	.word	0x7ff00000
 800c6cc:	39500000 	.word	0x39500000
 800c6d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c6d4:	d166      	bne.n	800c7a4 <_strtod_l+0x964>
 800c6d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6dc:	b35a      	cbz	r2, 800c736 <_strtod_l+0x8f6>
 800c6de:	4a9c      	ldr	r2, [pc, #624]	; (800c950 <_strtod_l+0xb10>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d12c      	bne.n	800c73e <_strtod_l+0x8fe>
 800c6e4:	9b05      	ldr	r3, [sp, #20]
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	b303      	cbz	r3, 800c72c <_strtod_l+0x8ec>
 800c6ea:	464b      	mov	r3, r9
 800c6ec:	4a99      	ldr	r2, [pc, #612]	; (800c954 <_strtod_l+0xb14>)
 800c6ee:	f04f 31ff 	mov.w	r1, #4294967295
 800c6f2:	401a      	ands	r2, r3
 800c6f4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c6f8:	d81b      	bhi.n	800c732 <_strtod_l+0x8f2>
 800c6fa:	0d12      	lsrs	r2, r2, #20
 800c6fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c700:	fa01 f303 	lsl.w	r3, r1, r3
 800c704:	4298      	cmp	r0, r3
 800c706:	d11a      	bne.n	800c73e <_strtod_l+0x8fe>
 800c708:	4b93      	ldr	r3, [pc, #588]	; (800c958 <_strtod_l+0xb18>)
 800c70a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d102      	bne.n	800c716 <_strtod_l+0x8d6>
 800c710:	3001      	adds	r0, #1
 800c712:	f43f add8 	beq.w	800c2c6 <_strtod_l+0x486>
 800c716:	f04f 0800 	mov.w	r8, #0
 800c71a:	4b8e      	ldr	r3, [pc, #568]	; (800c954 <_strtod_l+0xb14>)
 800c71c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c71e:	401a      	ands	r2, r3
 800c720:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800c724:	9b05      	ldr	r3, [sp, #20]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d196      	bne.n	800c658 <_strtod_l+0x818>
 800c72a:	e5d7      	b.n	800c2dc <_strtod_l+0x49c>
 800c72c:	f04f 33ff 	mov.w	r3, #4294967295
 800c730:	e7e8      	b.n	800c704 <_strtod_l+0x8c4>
 800c732:	460b      	mov	r3, r1
 800c734:	e7e6      	b.n	800c704 <_strtod_l+0x8c4>
 800c736:	ea53 0308 	orrs.w	r3, r3, r8
 800c73a:	f43f af7d 	beq.w	800c638 <_strtod_l+0x7f8>
 800c73e:	b1e5      	cbz	r5, 800c77a <_strtod_l+0x93a>
 800c740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c742:	421d      	tst	r5, r3
 800c744:	d0ee      	beq.n	800c724 <_strtod_l+0x8e4>
 800c746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c748:	4640      	mov	r0, r8
 800c74a:	4649      	mov	r1, r9
 800c74c:	9a05      	ldr	r2, [sp, #20]
 800c74e:	b1c3      	cbz	r3, 800c782 <_strtod_l+0x942>
 800c750:	f7ff fb54 	bl	800bdfc <sulp>
 800c754:	4602      	mov	r2, r0
 800c756:	460b      	mov	r3, r1
 800c758:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c75c:	f7f3 fd28 	bl	80001b0 <__adddf3>
 800c760:	4680      	mov	r8, r0
 800c762:	4689      	mov	r9, r1
 800c764:	e7de      	b.n	800c724 <_strtod_l+0x8e4>
 800c766:	4013      	ands	r3, r2
 800c768:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c76c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c770:	f04f 38ff 	mov.w	r8, #4294967295
 800c774:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c778:	e7d4      	b.n	800c724 <_strtod_l+0x8e4>
 800c77a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c77c:	ea13 0f08 	tst.w	r3, r8
 800c780:	e7e0      	b.n	800c744 <_strtod_l+0x904>
 800c782:	f7ff fb3b 	bl	800bdfc <sulp>
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c78e:	f7f3 fd0d 	bl	80001ac <__aeabi_dsub>
 800c792:	2200      	movs	r2, #0
 800c794:	2300      	movs	r3, #0
 800c796:	4680      	mov	r8, r0
 800c798:	4689      	mov	r9, r1
 800c79a:	f7f4 f927 	bl	80009ec <__aeabi_dcmpeq>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d0c0      	beq.n	800c724 <_strtod_l+0x8e4>
 800c7a2:	e602      	b.n	800c3aa <_strtod_l+0x56a>
 800c7a4:	4658      	mov	r0, fp
 800c7a6:	9904      	ldr	r1, [sp, #16]
 800c7a8:	f001 f99c 	bl	800dae4 <__ratio>
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7b2:	4606      	mov	r6, r0
 800c7b4:	460f      	mov	r7, r1
 800c7b6:	f7f4 f92d 	bl	8000a14 <__aeabi_dcmple>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d075      	beq.n	800c8aa <_strtod_l+0xa6a>
 800c7be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d047      	beq.n	800c854 <_strtod_l+0xa14>
 800c7c4:	2600      	movs	r6, #0
 800c7c6:	4f65      	ldr	r7, [pc, #404]	; (800c95c <_strtod_l+0xb1c>)
 800c7c8:	4d64      	ldr	r5, [pc, #400]	; (800c95c <_strtod_l+0xb1c>)
 800c7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7d0:	0d1b      	lsrs	r3, r3, #20
 800c7d2:	051b      	lsls	r3, r3, #20
 800c7d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c7d8:	4b61      	ldr	r3, [pc, #388]	; (800c960 <_strtod_l+0xb20>)
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	f040 80c8 	bne.w	800c970 <_strtod_l+0xb30>
 800c7e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c7e4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800c7f0:	4649      	mov	r1, r9
 800c7f2:	f001 f8a1 	bl	800d938 <__ulp>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	4639      	mov	r1, r7
 800c7fe:	f7f3 fe8d 	bl	800051c <__aeabi_dmul>
 800c802:	4642      	mov	r2, r8
 800c804:	464b      	mov	r3, r9
 800c806:	f7f3 fcd3 	bl	80001b0 <__adddf3>
 800c80a:	460b      	mov	r3, r1
 800c80c:	4951      	ldr	r1, [pc, #324]	; (800c954 <_strtod_l+0xb14>)
 800c80e:	4a55      	ldr	r2, [pc, #340]	; (800c964 <_strtod_l+0xb24>)
 800c810:	4019      	ands	r1, r3
 800c812:	4291      	cmp	r1, r2
 800c814:	4680      	mov	r8, r0
 800c816:	d95e      	bls.n	800c8d6 <_strtod_l+0xa96>
 800c818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c81a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c81e:	4293      	cmp	r3, r2
 800c820:	d103      	bne.n	800c82a <_strtod_l+0x9ea>
 800c822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c824:	3301      	adds	r3, #1
 800c826:	f43f ad4e 	beq.w	800c2c6 <_strtod_l+0x486>
 800c82a:	f04f 38ff 	mov.w	r8, #4294967295
 800c82e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800c958 <_strtod_l+0xb18>
 800c832:	4650      	mov	r0, sl
 800c834:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c836:	f000 fd4f 	bl	800d2d8 <_Bfree>
 800c83a:	4650      	mov	r0, sl
 800c83c:	9906      	ldr	r1, [sp, #24]
 800c83e:	f000 fd4b 	bl	800d2d8 <_Bfree>
 800c842:	4650      	mov	r0, sl
 800c844:	9904      	ldr	r1, [sp, #16]
 800c846:	f000 fd47 	bl	800d2d8 <_Bfree>
 800c84a:	4659      	mov	r1, fp
 800c84c:	4650      	mov	r0, sl
 800c84e:	f000 fd43 	bl	800d2d8 <_Bfree>
 800c852:	e61c      	b.n	800c48e <_strtod_l+0x64e>
 800c854:	f1b8 0f00 	cmp.w	r8, #0
 800c858:	d119      	bne.n	800c88e <_strtod_l+0xa4e>
 800c85a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c85c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c860:	b9e3      	cbnz	r3, 800c89c <_strtod_l+0xa5c>
 800c862:	2200      	movs	r2, #0
 800c864:	4630      	mov	r0, r6
 800c866:	4639      	mov	r1, r7
 800c868:	4b3c      	ldr	r3, [pc, #240]	; (800c95c <_strtod_l+0xb1c>)
 800c86a:	f7f4 f8c9 	bl	8000a00 <__aeabi_dcmplt>
 800c86e:	b9c8      	cbnz	r0, 800c8a4 <_strtod_l+0xa64>
 800c870:	2200      	movs	r2, #0
 800c872:	4630      	mov	r0, r6
 800c874:	4639      	mov	r1, r7
 800c876:	4b3c      	ldr	r3, [pc, #240]	; (800c968 <_strtod_l+0xb28>)
 800c878:	f7f3 fe50 	bl	800051c <__aeabi_dmul>
 800c87c:	4604      	mov	r4, r0
 800c87e:	460d      	mov	r5, r1
 800c880:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c884:	9418      	str	r4, [sp, #96]	; 0x60
 800c886:	9319      	str	r3, [sp, #100]	; 0x64
 800c888:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800c88c:	e79d      	b.n	800c7ca <_strtod_l+0x98a>
 800c88e:	f1b8 0f01 	cmp.w	r8, #1
 800c892:	d103      	bne.n	800c89c <_strtod_l+0xa5c>
 800c894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c896:	2b00      	cmp	r3, #0
 800c898:	f43f ad87 	beq.w	800c3aa <_strtod_l+0x56a>
 800c89c:	2600      	movs	r6, #0
 800c89e:	2400      	movs	r4, #0
 800c8a0:	4f32      	ldr	r7, [pc, #200]	; (800c96c <_strtod_l+0xb2c>)
 800c8a2:	e791      	b.n	800c7c8 <_strtod_l+0x988>
 800c8a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c8a6:	4d30      	ldr	r5, [pc, #192]	; (800c968 <_strtod_l+0xb28>)
 800c8a8:	e7ea      	b.n	800c880 <_strtod_l+0xa40>
 800c8aa:	4b2f      	ldr	r3, [pc, #188]	; (800c968 <_strtod_l+0xb28>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	4639      	mov	r1, r7
 800c8b2:	f7f3 fe33 	bl	800051c <__aeabi_dmul>
 800c8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8b8:	4604      	mov	r4, r0
 800c8ba:	460d      	mov	r5, r1
 800c8bc:	b933      	cbnz	r3, 800c8cc <_strtod_l+0xa8c>
 800c8be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8c2:	9010      	str	r0, [sp, #64]	; 0x40
 800c8c4:	9311      	str	r3, [sp, #68]	; 0x44
 800c8c6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c8ca:	e77e      	b.n	800c7ca <_strtod_l+0x98a>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c8d4:	e7f7      	b.n	800c8c6 <_strtod_l+0xa86>
 800c8d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c8da:	9b05      	ldr	r3, [sp, #20]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1a8      	bne.n	800c832 <_strtod_l+0x9f2>
 800c8e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c8e6:	0d1b      	lsrs	r3, r3, #20
 800c8e8:	051b      	lsls	r3, r3, #20
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d1a1      	bne.n	800c832 <_strtod_l+0x9f2>
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	f7f4 fc29 	bl	8001148 <__aeabi_d2lz>
 800c8f6:	f7f3 fde3 	bl	80004c0 <__aeabi_l2d>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4620      	mov	r0, r4
 800c900:	4629      	mov	r1, r5
 800c902:	f7f3 fc53 	bl	80001ac <__aeabi_dsub>
 800c906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c90c:	ea43 0308 	orr.w	r3, r3, r8
 800c910:	4313      	orrs	r3, r2
 800c912:	4604      	mov	r4, r0
 800c914:	460d      	mov	r5, r1
 800c916:	d066      	beq.n	800c9e6 <_strtod_l+0xba6>
 800c918:	a309      	add	r3, pc, #36	; (adr r3, 800c940 <_strtod_l+0xb00>)
 800c91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91e:	f7f4 f86f 	bl	8000a00 <__aeabi_dcmplt>
 800c922:	2800      	cmp	r0, #0
 800c924:	f47f acda 	bne.w	800c2dc <_strtod_l+0x49c>
 800c928:	a307      	add	r3, pc, #28	; (adr r3, 800c948 <_strtod_l+0xb08>)
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	4620      	mov	r0, r4
 800c930:	4629      	mov	r1, r5
 800c932:	f7f4 f883 	bl	8000a3c <__aeabi_dcmpgt>
 800c936:	2800      	cmp	r0, #0
 800c938:	f43f af7b 	beq.w	800c832 <_strtod_l+0x9f2>
 800c93c:	e4ce      	b.n	800c2dc <_strtod_l+0x49c>
 800c93e:	bf00      	nop
 800c940:	94a03595 	.word	0x94a03595
 800c944:	3fdfffff 	.word	0x3fdfffff
 800c948:	35afe535 	.word	0x35afe535
 800c94c:	3fe00000 	.word	0x3fe00000
 800c950:	000fffff 	.word	0x000fffff
 800c954:	7ff00000 	.word	0x7ff00000
 800c958:	7fefffff 	.word	0x7fefffff
 800c95c:	3ff00000 	.word	0x3ff00000
 800c960:	7fe00000 	.word	0x7fe00000
 800c964:	7c9fffff 	.word	0x7c9fffff
 800c968:	3fe00000 	.word	0x3fe00000
 800c96c:	bff00000 	.word	0xbff00000
 800c970:	9b05      	ldr	r3, [sp, #20]
 800c972:	b313      	cbz	r3, 800c9ba <_strtod_l+0xb7a>
 800c974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c976:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c97a:	d81e      	bhi.n	800c9ba <_strtod_l+0xb7a>
 800c97c:	a326      	add	r3, pc, #152	; (adr r3, 800ca18 <_strtod_l+0xbd8>)
 800c97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c982:	4620      	mov	r0, r4
 800c984:	4629      	mov	r1, r5
 800c986:	f7f4 f845 	bl	8000a14 <__aeabi_dcmple>
 800c98a:	b190      	cbz	r0, 800c9b2 <_strtod_l+0xb72>
 800c98c:	4629      	mov	r1, r5
 800c98e:	4620      	mov	r0, r4
 800c990:	f7f4 f85e 	bl	8000a50 <__aeabi_d2uiz>
 800c994:	2801      	cmp	r0, #1
 800c996:	bf38      	it	cc
 800c998:	2001      	movcc	r0, #1
 800c99a:	f7f3 fd45 	bl	8000428 <__aeabi_ui2d>
 800c99e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	b9d3      	cbnz	r3, 800c9dc <_strtod_l+0xb9c>
 800c9a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9aa:	9012      	str	r0, [sp, #72]	; 0x48
 800c9ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800c9ae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800c9b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c9b4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800c9b8:	1a9f      	subs	r7, r3, r2
 800c9ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c9be:	f000 ffbb 	bl	800d938 <__ulp>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	4639      	mov	r1, r7
 800c9ca:	f7f3 fda7 	bl	800051c <__aeabi_dmul>
 800c9ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c9d2:	f7f3 fbed 	bl	80001b0 <__adddf3>
 800c9d6:	4680      	mov	r8, r0
 800c9d8:	4689      	mov	r9, r1
 800c9da:	e77e      	b.n	800c8da <_strtod_l+0xa9a>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800c9e4:	e7e3      	b.n	800c9ae <_strtod_l+0xb6e>
 800c9e6:	a30e      	add	r3, pc, #56	; (adr r3, 800ca20 <_strtod_l+0xbe0>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	f7f4 f808 	bl	8000a00 <__aeabi_dcmplt>
 800c9f0:	e7a1      	b.n	800c936 <_strtod_l+0xaf6>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	930c      	str	r3, [sp, #48]	; 0x30
 800c9f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	f7ff ba65 	b.w	800beca <_strtod_l+0x8a>
 800ca00:	2b65      	cmp	r3, #101	; 0x65
 800ca02:	f43f ab5c 	beq.w	800c0be <_strtod_l+0x27e>
 800ca06:	2b45      	cmp	r3, #69	; 0x45
 800ca08:	f43f ab59 	beq.w	800c0be <_strtod_l+0x27e>
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f7ff bb8d 	b.w	800c12c <_strtod_l+0x2ec>
 800ca12:	bf00      	nop
 800ca14:	f3af 8000 	nop.w
 800ca18:	ffc00000 	.word	0xffc00000
 800ca1c:	41dfffff 	.word	0x41dfffff
 800ca20:	94a03595 	.word	0x94a03595
 800ca24:	3fcfffff 	.word	0x3fcfffff

0800ca28 <strtod>:
 800ca28:	460a      	mov	r2, r1
 800ca2a:	4601      	mov	r1, r0
 800ca2c:	4802      	ldr	r0, [pc, #8]	; (800ca38 <strtod+0x10>)
 800ca2e:	4b03      	ldr	r3, [pc, #12]	; (800ca3c <strtod+0x14>)
 800ca30:	6800      	ldr	r0, [r0, #0]
 800ca32:	f7ff ba05 	b.w	800be40 <_strtod_l>
 800ca36:	bf00      	nop
 800ca38:	200004e8 	.word	0x200004e8
 800ca3c:	20000550 	.word	0x20000550

0800ca40 <strtok>:
 800ca40:	4b16      	ldr	r3, [pc, #88]	; (800ca9c <strtok+0x5c>)
 800ca42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca46:	681f      	ldr	r7, [r3, #0]
 800ca48:	4605      	mov	r5, r0
 800ca4a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800ca4c:	460e      	mov	r6, r1
 800ca4e:	b9ec      	cbnz	r4, 800ca8c <strtok+0x4c>
 800ca50:	2050      	movs	r0, #80	; 0x50
 800ca52:	f000 fbe7 	bl	800d224 <malloc>
 800ca56:	4602      	mov	r2, r0
 800ca58:	65b8      	str	r0, [r7, #88]	; 0x58
 800ca5a:	b920      	cbnz	r0, 800ca66 <strtok+0x26>
 800ca5c:	2157      	movs	r1, #87	; 0x57
 800ca5e:	4b10      	ldr	r3, [pc, #64]	; (800caa0 <strtok+0x60>)
 800ca60:	4810      	ldr	r0, [pc, #64]	; (800caa4 <strtok+0x64>)
 800ca62:	f000 f849 	bl	800caf8 <__assert_func>
 800ca66:	e9c0 4400 	strd	r4, r4, [r0]
 800ca6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ca6e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ca72:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ca76:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ca7a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ca7e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ca82:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ca86:	6184      	str	r4, [r0, #24]
 800ca88:	7704      	strb	r4, [r0, #28]
 800ca8a:	6244      	str	r4, [r0, #36]	; 0x24
 800ca8c:	4631      	mov	r1, r6
 800ca8e:	4628      	mov	r0, r5
 800ca90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca92:	2301      	movs	r3, #1
 800ca94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca98:	f000 b806 	b.w	800caa8 <__strtok_r>
 800ca9c:	200004e8 	.word	0x200004e8
 800caa0:	0800ecf8 	.word	0x0800ecf8
 800caa4:	0800ed0f 	.word	0x0800ed0f

0800caa8 <__strtok_r>:
 800caa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caaa:	b908      	cbnz	r0, 800cab0 <__strtok_r+0x8>
 800caac:	6810      	ldr	r0, [r2, #0]
 800caae:	b188      	cbz	r0, 800cad4 <__strtok_r+0x2c>
 800cab0:	4604      	mov	r4, r0
 800cab2:	460f      	mov	r7, r1
 800cab4:	4620      	mov	r0, r4
 800cab6:	f814 5b01 	ldrb.w	r5, [r4], #1
 800caba:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cabe:	b91e      	cbnz	r6, 800cac8 <__strtok_r+0x20>
 800cac0:	b965      	cbnz	r5, 800cadc <__strtok_r+0x34>
 800cac2:	4628      	mov	r0, r5
 800cac4:	6015      	str	r5, [r2, #0]
 800cac6:	e005      	b.n	800cad4 <__strtok_r+0x2c>
 800cac8:	42b5      	cmp	r5, r6
 800caca:	d1f6      	bne.n	800caba <__strtok_r+0x12>
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1f0      	bne.n	800cab2 <__strtok_r+0xa>
 800cad0:	6014      	str	r4, [r2, #0]
 800cad2:	7003      	strb	r3, [r0, #0]
 800cad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cad6:	461c      	mov	r4, r3
 800cad8:	e00c      	b.n	800caf4 <__strtok_r+0x4c>
 800cada:	b915      	cbnz	r5, 800cae2 <__strtok_r+0x3a>
 800cadc:	460e      	mov	r6, r1
 800cade:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cae2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cae6:	42ab      	cmp	r3, r5
 800cae8:	d1f7      	bne.n	800cada <__strtok_r+0x32>
 800caea:	2b00      	cmp	r3, #0
 800caec:	d0f3      	beq.n	800cad6 <__strtok_r+0x2e>
 800caee:	2300      	movs	r3, #0
 800caf0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800caf4:	6014      	str	r4, [r2, #0]
 800caf6:	e7ed      	b.n	800cad4 <__strtok_r+0x2c>

0800caf8 <__assert_func>:
 800caf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cafa:	4614      	mov	r4, r2
 800cafc:	461a      	mov	r2, r3
 800cafe:	4b09      	ldr	r3, [pc, #36]	; (800cb24 <__assert_func+0x2c>)
 800cb00:	4605      	mov	r5, r0
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68d8      	ldr	r0, [r3, #12]
 800cb06:	b14c      	cbz	r4, 800cb1c <__assert_func+0x24>
 800cb08:	4b07      	ldr	r3, [pc, #28]	; (800cb28 <__assert_func+0x30>)
 800cb0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb0e:	9100      	str	r1, [sp, #0]
 800cb10:	462b      	mov	r3, r5
 800cb12:	4906      	ldr	r1, [pc, #24]	; (800cb2c <__assert_func+0x34>)
 800cb14:	f000 f80e 	bl	800cb34 <fiprintf>
 800cb18:	f001 fcee 	bl	800e4f8 <abort>
 800cb1c:	4b04      	ldr	r3, [pc, #16]	; (800cb30 <__assert_func+0x38>)
 800cb1e:	461c      	mov	r4, r3
 800cb20:	e7f3      	b.n	800cb0a <__assert_func+0x12>
 800cb22:	bf00      	nop
 800cb24:	200004e8 	.word	0x200004e8
 800cb28:	0800ed70 	.word	0x0800ed70
 800cb2c:	0800ed7d 	.word	0x0800ed7d
 800cb30:	0800edab 	.word	0x0800edab

0800cb34 <fiprintf>:
 800cb34:	b40e      	push	{r1, r2, r3}
 800cb36:	b503      	push	{r0, r1, lr}
 800cb38:	4601      	mov	r1, r0
 800cb3a:	ab03      	add	r3, sp, #12
 800cb3c:	4805      	ldr	r0, [pc, #20]	; (800cb54 <fiprintf+0x20>)
 800cb3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb42:	6800      	ldr	r0, [r0, #0]
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	f001 f91b 	bl	800dd80 <_vfiprintf_r>
 800cb4a:	b002      	add	sp, #8
 800cb4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb50:	b003      	add	sp, #12
 800cb52:	4770      	bx	lr
 800cb54:	200004e8 	.word	0x200004e8

0800cb58 <rshift>:
 800cb58:	6903      	ldr	r3, [r0, #16]
 800cb5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cb62:	f100 0414 	add.w	r4, r0, #20
 800cb66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cb6a:	dd46      	ble.n	800cbfa <rshift+0xa2>
 800cb6c:	f011 011f 	ands.w	r1, r1, #31
 800cb70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb78:	d10c      	bne.n	800cb94 <rshift+0x3c>
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	f100 0710 	add.w	r7, r0, #16
 800cb80:	42b1      	cmp	r1, r6
 800cb82:	d335      	bcc.n	800cbf0 <rshift+0x98>
 800cb84:	1a9b      	subs	r3, r3, r2
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	1eea      	subs	r2, r5, #3
 800cb8a:	4296      	cmp	r6, r2
 800cb8c:	bf38      	it	cc
 800cb8e:	2300      	movcc	r3, #0
 800cb90:	4423      	add	r3, r4
 800cb92:	e015      	b.n	800cbc0 <rshift+0x68>
 800cb94:	46a1      	mov	r9, r4
 800cb96:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb9a:	f1c1 0820 	rsb	r8, r1, #32
 800cb9e:	40cf      	lsrs	r7, r1
 800cba0:	f105 0e04 	add.w	lr, r5, #4
 800cba4:	4576      	cmp	r6, lr
 800cba6:	46f4      	mov	ip, lr
 800cba8:	d816      	bhi.n	800cbd8 <rshift+0x80>
 800cbaa:	1a9b      	subs	r3, r3, r2
 800cbac:	009a      	lsls	r2, r3, #2
 800cbae:	3a04      	subs	r2, #4
 800cbb0:	3501      	adds	r5, #1
 800cbb2:	42ae      	cmp	r6, r5
 800cbb4:	bf38      	it	cc
 800cbb6:	2200      	movcc	r2, #0
 800cbb8:	18a3      	adds	r3, r4, r2
 800cbba:	50a7      	str	r7, [r4, r2]
 800cbbc:	b107      	cbz	r7, 800cbc0 <rshift+0x68>
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	42a3      	cmp	r3, r4
 800cbc2:	eba3 0204 	sub.w	r2, r3, r4
 800cbc6:	bf08      	it	eq
 800cbc8:	2300      	moveq	r3, #0
 800cbca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cbce:	6102      	str	r2, [r0, #16]
 800cbd0:	bf08      	it	eq
 800cbd2:	6143      	streq	r3, [r0, #20]
 800cbd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbd8:	f8dc c000 	ldr.w	ip, [ip]
 800cbdc:	fa0c fc08 	lsl.w	ip, ip, r8
 800cbe0:	ea4c 0707 	orr.w	r7, ip, r7
 800cbe4:	f849 7b04 	str.w	r7, [r9], #4
 800cbe8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cbec:	40cf      	lsrs	r7, r1
 800cbee:	e7d9      	b.n	800cba4 <rshift+0x4c>
 800cbf0:	f851 cb04 	ldr.w	ip, [r1], #4
 800cbf4:	f847 cf04 	str.w	ip, [r7, #4]!
 800cbf8:	e7c2      	b.n	800cb80 <rshift+0x28>
 800cbfa:	4623      	mov	r3, r4
 800cbfc:	e7e0      	b.n	800cbc0 <rshift+0x68>

0800cbfe <__hexdig_fun>:
 800cbfe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cc02:	2b09      	cmp	r3, #9
 800cc04:	d802      	bhi.n	800cc0c <__hexdig_fun+0xe>
 800cc06:	3820      	subs	r0, #32
 800cc08:	b2c0      	uxtb	r0, r0
 800cc0a:	4770      	bx	lr
 800cc0c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cc10:	2b05      	cmp	r3, #5
 800cc12:	d801      	bhi.n	800cc18 <__hexdig_fun+0x1a>
 800cc14:	3847      	subs	r0, #71	; 0x47
 800cc16:	e7f7      	b.n	800cc08 <__hexdig_fun+0xa>
 800cc18:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cc1c:	2b05      	cmp	r3, #5
 800cc1e:	d801      	bhi.n	800cc24 <__hexdig_fun+0x26>
 800cc20:	3827      	subs	r0, #39	; 0x27
 800cc22:	e7f1      	b.n	800cc08 <__hexdig_fun+0xa>
 800cc24:	2000      	movs	r0, #0
 800cc26:	4770      	bx	lr

0800cc28 <__gethex>:
 800cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	b08b      	sub	sp, #44	; 0x2c
 800cc2e:	9306      	str	r3, [sp, #24]
 800cc30:	4bb9      	ldr	r3, [pc, #740]	; (800cf18 <__gethex+0x2f0>)
 800cc32:	9002      	str	r0, [sp, #8]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	468b      	mov	fp, r1
 800cc38:	4618      	mov	r0, r3
 800cc3a:	4690      	mov	r8, r2
 800cc3c:	9303      	str	r3, [sp, #12]
 800cc3e:	f7f3 faa9 	bl	8000194 <strlen>
 800cc42:	4682      	mov	sl, r0
 800cc44:	9b03      	ldr	r3, [sp, #12]
 800cc46:	f8db 2000 	ldr.w	r2, [fp]
 800cc4a:	4403      	add	r3, r0
 800cc4c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cc50:	9307      	str	r3, [sp, #28]
 800cc52:	1c93      	adds	r3, r2, #2
 800cc54:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cc58:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cc5c:	32fe      	adds	r2, #254	; 0xfe
 800cc5e:	18d1      	adds	r1, r2, r3
 800cc60:	461f      	mov	r7, r3
 800cc62:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc66:	9101      	str	r1, [sp, #4]
 800cc68:	2830      	cmp	r0, #48	; 0x30
 800cc6a:	d0f8      	beq.n	800cc5e <__gethex+0x36>
 800cc6c:	f7ff ffc7 	bl	800cbfe <__hexdig_fun>
 800cc70:	4604      	mov	r4, r0
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d13a      	bne.n	800ccec <__gethex+0xc4>
 800cc76:	4652      	mov	r2, sl
 800cc78:	4638      	mov	r0, r7
 800cc7a:	9903      	ldr	r1, [sp, #12]
 800cc7c:	f001 fb5c 	bl	800e338 <strncmp>
 800cc80:	4605      	mov	r5, r0
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d166      	bne.n	800cd54 <__gethex+0x12c>
 800cc86:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cc8a:	eb07 060a 	add.w	r6, r7, sl
 800cc8e:	f7ff ffb6 	bl	800cbfe <__hexdig_fun>
 800cc92:	2800      	cmp	r0, #0
 800cc94:	d060      	beq.n	800cd58 <__gethex+0x130>
 800cc96:	4633      	mov	r3, r6
 800cc98:	7818      	ldrb	r0, [r3, #0]
 800cc9a:	461f      	mov	r7, r3
 800cc9c:	2830      	cmp	r0, #48	; 0x30
 800cc9e:	f103 0301 	add.w	r3, r3, #1
 800cca2:	d0f9      	beq.n	800cc98 <__gethex+0x70>
 800cca4:	f7ff ffab 	bl	800cbfe <__hexdig_fun>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	fab0 f480 	clz	r4, r0
 800ccae:	4635      	mov	r5, r6
 800ccb0:	0964      	lsrs	r4, r4, #5
 800ccb2:	9301      	str	r3, [sp, #4]
 800ccb4:	463a      	mov	r2, r7
 800ccb6:	4616      	mov	r6, r2
 800ccb8:	7830      	ldrb	r0, [r6, #0]
 800ccba:	3201      	adds	r2, #1
 800ccbc:	f7ff ff9f 	bl	800cbfe <__hexdig_fun>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	d1f8      	bne.n	800ccb6 <__gethex+0x8e>
 800ccc4:	4652      	mov	r2, sl
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	9903      	ldr	r1, [sp, #12]
 800ccca:	f001 fb35 	bl	800e338 <strncmp>
 800ccce:	b980      	cbnz	r0, 800ccf2 <__gethex+0xca>
 800ccd0:	b94d      	cbnz	r5, 800cce6 <__gethex+0xbe>
 800ccd2:	eb06 050a 	add.w	r5, r6, sl
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	4616      	mov	r6, r2
 800ccda:	7830      	ldrb	r0, [r6, #0]
 800ccdc:	3201      	adds	r2, #1
 800ccde:	f7ff ff8e 	bl	800cbfe <__hexdig_fun>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	d1f8      	bne.n	800ccd8 <__gethex+0xb0>
 800cce6:	1bad      	subs	r5, r5, r6
 800cce8:	00ad      	lsls	r5, r5, #2
 800ccea:	e004      	b.n	800ccf6 <__gethex+0xce>
 800ccec:	2400      	movs	r4, #0
 800ccee:	4625      	mov	r5, r4
 800ccf0:	e7e0      	b.n	800ccb4 <__gethex+0x8c>
 800ccf2:	2d00      	cmp	r5, #0
 800ccf4:	d1f7      	bne.n	800cce6 <__gethex+0xbe>
 800ccf6:	7833      	ldrb	r3, [r6, #0]
 800ccf8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ccfc:	2b50      	cmp	r3, #80	; 0x50
 800ccfe:	d139      	bne.n	800cd74 <__gethex+0x14c>
 800cd00:	7873      	ldrb	r3, [r6, #1]
 800cd02:	2b2b      	cmp	r3, #43	; 0x2b
 800cd04:	d02a      	beq.n	800cd5c <__gethex+0x134>
 800cd06:	2b2d      	cmp	r3, #45	; 0x2d
 800cd08:	d02c      	beq.n	800cd64 <__gethex+0x13c>
 800cd0a:	f04f 0900 	mov.w	r9, #0
 800cd0e:	1c71      	adds	r1, r6, #1
 800cd10:	7808      	ldrb	r0, [r1, #0]
 800cd12:	f7ff ff74 	bl	800cbfe <__hexdig_fun>
 800cd16:	1e43      	subs	r3, r0, #1
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	2b18      	cmp	r3, #24
 800cd1c:	d82a      	bhi.n	800cd74 <__gethex+0x14c>
 800cd1e:	f1a0 0210 	sub.w	r2, r0, #16
 800cd22:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cd26:	f7ff ff6a 	bl	800cbfe <__hexdig_fun>
 800cd2a:	1e43      	subs	r3, r0, #1
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	2b18      	cmp	r3, #24
 800cd30:	d91b      	bls.n	800cd6a <__gethex+0x142>
 800cd32:	f1b9 0f00 	cmp.w	r9, #0
 800cd36:	d000      	beq.n	800cd3a <__gethex+0x112>
 800cd38:	4252      	negs	r2, r2
 800cd3a:	4415      	add	r5, r2
 800cd3c:	f8cb 1000 	str.w	r1, [fp]
 800cd40:	b1d4      	cbz	r4, 800cd78 <__gethex+0x150>
 800cd42:	9b01      	ldr	r3, [sp, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	bf14      	ite	ne
 800cd48:	2700      	movne	r7, #0
 800cd4a:	2706      	moveq	r7, #6
 800cd4c:	4638      	mov	r0, r7
 800cd4e:	b00b      	add	sp, #44	; 0x2c
 800cd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd54:	463e      	mov	r6, r7
 800cd56:	4625      	mov	r5, r4
 800cd58:	2401      	movs	r4, #1
 800cd5a:	e7cc      	b.n	800ccf6 <__gethex+0xce>
 800cd5c:	f04f 0900 	mov.w	r9, #0
 800cd60:	1cb1      	adds	r1, r6, #2
 800cd62:	e7d5      	b.n	800cd10 <__gethex+0xe8>
 800cd64:	f04f 0901 	mov.w	r9, #1
 800cd68:	e7fa      	b.n	800cd60 <__gethex+0x138>
 800cd6a:	230a      	movs	r3, #10
 800cd6c:	fb03 0202 	mla	r2, r3, r2, r0
 800cd70:	3a10      	subs	r2, #16
 800cd72:	e7d6      	b.n	800cd22 <__gethex+0xfa>
 800cd74:	4631      	mov	r1, r6
 800cd76:	e7e1      	b.n	800cd3c <__gethex+0x114>
 800cd78:	4621      	mov	r1, r4
 800cd7a:	1bf3      	subs	r3, r6, r7
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	2b07      	cmp	r3, #7
 800cd80:	dc0a      	bgt.n	800cd98 <__gethex+0x170>
 800cd82:	9802      	ldr	r0, [sp, #8]
 800cd84:	f000 fa68 	bl	800d258 <_Balloc>
 800cd88:	4604      	mov	r4, r0
 800cd8a:	b940      	cbnz	r0, 800cd9e <__gethex+0x176>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	21de      	movs	r1, #222	; 0xde
 800cd90:	4b62      	ldr	r3, [pc, #392]	; (800cf1c <__gethex+0x2f4>)
 800cd92:	4863      	ldr	r0, [pc, #396]	; (800cf20 <__gethex+0x2f8>)
 800cd94:	f7ff feb0 	bl	800caf8 <__assert_func>
 800cd98:	3101      	adds	r1, #1
 800cd9a:	105b      	asrs	r3, r3, #1
 800cd9c:	e7ef      	b.n	800cd7e <__gethex+0x156>
 800cd9e:	f04f 0b00 	mov.w	fp, #0
 800cda2:	f100 0914 	add.w	r9, r0, #20
 800cda6:	f1ca 0301 	rsb	r3, sl, #1
 800cdaa:	f8cd 9010 	str.w	r9, [sp, #16]
 800cdae:	f8cd b004 	str.w	fp, [sp, #4]
 800cdb2:	9308      	str	r3, [sp, #32]
 800cdb4:	42b7      	cmp	r7, r6
 800cdb6:	d33f      	bcc.n	800ce38 <__gethex+0x210>
 800cdb8:	9f04      	ldr	r7, [sp, #16]
 800cdba:	9b01      	ldr	r3, [sp, #4]
 800cdbc:	f847 3b04 	str.w	r3, [r7], #4
 800cdc0:	eba7 0709 	sub.w	r7, r7, r9
 800cdc4:	10bf      	asrs	r7, r7, #2
 800cdc6:	6127      	str	r7, [r4, #16]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f000 fb3b 	bl	800d444 <__hi0bits>
 800cdce:	017f      	lsls	r7, r7, #5
 800cdd0:	f8d8 6000 	ldr.w	r6, [r8]
 800cdd4:	1a3f      	subs	r7, r7, r0
 800cdd6:	42b7      	cmp	r7, r6
 800cdd8:	dd62      	ble.n	800cea0 <__gethex+0x278>
 800cdda:	1bbf      	subs	r7, r7, r6
 800cddc:	4639      	mov	r1, r7
 800cdde:	4620      	mov	r0, r4
 800cde0:	f000 fed1 	bl	800db86 <__any_on>
 800cde4:	4682      	mov	sl, r0
 800cde6:	b1a8      	cbz	r0, 800ce14 <__gethex+0x1ec>
 800cde8:	f04f 0a01 	mov.w	sl, #1
 800cdec:	1e7b      	subs	r3, r7, #1
 800cdee:	1159      	asrs	r1, r3, #5
 800cdf0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cdf4:	f003 021f 	and.w	r2, r3, #31
 800cdf8:	fa0a f202 	lsl.w	r2, sl, r2
 800cdfc:	420a      	tst	r2, r1
 800cdfe:	d009      	beq.n	800ce14 <__gethex+0x1ec>
 800ce00:	4553      	cmp	r3, sl
 800ce02:	dd05      	ble.n	800ce10 <__gethex+0x1e8>
 800ce04:	4620      	mov	r0, r4
 800ce06:	1eb9      	subs	r1, r7, #2
 800ce08:	f000 febd 	bl	800db86 <__any_on>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d144      	bne.n	800ce9a <__gethex+0x272>
 800ce10:	f04f 0a02 	mov.w	sl, #2
 800ce14:	4639      	mov	r1, r7
 800ce16:	4620      	mov	r0, r4
 800ce18:	f7ff fe9e 	bl	800cb58 <rshift>
 800ce1c:	443d      	add	r5, r7
 800ce1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce22:	42ab      	cmp	r3, r5
 800ce24:	da4a      	bge.n	800cebc <__gethex+0x294>
 800ce26:	4621      	mov	r1, r4
 800ce28:	9802      	ldr	r0, [sp, #8]
 800ce2a:	f000 fa55 	bl	800d2d8 <_Bfree>
 800ce2e:	2300      	movs	r3, #0
 800ce30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce32:	27a3      	movs	r7, #163	; 0xa3
 800ce34:	6013      	str	r3, [r2, #0]
 800ce36:	e789      	b.n	800cd4c <__gethex+0x124>
 800ce38:	1e73      	subs	r3, r6, #1
 800ce3a:	9a07      	ldr	r2, [sp, #28]
 800ce3c:	9305      	str	r3, [sp, #20]
 800ce3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d019      	beq.n	800ce7a <__gethex+0x252>
 800ce46:	f1bb 0f20 	cmp.w	fp, #32
 800ce4a:	d107      	bne.n	800ce5c <__gethex+0x234>
 800ce4c:	9b04      	ldr	r3, [sp, #16]
 800ce4e:	9a01      	ldr	r2, [sp, #4]
 800ce50:	f843 2b04 	str.w	r2, [r3], #4
 800ce54:	9304      	str	r3, [sp, #16]
 800ce56:	2300      	movs	r3, #0
 800ce58:	469b      	mov	fp, r3
 800ce5a:	9301      	str	r3, [sp, #4]
 800ce5c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ce60:	f7ff fecd 	bl	800cbfe <__hexdig_fun>
 800ce64:	9b01      	ldr	r3, [sp, #4]
 800ce66:	f000 000f 	and.w	r0, r0, #15
 800ce6a:	fa00 f00b 	lsl.w	r0, r0, fp
 800ce6e:	4303      	orrs	r3, r0
 800ce70:	9301      	str	r3, [sp, #4]
 800ce72:	f10b 0b04 	add.w	fp, fp, #4
 800ce76:	9b05      	ldr	r3, [sp, #20]
 800ce78:	e00d      	b.n	800ce96 <__gethex+0x26e>
 800ce7a:	9b05      	ldr	r3, [sp, #20]
 800ce7c:	9a08      	ldr	r2, [sp, #32]
 800ce7e:	4413      	add	r3, r2
 800ce80:	42bb      	cmp	r3, r7
 800ce82:	d3e0      	bcc.n	800ce46 <__gethex+0x21e>
 800ce84:	4618      	mov	r0, r3
 800ce86:	4652      	mov	r2, sl
 800ce88:	9903      	ldr	r1, [sp, #12]
 800ce8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce8c:	f001 fa54 	bl	800e338 <strncmp>
 800ce90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d1d7      	bne.n	800ce46 <__gethex+0x21e>
 800ce96:	461e      	mov	r6, r3
 800ce98:	e78c      	b.n	800cdb4 <__gethex+0x18c>
 800ce9a:	f04f 0a03 	mov.w	sl, #3
 800ce9e:	e7b9      	b.n	800ce14 <__gethex+0x1ec>
 800cea0:	da09      	bge.n	800ceb6 <__gethex+0x28e>
 800cea2:	1bf7      	subs	r7, r6, r7
 800cea4:	4621      	mov	r1, r4
 800cea6:	463a      	mov	r2, r7
 800cea8:	9802      	ldr	r0, [sp, #8]
 800ceaa:	f000 fc2d 	bl	800d708 <__lshift>
 800ceae:	4604      	mov	r4, r0
 800ceb0:	1bed      	subs	r5, r5, r7
 800ceb2:	f100 0914 	add.w	r9, r0, #20
 800ceb6:	f04f 0a00 	mov.w	sl, #0
 800ceba:	e7b0      	b.n	800ce1e <__gethex+0x1f6>
 800cebc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cec0:	42a8      	cmp	r0, r5
 800cec2:	dd71      	ble.n	800cfa8 <__gethex+0x380>
 800cec4:	1b45      	subs	r5, r0, r5
 800cec6:	42ae      	cmp	r6, r5
 800cec8:	dc34      	bgt.n	800cf34 <__gethex+0x30c>
 800ceca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d028      	beq.n	800cf24 <__gethex+0x2fc>
 800ced2:	2b03      	cmp	r3, #3
 800ced4:	d02a      	beq.n	800cf2c <__gethex+0x304>
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d115      	bne.n	800cf06 <__gethex+0x2de>
 800ceda:	42ae      	cmp	r6, r5
 800cedc:	d113      	bne.n	800cf06 <__gethex+0x2de>
 800cede:	2e01      	cmp	r6, #1
 800cee0:	d10b      	bne.n	800cefa <__gethex+0x2d2>
 800cee2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cee6:	9a06      	ldr	r2, [sp, #24]
 800cee8:	2762      	movs	r7, #98	; 0x62
 800ceea:	6013      	str	r3, [r2, #0]
 800ceec:	2301      	movs	r3, #1
 800ceee:	6123      	str	r3, [r4, #16]
 800cef0:	f8c9 3000 	str.w	r3, [r9]
 800cef4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cef6:	601c      	str	r4, [r3, #0]
 800cef8:	e728      	b.n	800cd4c <__gethex+0x124>
 800cefa:	4620      	mov	r0, r4
 800cefc:	1e71      	subs	r1, r6, #1
 800cefe:	f000 fe42 	bl	800db86 <__any_on>
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d1ed      	bne.n	800cee2 <__gethex+0x2ba>
 800cf06:	4621      	mov	r1, r4
 800cf08:	9802      	ldr	r0, [sp, #8]
 800cf0a:	f000 f9e5 	bl	800d2d8 <_Bfree>
 800cf0e:	2300      	movs	r3, #0
 800cf10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf12:	2750      	movs	r7, #80	; 0x50
 800cf14:	6013      	str	r3, [r2, #0]
 800cf16:	e719      	b.n	800cd4c <__gethex+0x124>
 800cf18:	0800ee28 	.word	0x0800ee28
 800cf1c:	0800edac 	.word	0x0800edac
 800cf20:	0800edbd 	.word	0x0800edbd
 800cf24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1ed      	bne.n	800cf06 <__gethex+0x2de>
 800cf2a:	e7da      	b.n	800cee2 <__gethex+0x2ba>
 800cf2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d1d7      	bne.n	800cee2 <__gethex+0x2ba>
 800cf32:	e7e8      	b.n	800cf06 <__gethex+0x2de>
 800cf34:	1e6f      	subs	r7, r5, #1
 800cf36:	f1ba 0f00 	cmp.w	sl, #0
 800cf3a:	d132      	bne.n	800cfa2 <__gethex+0x37a>
 800cf3c:	b127      	cbz	r7, 800cf48 <__gethex+0x320>
 800cf3e:	4639      	mov	r1, r7
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 fe20 	bl	800db86 <__any_on>
 800cf46:	4682      	mov	sl, r0
 800cf48:	2101      	movs	r1, #1
 800cf4a:	117b      	asrs	r3, r7, #5
 800cf4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cf50:	f007 071f 	and.w	r7, r7, #31
 800cf54:	fa01 f707 	lsl.w	r7, r1, r7
 800cf58:	421f      	tst	r7, r3
 800cf5a:	f04f 0702 	mov.w	r7, #2
 800cf5e:	4629      	mov	r1, r5
 800cf60:	4620      	mov	r0, r4
 800cf62:	bf18      	it	ne
 800cf64:	f04a 0a02 	orrne.w	sl, sl, #2
 800cf68:	1b76      	subs	r6, r6, r5
 800cf6a:	f7ff fdf5 	bl	800cb58 <rshift>
 800cf6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cf72:	f1ba 0f00 	cmp.w	sl, #0
 800cf76:	d048      	beq.n	800d00a <__gethex+0x3e2>
 800cf78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d015      	beq.n	800cfac <__gethex+0x384>
 800cf80:	2b03      	cmp	r3, #3
 800cf82:	d017      	beq.n	800cfb4 <__gethex+0x38c>
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d109      	bne.n	800cf9c <__gethex+0x374>
 800cf88:	f01a 0f02 	tst.w	sl, #2
 800cf8c:	d006      	beq.n	800cf9c <__gethex+0x374>
 800cf8e:	f8d9 0000 	ldr.w	r0, [r9]
 800cf92:	ea4a 0a00 	orr.w	sl, sl, r0
 800cf96:	f01a 0f01 	tst.w	sl, #1
 800cf9a:	d10e      	bne.n	800cfba <__gethex+0x392>
 800cf9c:	f047 0710 	orr.w	r7, r7, #16
 800cfa0:	e033      	b.n	800d00a <__gethex+0x3e2>
 800cfa2:	f04f 0a01 	mov.w	sl, #1
 800cfa6:	e7cf      	b.n	800cf48 <__gethex+0x320>
 800cfa8:	2701      	movs	r7, #1
 800cfaa:	e7e2      	b.n	800cf72 <__gethex+0x34a>
 800cfac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfae:	f1c3 0301 	rsb	r3, r3, #1
 800cfb2:	9315      	str	r3, [sp, #84]	; 0x54
 800cfb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d0f0      	beq.n	800cf9c <__gethex+0x374>
 800cfba:	f04f 0c00 	mov.w	ip, #0
 800cfbe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cfc2:	f104 0314 	add.w	r3, r4, #20
 800cfc6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cfca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfd4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cfd8:	d01c      	beq.n	800d014 <__gethex+0x3ec>
 800cfda:	3201      	adds	r2, #1
 800cfdc:	6002      	str	r2, [r0, #0]
 800cfde:	2f02      	cmp	r7, #2
 800cfe0:	f104 0314 	add.w	r3, r4, #20
 800cfe4:	d13d      	bne.n	800d062 <__gethex+0x43a>
 800cfe6:	f8d8 2000 	ldr.w	r2, [r8]
 800cfea:	3a01      	subs	r2, #1
 800cfec:	42b2      	cmp	r2, r6
 800cfee:	d10a      	bne.n	800d006 <__gethex+0x3de>
 800cff0:	2201      	movs	r2, #1
 800cff2:	1171      	asrs	r1, r6, #5
 800cff4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cff8:	f006 061f 	and.w	r6, r6, #31
 800cffc:	fa02 f606 	lsl.w	r6, r2, r6
 800d000:	421e      	tst	r6, r3
 800d002:	bf18      	it	ne
 800d004:	4617      	movne	r7, r2
 800d006:	f047 0720 	orr.w	r7, r7, #32
 800d00a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d00c:	601c      	str	r4, [r3, #0]
 800d00e:	9b06      	ldr	r3, [sp, #24]
 800d010:	601d      	str	r5, [r3, #0]
 800d012:	e69b      	b.n	800cd4c <__gethex+0x124>
 800d014:	4299      	cmp	r1, r3
 800d016:	f843 cc04 	str.w	ip, [r3, #-4]
 800d01a:	d8d8      	bhi.n	800cfce <__gethex+0x3a6>
 800d01c:	68a3      	ldr	r3, [r4, #8]
 800d01e:	459b      	cmp	fp, r3
 800d020:	db17      	blt.n	800d052 <__gethex+0x42a>
 800d022:	6861      	ldr	r1, [r4, #4]
 800d024:	9802      	ldr	r0, [sp, #8]
 800d026:	3101      	adds	r1, #1
 800d028:	f000 f916 	bl	800d258 <_Balloc>
 800d02c:	4681      	mov	r9, r0
 800d02e:	b918      	cbnz	r0, 800d038 <__gethex+0x410>
 800d030:	4602      	mov	r2, r0
 800d032:	2184      	movs	r1, #132	; 0x84
 800d034:	4b19      	ldr	r3, [pc, #100]	; (800d09c <__gethex+0x474>)
 800d036:	e6ac      	b.n	800cd92 <__gethex+0x16a>
 800d038:	6922      	ldr	r2, [r4, #16]
 800d03a:	f104 010c 	add.w	r1, r4, #12
 800d03e:	3202      	adds	r2, #2
 800d040:	0092      	lsls	r2, r2, #2
 800d042:	300c      	adds	r0, #12
 800d044:	f7fe febc 	bl	800bdc0 <memcpy>
 800d048:	4621      	mov	r1, r4
 800d04a:	9802      	ldr	r0, [sp, #8]
 800d04c:	f000 f944 	bl	800d2d8 <_Bfree>
 800d050:	464c      	mov	r4, r9
 800d052:	6923      	ldr	r3, [r4, #16]
 800d054:	1c5a      	adds	r2, r3, #1
 800d056:	6122      	str	r2, [r4, #16]
 800d058:	2201      	movs	r2, #1
 800d05a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d05e:	615a      	str	r2, [r3, #20]
 800d060:	e7bd      	b.n	800cfde <__gethex+0x3b6>
 800d062:	6922      	ldr	r2, [r4, #16]
 800d064:	455a      	cmp	r2, fp
 800d066:	dd0b      	ble.n	800d080 <__gethex+0x458>
 800d068:	2101      	movs	r1, #1
 800d06a:	4620      	mov	r0, r4
 800d06c:	f7ff fd74 	bl	800cb58 <rshift>
 800d070:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d074:	3501      	adds	r5, #1
 800d076:	42ab      	cmp	r3, r5
 800d078:	f6ff aed5 	blt.w	800ce26 <__gethex+0x1fe>
 800d07c:	2701      	movs	r7, #1
 800d07e:	e7c2      	b.n	800d006 <__gethex+0x3de>
 800d080:	f016 061f 	ands.w	r6, r6, #31
 800d084:	d0fa      	beq.n	800d07c <__gethex+0x454>
 800d086:	449a      	add	sl, r3
 800d088:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d08c:	f000 f9da 	bl	800d444 <__hi0bits>
 800d090:	f1c6 0620 	rsb	r6, r6, #32
 800d094:	42b0      	cmp	r0, r6
 800d096:	dbe7      	blt.n	800d068 <__gethex+0x440>
 800d098:	e7f0      	b.n	800d07c <__gethex+0x454>
 800d09a:	bf00      	nop
 800d09c:	0800edac 	.word	0x0800edac

0800d0a0 <L_shift>:
 800d0a0:	f1c2 0208 	rsb	r2, r2, #8
 800d0a4:	0092      	lsls	r2, r2, #2
 800d0a6:	b570      	push	{r4, r5, r6, lr}
 800d0a8:	f1c2 0620 	rsb	r6, r2, #32
 800d0ac:	6843      	ldr	r3, [r0, #4]
 800d0ae:	6804      	ldr	r4, [r0, #0]
 800d0b0:	fa03 f506 	lsl.w	r5, r3, r6
 800d0b4:	432c      	orrs	r4, r5
 800d0b6:	40d3      	lsrs	r3, r2
 800d0b8:	6004      	str	r4, [r0, #0]
 800d0ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800d0be:	4288      	cmp	r0, r1
 800d0c0:	d3f4      	bcc.n	800d0ac <L_shift+0xc>
 800d0c2:	bd70      	pop	{r4, r5, r6, pc}

0800d0c4 <__match>:
 800d0c4:	b530      	push	{r4, r5, lr}
 800d0c6:	6803      	ldr	r3, [r0, #0]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0ce:	b914      	cbnz	r4, 800d0d6 <__match+0x12>
 800d0d0:	6003      	str	r3, [r0, #0]
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	bd30      	pop	{r4, r5, pc}
 800d0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d0de:	2d19      	cmp	r5, #25
 800d0e0:	bf98      	it	ls
 800d0e2:	3220      	addls	r2, #32
 800d0e4:	42a2      	cmp	r2, r4
 800d0e6:	d0f0      	beq.n	800d0ca <__match+0x6>
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	e7f3      	b.n	800d0d4 <__match+0x10>

0800d0ec <__hexnan>:
 800d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f0:	2500      	movs	r5, #0
 800d0f2:	680b      	ldr	r3, [r1, #0]
 800d0f4:	4682      	mov	sl, r0
 800d0f6:	115e      	asrs	r6, r3, #5
 800d0f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d0fc:	f013 031f 	ands.w	r3, r3, #31
 800d100:	bf18      	it	ne
 800d102:	3604      	addne	r6, #4
 800d104:	1f37      	subs	r7, r6, #4
 800d106:	4690      	mov	r8, r2
 800d108:	46b9      	mov	r9, r7
 800d10a:	463c      	mov	r4, r7
 800d10c:	46ab      	mov	fp, r5
 800d10e:	b087      	sub	sp, #28
 800d110:	6801      	ldr	r1, [r0, #0]
 800d112:	9301      	str	r3, [sp, #4]
 800d114:	f846 5c04 	str.w	r5, [r6, #-4]
 800d118:	9502      	str	r5, [sp, #8]
 800d11a:	784a      	ldrb	r2, [r1, #1]
 800d11c:	1c4b      	adds	r3, r1, #1
 800d11e:	9303      	str	r3, [sp, #12]
 800d120:	b342      	cbz	r2, 800d174 <__hexnan+0x88>
 800d122:	4610      	mov	r0, r2
 800d124:	9105      	str	r1, [sp, #20]
 800d126:	9204      	str	r2, [sp, #16]
 800d128:	f7ff fd69 	bl	800cbfe <__hexdig_fun>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d14f      	bne.n	800d1d0 <__hexnan+0xe4>
 800d130:	9a04      	ldr	r2, [sp, #16]
 800d132:	9905      	ldr	r1, [sp, #20]
 800d134:	2a20      	cmp	r2, #32
 800d136:	d818      	bhi.n	800d16a <__hexnan+0x7e>
 800d138:	9b02      	ldr	r3, [sp, #8]
 800d13a:	459b      	cmp	fp, r3
 800d13c:	dd13      	ble.n	800d166 <__hexnan+0x7a>
 800d13e:	454c      	cmp	r4, r9
 800d140:	d206      	bcs.n	800d150 <__hexnan+0x64>
 800d142:	2d07      	cmp	r5, #7
 800d144:	dc04      	bgt.n	800d150 <__hexnan+0x64>
 800d146:	462a      	mov	r2, r5
 800d148:	4649      	mov	r1, r9
 800d14a:	4620      	mov	r0, r4
 800d14c:	f7ff ffa8 	bl	800d0a0 <L_shift>
 800d150:	4544      	cmp	r4, r8
 800d152:	d950      	bls.n	800d1f6 <__hexnan+0x10a>
 800d154:	2300      	movs	r3, #0
 800d156:	f1a4 0904 	sub.w	r9, r4, #4
 800d15a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d15e:	461d      	mov	r5, r3
 800d160:	464c      	mov	r4, r9
 800d162:	f8cd b008 	str.w	fp, [sp, #8]
 800d166:	9903      	ldr	r1, [sp, #12]
 800d168:	e7d7      	b.n	800d11a <__hexnan+0x2e>
 800d16a:	2a29      	cmp	r2, #41	; 0x29
 800d16c:	d156      	bne.n	800d21c <__hexnan+0x130>
 800d16e:	3102      	adds	r1, #2
 800d170:	f8ca 1000 	str.w	r1, [sl]
 800d174:	f1bb 0f00 	cmp.w	fp, #0
 800d178:	d050      	beq.n	800d21c <__hexnan+0x130>
 800d17a:	454c      	cmp	r4, r9
 800d17c:	d206      	bcs.n	800d18c <__hexnan+0xa0>
 800d17e:	2d07      	cmp	r5, #7
 800d180:	dc04      	bgt.n	800d18c <__hexnan+0xa0>
 800d182:	462a      	mov	r2, r5
 800d184:	4649      	mov	r1, r9
 800d186:	4620      	mov	r0, r4
 800d188:	f7ff ff8a 	bl	800d0a0 <L_shift>
 800d18c:	4544      	cmp	r4, r8
 800d18e:	d934      	bls.n	800d1fa <__hexnan+0x10e>
 800d190:	4623      	mov	r3, r4
 800d192:	f1a8 0204 	sub.w	r2, r8, #4
 800d196:	f853 1b04 	ldr.w	r1, [r3], #4
 800d19a:	429f      	cmp	r7, r3
 800d19c:	f842 1f04 	str.w	r1, [r2, #4]!
 800d1a0:	d2f9      	bcs.n	800d196 <__hexnan+0xaa>
 800d1a2:	1b3b      	subs	r3, r7, r4
 800d1a4:	f023 0303 	bic.w	r3, r3, #3
 800d1a8:	3304      	adds	r3, #4
 800d1aa:	3401      	adds	r4, #1
 800d1ac:	3e03      	subs	r6, #3
 800d1ae:	42b4      	cmp	r4, r6
 800d1b0:	bf88      	it	hi
 800d1b2:	2304      	movhi	r3, #4
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	4443      	add	r3, r8
 800d1b8:	f843 2b04 	str.w	r2, [r3], #4
 800d1bc:	429f      	cmp	r7, r3
 800d1be:	d2fb      	bcs.n	800d1b8 <__hexnan+0xcc>
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	b91b      	cbnz	r3, 800d1cc <__hexnan+0xe0>
 800d1c4:	4547      	cmp	r7, r8
 800d1c6:	d127      	bne.n	800d218 <__hexnan+0x12c>
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	603b      	str	r3, [r7, #0]
 800d1cc:	2005      	movs	r0, #5
 800d1ce:	e026      	b.n	800d21e <__hexnan+0x132>
 800d1d0:	3501      	adds	r5, #1
 800d1d2:	2d08      	cmp	r5, #8
 800d1d4:	f10b 0b01 	add.w	fp, fp, #1
 800d1d8:	dd06      	ble.n	800d1e8 <__hexnan+0xfc>
 800d1da:	4544      	cmp	r4, r8
 800d1dc:	d9c3      	bls.n	800d166 <__hexnan+0x7a>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	2501      	movs	r5, #1
 800d1e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d1e6:	3c04      	subs	r4, #4
 800d1e8:	6822      	ldr	r2, [r4, #0]
 800d1ea:	f000 000f 	and.w	r0, r0, #15
 800d1ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d1f2:	6022      	str	r2, [r4, #0]
 800d1f4:	e7b7      	b.n	800d166 <__hexnan+0x7a>
 800d1f6:	2508      	movs	r5, #8
 800d1f8:	e7b5      	b.n	800d166 <__hexnan+0x7a>
 800d1fa:	9b01      	ldr	r3, [sp, #4]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d0df      	beq.n	800d1c0 <__hexnan+0xd4>
 800d200:	f04f 32ff 	mov.w	r2, #4294967295
 800d204:	f1c3 0320 	rsb	r3, r3, #32
 800d208:	fa22 f303 	lsr.w	r3, r2, r3
 800d20c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d210:	401a      	ands	r2, r3
 800d212:	f846 2c04 	str.w	r2, [r6, #-4]
 800d216:	e7d3      	b.n	800d1c0 <__hexnan+0xd4>
 800d218:	3f04      	subs	r7, #4
 800d21a:	e7d1      	b.n	800d1c0 <__hexnan+0xd4>
 800d21c:	2004      	movs	r0, #4
 800d21e:	b007      	add	sp, #28
 800d220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d224 <malloc>:
 800d224:	4b02      	ldr	r3, [pc, #8]	; (800d230 <malloc+0xc>)
 800d226:	4601      	mov	r1, r0
 800d228:	6818      	ldr	r0, [r3, #0]
 800d22a:	f000 bd27 	b.w	800dc7c <_malloc_r>
 800d22e:	bf00      	nop
 800d230:	200004e8 	.word	0x200004e8

0800d234 <__ascii_mbtowc>:
 800d234:	b082      	sub	sp, #8
 800d236:	b901      	cbnz	r1, 800d23a <__ascii_mbtowc+0x6>
 800d238:	a901      	add	r1, sp, #4
 800d23a:	b142      	cbz	r2, 800d24e <__ascii_mbtowc+0x1a>
 800d23c:	b14b      	cbz	r3, 800d252 <__ascii_mbtowc+0x1e>
 800d23e:	7813      	ldrb	r3, [r2, #0]
 800d240:	600b      	str	r3, [r1, #0]
 800d242:	7812      	ldrb	r2, [r2, #0]
 800d244:	1e10      	subs	r0, r2, #0
 800d246:	bf18      	it	ne
 800d248:	2001      	movne	r0, #1
 800d24a:	b002      	add	sp, #8
 800d24c:	4770      	bx	lr
 800d24e:	4610      	mov	r0, r2
 800d250:	e7fb      	b.n	800d24a <__ascii_mbtowc+0x16>
 800d252:	f06f 0001 	mvn.w	r0, #1
 800d256:	e7f8      	b.n	800d24a <__ascii_mbtowc+0x16>

0800d258 <_Balloc>:
 800d258:	b570      	push	{r4, r5, r6, lr}
 800d25a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d25c:	4604      	mov	r4, r0
 800d25e:	460d      	mov	r5, r1
 800d260:	b976      	cbnz	r6, 800d280 <_Balloc+0x28>
 800d262:	2010      	movs	r0, #16
 800d264:	f7ff ffde 	bl	800d224 <malloc>
 800d268:	4602      	mov	r2, r0
 800d26a:	6260      	str	r0, [r4, #36]	; 0x24
 800d26c:	b920      	cbnz	r0, 800d278 <_Balloc+0x20>
 800d26e:	2166      	movs	r1, #102	; 0x66
 800d270:	4b17      	ldr	r3, [pc, #92]	; (800d2d0 <_Balloc+0x78>)
 800d272:	4818      	ldr	r0, [pc, #96]	; (800d2d4 <_Balloc+0x7c>)
 800d274:	f7ff fc40 	bl	800caf8 <__assert_func>
 800d278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d27c:	6006      	str	r6, [r0, #0]
 800d27e:	60c6      	str	r6, [r0, #12]
 800d280:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d282:	68f3      	ldr	r3, [r6, #12]
 800d284:	b183      	cbz	r3, 800d2a8 <_Balloc+0x50>
 800d286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d28e:	b9b8      	cbnz	r0, 800d2c0 <_Balloc+0x68>
 800d290:	2101      	movs	r1, #1
 800d292:	fa01 f605 	lsl.w	r6, r1, r5
 800d296:	1d72      	adds	r2, r6, #5
 800d298:	4620      	mov	r0, r4
 800d29a:	0092      	lsls	r2, r2, #2
 800d29c:	f000 fc94 	bl	800dbc8 <_calloc_r>
 800d2a0:	b160      	cbz	r0, 800d2bc <_Balloc+0x64>
 800d2a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2a6:	e00e      	b.n	800d2c6 <_Balloc+0x6e>
 800d2a8:	2221      	movs	r2, #33	; 0x21
 800d2aa:	2104      	movs	r1, #4
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	f000 fc8b 	bl	800dbc8 <_calloc_r>
 800d2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2b4:	60f0      	str	r0, [r6, #12]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1e4      	bne.n	800d286 <_Balloc+0x2e>
 800d2bc:	2000      	movs	r0, #0
 800d2be:	bd70      	pop	{r4, r5, r6, pc}
 800d2c0:	6802      	ldr	r2, [r0, #0]
 800d2c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2cc:	e7f7      	b.n	800d2be <_Balloc+0x66>
 800d2ce:	bf00      	nop
 800d2d0:	0800ecf8 	.word	0x0800ecf8
 800d2d4:	0800ee3c 	.word	0x0800ee3c

0800d2d8 <_Bfree>:
 800d2d8:	b570      	push	{r4, r5, r6, lr}
 800d2da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d2dc:	4605      	mov	r5, r0
 800d2de:	460c      	mov	r4, r1
 800d2e0:	b976      	cbnz	r6, 800d300 <_Bfree+0x28>
 800d2e2:	2010      	movs	r0, #16
 800d2e4:	f7ff ff9e 	bl	800d224 <malloc>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	6268      	str	r0, [r5, #36]	; 0x24
 800d2ec:	b920      	cbnz	r0, 800d2f8 <_Bfree+0x20>
 800d2ee:	218a      	movs	r1, #138	; 0x8a
 800d2f0:	4b08      	ldr	r3, [pc, #32]	; (800d314 <_Bfree+0x3c>)
 800d2f2:	4809      	ldr	r0, [pc, #36]	; (800d318 <_Bfree+0x40>)
 800d2f4:	f7ff fc00 	bl	800caf8 <__assert_func>
 800d2f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2fc:	6006      	str	r6, [r0, #0]
 800d2fe:	60c6      	str	r6, [r0, #12]
 800d300:	b13c      	cbz	r4, 800d312 <_Bfree+0x3a>
 800d302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d304:	6862      	ldr	r2, [r4, #4]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d30c:	6021      	str	r1, [r4, #0]
 800d30e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d312:	bd70      	pop	{r4, r5, r6, pc}
 800d314:	0800ecf8 	.word	0x0800ecf8
 800d318:	0800ee3c 	.word	0x0800ee3c

0800d31c <__multadd>:
 800d31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d320:	4698      	mov	r8, r3
 800d322:	460c      	mov	r4, r1
 800d324:	2300      	movs	r3, #0
 800d326:	690e      	ldr	r6, [r1, #16]
 800d328:	4607      	mov	r7, r0
 800d32a:	f101 0014 	add.w	r0, r1, #20
 800d32e:	6805      	ldr	r5, [r0, #0]
 800d330:	3301      	adds	r3, #1
 800d332:	b2a9      	uxth	r1, r5
 800d334:	fb02 8101 	mla	r1, r2, r1, r8
 800d338:	0c2d      	lsrs	r5, r5, #16
 800d33a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d33e:	fb02 c505 	mla	r5, r2, r5, ip
 800d342:	b289      	uxth	r1, r1
 800d344:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d348:	429e      	cmp	r6, r3
 800d34a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d34e:	f840 1b04 	str.w	r1, [r0], #4
 800d352:	dcec      	bgt.n	800d32e <__multadd+0x12>
 800d354:	f1b8 0f00 	cmp.w	r8, #0
 800d358:	d022      	beq.n	800d3a0 <__multadd+0x84>
 800d35a:	68a3      	ldr	r3, [r4, #8]
 800d35c:	42b3      	cmp	r3, r6
 800d35e:	dc19      	bgt.n	800d394 <__multadd+0x78>
 800d360:	6861      	ldr	r1, [r4, #4]
 800d362:	4638      	mov	r0, r7
 800d364:	3101      	adds	r1, #1
 800d366:	f7ff ff77 	bl	800d258 <_Balloc>
 800d36a:	4605      	mov	r5, r0
 800d36c:	b928      	cbnz	r0, 800d37a <__multadd+0x5e>
 800d36e:	4602      	mov	r2, r0
 800d370:	21b5      	movs	r1, #181	; 0xb5
 800d372:	4b0d      	ldr	r3, [pc, #52]	; (800d3a8 <__multadd+0x8c>)
 800d374:	480d      	ldr	r0, [pc, #52]	; (800d3ac <__multadd+0x90>)
 800d376:	f7ff fbbf 	bl	800caf8 <__assert_func>
 800d37a:	6922      	ldr	r2, [r4, #16]
 800d37c:	f104 010c 	add.w	r1, r4, #12
 800d380:	3202      	adds	r2, #2
 800d382:	0092      	lsls	r2, r2, #2
 800d384:	300c      	adds	r0, #12
 800d386:	f7fe fd1b 	bl	800bdc0 <memcpy>
 800d38a:	4621      	mov	r1, r4
 800d38c:	4638      	mov	r0, r7
 800d38e:	f7ff ffa3 	bl	800d2d8 <_Bfree>
 800d392:	462c      	mov	r4, r5
 800d394:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d398:	3601      	adds	r6, #1
 800d39a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d39e:	6126      	str	r6, [r4, #16]
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a6:	bf00      	nop
 800d3a8:	0800edac 	.word	0x0800edac
 800d3ac:	0800ee3c 	.word	0x0800ee3c

0800d3b0 <__s2b>:
 800d3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b4:	4615      	mov	r5, r2
 800d3b6:	2209      	movs	r2, #9
 800d3b8:	461f      	mov	r7, r3
 800d3ba:	3308      	adds	r3, #8
 800d3bc:	460c      	mov	r4, r1
 800d3be:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3c2:	4606      	mov	r6, r0
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	db09      	blt.n	800d3e0 <__s2b+0x30>
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	f7ff ff43 	bl	800d258 <_Balloc>
 800d3d2:	b940      	cbnz	r0, 800d3e6 <__s2b+0x36>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	21ce      	movs	r1, #206	; 0xce
 800d3d8:	4b18      	ldr	r3, [pc, #96]	; (800d43c <__s2b+0x8c>)
 800d3da:	4819      	ldr	r0, [pc, #100]	; (800d440 <__s2b+0x90>)
 800d3dc:	f7ff fb8c 	bl	800caf8 <__assert_func>
 800d3e0:	0052      	lsls	r2, r2, #1
 800d3e2:	3101      	adds	r1, #1
 800d3e4:	e7f0      	b.n	800d3c8 <__s2b+0x18>
 800d3e6:	9b08      	ldr	r3, [sp, #32]
 800d3e8:	2d09      	cmp	r5, #9
 800d3ea:	6143      	str	r3, [r0, #20]
 800d3ec:	f04f 0301 	mov.w	r3, #1
 800d3f0:	6103      	str	r3, [r0, #16]
 800d3f2:	dd16      	ble.n	800d422 <__s2b+0x72>
 800d3f4:	f104 0909 	add.w	r9, r4, #9
 800d3f8:	46c8      	mov	r8, r9
 800d3fa:	442c      	add	r4, r5
 800d3fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d400:	4601      	mov	r1, r0
 800d402:	220a      	movs	r2, #10
 800d404:	4630      	mov	r0, r6
 800d406:	3b30      	subs	r3, #48	; 0x30
 800d408:	f7ff ff88 	bl	800d31c <__multadd>
 800d40c:	45a0      	cmp	r8, r4
 800d40e:	d1f5      	bne.n	800d3fc <__s2b+0x4c>
 800d410:	f1a5 0408 	sub.w	r4, r5, #8
 800d414:	444c      	add	r4, r9
 800d416:	1b2d      	subs	r5, r5, r4
 800d418:	1963      	adds	r3, r4, r5
 800d41a:	42bb      	cmp	r3, r7
 800d41c:	db04      	blt.n	800d428 <__s2b+0x78>
 800d41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d422:	2509      	movs	r5, #9
 800d424:	340a      	adds	r4, #10
 800d426:	e7f6      	b.n	800d416 <__s2b+0x66>
 800d428:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d42c:	4601      	mov	r1, r0
 800d42e:	220a      	movs	r2, #10
 800d430:	4630      	mov	r0, r6
 800d432:	3b30      	subs	r3, #48	; 0x30
 800d434:	f7ff ff72 	bl	800d31c <__multadd>
 800d438:	e7ee      	b.n	800d418 <__s2b+0x68>
 800d43a:	bf00      	nop
 800d43c:	0800edac 	.word	0x0800edac
 800d440:	0800ee3c 	.word	0x0800ee3c

0800d444 <__hi0bits>:
 800d444:	0c02      	lsrs	r2, r0, #16
 800d446:	0412      	lsls	r2, r2, #16
 800d448:	4603      	mov	r3, r0
 800d44a:	b9ca      	cbnz	r2, 800d480 <__hi0bits+0x3c>
 800d44c:	0403      	lsls	r3, r0, #16
 800d44e:	2010      	movs	r0, #16
 800d450:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d454:	bf04      	itt	eq
 800d456:	021b      	lsleq	r3, r3, #8
 800d458:	3008      	addeq	r0, #8
 800d45a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d45e:	bf04      	itt	eq
 800d460:	011b      	lsleq	r3, r3, #4
 800d462:	3004      	addeq	r0, #4
 800d464:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d468:	bf04      	itt	eq
 800d46a:	009b      	lsleq	r3, r3, #2
 800d46c:	3002      	addeq	r0, #2
 800d46e:	2b00      	cmp	r3, #0
 800d470:	db05      	blt.n	800d47e <__hi0bits+0x3a>
 800d472:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d476:	f100 0001 	add.w	r0, r0, #1
 800d47a:	bf08      	it	eq
 800d47c:	2020      	moveq	r0, #32
 800d47e:	4770      	bx	lr
 800d480:	2000      	movs	r0, #0
 800d482:	e7e5      	b.n	800d450 <__hi0bits+0xc>

0800d484 <__lo0bits>:
 800d484:	6803      	ldr	r3, [r0, #0]
 800d486:	4602      	mov	r2, r0
 800d488:	f013 0007 	ands.w	r0, r3, #7
 800d48c:	d00b      	beq.n	800d4a6 <__lo0bits+0x22>
 800d48e:	07d9      	lsls	r1, r3, #31
 800d490:	d422      	bmi.n	800d4d8 <__lo0bits+0x54>
 800d492:	0798      	lsls	r0, r3, #30
 800d494:	bf49      	itett	mi
 800d496:	085b      	lsrmi	r3, r3, #1
 800d498:	089b      	lsrpl	r3, r3, #2
 800d49a:	2001      	movmi	r0, #1
 800d49c:	6013      	strmi	r3, [r2, #0]
 800d49e:	bf5c      	itt	pl
 800d4a0:	2002      	movpl	r0, #2
 800d4a2:	6013      	strpl	r3, [r2, #0]
 800d4a4:	4770      	bx	lr
 800d4a6:	b299      	uxth	r1, r3
 800d4a8:	b909      	cbnz	r1, 800d4ae <__lo0bits+0x2a>
 800d4aa:	2010      	movs	r0, #16
 800d4ac:	0c1b      	lsrs	r3, r3, #16
 800d4ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d4b2:	bf04      	itt	eq
 800d4b4:	0a1b      	lsreq	r3, r3, #8
 800d4b6:	3008      	addeq	r0, #8
 800d4b8:	0719      	lsls	r1, r3, #28
 800d4ba:	bf04      	itt	eq
 800d4bc:	091b      	lsreq	r3, r3, #4
 800d4be:	3004      	addeq	r0, #4
 800d4c0:	0799      	lsls	r1, r3, #30
 800d4c2:	bf04      	itt	eq
 800d4c4:	089b      	lsreq	r3, r3, #2
 800d4c6:	3002      	addeq	r0, #2
 800d4c8:	07d9      	lsls	r1, r3, #31
 800d4ca:	d403      	bmi.n	800d4d4 <__lo0bits+0x50>
 800d4cc:	085b      	lsrs	r3, r3, #1
 800d4ce:	f100 0001 	add.w	r0, r0, #1
 800d4d2:	d003      	beq.n	800d4dc <__lo0bits+0x58>
 800d4d4:	6013      	str	r3, [r2, #0]
 800d4d6:	4770      	bx	lr
 800d4d8:	2000      	movs	r0, #0
 800d4da:	4770      	bx	lr
 800d4dc:	2020      	movs	r0, #32
 800d4de:	4770      	bx	lr

0800d4e0 <__i2b>:
 800d4e0:	b510      	push	{r4, lr}
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	2101      	movs	r1, #1
 800d4e6:	f7ff feb7 	bl	800d258 <_Balloc>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	b928      	cbnz	r0, 800d4fa <__i2b+0x1a>
 800d4ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d4f2:	4b04      	ldr	r3, [pc, #16]	; (800d504 <__i2b+0x24>)
 800d4f4:	4804      	ldr	r0, [pc, #16]	; (800d508 <__i2b+0x28>)
 800d4f6:	f7ff faff 	bl	800caf8 <__assert_func>
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	6144      	str	r4, [r0, #20]
 800d4fe:	6103      	str	r3, [r0, #16]
 800d500:	bd10      	pop	{r4, pc}
 800d502:	bf00      	nop
 800d504:	0800edac 	.word	0x0800edac
 800d508:	0800ee3c 	.word	0x0800ee3c

0800d50c <__multiply>:
 800d50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d510:	4614      	mov	r4, r2
 800d512:	690a      	ldr	r2, [r1, #16]
 800d514:	6923      	ldr	r3, [r4, #16]
 800d516:	460d      	mov	r5, r1
 800d518:	429a      	cmp	r2, r3
 800d51a:	bfbe      	ittt	lt
 800d51c:	460b      	movlt	r3, r1
 800d51e:	4625      	movlt	r5, r4
 800d520:	461c      	movlt	r4, r3
 800d522:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d526:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d52a:	68ab      	ldr	r3, [r5, #8]
 800d52c:	6869      	ldr	r1, [r5, #4]
 800d52e:	eb0a 0709 	add.w	r7, sl, r9
 800d532:	42bb      	cmp	r3, r7
 800d534:	b085      	sub	sp, #20
 800d536:	bfb8      	it	lt
 800d538:	3101      	addlt	r1, #1
 800d53a:	f7ff fe8d 	bl	800d258 <_Balloc>
 800d53e:	b930      	cbnz	r0, 800d54e <__multiply+0x42>
 800d540:	4602      	mov	r2, r0
 800d542:	f240 115d 	movw	r1, #349	; 0x15d
 800d546:	4b41      	ldr	r3, [pc, #260]	; (800d64c <__multiply+0x140>)
 800d548:	4841      	ldr	r0, [pc, #260]	; (800d650 <__multiply+0x144>)
 800d54a:	f7ff fad5 	bl	800caf8 <__assert_func>
 800d54e:	f100 0614 	add.w	r6, r0, #20
 800d552:	4633      	mov	r3, r6
 800d554:	2200      	movs	r2, #0
 800d556:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d55a:	4543      	cmp	r3, r8
 800d55c:	d31e      	bcc.n	800d59c <__multiply+0x90>
 800d55e:	f105 0c14 	add.w	ip, r5, #20
 800d562:	f104 0314 	add.w	r3, r4, #20
 800d566:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d56a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d56e:	9202      	str	r2, [sp, #8]
 800d570:	ebac 0205 	sub.w	r2, ip, r5
 800d574:	3a15      	subs	r2, #21
 800d576:	f022 0203 	bic.w	r2, r2, #3
 800d57a:	3204      	adds	r2, #4
 800d57c:	f105 0115 	add.w	r1, r5, #21
 800d580:	458c      	cmp	ip, r1
 800d582:	bf38      	it	cc
 800d584:	2204      	movcc	r2, #4
 800d586:	9201      	str	r2, [sp, #4]
 800d588:	9a02      	ldr	r2, [sp, #8]
 800d58a:	9303      	str	r3, [sp, #12]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d808      	bhi.n	800d5a2 <__multiply+0x96>
 800d590:	2f00      	cmp	r7, #0
 800d592:	dc55      	bgt.n	800d640 <__multiply+0x134>
 800d594:	6107      	str	r7, [r0, #16]
 800d596:	b005      	add	sp, #20
 800d598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59c:	f843 2b04 	str.w	r2, [r3], #4
 800d5a0:	e7db      	b.n	800d55a <__multiply+0x4e>
 800d5a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d5a6:	f1ba 0f00 	cmp.w	sl, #0
 800d5aa:	d020      	beq.n	800d5ee <__multiply+0xe2>
 800d5ac:	46b1      	mov	r9, r6
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f105 0e14 	add.w	lr, r5, #20
 800d5b4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d5b8:	f8d9 b000 	ldr.w	fp, [r9]
 800d5bc:	b2a1      	uxth	r1, r4
 800d5be:	fa1f fb8b 	uxth.w	fp, fp
 800d5c2:	fb0a b101 	mla	r1, sl, r1, fp
 800d5c6:	4411      	add	r1, r2
 800d5c8:	f8d9 2000 	ldr.w	r2, [r9]
 800d5cc:	0c24      	lsrs	r4, r4, #16
 800d5ce:	0c12      	lsrs	r2, r2, #16
 800d5d0:	fb0a 2404 	mla	r4, sl, r4, r2
 800d5d4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d5d8:	b289      	uxth	r1, r1
 800d5da:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d5de:	45f4      	cmp	ip, lr
 800d5e0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d5e4:	f849 1b04 	str.w	r1, [r9], #4
 800d5e8:	d8e4      	bhi.n	800d5b4 <__multiply+0xa8>
 800d5ea:	9901      	ldr	r1, [sp, #4]
 800d5ec:	5072      	str	r2, [r6, r1]
 800d5ee:	9a03      	ldr	r2, [sp, #12]
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d5f6:	f1b9 0f00 	cmp.w	r9, #0
 800d5fa:	d01f      	beq.n	800d63c <__multiply+0x130>
 800d5fc:	46b6      	mov	lr, r6
 800d5fe:	f04f 0a00 	mov.w	sl, #0
 800d602:	6834      	ldr	r4, [r6, #0]
 800d604:	f105 0114 	add.w	r1, r5, #20
 800d608:	880a      	ldrh	r2, [r1, #0]
 800d60a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d60e:	b2a4      	uxth	r4, r4
 800d610:	fb09 b202 	mla	r2, r9, r2, fp
 800d614:	4492      	add	sl, r2
 800d616:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d61a:	f84e 4b04 	str.w	r4, [lr], #4
 800d61e:	f851 4b04 	ldr.w	r4, [r1], #4
 800d622:	f8be 2000 	ldrh.w	r2, [lr]
 800d626:	0c24      	lsrs	r4, r4, #16
 800d628:	fb09 2404 	mla	r4, r9, r4, r2
 800d62c:	458c      	cmp	ip, r1
 800d62e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d632:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d636:	d8e7      	bhi.n	800d608 <__multiply+0xfc>
 800d638:	9a01      	ldr	r2, [sp, #4]
 800d63a:	50b4      	str	r4, [r6, r2]
 800d63c:	3604      	adds	r6, #4
 800d63e:	e7a3      	b.n	800d588 <__multiply+0x7c>
 800d640:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1a5      	bne.n	800d594 <__multiply+0x88>
 800d648:	3f01      	subs	r7, #1
 800d64a:	e7a1      	b.n	800d590 <__multiply+0x84>
 800d64c:	0800edac 	.word	0x0800edac
 800d650:	0800ee3c 	.word	0x0800ee3c

0800d654 <__pow5mult>:
 800d654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d658:	4615      	mov	r5, r2
 800d65a:	f012 0203 	ands.w	r2, r2, #3
 800d65e:	4606      	mov	r6, r0
 800d660:	460f      	mov	r7, r1
 800d662:	d007      	beq.n	800d674 <__pow5mult+0x20>
 800d664:	4c25      	ldr	r4, [pc, #148]	; (800d6fc <__pow5mult+0xa8>)
 800d666:	3a01      	subs	r2, #1
 800d668:	2300      	movs	r3, #0
 800d66a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d66e:	f7ff fe55 	bl	800d31c <__multadd>
 800d672:	4607      	mov	r7, r0
 800d674:	10ad      	asrs	r5, r5, #2
 800d676:	d03d      	beq.n	800d6f4 <__pow5mult+0xa0>
 800d678:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d67a:	b97c      	cbnz	r4, 800d69c <__pow5mult+0x48>
 800d67c:	2010      	movs	r0, #16
 800d67e:	f7ff fdd1 	bl	800d224 <malloc>
 800d682:	4602      	mov	r2, r0
 800d684:	6270      	str	r0, [r6, #36]	; 0x24
 800d686:	b928      	cbnz	r0, 800d694 <__pow5mult+0x40>
 800d688:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d68c:	4b1c      	ldr	r3, [pc, #112]	; (800d700 <__pow5mult+0xac>)
 800d68e:	481d      	ldr	r0, [pc, #116]	; (800d704 <__pow5mult+0xb0>)
 800d690:	f7ff fa32 	bl	800caf8 <__assert_func>
 800d694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d698:	6004      	str	r4, [r0, #0]
 800d69a:	60c4      	str	r4, [r0, #12]
 800d69c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d6a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6a4:	b94c      	cbnz	r4, 800d6ba <__pow5mult+0x66>
 800d6a6:	f240 2171 	movw	r1, #625	; 0x271
 800d6aa:	4630      	mov	r0, r6
 800d6ac:	f7ff ff18 	bl	800d4e0 <__i2b>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6b8:	6003      	str	r3, [r0, #0]
 800d6ba:	f04f 0900 	mov.w	r9, #0
 800d6be:	07eb      	lsls	r3, r5, #31
 800d6c0:	d50a      	bpl.n	800d6d8 <__pow5mult+0x84>
 800d6c2:	4639      	mov	r1, r7
 800d6c4:	4622      	mov	r2, r4
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f7ff ff20 	bl	800d50c <__multiply>
 800d6cc:	4680      	mov	r8, r0
 800d6ce:	4639      	mov	r1, r7
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	f7ff fe01 	bl	800d2d8 <_Bfree>
 800d6d6:	4647      	mov	r7, r8
 800d6d8:	106d      	asrs	r5, r5, #1
 800d6da:	d00b      	beq.n	800d6f4 <__pow5mult+0xa0>
 800d6dc:	6820      	ldr	r0, [r4, #0]
 800d6de:	b938      	cbnz	r0, 800d6f0 <__pow5mult+0x9c>
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	f7ff ff11 	bl	800d50c <__multiply>
 800d6ea:	6020      	str	r0, [r4, #0]
 800d6ec:	f8c0 9000 	str.w	r9, [r0]
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	e7e4      	b.n	800d6be <__pow5mult+0x6a>
 800d6f4:	4638      	mov	r0, r7
 800d6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6fa:	bf00      	nop
 800d6fc:	0800ef90 	.word	0x0800ef90
 800d700:	0800ecf8 	.word	0x0800ecf8
 800d704:	0800ee3c 	.word	0x0800ee3c

0800d708 <__lshift>:
 800d708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d70c:	460c      	mov	r4, r1
 800d70e:	4607      	mov	r7, r0
 800d710:	4691      	mov	r9, r2
 800d712:	6923      	ldr	r3, [r4, #16]
 800d714:	6849      	ldr	r1, [r1, #4]
 800d716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d71a:	68a3      	ldr	r3, [r4, #8]
 800d71c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d720:	f108 0601 	add.w	r6, r8, #1
 800d724:	42b3      	cmp	r3, r6
 800d726:	db0b      	blt.n	800d740 <__lshift+0x38>
 800d728:	4638      	mov	r0, r7
 800d72a:	f7ff fd95 	bl	800d258 <_Balloc>
 800d72e:	4605      	mov	r5, r0
 800d730:	b948      	cbnz	r0, 800d746 <__lshift+0x3e>
 800d732:	4602      	mov	r2, r0
 800d734:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d738:	4b27      	ldr	r3, [pc, #156]	; (800d7d8 <__lshift+0xd0>)
 800d73a:	4828      	ldr	r0, [pc, #160]	; (800d7dc <__lshift+0xd4>)
 800d73c:	f7ff f9dc 	bl	800caf8 <__assert_func>
 800d740:	3101      	adds	r1, #1
 800d742:	005b      	lsls	r3, r3, #1
 800d744:	e7ee      	b.n	800d724 <__lshift+0x1c>
 800d746:	2300      	movs	r3, #0
 800d748:	f100 0114 	add.w	r1, r0, #20
 800d74c:	f100 0210 	add.w	r2, r0, #16
 800d750:	4618      	mov	r0, r3
 800d752:	4553      	cmp	r3, sl
 800d754:	db33      	blt.n	800d7be <__lshift+0xb6>
 800d756:	6920      	ldr	r0, [r4, #16]
 800d758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d75c:	f104 0314 	add.w	r3, r4, #20
 800d760:	f019 091f 	ands.w	r9, r9, #31
 800d764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d768:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d76c:	d02b      	beq.n	800d7c6 <__lshift+0xbe>
 800d76e:	468a      	mov	sl, r1
 800d770:	2200      	movs	r2, #0
 800d772:	f1c9 0e20 	rsb	lr, r9, #32
 800d776:	6818      	ldr	r0, [r3, #0]
 800d778:	fa00 f009 	lsl.w	r0, r0, r9
 800d77c:	4302      	orrs	r2, r0
 800d77e:	f84a 2b04 	str.w	r2, [sl], #4
 800d782:	f853 2b04 	ldr.w	r2, [r3], #4
 800d786:	459c      	cmp	ip, r3
 800d788:	fa22 f20e 	lsr.w	r2, r2, lr
 800d78c:	d8f3      	bhi.n	800d776 <__lshift+0x6e>
 800d78e:	ebac 0304 	sub.w	r3, ip, r4
 800d792:	3b15      	subs	r3, #21
 800d794:	f023 0303 	bic.w	r3, r3, #3
 800d798:	3304      	adds	r3, #4
 800d79a:	f104 0015 	add.w	r0, r4, #21
 800d79e:	4584      	cmp	ip, r0
 800d7a0:	bf38      	it	cc
 800d7a2:	2304      	movcc	r3, #4
 800d7a4:	50ca      	str	r2, [r1, r3]
 800d7a6:	b10a      	cbz	r2, 800d7ac <__lshift+0xa4>
 800d7a8:	f108 0602 	add.w	r6, r8, #2
 800d7ac:	3e01      	subs	r6, #1
 800d7ae:	4638      	mov	r0, r7
 800d7b0:	4621      	mov	r1, r4
 800d7b2:	612e      	str	r6, [r5, #16]
 800d7b4:	f7ff fd90 	bl	800d2d8 <_Bfree>
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7be:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	e7c5      	b.n	800d752 <__lshift+0x4a>
 800d7c6:	3904      	subs	r1, #4
 800d7c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7cc:	459c      	cmp	ip, r3
 800d7ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7d2:	d8f9      	bhi.n	800d7c8 <__lshift+0xc0>
 800d7d4:	e7ea      	b.n	800d7ac <__lshift+0xa4>
 800d7d6:	bf00      	nop
 800d7d8:	0800edac 	.word	0x0800edac
 800d7dc:	0800ee3c 	.word	0x0800ee3c

0800d7e0 <__mcmp>:
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	690a      	ldr	r2, [r1, #16]
 800d7e4:	6900      	ldr	r0, [r0, #16]
 800d7e6:	b530      	push	{r4, r5, lr}
 800d7e8:	1a80      	subs	r0, r0, r2
 800d7ea:	d10d      	bne.n	800d808 <__mcmp+0x28>
 800d7ec:	3314      	adds	r3, #20
 800d7ee:	3114      	adds	r1, #20
 800d7f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d7f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d7f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d7fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d800:	4295      	cmp	r5, r2
 800d802:	d002      	beq.n	800d80a <__mcmp+0x2a>
 800d804:	d304      	bcc.n	800d810 <__mcmp+0x30>
 800d806:	2001      	movs	r0, #1
 800d808:	bd30      	pop	{r4, r5, pc}
 800d80a:	42a3      	cmp	r3, r4
 800d80c:	d3f4      	bcc.n	800d7f8 <__mcmp+0x18>
 800d80e:	e7fb      	b.n	800d808 <__mcmp+0x28>
 800d810:	f04f 30ff 	mov.w	r0, #4294967295
 800d814:	e7f8      	b.n	800d808 <__mcmp+0x28>
	...

0800d818 <__mdiff>:
 800d818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81c:	460c      	mov	r4, r1
 800d81e:	4606      	mov	r6, r0
 800d820:	4611      	mov	r1, r2
 800d822:	4620      	mov	r0, r4
 800d824:	4692      	mov	sl, r2
 800d826:	f7ff ffdb 	bl	800d7e0 <__mcmp>
 800d82a:	1e05      	subs	r5, r0, #0
 800d82c:	d111      	bne.n	800d852 <__mdiff+0x3a>
 800d82e:	4629      	mov	r1, r5
 800d830:	4630      	mov	r0, r6
 800d832:	f7ff fd11 	bl	800d258 <_Balloc>
 800d836:	4602      	mov	r2, r0
 800d838:	b928      	cbnz	r0, 800d846 <__mdiff+0x2e>
 800d83a:	f240 2132 	movw	r1, #562	; 0x232
 800d83e:	4b3c      	ldr	r3, [pc, #240]	; (800d930 <__mdiff+0x118>)
 800d840:	483c      	ldr	r0, [pc, #240]	; (800d934 <__mdiff+0x11c>)
 800d842:	f7ff f959 	bl	800caf8 <__assert_func>
 800d846:	2301      	movs	r3, #1
 800d848:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d84c:	4610      	mov	r0, r2
 800d84e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d852:	bfa4      	itt	ge
 800d854:	4653      	movge	r3, sl
 800d856:	46a2      	movge	sl, r4
 800d858:	4630      	mov	r0, r6
 800d85a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d85e:	bfa6      	itte	ge
 800d860:	461c      	movge	r4, r3
 800d862:	2500      	movge	r5, #0
 800d864:	2501      	movlt	r5, #1
 800d866:	f7ff fcf7 	bl	800d258 <_Balloc>
 800d86a:	4602      	mov	r2, r0
 800d86c:	b918      	cbnz	r0, 800d876 <__mdiff+0x5e>
 800d86e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d872:	4b2f      	ldr	r3, [pc, #188]	; (800d930 <__mdiff+0x118>)
 800d874:	e7e4      	b.n	800d840 <__mdiff+0x28>
 800d876:	f100 0814 	add.w	r8, r0, #20
 800d87a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d87e:	60c5      	str	r5, [r0, #12]
 800d880:	f04f 0c00 	mov.w	ip, #0
 800d884:	f10a 0514 	add.w	r5, sl, #20
 800d888:	f10a 0010 	add.w	r0, sl, #16
 800d88c:	46c2      	mov	sl, r8
 800d88e:	6926      	ldr	r6, [r4, #16]
 800d890:	f104 0914 	add.w	r9, r4, #20
 800d894:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d898:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d89c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d8a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d8a4:	fa1f f18b 	uxth.w	r1, fp
 800d8a8:	4461      	add	r1, ip
 800d8aa:	fa1f fc83 	uxth.w	ip, r3
 800d8ae:	0c1b      	lsrs	r3, r3, #16
 800d8b0:	eba1 010c 	sub.w	r1, r1, ip
 800d8b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d8b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d8bc:	b289      	uxth	r1, r1
 800d8be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d8c2:	454e      	cmp	r6, r9
 800d8c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d8c8:	f84a 3b04 	str.w	r3, [sl], #4
 800d8cc:	d8e6      	bhi.n	800d89c <__mdiff+0x84>
 800d8ce:	1b33      	subs	r3, r6, r4
 800d8d0:	3b15      	subs	r3, #21
 800d8d2:	f023 0303 	bic.w	r3, r3, #3
 800d8d6:	3415      	adds	r4, #21
 800d8d8:	3304      	adds	r3, #4
 800d8da:	42a6      	cmp	r6, r4
 800d8dc:	bf38      	it	cc
 800d8de:	2304      	movcc	r3, #4
 800d8e0:	441d      	add	r5, r3
 800d8e2:	4443      	add	r3, r8
 800d8e4:	461e      	mov	r6, r3
 800d8e6:	462c      	mov	r4, r5
 800d8e8:	4574      	cmp	r4, lr
 800d8ea:	d30e      	bcc.n	800d90a <__mdiff+0xf2>
 800d8ec:	f10e 0103 	add.w	r1, lr, #3
 800d8f0:	1b49      	subs	r1, r1, r5
 800d8f2:	f021 0103 	bic.w	r1, r1, #3
 800d8f6:	3d03      	subs	r5, #3
 800d8f8:	45ae      	cmp	lr, r5
 800d8fa:	bf38      	it	cc
 800d8fc:	2100      	movcc	r1, #0
 800d8fe:	4419      	add	r1, r3
 800d900:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d904:	b18b      	cbz	r3, 800d92a <__mdiff+0x112>
 800d906:	6117      	str	r7, [r2, #16]
 800d908:	e7a0      	b.n	800d84c <__mdiff+0x34>
 800d90a:	f854 8b04 	ldr.w	r8, [r4], #4
 800d90e:	fa1f f188 	uxth.w	r1, r8
 800d912:	4461      	add	r1, ip
 800d914:	1408      	asrs	r0, r1, #16
 800d916:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d91a:	b289      	uxth	r1, r1
 800d91c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d920:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d924:	f846 1b04 	str.w	r1, [r6], #4
 800d928:	e7de      	b.n	800d8e8 <__mdiff+0xd0>
 800d92a:	3f01      	subs	r7, #1
 800d92c:	e7e8      	b.n	800d900 <__mdiff+0xe8>
 800d92e:	bf00      	nop
 800d930:	0800edac 	.word	0x0800edac
 800d934:	0800ee3c 	.word	0x0800ee3c

0800d938 <__ulp>:
 800d938:	4b11      	ldr	r3, [pc, #68]	; (800d980 <__ulp+0x48>)
 800d93a:	400b      	ands	r3, r1
 800d93c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d940:	2b00      	cmp	r3, #0
 800d942:	dd02      	ble.n	800d94a <__ulp+0x12>
 800d944:	2000      	movs	r0, #0
 800d946:	4619      	mov	r1, r3
 800d948:	4770      	bx	lr
 800d94a:	425b      	negs	r3, r3
 800d94c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d950:	f04f 0000 	mov.w	r0, #0
 800d954:	f04f 0100 	mov.w	r1, #0
 800d958:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d95c:	da04      	bge.n	800d968 <__ulp+0x30>
 800d95e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d962:	fa43 f102 	asr.w	r1, r3, r2
 800d966:	4770      	bx	lr
 800d968:	f1a2 0314 	sub.w	r3, r2, #20
 800d96c:	2b1e      	cmp	r3, #30
 800d96e:	bfd6      	itet	le
 800d970:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d974:	2301      	movgt	r3, #1
 800d976:	fa22 f303 	lsrle.w	r3, r2, r3
 800d97a:	4618      	mov	r0, r3
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop
 800d980:	7ff00000 	.word	0x7ff00000

0800d984 <__b2d>:
 800d984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d988:	6907      	ldr	r7, [r0, #16]
 800d98a:	f100 0914 	add.w	r9, r0, #20
 800d98e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d992:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d996:	f1a7 0804 	sub.w	r8, r7, #4
 800d99a:	4630      	mov	r0, r6
 800d99c:	f7ff fd52 	bl	800d444 <__hi0bits>
 800d9a0:	f1c0 0320 	rsb	r3, r0, #32
 800d9a4:	280a      	cmp	r0, #10
 800d9a6:	600b      	str	r3, [r1, #0]
 800d9a8:	491f      	ldr	r1, [pc, #124]	; (800da28 <__b2d+0xa4>)
 800d9aa:	dc17      	bgt.n	800d9dc <__b2d+0x58>
 800d9ac:	45c1      	cmp	r9, r8
 800d9ae:	bf28      	it	cs
 800d9b0:	2200      	movcs	r2, #0
 800d9b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d9b6:	fa26 f30c 	lsr.w	r3, r6, ip
 800d9ba:	bf38      	it	cc
 800d9bc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d9c0:	ea43 0501 	orr.w	r5, r3, r1
 800d9c4:	f100 0315 	add.w	r3, r0, #21
 800d9c8:	fa06 f303 	lsl.w	r3, r6, r3
 800d9cc:	fa22 f20c 	lsr.w	r2, r2, ip
 800d9d0:	ea43 0402 	orr.w	r4, r3, r2
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9dc:	45c1      	cmp	r9, r8
 800d9de:	bf2e      	itee	cs
 800d9e0:	2200      	movcs	r2, #0
 800d9e2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d9e6:	f1a7 0808 	subcc.w	r8, r7, #8
 800d9ea:	f1b0 030b 	subs.w	r3, r0, #11
 800d9ee:	d016      	beq.n	800da1e <__b2d+0x9a>
 800d9f0:	f1c3 0720 	rsb	r7, r3, #32
 800d9f4:	fa22 f107 	lsr.w	r1, r2, r7
 800d9f8:	45c8      	cmp	r8, r9
 800d9fa:	fa06 f603 	lsl.w	r6, r6, r3
 800d9fe:	ea46 0601 	orr.w	r6, r6, r1
 800da02:	bf94      	ite	ls
 800da04:	2100      	movls	r1, #0
 800da06:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800da0a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800da0e:	fa02 f003 	lsl.w	r0, r2, r3
 800da12:	40f9      	lsrs	r1, r7
 800da14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800da18:	ea40 0401 	orr.w	r4, r0, r1
 800da1c:	e7da      	b.n	800d9d4 <__b2d+0x50>
 800da1e:	4614      	mov	r4, r2
 800da20:	ea46 0501 	orr.w	r5, r6, r1
 800da24:	e7d6      	b.n	800d9d4 <__b2d+0x50>
 800da26:	bf00      	nop
 800da28:	3ff00000 	.word	0x3ff00000

0800da2c <__d2b>:
 800da2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800da30:	2101      	movs	r1, #1
 800da32:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800da36:	4690      	mov	r8, r2
 800da38:	461d      	mov	r5, r3
 800da3a:	f7ff fc0d 	bl	800d258 <_Balloc>
 800da3e:	4604      	mov	r4, r0
 800da40:	b930      	cbnz	r0, 800da50 <__d2b+0x24>
 800da42:	4602      	mov	r2, r0
 800da44:	f240 310a 	movw	r1, #778	; 0x30a
 800da48:	4b24      	ldr	r3, [pc, #144]	; (800dadc <__d2b+0xb0>)
 800da4a:	4825      	ldr	r0, [pc, #148]	; (800dae0 <__d2b+0xb4>)
 800da4c:	f7ff f854 	bl	800caf8 <__assert_func>
 800da50:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800da54:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800da58:	bb2d      	cbnz	r5, 800daa6 <__d2b+0x7a>
 800da5a:	9301      	str	r3, [sp, #4]
 800da5c:	f1b8 0300 	subs.w	r3, r8, #0
 800da60:	d026      	beq.n	800dab0 <__d2b+0x84>
 800da62:	4668      	mov	r0, sp
 800da64:	9300      	str	r3, [sp, #0]
 800da66:	f7ff fd0d 	bl	800d484 <__lo0bits>
 800da6a:	9900      	ldr	r1, [sp, #0]
 800da6c:	b1f0      	cbz	r0, 800daac <__d2b+0x80>
 800da6e:	9a01      	ldr	r2, [sp, #4]
 800da70:	f1c0 0320 	rsb	r3, r0, #32
 800da74:	fa02 f303 	lsl.w	r3, r2, r3
 800da78:	430b      	orrs	r3, r1
 800da7a:	40c2      	lsrs	r2, r0
 800da7c:	6163      	str	r3, [r4, #20]
 800da7e:	9201      	str	r2, [sp, #4]
 800da80:	9b01      	ldr	r3, [sp, #4]
 800da82:	2b00      	cmp	r3, #0
 800da84:	bf14      	ite	ne
 800da86:	2102      	movne	r1, #2
 800da88:	2101      	moveq	r1, #1
 800da8a:	61a3      	str	r3, [r4, #24]
 800da8c:	6121      	str	r1, [r4, #16]
 800da8e:	b1c5      	cbz	r5, 800dac2 <__d2b+0x96>
 800da90:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da94:	4405      	add	r5, r0
 800da96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da9a:	603d      	str	r5, [r7, #0]
 800da9c:	6030      	str	r0, [r6, #0]
 800da9e:	4620      	mov	r0, r4
 800daa0:	b002      	add	sp, #8
 800daa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800daaa:	e7d6      	b.n	800da5a <__d2b+0x2e>
 800daac:	6161      	str	r1, [r4, #20]
 800daae:	e7e7      	b.n	800da80 <__d2b+0x54>
 800dab0:	a801      	add	r0, sp, #4
 800dab2:	f7ff fce7 	bl	800d484 <__lo0bits>
 800dab6:	2101      	movs	r1, #1
 800dab8:	9b01      	ldr	r3, [sp, #4]
 800daba:	6121      	str	r1, [r4, #16]
 800dabc:	6163      	str	r3, [r4, #20]
 800dabe:	3020      	adds	r0, #32
 800dac0:	e7e5      	b.n	800da8e <__d2b+0x62>
 800dac2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800dac6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800daca:	6038      	str	r0, [r7, #0]
 800dacc:	6918      	ldr	r0, [r3, #16]
 800dace:	f7ff fcb9 	bl	800d444 <__hi0bits>
 800dad2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800dad6:	6031      	str	r1, [r6, #0]
 800dad8:	e7e1      	b.n	800da9e <__d2b+0x72>
 800dada:	bf00      	nop
 800dadc:	0800edac 	.word	0x0800edac
 800dae0:	0800ee3c 	.word	0x0800ee3c

0800dae4 <__ratio>:
 800dae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae8:	4688      	mov	r8, r1
 800daea:	4669      	mov	r1, sp
 800daec:	4681      	mov	r9, r0
 800daee:	f7ff ff49 	bl	800d984 <__b2d>
 800daf2:	460f      	mov	r7, r1
 800daf4:	4604      	mov	r4, r0
 800daf6:	460d      	mov	r5, r1
 800daf8:	4640      	mov	r0, r8
 800dafa:	a901      	add	r1, sp, #4
 800dafc:	f7ff ff42 	bl	800d984 <__b2d>
 800db00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db04:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800db08:	468b      	mov	fp, r1
 800db0a:	eba3 0c02 	sub.w	ip, r3, r2
 800db0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800db12:	1a9b      	subs	r3, r3, r2
 800db14:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800db18:	2b00      	cmp	r3, #0
 800db1a:	bfd5      	itete	le
 800db1c:	460a      	movle	r2, r1
 800db1e:	462a      	movgt	r2, r5
 800db20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800db24:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800db28:	bfd8      	it	le
 800db2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800db2e:	465b      	mov	r3, fp
 800db30:	4602      	mov	r2, r0
 800db32:	4639      	mov	r1, r7
 800db34:	4620      	mov	r0, r4
 800db36:	f7f2 fe1b 	bl	8000770 <__aeabi_ddiv>
 800db3a:	b003      	add	sp, #12
 800db3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db40 <__copybits>:
 800db40:	3901      	subs	r1, #1
 800db42:	b570      	push	{r4, r5, r6, lr}
 800db44:	1149      	asrs	r1, r1, #5
 800db46:	6914      	ldr	r4, [r2, #16]
 800db48:	3101      	adds	r1, #1
 800db4a:	f102 0314 	add.w	r3, r2, #20
 800db4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800db52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800db56:	1f05      	subs	r5, r0, #4
 800db58:	42a3      	cmp	r3, r4
 800db5a:	d30c      	bcc.n	800db76 <__copybits+0x36>
 800db5c:	1aa3      	subs	r3, r4, r2
 800db5e:	3b11      	subs	r3, #17
 800db60:	f023 0303 	bic.w	r3, r3, #3
 800db64:	3211      	adds	r2, #17
 800db66:	42a2      	cmp	r2, r4
 800db68:	bf88      	it	hi
 800db6a:	2300      	movhi	r3, #0
 800db6c:	4418      	add	r0, r3
 800db6e:	2300      	movs	r3, #0
 800db70:	4288      	cmp	r0, r1
 800db72:	d305      	bcc.n	800db80 <__copybits+0x40>
 800db74:	bd70      	pop	{r4, r5, r6, pc}
 800db76:	f853 6b04 	ldr.w	r6, [r3], #4
 800db7a:	f845 6f04 	str.w	r6, [r5, #4]!
 800db7e:	e7eb      	b.n	800db58 <__copybits+0x18>
 800db80:	f840 3b04 	str.w	r3, [r0], #4
 800db84:	e7f4      	b.n	800db70 <__copybits+0x30>

0800db86 <__any_on>:
 800db86:	f100 0214 	add.w	r2, r0, #20
 800db8a:	6900      	ldr	r0, [r0, #16]
 800db8c:	114b      	asrs	r3, r1, #5
 800db8e:	4298      	cmp	r0, r3
 800db90:	b510      	push	{r4, lr}
 800db92:	db11      	blt.n	800dbb8 <__any_on+0x32>
 800db94:	dd0a      	ble.n	800dbac <__any_on+0x26>
 800db96:	f011 011f 	ands.w	r1, r1, #31
 800db9a:	d007      	beq.n	800dbac <__any_on+0x26>
 800db9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dba0:	fa24 f001 	lsr.w	r0, r4, r1
 800dba4:	fa00 f101 	lsl.w	r1, r0, r1
 800dba8:	428c      	cmp	r4, r1
 800dbaa:	d10b      	bne.n	800dbc4 <__any_on+0x3e>
 800dbac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d803      	bhi.n	800dbbc <__any_on+0x36>
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	bd10      	pop	{r4, pc}
 800dbb8:	4603      	mov	r3, r0
 800dbba:	e7f7      	b.n	800dbac <__any_on+0x26>
 800dbbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dbc0:	2900      	cmp	r1, #0
 800dbc2:	d0f5      	beq.n	800dbb0 <__any_on+0x2a>
 800dbc4:	2001      	movs	r0, #1
 800dbc6:	e7f6      	b.n	800dbb6 <__any_on+0x30>

0800dbc8 <_calloc_r>:
 800dbc8:	b538      	push	{r3, r4, r5, lr}
 800dbca:	fb02 f501 	mul.w	r5, r2, r1
 800dbce:	4629      	mov	r1, r5
 800dbd0:	f000 f854 	bl	800dc7c <_malloc_r>
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	b118      	cbz	r0, 800dbe0 <_calloc_r+0x18>
 800dbd8:	462a      	mov	r2, r5
 800dbda:	2100      	movs	r1, #0
 800dbdc:	f7fe f8fe 	bl	800bddc <memset>
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	bd38      	pop	{r3, r4, r5, pc}

0800dbe4 <_free_r>:
 800dbe4:	b538      	push	{r3, r4, r5, lr}
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	2900      	cmp	r1, #0
 800dbea:	d043      	beq.n	800dc74 <_free_r+0x90>
 800dbec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbf0:	1f0c      	subs	r4, r1, #4
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	bfb8      	it	lt
 800dbf6:	18e4      	addlt	r4, r4, r3
 800dbf8:	f000 feb2 	bl	800e960 <__malloc_lock>
 800dbfc:	4a1e      	ldr	r2, [pc, #120]	; (800dc78 <_free_r+0x94>)
 800dbfe:	6813      	ldr	r3, [r2, #0]
 800dc00:	4610      	mov	r0, r2
 800dc02:	b933      	cbnz	r3, 800dc12 <_free_r+0x2e>
 800dc04:	6063      	str	r3, [r4, #4]
 800dc06:	6014      	str	r4, [r2, #0]
 800dc08:	4628      	mov	r0, r5
 800dc0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc0e:	f000 bead 	b.w	800e96c <__malloc_unlock>
 800dc12:	42a3      	cmp	r3, r4
 800dc14:	d90a      	bls.n	800dc2c <_free_r+0x48>
 800dc16:	6821      	ldr	r1, [r4, #0]
 800dc18:	1862      	adds	r2, r4, r1
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	bf01      	itttt	eq
 800dc1e:	681a      	ldreq	r2, [r3, #0]
 800dc20:	685b      	ldreq	r3, [r3, #4]
 800dc22:	1852      	addeq	r2, r2, r1
 800dc24:	6022      	streq	r2, [r4, #0]
 800dc26:	6063      	str	r3, [r4, #4]
 800dc28:	6004      	str	r4, [r0, #0]
 800dc2a:	e7ed      	b.n	800dc08 <_free_r+0x24>
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	b10b      	cbz	r3, 800dc36 <_free_r+0x52>
 800dc32:	42a3      	cmp	r3, r4
 800dc34:	d9fa      	bls.n	800dc2c <_free_r+0x48>
 800dc36:	6811      	ldr	r1, [r2, #0]
 800dc38:	1850      	adds	r0, r2, r1
 800dc3a:	42a0      	cmp	r0, r4
 800dc3c:	d10b      	bne.n	800dc56 <_free_r+0x72>
 800dc3e:	6820      	ldr	r0, [r4, #0]
 800dc40:	4401      	add	r1, r0
 800dc42:	1850      	adds	r0, r2, r1
 800dc44:	4283      	cmp	r3, r0
 800dc46:	6011      	str	r1, [r2, #0]
 800dc48:	d1de      	bne.n	800dc08 <_free_r+0x24>
 800dc4a:	6818      	ldr	r0, [r3, #0]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	4401      	add	r1, r0
 800dc50:	6011      	str	r1, [r2, #0]
 800dc52:	6053      	str	r3, [r2, #4]
 800dc54:	e7d8      	b.n	800dc08 <_free_r+0x24>
 800dc56:	d902      	bls.n	800dc5e <_free_r+0x7a>
 800dc58:	230c      	movs	r3, #12
 800dc5a:	602b      	str	r3, [r5, #0]
 800dc5c:	e7d4      	b.n	800dc08 <_free_r+0x24>
 800dc5e:	6820      	ldr	r0, [r4, #0]
 800dc60:	1821      	adds	r1, r4, r0
 800dc62:	428b      	cmp	r3, r1
 800dc64:	bf01      	itttt	eq
 800dc66:	6819      	ldreq	r1, [r3, #0]
 800dc68:	685b      	ldreq	r3, [r3, #4]
 800dc6a:	1809      	addeq	r1, r1, r0
 800dc6c:	6021      	streq	r1, [r4, #0]
 800dc6e:	6063      	str	r3, [r4, #4]
 800dc70:	6054      	str	r4, [r2, #4]
 800dc72:	e7c9      	b.n	800dc08 <_free_r+0x24>
 800dc74:	bd38      	pop	{r3, r4, r5, pc}
 800dc76:	bf00      	nop
 800dc78:	20000908 	.word	0x20000908

0800dc7c <_malloc_r>:
 800dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7e:	1ccd      	adds	r5, r1, #3
 800dc80:	f025 0503 	bic.w	r5, r5, #3
 800dc84:	3508      	adds	r5, #8
 800dc86:	2d0c      	cmp	r5, #12
 800dc88:	bf38      	it	cc
 800dc8a:	250c      	movcc	r5, #12
 800dc8c:	2d00      	cmp	r5, #0
 800dc8e:	4606      	mov	r6, r0
 800dc90:	db01      	blt.n	800dc96 <_malloc_r+0x1a>
 800dc92:	42a9      	cmp	r1, r5
 800dc94:	d903      	bls.n	800dc9e <_malloc_r+0x22>
 800dc96:	230c      	movs	r3, #12
 800dc98:	6033      	str	r3, [r6, #0]
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc9e:	f000 fe5f 	bl	800e960 <__malloc_lock>
 800dca2:	4921      	ldr	r1, [pc, #132]	; (800dd28 <_malloc_r+0xac>)
 800dca4:	680a      	ldr	r2, [r1, #0]
 800dca6:	4614      	mov	r4, r2
 800dca8:	b99c      	cbnz	r4, 800dcd2 <_malloc_r+0x56>
 800dcaa:	4f20      	ldr	r7, [pc, #128]	; (800dd2c <_malloc_r+0xb0>)
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	b923      	cbnz	r3, 800dcba <_malloc_r+0x3e>
 800dcb0:	4621      	mov	r1, r4
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	f000 fb30 	bl	800e318 <_sbrk_r>
 800dcb8:	6038      	str	r0, [r7, #0]
 800dcba:	4629      	mov	r1, r5
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	f000 fb2b 	bl	800e318 <_sbrk_r>
 800dcc2:	1c43      	adds	r3, r0, #1
 800dcc4:	d123      	bne.n	800dd0e <_malloc_r+0x92>
 800dcc6:	230c      	movs	r3, #12
 800dcc8:	4630      	mov	r0, r6
 800dcca:	6033      	str	r3, [r6, #0]
 800dccc:	f000 fe4e 	bl	800e96c <__malloc_unlock>
 800dcd0:	e7e3      	b.n	800dc9a <_malloc_r+0x1e>
 800dcd2:	6823      	ldr	r3, [r4, #0]
 800dcd4:	1b5b      	subs	r3, r3, r5
 800dcd6:	d417      	bmi.n	800dd08 <_malloc_r+0x8c>
 800dcd8:	2b0b      	cmp	r3, #11
 800dcda:	d903      	bls.n	800dce4 <_malloc_r+0x68>
 800dcdc:	6023      	str	r3, [r4, #0]
 800dcde:	441c      	add	r4, r3
 800dce0:	6025      	str	r5, [r4, #0]
 800dce2:	e004      	b.n	800dcee <_malloc_r+0x72>
 800dce4:	6863      	ldr	r3, [r4, #4]
 800dce6:	42a2      	cmp	r2, r4
 800dce8:	bf0c      	ite	eq
 800dcea:	600b      	streq	r3, [r1, #0]
 800dcec:	6053      	strne	r3, [r2, #4]
 800dcee:	4630      	mov	r0, r6
 800dcf0:	f000 fe3c 	bl	800e96c <__malloc_unlock>
 800dcf4:	f104 000b 	add.w	r0, r4, #11
 800dcf8:	1d23      	adds	r3, r4, #4
 800dcfa:	f020 0007 	bic.w	r0, r0, #7
 800dcfe:	1ac2      	subs	r2, r0, r3
 800dd00:	d0cc      	beq.n	800dc9c <_malloc_r+0x20>
 800dd02:	1a1b      	subs	r3, r3, r0
 800dd04:	50a3      	str	r3, [r4, r2]
 800dd06:	e7c9      	b.n	800dc9c <_malloc_r+0x20>
 800dd08:	4622      	mov	r2, r4
 800dd0a:	6864      	ldr	r4, [r4, #4]
 800dd0c:	e7cc      	b.n	800dca8 <_malloc_r+0x2c>
 800dd0e:	1cc4      	adds	r4, r0, #3
 800dd10:	f024 0403 	bic.w	r4, r4, #3
 800dd14:	42a0      	cmp	r0, r4
 800dd16:	d0e3      	beq.n	800dce0 <_malloc_r+0x64>
 800dd18:	1a21      	subs	r1, r4, r0
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	f000 fafc 	bl	800e318 <_sbrk_r>
 800dd20:	3001      	adds	r0, #1
 800dd22:	d1dd      	bne.n	800dce0 <_malloc_r+0x64>
 800dd24:	e7cf      	b.n	800dcc6 <_malloc_r+0x4a>
 800dd26:	bf00      	nop
 800dd28:	20000908 	.word	0x20000908
 800dd2c:	2000090c 	.word	0x2000090c

0800dd30 <__sfputc_r>:
 800dd30:	6893      	ldr	r3, [r2, #8]
 800dd32:	b410      	push	{r4}
 800dd34:	3b01      	subs	r3, #1
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	6093      	str	r3, [r2, #8]
 800dd3a:	da07      	bge.n	800dd4c <__sfputc_r+0x1c>
 800dd3c:	6994      	ldr	r4, [r2, #24]
 800dd3e:	42a3      	cmp	r3, r4
 800dd40:	db01      	blt.n	800dd46 <__sfputc_r+0x16>
 800dd42:	290a      	cmp	r1, #10
 800dd44:	d102      	bne.n	800dd4c <__sfputc_r+0x1c>
 800dd46:	bc10      	pop	{r4}
 800dd48:	f000 bb08 	b.w	800e35c <__swbuf_r>
 800dd4c:	6813      	ldr	r3, [r2, #0]
 800dd4e:	1c58      	adds	r0, r3, #1
 800dd50:	6010      	str	r0, [r2, #0]
 800dd52:	7019      	strb	r1, [r3, #0]
 800dd54:	4608      	mov	r0, r1
 800dd56:	bc10      	pop	{r4}
 800dd58:	4770      	bx	lr

0800dd5a <__sfputs_r>:
 800dd5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	460f      	mov	r7, r1
 800dd60:	4614      	mov	r4, r2
 800dd62:	18d5      	adds	r5, r2, r3
 800dd64:	42ac      	cmp	r4, r5
 800dd66:	d101      	bne.n	800dd6c <__sfputs_r+0x12>
 800dd68:	2000      	movs	r0, #0
 800dd6a:	e007      	b.n	800dd7c <__sfputs_r+0x22>
 800dd6c:	463a      	mov	r2, r7
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd74:	f7ff ffdc 	bl	800dd30 <__sfputc_r>
 800dd78:	1c43      	adds	r3, r0, #1
 800dd7a:	d1f3      	bne.n	800dd64 <__sfputs_r+0xa>
 800dd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd80 <_vfiprintf_r>:
 800dd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd84:	460d      	mov	r5, r1
 800dd86:	4614      	mov	r4, r2
 800dd88:	4698      	mov	r8, r3
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	b09d      	sub	sp, #116	; 0x74
 800dd8e:	b118      	cbz	r0, 800dd98 <_vfiprintf_r+0x18>
 800dd90:	6983      	ldr	r3, [r0, #24]
 800dd92:	b90b      	cbnz	r3, 800dd98 <_vfiprintf_r+0x18>
 800dd94:	f000 fcd2 	bl	800e73c <__sinit>
 800dd98:	4b89      	ldr	r3, [pc, #548]	; (800dfc0 <_vfiprintf_r+0x240>)
 800dd9a:	429d      	cmp	r5, r3
 800dd9c:	d11b      	bne.n	800ddd6 <_vfiprintf_r+0x56>
 800dd9e:	6875      	ldr	r5, [r6, #4]
 800dda0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dda2:	07d9      	lsls	r1, r3, #31
 800dda4:	d405      	bmi.n	800ddb2 <_vfiprintf_r+0x32>
 800dda6:	89ab      	ldrh	r3, [r5, #12]
 800dda8:	059a      	lsls	r2, r3, #22
 800ddaa:	d402      	bmi.n	800ddb2 <_vfiprintf_r+0x32>
 800ddac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddae:	f000 fd63 	bl	800e878 <__retarget_lock_acquire_recursive>
 800ddb2:	89ab      	ldrh	r3, [r5, #12]
 800ddb4:	071b      	lsls	r3, r3, #28
 800ddb6:	d501      	bpl.n	800ddbc <_vfiprintf_r+0x3c>
 800ddb8:	692b      	ldr	r3, [r5, #16]
 800ddba:	b9eb      	cbnz	r3, 800ddf8 <_vfiprintf_r+0x78>
 800ddbc:	4629      	mov	r1, r5
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	f000 fb2c 	bl	800e41c <__swsetup_r>
 800ddc4:	b1c0      	cbz	r0, 800ddf8 <_vfiprintf_r+0x78>
 800ddc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddc8:	07dc      	lsls	r4, r3, #31
 800ddca:	d50e      	bpl.n	800ddea <_vfiprintf_r+0x6a>
 800ddcc:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd0:	b01d      	add	sp, #116	; 0x74
 800ddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd6:	4b7b      	ldr	r3, [pc, #492]	; (800dfc4 <_vfiprintf_r+0x244>)
 800ddd8:	429d      	cmp	r5, r3
 800ddda:	d101      	bne.n	800dde0 <_vfiprintf_r+0x60>
 800dddc:	68b5      	ldr	r5, [r6, #8]
 800ddde:	e7df      	b.n	800dda0 <_vfiprintf_r+0x20>
 800dde0:	4b79      	ldr	r3, [pc, #484]	; (800dfc8 <_vfiprintf_r+0x248>)
 800dde2:	429d      	cmp	r5, r3
 800dde4:	bf08      	it	eq
 800dde6:	68f5      	ldreq	r5, [r6, #12]
 800dde8:	e7da      	b.n	800dda0 <_vfiprintf_r+0x20>
 800ddea:	89ab      	ldrh	r3, [r5, #12]
 800ddec:	0598      	lsls	r0, r3, #22
 800ddee:	d4ed      	bmi.n	800ddcc <_vfiprintf_r+0x4c>
 800ddf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddf2:	f000 fd42 	bl	800e87a <__retarget_lock_release_recursive>
 800ddf6:	e7e9      	b.n	800ddcc <_vfiprintf_r+0x4c>
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ddfc:	2320      	movs	r3, #32
 800ddfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de02:	2330      	movs	r3, #48	; 0x30
 800de04:	f04f 0901 	mov.w	r9, #1
 800de08:	f8cd 800c 	str.w	r8, [sp, #12]
 800de0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800dfcc <_vfiprintf_r+0x24c>
 800de10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de14:	4623      	mov	r3, r4
 800de16:	469a      	mov	sl, r3
 800de18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de1c:	b10a      	cbz	r2, 800de22 <_vfiprintf_r+0xa2>
 800de1e:	2a25      	cmp	r2, #37	; 0x25
 800de20:	d1f9      	bne.n	800de16 <_vfiprintf_r+0x96>
 800de22:	ebba 0b04 	subs.w	fp, sl, r4
 800de26:	d00b      	beq.n	800de40 <_vfiprintf_r+0xc0>
 800de28:	465b      	mov	r3, fp
 800de2a:	4622      	mov	r2, r4
 800de2c:	4629      	mov	r1, r5
 800de2e:	4630      	mov	r0, r6
 800de30:	f7ff ff93 	bl	800dd5a <__sfputs_r>
 800de34:	3001      	adds	r0, #1
 800de36:	f000 80aa 	beq.w	800df8e <_vfiprintf_r+0x20e>
 800de3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de3c:	445a      	add	r2, fp
 800de3e:	9209      	str	r2, [sp, #36]	; 0x24
 800de40:	f89a 3000 	ldrb.w	r3, [sl]
 800de44:	2b00      	cmp	r3, #0
 800de46:	f000 80a2 	beq.w	800df8e <_vfiprintf_r+0x20e>
 800de4a:	2300      	movs	r3, #0
 800de4c:	f04f 32ff 	mov.w	r2, #4294967295
 800de50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de54:	f10a 0a01 	add.w	sl, sl, #1
 800de58:	9304      	str	r3, [sp, #16]
 800de5a:	9307      	str	r3, [sp, #28]
 800de5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de60:	931a      	str	r3, [sp, #104]	; 0x68
 800de62:	4654      	mov	r4, sl
 800de64:	2205      	movs	r2, #5
 800de66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de6a:	4858      	ldr	r0, [pc, #352]	; (800dfcc <_vfiprintf_r+0x24c>)
 800de6c:	f000 fd6a 	bl	800e944 <memchr>
 800de70:	9a04      	ldr	r2, [sp, #16]
 800de72:	b9d8      	cbnz	r0, 800deac <_vfiprintf_r+0x12c>
 800de74:	06d1      	lsls	r1, r2, #27
 800de76:	bf44      	itt	mi
 800de78:	2320      	movmi	r3, #32
 800de7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de7e:	0713      	lsls	r3, r2, #28
 800de80:	bf44      	itt	mi
 800de82:	232b      	movmi	r3, #43	; 0x2b
 800de84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de88:	f89a 3000 	ldrb.w	r3, [sl]
 800de8c:	2b2a      	cmp	r3, #42	; 0x2a
 800de8e:	d015      	beq.n	800debc <_vfiprintf_r+0x13c>
 800de90:	4654      	mov	r4, sl
 800de92:	2000      	movs	r0, #0
 800de94:	f04f 0c0a 	mov.w	ip, #10
 800de98:	9a07      	ldr	r2, [sp, #28]
 800de9a:	4621      	mov	r1, r4
 800de9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dea0:	3b30      	subs	r3, #48	; 0x30
 800dea2:	2b09      	cmp	r3, #9
 800dea4:	d94e      	bls.n	800df44 <_vfiprintf_r+0x1c4>
 800dea6:	b1b0      	cbz	r0, 800ded6 <_vfiprintf_r+0x156>
 800dea8:	9207      	str	r2, [sp, #28]
 800deaa:	e014      	b.n	800ded6 <_vfiprintf_r+0x156>
 800deac:	eba0 0308 	sub.w	r3, r0, r8
 800deb0:	fa09 f303 	lsl.w	r3, r9, r3
 800deb4:	4313      	orrs	r3, r2
 800deb6:	46a2      	mov	sl, r4
 800deb8:	9304      	str	r3, [sp, #16]
 800deba:	e7d2      	b.n	800de62 <_vfiprintf_r+0xe2>
 800debc:	9b03      	ldr	r3, [sp, #12]
 800debe:	1d19      	adds	r1, r3, #4
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	9103      	str	r1, [sp, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	bfbb      	ittet	lt
 800dec8:	425b      	neglt	r3, r3
 800deca:	f042 0202 	orrlt.w	r2, r2, #2
 800dece:	9307      	strge	r3, [sp, #28]
 800ded0:	9307      	strlt	r3, [sp, #28]
 800ded2:	bfb8      	it	lt
 800ded4:	9204      	strlt	r2, [sp, #16]
 800ded6:	7823      	ldrb	r3, [r4, #0]
 800ded8:	2b2e      	cmp	r3, #46	; 0x2e
 800deda:	d10c      	bne.n	800def6 <_vfiprintf_r+0x176>
 800dedc:	7863      	ldrb	r3, [r4, #1]
 800dede:	2b2a      	cmp	r3, #42	; 0x2a
 800dee0:	d135      	bne.n	800df4e <_vfiprintf_r+0x1ce>
 800dee2:	9b03      	ldr	r3, [sp, #12]
 800dee4:	3402      	adds	r4, #2
 800dee6:	1d1a      	adds	r2, r3, #4
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	9203      	str	r2, [sp, #12]
 800deec:	2b00      	cmp	r3, #0
 800deee:	bfb8      	it	lt
 800def0:	f04f 33ff 	movlt.w	r3, #4294967295
 800def4:	9305      	str	r3, [sp, #20]
 800def6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dfdc <_vfiprintf_r+0x25c>
 800defa:	2203      	movs	r2, #3
 800defc:	4650      	mov	r0, sl
 800defe:	7821      	ldrb	r1, [r4, #0]
 800df00:	f000 fd20 	bl	800e944 <memchr>
 800df04:	b140      	cbz	r0, 800df18 <_vfiprintf_r+0x198>
 800df06:	2340      	movs	r3, #64	; 0x40
 800df08:	eba0 000a 	sub.w	r0, r0, sl
 800df0c:	fa03 f000 	lsl.w	r0, r3, r0
 800df10:	9b04      	ldr	r3, [sp, #16]
 800df12:	3401      	adds	r4, #1
 800df14:	4303      	orrs	r3, r0
 800df16:	9304      	str	r3, [sp, #16]
 800df18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df1c:	2206      	movs	r2, #6
 800df1e:	482c      	ldr	r0, [pc, #176]	; (800dfd0 <_vfiprintf_r+0x250>)
 800df20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df24:	f000 fd0e 	bl	800e944 <memchr>
 800df28:	2800      	cmp	r0, #0
 800df2a:	d03f      	beq.n	800dfac <_vfiprintf_r+0x22c>
 800df2c:	4b29      	ldr	r3, [pc, #164]	; (800dfd4 <_vfiprintf_r+0x254>)
 800df2e:	bb1b      	cbnz	r3, 800df78 <_vfiprintf_r+0x1f8>
 800df30:	9b03      	ldr	r3, [sp, #12]
 800df32:	3307      	adds	r3, #7
 800df34:	f023 0307 	bic.w	r3, r3, #7
 800df38:	3308      	adds	r3, #8
 800df3a:	9303      	str	r3, [sp, #12]
 800df3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df3e:	443b      	add	r3, r7
 800df40:	9309      	str	r3, [sp, #36]	; 0x24
 800df42:	e767      	b.n	800de14 <_vfiprintf_r+0x94>
 800df44:	460c      	mov	r4, r1
 800df46:	2001      	movs	r0, #1
 800df48:	fb0c 3202 	mla	r2, ip, r2, r3
 800df4c:	e7a5      	b.n	800de9a <_vfiprintf_r+0x11a>
 800df4e:	2300      	movs	r3, #0
 800df50:	f04f 0c0a 	mov.w	ip, #10
 800df54:	4619      	mov	r1, r3
 800df56:	3401      	adds	r4, #1
 800df58:	9305      	str	r3, [sp, #20]
 800df5a:	4620      	mov	r0, r4
 800df5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df60:	3a30      	subs	r2, #48	; 0x30
 800df62:	2a09      	cmp	r2, #9
 800df64:	d903      	bls.n	800df6e <_vfiprintf_r+0x1ee>
 800df66:	2b00      	cmp	r3, #0
 800df68:	d0c5      	beq.n	800def6 <_vfiprintf_r+0x176>
 800df6a:	9105      	str	r1, [sp, #20]
 800df6c:	e7c3      	b.n	800def6 <_vfiprintf_r+0x176>
 800df6e:	4604      	mov	r4, r0
 800df70:	2301      	movs	r3, #1
 800df72:	fb0c 2101 	mla	r1, ip, r1, r2
 800df76:	e7f0      	b.n	800df5a <_vfiprintf_r+0x1da>
 800df78:	ab03      	add	r3, sp, #12
 800df7a:	9300      	str	r3, [sp, #0]
 800df7c:	462a      	mov	r2, r5
 800df7e:	4630      	mov	r0, r6
 800df80:	4b15      	ldr	r3, [pc, #84]	; (800dfd8 <_vfiprintf_r+0x258>)
 800df82:	a904      	add	r1, sp, #16
 800df84:	f3af 8000 	nop.w
 800df88:	4607      	mov	r7, r0
 800df8a:	1c78      	adds	r0, r7, #1
 800df8c:	d1d6      	bne.n	800df3c <_vfiprintf_r+0x1bc>
 800df8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df90:	07d9      	lsls	r1, r3, #31
 800df92:	d405      	bmi.n	800dfa0 <_vfiprintf_r+0x220>
 800df94:	89ab      	ldrh	r3, [r5, #12]
 800df96:	059a      	lsls	r2, r3, #22
 800df98:	d402      	bmi.n	800dfa0 <_vfiprintf_r+0x220>
 800df9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df9c:	f000 fc6d 	bl	800e87a <__retarget_lock_release_recursive>
 800dfa0:	89ab      	ldrh	r3, [r5, #12]
 800dfa2:	065b      	lsls	r3, r3, #25
 800dfa4:	f53f af12 	bmi.w	800ddcc <_vfiprintf_r+0x4c>
 800dfa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfaa:	e711      	b.n	800ddd0 <_vfiprintf_r+0x50>
 800dfac:	ab03      	add	r3, sp, #12
 800dfae:	9300      	str	r3, [sp, #0]
 800dfb0:	462a      	mov	r2, r5
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	4b08      	ldr	r3, [pc, #32]	; (800dfd8 <_vfiprintf_r+0x258>)
 800dfb6:	a904      	add	r1, sp, #16
 800dfb8:	f000 f882 	bl	800e0c0 <_printf_i>
 800dfbc:	e7e4      	b.n	800df88 <_vfiprintf_r+0x208>
 800dfbe:	bf00      	nop
 800dfc0:	0800f0f0 	.word	0x0800f0f0
 800dfc4:	0800f110 	.word	0x0800f110
 800dfc8:	0800f0d0 	.word	0x0800f0d0
 800dfcc:	0800ef9c 	.word	0x0800ef9c
 800dfd0:	0800efa6 	.word	0x0800efa6
 800dfd4:	00000000 	.word	0x00000000
 800dfd8:	0800dd5b 	.word	0x0800dd5b
 800dfdc:	0800efa2 	.word	0x0800efa2

0800dfe0 <_printf_common>:
 800dfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfe4:	4616      	mov	r6, r2
 800dfe6:	4699      	mov	r9, r3
 800dfe8:	688a      	ldr	r2, [r1, #8]
 800dfea:	690b      	ldr	r3, [r1, #16]
 800dfec:	4607      	mov	r7, r0
 800dfee:	4293      	cmp	r3, r2
 800dff0:	bfb8      	it	lt
 800dff2:	4613      	movlt	r3, r2
 800dff4:	6033      	str	r3, [r6, #0]
 800dff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dffa:	460c      	mov	r4, r1
 800dffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e000:	b10a      	cbz	r2, 800e006 <_printf_common+0x26>
 800e002:	3301      	adds	r3, #1
 800e004:	6033      	str	r3, [r6, #0]
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	0699      	lsls	r1, r3, #26
 800e00a:	bf42      	ittt	mi
 800e00c:	6833      	ldrmi	r3, [r6, #0]
 800e00e:	3302      	addmi	r3, #2
 800e010:	6033      	strmi	r3, [r6, #0]
 800e012:	6825      	ldr	r5, [r4, #0]
 800e014:	f015 0506 	ands.w	r5, r5, #6
 800e018:	d106      	bne.n	800e028 <_printf_common+0x48>
 800e01a:	f104 0a19 	add.w	sl, r4, #25
 800e01e:	68e3      	ldr	r3, [r4, #12]
 800e020:	6832      	ldr	r2, [r6, #0]
 800e022:	1a9b      	subs	r3, r3, r2
 800e024:	42ab      	cmp	r3, r5
 800e026:	dc28      	bgt.n	800e07a <_printf_common+0x9a>
 800e028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e02c:	1e13      	subs	r3, r2, #0
 800e02e:	6822      	ldr	r2, [r4, #0]
 800e030:	bf18      	it	ne
 800e032:	2301      	movne	r3, #1
 800e034:	0692      	lsls	r2, r2, #26
 800e036:	d42d      	bmi.n	800e094 <_printf_common+0xb4>
 800e038:	4649      	mov	r1, r9
 800e03a:	4638      	mov	r0, r7
 800e03c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e040:	47c0      	blx	r8
 800e042:	3001      	adds	r0, #1
 800e044:	d020      	beq.n	800e088 <_printf_common+0xa8>
 800e046:	6823      	ldr	r3, [r4, #0]
 800e048:	68e5      	ldr	r5, [r4, #12]
 800e04a:	f003 0306 	and.w	r3, r3, #6
 800e04e:	2b04      	cmp	r3, #4
 800e050:	bf18      	it	ne
 800e052:	2500      	movne	r5, #0
 800e054:	6832      	ldr	r2, [r6, #0]
 800e056:	f04f 0600 	mov.w	r6, #0
 800e05a:	68a3      	ldr	r3, [r4, #8]
 800e05c:	bf08      	it	eq
 800e05e:	1aad      	subeq	r5, r5, r2
 800e060:	6922      	ldr	r2, [r4, #16]
 800e062:	bf08      	it	eq
 800e064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e068:	4293      	cmp	r3, r2
 800e06a:	bfc4      	itt	gt
 800e06c:	1a9b      	subgt	r3, r3, r2
 800e06e:	18ed      	addgt	r5, r5, r3
 800e070:	341a      	adds	r4, #26
 800e072:	42b5      	cmp	r5, r6
 800e074:	d11a      	bne.n	800e0ac <_printf_common+0xcc>
 800e076:	2000      	movs	r0, #0
 800e078:	e008      	b.n	800e08c <_printf_common+0xac>
 800e07a:	2301      	movs	r3, #1
 800e07c:	4652      	mov	r2, sl
 800e07e:	4649      	mov	r1, r9
 800e080:	4638      	mov	r0, r7
 800e082:	47c0      	blx	r8
 800e084:	3001      	adds	r0, #1
 800e086:	d103      	bne.n	800e090 <_printf_common+0xb0>
 800e088:	f04f 30ff 	mov.w	r0, #4294967295
 800e08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e090:	3501      	adds	r5, #1
 800e092:	e7c4      	b.n	800e01e <_printf_common+0x3e>
 800e094:	2030      	movs	r0, #48	; 0x30
 800e096:	18e1      	adds	r1, r4, r3
 800e098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e09c:	1c5a      	adds	r2, r3, #1
 800e09e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e0a2:	4422      	add	r2, r4
 800e0a4:	3302      	adds	r3, #2
 800e0a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e0aa:	e7c5      	b.n	800e038 <_printf_common+0x58>
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	4622      	mov	r2, r4
 800e0b0:	4649      	mov	r1, r9
 800e0b2:	4638      	mov	r0, r7
 800e0b4:	47c0      	blx	r8
 800e0b6:	3001      	adds	r0, #1
 800e0b8:	d0e6      	beq.n	800e088 <_printf_common+0xa8>
 800e0ba:	3601      	adds	r6, #1
 800e0bc:	e7d9      	b.n	800e072 <_printf_common+0x92>
	...

0800e0c0 <_printf_i>:
 800e0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c4:	460c      	mov	r4, r1
 800e0c6:	7e27      	ldrb	r7, [r4, #24]
 800e0c8:	4691      	mov	r9, r2
 800e0ca:	2f78      	cmp	r7, #120	; 0x78
 800e0cc:	4680      	mov	r8, r0
 800e0ce:	469a      	mov	sl, r3
 800e0d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e0d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e0d6:	d807      	bhi.n	800e0e8 <_printf_i+0x28>
 800e0d8:	2f62      	cmp	r7, #98	; 0x62
 800e0da:	d80a      	bhi.n	800e0f2 <_printf_i+0x32>
 800e0dc:	2f00      	cmp	r7, #0
 800e0de:	f000 80d9 	beq.w	800e294 <_printf_i+0x1d4>
 800e0e2:	2f58      	cmp	r7, #88	; 0x58
 800e0e4:	f000 80a4 	beq.w	800e230 <_printf_i+0x170>
 800e0e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e0ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0f0:	e03a      	b.n	800e168 <_printf_i+0xa8>
 800e0f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0f6:	2b15      	cmp	r3, #21
 800e0f8:	d8f6      	bhi.n	800e0e8 <_printf_i+0x28>
 800e0fa:	a001      	add	r0, pc, #4	; (adr r0, 800e100 <_printf_i+0x40>)
 800e0fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e100:	0800e159 	.word	0x0800e159
 800e104:	0800e16d 	.word	0x0800e16d
 800e108:	0800e0e9 	.word	0x0800e0e9
 800e10c:	0800e0e9 	.word	0x0800e0e9
 800e110:	0800e0e9 	.word	0x0800e0e9
 800e114:	0800e0e9 	.word	0x0800e0e9
 800e118:	0800e16d 	.word	0x0800e16d
 800e11c:	0800e0e9 	.word	0x0800e0e9
 800e120:	0800e0e9 	.word	0x0800e0e9
 800e124:	0800e0e9 	.word	0x0800e0e9
 800e128:	0800e0e9 	.word	0x0800e0e9
 800e12c:	0800e27b 	.word	0x0800e27b
 800e130:	0800e19d 	.word	0x0800e19d
 800e134:	0800e25d 	.word	0x0800e25d
 800e138:	0800e0e9 	.word	0x0800e0e9
 800e13c:	0800e0e9 	.word	0x0800e0e9
 800e140:	0800e29d 	.word	0x0800e29d
 800e144:	0800e0e9 	.word	0x0800e0e9
 800e148:	0800e19d 	.word	0x0800e19d
 800e14c:	0800e0e9 	.word	0x0800e0e9
 800e150:	0800e0e9 	.word	0x0800e0e9
 800e154:	0800e265 	.word	0x0800e265
 800e158:	680b      	ldr	r3, [r1, #0]
 800e15a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e15e:	1d1a      	adds	r2, r3, #4
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	600a      	str	r2, [r1, #0]
 800e164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e168:	2301      	movs	r3, #1
 800e16a:	e0a4      	b.n	800e2b6 <_printf_i+0x1f6>
 800e16c:	6825      	ldr	r5, [r4, #0]
 800e16e:	6808      	ldr	r0, [r1, #0]
 800e170:	062e      	lsls	r6, r5, #24
 800e172:	f100 0304 	add.w	r3, r0, #4
 800e176:	d50a      	bpl.n	800e18e <_printf_i+0xce>
 800e178:	6805      	ldr	r5, [r0, #0]
 800e17a:	600b      	str	r3, [r1, #0]
 800e17c:	2d00      	cmp	r5, #0
 800e17e:	da03      	bge.n	800e188 <_printf_i+0xc8>
 800e180:	232d      	movs	r3, #45	; 0x2d
 800e182:	426d      	negs	r5, r5
 800e184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e188:	230a      	movs	r3, #10
 800e18a:	485e      	ldr	r0, [pc, #376]	; (800e304 <_printf_i+0x244>)
 800e18c:	e019      	b.n	800e1c2 <_printf_i+0x102>
 800e18e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e192:	6805      	ldr	r5, [r0, #0]
 800e194:	600b      	str	r3, [r1, #0]
 800e196:	bf18      	it	ne
 800e198:	b22d      	sxthne	r5, r5
 800e19a:	e7ef      	b.n	800e17c <_printf_i+0xbc>
 800e19c:	680b      	ldr	r3, [r1, #0]
 800e19e:	6825      	ldr	r5, [r4, #0]
 800e1a0:	1d18      	adds	r0, r3, #4
 800e1a2:	6008      	str	r0, [r1, #0]
 800e1a4:	0628      	lsls	r0, r5, #24
 800e1a6:	d501      	bpl.n	800e1ac <_printf_i+0xec>
 800e1a8:	681d      	ldr	r5, [r3, #0]
 800e1aa:	e002      	b.n	800e1b2 <_printf_i+0xf2>
 800e1ac:	0669      	lsls	r1, r5, #25
 800e1ae:	d5fb      	bpl.n	800e1a8 <_printf_i+0xe8>
 800e1b0:	881d      	ldrh	r5, [r3, #0]
 800e1b2:	2f6f      	cmp	r7, #111	; 0x6f
 800e1b4:	bf0c      	ite	eq
 800e1b6:	2308      	moveq	r3, #8
 800e1b8:	230a      	movne	r3, #10
 800e1ba:	4852      	ldr	r0, [pc, #328]	; (800e304 <_printf_i+0x244>)
 800e1bc:	2100      	movs	r1, #0
 800e1be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1c2:	6866      	ldr	r6, [r4, #4]
 800e1c4:	2e00      	cmp	r6, #0
 800e1c6:	bfa8      	it	ge
 800e1c8:	6821      	ldrge	r1, [r4, #0]
 800e1ca:	60a6      	str	r6, [r4, #8]
 800e1cc:	bfa4      	itt	ge
 800e1ce:	f021 0104 	bicge.w	r1, r1, #4
 800e1d2:	6021      	strge	r1, [r4, #0]
 800e1d4:	b90d      	cbnz	r5, 800e1da <_printf_i+0x11a>
 800e1d6:	2e00      	cmp	r6, #0
 800e1d8:	d04d      	beq.n	800e276 <_printf_i+0x1b6>
 800e1da:	4616      	mov	r6, r2
 800e1dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800e1e0:	fb03 5711 	mls	r7, r3, r1, r5
 800e1e4:	5dc7      	ldrb	r7, [r0, r7]
 800e1e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e1ea:	462f      	mov	r7, r5
 800e1ec:	42bb      	cmp	r3, r7
 800e1ee:	460d      	mov	r5, r1
 800e1f0:	d9f4      	bls.n	800e1dc <_printf_i+0x11c>
 800e1f2:	2b08      	cmp	r3, #8
 800e1f4:	d10b      	bne.n	800e20e <_printf_i+0x14e>
 800e1f6:	6823      	ldr	r3, [r4, #0]
 800e1f8:	07df      	lsls	r7, r3, #31
 800e1fa:	d508      	bpl.n	800e20e <_printf_i+0x14e>
 800e1fc:	6923      	ldr	r3, [r4, #16]
 800e1fe:	6861      	ldr	r1, [r4, #4]
 800e200:	4299      	cmp	r1, r3
 800e202:	bfde      	ittt	le
 800e204:	2330      	movle	r3, #48	; 0x30
 800e206:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e20a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e20e:	1b92      	subs	r2, r2, r6
 800e210:	6122      	str	r2, [r4, #16]
 800e212:	464b      	mov	r3, r9
 800e214:	4621      	mov	r1, r4
 800e216:	4640      	mov	r0, r8
 800e218:	f8cd a000 	str.w	sl, [sp]
 800e21c:	aa03      	add	r2, sp, #12
 800e21e:	f7ff fedf 	bl	800dfe0 <_printf_common>
 800e222:	3001      	adds	r0, #1
 800e224:	d14c      	bne.n	800e2c0 <_printf_i+0x200>
 800e226:	f04f 30ff 	mov.w	r0, #4294967295
 800e22a:	b004      	add	sp, #16
 800e22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e230:	4834      	ldr	r0, [pc, #208]	; (800e304 <_printf_i+0x244>)
 800e232:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e236:	680e      	ldr	r6, [r1, #0]
 800e238:	6823      	ldr	r3, [r4, #0]
 800e23a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e23e:	061f      	lsls	r7, r3, #24
 800e240:	600e      	str	r6, [r1, #0]
 800e242:	d514      	bpl.n	800e26e <_printf_i+0x1ae>
 800e244:	07d9      	lsls	r1, r3, #31
 800e246:	bf44      	itt	mi
 800e248:	f043 0320 	orrmi.w	r3, r3, #32
 800e24c:	6023      	strmi	r3, [r4, #0]
 800e24e:	b91d      	cbnz	r5, 800e258 <_printf_i+0x198>
 800e250:	6823      	ldr	r3, [r4, #0]
 800e252:	f023 0320 	bic.w	r3, r3, #32
 800e256:	6023      	str	r3, [r4, #0]
 800e258:	2310      	movs	r3, #16
 800e25a:	e7af      	b.n	800e1bc <_printf_i+0xfc>
 800e25c:	6823      	ldr	r3, [r4, #0]
 800e25e:	f043 0320 	orr.w	r3, r3, #32
 800e262:	6023      	str	r3, [r4, #0]
 800e264:	2378      	movs	r3, #120	; 0x78
 800e266:	4828      	ldr	r0, [pc, #160]	; (800e308 <_printf_i+0x248>)
 800e268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e26c:	e7e3      	b.n	800e236 <_printf_i+0x176>
 800e26e:	065e      	lsls	r6, r3, #25
 800e270:	bf48      	it	mi
 800e272:	b2ad      	uxthmi	r5, r5
 800e274:	e7e6      	b.n	800e244 <_printf_i+0x184>
 800e276:	4616      	mov	r6, r2
 800e278:	e7bb      	b.n	800e1f2 <_printf_i+0x132>
 800e27a:	680b      	ldr	r3, [r1, #0]
 800e27c:	6826      	ldr	r6, [r4, #0]
 800e27e:	1d1d      	adds	r5, r3, #4
 800e280:	6960      	ldr	r0, [r4, #20]
 800e282:	600d      	str	r5, [r1, #0]
 800e284:	0635      	lsls	r5, r6, #24
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	d501      	bpl.n	800e28e <_printf_i+0x1ce>
 800e28a:	6018      	str	r0, [r3, #0]
 800e28c:	e002      	b.n	800e294 <_printf_i+0x1d4>
 800e28e:	0671      	lsls	r1, r6, #25
 800e290:	d5fb      	bpl.n	800e28a <_printf_i+0x1ca>
 800e292:	8018      	strh	r0, [r3, #0]
 800e294:	2300      	movs	r3, #0
 800e296:	4616      	mov	r6, r2
 800e298:	6123      	str	r3, [r4, #16]
 800e29a:	e7ba      	b.n	800e212 <_printf_i+0x152>
 800e29c:	680b      	ldr	r3, [r1, #0]
 800e29e:	1d1a      	adds	r2, r3, #4
 800e2a0:	600a      	str	r2, [r1, #0]
 800e2a2:	681e      	ldr	r6, [r3, #0]
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	4630      	mov	r0, r6
 800e2a8:	6862      	ldr	r2, [r4, #4]
 800e2aa:	f000 fb4b 	bl	800e944 <memchr>
 800e2ae:	b108      	cbz	r0, 800e2b4 <_printf_i+0x1f4>
 800e2b0:	1b80      	subs	r0, r0, r6
 800e2b2:	6060      	str	r0, [r4, #4]
 800e2b4:	6863      	ldr	r3, [r4, #4]
 800e2b6:	6123      	str	r3, [r4, #16]
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2be:	e7a8      	b.n	800e212 <_printf_i+0x152>
 800e2c0:	4632      	mov	r2, r6
 800e2c2:	4649      	mov	r1, r9
 800e2c4:	4640      	mov	r0, r8
 800e2c6:	6923      	ldr	r3, [r4, #16]
 800e2c8:	47d0      	blx	sl
 800e2ca:	3001      	adds	r0, #1
 800e2cc:	d0ab      	beq.n	800e226 <_printf_i+0x166>
 800e2ce:	6823      	ldr	r3, [r4, #0]
 800e2d0:	079b      	lsls	r3, r3, #30
 800e2d2:	d413      	bmi.n	800e2fc <_printf_i+0x23c>
 800e2d4:	68e0      	ldr	r0, [r4, #12]
 800e2d6:	9b03      	ldr	r3, [sp, #12]
 800e2d8:	4298      	cmp	r0, r3
 800e2da:	bfb8      	it	lt
 800e2dc:	4618      	movlt	r0, r3
 800e2de:	e7a4      	b.n	800e22a <_printf_i+0x16a>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	4632      	mov	r2, r6
 800e2e4:	4649      	mov	r1, r9
 800e2e6:	4640      	mov	r0, r8
 800e2e8:	47d0      	blx	sl
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	d09b      	beq.n	800e226 <_printf_i+0x166>
 800e2ee:	3501      	adds	r5, #1
 800e2f0:	68e3      	ldr	r3, [r4, #12]
 800e2f2:	9903      	ldr	r1, [sp, #12]
 800e2f4:	1a5b      	subs	r3, r3, r1
 800e2f6:	42ab      	cmp	r3, r5
 800e2f8:	dcf2      	bgt.n	800e2e0 <_printf_i+0x220>
 800e2fa:	e7eb      	b.n	800e2d4 <_printf_i+0x214>
 800e2fc:	2500      	movs	r5, #0
 800e2fe:	f104 0619 	add.w	r6, r4, #25
 800e302:	e7f5      	b.n	800e2f0 <_printf_i+0x230>
 800e304:	0800efad 	.word	0x0800efad
 800e308:	0800efbe 	.word	0x0800efbe

0800e30c <nan>:
 800e30c:	2000      	movs	r0, #0
 800e30e:	4901      	ldr	r1, [pc, #4]	; (800e314 <nan+0x8>)
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	7ff80000 	.word	0x7ff80000

0800e318 <_sbrk_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	2300      	movs	r3, #0
 800e31c:	4d05      	ldr	r5, [pc, #20]	; (800e334 <_sbrk_r+0x1c>)
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	602b      	str	r3, [r5, #0]
 800e324:	f7f4 fef0 	bl	8003108 <_sbrk>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d102      	bne.n	800e332 <_sbrk_r+0x1a>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	b103      	cbz	r3, 800e332 <_sbrk_r+0x1a>
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	bd38      	pop	{r3, r4, r5, pc}
 800e334:	200013a8 	.word	0x200013a8

0800e338 <strncmp>:
 800e338:	b510      	push	{r4, lr}
 800e33a:	b16a      	cbz	r2, 800e358 <strncmp+0x20>
 800e33c:	3901      	subs	r1, #1
 800e33e:	1884      	adds	r4, r0, r2
 800e340:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e344:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e348:	4293      	cmp	r3, r2
 800e34a:	d103      	bne.n	800e354 <strncmp+0x1c>
 800e34c:	42a0      	cmp	r0, r4
 800e34e:	d001      	beq.n	800e354 <strncmp+0x1c>
 800e350:	2b00      	cmp	r3, #0
 800e352:	d1f5      	bne.n	800e340 <strncmp+0x8>
 800e354:	1a98      	subs	r0, r3, r2
 800e356:	bd10      	pop	{r4, pc}
 800e358:	4610      	mov	r0, r2
 800e35a:	e7fc      	b.n	800e356 <strncmp+0x1e>

0800e35c <__swbuf_r>:
 800e35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e35e:	460e      	mov	r6, r1
 800e360:	4614      	mov	r4, r2
 800e362:	4605      	mov	r5, r0
 800e364:	b118      	cbz	r0, 800e36e <__swbuf_r+0x12>
 800e366:	6983      	ldr	r3, [r0, #24]
 800e368:	b90b      	cbnz	r3, 800e36e <__swbuf_r+0x12>
 800e36a:	f000 f9e7 	bl	800e73c <__sinit>
 800e36e:	4b21      	ldr	r3, [pc, #132]	; (800e3f4 <__swbuf_r+0x98>)
 800e370:	429c      	cmp	r4, r3
 800e372:	d12b      	bne.n	800e3cc <__swbuf_r+0x70>
 800e374:	686c      	ldr	r4, [r5, #4]
 800e376:	69a3      	ldr	r3, [r4, #24]
 800e378:	60a3      	str	r3, [r4, #8]
 800e37a:	89a3      	ldrh	r3, [r4, #12]
 800e37c:	071a      	lsls	r2, r3, #28
 800e37e:	d52f      	bpl.n	800e3e0 <__swbuf_r+0x84>
 800e380:	6923      	ldr	r3, [r4, #16]
 800e382:	b36b      	cbz	r3, 800e3e0 <__swbuf_r+0x84>
 800e384:	6923      	ldr	r3, [r4, #16]
 800e386:	6820      	ldr	r0, [r4, #0]
 800e388:	b2f6      	uxtb	r6, r6
 800e38a:	1ac0      	subs	r0, r0, r3
 800e38c:	6963      	ldr	r3, [r4, #20]
 800e38e:	4637      	mov	r7, r6
 800e390:	4283      	cmp	r3, r0
 800e392:	dc04      	bgt.n	800e39e <__swbuf_r+0x42>
 800e394:	4621      	mov	r1, r4
 800e396:	4628      	mov	r0, r5
 800e398:	f000 f93c 	bl	800e614 <_fflush_r>
 800e39c:	bb30      	cbnz	r0, 800e3ec <__swbuf_r+0x90>
 800e39e:	68a3      	ldr	r3, [r4, #8]
 800e3a0:	3001      	adds	r0, #1
 800e3a2:	3b01      	subs	r3, #1
 800e3a4:	60a3      	str	r3, [r4, #8]
 800e3a6:	6823      	ldr	r3, [r4, #0]
 800e3a8:	1c5a      	adds	r2, r3, #1
 800e3aa:	6022      	str	r2, [r4, #0]
 800e3ac:	701e      	strb	r6, [r3, #0]
 800e3ae:	6963      	ldr	r3, [r4, #20]
 800e3b0:	4283      	cmp	r3, r0
 800e3b2:	d004      	beq.n	800e3be <__swbuf_r+0x62>
 800e3b4:	89a3      	ldrh	r3, [r4, #12]
 800e3b6:	07db      	lsls	r3, r3, #31
 800e3b8:	d506      	bpl.n	800e3c8 <__swbuf_r+0x6c>
 800e3ba:	2e0a      	cmp	r6, #10
 800e3bc:	d104      	bne.n	800e3c8 <__swbuf_r+0x6c>
 800e3be:	4621      	mov	r1, r4
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	f000 f927 	bl	800e614 <_fflush_r>
 800e3c6:	b988      	cbnz	r0, 800e3ec <__swbuf_r+0x90>
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3cc:	4b0a      	ldr	r3, [pc, #40]	; (800e3f8 <__swbuf_r+0x9c>)
 800e3ce:	429c      	cmp	r4, r3
 800e3d0:	d101      	bne.n	800e3d6 <__swbuf_r+0x7a>
 800e3d2:	68ac      	ldr	r4, [r5, #8]
 800e3d4:	e7cf      	b.n	800e376 <__swbuf_r+0x1a>
 800e3d6:	4b09      	ldr	r3, [pc, #36]	; (800e3fc <__swbuf_r+0xa0>)
 800e3d8:	429c      	cmp	r4, r3
 800e3da:	bf08      	it	eq
 800e3dc:	68ec      	ldreq	r4, [r5, #12]
 800e3de:	e7ca      	b.n	800e376 <__swbuf_r+0x1a>
 800e3e0:	4621      	mov	r1, r4
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	f000 f81a 	bl	800e41c <__swsetup_r>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	d0cb      	beq.n	800e384 <__swbuf_r+0x28>
 800e3ec:	f04f 37ff 	mov.w	r7, #4294967295
 800e3f0:	e7ea      	b.n	800e3c8 <__swbuf_r+0x6c>
 800e3f2:	bf00      	nop
 800e3f4:	0800f0f0 	.word	0x0800f0f0
 800e3f8:	0800f110 	.word	0x0800f110
 800e3fc:	0800f0d0 	.word	0x0800f0d0

0800e400 <__ascii_wctomb>:
 800e400:	4603      	mov	r3, r0
 800e402:	4608      	mov	r0, r1
 800e404:	b141      	cbz	r1, 800e418 <__ascii_wctomb+0x18>
 800e406:	2aff      	cmp	r2, #255	; 0xff
 800e408:	d904      	bls.n	800e414 <__ascii_wctomb+0x14>
 800e40a:	228a      	movs	r2, #138	; 0x8a
 800e40c:	f04f 30ff 	mov.w	r0, #4294967295
 800e410:	601a      	str	r2, [r3, #0]
 800e412:	4770      	bx	lr
 800e414:	2001      	movs	r0, #1
 800e416:	700a      	strb	r2, [r1, #0]
 800e418:	4770      	bx	lr
	...

0800e41c <__swsetup_r>:
 800e41c:	4b32      	ldr	r3, [pc, #200]	; (800e4e8 <__swsetup_r+0xcc>)
 800e41e:	b570      	push	{r4, r5, r6, lr}
 800e420:	681d      	ldr	r5, [r3, #0]
 800e422:	4606      	mov	r6, r0
 800e424:	460c      	mov	r4, r1
 800e426:	b125      	cbz	r5, 800e432 <__swsetup_r+0x16>
 800e428:	69ab      	ldr	r3, [r5, #24]
 800e42a:	b913      	cbnz	r3, 800e432 <__swsetup_r+0x16>
 800e42c:	4628      	mov	r0, r5
 800e42e:	f000 f985 	bl	800e73c <__sinit>
 800e432:	4b2e      	ldr	r3, [pc, #184]	; (800e4ec <__swsetup_r+0xd0>)
 800e434:	429c      	cmp	r4, r3
 800e436:	d10f      	bne.n	800e458 <__swsetup_r+0x3c>
 800e438:	686c      	ldr	r4, [r5, #4]
 800e43a:	89a3      	ldrh	r3, [r4, #12]
 800e43c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e440:	0719      	lsls	r1, r3, #28
 800e442:	d42c      	bmi.n	800e49e <__swsetup_r+0x82>
 800e444:	06dd      	lsls	r5, r3, #27
 800e446:	d411      	bmi.n	800e46c <__swsetup_r+0x50>
 800e448:	2309      	movs	r3, #9
 800e44a:	6033      	str	r3, [r6, #0]
 800e44c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e450:	f04f 30ff 	mov.w	r0, #4294967295
 800e454:	81a3      	strh	r3, [r4, #12]
 800e456:	e03e      	b.n	800e4d6 <__swsetup_r+0xba>
 800e458:	4b25      	ldr	r3, [pc, #148]	; (800e4f0 <__swsetup_r+0xd4>)
 800e45a:	429c      	cmp	r4, r3
 800e45c:	d101      	bne.n	800e462 <__swsetup_r+0x46>
 800e45e:	68ac      	ldr	r4, [r5, #8]
 800e460:	e7eb      	b.n	800e43a <__swsetup_r+0x1e>
 800e462:	4b24      	ldr	r3, [pc, #144]	; (800e4f4 <__swsetup_r+0xd8>)
 800e464:	429c      	cmp	r4, r3
 800e466:	bf08      	it	eq
 800e468:	68ec      	ldreq	r4, [r5, #12]
 800e46a:	e7e6      	b.n	800e43a <__swsetup_r+0x1e>
 800e46c:	0758      	lsls	r0, r3, #29
 800e46e:	d512      	bpl.n	800e496 <__swsetup_r+0x7a>
 800e470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e472:	b141      	cbz	r1, 800e486 <__swsetup_r+0x6a>
 800e474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e478:	4299      	cmp	r1, r3
 800e47a:	d002      	beq.n	800e482 <__swsetup_r+0x66>
 800e47c:	4630      	mov	r0, r6
 800e47e:	f7ff fbb1 	bl	800dbe4 <_free_r>
 800e482:	2300      	movs	r3, #0
 800e484:	6363      	str	r3, [r4, #52]	; 0x34
 800e486:	89a3      	ldrh	r3, [r4, #12]
 800e488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e48c:	81a3      	strh	r3, [r4, #12]
 800e48e:	2300      	movs	r3, #0
 800e490:	6063      	str	r3, [r4, #4]
 800e492:	6923      	ldr	r3, [r4, #16]
 800e494:	6023      	str	r3, [r4, #0]
 800e496:	89a3      	ldrh	r3, [r4, #12]
 800e498:	f043 0308 	orr.w	r3, r3, #8
 800e49c:	81a3      	strh	r3, [r4, #12]
 800e49e:	6923      	ldr	r3, [r4, #16]
 800e4a0:	b94b      	cbnz	r3, 800e4b6 <__swsetup_r+0x9a>
 800e4a2:	89a3      	ldrh	r3, [r4, #12]
 800e4a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4ac:	d003      	beq.n	800e4b6 <__swsetup_r+0x9a>
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f000 fa07 	bl	800e8c4 <__smakebuf_r>
 800e4b6:	89a0      	ldrh	r0, [r4, #12]
 800e4b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4bc:	f010 0301 	ands.w	r3, r0, #1
 800e4c0:	d00a      	beq.n	800e4d8 <__swsetup_r+0xbc>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	60a3      	str	r3, [r4, #8]
 800e4c6:	6963      	ldr	r3, [r4, #20]
 800e4c8:	425b      	negs	r3, r3
 800e4ca:	61a3      	str	r3, [r4, #24]
 800e4cc:	6923      	ldr	r3, [r4, #16]
 800e4ce:	b943      	cbnz	r3, 800e4e2 <__swsetup_r+0xc6>
 800e4d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e4d4:	d1ba      	bne.n	800e44c <__swsetup_r+0x30>
 800e4d6:	bd70      	pop	{r4, r5, r6, pc}
 800e4d8:	0781      	lsls	r1, r0, #30
 800e4da:	bf58      	it	pl
 800e4dc:	6963      	ldrpl	r3, [r4, #20]
 800e4de:	60a3      	str	r3, [r4, #8]
 800e4e0:	e7f4      	b.n	800e4cc <__swsetup_r+0xb0>
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	e7f7      	b.n	800e4d6 <__swsetup_r+0xba>
 800e4e6:	bf00      	nop
 800e4e8:	200004e8 	.word	0x200004e8
 800e4ec:	0800f0f0 	.word	0x0800f0f0
 800e4f0:	0800f110 	.word	0x0800f110
 800e4f4:	0800f0d0 	.word	0x0800f0d0

0800e4f8 <abort>:
 800e4f8:	2006      	movs	r0, #6
 800e4fa:	b508      	push	{r3, lr}
 800e4fc:	f000 fa64 	bl	800e9c8 <raise>
 800e500:	2001      	movs	r0, #1
 800e502:	f7f4 fd8e 	bl	8003022 <_exit>
	...

0800e508 <__sflush_r>:
 800e508:	898a      	ldrh	r2, [r1, #12]
 800e50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50e:	4605      	mov	r5, r0
 800e510:	0710      	lsls	r0, r2, #28
 800e512:	460c      	mov	r4, r1
 800e514:	d458      	bmi.n	800e5c8 <__sflush_r+0xc0>
 800e516:	684b      	ldr	r3, [r1, #4]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	dc05      	bgt.n	800e528 <__sflush_r+0x20>
 800e51c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e51e:	2b00      	cmp	r3, #0
 800e520:	dc02      	bgt.n	800e528 <__sflush_r+0x20>
 800e522:	2000      	movs	r0, #0
 800e524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e52a:	2e00      	cmp	r6, #0
 800e52c:	d0f9      	beq.n	800e522 <__sflush_r+0x1a>
 800e52e:	2300      	movs	r3, #0
 800e530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e534:	682f      	ldr	r7, [r5, #0]
 800e536:	602b      	str	r3, [r5, #0]
 800e538:	d032      	beq.n	800e5a0 <__sflush_r+0x98>
 800e53a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e53c:	89a3      	ldrh	r3, [r4, #12]
 800e53e:	075a      	lsls	r2, r3, #29
 800e540:	d505      	bpl.n	800e54e <__sflush_r+0x46>
 800e542:	6863      	ldr	r3, [r4, #4]
 800e544:	1ac0      	subs	r0, r0, r3
 800e546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e548:	b10b      	cbz	r3, 800e54e <__sflush_r+0x46>
 800e54a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e54c:	1ac0      	subs	r0, r0, r3
 800e54e:	2300      	movs	r3, #0
 800e550:	4602      	mov	r2, r0
 800e552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e554:	4628      	mov	r0, r5
 800e556:	6a21      	ldr	r1, [r4, #32]
 800e558:	47b0      	blx	r6
 800e55a:	1c43      	adds	r3, r0, #1
 800e55c:	89a3      	ldrh	r3, [r4, #12]
 800e55e:	d106      	bne.n	800e56e <__sflush_r+0x66>
 800e560:	6829      	ldr	r1, [r5, #0]
 800e562:	291d      	cmp	r1, #29
 800e564:	d82c      	bhi.n	800e5c0 <__sflush_r+0xb8>
 800e566:	4a2a      	ldr	r2, [pc, #168]	; (800e610 <__sflush_r+0x108>)
 800e568:	40ca      	lsrs	r2, r1
 800e56a:	07d6      	lsls	r6, r2, #31
 800e56c:	d528      	bpl.n	800e5c0 <__sflush_r+0xb8>
 800e56e:	2200      	movs	r2, #0
 800e570:	6062      	str	r2, [r4, #4]
 800e572:	6922      	ldr	r2, [r4, #16]
 800e574:	04d9      	lsls	r1, r3, #19
 800e576:	6022      	str	r2, [r4, #0]
 800e578:	d504      	bpl.n	800e584 <__sflush_r+0x7c>
 800e57a:	1c42      	adds	r2, r0, #1
 800e57c:	d101      	bne.n	800e582 <__sflush_r+0x7a>
 800e57e:	682b      	ldr	r3, [r5, #0]
 800e580:	b903      	cbnz	r3, 800e584 <__sflush_r+0x7c>
 800e582:	6560      	str	r0, [r4, #84]	; 0x54
 800e584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e586:	602f      	str	r7, [r5, #0]
 800e588:	2900      	cmp	r1, #0
 800e58a:	d0ca      	beq.n	800e522 <__sflush_r+0x1a>
 800e58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e590:	4299      	cmp	r1, r3
 800e592:	d002      	beq.n	800e59a <__sflush_r+0x92>
 800e594:	4628      	mov	r0, r5
 800e596:	f7ff fb25 	bl	800dbe4 <_free_r>
 800e59a:	2000      	movs	r0, #0
 800e59c:	6360      	str	r0, [r4, #52]	; 0x34
 800e59e:	e7c1      	b.n	800e524 <__sflush_r+0x1c>
 800e5a0:	6a21      	ldr	r1, [r4, #32]
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	47b0      	blx	r6
 800e5a8:	1c41      	adds	r1, r0, #1
 800e5aa:	d1c7      	bne.n	800e53c <__sflush_r+0x34>
 800e5ac:	682b      	ldr	r3, [r5, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d0c4      	beq.n	800e53c <__sflush_r+0x34>
 800e5b2:	2b1d      	cmp	r3, #29
 800e5b4:	d001      	beq.n	800e5ba <__sflush_r+0xb2>
 800e5b6:	2b16      	cmp	r3, #22
 800e5b8:	d101      	bne.n	800e5be <__sflush_r+0xb6>
 800e5ba:	602f      	str	r7, [r5, #0]
 800e5bc:	e7b1      	b.n	800e522 <__sflush_r+0x1a>
 800e5be:	89a3      	ldrh	r3, [r4, #12]
 800e5c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5c4:	81a3      	strh	r3, [r4, #12]
 800e5c6:	e7ad      	b.n	800e524 <__sflush_r+0x1c>
 800e5c8:	690f      	ldr	r7, [r1, #16]
 800e5ca:	2f00      	cmp	r7, #0
 800e5cc:	d0a9      	beq.n	800e522 <__sflush_r+0x1a>
 800e5ce:	0793      	lsls	r3, r2, #30
 800e5d0:	bf18      	it	ne
 800e5d2:	2300      	movne	r3, #0
 800e5d4:	680e      	ldr	r6, [r1, #0]
 800e5d6:	bf08      	it	eq
 800e5d8:	694b      	ldreq	r3, [r1, #20]
 800e5da:	eba6 0807 	sub.w	r8, r6, r7
 800e5de:	600f      	str	r7, [r1, #0]
 800e5e0:	608b      	str	r3, [r1, #8]
 800e5e2:	f1b8 0f00 	cmp.w	r8, #0
 800e5e6:	dd9c      	ble.n	800e522 <__sflush_r+0x1a>
 800e5e8:	4643      	mov	r3, r8
 800e5ea:	463a      	mov	r2, r7
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	6a21      	ldr	r1, [r4, #32]
 800e5f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5f2:	47b0      	blx	r6
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	dc06      	bgt.n	800e606 <__sflush_r+0xfe>
 800e5f8:	89a3      	ldrh	r3, [r4, #12]
 800e5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e602:	81a3      	strh	r3, [r4, #12]
 800e604:	e78e      	b.n	800e524 <__sflush_r+0x1c>
 800e606:	4407      	add	r7, r0
 800e608:	eba8 0800 	sub.w	r8, r8, r0
 800e60c:	e7e9      	b.n	800e5e2 <__sflush_r+0xda>
 800e60e:	bf00      	nop
 800e610:	20400001 	.word	0x20400001

0800e614 <_fflush_r>:
 800e614:	b538      	push	{r3, r4, r5, lr}
 800e616:	690b      	ldr	r3, [r1, #16]
 800e618:	4605      	mov	r5, r0
 800e61a:	460c      	mov	r4, r1
 800e61c:	b913      	cbnz	r3, 800e624 <_fflush_r+0x10>
 800e61e:	2500      	movs	r5, #0
 800e620:	4628      	mov	r0, r5
 800e622:	bd38      	pop	{r3, r4, r5, pc}
 800e624:	b118      	cbz	r0, 800e62e <_fflush_r+0x1a>
 800e626:	6983      	ldr	r3, [r0, #24]
 800e628:	b90b      	cbnz	r3, 800e62e <_fflush_r+0x1a>
 800e62a:	f000 f887 	bl	800e73c <__sinit>
 800e62e:	4b14      	ldr	r3, [pc, #80]	; (800e680 <_fflush_r+0x6c>)
 800e630:	429c      	cmp	r4, r3
 800e632:	d11b      	bne.n	800e66c <_fflush_r+0x58>
 800e634:	686c      	ldr	r4, [r5, #4]
 800e636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0ef      	beq.n	800e61e <_fflush_r+0xa>
 800e63e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e640:	07d0      	lsls	r0, r2, #31
 800e642:	d404      	bmi.n	800e64e <_fflush_r+0x3a>
 800e644:	0599      	lsls	r1, r3, #22
 800e646:	d402      	bmi.n	800e64e <_fflush_r+0x3a>
 800e648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e64a:	f000 f915 	bl	800e878 <__retarget_lock_acquire_recursive>
 800e64e:	4628      	mov	r0, r5
 800e650:	4621      	mov	r1, r4
 800e652:	f7ff ff59 	bl	800e508 <__sflush_r>
 800e656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e658:	4605      	mov	r5, r0
 800e65a:	07da      	lsls	r2, r3, #31
 800e65c:	d4e0      	bmi.n	800e620 <_fflush_r+0xc>
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	059b      	lsls	r3, r3, #22
 800e662:	d4dd      	bmi.n	800e620 <_fflush_r+0xc>
 800e664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e666:	f000 f908 	bl	800e87a <__retarget_lock_release_recursive>
 800e66a:	e7d9      	b.n	800e620 <_fflush_r+0xc>
 800e66c:	4b05      	ldr	r3, [pc, #20]	; (800e684 <_fflush_r+0x70>)
 800e66e:	429c      	cmp	r4, r3
 800e670:	d101      	bne.n	800e676 <_fflush_r+0x62>
 800e672:	68ac      	ldr	r4, [r5, #8]
 800e674:	e7df      	b.n	800e636 <_fflush_r+0x22>
 800e676:	4b04      	ldr	r3, [pc, #16]	; (800e688 <_fflush_r+0x74>)
 800e678:	429c      	cmp	r4, r3
 800e67a:	bf08      	it	eq
 800e67c:	68ec      	ldreq	r4, [r5, #12]
 800e67e:	e7da      	b.n	800e636 <_fflush_r+0x22>
 800e680:	0800f0f0 	.word	0x0800f0f0
 800e684:	0800f110 	.word	0x0800f110
 800e688:	0800f0d0 	.word	0x0800f0d0

0800e68c <std>:
 800e68c:	2300      	movs	r3, #0
 800e68e:	b510      	push	{r4, lr}
 800e690:	4604      	mov	r4, r0
 800e692:	e9c0 3300 	strd	r3, r3, [r0]
 800e696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e69a:	6083      	str	r3, [r0, #8]
 800e69c:	8181      	strh	r1, [r0, #12]
 800e69e:	6643      	str	r3, [r0, #100]	; 0x64
 800e6a0:	81c2      	strh	r2, [r0, #14]
 800e6a2:	6183      	str	r3, [r0, #24]
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	2208      	movs	r2, #8
 800e6a8:	305c      	adds	r0, #92	; 0x5c
 800e6aa:	f7fd fb97 	bl	800bddc <memset>
 800e6ae:	4b05      	ldr	r3, [pc, #20]	; (800e6c4 <std+0x38>)
 800e6b0:	6224      	str	r4, [r4, #32]
 800e6b2:	6263      	str	r3, [r4, #36]	; 0x24
 800e6b4:	4b04      	ldr	r3, [pc, #16]	; (800e6c8 <std+0x3c>)
 800e6b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6b8:	4b04      	ldr	r3, [pc, #16]	; (800e6cc <std+0x40>)
 800e6ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6bc:	4b04      	ldr	r3, [pc, #16]	; (800e6d0 <std+0x44>)
 800e6be:	6323      	str	r3, [r4, #48]	; 0x30
 800e6c0:	bd10      	pop	{r4, pc}
 800e6c2:	bf00      	nop
 800e6c4:	0800ea01 	.word	0x0800ea01
 800e6c8:	0800ea23 	.word	0x0800ea23
 800e6cc:	0800ea5b 	.word	0x0800ea5b
 800e6d0:	0800ea7f 	.word	0x0800ea7f

0800e6d4 <_cleanup_r>:
 800e6d4:	4901      	ldr	r1, [pc, #4]	; (800e6dc <_cleanup_r+0x8>)
 800e6d6:	f000 b8af 	b.w	800e838 <_fwalk_reent>
 800e6da:	bf00      	nop
 800e6dc:	0800e615 	.word	0x0800e615

0800e6e0 <__sfmoreglue>:
 800e6e0:	b570      	push	{r4, r5, r6, lr}
 800e6e2:	2568      	movs	r5, #104	; 0x68
 800e6e4:	1e4a      	subs	r2, r1, #1
 800e6e6:	4355      	muls	r5, r2
 800e6e8:	460e      	mov	r6, r1
 800e6ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e6ee:	f7ff fac5 	bl	800dc7c <_malloc_r>
 800e6f2:	4604      	mov	r4, r0
 800e6f4:	b140      	cbz	r0, 800e708 <__sfmoreglue+0x28>
 800e6f6:	2100      	movs	r1, #0
 800e6f8:	e9c0 1600 	strd	r1, r6, [r0]
 800e6fc:	300c      	adds	r0, #12
 800e6fe:	60a0      	str	r0, [r4, #8]
 800e700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e704:	f7fd fb6a 	bl	800bddc <memset>
 800e708:	4620      	mov	r0, r4
 800e70a:	bd70      	pop	{r4, r5, r6, pc}

0800e70c <__sfp_lock_acquire>:
 800e70c:	4801      	ldr	r0, [pc, #4]	; (800e714 <__sfp_lock_acquire+0x8>)
 800e70e:	f000 b8b3 	b.w	800e878 <__retarget_lock_acquire_recursive>
 800e712:	bf00      	nop
 800e714:	200013a4 	.word	0x200013a4

0800e718 <__sfp_lock_release>:
 800e718:	4801      	ldr	r0, [pc, #4]	; (800e720 <__sfp_lock_release+0x8>)
 800e71a:	f000 b8ae 	b.w	800e87a <__retarget_lock_release_recursive>
 800e71e:	bf00      	nop
 800e720:	200013a4 	.word	0x200013a4

0800e724 <__sinit_lock_acquire>:
 800e724:	4801      	ldr	r0, [pc, #4]	; (800e72c <__sinit_lock_acquire+0x8>)
 800e726:	f000 b8a7 	b.w	800e878 <__retarget_lock_acquire_recursive>
 800e72a:	bf00      	nop
 800e72c:	2000139f 	.word	0x2000139f

0800e730 <__sinit_lock_release>:
 800e730:	4801      	ldr	r0, [pc, #4]	; (800e738 <__sinit_lock_release+0x8>)
 800e732:	f000 b8a2 	b.w	800e87a <__retarget_lock_release_recursive>
 800e736:	bf00      	nop
 800e738:	2000139f 	.word	0x2000139f

0800e73c <__sinit>:
 800e73c:	b510      	push	{r4, lr}
 800e73e:	4604      	mov	r4, r0
 800e740:	f7ff fff0 	bl	800e724 <__sinit_lock_acquire>
 800e744:	69a3      	ldr	r3, [r4, #24]
 800e746:	b11b      	cbz	r3, 800e750 <__sinit+0x14>
 800e748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e74c:	f7ff bff0 	b.w	800e730 <__sinit_lock_release>
 800e750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e754:	6523      	str	r3, [r4, #80]	; 0x50
 800e756:	4b13      	ldr	r3, [pc, #76]	; (800e7a4 <__sinit+0x68>)
 800e758:	4a13      	ldr	r2, [pc, #76]	; (800e7a8 <__sinit+0x6c>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e75e:	42a3      	cmp	r3, r4
 800e760:	bf08      	it	eq
 800e762:	2301      	moveq	r3, #1
 800e764:	4620      	mov	r0, r4
 800e766:	bf08      	it	eq
 800e768:	61a3      	streq	r3, [r4, #24]
 800e76a:	f000 f81f 	bl	800e7ac <__sfp>
 800e76e:	6060      	str	r0, [r4, #4]
 800e770:	4620      	mov	r0, r4
 800e772:	f000 f81b 	bl	800e7ac <__sfp>
 800e776:	60a0      	str	r0, [r4, #8]
 800e778:	4620      	mov	r0, r4
 800e77a:	f000 f817 	bl	800e7ac <__sfp>
 800e77e:	2200      	movs	r2, #0
 800e780:	2104      	movs	r1, #4
 800e782:	60e0      	str	r0, [r4, #12]
 800e784:	6860      	ldr	r0, [r4, #4]
 800e786:	f7ff ff81 	bl	800e68c <std>
 800e78a:	2201      	movs	r2, #1
 800e78c:	2109      	movs	r1, #9
 800e78e:	68a0      	ldr	r0, [r4, #8]
 800e790:	f7ff ff7c 	bl	800e68c <std>
 800e794:	2202      	movs	r2, #2
 800e796:	2112      	movs	r1, #18
 800e798:	68e0      	ldr	r0, [r4, #12]
 800e79a:	f7ff ff77 	bl	800e68c <std>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	61a3      	str	r3, [r4, #24]
 800e7a2:	e7d1      	b.n	800e748 <__sinit+0xc>
 800e7a4:	0800ec98 	.word	0x0800ec98
 800e7a8:	0800e6d5 	.word	0x0800e6d5

0800e7ac <__sfp>:
 800e7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ae:	4607      	mov	r7, r0
 800e7b0:	f7ff ffac 	bl	800e70c <__sfp_lock_acquire>
 800e7b4:	4b1e      	ldr	r3, [pc, #120]	; (800e830 <__sfp+0x84>)
 800e7b6:	681e      	ldr	r6, [r3, #0]
 800e7b8:	69b3      	ldr	r3, [r6, #24]
 800e7ba:	b913      	cbnz	r3, 800e7c2 <__sfp+0x16>
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f7ff ffbd 	bl	800e73c <__sinit>
 800e7c2:	3648      	adds	r6, #72	; 0x48
 800e7c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	d503      	bpl.n	800e7d4 <__sfp+0x28>
 800e7cc:	6833      	ldr	r3, [r6, #0]
 800e7ce:	b30b      	cbz	r3, 800e814 <__sfp+0x68>
 800e7d0:	6836      	ldr	r6, [r6, #0]
 800e7d2:	e7f7      	b.n	800e7c4 <__sfp+0x18>
 800e7d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e7d8:	b9d5      	cbnz	r5, 800e810 <__sfp+0x64>
 800e7da:	4b16      	ldr	r3, [pc, #88]	; (800e834 <__sfp+0x88>)
 800e7dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e7e0:	60e3      	str	r3, [r4, #12]
 800e7e2:	6665      	str	r5, [r4, #100]	; 0x64
 800e7e4:	f000 f847 	bl	800e876 <__retarget_lock_init_recursive>
 800e7e8:	f7ff ff96 	bl	800e718 <__sfp_lock_release>
 800e7ec:	2208      	movs	r2, #8
 800e7ee:	4629      	mov	r1, r5
 800e7f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e7f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e7f8:	6025      	str	r5, [r4, #0]
 800e7fa:	61a5      	str	r5, [r4, #24]
 800e7fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e800:	f7fd faec 	bl	800bddc <memset>
 800e804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e80c:	4620      	mov	r0, r4
 800e80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e810:	3468      	adds	r4, #104	; 0x68
 800e812:	e7d9      	b.n	800e7c8 <__sfp+0x1c>
 800e814:	2104      	movs	r1, #4
 800e816:	4638      	mov	r0, r7
 800e818:	f7ff ff62 	bl	800e6e0 <__sfmoreglue>
 800e81c:	4604      	mov	r4, r0
 800e81e:	6030      	str	r0, [r6, #0]
 800e820:	2800      	cmp	r0, #0
 800e822:	d1d5      	bne.n	800e7d0 <__sfp+0x24>
 800e824:	f7ff ff78 	bl	800e718 <__sfp_lock_release>
 800e828:	230c      	movs	r3, #12
 800e82a:	603b      	str	r3, [r7, #0]
 800e82c:	e7ee      	b.n	800e80c <__sfp+0x60>
 800e82e:	bf00      	nop
 800e830:	0800ec98 	.word	0x0800ec98
 800e834:	ffff0001 	.word	0xffff0001

0800e838 <_fwalk_reent>:
 800e838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e83c:	4606      	mov	r6, r0
 800e83e:	4688      	mov	r8, r1
 800e840:	2700      	movs	r7, #0
 800e842:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e84a:	f1b9 0901 	subs.w	r9, r9, #1
 800e84e:	d505      	bpl.n	800e85c <_fwalk_reent+0x24>
 800e850:	6824      	ldr	r4, [r4, #0]
 800e852:	2c00      	cmp	r4, #0
 800e854:	d1f7      	bne.n	800e846 <_fwalk_reent+0xe>
 800e856:	4638      	mov	r0, r7
 800e858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e85c:	89ab      	ldrh	r3, [r5, #12]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d907      	bls.n	800e872 <_fwalk_reent+0x3a>
 800e862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e866:	3301      	adds	r3, #1
 800e868:	d003      	beq.n	800e872 <_fwalk_reent+0x3a>
 800e86a:	4629      	mov	r1, r5
 800e86c:	4630      	mov	r0, r6
 800e86e:	47c0      	blx	r8
 800e870:	4307      	orrs	r7, r0
 800e872:	3568      	adds	r5, #104	; 0x68
 800e874:	e7e9      	b.n	800e84a <_fwalk_reent+0x12>

0800e876 <__retarget_lock_init_recursive>:
 800e876:	4770      	bx	lr

0800e878 <__retarget_lock_acquire_recursive>:
 800e878:	4770      	bx	lr

0800e87a <__retarget_lock_release_recursive>:
 800e87a:	4770      	bx	lr

0800e87c <__swhatbuf_r>:
 800e87c:	b570      	push	{r4, r5, r6, lr}
 800e87e:	460e      	mov	r6, r1
 800e880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e884:	4614      	mov	r4, r2
 800e886:	2900      	cmp	r1, #0
 800e888:	461d      	mov	r5, r3
 800e88a:	b096      	sub	sp, #88	; 0x58
 800e88c:	da07      	bge.n	800e89e <__swhatbuf_r+0x22>
 800e88e:	2300      	movs	r3, #0
 800e890:	602b      	str	r3, [r5, #0]
 800e892:	89b3      	ldrh	r3, [r6, #12]
 800e894:	061a      	lsls	r2, r3, #24
 800e896:	d410      	bmi.n	800e8ba <__swhatbuf_r+0x3e>
 800e898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e89c:	e00e      	b.n	800e8bc <__swhatbuf_r+0x40>
 800e89e:	466a      	mov	r2, sp
 800e8a0:	f000 f914 	bl	800eacc <_fstat_r>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	dbf2      	blt.n	800e88e <__swhatbuf_r+0x12>
 800e8a8:	9a01      	ldr	r2, [sp, #4]
 800e8aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e8ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e8b2:	425a      	negs	r2, r3
 800e8b4:	415a      	adcs	r2, r3
 800e8b6:	602a      	str	r2, [r5, #0]
 800e8b8:	e7ee      	b.n	800e898 <__swhatbuf_r+0x1c>
 800e8ba:	2340      	movs	r3, #64	; 0x40
 800e8bc:	2000      	movs	r0, #0
 800e8be:	6023      	str	r3, [r4, #0]
 800e8c0:	b016      	add	sp, #88	; 0x58
 800e8c2:	bd70      	pop	{r4, r5, r6, pc}

0800e8c4 <__smakebuf_r>:
 800e8c4:	898b      	ldrh	r3, [r1, #12]
 800e8c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e8c8:	079d      	lsls	r5, r3, #30
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	460c      	mov	r4, r1
 800e8ce:	d507      	bpl.n	800e8e0 <__smakebuf_r+0x1c>
 800e8d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e8d4:	6023      	str	r3, [r4, #0]
 800e8d6:	6123      	str	r3, [r4, #16]
 800e8d8:	2301      	movs	r3, #1
 800e8da:	6163      	str	r3, [r4, #20]
 800e8dc:	b002      	add	sp, #8
 800e8de:	bd70      	pop	{r4, r5, r6, pc}
 800e8e0:	466a      	mov	r2, sp
 800e8e2:	ab01      	add	r3, sp, #4
 800e8e4:	f7ff ffca 	bl	800e87c <__swhatbuf_r>
 800e8e8:	9900      	ldr	r1, [sp, #0]
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	4630      	mov	r0, r6
 800e8ee:	f7ff f9c5 	bl	800dc7c <_malloc_r>
 800e8f2:	b948      	cbnz	r0, 800e908 <__smakebuf_r+0x44>
 800e8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8f8:	059a      	lsls	r2, r3, #22
 800e8fa:	d4ef      	bmi.n	800e8dc <__smakebuf_r+0x18>
 800e8fc:	f023 0303 	bic.w	r3, r3, #3
 800e900:	f043 0302 	orr.w	r3, r3, #2
 800e904:	81a3      	strh	r3, [r4, #12]
 800e906:	e7e3      	b.n	800e8d0 <__smakebuf_r+0xc>
 800e908:	4b0d      	ldr	r3, [pc, #52]	; (800e940 <__smakebuf_r+0x7c>)
 800e90a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e90c:	89a3      	ldrh	r3, [r4, #12]
 800e90e:	6020      	str	r0, [r4, #0]
 800e910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e914:	81a3      	strh	r3, [r4, #12]
 800e916:	9b00      	ldr	r3, [sp, #0]
 800e918:	6120      	str	r0, [r4, #16]
 800e91a:	6163      	str	r3, [r4, #20]
 800e91c:	9b01      	ldr	r3, [sp, #4]
 800e91e:	b15b      	cbz	r3, 800e938 <__smakebuf_r+0x74>
 800e920:	4630      	mov	r0, r6
 800e922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e926:	f000 f8e3 	bl	800eaf0 <_isatty_r>
 800e92a:	b128      	cbz	r0, 800e938 <__smakebuf_r+0x74>
 800e92c:	89a3      	ldrh	r3, [r4, #12]
 800e92e:	f023 0303 	bic.w	r3, r3, #3
 800e932:	f043 0301 	orr.w	r3, r3, #1
 800e936:	81a3      	strh	r3, [r4, #12]
 800e938:	89a0      	ldrh	r0, [r4, #12]
 800e93a:	4305      	orrs	r5, r0
 800e93c:	81a5      	strh	r5, [r4, #12]
 800e93e:	e7cd      	b.n	800e8dc <__smakebuf_r+0x18>
 800e940:	0800e6d5 	.word	0x0800e6d5

0800e944 <memchr>:
 800e944:	4603      	mov	r3, r0
 800e946:	b510      	push	{r4, lr}
 800e948:	b2c9      	uxtb	r1, r1
 800e94a:	4402      	add	r2, r0
 800e94c:	4293      	cmp	r3, r2
 800e94e:	4618      	mov	r0, r3
 800e950:	d101      	bne.n	800e956 <memchr+0x12>
 800e952:	2000      	movs	r0, #0
 800e954:	e003      	b.n	800e95e <memchr+0x1a>
 800e956:	7804      	ldrb	r4, [r0, #0]
 800e958:	3301      	adds	r3, #1
 800e95a:	428c      	cmp	r4, r1
 800e95c:	d1f6      	bne.n	800e94c <memchr+0x8>
 800e95e:	bd10      	pop	{r4, pc}

0800e960 <__malloc_lock>:
 800e960:	4801      	ldr	r0, [pc, #4]	; (800e968 <__malloc_lock+0x8>)
 800e962:	f7ff bf89 	b.w	800e878 <__retarget_lock_acquire_recursive>
 800e966:	bf00      	nop
 800e968:	200013a0 	.word	0x200013a0

0800e96c <__malloc_unlock>:
 800e96c:	4801      	ldr	r0, [pc, #4]	; (800e974 <__malloc_unlock+0x8>)
 800e96e:	f7ff bf84 	b.w	800e87a <__retarget_lock_release_recursive>
 800e972:	bf00      	nop
 800e974:	200013a0 	.word	0x200013a0

0800e978 <_raise_r>:
 800e978:	291f      	cmp	r1, #31
 800e97a:	b538      	push	{r3, r4, r5, lr}
 800e97c:	4604      	mov	r4, r0
 800e97e:	460d      	mov	r5, r1
 800e980:	d904      	bls.n	800e98c <_raise_r+0x14>
 800e982:	2316      	movs	r3, #22
 800e984:	6003      	str	r3, [r0, #0]
 800e986:	f04f 30ff 	mov.w	r0, #4294967295
 800e98a:	bd38      	pop	{r3, r4, r5, pc}
 800e98c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e98e:	b112      	cbz	r2, 800e996 <_raise_r+0x1e>
 800e990:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e994:	b94b      	cbnz	r3, 800e9aa <_raise_r+0x32>
 800e996:	4620      	mov	r0, r4
 800e998:	f000 f830 	bl	800e9fc <_getpid_r>
 800e99c:	462a      	mov	r2, r5
 800e99e:	4601      	mov	r1, r0
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9a6:	f000 b817 	b.w	800e9d8 <_kill_r>
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d00a      	beq.n	800e9c4 <_raise_r+0x4c>
 800e9ae:	1c59      	adds	r1, r3, #1
 800e9b0:	d103      	bne.n	800e9ba <_raise_r+0x42>
 800e9b2:	2316      	movs	r3, #22
 800e9b4:	6003      	str	r3, [r0, #0]
 800e9b6:	2001      	movs	r0, #1
 800e9b8:	e7e7      	b.n	800e98a <_raise_r+0x12>
 800e9ba:	2400      	movs	r4, #0
 800e9bc:	4628      	mov	r0, r5
 800e9be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e9c2:	4798      	blx	r3
 800e9c4:	2000      	movs	r0, #0
 800e9c6:	e7e0      	b.n	800e98a <_raise_r+0x12>

0800e9c8 <raise>:
 800e9c8:	4b02      	ldr	r3, [pc, #8]	; (800e9d4 <raise+0xc>)
 800e9ca:	4601      	mov	r1, r0
 800e9cc:	6818      	ldr	r0, [r3, #0]
 800e9ce:	f7ff bfd3 	b.w	800e978 <_raise_r>
 800e9d2:	bf00      	nop
 800e9d4:	200004e8 	.word	0x200004e8

0800e9d8 <_kill_r>:
 800e9d8:	b538      	push	{r3, r4, r5, lr}
 800e9da:	2300      	movs	r3, #0
 800e9dc:	4d06      	ldr	r5, [pc, #24]	; (800e9f8 <_kill_r+0x20>)
 800e9de:	4604      	mov	r4, r0
 800e9e0:	4608      	mov	r0, r1
 800e9e2:	4611      	mov	r1, r2
 800e9e4:	602b      	str	r3, [r5, #0]
 800e9e6:	f7f4 fb0c 	bl	8003002 <_kill>
 800e9ea:	1c43      	adds	r3, r0, #1
 800e9ec:	d102      	bne.n	800e9f4 <_kill_r+0x1c>
 800e9ee:	682b      	ldr	r3, [r5, #0]
 800e9f0:	b103      	cbz	r3, 800e9f4 <_kill_r+0x1c>
 800e9f2:	6023      	str	r3, [r4, #0]
 800e9f4:	bd38      	pop	{r3, r4, r5, pc}
 800e9f6:	bf00      	nop
 800e9f8:	200013a8 	.word	0x200013a8

0800e9fc <_getpid_r>:
 800e9fc:	f7f4 bafa 	b.w	8002ff4 <_getpid>

0800ea00 <__sread>:
 800ea00:	b510      	push	{r4, lr}
 800ea02:	460c      	mov	r4, r1
 800ea04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea08:	f000 f894 	bl	800eb34 <_read_r>
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	bfab      	itete	ge
 800ea10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea12:	89a3      	ldrhlt	r3, [r4, #12]
 800ea14:	181b      	addge	r3, r3, r0
 800ea16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea1a:	bfac      	ite	ge
 800ea1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea1e:	81a3      	strhlt	r3, [r4, #12]
 800ea20:	bd10      	pop	{r4, pc}

0800ea22 <__swrite>:
 800ea22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea26:	461f      	mov	r7, r3
 800ea28:	898b      	ldrh	r3, [r1, #12]
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	05db      	lsls	r3, r3, #23
 800ea2e:	460c      	mov	r4, r1
 800ea30:	4616      	mov	r6, r2
 800ea32:	d505      	bpl.n	800ea40 <__swrite+0x1e>
 800ea34:	2302      	movs	r3, #2
 800ea36:	2200      	movs	r2, #0
 800ea38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea3c:	f000 f868 	bl	800eb10 <_lseek_r>
 800ea40:	89a3      	ldrh	r3, [r4, #12]
 800ea42:	4632      	mov	r2, r6
 800ea44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea48:	81a3      	strh	r3, [r4, #12]
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	463b      	mov	r3, r7
 800ea4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea56:	f000 b817 	b.w	800ea88 <_write_r>

0800ea5a <__sseek>:
 800ea5a:	b510      	push	{r4, lr}
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea62:	f000 f855 	bl	800eb10 <_lseek_r>
 800ea66:	1c43      	adds	r3, r0, #1
 800ea68:	89a3      	ldrh	r3, [r4, #12]
 800ea6a:	bf15      	itete	ne
 800ea6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea76:	81a3      	strheq	r3, [r4, #12]
 800ea78:	bf18      	it	ne
 800ea7a:	81a3      	strhne	r3, [r4, #12]
 800ea7c:	bd10      	pop	{r4, pc}

0800ea7e <__sclose>:
 800ea7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea82:	f000 b813 	b.w	800eaac <_close_r>
	...

0800ea88 <_write_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	4608      	mov	r0, r1
 800ea8e:	4611      	mov	r1, r2
 800ea90:	2200      	movs	r2, #0
 800ea92:	4d05      	ldr	r5, [pc, #20]	; (800eaa8 <_write_r+0x20>)
 800ea94:	602a      	str	r2, [r5, #0]
 800ea96:	461a      	mov	r2, r3
 800ea98:	f7f4 faea 	bl	8003070 <_write>
 800ea9c:	1c43      	adds	r3, r0, #1
 800ea9e:	d102      	bne.n	800eaa6 <_write_r+0x1e>
 800eaa0:	682b      	ldr	r3, [r5, #0]
 800eaa2:	b103      	cbz	r3, 800eaa6 <_write_r+0x1e>
 800eaa4:	6023      	str	r3, [r4, #0]
 800eaa6:	bd38      	pop	{r3, r4, r5, pc}
 800eaa8:	200013a8 	.word	0x200013a8

0800eaac <_close_r>:
 800eaac:	b538      	push	{r3, r4, r5, lr}
 800eaae:	2300      	movs	r3, #0
 800eab0:	4d05      	ldr	r5, [pc, #20]	; (800eac8 <_close_r+0x1c>)
 800eab2:	4604      	mov	r4, r0
 800eab4:	4608      	mov	r0, r1
 800eab6:	602b      	str	r3, [r5, #0]
 800eab8:	f7f4 faf6 	bl	80030a8 <_close>
 800eabc:	1c43      	adds	r3, r0, #1
 800eabe:	d102      	bne.n	800eac6 <_close_r+0x1a>
 800eac0:	682b      	ldr	r3, [r5, #0]
 800eac2:	b103      	cbz	r3, 800eac6 <_close_r+0x1a>
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	200013a8 	.word	0x200013a8

0800eacc <_fstat_r>:
 800eacc:	b538      	push	{r3, r4, r5, lr}
 800eace:	2300      	movs	r3, #0
 800ead0:	4d06      	ldr	r5, [pc, #24]	; (800eaec <_fstat_r+0x20>)
 800ead2:	4604      	mov	r4, r0
 800ead4:	4608      	mov	r0, r1
 800ead6:	4611      	mov	r1, r2
 800ead8:	602b      	str	r3, [r5, #0]
 800eada:	f7f4 faf0 	bl	80030be <_fstat>
 800eade:	1c43      	adds	r3, r0, #1
 800eae0:	d102      	bne.n	800eae8 <_fstat_r+0x1c>
 800eae2:	682b      	ldr	r3, [r5, #0]
 800eae4:	b103      	cbz	r3, 800eae8 <_fstat_r+0x1c>
 800eae6:	6023      	str	r3, [r4, #0]
 800eae8:	bd38      	pop	{r3, r4, r5, pc}
 800eaea:	bf00      	nop
 800eaec:	200013a8 	.word	0x200013a8

0800eaf0 <_isatty_r>:
 800eaf0:	b538      	push	{r3, r4, r5, lr}
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	4d05      	ldr	r5, [pc, #20]	; (800eb0c <_isatty_r+0x1c>)
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	4608      	mov	r0, r1
 800eafa:	602b      	str	r3, [r5, #0]
 800eafc:	f7f4 faee 	bl	80030dc <_isatty>
 800eb00:	1c43      	adds	r3, r0, #1
 800eb02:	d102      	bne.n	800eb0a <_isatty_r+0x1a>
 800eb04:	682b      	ldr	r3, [r5, #0]
 800eb06:	b103      	cbz	r3, 800eb0a <_isatty_r+0x1a>
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}
 800eb0c:	200013a8 	.word	0x200013a8

0800eb10 <_lseek_r>:
 800eb10:	b538      	push	{r3, r4, r5, lr}
 800eb12:	4604      	mov	r4, r0
 800eb14:	4608      	mov	r0, r1
 800eb16:	4611      	mov	r1, r2
 800eb18:	2200      	movs	r2, #0
 800eb1a:	4d05      	ldr	r5, [pc, #20]	; (800eb30 <_lseek_r+0x20>)
 800eb1c:	602a      	str	r2, [r5, #0]
 800eb1e:	461a      	mov	r2, r3
 800eb20:	f7f4 fae6 	bl	80030f0 <_lseek>
 800eb24:	1c43      	adds	r3, r0, #1
 800eb26:	d102      	bne.n	800eb2e <_lseek_r+0x1e>
 800eb28:	682b      	ldr	r3, [r5, #0]
 800eb2a:	b103      	cbz	r3, 800eb2e <_lseek_r+0x1e>
 800eb2c:	6023      	str	r3, [r4, #0]
 800eb2e:	bd38      	pop	{r3, r4, r5, pc}
 800eb30:	200013a8 	.word	0x200013a8

0800eb34 <_read_r>:
 800eb34:	b538      	push	{r3, r4, r5, lr}
 800eb36:	4604      	mov	r4, r0
 800eb38:	4608      	mov	r0, r1
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	4d05      	ldr	r5, [pc, #20]	; (800eb54 <_read_r+0x20>)
 800eb40:	602a      	str	r2, [r5, #0]
 800eb42:	461a      	mov	r2, r3
 800eb44:	f7f4 fa77 	bl	8003036 <_read>
 800eb48:	1c43      	adds	r3, r0, #1
 800eb4a:	d102      	bne.n	800eb52 <_read_r+0x1e>
 800eb4c:	682b      	ldr	r3, [r5, #0]
 800eb4e:	b103      	cbz	r3, 800eb52 <_read_r+0x1e>
 800eb50:	6023      	str	r3, [r4, #0]
 800eb52:	bd38      	pop	{r3, r4, r5, pc}
 800eb54:	200013a8 	.word	0x200013a8

0800eb58 <_init>:
 800eb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb5a:	bf00      	nop
 800eb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb5e:	bc08      	pop	{r3}
 800eb60:	469e      	mov	lr, r3
 800eb62:	4770      	bx	lr

0800eb64 <_fini>:
 800eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb66:	bf00      	nop
 800eb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb6a:	bc08      	pop	{r3}
 800eb6c:	469e      	mov	lr, r3
 800eb6e:	4770      	bx	lr
