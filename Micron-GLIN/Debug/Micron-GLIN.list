
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013470  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  080135b0  080135b0  000235b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e10  08013e10  00030ad8  2**0
                  CONTENTS
  4 .ARM          00000008  08013e10  08013e10  00023e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e18  08013e18  00030ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e18  08013e18  00023e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013e1c  08013e1c  00023e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ad8  20000000  08013e20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ef4  20000ad8  080148f8  00030ad8  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  200019cc  080148f8  000319cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030ad8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b607  00000000  00000000  00030b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d51  00000000  00000000  0004c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00050e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  00052758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6de  00000000  00000000  00053e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000200f7  00000000  00000000  0006e4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088072  00000000  00000000  0008e5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d64  00000000  00000000  001166b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000ad8 	.word	0x20000ad8
 800015c:	00000000 	.word	0x00000000
 8000160:	08013598 	.word	0x08013598

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000adc 	.word	0x20000adc
 800017c:	08013598 	.word	0x08013598

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_frsub>:
 8000bac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	e002      	b.n	8000bb8 <__addsf3>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_fsub>:
 8000bb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb8 <__addsf3>:
 8000bb8:	0042      	lsls	r2, r0, #1
 8000bba:	bf1f      	itttt	ne
 8000bbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc0:	ea92 0f03 	teqne	r2, r3
 8000bc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bcc:	d06a      	beq.n	8000ca4 <__addsf3+0xec>
 8000bce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd6:	bfc1      	itttt	gt
 8000bd8:	18d2      	addgt	r2, r2, r3
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	4048      	eorgt	r0, r1
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	bfb8      	it	lt
 8000be2:	425b      	neglt	r3, r3
 8000be4:	2b19      	cmp	r3, #25
 8000be6:	bf88      	it	hi
 8000be8:	4770      	bxhi	lr
 8000bea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c06:	bf18      	it	ne
 8000c08:	4249      	negne	r1, r1
 8000c0a:	ea92 0f03 	teq	r2, r3
 8000c0e:	d03f      	beq.n	8000c90 <__addsf3+0xd8>
 8000c10:	f1a2 0201 	sub.w	r2, r2, #1
 8000c14:	fa41 fc03 	asr.w	ip, r1, r3
 8000c18:	eb10 000c 	adds.w	r0, r0, ip
 8000c1c:	f1c3 0320 	rsb	r3, r3, #32
 8000c20:	fa01 f103 	lsl.w	r1, r1, r3
 8000c24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__addsf3+0x78>
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c34:	d313      	bcc.n	8000c5e <__addsf3+0xa6>
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3a:	d306      	bcc.n	8000c4a <__addsf3+0x92>
 8000c3c:	0840      	lsrs	r0, r0, #1
 8000c3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c42:	f102 0201 	add.w	r2, r2, #1
 8000c46:	2afe      	cmp	r2, #254	; 0xfe
 8000c48:	d251      	bcs.n	8000cee <__addsf3+0x136>
 8000c4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	ea40 0003 	orr.w	r0, r0, r3
 8000c5c:	4770      	bx	lr
 8000c5e:	0049      	lsls	r1, r1, #1
 8000c60:	eb40 0000 	adc.w	r0, r0, r0
 8000c64:	3a01      	subs	r2, #1
 8000c66:	bf28      	it	cs
 8000c68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c6c:	d2ed      	bcs.n	8000c4a <__addsf3+0x92>
 8000c6e:	fab0 fc80 	clz	ip, r0
 8000c72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c76:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7e:	bfaa      	itet	ge
 8000c80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c84:	4252      	neglt	r2, r2
 8000c86:	4318      	orrge	r0, r3
 8000c88:	bfbc      	itt	lt
 8000c8a:	40d0      	lsrlt	r0, r2
 8000c8c:	4318      	orrlt	r0, r3
 8000c8e:	4770      	bx	lr
 8000c90:	f092 0f00 	teq	r2, #0
 8000c94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c98:	bf06      	itte	eq
 8000c9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9e:	3201      	addeq	r2, #1
 8000ca0:	3b01      	subne	r3, #1
 8000ca2:	e7b5      	b.n	8000c10 <__addsf3+0x58>
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d021      	beq.n	8000cf8 <__addsf3+0x140>
 8000cb4:	ea92 0f03 	teq	r2, r3
 8000cb8:	d004      	beq.n	8000cc4 <__addsf3+0x10c>
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	4608      	moveq	r0, r1
 8000cc2:	4770      	bx	lr
 8000cc4:	ea90 0f01 	teq	r0, r1
 8000cc8:	bf1c      	itt	ne
 8000cca:	2000      	movne	r0, #0
 8000ccc:	4770      	bxne	lr
 8000cce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cd2:	d104      	bne.n	8000cde <__addsf3+0x126>
 8000cd4:	0040      	lsls	r0, r0, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ce2:	bf3c      	itt	cc
 8000ce4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bxcc	lr
 8000cea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf6:	4770      	bx	lr
 8000cf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cfc:	bf16      	itet	ne
 8000cfe:	4608      	movne	r0, r1
 8000d00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d04:	4601      	movne	r1, r0
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	bf06      	itte	eq
 8000d0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0e:	ea90 0f01 	teqeq	r0, r1
 8000d12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_ui2f>:
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e004      	b.n	8000d28 <__aeabi_i2f+0x8>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_i2f>:
 8000d20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	bf48      	it	mi
 8000d26:	4240      	negmi	r0, r0
 8000d28:	ea5f 0c00 	movs.w	ip, r0
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d34:	4601      	mov	r1, r0
 8000d36:	f04f 0000 	mov.w	r0, #0
 8000d3a:	e01c      	b.n	8000d76 <__aeabi_l2f+0x2a>

08000d3c <__aeabi_ul2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e00a      	b.n	8000d60 <__aeabi_l2f+0x14>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_l2f>:
 8000d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d58:	d502      	bpl.n	8000d60 <__aeabi_l2f+0x14>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	ea5f 0c01 	movs.w	ip, r1
 8000d64:	bf02      	ittt	eq
 8000d66:	4684      	moveq	ip, r0
 8000d68:	4601      	moveq	r1, r0
 8000d6a:	2000      	moveq	r0, #0
 8000d6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d70:	bf08      	it	eq
 8000d72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d7a:	fabc f28c 	clz	r2, ip
 8000d7e:	3a08      	subs	r2, #8
 8000d80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d84:	db10      	blt.n	8000da8 <__aeabi_l2f+0x5c>
 8000d86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d90:	f1c2 0220 	rsb	r2, r2, #32
 8000d94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d98:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9c:	eb43 0002 	adc.w	r0, r3, r2
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f102 0220 	add.w	r2, r2, #32
 8000dac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_fmul>:
 8000dc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd0:	bf1e      	ittt	ne
 8000dd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd6:	ea92 0f0c 	teqne	r2, ip
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d06f      	beq.n	8000ec0 <__aeabi_fmul+0xf8>
 8000de0:	441a      	add	r2, r3
 8000de2:	ea80 0c01 	eor.w	ip, r0, r1
 8000de6:	0240      	lsls	r0, r0, #9
 8000de8:	bf18      	it	ne
 8000dea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dee:	d01e      	beq.n	8000e2e <__aeabi_fmul+0x66>
 8000df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000e00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e08:	bf3e      	ittt	cc
 8000e0a:	0049      	lslcc	r1, r1, #1
 8000e0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e10:	005b      	lslcc	r3, r3, #1
 8000e12:	ea40 0001 	orr.w	r0, r0, r1
 8000e16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e1a:	2afd      	cmp	r2, #253	; 0xfd
 8000e1c:	d81d      	bhi.n	8000e5a <__aeabi_fmul+0x92>
 8000e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e26:	bf08      	it	eq
 8000e28:	f020 0001 	biceq.w	r0, r0, #1
 8000e2c:	4770      	bx	lr
 8000e2e:	f090 0f00 	teq	r0, #0
 8000e32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e36:	bf08      	it	eq
 8000e38:	0249      	lsleq	r1, r1, #9
 8000e3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e42:	3a7f      	subs	r2, #127	; 0x7f
 8000e44:	bfc2      	ittt	gt
 8000e46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4e:	4770      	bxgt	lr
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	dc5d      	bgt.n	8000f18 <__aeabi_fmul+0x150>
 8000e5c:	f112 0f19 	cmn.w	r2, #25
 8000e60:	bfdc      	itt	le
 8000e62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e66:	4770      	bxle	lr
 8000e68:	f1c2 0200 	rsb	r2, r2, #0
 8000e6c:	0041      	lsls	r1, r0, #1
 8000e6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e72:	f1c2 0220 	rsb	r2, r2, #32
 8000e76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7e:	f140 0000 	adc.w	r0, r0, #0
 8000e82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e86:	bf08      	it	eq
 8000e88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e8c:	4770      	bx	lr
 8000e8e:	f092 0f00 	teq	r2, #0
 8000e92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e96:	bf02      	ittt	eq
 8000e98:	0040      	lsleq	r0, r0, #1
 8000e9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9e:	3a01      	subeq	r2, #1
 8000ea0:	d0f9      	beq.n	8000e96 <__aeabi_fmul+0xce>
 8000ea2:	ea40 000c 	orr.w	r0, r0, ip
 8000ea6:	f093 0f00 	teq	r3, #0
 8000eaa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0049      	lsleq	r1, r1, #1
 8000eb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb6:	3b01      	subeq	r3, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xe6>
 8000eba:	ea41 010c 	orr.w	r1, r1, ip
 8000ebe:	e78f      	b.n	8000de0 <__aeabi_fmul+0x18>
 8000ec0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	bf18      	it	ne
 8000eca:	ea93 0f0c 	teqne	r3, ip
 8000ece:	d00a      	beq.n	8000ee6 <__aeabi_fmul+0x11e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1d8      	bne.n	8000e8e <__aeabi_fmul+0xc6>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	4770      	bx	lr
 8000ee6:	f090 0f00 	teq	r0, #0
 8000eea:	bf17      	itett	ne
 8000eec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ef0:	4608      	moveq	r0, r1
 8000ef2:	f091 0f00 	teqne	r1, #0
 8000ef6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000efa:	d014      	beq.n	8000f26 <__aeabi_fmul+0x15e>
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d101      	bne.n	8000f06 <__aeabi_fmul+0x13e>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d10f      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f06:	ea93 0f0c 	teq	r3, ip
 8000f0a:	d103      	bne.n	8000f14 <__aeabi_fmul+0x14c>
 8000f0c:	024b      	lsls	r3, r1, #9
 8000f0e:	bf18      	it	ne
 8000f10:	4608      	movne	r0, r1
 8000f12:	d108      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f14:	ea80 0001 	eor.w	r0, r0, r1
 8000f18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f24:	4770      	bx	lr
 8000f26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_fdiv>:
 8000f30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f38:	bf1e      	ittt	ne
 8000f3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3e:	ea92 0f0c 	teqne	r2, ip
 8000f42:	ea93 0f0c 	teqne	r3, ip
 8000f46:	d069      	beq.n	800101c <__aeabi_fdiv+0xec>
 8000f48:	eba2 0203 	sub.w	r2, r2, r3
 8000f4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f56:	d037      	beq.n	8000fc8 <__aeabi_fdiv+0x98>
 8000f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	bf38      	it	cc
 8000f6c:	005b      	lslcc	r3, r3, #1
 8000f6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f76:	428b      	cmp	r3, r1
 8000f78:	bf24      	itt	cs
 8000f7a:	1a5b      	subcs	r3, r3, r1
 8000f7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f84:	bf24      	itt	cs
 8000f86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f92:	bf24      	itt	cs
 8000f94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa0:	bf24      	itt	cs
 8000fa2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	bf18      	it	ne
 8000fae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb2:	d1e0      	bne.n	8000f76 <__aeabi_fdiv+0x46>
 8000fb4:	2afd      	cmp	r2, #253	; 0xfd
 8000fb6:	f63f af50 	bhi.w	8000e5a <__aeabi_fmul+0x92>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc0:	bf08      	it	eq
 8000fc2:	f020 0001 	biceq.w	r0, r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd0:	327f      	adds	r2, #127	; 0x7f
 8000fd2:	bfc2      	ittt	gt
 8000fd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fdc:	4770      	bxgt	lr
 8000fde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	e737      	b.n	8000e5a <__aeabi_fmul+0x92>
 8000fea:	f092 0f00 	teq	r2, #0
 8000fee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ff2:	bf02      	ittt	eq
 8000ff4:	0040      	lsleq	r0, r0, #1
 8000ff6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ffa:	3a01      	subeq	r2, #1
 8000ffc:	d0f9      	beq.n	8000ff2 <__aeabi_fdiv+0xc2>
 8000ffe:	ea40 000c 	orr.w	r0, r0, ip
 8001002:	f093 0f00 	teq	r3, #0
 8001006:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0049      	lsleq	r1, r1, #1
 800100e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001012:	3b01      	subeq	r3, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xda>
 8001016:	ea41 010c 	orr.w	r1, r1, ip
 800101a:	e795      	b.n	8000f48 <__aeabi_fdiv+0x18>
 800101c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001020:	ea92 0f0c 	teq	r2, ip
 8001024:	d108      	bne.n	8001038 <__aeabi_fdiv+0x108>
 8001026:	0242      	lsls	r2, r0, #9
 8001028:	f47f af7d 	bne.w	8000f26 <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	f47f af70 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 8001034:	4608      	mov	r0, r1
 8001036:	e776      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001038:	ea93 0f0c 	teq	r3, ip
 800103c:	d104      	bne.n	8001048 <__aeabi_fdiv+0x118>
 800103e:	024b      	lsls	r3, r1, #9
 8001040:	f43f af4c 	beq.w	8000edc <__aeabi_fmul+0x114>
 8001044:	4608      	mov	r0, r1
 8001046:	e76e      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001048:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800104c:	bf18      	it	ne
 800104e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001052:	d1ca      	bne.n	8000fea <__aeabi_fdiv+0xba>
 8001054:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001058:	f47f af5c 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 800105c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001060:	f47f af3c 	bne.w	8000edc <__aeabi_fmul+0x114>
 8001064:	e75f      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001066:	bf00      	nop

08001068 <__gesf2>:
 8001068:	f04f 3cff 	mov.w	ip, #4294967295
 800106c:	e006      	b.n	800107c <__cmpsf2+0x4>
 800106e:	bf00      	nop

08001070 <__lesf2>:
 8001070:	f04f 0c01 	mov.w	ip, #1
 8001074:	e002      	b.n	800107c <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__cmpsf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	bf18      	it	ne
 800108e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001092:	d011      	beq.n	80010b8 <__cmpsf2+0x40>
 8001094:	b001      	add	sp, #4
 8001096:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800109a:	bf18      	it	ne
 800109c:	ea90 0f01 	teqne	r0, r1
 80010a0:	bf58      	it	pl
 80010a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a6:	bf88      	it	hi
 80010a8:	17c8      	asrhi	r0, r1, #31
 80010aa:	bf38      	it	cc
 80010ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b0:	bf18      	it	ne
 80010b2:	f040 0001 	orrne.w	r0, r0, #1
 80010b6:	4770      	bx	lr
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__cmpsf2+0x4c>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d105      	bne.n	80010d0 <__cmpsf2+0x58>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d1e4      	bne.n	8001094 <__cmpsf2+0x1c>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d0e1      	beq.n	8001094 <__cmpsf2+0x1c>
 80010d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <__aeabi_cfrcmple>:
 80010d8:	4684      	mov	ip, r0
 80010da:	4608      	mov	r0, r1
 80010dc:	4661      	mov	r1, ip
 80010de:	e7ff      	b.n	80010e0 <__aeabi_cfcmpeq>

080010e0 <__aeabi_cfcmpeq>:
 80010e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010e2:	f7ff ffc9 	bl	8001078 <__cmpsf2>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	bf48      	it	mi
 80010ea:	f110 0f00 	cmnmi.w	r0, #0
 80010ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f0 <__aeabi_fcmpeq>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff fff4 	bl	80010e0 <__aeabi_cfcmpeq>
 80010f8:	bf0c      	ite	eq
 80010fa:	2001      	moveq	r0, #1
 80010fc:	2000      	movne	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmplt>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffea 	bl	80010e0 <__aeabi_cfcmpeq>
 800110c:	bf34      	ite	cc
 800110e:	2001      	movcc	r0, #1
 8001110:	2000      	movcs	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmple>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffe0 	bl	80010e0 <__aeabi_cfcmpeq>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpge>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffd2 	bl	80010d8 <__aeabi_cfrcmple>
 8001134:	bf94      	ite	ls
 8001136:	2001      	movls	r0, #1
 8001138:	2000      	movhi	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpgt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffc8 	bl	80010d8 <__aeabi_cfrcmple>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_f2uiz>:
 8001154:	0042      	lsls	r2, r0, #1
 8001156:	d20e      	bcs.n	8001176 <__aeabi_f2uiz+0x22>
 8001158:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800115c:	d30b      	bcc.n	8001176 <__aeabi_f2uiz+0x22>
 800115e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001162:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001166:	d409      	bmi.n	800117c <__aeabi_f2uiz+0x28>
 8001168:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	4770      	bx	lr
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	4770      	bx	lr
 800117c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001180:	d101      	bne.n	8001186 <__aeabi_f2uiz+0x32>
 8001182:	0242      	lsls	r2, r0, #9
 8001184:	d102      	bne.n	800118c <__aeabi_f2uiz+0x38>
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	4770      	bx	lr
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <__aeabi_uldivmod>:
 8001194:	b953      	cbnz	r3, 80011ac <__aeabi_uldivmod+0x18>
 8001196:	b94a      	cbnz	r2, 80011ac <__aeabi_uldivmod+0x18>
 8001198:	2900      	cmp	r1, #0
 800119a:	bf08      	it	eq
 800119c:	2800      	cmpeq	r0, #0
 800119e:	bf1c      	itt	ne
 80011a0:	f04f 31ff 	movne.w	r1, #4294967295
 80011a4:	f04f 30ff 	movne.w	r0, #4294967295
 80011a8:	f000 b9ae 	b.w	8001508 <__aeabi_idiv0>
 80011ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b4:	f000 f83e 	bl	8001234 <__udivmoddi4>
 80011b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c0:	b004      	add	sp, #16
 80011c2:	4770      	bx	lr

080011c4 <__aeabi_d2lz>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4605      	mov	r5, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4628      	mov	r0, r5
 80011d0:	4621      	mov	r1, r4
 80011d2:	f7ff fc15 	bl	8000a00 <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x20>
 80011d8:	4628      	mov	r0, r5
 80011da:	4621      	mov	r1, r4
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4628      	mov	r0, r5
 80011e6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f98b 	bl	800051c <__aeabi_dmul>
 8001206:	f7ff fc61 	bl	8000acc <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f90c 	bl	8000428 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f982 	bl	800051c <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffc4 	bl	80001ac <__aeabi_dsub>
 8001224:	f7ff fc52 	bl	8000acc <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000

08001234 <__udivmoddi4>:
 8001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001238:	9e08      	ldr	r6, [sp, #32]
 800123a:	460d      	mov	r5, r1
 800123c:	4604      	mov	r4, r0
 800123e:	4688      	mov	r8, r1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d14d      	bne.n	80012e0 <__udivmoddi4+0xac>
 8001244:	428a      	cmp	r2, r1
 8001246:	4694      	mov	ip, r2
 8001248:	d968      	bls.n	800131c <__udivmoddi4+0xe8>
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b152      	cbz	r2, 8001266 <__udivmoddi4+0x32>
 8001250:	fa01 f302 	lsl.w	r3, r1, r2
 8001254:	f1c2 0120 	rsb	r1, r2, #32
 8001258:	fa20 f101 	lsr.w	r1, r0, r1
 800125c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001260:	ea41 0803 	orr.w	r8, r1, r3
 8001264:	4094      	lsls	r4, r2
 8001266:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800126a:	fbb8 f7f1 	udiv	r7, r8, r1
 800126e:	fa1f fe8c 	uxth.w	lr, ip
 8001272:	fb01 8817 	mls	r8, r1, r7, r8
 8001276:	fb07 f00e 	mul.w	r0, r7, lr
 800127a:	0c23      	lsrs	r3, r4, #16
 800127c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001280:	4298      	cmp	r0, r3
 8001282:	d90a      	bls.n	800129a <__udivmoddi4+0x66>
 8001284:	eb1c 0303 	adds.w	r3, ip, r3
 8001288:	f107 35ff 	add.w	r5, r7, #4294967295
 800128c:	f080 811e 	bcs.w	80014cc <__udivmoddi4+0x298>
 8001290:	4298      	cmp	r0, r3
 8001292:	f240 811b 	bls.w	80014cc <__udivmoddi4+0x298>
 8001296:	3f02      	subs	r7, #2
 8001298:	4463      	add	r3, ip
 800129a:	1a1b      	subs	r3, r3, r0
 800129c:	fbb3 f0f1 	udiv	r0, r3, r1
 80012a0:	fb01 3310 	mls	r3, r1, r0, r3
 80012a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80012a8:	b2a4      	uxth	r4, r4
 80012aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012ae:	45a6      	cmp	lr, r4
 80012b0:	d90a      	bls.n	80012c8 <__udivmoddi4+0x94>
 80012b2:	eb1c 0404 	adds.w	r4, ip, r4
 80012b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80012ba:	f080 8109 	bcs.w	80014d0 <__udivmoddi4+0x29c>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f240 8106 	bls.w	80014d0 <__udivmoddi4+0x29c>
 80012c4:	4464      	add	r4, ip
 80012c6:	3802      	subs	r0, #2
 80012c8:	2100      	movs	r1, #0
 80012ca:	eba4 040e 	sub.w	r4, r4, lr
 80012ce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012d2:	b11e      	cbz	r6, 80012dc <__udivmoddi4+0xa8>
 80012d4:	2300      	movs	r3, #0
 80012d6:	40d4      	lsrs	r4, r2
 80012d8:	e9c6 4300 	strd	r4, r3, [r6]
 80012dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0xc2>
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	f000 80ee 	beq.w	80014c6 <__udivmoddi4+0x292>
 80012ea:	2100      	movs	r1, #0
 80012ec:	e9c6 0500 	strd	r0, r5, [r6]
 80012f0:	4608      	mov	r0, r1
 80012f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f6:	fab3 f183 	clz	r1, r3
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d14a      	bne.n	8001394 <__udivmoddi4+0x160>
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d302      	bcc.n	8001308 <__udivmoddi4+0xd4>
 8001302:	4282      	cmp	r2, r0
 8001304:	f200 80fc 	bhi.w	8001500 <__udivmoddi4+0x2cc>
 8001308:	1a84      	subs	r4, r0, r2
 800130a:	eb65 0303 	sbc.w	r3, r5, r3
 800130e:	2001      	movs	r0, #1
 8001310:	4698      	mov	r8, r3
 8001312:	2e00      	cmp	r6, #0
 8001314:	d0e2      	beq.n	80012dc <__udivmoddi4+0xa8>
 8001316:	e9c6 4800 	strd	r4, r8, [r6]
 800131a:	e7df      	b.n	80012dc <__udivmoddi4+0xa8>
 800131c:	b902      	cbnz	r2, 8001320 <__udivmoddi4+0xec>
 800131e:	deff      	udf	#255	; 0xff
 8001320:	fab2 f282 	clz	r2, r2
 8001324:	2a00      	cmp	r2, #0
 8001326:	f040 8091 	bne.w	800144c <__udivmoddi4+0x218>
 800132a:	eba1 000c 	sub.w	r0, r1, ip
 800132e:	2101      	movs	r1, #1
 8001330:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001334:	fa1f fe8c 	uxth.w	lr, ip
 8001338:	fbb0 f3f7 	udiv	r3, r0, r7
 800133c:	fb07 0013 	mls	r0, r7, r3, r0
 8001340:	0c25      	lsrs	r5, r4, #16
 8001342:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001346:	fb0e f003 	mul.w	r0, lr, r3
 800134a:	42a8      	cmp	r0, r5
 800134c:	d908      	bls.n	8001360 <__udivmoddi4+0x12c>
 800134e:	eb1c 0505 	adds.w	r5, ip, r5
 8001352:	f103 38ff 	add.w	r8, r3, #4294967295
 8001356:	d202      	bcs.n	800135e <__udivmoddi4+0x12a>
 8001358:	42a8      	cmp	r0, r5
 800135a:	f200 80ce 	bhi.w	80014fa <__udivmoddi4+0x2c6>
 800135e:	4643      	mov	r3, r8
 8001360:	1a2d      	subs	r5, r5, r0
 8001362:	fbb5 f0f7 	udiv	r0, r5, r7
 8001366:	fb07 5510 	mls	r5, r7, r0, r5
 800136a:	fb0e fe00 	mul.w	lr, lr, r0
 800136e:	b2a4      	uxth	r4, r4
 8001370:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001374:	45a6      	cmp	lr, r4
 8001376:	d908      	bls.n	800138a <__udivmoddi4+0x156>
 8001378:	eb1c 0404 	adds.w	r4, ip, r4
 800137c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001380:	d202      	bcs.n	8001388 <__udivmoddi4+0x154>
 8001382:	45a6      	cmp	lr, r4
 8001384:	f200 80b6 	bhi.w	80014f4 <__udivmoddi4+0x2c0>
 8001388:	4628      	mov	r0, r5
 800138a:	eba4 040e 	sub.w	r4, r4, lr
 800138e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001392:	e79e      	b.n	80012d2 <__udivmoddi4+0x9e>
 8001394:	f1c1 0720 	rsb	r7, r1, #32
 8001398:	408b      	lsls	r3, r1
 800139a:	fa22 fc07 	lsr.w	ip, r2, r7
 800139e:	ea4c 0c03 	orr.w	ip, ip, r3
 80013a2:	fa25 fa07 	lsr.w	sl, r5, r7
 80013a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013aa:	fbba f8f9 	udiv	r8, sl, r9
 80013ae:	fa20 f307 	lsr.w	r3, r0, r7
 80013b2:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b6:	408d      	lsls	r5, r1
 80013b8:	fa1f fe8c 	uxth.w	lr, ip
 80013bc:	431d      	orrs	r5, r3
 80013be:	fa00 f301 	lsl.w	r3, r0, r1
 80013c2:	fb08 f00e 	mul.w	r0, r8, lr
 80013c6:	0c2c      	lsrs	r4, r5, #16
 80013c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013cc:	42a0      	cmp	r0, r4
 80013ce:	fa02 f201 	lsl.w	r2, r2, r1
 80013d2:	d90b      	bls.n	80013ec <__udivmoddi4+0x1b8>
 80013d4:	eb1c 0404 	adds.w	r4, ip, r4
 80013d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80013dc:	f080 8088 	bcs.w	80014f0 <__udivmoddi4+0x2bc>
 80013e0:	42a0      	cmp	r0, r4
 80013e2:	f240 8085 	bls.w	80014f0 <__udivmoddi4+0x2bc>
 80013e6:	f1a8 0802 	sub.w	r8, r8, #2
 80013ea:	4464      	add	r4, ip
 80013ec:	1a24      	subs	r4, r4, r0
 80013ee:	fbb4 f0f9 	udiv	r0, r4, r9
 80013f2:	fb09 4410 	mls	r4, r9, r0, r4
 80013f6:	fb00 fe0e 	mul.w	lr, r0, lr
 80013fa:	b2ad      	uxth	r5, r5
 80013fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001400:	45a6      	cmp	lr, r4
 8001402:	d908      	bls.n	8001416 <__udivmoddi4+0x1e2>
 8001404:	eb1c 0404 	adds.w	r4, ip, r4
 8001408:	f100 35ff 	add.w	r5, r0, #4294967295
 800140c:	d26c      	bcs.n	80014e8 <__udivmoddi4+0x2b4>
 800140e:	45a6      	cmp	lr, r4
 8001410:	d96a      	bls.n	80014e8 <__udivmoddi4+0x2b4>
 8001412:	3802      	subs	r0, #2
 8001414:	4464      	add	r4, ip
 8001416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800141a:	fba0 9502 	umull	r9, r5, r0, r2
 800141e:	eba4 040e 	sub.w	r4, r4, lr
 8001422:	42ac      	cmp	r4, r5
 8001424:	46c8      	mov	r8, r9
 8001426:	46ae      	mov	lr, r5
 8001428:	d356      	bcc.n	80014d8 <__udivmoddi4+0x2a4>
 800142a:	d053      	beq.n	80014d4 <__udivmoddi4+0x2a0>
 800142c:	2e00      	cmp	r6, #0
 800142e:	d069      	beq.n	8001504 <__udivmoddi4+0x2d0>
 8001430:	ebb3 0208 	subs.w	r2, r3, r8
 8001434:	eb64 040e 	sbc.w	r4, r4, lr
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	fa04 f707 	lsl.w	r7, r4, r7
 8001440:	431f      	orrs	r7, r3
 8001442:	40cc      	lsrs	r4, r1
 8001444:	e9c6 7400 	strd	r7, r4, [r6]
 8001448:	2100      	movs	r1, #0
 800144a:	e747      	b.n	80012dc <__udivmoddi4+0xa8>
 800144c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001450:	f1c2 0120 	rsb	r1, r2, #32
 8001454:	fa25 f301 	lsr.w	r3, r5, r1
 8001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800145c:	fa20 f101 	lsr.w	r1, r0, r1
 8001460:	4095      	lsls	r5, r2
 8001462:	430d      	orrs	r5, r1
 8001464:	fbb3 f1f7 	udiv	r1, r3, r7
 8001468:	fb07 3311 	mls	r3, r7, r1, r3
 800146c:	fa1f fe8c 	uxth.w	lr, ip
 8001470:	0c28      	lsrs	r0, r5, #16
 8001472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001476:	fb01 f30e 	mul.w	r3, r1, lr
 800147a:	4283      	cmp	r3, r0
 800147c:	fa04 f402 	lsl.w	r4, r4, r2
 8001480:	d908      	bls.n	8001494 <__udivmoddi4+0x260>
 8001482:	eb1c 0000 	adds.w	r0, ip, r0
 8001486:	f101 38ff 	add.w	r8, r1, #4294967295
 800148a:	d22f      	bcs.n	80014ec <__udivmoddi4+0x2b8>
 800148c:	4283      	cmp	r3, r0
 800148e:	d92d      	bls.n	80014ec <__udivmoddi4+0x2b8>
 8001490:	3902      	subs	r1, #2
 8001492:	4460      	add	r0, ip
 8001494:	1ac0      	subs	r0, r0, r3
 8001496:	fbb0 f3f7 	udiv	r3, r0, r7
 800149a:	fb07 0013 	mls	r0, r7, r3, r0
 800149e:	b2ad      	uxth	r5, r5
 80014a0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014a4:	fb03 f00e 	mul.w	r0, r3, lr
 80014a8:	42a8      	cmp	r0, r5
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x28a>
 80014ac:	eb1c 0505 	adds.w	r5, ip, r5
 80014b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80014b4:	d216      	bcs.n	80014e4 <__udivmoddi4+0x2b0>
 80014b6:	42a8      	cmp	r0, r5
 80014b8:	d914      	bls.n	80014e4 <__udivmoddi4+0x2b0>
 80014ba:	3b02      	subs	r3, #2
 80014bc:	4465      	add	r5, ip
 80014be:	1a28      	subs	r0, r5, r0
 80014c0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014c4:	e738      	b.n	8001338 <__udivmoddi4+0x104>
 80014c6:	4631      	mov	r1, r6
 80014c8:	4630      	mov	r0, r6
 80014ca:	e707      	b.n	80012dc <__udivmoddi4+0xa8>
 80014cc:	462f      	mov	r7, r5
 80014ce:	e6e4      	b.n	800129a <__udivmoddi4+0x66>
 80014d0:	4618      	mov	r0, r3
 80014d2:	e6f9      	b.n	80012c8 <__udivmoddi4+0x94>
 80014d4:	454b      	cmp	r3, r9
 80014d6:	d2a9      	bcs.n	800142c <__udivmoddi4+0x1f8>
 80014d8:	ebb9 0802 	subs.w	r8, r9, r2
 80014dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80014e0:	3801      	subs	r0, #1
 80014e2:	e7a3      	b.n	800142c <__udivmoddi4+0x1f8>
 80014e4:	4643      	mov	r3, r8
 80014e6:	e7ea      	b.n	80014be <__udivmoddi4+0x28a>
 80014e8:	4628      	mov	r0, r5
 80014ea:	e794      	b.n	8001416 <__udivmoddi4+0x1e2>
 80014ec:	4641      	mov	r1, r8
 80014ee:	e7d1      	b.n	8001494 <__udivmoddi4+0x260>
 80014f0:	46d0      	mov	r8, sl
 80014f2:	e77b      	b.n	80013ec <__udivmoddi4+0x1b8>
 80014f4:	4464      	add	r4, ip
 80014f6:	3802      	subs	r0, #2
 80014f8:	e747      	b.n	800138a <__udivmoddi4+0x156>
 80014fa:	3b02      	subs	r3, #2
 80014fc:	4465      	add	r5, ip
 80014fe:	e72f      	b.n	8001360 <__udivmoddi4+0x12c>
 8001500:	4608      	mov	r0, r1
 8001502:	e706      	b.n	8001312 <__udivmoddi4+0xde>
 8001504:	4631      	mov	r1, r6
 8001506:	e6e9      	b.n	80012dc <__udivmoddi4+0xa8>

08001508 <__aeabi_idiv0>:
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	889b      	ldrh	r3, [r3, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	88db      	ldrh	r3, [r3, #6]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
	if (total < 0)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da05      	bge.n	8001538 <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	891b      	ldrh	r3, [r3, #8]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4413      	add	r3, r2
 8001536:	617b      	str	r3, [r7, #20]

	if (total == 0)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e031      	b.n	80015a8 <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	88db      	ldrh	r3, [r3, #6]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	8912      	ldrh	r2, [r2, #8]
 8001550:	fbb3 f0f2 	udiv	r0, r3, r2
 8001554:	fb00 f202 	mul.w	r2, r0, r2
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
			* circ_buf->element_size);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	895b      	ldrh	r3, [r3, #10]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001566:	440b      	add	r3, r1
 8001568:	613b      	str	r3, [r7, #16]

	if (elem)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	895b      	ldrh	r3, [r3, #10]
 8001574:	461a      	mov	r2, r3
 8001576:	6939      	ldr	r1, [r7, #16]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f00d fdf7 	bl	800f16c <memcpy>

	if (!read_only) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d110      	bne.n	80015a6 <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	88db      	ldrh	r3, [r3, #6]
 8001588:	3301      	adds	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	88db      	ldrh	r3, [r3, #6]
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	429a      	cmp	r2, r3
 800159e:	db02      	blt.n	80015a6 <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	889b      	ldrh	r3, [r3, #4]
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	88db      	ldrh	r3, [r3, #6]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	891b      	ldrh	r3, [r3, #8]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	891b      	ldrh	r3, [r3, #8]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	db02      	blt.n	80015ec <__circ_gbuf_push+0x3c>
		return -1; // Full
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e02b      	b.n	8001644 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	889b      	ldrh	r3, [r3, #4]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	8912      	ldrh	r2, [r2, #8]
 80015f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80015fc:	fb00 f202 	mul.w	r2, r0, r2
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
			* circ_buf->element_size );
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	895b      	ldrh	r3, [r3, #10]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 800160e:	440b      	add	r3, r1
 8001610:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	895b      	ldrh	r3, [r3, #10]
 8001616:	461a      	mov	r2, r3
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f00d fda6 	bl	800f16c <memcpy>
	circ_buf->push_count++;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	891b      	ldrh	r3, [r3, #8]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	429a      	cmp	r2, r3
 800163a:	db02      	blt.n	8001642 <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	809a      	strh	r2, [r3, #4]
	return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <Relay_control>:
extern uint16_t DAC_tx_tmp_buffer[2];
extern float DDS_FTW;


//==============================================================================================
void Relay_control(uint8_t relay,uint8_t state){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
	int Relay_address=0;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
	if(relay>3 || state>1) return;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b03      	cmp	r3, #3
 8001664:	f200 80a3 	bhi.w	80017ae <Relay_control+0x162>
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	2b01      	cmp	r3, #1
 800166c:	f200 809f 	bhi.w	80017ae <Relay_control+0x162>

	if(relay==0x00 && state==0x00)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d141      	bne.n	80016fa <Relay_control+0xae>
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d13e      	bne.n	80016fa <Relay_control+0xae>
	{
		while(Relay_address<=0x5) // Set all OUTx to zero
 800167c:	e039      	b.n	80016f2 <Relay_control+0xa6>
		{
			HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	2102      	movs	r1, #2
 800168c:	484a      	ldr	r0, [pc, #296]	; (80017b8 <Relay_control+0x16c>)
 800168e:	f004 f9e6 	bl	8005a5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	105b      	asrs	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	2104      	movs	r1, #4
 80016a2:	4845      	ldr	r0, [pc, #276]	; (80017b8 <Relay_control+0x16c>)
 80016a4:	f004 f9db 	bl	8005a5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	109b      	asrs	r3, r3, #2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	2108      	movs	r1, #8
 80016b8:	483f      	ldr	r0, [pc, #252]	; (80017b8 <Relay_control+0x16c>)
 80016ba:	f004 f9d0 	bl	8005a5e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 80016be:	2200      	movs	r2, #0
 80016c0:	2101      	movs	r1, #1
 80016c2:	483d      	ldr	r0, [pc, #244]	; (80017b8 <Relay_control+0x16c>)
 80016c4:	f004 f9cb 	bl	8005a5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ce:	483b      	ldr	r0, [pc, #236]	; (80017bc <Relay_control+0x170>)
 80016d0:	f004 f9c5 	bl	8005a5e <HAL_GPIO_WritePin>
			HAL_Delay(1); // wait 1ms
 80016d4:	2001      	movs	r0, #1
 80016d6:	f003 fb5d 	bl	8004d94 <HAL_Delay>
			HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e0:	4836      	ldr	r0, [pc, #216]	; (80017bc <Relay_control+0x170>)
 80016e2:	f004 f9bc 	bl	8005a5e <HAL_GPIO_WritePin>
			HAL_Delay(1); // wait 1ms
 80016e6:	2001      	movs	r0, #1
 80016e8:	f003 fb54 	bl	8004d94 <HAL_Delay>
			Relay_address++;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
		while(Relay_address<=0x5) // Set all OUTx to zero
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	ddc2      	ble.n	800167e <Relay_control+0x32>
		}
		return;
 80016f8:	e05a      	b.n	80017b0 <Relay_control+0x164>
	}


	switch (relay)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d006      	beq.n	800170e <Relay_control+0xc2>
 8001700:	2b03      	cmp	r3, #3
 8001702:	dc1f      	bgt.n	8001744 <Relay_control+0xf8>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d014      	beq.n	8001732 <Relay_control+0xe6>
 8001708:	2b02      	cmp	r3, #2
 800170a:	d009      	beq.n	8001720 <Relay_control+0xd4>
 800170c:	e01a      	b.n	8001744 <Relay_control+0xf8>
	{
	case 3:
		if (state==1){
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <Relay_control+0xce>
			Relay_address=0x5; //OUT6
 8001714:	2305      	movs	r3, #5
 8001716:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x4; //OUT5
		} break;
 8001718:	e014      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x4; //OUT5
 800171a:	2304      	movs	r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
		} break;
 800171e:	e011      	b.n	8001744 <Relay_control+0xf8>
	case 2:
		if (state==1){
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <Relay_control+0xe0>
			Relay_address=0x3; //OUT4
 8001726:	2303      	movs	r3, #3
 8001728:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x2; //OUT3
		} break;
 800172a:	e00b      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x2; //OUT3
 800172c:	2302      	movs	r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
		} break;
 8001730:	e008      	b.n	8001744 <Relay_control+0xf8>
	case 1:
		if (state==1){
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <Relay_control+0xf2>
			Relay_address=0x1; //OUT2
 8001738:	2301      	movs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x0; //OUT1
		} break;
 800173c:	e001      	b.n	8001742 <Relay_control+0xf6>
			Relay_address=0x0; //OUT1
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
		} break;
 8001742:	bf00      	nop
	}

	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	2102      	movs	r1, #2
 8001752:	4819      	ldr	r0, [pc, #100]	; (80017b8 <Relay_control+0x16c>)
 8001754:	f004 f983 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	105b      	asrs	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	2104      	movs	r1, #4
 8001768:	4813      	ldr	r0, [pc, #76]	; (80017b8 <Relay_control+0x16c>)
 800176a:	f004 f978 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	109b      	asrs	r3, r3, #2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	2108      	movs	r1, #8
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <Relay_control+0x16c>)
 8001780:	f004 f96d 	bl	8005a5e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 1); // LVL 1
 8001784:	2201      	movs	r2, #1
 8001786:	2101      	movs	r1, #1
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <Relay_control+0x16c>)
 800178a:	f004 f968 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <Relay_control+0x170>)
 8001796:	f004 f962 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 800179a:	2001      	movs	r0, #1
 800179c:	f003 fafa 	bl	8004d94 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <Relay_control+0x170>)
 80017a8:	f004 f959 	bl	8005a5e <HAL_GPIO_WritePin>
 80017ac:	e000      	b.n	80017b0 <Relay_control+0x164>
	if(relay>3 || state>1) return;
 80017ae:	bf00      	nop
}
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020800 	.word	0x40020800

080017c0 <CPLD_control>:
//==============================================================================================



//==============================================================================================
void CPLD_control(FunctionalState state){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	uint8_t send_word=0x00;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]

	// Calculate CPLD divider to expand DDS FTW to 0.1 ppm
	float dds_tmp_calc=DDS_clock_frequecny;
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <CPLD_control+0x10c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
	dds_tmp_calc/=(float)0xFFFFFFFF; // 10MHz / 2^32 = 0.0023283 Hz DDS FTW resolution
 80017d4:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff fba9 	bl	8000f30 <__aeabi_fdiv>
 80017de:	4603      	mov	r3, r0
 80017e0:	60fb      	str	r3, [r7, #12]
	dds_tmp_calc=dds_tmp_calc/(DDS_target_frequecny/(float)1E7); // 0.0023283 Hz / (74.898214 Hz / 1E7) = 310.86 minimum CPLD divider
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <CPLD_control+0x110>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	493b      	ldr	r1, [pc, #236]	; (80018d4 <CPLD_control+0x114>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fba1 	bl	8000f30 <__aeabi_fdiv>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4619      	mov	r1, r3
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f7ff fb9c 	bl	8000f30 <__aeabi_fdiv>
 80017f8:	4603      	mov	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<0x0F; i++) // find CPLD tuning word
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e017      	b.n	8001832 <CPLD_control+0x72>
	{
		if(((1<<i)+1) > dds_tmp_calc)
 8001802:	2201      	movs	r2, #1
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	3301      	adds	r3, #1
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fa87 	bl	8000d20 <__aeabi_i2f>
 8001812:	4603      	mov	r3, r0
 8001814:	4619      	mov	r1, r3
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff fc74 	bl	8001104 <__aeabi_fcmplt>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <CPLD_control+0x6c>
		{
			CPLD_WORD=i;
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <CPLD_control+0x118>)
 8001828:	701a      	strb	r2, [r3, #0]
			break;
 800182a:	e005      	b.n	8001838 <CPLD_control+0x78>
	for(int i=1; i<0x0F; i++) // find CPLD tuning word
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	3301      	adds	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b0e      	cmp	r3, #14
 8001836:	dde4      	ble.n	8001802 <CPLD_control+0x42>
		}
	}

	if(state==CPLD_ON_STATE)send_word=CPLD_WORD;
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <CPLD_control+0x84>
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <CPLD_control+0x118>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin,  send_word & 0x1     );
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	2101      	movs	r1, #1
 8001850:	4822      	ldr	r0, [pc, #136]	; (80018dc <CPLD_control+0x11c>)
 8001852:	f004 f904 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin, (send_word & 0x2) >>1);
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	105b      	asrs	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	2102      	movs	r1, #2
 8001866:	481d      	ldr	r0, [pc, #116]	; (80018dc <CPLD_control+0x11c>)
 8001868:	f004 f8f9 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (send_word & 0x4) >>2);
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	109b      	asrs	r3, r3, #2
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	2104      	movs	r1, #4
 800187c:	4817      	ldr	r0, [pc, #92]	; (80018dc <CPLD_control+0x11c>)
 800187e:	f004 f8ee 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (send_word & 0x8) >>3);
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	10db      	asrs	r3, r3, #3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	2108      	movs	r1, #8
 8001892:	4812      	ldr	r0, [pc, #72]	; (80018dc <CPLD_control+0x11c>)
 8001894:	f004 f8e3 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_SET); // Send strobe
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189e:	4810      	ldr	r0, [pc, #64]	; (80018e0 <CPLD_control+0x120>)
 80018a0:	f004 f8dd 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <CPLD_control+0x120>)
 80018ac:	f004 f8d7 	bl	8005a5e <HAL_GPIO_WritePin>

	if(state==CPLD_OFF_STATE)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <CPLD_control+0xfe>
	{
		cfg.LDACMODE=0;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <CPLD_control+0x124>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		cfg.LDACMODE=1;
	}
}
 80018bc:	e002      	b.n	80018c4 <CPLD_control+0x104>
		cfg.LDACMODE=1;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <CPLD_control+0x124>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	709a      	strb	r2, [r3, #2]
}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000780 	.word	0x20000780
 80018d0:	20000cd8 	.word	0x20000cd8
 80018d4:	4b189680 	.word	0x4b189680
 80018d8:	20000cd2 	.word	0x20000cd2
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020800 	.word	0x40020800
 80018e4:	20000cc8 	.word	0x20000cc8

080018e8 <DAC_Write>:



//==============================================================================================
void DAC_Write(uint32_t value)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <DAC_Write+0x6c>)
 80018f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	4a13      	ldr	r2, [pc, #76]	; (8001954 <DAC_Write+0x6c>)
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	4413      	add	r3, r2
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <DAC_Write+0x6c>)
 800190c:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <DAC_Write+0x6c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0c1b      	lsrs	r3, r3, #16
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <DAC_Write+0x70>)
 8001918:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <DAC_Write+0x6c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <DAC_Write+0x70>)
 8001922:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2110      	movs	r1, #16
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <DAC_Write+0x74>)
 800192a:	f004 f898 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 800192e:	2302      	movs	r3, #2
 8001930:	2202      	movs	r2, #2
 8001932:	4909      	ldr	r1, [pc, #36]	; (8001958 <DAC_Write+0x70>)
 8001934:	480a      	ldr	r0, [pc, #40]	; (8001960 <DAC_Write+0x78>)
 8001936:	f007 fae1 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2110      	movs	r1, #16
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <DAC_Write+0x74>)
 8001940:	f004 f88d 	bl	8005a5e <HAL_GPIO_WritePin>
	DAC_code=value;
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <DAC_Write+0x7c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000cc0 	.word	0x20000cc0
 8001958:	20000cc4 	.word	0x20000cc4
 800195c:	40020000 	.word	0x40020000
 8001960:	20000cf8 	.word	0x20000cf8
 8001964:	20000cf0 	.word	0x20000cf0

08001968 <DAC_Write_FAST>:

//==============================================================================================
void DAC_Write_FAST(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	2110      	movs	r1, #16
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <DAC_Write_FAST+0x28>)
 8001972:	f004 f874 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001976:	2302      	movs	r3, #2
 8001978:	2202      	movs	r2, #2
 800197a:	4906      	ldr	r1, [pc, #24]	; (8001994 <DAC_Write_FAST+0x2c>)
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <DAC_Write_FAST+0x30>)
 800197e:	f007 fabd 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	2110      	movs	r1, #16
 8001986:	4802      	ldr	r0, [pc, #8]	; (8001990 <DAC_Write_FAST+0x28>)
 8001988:	f004 f869 	bl	8005a5e <HAL_GPIO_WritePin>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40020000 	.word	0x40020000
 8001994:	20000cc4 	.word	0x20000cc4
 8001998:	20000cf8 	.word	0x20000cf8

0800199c <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

	DAC_tx_buffer=0x02000000; // Write CONFIG1
 80019a0:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <DAC_SendInit+0xfc>)
 80019a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 80019a8:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <DAC_SendInit+0x100>)
 80019aa:	7a1b      	ldrb	r3, [r3, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	f003 0210 	and.w	r2, r3, #16
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <DAC_SendInit+0xfc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a37      	ldr	r2, [pc, #220]	; (8001a98 <DAC_SendInit+0xfc>)
 80019ba:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x06)<<6;
 80019bc:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <DAC_SendInit+0x100>)
 80019be:	79db      	ldrb	r3, [r3, #7]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <DAC_SendInit+0xfc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <DAC_SendInit+0xfc>)
 80019ce:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 80019d0:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <DAC_SendInit+0x100>)
 80019d2:	799b      	ldrb	r3, [r3, #6]
 80019d4:	029b      	lsls	r3, r3, #10
 80019d6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <DAC_SendInit+0xfc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <DAC_SendInit+0xfc>)
 80019e2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <DAC_SendInit+0x100>)
 80019e6:	795b      	ldrb	r3, [r3, #5]
 80019e8:	02db      	lsls	r3, r3, #11
 80019ea:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <DAC_SendInit+0xfc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <DAC_SendInit+0xfc>)
 80019f6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <DAC_SendInit+0x100>)
 80019fa:	791b      	ldrb	r3, [r3, #4]
 80019fc:	031b      	lsls	r3, r3, #12
 80019fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a0a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <DAC_SendInit+0x100>)
 8001a0e:	78db      	ldrb	r3, [r3, #3]
 8001a10:	035b      	lsls	r3, r3, #13
 8001a12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a1e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <DAC_SendInit+0x100>)
 8001a22:	789b      	ldrb	r3, [r3, #2]
 8001a24:	039b      	lsls	r3, r3, #14
 8001a26:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a32:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <DAC_SendInit+0x100>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	049b      	lsls	r3, r3, #18
 8001a3a:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a46:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <DAC_SendInit+0x100>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	05db      	lsls	r3, r3, #23
 8001a4e:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a5a:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0c1b      	lsrs	r3, r3, #16
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a66:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a70:	805a      	strh	r2, [r3, #2]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2110      	movs	r1, #16
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <DAC_SendInit+0x108>)
 8001a78:	f003 fff1 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a82:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <DAC_SendInit+0x10c>)
 8001a84:	f007 fa3a 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <DAC_SendInit+0x108>)
 8001a8e:	f003 ffe6 	bl	8005a5e <HAL_GPIO_WritePin>

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000cc0 	.word	0x20000cc0
 8001a9c:	20000cc8 	.word	0x20000cc8
 8001aa0:	20000cc4 	.word	0x20000cc4
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	20000cf8 	.word	0x20000cf8

08001aac <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
	uint32_t DAC_tx_buffer;
	uint16_t DAC_tx_tmp_buffer[2];

	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	813b      	strh	r3, [r7, #8]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	817b      	strh	r3, [r7, #10]
 8001aba:	2300      	movs	r3, #0
 8001abc:	82fb      	strh	r3, [r7, #22]

	//CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal

	cfg.EN_TMP_CAL=1;
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <DAC_TEMP_CAL+0xd0>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
	DAC_SendInit();
 8001ac4:	f7ff ff6a 	bl	800199c <DAC_SendInit>

	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <DAC_TEMP_CAL+0xd4>)
 8001aca:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	81bb      	strh	r3, [r7, #12]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	81fb      	strh	r3, [r7, #14]

	DAC_tx_buffer=0x85000000; // read status register
 8001ada:	f04f 4305 	mov.w	r3, #2231369728	; 0x85000000
 8001ade:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	80bb      	strh	r3, [r7, #4]
	DAC_tx_tmp_buffer2[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2110      	movs	r1, #16
 8001af2:	4824      	ldr	r0, [pc, #144]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001af4:	f003 ffb3 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001af8:	f107 010c 	add.w	r1, r7, #12
 8001afc:	2302      	movs	r3, #2
 8001afe:	2202      	movs	r2, #2
 8001b00:	4821      	ldr	r0, [pc, #132]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b02:	f007 f9fb 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2110      	movs	r1, #16
 8001b0a:	481e      	ldr	r0, [pc, #120]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b0c:	f003 ffa7 	bl	8005a5e <HAL_GPIO_WritePin>

	do{ // Check complete flag
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2110      	movs	r1, #16
 8001b14:	481b      	ldr	r0, [pc, #108]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b16:	f003 ffa2 	bl	8005a5e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 8001b1a:	1d39      	adds	r1, r7, #4
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4819      	ldr	r0, [pc, #100]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b22:	f007 f9eb 	bl	8008efc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2110      	movs	r1, #16
 8001b2a:	4816      	ldr	r0, [pc, #88]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b2c:	f003 ff97 	bl	8005a5e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2110      	movs	r1, #16
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b36:	f003 ff92 	bl	8005a5e <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 2, 2);
 8001b3a:	f107 0108 	add.w	r1, r7, #8
 8001b3e:	2302      	movs	r3, #2
 8001b40:	2202      	movs	r2, #2
 8001b42:	4811      	ldr	r0, [pc, #68]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b44:	f007 fb16 	bl	8009174 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b4e:	f003 ff86 	bl	8005a5e <HAL_GPIO_WritePin>
		ALM=(spi_receive[1] & 0x1000) >> 12;
 8001b52:	897b      	ldrh	r3, [r7, #10]
 8001b54:	131b      	asrs	r3, r3, #12
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	82fb      	strh	r3, [r7, #22]
		if(ALM!=1)HAL_Delay(10);
 8001b5e:	8afb      	ldrh	r3, [r7, #22]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d002      	beq.n	8001b6a <DAC_TEMP_CAL+0xbe>
 8001b64:	200a      	movs	r0, #10
 8001b66:	f003 f915 	bl	8004d94 <HAL_Delay>
	}while(ALM!=1);
 8001b6a:	8afb      	ldrh	r3, [r7, #22]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d1cf      	bne.n	8001b10 <DAC_TEMP_CAL+0x64>
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000cc8 	.word	0x20000cc8
 8001b80:	04000100 	.word	0x04000100
 8001b84:	40020000 	.word	0x40020000
 8001b88:	20000cf8 	.word	0x20000cf8

08001b8c <DDS_Calculation>:

void DDS_Calculation(void)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
	float hw_limit=1000; // 1kHz hardware optimized limit
 8001b92:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <DDS_Calculation+0x1f0>)
 8001b94:	613b      	str	r3, [r7, #16]
	float dac_counts=DAC_CODE_TOP-1;
 8001b96:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <DDS_Calculation+0x1f4>)
 8001b98:	60fb      	str	r3, [r7, #12]
	float corr_coeff;
	float dac_tmp=DAC_code;
 8001b9a:	4b7a      	ldr	r3, [pc, #488]	; (8001d84 <DDS_Calculation+0x1f8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f8ba 	bl	8000d18 <__aeabi_ui2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60bb      	str	r3, [r7, #8]
	float second_left;
	uint32_t codes_left;

	// Linearity correction
	corr_coeff=corr_coeff_1*dac_tmp*dac_tmp;
 8001ba8:	4b77      	ldr	r3, [pc, #476]	; (8001d88 <DDS_Calculation+0x1fc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f90a 	bl	8000dc8 <__aeabi_fmul>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68b8      	ldr	r0, [r7, #8]
 8001bba:	f7ff f905 	bl	8000dc8 <__aeabi_fmul>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_2*dac_tmp;
 8001bc2:	4b72      	ldr	r3, [pc, #456]	; (8001d8c <DDS_Calculation+0x200>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f8fd 	bl	8000dc8 <__aeabi_fmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fff0 	bl	8000bb8 <__addsf3>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_3;
 8001bdc:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <DDS_Calculation+0x204>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe ffe8 	bl	8000bb8 <__addsf3>
 8001be8:	4603      	mov	r3, r0
 8001bea:	607b      	str	r3, [r7, #4]

	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed); // 1048575 / (14V / 0.01V/s) = 74.898214 Hz
 8001bec:	4b69      	ldr	r3, [pc, #420]	; (8001d94 <DDS_Calculation+0x208>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a69      	ldr	r2, [pc, #420]	; (8001d98 <DDS_Calculation+0x20c>)
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f99a 	bl	8000f30 <__aeabi_fdiv>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff f995 	bl	8000f30 <__aeabi_fdiv>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b64      	ldr	r3, [pc, #400]	; (8001d9c <DDS_Calculation+0x210>)
 8001c0c:	601a      	str	r2, [r3, #0]

	if(DDS_target_frequecny>hw_limit)
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <DDS_Calculation+0x210>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	6938      	ldr	r0, [r7, #16]
 8001c16:	f7ff fa75 	bl	8001104 <__aeabi_fcmplt>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d02e      	beq.n	8001c7e <DDS_Calculation+0xf2>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 8001c20:	4b5e      	ldr	r3, [pc, #376]	; (8001d9c <DDS_Calculation+0x210>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6939      	ldr	r1, [r7, #16]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f982 	bl	8000f30 <__aeabi_fdiv>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fa90 	bl	8001154 <__aeabi_f2uiz>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4a5a      	ldr	r2, [pc, #360]	; (8001da0 <DDS_Calculation+0x214>)
 8001c38:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001c3a:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <DDS_Calculation+0x208>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <DDS_Calculation+0x20c>)
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f973 	bl	8000f30 <__aeabi_fdiv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff f96e 	bl	8000f30 <__aeabi_fdiv>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <DDS_Calculation+0x210>)
 8001c5a:	601a      	str	r2, [r3, #0]
		DDS_target_frequecny/=(float)DDS_target_multipiller;
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <DDS_Calculation+0x210>)
 8001c5e:	681c      	ldr	r4, [r3, #0]
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <DDS_Calculation+0x214>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f857 	bl	8000d18 <__aeabi_ui2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff f95e 	bl	8000f30 <__aeabi_fdiv>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <DDS_Calculation+0x210>)
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e002      	b.n	8001c84 <DDS_Calculation+0xf8>
	} else DDS_target_multipiller = 1;
 8001c7e:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <DDS_Calculation+0x214>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

	DDS_FTW=(((DDS_target_frequecny/corr_coeff)*((1<<CPLD_WORD)+1))/DDS_clock_frequecny)*(float)0xFFFFFFFF;
 8001c84:	4b45      	ldr	r3, [pc, #276]	; (8001d9c <DDS_Calculation+0x210>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f950 	bl	8000f30 <__aeabi_fdiv>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461c      	mov	r4, r3
 8001c94:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <DDS_Calculation+0x218>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f83d 	bl	8000d20 <__aeabi_i2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff f88c 	bl	8000dc8 <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <DDS_Calculation+0x21c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f7ff f938 	bl	8000f30 <__aeabi_fdiv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f87e 	bl	8000dc8 <__aeabi_fmul>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <DDS_Calculation+0x220>)
 8001cd2:	601a      	str	r2, [r3, #0]

	if(DAC_code_direction)
 8001cd4:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <DDS_Calculation+0x224>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <DDS_Calculation+0x160>
	{
		codes_left=0xFFFFF-DAC_code;
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <DDS_Calculation+0x1f8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8001ce4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e002      	b.n	8001cf2 <DDS_Calculation+0x166>
	}
	else
	{
		codes_left=DAC_code;
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <DDS_Calculation+0x1f8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	617b      	str	r3, [r7, #20]
	}

	second_left=codes_left/DDS_target_multipiller/DDS_target_frequecny;
 8001cf2:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <DDS_Calculation+0x214>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff f80b 	bl	8000d18 <__aeabi_ui2f>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <DDS_Calculation+0x210>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7ff f910 	bl	8000f30 <__aeabi_fdiv>
 8001d10:	4603      	mov	r3, r0
 8001d12:	603b      	str	r3, [r7, #0]
	eta_second=(uint32_t)second_left % 60;
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff fa1d 	bl	8001154 <__aeabi_f2uiz>
 8001d1a:	4601      	mov	r1, r0
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <DDS_Calculation+0x228>)
 8001d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8001d22:	095a      	lsrs	r2, r3, #5
 8001d24:	4613      	mov	r3, r2
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	1aca      	subs	r2, r1, r3
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <DDS_Calculation+0x22c>)
 8001d32:	701a      	strb	r2, [r3, #0]
	eta_minute=(uint32_t)(second_left / 60) % 60;
 8001d34:	4921      	ldr	r1, [pc, #132]	; (8001dbc <DDS_Calculation+0x230>)
 8001d36:	6838      	ldr	r0, [r7, #0]
 8001d38:	f7ff f8fa 	bl	8000f30 <__aeabi_fdiv>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fa08 	bl	8001154 <__aeabi_f2uiz>
 8001d44:	4601      	mov	r1, r0
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <DDS_Calculation+0x228>)
 8001d48:	fba3 2301 	umull	r2, r3, r3, r1
 8001d4c:	095a      	lsrs	r2, r3, #5
 8001d4e:	4613      	mov	r3, r2
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	1aca      	subs	r2, r1, r3
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <DDS_Calculation+0x234>)
 8001d5c:	701a      	strb	r2, [r3, #0]
	eta_hours=(uint32_t) second_left / 3600;
 8001d5e:	6838      	ldr	r0, [r7, #0]
 8001d60:	f7ff f9f8 	bl	8001154 <__aeabi_f2uiz>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <DDS_Calculation+0x238>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	0adb      	lsrs	r3, r3, #11
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <DDS_Calculation+0x23c>)
 8001d72:	701a      	strb	r2, [r3, #0]
}
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd90      	pop	{r4, r7, pc}
 8001d7c:	447a0000 	.word	0x447a0000
 8001d80:	497fffe0 	.word	0x497fffe0
 8001d84:	20000cf0 	.word	0x20000cf0
 8001d88:	20000af4 	.word	0x20000af4
 8001d8c:	20000af8 	.word	0x20000af8
 8001d90:	20000afc 	.word	0x20000afc
 8001d94:	20000ce0 	.word	0x20000ce0
 8001d98:	20000cdc 	.word	0x20000cdc
 8001d9c:	20000cd8 	.word	0x20000cd8
 8001da0:	2000077c 	.word	0x2000077c
 8001da4:	20000cd2 	.word	0x20000cd2
 8001da8:	20000780 	.word	0x20000780
 8001dac:	20000cd4 	.word	0x20000cd4
 8001db0:	20000cf4 	.word	0x20000cf4
 8001db4:	88888889 	.word	0x88888889
 8001db8:	20000c9e 	.word	0x20000c9e
 8001dbc:	42700000 	.word	0x42700000
 8001dc0:	20000c9d 	.word	0x20000c9d
 8001dc4:	91a2b3c5 	.word	0x91a2b3c5
 8001dc8:	20000c9c 	.word	0x20000c9c

08001dcc <DDS_Init>:

//==============================================================================================
void DDS_Init(void)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];
	DDS_Calculation();
 8001dd2:	f7ff fedb 	bl	8001b8c <DDS_Calculation>

	HAL_Delay(100);
 8001dd6:	2064      	movs	r0, #100	; 0x64
 8001dd8:	f002 ffdc 	bl	8004d94 <HAL_Delay>

	//CONTROL REGISTER WRITE SLEEP =1 ,	RESET = 1,	CLR = 1
	DDS_tx_buffer[0]=0xC000; // Control DDS (D15=1, D14=1)
 8001ddc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001de0:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=0x7 << 11; //  SLEEP = 1 , RESET = 1,	CLR = 1
 8001de2:	88bb      	ldrh	r3, [r7, #4]
 8001de4:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df2:	4861      	ldr	r0, [pc, #388]	; (8001f78 <DDS_Init+0x1ac>)
 8001df4:	f003 fe33 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001df8:	1d39      	adds	r1, r7, #4
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	485f      	ldr	r0, [pc, #380]	; (8001f7c <DDS_Init+0x1b0>)
 8001e00:	f007 f87c 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e0a:	485b      	ldr	r0, [pc, #364]	; (8001f78 <DDS_Init+0x1ac>)
 8001e0c:	f003 fe27 	bl	8005a5e <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001e10:	2064      	movs	r0, #100	; 0x64
 8001e12:	f002 ffbf 	bl	8004d94 <HAL_Delay>
	//DO NOT !!! SET SYNC AND/OR SELSRC TO 1

	//WRITE INITIAL DATA

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001e16:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001e1a:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001e1c:	88bc      	ldrh	r4, [r7, #4]
 8001e1e:	4b58      	ldr	r3, [pc, #352]	; (8001f80 <DDS_Init+0x1b4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f996 	bl	8001154 <__aeabi_f2uiz>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	0e1b      	lsrs	r3, r3, #24
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4423      	add	r3, r4
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3a:	484f      	ldr	r0, [pc, #316]	; (8001f78 <DDS_Init+0x1ac>)
 8001e3c:	f003 fe0f 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e40:	1d39      	adds	r1, r7, #4
 8001e42:	2305      	movs	r3, #5
 8001e44:	2201      	movs	r2, #1
 8001e46:	484d      	ldr	r0, [pc, #308]	; (8001f7c <DDS_Init+0x1b0>)
 8001e48:	f007 f858 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e52:	4849      	ldr	r0, [pc, #292]	; (8001f78 <DDS_Init+0x1ac>)
 8001e54:	f003 fe03 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001e58:	2032      	movs	r0, #50	; 0x32
 8001e5a:	f002 ff9b 	bl	8004d94 <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001e5e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001e62:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001e64:	88bc      	ldrh	r4, [r7, #4]
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <DDS_Init+0x1b4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f972 	bl	8001154 <__aeabi_f2uiz>
 8001e70:	4603      	mov	r3, r0
 8001e72:	0c1b      	lsrs	r3, r3, #16
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4423      	add	r3, r4
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e80:	2200      	movs	r2, #0
 8001e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e86:	483c      	ldr	r0, [pc, #240]	; (8001f78 <DDS_Init+0x1ac>)
 8001e88:	f003 fde9 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e8c:	1d39      	adds	r1, r7, #4
 8001e8e:	2305      	movs	r3, #5
 8001e90:	2201      	movs	r2, #1
 8001e92:	483a      	ldr	r0, [pc, #232]	; (8001f7c <DDS_Init+0x1b0>)
 8001e94:	f007 f832 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e9e:	4836      	ldr	r0, [pc, #216]	; (8001f78 <DDS_Init+0x1ac>)
 8001ea0:	f003 fddd 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001ea4:	2032      	movs	r0, #50	; 0x32
 8001ea6:	f002 ff75 	bl	8004d94 <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001eaa:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001eae:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001eb0:	88bc      	ldrh	r4, [r7, #4]
 8001eb2:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <DDS_Init+0x1b4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f94c 	bl	8001154 <__aeabi_f2uiz>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	4423      	add	r3, r4
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed2:	4829      	ldr	r0, [pc, #164]	; (8001f78 <DDS_Init+0x1ac>)
 8001ed4:	f003 fdc3 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ed8:	1d39      	adds	r1, r7, #4
 8001eda:	2305      	movs	r3, #5
 8001edc:	2201      	movs	r2, #1
 8001ede:	4827      	ldr	r0, [pc, #156]	; (8001f7c <DDS_Init+0x1b0>)
 8001ee0:	f007 f80c 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eea:	4823      	ldr	r0, [pc, #140]	; (8001f78 <DDS_Init+0x1ac>)
 8001eec:	f003 fdb7 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001ef0:	2032      	movs	r0, #50	; 0x32
 8001ef2:	f002 ff4f 	bl	8004d94 <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001efa:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001efc:	88bc      	ldrh	r4, [r7, #4]
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <DDS_Init+0x1b4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f926 	bl	8001154 <__aeabi_f2uiz>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4423      	add	r3, r4
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1c:	4816      	ldr	r0, [pc, #88]	; (8001f78 <DDS_Init+0x1ac>)
 8001f1e:	f003 fd9e 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f22:	1d39      	adds	r1, r7, #4
 8001f24:	2305      	movs	r3, #5
 8001f26:	2201      	movs	r2, #1
 8001f28:	4814      	ldr	r0, [pc, #80]	; (8001f7c <DDS_Init+0x1b0>)
 8001f2a:	f006 ffe7 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f34:	4810      	ldr	r0, [pc, #64]	; (8001f78 <DDS_Init+0x1ac>)
 8001f36:	f003 fd92 	bl	8005a5e <HAL_GPIO_WritePin>


	HAL_Delay(100);
 8001f3a:	2064      	movs	r0, #100	; 0x64
 8001f3c:	f002 ff2a 	bl	8004d94 <HAL_Delay>

	// CONTROL REGISTER WRITE, 	SLEEP = 0,	RESET = 0, CLR = 0

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Exit DAC from Sleep+Reset mode
 8001f40:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f44:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4c:	480a      	ldr	r0, [pc, #40]	; (8001f78 <DDS_Init+0x1ac>)
 8001f4e:	f003 fd86 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f52:	1d39      	adds	r1, r7, #4
 8001f54:	2305      	movs	r3, #5
 8001f56:	2201      	movs	r2, #1
 8001f58:	4808      	ldr	r0, [pc, #32]	; (8001f7c <DDS_Init+0x1b0>)
 8001f5a:	f006 ffcf 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f64:	4804      	ldr	r0, [pc, #16]	; (8001f78 <DDS_Init+0x1ac>)
 8001f66:	f003 fd7a 	bl	8005a5e <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001f6a:	2064      	movs	r0, #100	; 0x64
 8001f6c:	f002 ff12 	bl	8004d94 <HAL_Delay>

}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	20000d50 	.word	0x20000d50
 8001f80:	20000cd4 	.word	0x20000cd4

08001f84 <DDS_Update>:

//==============================================================================================
void DDS_Update(void)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001f8a:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001f8e:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001f90:	88bc      	ldrh	r4, [r7, #4]
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <DDS_Update+0x120>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff f8dc 	bl	8001154 <__aeabi_f2uiz>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	0e1b      	lsrs	r3, r3, #24
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4423      	add	r3, r4
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fae:	483e      	ldr	r0, [pc, #248]	; (80020a8 <DDS_Update+0x124>)
 8001fb0:	f003 fd55 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001fb4:	1d39      	adds	r1, r7, #4
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	2201      	movs	r2, #1
 8001fba:	483c      	ldr	r0, [pc, #240]	; (80020ac <DDS_Update+0x128>)
 8001fbc:	f006 ff9e 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc6:	4838      	ldr	r0, [pc, #224]	; (80020a8 <DDS_Update+0x124>)
 8001fc8:	f003 fd49 	bl	8005a5e <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001fcc:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001fd0:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001fd2:	88bc      	ldrh	r4, [r7, #4]
 8001fd4:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <DDS_Update+0x120>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f8bb 	bl	8001154 <__aeabi_f2uiz>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4423      	add	r3, r4
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff4:	482c      	ldr	r0, [pc, #176]	; (80020a8 <DDS_Update+0x124>)
 8001ff6:	f003 fd32 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ffa:	1d39      	adds	r1, r7, #4
 8001ffc:	2305      	movs	r3, #5
 8001ffe:	2201      	movs	r2, #1
 8002000:	482a      	ldr	r0, [pc, #168]	; (80020ac <DDS_Update+0x128>)
 8002002:	f006 ff7b 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200c:	4826      	ldr	r0, [pc, #152]	; (80020a8 <DDS_Update+0x124>)
 800200e:	f003 fd26 	bl	8005a5e <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8002012:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8002016:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8002018:	88bc      	ldrh	r4, [r7, #4]
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <DDS_Update+0x120>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f898 	bl	8001154 <__aeabi_f2uiz>
 8002024:	4603      	mov	r3, r0
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	b29b      	uxth	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	b29b      	uxth	r3, r3
 800202e:	4423      	add	r3, r4
 8002030:	b29b      	uxth	r3, r3
 8002032:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002034:	2200      	movs	r2, #0
 8002036:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800203a:	481b      	ldr	r0, [pc, #108]	; (80020a8 <DDS_Update+0x124>)
 800203c:	f003 fd0f 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8002040:	1d39      	adds	r1, r7, #4
 8002042:	2305      	movs	r3, #5
 8002044:	2201      	movs	r2, #1
 8002046:	4819      	ldr	r0, [pc, #100]	; (80020ac <DDS_Update+0x128>)
 8002048:	f006 ff58 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002052:	4815      	ldr	r0, [pc, #84]	; (80020a8 <DDS_Update+0x124>)
 8002054:	f003 fd03 	bl	8005a5e <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8002058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205c:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 800205e:	88bc      	ldrh	r4, [r7, #4]
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <DDS_Update+0x120>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f875 	bl	8001154 <__aeabi_f2uiz>
 800206a:	4603      	mov	r3, r0
 800206c:	b29b      	uxth	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	b29b      	uxth	r3, r3
 8002072:	4423      	add	r3, r4
 8002074:	b29b      	uxth	r3, r3
 8002076:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800207e:	480a      	ldr	r0, [pc, #40]	; (80020a8 <DDS_Update+0x124>)
 8002080:	f003 fced 	bl	8005a5e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8002084:	1d39      	adds	r1, r7, #4
 8002086:	2305      	movs	r3, #5
 8002088:	2201      	movs	r2, #1
 800208a:	4808      	ldr	r0, [pc, #32]	; (80020ac <DDS_Update+0x128>)
 800208c:	f006 ff36 	bl	8008efc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002090:	2201      	movs	r2, #1
 8002092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002096:	4804      	ldr	r0, [pc, #16]	; (80020a8 <DDS_Update+0x124>)
 8002098:	f003 fce1 	bl	8005a5e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
*/
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd90      	pop	{r4, r7, pc}
 80020a4:	20000cd4 	.word	0x20000cd4
 80020a8:	40020400 	.word	0x40020400
 80020ac:	20000d50 	.word	0x20000d50

080020b0 <LcdSend>:
unsigned char LcdCache[LCD_CACHSIZE];   // Фреймбуфер
unsigned int LcdCacheIdx = 0;   // Текущий адрес во фреймбуфере


void LcdSend(uint8_t data, uint8_t cmd) //Sends data to display controller
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	460a      	mov	r2, r1
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	4613      	mov	r3, r2
 80020be:	71bb      	strb	r3, [r7, #6]
  uint8_t sdata = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]

  lcd44780_RW_0;
 80020c4:	2200      	movs	r2, #0
 80020c6:	2102      	movs	r1, #2
 80020c8:	4811      	ldr	r0, [pc, #68]	; (8002110 <LcdSend+0x60>)
 80020ca:	f003 fcc8 	bl	8005a5e <HAL_GPIO_WritePin>

  sdata = data;
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	73fb      	strb	r3, [r7, #15]
  if(cmd == lcd_CMD)
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <LcdSend+0x34>
  {
	  lcd44780_RS_0;
 80020d8:	2201      	movs	r2, #1
 80020da:	2101      	movs	r1, #1
 80020dc:	480c      	ldr	r0, [pc, #48]	; (8002110 <LcdSend+0x60>)
 80020de:	f003 fcbe 	bl	8005a5e <HAL_GPIO_WritePin>
 80020e2:	e004      	b.n	80020ee <LcdSend+0x3e>
  }                             //идентефикатор кода
  else
  {
	  lcd44780_RS_1;
 80020e4:	2200      	movs	r2, #0
 80020e6:	2101      	movs	r1, #1
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <LcdSend+0x60>)
 80020ea:	f003 fcb8 	bl	8005a5e <HAL_GPIO_WritePin>
  }                             //идентефикатор данных
  send_data(sdata);
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 f97d 	bl	80023f0 <send_data>

  if(cmd == lcd_CMD)while(check_busy_flag());
 80020f6:	79bb      	ldrb	r3, [r7, #6]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <LcdSend+0x58>
 80020fc:	bf00      	nop
 80020fe:	f000 f98d 	bl	800241c <check_busy_flag>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1fa      	bne.n	80020fe <LcdSend+0x4e>
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40020400 	.word	0x40020400

08002114 <LcdUpdate>:

void LcdUpdate(void)            //Copies the LCD cache into the device RAM
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
  int i = 0, j = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	2300      	movs	r3, #0
 8002120:	603b      	str	r3, [r7, #0]

  LcdSend(HD44780_SET_CGRAM_ADD, lcd_CMD);//Позицианируем курсор на начало координат
 8002122:	2101      	movs	r1, #1
 8002124:	2040      	movs	r0, #64	; 0x40
 8002126:	f7ff ffc3 	bl	80020b0 <LcdSend>
  LcdSend(HD44780_SET_DDRAM_ADD, lcd_CMD);
 800212a:	2101      	movs	r1, #1
 800212c:	2080      	movs	r0, #128	; 0x80
 800212e:	f7ff ffbf 	bl	80020b0 <LcdSend>

  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	e017      	b.n	8002168 <LcdUpdate+0x54>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 8002138:	2300      	movs	r3, #0
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	e00e      	b.n	800215c <LcdUpdate+0x48>
    {
      LcdSend(LcdCache[((i * LCD_X_RES) + j)], lcd_DATA);       //вычисляем адрес в фрейм буфере, и данные от туда грузим в дисплей.
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2264      	movs	r2, #100	; 0x64
 8002142:	fb03 f202 	mul.w	r2, r3, r2
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	4413      	add	r3, r2
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <LcdUpdate+0x64>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	2102      	movs	r1, #2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ffad 	bl	80020b0 <LcdSend>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b63      	cmp	r3, #99	; 0x63
 8002160:	dded      	ble.n	800213e <LcdUpdate+0x2a>
  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3301      	adds	r3, #1
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	dde4      	ble.n	8002138 <LcdUpdate+0x24>
    }
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000b1c 	.word	0x20000b1c

0800217c <LcdClear_massive>:
  LcdUpdate();
}


void LcdClear_massive(void)     //Clears the display
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
  int i = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]

  for (i = 0; i < LCD_CACHSIZE; i++)
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	e007      	b.n	800219c <LcdClear_massive+0x20>
    LcdCache[i] = 0;            //забиваем всю память 0
 800218c:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <LcdClear_massive+0x34>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < LCD_CACHSIZE; i++)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3301      	adds	r3, #1
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2bc7      	cmp	r3, #199	; 0xc7
 80021a0:	ddf4      	ble.n	800218c <LcdClear_massive+0x10>
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000b1c 	.word	0x20000b1c

080021b4 <LcdGotoXYFont>:
  }
}


void LcdGotoXYFont(unsigned char x, unsigned char y)    //Sets cursor location to xy location. Range: 1,1 .. 14,6
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	460a      	mov	r2, r1
 80021be:	71fb      	strb	r3, [r7, #7]
 80021c0:	4613      	mov	r3, r2
 80021c2:	71bb      	strb	r3, [r7, #6]
  LcdCacheIdx = ((int) (y) - 1) * Cntr_X_RES + ((int) (x) - 1) * Cntr_Y_RES;
 80021c4:	79bb      	ldrb	r3, [r7, #6]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	2264      	movs	r2, #100	; 0x64
 80021ca:	fb03 f202 	mul.w	r2, r3, r2
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	4413      	add	r3, r2
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <LcdGotoXYFont+0x34>)
 80021da:	601a      	str	r2, [r3, #0]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000be4 	.word	0x20000be4

080021ec <clean_lcd_buf>:

void clean_lcd_buf(void)        //очистка текстового буфера
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	71fb      	strb	r3, [r7, #7]

  for (i = 0; i < 20; i++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	71fb      	strb	r3, [r7, #7]
 80021fa:	e006      	b.n	800220a <clean_lcd_buf+0x1e>
    lcd_buf[i] = 0;
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	4a07      	ldr	r2, [pc, #28]	; (800221c <clean_lcd_buf+0x30>)
 8002200:	2100      	movs	r1, #0
 8002202:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 20; i++)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	3301      	adds	r3, #1
 8002208:	71fb      	strb	r3, [r7, #7]
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	2b13      	cmp	r3, #19
 800220e:	d9f5      	bls.n	80021fc <clean_lcd_buf+0x10>
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000b08 	.word	0x20000b08

08002220 <LcdChr>:

void LcdChr(int ch)             //Displays a character at current cursor location and increment cursor location
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  char i = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]
  if(ch > 0x7f)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b7f      	cmp	r3, #127	; 0x7f
 8002230:	dd1a      	ble.n	8002268 <LcdChr+0x48>
  {
    for (i = 0; i < 5; i++)
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e013      	b.n	8002260 <LcdChr+0x40>
      LcdCache[LcdCacheIdx++] = lcd_font_table_rus[(ch * 5 + (i) - 0x3C0)];     //выделяем байт-столбик из символа и грузим в массив - 5 раз
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	441a      	add	r2, r3
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	4413      	add	r3, r2
 8002244:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <LcdChr+0x98>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	1c59      	adds	r1, r3, #1
 800224e:	481a      	ldr	r0, [pc, #104]	; (80022b8 <LcdChr+0x98>)
 8002250:	6001      	str	r1, [r0, #0]
 8002252:	491a      	ldr	r1, [pc, #104]	; (80022bc <LcdChr+0x9c>)
 8002254:	5c89      	ldrb	r1, [r1, r2]
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <LcdChr+0xa0>)
 8002258:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	3301      	adds	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b04      	cmp	r3, #4
 8002264:	d9e8      	bls.n	8002238 <LcdChr+0x18>
 8002266:	e019      	b.n	800229c <LcdChr+0x7c>
  } else
  {
    for (i = 0; i < 5; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e013      	b.n	8002296 <LcdChr+0x76>
      LcdCache[LcdCacheIdx++] = lcd_font_table[(ch * 5 + (i) - 0xA0)];  //выделяем байт-столбик из символа и грузим в массив - 5 раз
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	441a      	add	r2, r3
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	4413      	add	r3, r2
 800227a:	f1a3 02a0 	sub.w	r2, r3, #160	; 0xa0
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <LcdChr+0x98>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1c59      	adds	r1, r3, #1
 8002284:	480c      	ldr	r0, [pc, #48]	; (80022b8 <LcdChr+0x98>)
 8002286:	6001      	str	r1, [r0, #0]
 8002288:	490e      	ldr	r1, [pc, #56]	; (80022c4 <LcdChr+0xa4>)
 800228a:	5c89      	ldrb	r1, [r1, r2]
 800228c:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <LcdChr+0xa0>)
 800228e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	3301      	adds	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	2b04      	cmp	r3, #4
 800229a:	d9e8      	bls.n	800226e <LcdChr+0x4e>
  }
  LcdCache[LcdCacheIdx++] = 0x00;       //добавляем пробел между символами
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <LcdChr+0x98>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	4905      	ldr	r1, [pc, #20]	; (80022b8 <LcdChr+0x98>)
 80022a4:	600a      	str	r2, [r1, #0]
 80022a6:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <LcdChr+0xa0>)
 80022a8:	2100      	movs	r1, #0
 80022aa:	54d1      	strb	r1, [r2, r3]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000be4 	.word	0x20000be4
 80022bc:	200001e0 	.word	0x200001e0
 80022c0:	20000b1c 	.word	0x20000b1c
 80022c4:	20000000 	.word	0x20000000

080022c8 <LcdString>:
  }
  LcdCache[LcdCacheIdx++] = 0xFF;       //добавляем пробел между символами
}

void LcdString(unsigned char x, unsigned char y)        //Displays a string at current cursor location
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	460a      	mov	r2, r1
 80022d2:	71fb      	strb	r3, [r7, #7]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71bb      	strb	r3, [r7, #6]
  unsigned char i = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]

  if(x > 17 || y > 8)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b11      	cmp	r3, #17
 80022e0:	d81f      	bhi.n	8002322 <LcdString+0x5a>
 80022e2:	79bb      	ldrb	r3, [r7, #6]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d81c      	bhi.n	8002322 <LcdString+0x5a>
    return;
  LcdGotoXYFont(x, y);
 80022e8:	79ba      	ldrb	r2, [r7, #6]
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff60 	bl	80021b4 <LcdGotoXYFont>
  for (i = 0; i < 17; i++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e00d      	b.n	8002316 <LcdString+0x4e>
    if(lcd_buf[i])
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	4a0b      	ldr	r2, [pc, #44]	; (800232c <LcdString+0x64>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <LcdString+0x48>
      LcdChr(lcd_buf[i]);
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <LcdString+0x64>)
 8002308:	5cd3      	ldrb	r3, [r2, r3]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff88 	bl	8002220 <LcdChr>
  for (i = 0; i < 17; i++)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	2b10      	cmp	r3, #16
 800231a:	d9ee      	bls.n	80022fa <LcdString+0x32>
  clean_lcd_buf();
 800231c:	f7ff ff66 	bl	80021ec <clean_lcd_buf>
 8002320:	e000      	b.n	8002324 <LcdString+0x5c>
    return;
 8002322:	bf00      	nop
}
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000b08 	.word	0x20000b08

08002330 <pulse_e>:
//////////////////////////////////////////////////////////////////////////////////////



void pulse_e() //импульс на вход Е индикатора
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_SET);//    PIN_ON(PIN_E);
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <pulse_e+0x20>)
 800233c:	f003 fb8f 	bl	8005a5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 8002340:	2200      	movs	r2, #0
 8002342:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002346:	4802      	ldr	r0, [pc, #8]	; (8002350 <pulse_e+0x20>)
 8002348:	f003 fb89 	bl	8005a5e <HAL_GPIO_WritePin>
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020400 	.word	0x40020400

08002354 <send_nibble>:

void send_nibble(unsigned char data) //полубайтовый вывод
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  //выводим половину байта на соответствующие контакты
  if(data & 0x01)
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <send_nibble+0x20>
	HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB4);
 8002368:	2201      	movs	r2, #1
 800236a:	2104      	movs	r1, #4
 800236c:	481f      	ldr	r0, [pc, #124]	; (80023ec <send_nibble+0x98>)
 800236e:	f003 fb76 	bl	8005a5e <HAL_GPIO_WritePin>
 8002372:	e004      	b.n	800237e <send_nibble+0x2a>
  else
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 8002374:	2200      	movs	r2, #0
 8002376:	2104      	movs	r1, #4
 8002378:	481c      	ldr	r0, [pc, #112]	; (80023ec <send_nibble+0x98>)
 800237a:	f003 fb70 	bl	8005a5e <HAL_GPIO_WritePin>

  if(data & 0x02)
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <send_nibble+0x40>
		HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB5);
 8002388:	2201      	movs	r2, #1
 800238a:	2108      	movs	r1, #8
 800238c:	4817      	ldr	r0, [pc, #92]	; (80023ec <send_nibble+0x98>)
 800238e:	f003 fb66 	bl	8005a5e <HAL_GPIO_WritePin>
 8002392:	e004      	b.n	800239e <send_nibble+0x4a>
	  else
	    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 8002394:	2200      	movs	r2, #0
 8002396:	2108      	movs	r1, #8
 8002398:	4814      	ldr	r0, [pc, #80]	; (80023ec <send_nibble+0x98>)
 800239a:	f003 fb60 	bl	8005a5e <HAL_GPIO_WritePin>

  if(data & 0x04)
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <send_nibble+0x60>
		HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB6);
 80023a8:	2201      	movs	r2, #1
 80023aa:	2110      	movs	r1, #16
 80023ac:	480f      	ldr	r0, [pc, #60]	; (80023ec <send_nibble+0x98>)
 80023ae:	f003 fb56 	bl	8005a5e <HAL_GPIO_WritePin>
 80023b2:	e004      	b.n	80023be <send_nibble+0x6a>
	  else
	    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2110      	movs	r1, #16
 80023b8:	480c      	ldr	r0, [pc, #48]	; (80023ec <send_nibble+0x98>)
 80023ba:	f003 fb50 	bl	8005a5e <HAL_GPIO_WritePin>

  if(data & 0x08)
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <send_nibble+0x80>
		HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB7);
 80023c8:	2201      	movs	r2, #1
 80023ca:	2120      	movs	r1, #32
 80023cc:	4807      	ldr	r0, [pc, #28]	; (80023ec <send_nibble+0x98>)
 80023ce:	f003 fb46 	bl	8005a5e <HAL_GPIO_WritePin>
 80023d2:	e004      	b.n	80023de <send_nibble+0x8a>
	  else
	    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2120      	movs	r1, #32
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <send_nibble+0x98>)
 80023da:	f003 fb40 	bl	8005a5e <HAL_GPIO_WritePin>

  pulse_e(); //чтобы индикатор проглотил данные
 80023de:	f7ff ffa7 	bl	8002330 <pulse_e>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40020400 	.word	0x40020400

080023f0 <send_data>:

void send_data(unsigned char data) //вывод 2хполбайта на индикатор
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  //Первым шлем старшие полбайта: по инструкции
  //сначала столбец, потом строка таблицы знакогенератора
  send_nibble((data>>4) & 0x0F);
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ffa7 	bl	8002354 <send_nibble>
  send_nibble(data & 0x0F);
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ffa0 	bl	8002354 <send_nibble>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <check_busy_flag>:

int check_busy_flag(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002422:	463b      	mov	r3, r7
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
	GPIO_PinState status;

	lcd44780_RW_1; // Read
 8002430:	2201      	movs	r2, #1
 8002432:	2102      	movs	r1, #2
 8002434:	4822      	ldr	r0, [pc, #136]	; (80024c0 <check_busy_flag+0xa4>)
 8002436:	f003 fb12 	bl	8005a5e <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 800243a:	2320      	movs	r3, #32
 800243c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002446:	2302      	movs	r3, #2
 8002448:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	463b      	mov	r3, r7
 800244c:	4619      	mov	r1, r3
 800244e:	481c      	ldr	r0, [pc, #112]	; (80024c0 <check_busy_flag+0xa4>)
 8002450:	f003 f96e 	bl	8005730 <HAL_GPIO_Init>

	lcd44780_E_1;
 8002454:	2201      	movs	r2, #1
 8002456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800245a:	4819      	ldr	r0, [pc, #100]	; (80024c0 <check_busy_flag+0xa4>)
 800245c:	f003 faff 	bl	8005a5e <HAL_GPIO_WritePin>
	status=HAL_GPIO_ReadPin(Display_DB7_GPIO_Port, Display_DB7_Pin);
 8002460:	2120      	movs	r1, #32
 8002462:	4817      	ldr	r0, [pc, #92]	; (80024c0 <check_busy_flag+0xa4>)
 8002464:	f003 fae4 	bl	8005a30 <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	75fb      	strb	r3, [r7, #23]
	lcd44780_E_0;
 800246c:	2200      	movs	r2, #0
 800246e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002472:	4813      	ldr	r0, [pc, #76]	; (80024c0 <check_busy_flag+0xa4>)
 8002474:	f003 faf3 	bl	8005a5e <HAL_GPIO_WritePin>
	lcd44780_E_1;
 8002478:	2201      	movs	r2, #1
 800247a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800247e:	4810      	ldr	r0, [pc, #64]	; (80024c0 <check_busy_flag+0xa4>)
 8002480:	f003 faed 	bl	8005a5e <HAL_GPIO_WritePin>
	lcd44780_E_0;
 8002484:	2200      	movs	r2, #0
 8002486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800248a:	480d      	ldr	r0, [pc, #52]	; (80024c0 <check_busy_flag+0xa4>)
 800248c:	f003 fae7 	bl	8005a5e <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 8002490:	2320      	movs	r3, #32
 8002492:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002494:	2311      	movs	r3, #17
 8002496:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800249c:	2302      	movs	r3, #2
 800249e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a0:	463b      	mov	r3, r7
 80024a2:	4619      	mov	r1, r3
 80024a4:	4806      	ldr	r0, [pc, #24]	; (80024c0 <check_busy_flag+0xa4>)
 80024a6:	f003 f943 	bl	8005730 <HAL_GPIO_Init>
	lcd44780_RW_0;
 80024aa:	2200      	movs	r2, #0
 80024ac:	2102      	movs	r1, #2
 80024ae:	4804      	ldr	r0, [pc, #16]	; (80024c0 <check_busy_flag+0xa4>)
 80024b0:	f003 fad5 	bl	8005a5e <HAL_GPIO_WritePin>
	return status;
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40020400 	.word	0x40020400

080024c4 <init_LCD>:

void init_LCD() //инициализация ЖК
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_Power_GPIO_Port, Display_Power_Pin, GPIO_PIN_RESET);
 80024c8:	2200      	movs	r2, #0
 80024ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ce:	4847      	ldr	r0, [pc, #284]	; (80025ec <init_LCD+0x128>)
 80024d0:	f003 fac5 	bl	8005a5e <HAL_GPIO_WritePin>
  //Выводы в 0
    HAL_GPIO_WritePin(Display_RS_GPIO_Port, Display_RS_Pin, GPIO_PIN_SET);//  PIN_OFF(PIN_RS); !!!
 80024d4:	2201      	movs	r2, #1
 80024d6:	2101      	movs	r1, #1
 80024d8:	4844      	ldr	r0, [pc, #272]	; (80025ec <init_LCD+0x128>)
 80024da:	f003 fac0 	bl	8005a5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024e4:	4841      	ldr	r0, [pc, #260]	; (80025ec <init_LCD+0x128>)
 80024e6:	f003 faba 	bl	8005a5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2104      	movs	r1, #4
 80024ee:	483f      	ldr	r0, [pc, #252]	; (80025ec <init_LCD+0x128>)
 80024f0:	f003 fab5 	bl	8005a5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2108      	movs	r1, #8
 80024f8:	483c      	ldr	r0, [pc, #240]	; (80025ec <init_LCD+0x128>)
 80024fa:	f003 fab0 	bl	8005a5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 80024fe:	2200      	movs	r2, #0
 8002500:	2110      	movs	r1, #16
 8002502:	483a      	ldr	r0, [pc, #232]	; (80025ec <init_LCD+0x128>)
 8002504:	f003 faab 	bl	8005a5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 8002508:	2200      	movs	r2, #0
 800250a:	2120      	movs	r1, #32
 800250c:	4837      	ldr	r0, [pc, #220]	; (80025ec <init_LCD+0x128>)
 800250e:	f003 faa6 	bl	8005a5e <HAL_GPIO_WritePin>

	//Ждем включения ЖКИ
    HAL_Delay(500);
 8002512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002516:	f002 fc3d 	bl	8004d94 <HAL_Delay>
    lcd44780_RS_0;
 800251a:	2201      	movs	r2, #1
 800251c:	2101      	movs	r1, #1
 800251e:	4833      	ldr	r0, [pc, #204]	; (80025ec <init_LCD+0x128>)
 8002520:	f003 fa9d 	bl	8005a5e <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 8002524:	2200      	movs	r2, #0
 8002526:	2102      	movs	r1, #2
 8002528:	4830      	ldr	r0, [pc, #192]	; (80025ec <init_LCD+0x128>)
 800252a:	f003 fa98 	bl	8005a5e <HAL_GPIO_WritePin>
	send_nibble(0x02);
 800252e:	2002      	movs	r0, #2
 8002530:	f7ff ff10 	bl	8002354 <send_nibble>
	send_nibble(0x02);
 8002534:	2002      	movs	r0, #2
 8002536:	f7ff ff0d 	bl	8002354 <send_nibble>
	send_nibble(0x08);// N=1 F=0
 800253a:	2008      	movs	r0, #8
 800253c:	f7ff ff0a 	bl	8002354 <send_nibble>

	while(check_busy_flag());
 8002540:	bf00      	nop
 8002542:	f7ff ff6b 	bl	800241c <check_busy_flag>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1fa      	bne.n	8002542 <init_LCD+0x7e>

	send_nibble(0x00);
 800254c:	2000      	movs	r0, #0
 800254e:	f7ff ff01 	bl	8002354 <send_nibble>
	send_nibble(0x0E);// D=1 C=1 B=0
 8002552:	200e      	movs	r0, #14
 8002554:	f7ff fefe 	bl	8002354 <send_nibble>

	while(check_busy_flag());
 8002558:	bf00      	nop
 800255a:	f7ff ff5f 	bl	800241c <check_busy_flag>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1fa      	bne.n	800255a <init_LCD+0x96>
	send_nibble(0x00);
 8002564:	2000      	movs	r0, #0
 8002566:	f7ff fef5 	bl	8002354 <send_nibble>
	send_nibble(0x01);
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff fef2 	bl	8002354 <send_nibble>

	while(check_busy_flag());
 8002570:	bf00      	nop
 8002572:	f7ff ff53 	bl	800241c <check_busy_flag>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1fa      	bne.n	8002572 <init_LCD+0xae>
	send_nibble(0x00);
 800257c:	2000      	movs	r0, #0
 800257e:	f7ff fee9 	bl	8002354 <send_nibble>
	send_nibble(0x06); // I/D=1  S/H=0
 8002582:	2006      	movs	r0, #6
 8002584:	f7ff fee6 	bl	8002354 <send_nibble>
//	send_nibble(0x04); // I/D=0  S/H=0

	while(check_busy_flag());
 8002588:	bf00      	nop
 800258a:	f7ff ff47 	bl	800241c <check_busy_flag>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1fa      	bne.n	800258a <init_LCD+0xc6>

    lcd44780_RS_0;
 8002594:	2201      	movs	r2, #1
 8002596:	2101      	movs	r1, #1
 8002598:	4814      	ldr	r0, [pc, #80]	; (80025ec <init_LCD+0x128>)
 800259a:	f003 fa60 	bl	8005a5e <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 800259e:	2200      	movs	r2, #0
 80025a0:	2102      	movs	r1, #2
 80025a2:	4812      	ldr	r0, [pc, #72]	; (80025ec <init_LCD+0x128>)
 80025a4:	f003 fa5b 	bl	8005a5e <HAL_GPIO_WritePin>
	send_nibble(0x02); // DL=0
 80025a8:	2002      	movs	r0, #2
 80025aa:	f7ff fed3 	bl	8002354 <send_nibble>
	send_nibble(0x0A);// N=1 F=0 FT1=1 FT0=0
 80025ae:	200a      	movs	r0, #10
 80025b0:	f7ff fed0 	bl	8002354 <send_nibble>
	while(check_busy_flag());
 80025b4:	bf00      	nop
 80025b6:	f7ff ff31 	bl	800241c <check_busy_flag>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1fa      	bne.n	80025b6 <init_LCD+0xf2>


    send_data(0x1F); //переключение в графику
 80025c0:	201f      	movs	r0, #31
 80025c2:	f7ff ff15 	bl	80023f0 <send_data>
    while(check_busy_flag());
 80025c6:	bf00      	nop
 80025c8:	f7ff ff28 	bl	800241c <check_busy_flag>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1fa      	bne.n	80025c8 <init_LCD+0x104>

    send_data(0x01); //очистили от мусора ОЗУ (т.с. что clear())
 80025d2:	2001      	movs	r0, #1
 80025d4:	f7ff ff0c 	bl	80023f0 <send_data>
    while(check_busy_flag());
 80025d8:	bf00      	nop
 80025da:	f7ff ff1f 	bl	800241c <check_busy_flag>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1fa      	bne.n	80025da <init_LCD+0x116>

    LcdClear_massive();
 80025e4:	f7ff fdca 	bl	800217c <LcdClear_massive>

}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40020400 	.word	0x40020400

080025f0 <LcdBarLine>:
while(check_busy_flag());

}

void LcdBarLine(uint32_t fill)    // рисуем прогресс-бар в второй строке
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	uint16_t i, full_fill_position;
	float y;

	if(fill>0xFFFFF)return;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025fe:	f080 808f 	bcs.w	8002720 <LcdBarLine+0x130>

	// поиск свободного места в массиве кеша дисплея
//	for (i = LCD_CACHSIZE-1; i > LCD_X_RES; i--) // поиск свободного места в массиве кеша дисплея, в указанной строке
//		if(LcdCache[i]==0x00)
//			found_free_position=i;
	y=LCD_X_RES;
 8002602:	4b49      	ldr	r3, [pc, #292]	; (8002728 <LcdBarLine+0x138>)
 8002604:	613b      	str	r3, [r7, #16]
	y*=8; //сколько всего диступно места
 8002606:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800260a:	6938      	ldr	r0, [r7, #16]
 800260c:	f7fe fbdc 	bl	8000dc8 <__aeabi_fmul>
 8002610:	4603      	mov	r3, r0
 8002612:	613b      	str	r3, [r7, #16]
	y/=(float)0xFFFFF;
 8002614:	4945      	ldr	r1, [pc, #276]	; (800272c <LcdBarLine+0x13c>)
 8002616:	6938      	ldr	r0, [r7, #16]
 8002618:	f7fe fc8a 	bl	8000f30 <__aeabi_fdiv>
 800261c:	4603      	mov	r3, r0
 800261e:	613b      	str	r3, [r7, #16]
	y*=(float)fill;// получаем коэфицент заполнения прогрессбара
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fe fb79 	bl	8000d18 <__aeabi_ui2f>
 8002626:	4603      	mov	r3, r0
 8002628:	4619      	mov	r1, r3
 800262a:	6938      	ldr	r0, [r7, #16]
 800262c:	f7fe fbcc 	bl	8000dc8 <__aeabi_fmul>
 8002630:	4603      	mov	r3, r0
 8002632:	613b      	str	r3, [r7, #16]
	full_fill_position=floor(y/8);
 8002634:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002638:	6938      	ldr	r0, [r7, #16]
 800263a:	f7fe fc79 	bl	8000f30 <__aeabi_fdiv>
 800263e:	4603      	mov	r3, r0
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ff13 	bl	800046c <__aeabi_f2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f00c fcdf 	bl	800f010 <floor>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f7fe fa37 	bl	8000acc <__aeabi_d2uiz>
 800265e:	4603      	mov	r3, r0
 8002660:	81fb      	strh	r3, [r7, #14]
	//need_to_be_filled=(LCD_CACHSIZE-1-found_free_position)*8 - ;
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 8002662:	2364      	movs	r3, #100	; 0x64
 8002664:	82fb      	strh	r3, [r7, #22]
 8002666:	e057      	b.n	8002718 <LcdBarLine+0x128>
		if(y!=0)
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	6938      	ldr	r0, [r7, #16]
 800266e:	f7fe fd3f 	bl	80010f0 <__aeabi_fcmpeq>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d14c      	bne.n	8002712 <LcdBarLine+0x122>
		{
			if(full_fill_position>(i-LCD_X_RES))
 8002678:	8afb      	ldrh	r3, [r7, #22]
 800267a:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800267e:	89fb      	ldrh	r3, [r7, #14]
 8002680:	429a      	cmp	r2, r3
 8002682:	dc08      	bgt.n	8002696 <LcdBarLine+0xa6>
			{
				LcdCache[i]=LcdCache[i]^0xFF;
 8002684:	8afb      	ldrh	r3, [r7, #22]
 8002686:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <LcdBarLine+0x140>)
 8002688:	5cd2      	ldrb	r2, [r2, r3]
 800268a:	8afb      	ldrh	r3, [r7, #22]
 800268c:	43d2      	mvns	r2, r2
 800268e:	b2d1      	uxtb	r1, r2
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <LcdBarLine+0x140>)
 8002692:	54d1      	strb	r1, [r2, r3]
 8002694:	e03d      	b.n	8002712 <LcdBarLine+0x122>
			} else
			{
				y-=floor(y/8)*8;
 8002696:	6938      	ldr	r0, [r7, #16]
 8002698:	f7fd fee8 	bl	800046c <__aeabi_f2d>
 800269c:	4604      	mov	r4, r0
 800269e:	460d      	mov	r5, r1
 80026a0:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80026a4:	6938      	ldr	r0, [r7, #16]
 80026a6:	f7fe fc43 	bl	8000f30 <__aeabi_fdiv>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fd fedd 	bl	800046c <__aeabi_f2d>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	f00c fca9 	bl	800f010 <floor>
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <LcdBarLine+0x144>)
 80026c4:	f7fd ff2a 	bl	800051c <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4620      	mov	r0, r4
 80026ce:	4629      	mov	r1, r5
 80026d0:	f7fd fd6c 	bl	80001ac <__aeabi_dsub>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	f7fe fa16 	bl	8000b0c <__aeabi_d2f>
 80026e0:	4603      	mov	r3, r0
 80026e2:	613b      	str	r3, [r7, #16]
				LcdCache[i]=LcdCache[i]^((1<<(uint16_t)y)-1);
 80026e4:	8afb      	ldrh	r3, [r7, #22]
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <LcdBarLine+0x140>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	b25c      	sxtb	r4, r3
 80026ec:	6938      	ldr	r0, [r7, #16]
 80026ee:	f7fe fd31 	bl	8001154 <__aeabi_f2uiz>
 80026f2:	4603      	mov	r3, r0
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	2301      	movs	r3, #1
 80026fa:	4093      	lsls	r3, r2
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	b25b      	sxtb	r3, r3
 8002704:	4063      	eors	r3, r4
 8002706:	b25a      	sxtb	r2, r3
 8002708:	8afb      	ldrh	r3, [r7, #22]
 800270a:	b2d1      	uxtb	r1, r2
 800270c:	4a08      	ldr	r2, [pc, #32]	; (8002730 <LcdBarLine+0x140>)
 800270e:	54d1      	strb	r1, [r2, r3]
				break;
 8002710:	e007      	b.n	8002722 <LcdBarLine+0x132>
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 8002712:	8afb      	ldrh	r3, [r7, #22]
 8002714:	3301      	adds	r3, #1
 8002716:	82fb      	strh	r3, [r7, #22]
 8002718:	8afb      	ldrh	r3, [r7, #22]
 800271a:	2bc7      	cmp	r3, #199	; 0xc7
 800271c:	d9a4      	bls.n	8002668 <LcdBarLine+0x78>
 800271e:	e000      	b.n	8002722 <LcdBarLine+0x132>
	if(fill>0xFFFFF)return;
 8002720:	bf00      	nop
			}
		}
	}

}
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bdb0      	pop	{r4, r5, r7, pc}
 8002728:	42c80000 	.word	0x42c80000
 800272c:	497ffff0 	.word	0x497ffff0
 8002730:	20000b1c 	.word	0x20000b1c
 8002734:	40200000 	.word	0x40200000

08002738 <output_state>:
//==============================================================================================


//==============================================================================================
void output_state(uint8_t type)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
	int relay_settling_time_ms=50;
 8002742:	2332      	movs	r3, #50	; 0x32
 8002744:	60fb      	str	r3, [r7, #12]
	switch(type)
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2b04      	cmp	r3, #4
 800274a:	f200 80f2 	bhi.w	8002932 <output_state+0x1fa>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <output_state+0x1c>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	08002769 	.word	0x08002769
 8002758:	080027a1 	.word	0x080027a1
 800275c:	080027f1 	.word	0x080027f1
 8002760:	08002851 	.word	0x08002851
 8002764:	080028b1 	.word	0x080028b1
	{
	//----------------------------------------------------------//
	case Output_off_STATE:
	  Relay_control(0,0); // set all coils off
 8002768:	2100      	movs	r1, #0
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe ff6e 	bl	800164c <Relay_control>
	  Relay_control(1,0); // x1 mode
 8002770:	2100      	movs	r1, #0
 8002772:	2001      	movs	r0, #1
 8002774:	f7fe ff6a 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 8002778:	2100      	movs	r1, #0
 800277a:	2002      	movs	r0, #2
 800277c:	f7fe ff66 	bl	800164c <Relay_control>
	  Relay_control(3,0); // Output Enable
 8002780:	2100      	movs	r1, #0
 8002782:	2003      	movs	r0, #3
 8002784:	f7fe ff62 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4618      	mov	r0, r3
 800278c:	f002 fb02 	bl	8004d94 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 8002790:	2100      	movs	r1, #0
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe ff5a 	bl	800164c <Relay_control>
	  Current_output_status=Output_off_STATE;
 8002798:	4b68      	ldr	r3, [pc, #416]	; (800293c <output_state+0x204>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
	  break;
 800279e:	e0c8      	b.n	8002932 <output_state+0x1fa>

	case Output_x1_STATE:
	  Relay_control(0,0); // set all coils off
 80027a0:	2100      	movs	r1, #0
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7fe ff52 	bl	800164c <Relay_control>
	  Relay_control(1,0); // x1 mode
 80027a8:	2100      	movs	r1, #0
 80027aa:	2001      	movs	r0, #1
 80027ac:	f7fe ff4e 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 80027b0:	2100      	movs	r1, #0
 80027b2:	2002      	movs	r0, #2
 80027b4:	f7fe ff4a 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 80027b8:	2101      	movs	r1, #1
 80027ba:	2003      	movs	r0, #3
 80027bc:	f7fe ff46 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fae6 	bl	8004d94 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 80027c8:	2100      	movs	r1, #0
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fe ff3e 	bl	800164c <Relay_control>
	  Current_output_status=Output_x1_STATE;
 80027d0:	4b5a      	ldr	r3, [pc, #360]	; (800293c <output_state+0x204>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 80027d6:	4b5a      	ldr	r3, [pc, #360]	; (8002940 <output_state+0x208>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5a      	ldr	r2, [pc, #360]	; (8002944 <output_state+0x20c>)
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe f9e7 	bl	8000bb4 <__aeabi_fsub>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b57      	ldr	r3, [pc, #348]	; (8002948 <output_state+0x210>)
 80027ec:	601a      	str	r2, [r3, #0]
	  break;
 80027ee:	e0a0      	b.n	8002932 <output_state+0x1fa>

	case Output_x2_STATE:
	  Relay_control(0,0); // set all coils off
 80027f0:	2100      	movs	r1, #0
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe ff2a 	bl	800164c <Relay_control>
	  Relay_control(1,1); // x1 mode
 80027f8:	2101      	movs	r1, #1
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7fe ff26 	bl	800164c <Relay_control>
	  Relay_control(2,1); // x2/x4 mode
 8002800:	2101      	movs	r1, #1
 8002802:	2002      	movs	r0, #2
 8002804:	f7fe ff22 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 8002808:	2101      	movs	r1, #1
 800280a:	2003      	movs	r0, #3
 800280c:	f7fe ff1e 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f002 fabe 	bl	8004d94 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 8002818:	2100      	movs	r1, #0
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe ff16 	bl	800164c <Relay_control>
	  Current_output_status=Output_x2_STATE;
 8002820:	4b46      	ldr	r3, [pc, #280]	; (800293c <output_state+0x204>)
 8002822:	2202      	movs	r2, #2
 8002824:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x2_coeff;
 8002826:	4b46      	ldr	r3, [pc, #280]	; (8002940 <output_state+0x208>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a46      	ldr	r2, [pc, #280]	; (8002944 <output_state+0x20c>)
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe f9bf 	bl	8000bb4 <__aeabi_fsub>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	4b44      	ldr	r3, [pc, #272]	; (800294c <output_state+0x214>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f7fe fac1 	bl	8000dc8 <__aeabi_fmul>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <output_state+0x210>)
 800284c:	601a      	str	r2, [r3, #0]
	  break;
 800284e:	e070      	b.n	8002932 <output_state+0x1fa>

	case Output_x4_STATE:
	  Relay_control(0,0); // set all coils off
 8002850:	2100      	movs	r1, #0
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe fefa 	bl	800164c <Relay_control>
	  Relay_control(1,1); // x1 mode
 8002858:	2101      	movs	r1, #1
 800285a:	2001      	movs	r0, #1
 800285c:	f7fe fef6 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 8002860:	2100      	movs	r1, #0
 8002862:	2002      	movs	r0, #2
 8002864:	f7fe fef2 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 8002868:	2101      	movs	r1, #1
 800286a:	2003      	movs	r0, #3
 800286c:	f7fe feee 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4618      	mov	r0, r3
 8002874:	f002 fa8e 	bl	8004d94 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 8002878:	2100      	movs	r1, #0
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe fee6 	bl	800164c <Relay_control>
	  Current_output_status=Output_x4_STATE;
 8002880:	4b2e      	ldr	r3, [pc, #184]	; (800293c <output_state+0x204>)
 8002882:	2203      	movs	r2, #3
 8002884:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x4_coeff;
 8002886:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <output_state+0x208>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2e      	ldr	r2, [pc, #184]	; (8002944 <output_state+0x20c>)
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe f98f 	bl	8000bb4 <__aeabi_fsub>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <output_state+0x218>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4619      	mov	r1, r3
 80028a0:	4610      	mov	r0, r2
 80028a2:	f7fe fa91 	bl	8000dc8 <__aeabi_fmul>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <output_state+0x210>)
 80028ac:	601a      	str	r2, [r3, #0]
	  break;
 80028ae:	e040      	b.n	8002932 <output_state+0x1fa>

	case Output_auto_STATE:
		if((cal_DAC_up_voltage-cal_DAC_down_voltage)/DAC_target_speed > 600)
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <output_state+0x208>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a23      	ldr	r2, [pc, #140]	; (8002944 <output_state+0x20c>)
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe f97a 	bl	8000bb4 <__aeabi_fsub>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b23      	ldr	r3, [pc, #140]	; (8002954 <output_state+0x21c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f7fe fb30 	bl	8000f30 <__aeabi_fdiv>
 80028d0:	4603      	mov	r3, r0
 80028d2:	4921      	ldr	r1, [pc, #132]	; (8002958 <output_state+0x220>)
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fc33 	bl	8001140 <__aeabi_fcmpgt>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <output_state+0x1b0>
		{
			output_state(Output_x1_STATE);
 80028e0:	2001      	movs	r0, #1
 80028e2:	f7ff ff29 	bl	8002738 <output_state>
				output_state(Output_x2_STATE);
			}
			else
				output_state(Output_x4_STATE);

		break;
 80028e6:	e023      	b.n	8002930 <output_state+0x1f8>
			if (((cal_DAC_up_voltage-cal_DAC_down_voltage)*2)/DAC_target_speed > 600)
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <output_state+0x208>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a15      	ldr	r2, [pc, #84]	; (8002944 <output_state+0x20c>)
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f95e 	bl	8000bb4 <__aeabi_fsub>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4619      	mov	r1, r3
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe f95b 	bl	8000bb8 <__addsf3>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <output_state+0x21c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f7fe fb0f 	bl	8000f30 <__aeabi_fdiv>
 8002912:	4603      	mov	r3, r0
 8002914:	4910      	ldr	r1, [pc, #64]	; (8002958 <output_state+0x220>)
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fc12 	bl	8001140 <__aeabi_fcmpgt>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <output_state+0x1f2>
				output_state(Output_x2_STATE);
 8002922:	2002      	movs	r0, #2
 8002924:	f7ff ff08 	bl	8002738 <output_state>
		break;
 8002928:	e002      	b.n	8002930 <output_state+0x1f8>
				output_state(Output_x4_STATE);
 800292a:	2003      	movs	r0, #3
 800292c:	f7ff ff04 	bl	8002738 <output_state>
		break;
 8002930:	bf00      	nop
}
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000cec 	.word	0x20000cec
 8002940:	20000ce4 	.word	0x20000ce4
 8002944:	20000ce8 	.word	0x20000ce8
 8002948:	20000ce0 	.word	0x20000ce0
 800294c:	20000b00 	.word	0x20000b00
 8002950:	20000b04 	.word	0x20000b04
 8002954:	20000cdc 	.word	0x20000cdc
 8002958:	44160000 	.word	0x44160000

0800295c <display_screen>:
//==============================================================================================


//==============================================================================================
void display_screen(uint8_t type)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b087      	sub	sp, #28
 8002960:	af02      	add	r7, sp, #8
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
	char sign;
	switch(type)
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	2b03      	cmp	r3, #3
 800296a:	f200 808c 	bhi.w	8002a86 <display_screen+0x12a>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <display_screen+0x18>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	08002985 	.word	0x08002985
 8002978:	08002a21 	.word	0x08002a21
 800297c:	08002a43 	.word	0x08002a43
 8002980:	08002a65 	.word	0x08002a65
	{
	//----------------------------------------------------------//
	case dU_dt_SCREEN:
		if(DAC_code_direction==1)
 8002984:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <display_screen+0x134>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d102      	bne.n	8002992 <display_screen+0x36>
		{
			sign='+';
 800298c:	232b      	movs	r3, #43	; 0x2b
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e001      	b.n	8002996 <display_screen+0x3a>
		}
		else
		{
			sign='-';
 8002992:	232d      	movs	r3, #45	; 0x2d
 8002994:	73fb      	strb	r3, [r7, #15]
		}
		sprintf(lcd_buf,"' %c%1.4EV/s",sign, DAC_target_speed);
 8002996:	7bfc      	ldrb	r4, [r7, #15]
 8002998:	4b3e      	ldr	r3, [pc, #248]	; (8002a94 <display_screen+0x138>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fd65 	bl	800046c <__aeabi_f2d>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	e9cd 2300 	strd	r2, r3, [sp]
 80029aa:	4622      	mov	r2, r4
 80029ac:	493a      	ldr	r1, [pc, #232]	; (8002a98 <display_screen+0x13c>)
 80029ae:	483b      	ldr	r0, [pc, #236]	; (8002a9c <display_screen+0x140>)
 80029b0:	f00d f852 	bl	800fa58 <siprintf>
		LcdString(1, 1);
 80029b4:	2101      	movs	r1, #1
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff fc86 	bl	80022c8 <LcdString>

		if(cfg.LDACMODE==1){
 80029bc:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <display_screen+0x144>)
 80029be:	789b      	ldrb	r3, [r3, #2]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d117      	bne.n	80029f4 <display_screen+0x98>
			sprintf(lcd_buf,"ARM      %01u:%02u:%02u",eta_hours,eta_minute,eta_second);
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <display_screen+0x148>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <display_screen+0x14c>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4619      	mov	r1, r3
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <display_screen+0x150>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	460b      	mov	r3, r1
 80029d8:	4935      	ldr	r1, [pc, #212]	; (8002ab0 <display_screen+0x154>)
 80029da:	4830      	ldr	r0, [pc, #192]	; (8002a9c <display_screen+0x140>)
 80029dc:	f00d f83c 	bl	800fa58 <siprintf>
			LcdString(1, 2);
 80029e0:	2102      	movs	r1, #2
 80029e2:	2001      	movs	r0, #1
 80029e4:	f7ff fc70 	bl	80022c8 <LcdString>
			LcdBarLine(DAC_code);
 80029e8:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <display_screen+0x158>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fdff 	bl	80025f0 <LcdBarLine>
			{
				sprintf(lcd_buf,"READY TO GO");
				LcdString(1, 2);
			}
		}
		break;
 80029f2:	e048      	b.n	8002a86 <display_screen+0x12a>
			if(Current_output_status==Output_off_STATE)
 80029f4:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <display_screen+0x15c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d108      	bne.n	8002a0e <display_screen+0xb2>
				sprintf(lcd_buf,"OUTPUT DISABLED");
 80029fc:	492f      	ldr	r1, [pc, #188]	; (8002abc <display_screen+0x160>)
 80029fe:	4827      	ldr	r0, [pc, #156]	; (8002a9c <display_screen+0x140>)
 8002a00:	f00d f82a 	bl	800fa58 <siprintf>
				LcdString(1, 2);
 8002a04:	2102      	movs	r1, #2
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7ff fc5e 	bl	80022c8 <LcdString>
		break;
 8002a0c:	e03b      	b.n	8002a86 <display_screen+0x12a>
				sprintf(lcd_buf,"READY TO GO");
 8002a0e:	492c      	ldr	r1, [pc, #176]	; (8002ac0 <display_screen+0x164>)
 8002a10:	4822      	ldr	r0, [pc, #136]	; (8002a9c <display_screen+0x140>)
 8002a12:	f00d f821 	bl	800fa58 <siprintf>
				LcdString(1, 2);
 8002a16:	2102      	movs	r1, #2
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f7ff fc55 	bl	80022c8 <LcdString>
		break;
 8002a1e:	e032      	b.n	8002a86 <display_screen+0x12a>
	//----------------------------------------------------------//
	case Hello_SCREEN:
		sprintf(lcd_buf,"Hello AmpNuts!");
 8002a20:	4928      	ldr	r1, [pc, #160]	; (8002ac4 <display_screen+0x168>)
 8002a22:	481e      	ldr	r0, [pc, #120]	; (8002a9c <display_screen+0x140>)
 8002a24:	f00d f818 	bl	800fa58 <siprintf>
		LcdString(1, 1);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f7ff fc4c 	bl	80022c8 <LcdString>
		sprintf(lcd_buf,"I`m Micron-GLIN");
 8002a30:	4925      	ldr	r1, [pc, #148]	; (8002ac8 <display_screen+0x16c>)
 8002a32:	481a      	ldr	r0, [pc, #104]	; (8002a9c <display_screen+0x140>)
 8002a34:	f00d f810 	bl	800fa58 <siprintf>
		LcdString(1, 2);
 8002a38:	2102      	movs	r1, #2
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff fc44 	bl	80022c8 <LcdString>
		break;
 8002a40:	e021      	b.n	8002a86 <display_screen+0x12a>
	//----------------------------------------------------------//
	case Warm_up_SCREEN:
		sprintf(lcd_buf,"need time to");
 8002a42:	4922      	ldr	r1, [pc, #136]	; (8002acc <display_screen+0x170>)
 8002a44:	4815      	ldr	r0, [pc, #84]	; (8002a9c <display_screen+0x140>)
 8002a46:	f00d f807 	bl	800fa58 <siprintf>
		LcdString(1, 1);
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7ff fc3b 	bl	80022c8 <LcdString>
		sprintf(lcd_buf,"warm-up my refs");
 8002a52:	491f      	ldr	r1, [pc, #124]	; (8002ad0 <display_screen+0x174>)
 8002a54:	4811      	ldr	r0, [pc, #68]	; (8002a9c <display_screen+0x140>)
 8002a56:	f00c ffff 	bl	800fa58 <siprintf>
		LcdString(1, 2);
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f7ff fc33 	bl	80022c8 <LcdString>
		break;
 8002a62:	e010      	b.n	8002a86 <display_screen+0x12a>
	//----------------------------------------------------------//
	case Ready_SCREEN:
		sprintf(lcd_buf,"I`m ready...");
 8002a64:	491b      	ldr	r1, [pc, #108]	; (8002ad4 <display_screen+0x178>)
 8002a66:	480d      	ldr	r0, [pc, #52]	; (8002a9c <display_screen+0x140>)
 8002a68:	f00c fff6 	bl	800fa58 <siprintf>
		LcdString(1, 1);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7ff fc2a 	bl	80022c8 <LcdString>
		sprintf(lcd_buf,"      Let`s start!");
 8002a74:	4918      	ldr	r1, [pc, #96]	; (8002ad8 <display_screen+0x17c>)
 8002a76:	4809      	ldr	r0, [pc, #36]	; (8002a9c <display_screen+0x140>)
 8002a78:	f00c ffee 	bl	800fa58 <siprintf>
		LcdString(1, 2);
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f7ff fc22 	bl	80022c8 <LcdString>
		break;
 8002a84:	bf00      	nop
	}

}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd90      	pop	{r4, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000cf4 	.word	0x20000cf4
 8002a94:	20000cdc 	.word	0x20000cdc
 8002a98:	080135b0 	.word	0x080135b0
 8002a9c:	20000b08 	.word	0x20000b08
 8002aa0:	20000cc8 	.word	0x20000cc8
 8002aa4:	20000c9c 	.word	0x20000c9c
 8002aa8:	20000c9d 	.word	0x20000c9d
 8002aac:	20000c9e 	.word	0x20000c9e
 8002ab0:	080135c0 	.word	0x080135c0
 8002ab4:	20000cf0 	.word	0x20000cf0
 8002ab8:	20000cec 	.word	0x20000cec
 8002abc:	080135d8 	.word	0x080135d8
 8002ac0:	080135e8 	.word	0x080135e8
 8002ac4:	080135f4 	.word	0x080135f4
 8002ac8:	08013604 	.word	0x08013604
 8002acc:	08013614 	.word	0x08013614
 8002ad0:	08013624 	.word	0x08013624
 8002ad4:	08013634 	.word	0x08013634
 8002ad8:	08013644 	.word	0x08013644

08002adc <send_answer_to_CDC>:
//==============================================================================================


//==============================================================================================
void send_answer_to_CDC(uint8_t type)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
	uint8_t cdc_counter=0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]

	switch(type)
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	2b0f      	cmp	r3, #15
 8002aee:	f200 80b5 	bhi.w	8002c5c <send_answer_to_CDC+0x180>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <send_answer_to_CDC+0x1c>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b3f 	.word	0x08002b3f
 8002afc:	08002b65 	.word	0x08002b65
 8002b00:	08002b8b 	.word	0x08002b8b
 8002b04:	08002bb1 	.word	0x08002bb1
 8002b08:	08002bd7 	.word	0x08002bd7
 8002b0c:	08002bfd 	.word	0x08002bfd
 8002b10:	08002c5d 	.word	0x08002c5d
 8002b14:	08002c5d 	.word	0x08002c5d
 8002b18:	08002c5d 	.word	0x08002c5d
 8002b1c:	08002c5d 	.word	0x08002c5d
 8002b20:	08002c5d 	.word	0x08002c5d
 8002b24:	08002c5d 	.word	0x08002c5d
 8002b28:	08002c5d 	.word	0x08002c5d
 8002b2c:	08002c5d 	.word	0x08002c5d
 8002b30:	08002c5d 	.word	0x08002c5d
 8002b34:	08002c23 	.word	0x08002c23
	{
	case ERROR_TYPE_1:
		while((CDC_Transmit_FS(Error1, strlen((const char *)Error1))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	4849      	ldr	r0, [pc, #292]	; (8002c64 <send_answer_to_CDC+0x188>)
 8002b40:	f7fd fb28 	bl	8000194 <strlen>
 8002b44:	4603      	mov	r3, r0
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4846      	ldr	r0, [pc, #280]	; (8002c64 <send_answer_to_CDC+0x188>)
 8002b4c:	f00b fe6c 	bl	800e828 <CDC_Transmit_FS>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d075      	beq.n	8002c42 <send_answer_to_CDC+0x166>
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	2bff      	cmp	r3, #255	; 0xff
 8002b5a:	d1ed      	bne.n	8002b38 <send_answer_to_CDC+0x5c>
		break;
 8002b5c:	e071      	b.n	8002c42 <send_answer_to_CDC+0x166>
	case ERROR_TYPE_2:
		while((CDC_Transmit_FS(Error2, strlen((const char *)Error2))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	3301      	adds	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	4840      	ldr	r0, [pc, #256]	; (8002c68 <send_answer_to_CDC+0x18c>)
 8002b66:	f7fd fb15 	bl	8000194 <strlen>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	4619      	mov	r1, r3
 8002b70:	483d      	ldr	r0, [pc, #244]	; (8002c68 <send_answer_to_CDC+0x18c>)
 8002b72:	f00b fe59 	bl	800e828 <CDC_Transmit_FS>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d064      	beq.n	8002c46 <send_answer_to_CDC+0x16a>
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	2bff      	cmp	r3, #255	; 0xff
 8002b80:	d1ed      	bne.n	8002b5e <send_answer_to_CDC+0x82>
		break;
 8002b82:	e060      	b.n	8002c46 <send_answer_to_CDC+0x16a>
	case OK_TYPE_1:
		while((CDC_Transmit_FS(OK, strlen((const char *)OK))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	3301      	adds	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	4838      	ldr	r0, [pc, #224]	; (8002c6c <send_answer_to_CDC+0x190>)
 8002b8c:	f7fd fb02 	bl	8000194 <strlen>
 8002b90:	4603      	mov	r3, r0
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	4835      	ldr	r0, [pc, #212]	; (8002c6c <send_answer_to_CDC+0x190>)
 8002b98:	f00b fe46 	bl	800e828 <CDC_Transmit_FS>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d053      	beq.n	8002c4a <send_answer_to_CDC+0x16e>
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	2bff      	cmp	r3, #255	; 0xff
 8002ba6:	d1ed      	bne.n	8002b84 <send_answer_to_CDC+0xa8>
		break;
 8002ba8:	e04f      	b.n	8002c4a <send_answer_to_CDC+0x16e>
	case OK_TYPE_2:
		while((CDC_Transmit_FS(OK_Enter, strlen((const char *)OK_Enter))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	3301      	adds	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	482f      	ldr	r0, [pc, #188]	; (8002c70 <send_answer_to_CDC+0x194>)
 8002bb2:	f7fd faef 	bl	8000194 <strlen>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4619      	mov	r1, r3
 8002bbc:	482c      	ldr	r0, [pc, #176]	; (8002c70 <send_answer_to_CDC+0x194>)
 8002bbe:	f00b fe33 	bl	800e828 <CDC_Transmit_FS>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d042      	beq.n	8002c4e <send_answer_to_CDC+0x172>
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2bff      	cmp	r3, #255	; 0xff
 8002bcc:	d1ed      	bne.n	8002baa <send_answer_to_CDC+0xce>
		break;
 8002bce:	e03e      	b.n	8002c4e <send_answer_to_CDC+0x172>
	case CLEAR_TYPE_1:
		while((CDC_Transmit_FS(clear, strlen((const char *)clear))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	4827      	ldr	r0, [pc, #156]	; (8002c74 <send_answer_to_CDC+0x198>)
 8002bd8:	f7fd fadc 	bl	8000194 <strlen>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	4619      	mov	r1, r3
 8002be2:	4824      	ldr	r0, [pc, #144]	; (8002c74 <send_answer_to_CDC+0x198>)
 8002be4:	f00b fe20 	bl	800e828 <CDC_Transmit_FS>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d031      	beq.n	8002c52 <send_answer_to_CDC+0x176>
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2bff      	cmp	r3, #255	; 0xff
 8002bf2:	d1ed      	bne.n	8002bd0 <send_answer_to_CDC+0xf4>
		break;
 8002bf4:	e02d      	b.n	8002c52 <send_answer_to_CDC+0x176>
	case DONE_TYPE_1:
		while((CDC_Transmit_FS(Done, strlen((const char *)Done))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	481e      	ldr	r0, [pc, #120]	; (8002c78 <send_answer_to_CDC+0x19c>)
 8002bfe:	f7fd fac9 	bl	8000194 <strlen>
 8002c02:	4603      	mov	r3, r0
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	4619      	mov	r1, r3
 8002c08:	481b      	ldr	r0, [pc, #108]	; (8002c78 <send_answer_to_CDC+0x19c>)
 8002c0a:	f00b fe0d 	bl	800e828 <CDC_Transmit_FS>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <send_answer_to_CDC+0x17a>
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2bff      	cmp	r3, #255	; 0xff
 8002c18:	d1ed      	bne.n	8002bf6 <send_answer_to_CDC+0x11a>
		break;
 8002c1a:	e01c      	b.n	8002c56 <send_answer_to_CDC+0x17a>
	case RUN_CAL_TYPE_TEMP:
		while((CDC_Transmit_FS(run_cal, strlen((const char *)run_cal))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	4816      	ldr	r0, [pc, #88]	; (8002c7c <send_answer_to_CDC+0x1a0>)
 8002c24:	f7fd fab6 	bl	8000194 <strlen>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4813      	ldr	r0, [pc, #76]	; (8002c7c <send_answer_to_CDC+0x1a0>)
 8002c30:	f00b fdfa 	bl	800e828 <CDC_Transmit_FS>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00f      	beq.n	8002c5a <send_answer_to_CDC+0x17e>
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2bff      	cmp	r3, #255	; 0xff
 8002c3e:	d1ed      	bne.n	8002c1c <send_answer_to_CDC+0x140>
		break;
 8002c40:	e00b      	b.n	8002c5a <send_answer_to_CDC+0x17e>
		break;
 8002c42:	bf00      	nop
 8002c44:	e00a      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c46:	bf00      	nop
 8002c48:	e008      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c4a:	bf00      	nop
 8002c4c:	e006      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c4e:	bf00      	nop
 8002c50:	e004      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c52:	bf00      	nop
 8002c54:	e002      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c56:	bf00      	nop
 8002c58:	e000      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c5a:	bf00      	nop
	}
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	2000034c 	.word	0x2000034c
 8002c68:	2000072c 	.word	0x2000072c
 8002c6c:	20000320 	.word	0x20000320
 8002c70:	20000714 	.word	0x20000714
 8002c74:	20000344 	.word	0x20000344
 8002c78:	20000758 	.word	0x20000758
 8002c7c:	20000328 	.word	0x20000328

08002c80 <cmd_SWEEP_START>:



//==============================================================================================
void cmd_SWEEP_START()
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	output_state(Output_auto_STATE);
 8002c84:	2004      	movs	r0, #4
 8002c86:	f7ff fd57 	bl	8002738 <output_state>
	DDS_Calculation();
 8002c8a:	f7fe ff7f 	bl	8001b8c <DDS_Calculation>
	DAC_TEMP_CAL();
 8002c8e:	f7fe ff0d 	bl	8001aac <DAC_TEMP_CAL>
	CPLD_control(CPLD_ON_STATE); // Enable LDAC signal
 8002c92:	2001      	movs	r0, #1
 8002c94:	f7fe fd94 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002c98:	f7fe fe80 	bl	800199c <DAC_SendInit>
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <cmd_SWEEP_STOP>:
//==============================================================================================


//==============================================================================================
void cmd_SWEEP_STOP()
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7fe fd8b 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002caa:	f7fe fe77 	bl	800199c <DAC_SendInit>
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <cmd_DAC_SET>:
//==============================================================================================


//==============================================================================================
void cmd_DAC_SET(uint32_t code)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	if (code>0xFFFFF)return;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cc2:	d21a      	bcs.n	8002cfa <cmd_DAC_SET+0x46>

	switch(code)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <cmd_DAC_SET+0x20>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <cmd_DAC_SET+0x50>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <cmd_DAC_SET+0x28>
 8002cd2:	e007      	b.n	8002ce4 <cmd_DAC_SET+0x30>
	{
	case DAC_CODE_DOWN:
		DAC_code_direction=1;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <cmd_DAC_SET+0x54>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
		break;
 8002cda:	e003      	b.n	8002ce4 <cmd_DAC_SET+0x30>
	case DAC_CODE_TOP:
		DAC_code_direction=0;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <cmd_DAC_SET+0x54>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
		break;
 8002ce2:	bf00      	nop
	}

	CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fe fd6b 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002cea:	f7fe fe57 	bl	800199c <DAC_SendInit>
	DAC_TEMP_CAL();
 8002cee:	f7fe fedd 	bl	8001aac <DAC_TEMP_CAL>
	DAC_Write(code);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fdf8 	bl	80018e8 <DAC_Write>
 8002cf8:	e000      	b.n	8002cfc <cmd_DAC_SET+0x48>
	if (code>0xFFFFF)return;
 8002cfa:	bf00      	nop
}
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	000fffff 	.word	0x000fffff
 8002d08:	20000cf4 	.word	0x20000cf4

08002d0c <cmd_SET_OUTPUT_VOLTAGE>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_SET_OUTPUT_VOLTAGE(float volt)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	float dac_resolution;

	if(volt>=cal_DAC_down_voltage && volt<=cal_DAC_up_voltage)
 8002d14:	4b80      	ldr	r3, [pc, #512]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fa06 	bl	800112c <__aeabi_fcmpge>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d037      	beq.n	8002d96 <cmd_SET_OUTPUT_VOLTAGE+0x8a>
 8002d26:	4b7d      	ldr	r3, [pc, #500]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7fe f9f3 	bl	8001118 <__aeabi_fcmple>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d02e      	beq.n	8002d96 <cmd_SET_OUTPUT_VOLTAGE+0x8a>
	{
		if(Current_output_status!=Output_x1_STATE)output_state(Output_x1_STATE);
 8002d38:	4b79      	ldr	r3, [pc, #484]	; (8002f20 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d002      	beq.n	8002d46 <cmd_SET_OUTPUT_VOLTAGE+0x3a>
 8002d40:	2001      	movs	r0, #1
 8002d42:	f7ff fcf9 	bl	8002738 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 8002d46:	4b75      	ldr	r3, [pc, #468]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a73      	ldr	r2, [pc, #460]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd ff2f 	bl	8000bb4 <__aeabi_fsub>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4972      	ldr	r1, [pc, #456]	; (8002f24 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe f8e8 	bl	8000f30 <__aeabi_fdiv>
 8002d60:	4603      	mov	r3, r0
 8002d62:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage)/dac_resolution);
 8002d64:	4b6c      	ldr	r3, [pc, #432]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd ff22 	bl	8000bb4 <__aeabi_fsub>
 8002d70:	4603      	mov	r3, r0
 8002d72:	68f9      	ldr	r1, [r7, #12]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe f8db 	bl	8000f30 <__aeabi_fdiv>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe f9e9 	bl	8001154 <__aeabi_f2uiz>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4a68      	ldr	r2, [pc, #416]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002d86:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002d88:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff91 	bl	8002cb4 <cmd_DAC_SET>
		return 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0bc      	b.n	8002f10 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}
	if(volt>=(cal_DAC_down_voltage*gain_x2_coeff) && volt<=(cal_DAC_up_voltage*gain_x2_coeff))
 8002d96:	4b60      	ldr	r3, [pc, #384]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a64      	ldr	r2, [pc, #400]	; (8002f2c <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe f811 	bl	8000dc8 <__aeabi_fmul>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe f9be 	bl	800112c <__aeabi_fcmpge>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d04d      	beq.n	8002e52 <cmd_SET_OUTPUT_VOLTAGE+0x146>
 8002db6:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a5c      	ldr	r2, [pc, #368]	; (8002f2c <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe f801 	bl	8000dc8 <__aeabi_fmul>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe f9a4 	bl	8001118 <__aeabi_fcmple>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03d      	beq.n	8002e52 <cmd_SET_OUTPUT_VOLTAGE+0x146>
	{
		if(Current_output_status!=Output_x2_STATE)output_state(Output_x2_STATE);
 8002dd6:	4b52      	ldr	r3, [pc, #328]	; (8002f20 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d002      	beq.n	8002de4 <cmd_SET_OUTPUT_VOLTAGE+0xd8>
 8002dde:	2002      	movs	r0, #2
 8002de0:	f7ff fcaa 	bl	8002738 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x2_coeff/0xFFFFF; // Calculate 1 LSB resolution
 8002de4:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a4b      	ldr	r2, [pc, #300]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fee0 	bl	8000bb4 <__aeabi_fsub>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b4c      	ldr	r3, [pc, #304]	; (8002f2c <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f7fd ffe2 	bl	8000dc8 <__aeabi_fmul>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4947      	ldr	r1, [pc, #284]	; (8002f24 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe f891 	bl	8000f30 <__aeabi_fdiv>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage*gain_x2_coeff)/dac_resolution);
 8002e12:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a45      	ldr	r2, [pc, #276]	; (8002f2c <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd ffd3 	bl	8000dc8 <__aeabi_fmul>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fd fec4 	bl	8000bb4 <__aeabi_fsub>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	68f9      	ldr	r1, [r7, #12]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f87d 	bl	8000f30 <__aeabi_fdiv>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe f98b 	bl	8001154 <__aeabi_f2uiz>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a39      	ldr	r2, [pc, #228]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002e42:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002e44:	4b38      	ldr	r3, [pc, #224]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff33 	bl	8002cb4 <cmd_DAC_SET>
		return 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e05e      	b.n	8002f10 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}
	if(volt>=(cal_DAC_down_voltage*gain_x4_coeff) && volt<=(cal_DAC_up_voltage*gain_x4_coeff))
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a36      	ldr	r2, [pc, #216]	; (8002f30 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd ffb3 	bl	8000dc8 <__aeabi_fmul>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe f960 	bl	800112c <__aeabi_fcmpge>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d04d      	beq.n	8002f0e <cmd_SET_OUTPUT_VOLTAGE+0x202>
 8002e72:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2e      	ldr	r2, [pc, #184]	; (8002f30 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd ffa3 	bl	8000dc8 <__aeabi_fmul>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe f946 	bl	8001118 <__aeabi_fcmple>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03d      	beq.n	8002f0e <cmd_SET_OUTPUT_VOLTAGE+0x202>
	{
		if(Current_output_status!=Output_x4_STATE)output_state(Output_x4_STATE);
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d002      	beq.n	8002ea0 <cmd_SET_OUTPUT_VOLTAGE+0x194>
 8002e9a:	2003      	movs	r0, #3
 8002e9c:	f7ff fc4c 	bl	8002738 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x4_coeff/0xFFFFF; // Calculate 1 LSB resolution
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fe82 	bl	8000bb4 <__aeabi_fsub>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f7fd ff84 	bl	8000dc8 <__aeabi_fmul>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4918      	ldr	r1, [pc, #96]	; (8002f24 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe f833 	bl	8000f30 <__aeabi_fdiv>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage*gain_x4_coeff)/dac_resolution);
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd ff75 	bl	8000dc8 <__aeabi_fmul>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fe66 	bl	8000bb4 <__aeabi_fsub>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	68f9      	ldr	r1, [r7, #12]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f81f 	bl	8000f30 <__aeabi_fdiv>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe f92d 	bl	8001154 <__aeabi_f2uiz>
 8002efa:	4603      	mov	r3, r0
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002efe:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fed5 	bl	8002cb4 <cmd_DAC_SET>
		return 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}

	return 0;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000ce8 	.word	0x20000ce8
 8002f1c:	20000ce4 	.word	0x20000ce4
 8002f20:	20000cec 	.word	0x20000cec
 8002f24:	497ffff0 	.word	0x497ffff0
 8002f28:	20000cf0 	.word	0x20000cf0
 8002f2c:	20000b00 	.word	0x20000b00
 8002f30:	20000b04 	.word	0x20000b04
 8002f34:	00000000 	.word	0x00000000

08002f38 <cmd_SWEEP_RATE>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_SWEEP_RATE(float rate)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
		if(rate<0.0009 || rate>1.1) // V/s
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7fd fa93 	bl	800046c <__aeabi_f2d>
 8002f46:	a316      	add	r3, pc, #88	; (adr r3, 8002fa0 <cmd_SWEEP_RATE+0x68>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	f7fd fd58 	bl	8000a00 <__aeabi_dcmplt>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <cmd_SWEEP_RATE+0x34>
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd fa88 	bl	800046c <__aeabi_f2d>
 8002f5c:	a312      	add	r3, pc, #72	; (adr r3, 8002fa8 <cmd_SWEEP_RATE+0x70>)
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f7fd fd6b 	bl	8000a3c <__aeabi_dcmpgt>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <cmd_SWEEP_RATE+0x38>
		{
			return 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e010      	b.n	8002f92 <cmd_SWEEP_RATE+0x5a>
		}
		else
		{
			DAC_target_speed=rate;
 8002f70:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <cmd_SWEEP_RATE+0x78>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6013      	str	r3, [r2, #0]
			if(cfg.LDACMODE==0)
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <cmd_SWEEP_RATE+0x7c>)
 8002f78:	789b      	ldrb	r3, [r3, #2]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d103      	bne.n	8002f86 <cmd_SWEEP_RATE+0x4e>
			{
				CPLD_control(CPLD_OFF_STATE);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fe fc1e 	bl	80017c0 <CPLD_control>
 8002f84:	e002      	b.n	8002f8c <cmd_SWEEP_RATE+0x54>
			}
			else
			{
				CPLD_control(CPLD_ON_STATE);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f7fe fc1a 	bl	80017c0 <CPLD_control>
			}

			DDS_Calculation();
 8002f8c:	f7fe fdfe 	bl	8001b8c <DDS_Calculation>
			return 1;
 8002f90:	2301      	movs	r3, #1
		}
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	f3af 8000 	nop.w
 8002fa0:	487fcb92 	.word	0x487fcb92
 8002fa4:	3f4d7dbf 	.word	0x3f4d7dbf
 8002fa8:	9999999a 	.word	0x9999999a
 8002fac:	3ff19999 	.word	0x3ff19999
 8002fb0:	20000cdc 	.word	0x20000cdc
 8002fb4:	20000cc8 	.word	0x20000cc8

08002fb8 <cmd_CAL>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_CAL(uint8_t cmd, float coeff)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
	float tmpx;

	tmpx=coeff;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	3b06      	subs	r3, #6
 8002fcc:	2b07      	cmp	r3, #7
 8002fce:	f200 80e7 	bhi.w	80031a0 <cmd_CAL+0x1e8>
 8002fd2:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <cmd_CAL+0x20>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	08002ff9 	.word	0x08002ff9
 8002fdc:	0800300b 	.word	0x0800300b
 8002fe0:	0800301d 	.word	0x0800301d
 8002fe4:	0800302f 	.word	0x0800302f
 8002fe8:	080030c5 	.word	0x080030c5
 8002fec:	08003133 	.word	0x08003133
 8002ff0:	08003041 	.word	0x08003041
 8002ff4:	08003083 	.word	0x08003083
	{
	case DAC_CAL_TEMP:
		DAC_Write(DAC_CODE_MIDDLE);
 8002ff8:	4885      	ldr	r0, [pc, #532]	; (8003210 <cmd_CAL+0x258>)
 8002ffa:	f7fe fc75 	bl	80018e8 <DAC_Write>
		DAC_TEMP_CAL();
 8002ffe:	f7fe fd55 	bl	8001aac <DAC_TEMP_CAL>
		DAC_Write(DAC_CODE_MIDDLE);
 8003002:	4883      	ldr	r0, [pc, #524]	; (8003210 <cmd_CAL+0x258>)
 8003004:	f7fe fc70 	bl	80018e8 <DAC_Write>
		break;
 8003008:	e0ca      	b.n	80031a0 <cmd_CAL+0x1e8>

	case DAC_CAL_POLY_A:
		EEPROM_write(corr_coeff_1_EEPROM_ADDRESS,float_to_binary(tmpx));
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f97b 	bl	8003306 <float_to_binary>
 8003010:	4603      	mov	r3, r0
 8003012:	4619      	mov	r1, r3
 8003014:	2010      	movs	r0, #16
 8003016:	f000 f9b5 	bl	8003384 <EEPROM_write>
		break;
 800301a:	e0c1      	b.n	80031a0 <cmd_CAL+0x1e8>
	case DAC_CAL_POLY_B:
		EEPROM_write(corr_coeff_2_EEPROM_ADDRESS,float_to_binary(tmpx));
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f972 	bl	8003306 <float_to_binary>
 8003022:	4603      	mov	r3, r0
 8003024:	4619      	mov	r1, r3
 8003026:	2018      	movs	r0, #24
 8003028:	f000 f9ac 	bl	8003384 <EEPROM_write>
		break;
 800302c:	e0b8      	b.n	80031a0 <cmd_CAL+0x1e8>
	case DAC_CAL_POLY_C:
		EEPROM_write(corr_coeff_3_EEPROM_ADDRESS,float_to_binary(tmpx));
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f969 	bl	8003306 <float_to_binary>
 8003034:	4603      	mov	r3, r0
 8003036:	4619      	mov	r1, r3
 8003038:	2020      	movs	r0, #32
 800303a:	f000 f9a3 	bl	8003384 <EEPROM_write>
		break;
 800303e:	e0af      	b.n	80031a0 <cmd_CAL+0x1e8>

	case GAIN_X2_CAL:
		if((tmpx<2.1 && tmpx>1.9))
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7fd fa13 	bl	800046c <__aeabi_f2d>
 8003046:	a35a      	add	r3, pc, #360	; (adr r3, 80031b0 <cmd_CAL+0x1f8>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f7fd fcd8 	bl	8000a00 <__aeabi_dcmplt>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d013      	beq.n	800307e <cmd_CAL+0xc6>
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7fd fa08 	bl	800046c <__aeabi_f2d>
 800305c:	a356      	add	r3, pc, #344	; (adr r3, 80031b8 <cmd_CAL+0x200>)
 800305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003062:	f7fd fceb 	bl	8000a3c <__aeabi_dcmpgt>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <cmd_CAL+0xc6>
		{
			EEPROM_write(gain_x2_EEPROM_ADDRESS,float_to_binary(tmpx));
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f94a 	bl	8003306 <float_to_binary>
 8003072:	4603      	mov	r3, r0
 8003074:	4619      	mov	r1, r3
 8003076:	2028      	movs	r0, #40	; 0x28
 8003078:	f000 f984 	bl	8003384 <EEPROM_write>
		}
		else return 0;
		break;
 800307c:	e090      	b.n	80031a0 <cmd_CAL+0x1e8>
		else return 0;
 800307e:	2300      	movs	r3, #0
 8003080:	e091      	b.n	80031a6 <cmd_CAL+0x1ee>
	case GAIN_X4_CAL:
		if((tmpx<4.1 && tmpx>3.9))
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7fd f9f2 	bl	800046c <__aeabi_f2d>
 8003088:	a34d      	add	r3, pc, #308	; (adr r3, 80031c0 <cmd_CAL+0x208>)
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	f7fd fcb7 	bl	8000a00 <__aeabi_dcmplt>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <cmd_CAL+0x108>
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7fd f9e7 	bl	800046c <__aeabi_f2d>
 800309e:	a34a      	add	r3, pc, #296	; (adr r3, 80031c8 <cmd_CAL+0x210>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f7fd fcca 	bl	8000a3c <__aeabi_dcmpgt>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <cmd_CAL+0x108>
		{
			EEPROM_write(gain_x4_EEPROM_ADDRESS,float_to_binary(tmpx));
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f929 	bl	8003306 <float_to_binary>
 80030b4:	4603      	mov	r3, r0
 80030b6:	4619      	mov	r1, r3
 80030b8:	2030      	movs	r0, #48	; 0x30
 80030ba:	f000 f963 	bl	8003384 <EEPROM_write>
		}
		else return 0;
		break;
 80030be:	e06f      	b.n	80031a0 <cmd_CAL+0x1e8>
		else return 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e070      	b.n	80031a6 <cmd_CAL+0x1ee>
	case DAC_CAL_TOP:
		if((tmpx<10.1 && tmpx>9.9) || (tmpx>6.8 && tmpx<7.1))
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7fd f9d1 	bl	800046c <__aeabi_f2d>
 80030ca:	a341      	add	r3, pc, #260	; (adr r3, 80031d0 <cmd_CAL+0x218>)
 80030cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d0:	f7fd fc96 	bl	8000a00 <__aeabi_dcmplt>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <cmd_CAL+0x138>
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7fd f9c6 	bl	800046c <__aeabi_f2d>
 80030e0:	a33d      	add	r3, pc, #244	; (adr r3, 80031d8 <cmd_CAL+0x220>)
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	f7fd fca9 	bl	8000a3c <__aeabi_dcmpgt>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d115      	bne.n	800311c <cmd_CAL+0x164>
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7fd f9bb 	bl	800046c <__aeabi_f2d>
 80030f6:	a33a      	add	r3, pc, #232	; (adr r3, 80031e0 <cmd_CAL+0x228>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd fc9e 	bl	8000a3c <__aeabi_dcmpgt>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d013      	beq.n	800312e <cmd_CAL+0x176>
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7fd f9b0 	bl	800046c <__aeabi_f2d>
 800310c:	a336      	add	r3, pc, #216	; (adr r3, 80031e8 <cmd_CAL+0x230>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd fc75 	bl	8000a00 <__aeabi_dcmplt>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <cmd_CAL+0x176>
		{
			EEPROM_write(cal_DAC_up_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f8f2 	bl	8003306 <float_to_binary>
 8003122:	4603      	mov	r3, r0
 8003124:	4619      	mov	r1, r3
 8003126:	2000      	movs	r0, #0
 8003128:	f000 f92c 	bl	8003384 <EEPROM_write>
		}
		else return 0;
		break;
 800312c:	e038      	b.n	80031a0 <cmd_CAL+0x1e8>
		else return 0;
 800312e:	2300      	movs	r3, #0
 8003130:	e039      	b.n	80031a6 <cmd_CAL+0x1ee>
	case DAC_CAL_DOWN:
		if((tmpx>-10.1 && tmpx<-9.9) || (tmpx<-6.8 && tmpx>-7.1))
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f7fd f99a 	bl	800046c <__aeabi_f2d>
 8003138:	a32d      	add	r3, pc, #180	; (adr r3, 80031f0 <cmd_CAL+0x238>)
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	f7fd fc7d 	bl	8000a3c <__aeabi_dcmpgt>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <cmd_CAL+0x1a6>
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7fd f98f 	bl	800046c <__aeabi_f2d>
 800314e:	a32a      	add	r3, pc, #168	; (adr r3, 80031f8 <cmd_CAL+0x240>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	f7fd fc54 	bl	8000a00 <__aeabi_dcmplt>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <cmd_CAL+0x1d2>
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f7fd f984 	bl	800046c <__aeabi_f2d>
 8003164:	a326      	add	r3, pc, #152	; (adr r3, 8003200 <cmd_CAL+0x248>)
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f7fd fc49 	bl	8000a00 <__aeabi_dcmplt>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <cmd_CAL+0x1e4>
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7fd f979 	bl	800046c <__aeabi_f2d>
 800317a:	a323      	add	r3, pc, #140	; (adr r3, 8003208 <cmd_CAL+0x250>)
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f7fd fc5c 	bl	8000a3c <__aeabi_dcmpgt>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <cmd_CAL+0x1e4>
		{
			EEPROM_write(cal_DAC_down_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f8bb 	bl	8003306 <float_to_binary>
 8003190:	4603      	mov	r3, r0
 8003192:	4619      	mov	r1, r3
 8003194:	2008      	movs	r0, #8
 8003196:	f000 f8f5 	bl	8003384 <EEPROM_write>
		}
		else return 0;
		break;
 800319a:	e001      	b.n	80031a0 <cmd_CAL+0x1e8>
		else return 0;
 800319c:	2300      	movs	r3, #0
 800319e:	e002      	b.n	80031a6 <cmd_CAL+0x1ee>
	}

	load_data_from_EEPROM();
 80031a0:	f000 f838 	bl	8003214 <load_data_from_EEPROM>
	return 1;
 80031a4:	2301      	movs	r3, #1
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	cccccccd 	.word	0xcccccccd
 80031b4:	4000cccc 	.word	0x4000cccc
 80031b8:	66666666 	.word	0x66666666
 80031bc:	3ffe6666 	.word	0x3ffe6666
 80031c0:	66666666 	.word	0x66666666
 80031c4:	40106666 	.word	0x40106666
 80031c8:	33333333 	.word	0x33333333
 80031cc:	400f3333 	.word	0x400f3333
 80031d0:	33333333 	.word	0x33333333
 80031d4:	40243333 	.word	0x40243333
 80031d8:	cccccccd 	.word	0xcccccccd
 80031dc:	4023cccc 	.word	0x4023cccc
 80031e0:	33333333 	.word	0x33333333
 80031e4:	401b3333 	.word	0x401b3333
 80031e8:	66666666 	.word	0x66666666
 80031ec:	401c6666 	.word	0x401c6666
 80031f0:	33333333 	.word	0x33333333
 80031f4:	c0243333 	.word	0xc0243333
 80031f8:	cccccccd 	.word	0xcccccccd
 80031fc:	c023cccc 	.word	0xc023cccc
 8003200:	33333333 	.word	0x33333333
 8003204:	c01b3333 	.word	0xc01b3333
 8003208:	66666666 	.word	0x66666666
 800320c:	c01c6666 	.word	0xc01c6666
 8003210:	0007ffff 	.word	0x0007ffff

08003214 <load_data_from_EEPROM>:
//==============================================================================================


//==============================================================================================
void load_data_from_EEPROM(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	cal_DAC_up_voltage=binary_to_float(EEPROM_read(cal_DAC_up_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 8003218:	2000      	movs	r0, #0
 800321a:	f000 f899 	bl	8003350 <EEPROM_read>
 800321e:	4603      	mov	r3, r0
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f85d 	bl	80032e0 <binary_to_float>
 8003226:	4603      	mov	r3, r0
 8003228:	4a25      	ldr	r2, [pc, #148]	; (80032c0 <load_data_from_EEPROM+0xac>)
 800322a:	6013      	str	r3, [r2, #0]
	cal_DAC_down_voltage=binary_to_float(EEPROM_read(cal_DAC_down_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 800322c:	2008      	movs	r0, #8
 800322e:	f000 f88f 	bl	8003350 <EEPROM_read>
 8003232:	4603      	mov	r3, r0
 8003234:	4618      	mov	r0, r3
 8003236:	f000 f853 	bl	80032e0 <binary_to_float>
 800323a:	4603      	mov	r3, r0
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <load_data_from_EEPROM+0xb0>)
 800323e:	6013      	str	r3, [r2, #0]
	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8003240:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <load_data_from_EEPROM+0xac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <load_data_from_EEPROM+0xb0>)
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd fcb2 	bl	8000bb4 <__aeabi_fsub>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <load_data_from_EEPROM+0xb4>)
 8003256:	601a      	str	r2, [r3, #0]

	corr_coeff_1=binary_to_float(EEPROM_read(corr_coeff_1_EEPROM_ADDRESS));
 8003258:	2010      	movs	r0, #16
 800325a:	f000 f879 	bl	8003350 <EEPROM_read>
 800325e:	4603      	mov	r3, r0
 8003260:	4618      	mov	r0, r3
 8003262:	f000 f83d 	bl	80032e0 <binary_to_float>
 8003266:	4603      	mov	r3, r0
 8003268:	4a18      	ldr	r2, [pc, #96]	; (80032cc <load_data_from_EEPROM+0xb8>)
 800326a:	6013      	str	r3, [r2, #0]
	corr_coeff_2=binary_to_float(EEPROM_read(corr_coeff_2_EEPROM_ADDRESS));
 800326c:	2018      	movs	r0, #24
 800326e:	f000 f86f 	bl	8003350 <EEPROM_read>
 8003272:	4603      	mov	r3, r0
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f833 	bl	80032e0 <binary_to_float>
 800327a:	4603      	mov	r3, r0
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <load_data_from_EEPROM+0xbc>)
 800327e:	6013      	str	r3, [r2, #0]
	corr_coeff_3=binary_to_float(EEPROM_read(corr_coeff_3_EEPROM_ADDRESS));
 8003280:	2020      	movs	r0, #32
 8003282:	f000 f865 	bl	8003350 <EEPROM_read>
 8003286:	4603      	mov	r3, r0
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f829 	bl	80032e0 <binary_to_float>
 800328e:	4603      	mov	r3, r0
 8003290:	4a10      	ldr	r2, [pc, #64]	; (80032d4 <load_data_from_EEPROM+0xc0>)
 8003292:	6013      	str	r3, [r2, #0]
	gain_x2_coeff=binary_to_float(EEPROM_read(gain_x2_EEPROM_ADDRESS));
 8003294:	2028      	movs	r0, #40	; 0x28
 8003296:	f000 f85b 	bl	8003350 <EEPROM_read>
 800329a:	4603      	mov	r3, r0
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f81f 	bl	80032e0 <binary_to_float>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <load_data_from_EEPROM+0xc4>)
 80032a6:	6013      	str	r3, [r2, #0]
	gain_x4_coeff=binary_to_float(EEPROM_read(gain_x4_EEPROM_ADDRESS));
 80032a8:	2030      	movs	r0, #48	; 0x30
 80032aa:	f000 f851 	bl	8003350 <EEPROM_read>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f815 	bl	80032e0 <binary_to_float>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4a08      	ldr	r2, [pc, #32]	; (80032dc <load_data_from_EEPROM+0xc8>)
 80032ba:	6013      	str	r3, [r2, #0]
}
 80032bc:	bf00      	nop
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000ce4 	.word	0x20000ce4
 80032c4:	20000ce8 	.word	0x20000ce8
 80032c8:	20000ce0 	.word	0x20000ce0
 80032cc:	20000af4 	.word	0x20000af4
 80032d0:	20000af8 	.word	0x20000af8
 80032d4:	20000afc 	.word	0x20000afc
 80032d8:	20000b00 	.word	0x20000b00
 80032dc:	20000b04 	.word	0x20000b04

080032e0 <binary_to_float>:
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC push_options
#pragma GCC optimize ("O0")

float binary_to_float(uint32_t a)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	    int * p;
	    float out=0;
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]

	    p = &out;
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	60fb      	str	r3, [r7, #12]
	    (*p)=a;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	601a      	str	r2, [r3, #0]
	    return out;
 80032fa:	68bb      	ldr	r3, [r7, #8]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <float_to_binary>:


uint32_t float_to_binary(float a)
{
 8003306:	b480      	push	{r7}
 8003308:	b087      	sub	sp, #28
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
	    int i;
	    int * p;
	    uint32_t out=0;
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]

	    p = &a;
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	60fb      	str	r3, [r7, #12]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 8003316:	231f      	movs	r3, #31
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e010      	b.n	800333e <float_to_binary+0x38>
	    {
	    	out+=((*p) >> i & 1)<<i;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa42 f303 	asr.w	r3, r2, r3
 8003326:	f003 0201 	and.w	r2, r3, #1
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	461a      	mov	r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3b01      	subs	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	daeb      	bge.n	800331c <float_to_binary+0x16>
	    }

	    return out;
 8003344:	693b      	ldr	r3, [r7, #16]
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <EEPROM_read>:
//==============================================================================================


//==============================================================================================
uint32_t EEPROM_read(uint32_t address_of_read)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	uint32_t Address;

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800335e:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8003362:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4a06      	ldr	r2, [pc, #24]	; (8003380 <EEPROM_read+0x30>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d301      	bcc.n	8003370 <EEPROM_read+0x20>
	{
		return 0x00;
 800336c:	2300      	movs	r3, #0
 800336e:	e001      	b.n	8003374 <EEPROM_read+0x24>
	}
	return *(__IO uint32_t *) Address;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	08082800 	.word	0x08082800

08003384 <EEPROM_write>:
//==============================================================================================


//==============================================================================================
void EEPROM_write(uint32_t address_of_read, uint32_t data)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
	/* Clear all pending flags */
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR | FLASH_FLAG_OPTVERRUSR);

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
	     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003394:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8003398:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <EEPROM_write+0x50>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d212      	bcs.n	80033c8 <EEPROM_write+0x44>
	{
		return;
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 80033a2:	f001 ff0d 	bl	80051c0 <HAL_FLASHEx_DATAEEPROM_Unlock>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	68f9      	ldr	r1, [r7, #12]
 80033aa:	2002      	movs	r0, #2
 80033ac:	f001 ff66 	bl	800527c <HAL_FLASHEx_DATAEEPROM_Program>
 80033b0:	4603      	mov	r3, r0
 80033b2:	72fb      	strb	r3, [r7, #11]
	HAL_FLASHEx_DATAEEPROM_Lock();
 80033b4:	f001 ff20 	bl	80051f8 <HAL_FLASHEx_DATAEEPROM_Lock>

	if(FLASHStatus != HAL_OK)
 80033b8:	7afb      	ldrb	r3, [r7, #11]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <EEPROM_write+0x48>
	{
		return;
	}
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR);

	if(*(__IO uint32_t *) Address != data)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	e002      	b.n	80033ce <EEPROM_write+0x4a>
		return;
 80033c8:	bf00      	nop
 80033ca:	e000      	b.n	80033ce <EEPROM_write+0x4a>
		return;
 80033cc:	bf00      	nop
	{
		return;
	}

}
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	08082800 	.word	0x08082800

080033d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033de:	f107 0314 	add.w	r3, r7, #20
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	609a      	str	r2, [r3, #8]
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ee:	4b7c      	ldr	r3, [pc, #496]	; (80035e0 <MX_GPIO_Init+0x208>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4a7b      	ldr	r2, [pc, #492]	; (80035e0 <MX_GPIO_Init+0x208>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	61d3      	str	r3, [r2, #28]
 80033fa:	4b79      	ldr	r3, [pc, #484]	; (80035e0 <MX_GPIO_Init+0x208>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003406:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4a75      	ldr	r2, [pc, #468]	; (80035e0 <MX_GPIO_Init+0x208>)
 800340c:	f043 0320 	orr.w	r3, r3, #32
 8003410:	61d3      	str	r3, [r2, #28]
 8003412:	4b73      	ldr	r3, [pc, #460]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800341e:	4b70      	ldr	r3, [pc, #448]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a6f      	ldr	r2, [pc, #444]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	61d3      	str	r3, [r2, #28]
 800342a:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <MX_GPIO_Init+0x208>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003436:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4a69      	ldr	r2, [pc, #420]	; (80035e0 <MX_GPIO_Init+0x208>)
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	61d3      	str	r3, [r2, #28]
 8003442:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 800344e:	2200      	movs	r2, #0
 8003450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003454:	4863      	ldr	r0, [pc, #396]	; (80035e4 <MX_GPIO_Init+0x20c>)
 8003456:	f002 fb02 	bl	8005a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, GPIO_PIN_SET);
 800345a:	2201      	movs	r2, #1
 800345c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003460:	4860      	ldr	r0, [pc, #384]	; (80035e4 <MX_GPIO_Init+0x20c>)
 8003462:	f002 fafc 	bl	8005a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 8003466:	2201      	movs	r2, #1
 8003468:	f248 011f 	movw	r1, #32799	; 0x801f
 800346c:	485e      	ldr	r0, [pc, #376]	; (80035e8 <MX_GPIO_Init+0x210>)
 800346e:	f002 faf6 	bl	8005a5e <HAL_GPIO_WritePin>
                          |DAC_SYNC_Pin|DAC_CLR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RS_Pin|Display_Power_Pin, GPIO_PIN_RESET);
 8003472:	2200      	movs	r2, #0
 8003474:	f640 0101 	movw	r1, #2049	; 0x801
 8003478:	485c      	ldr	r0, [pc, #368]	; (80035ec <MX_GPIO_Init+0x214>)
 800347a:	f002 faf0 	bl	8005a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|SPI2_NSS_Pin
 800347e:	2201      	movs	r2, #1
 8003480:	f241 413e 	movw	r1, #5182	; 0x143e
 8003484:	4859      	ldr	r0, [pc, #356]	; (80035ec <MX_GPIO_Init+0x214>)
 8003486:	f002 faea 	bl	8005a5e <HAL_GPIO_WritePin>
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Start_button_Pin;
 800348a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800348e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003490:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003496:	2301      	movs	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Start_button_GPIO_Port, &GPIO_InitStruct);
 800349a:	f107 0314 	add.w	r3, r7, #20
 800349e:	4619      	mov	r1, r3
 80034a0:	4850      	ldr	r0, [pc, #320]	; (80035e4 <MX_GPIO_Init+0x20c>)
 80034a2:	f002 f945 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Count_EN_Pin;
 80034a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ac:	2301      	movs	r3, #1
 80034ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b4:	2302      	movs	r3, #2
 80034b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Count_EN_GPIO_Port, &GPIO_InitStruct);
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4619      	mov	r1, r3
 80034be:	4849      	ldr	r0, [pc, #292]	; (80035e4 <MX_GPIO_Init+0x20c>)
 80034c0:	f002 f936 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_cs_Pin;
 80034c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_cs_GPIO_Port, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4841      	ldr	r0, [pc, #260]	; (80035e4 <MX_GPIO_Init+0x20c>)
 80034de:	f002 f927 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 80034e2:	f248 030f 	movw	r3, #32783	; 0x800f
 80034e6:	617b      	str	r3, [r7, #20]
                          |DAC_CLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e8:	2301      	movs	r3, #1
 80034ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f0:	2303      	movs	r3, #3
 80034f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4619      	mov	r1, r3
 80034fa:	483b      	ldr	r0, [pc, #236]	; (80035e8 <MX_GPIO_Init+0x210>)
 80034fc:	f002 f918 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8003500:	2310      	movs	r3, #16
 8003502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003504:	2301      	movs	r3, #1
 8003506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003508:	2301      	movs	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350c:	2303      	movs	r3, #3
 800350e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	4619      	mov	r1, r3
 8003516:	4834      	ldr	r0, [pc, #208]	; (80035e8 <MX_GPIO_Init+0x210>)
 8003518:	f002 f90a 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Display_RS_Pin;
 800351c:	2301      	movs	r3, #1
 800351e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003520:	2301      	movs	r3, #1
 8003522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003528:	2302      	movs	r3, #2
 800352a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Display_RS_GPIO_Port, &GPIO_InitStruct);
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	482e      	ldr	r0, [pc, #184]	; (80035ec <MX_GPIO_Init+0x214>)
 8003534:	f002 f8fc 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|Display_Power_Pin
 8003538:	f640 433e 	movw	r3, #3134	; 0xc3e
 800353c:	617b      	str	r3, [r7, #20]
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800353e:	2311      	movs	r3, #17
 8003540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003546:	2302      	movs	r3, #2
 8003548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354a:	f107 0314 	add.w	r3, r7, #20
 800354e:	4619      	mov	r1, r3
 8003550:	4826      	ldr	r0, [pc, #152]	; (80035ec <MX_GPIO_Init+0x214>)
 8003552:	f002 f8ed 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8003556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800355a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355c:	2301      	movs	r3, #1
 800355e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003564:	2303      	movs	r3, #3
 8003566:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8003568:	f107 0314 	add.w	r3, r7, #20
 800356c:	4619      	mov	r1, r3
 800356e:	481f      	ldr	r0, [pc, #124]	; (80035ec <MX_GPIO_Init+0x214>)
 8003570:	f002 f8de 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encode_Push_Pin;
 8003574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800357a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800357e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003580:	2301      	movs	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encode_Push_GPIO_Port, &GPIO_InitStruct);
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4619      	mov	r1, r3
 800358a:	4817      	ldr	r0, [pc, #92]	; (80035e8 <MX_GPIO_Init+0x210>)
 800358c:	f002 f8d0 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003596:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800359a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4619      	mov	r1, r3
 80035a6:	4810      	ldr	r0, [pc, #64]	; (80035e8 <MX_GPIO_Init+0x210>)
 80035a8:	f002 f8c2 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 80035ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	4619      	mov	r1, r3
 80035c0:	4809      	ldr	r0, [pc, #36]	; (80035e8 <MX_GPIO_Init+0x210>)
 80035c2:	f002 f8b5 	bl	8005730 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2101      	movs	r1, #1
 80035ca:	2028      	movs	r0, #40	; 0x28
 80035cc:	f001 fcdb 	bl	8004f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80035d0:	2028      	movs	r0, #40	; 0x28
 80035d2:	f001 fcf4 	bl	8004fbe <HAL_NVIC_EnableIRQ>

}
 80035d6:	bf00      	nop
 80035d8:	3728      	adds	r7, #40	; 0x28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40020800 	.word	0x40020800
 80035e8:	40020000 	.word	0x40020000
 80035ec:	40020400 	.word	0x40020400

080035f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <MX_I2C1_Init+0x50>)
 80035f6:	4a13      	ldr	r2, [pc, #76]	; (8003644 <MX_I2C1_Init+0x54>)
 80035f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035fa:	4b11      	ldr	r3, [pc, #68]	; (8003640 <MX_I2C1_Init+0x50>)
 80035fc:	4a12      	ldr	r2, [pc, #72]	; (8003648 <MX_I2C1_Init+0x58>)
 80035fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <MX_I2C1_Init+0x50>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003606:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <MX_I2C1_Init+0x50>)
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <MX_I2C1_Init+0x50>)
 800360e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <MX_I2C1_Init+0x50>)
 8003616:	2200      	movs	r2, #0
 8003618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <MX_I2C1_Init+0x50>)
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <MX_I2C1_Init+0x50>)
 8003622:	2200      	movs	r2, #0
 8003624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <MX_I2C1_Init+0x50>)
 8003628:	2200      	movs	r2, #0
 800362a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800362c:	4804      	ldr	r0, [pc, #16]	; (8003640 <MX_I2C1_Init+0x50>)
 800362e:	f002 fa47 	bl	8005ac0 <HAL_I2C_Init>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003638:	f000 fea0 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800363c:	bf00      	nop
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000c0c 	.word	0x20000c0c
 8003644:	40005400 	.word	0x40005400
 8003648:	000186a0 	.word	0x000186a0

0800364c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <HAL_I2C_MspInit+0x7c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d128      	bne.n	80036c0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <HAL_I2C_MspInit+0x80>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	4a16      	ldr	r2, [pc, #88]	; (80036cc <HAL_I2C_MspInit+0x80>)
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	61d3      	str	r3, [r2, #28]
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_I2C_MspInit+0x80>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TMP117_SCL_Pin|TMP117_SDA_Pin;
 8003686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800368a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800368c:	2312      	movs	r3, #18
 800368e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003690:	2301      	movs	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003698:	2304      	movs	r3, #4
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	4619      	mov	r1, r3
 80036a2:	480b      	ldr	r0, [pc, #44]	; (80036d0 <HAL_I2C_MspInit+0x84>)
 80036a4:	f002 f844 	bl	8005730 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036a8:	4b08      	ldr	r3, [pc, #32]	; (80036cc <HAL_I2C_MspInit+0x80>)
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	4a07      	ldr	r2, [pc, #28]	; (80036cc <HAL_I2C_MspInit+0x80>)
 80036ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036b2:	6253      	str	r3, [r2, #36]	; 0x24
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_I2C_MspInit+0x80>)
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80036c0:	bf00      	nop
 80036c2:	3728      	adds	r7, #40	; 0x28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40005400 	.word	0x40005400
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40020400 	.word	0x40020400

080036d4 <USB_rx_command_buffer_push_refd>:

uint8_t eta_hours,eta_minute,eta_second;

int16_t Enc_Counter = 0;

CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4804      	ldr	r0, [pc, #16]	; (80036f0 <USB_rx_command_buffer_push_refd+0x1c>)
 80036e0:	f7fd ff66 	bl	80015b0 <__circ_gbuf_push>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000770 	.word	0x20000770

080036f4 <USB_rx_command_buffer_pop_refd>:
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4803      	ldr	r0, [pc, #12]	; (8003710 <USB_rx_command_buffer_pop_refd+0x1c>)
 8003702:	f7fd ff03 	bl	800150c <__circ_gbuf_pop>
 8003706:	4603      	mov	r3, r0
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000770 	.word	0x20000770

08003714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b095      	sub	sp, #84	; 0x54
 8003718:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 800371a:	4b57      	ldr	r3, [pc, #348]	; (8003878 <main+0x164>)
 800371c:	2200      	movs	r2, #0
 800371e:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 8003720:	4b55      	ldr	r3, [pc, #340]	; (8003878 <main+0x164>)
 8003722:	2208      	movs	r2, #8
 8003724:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8003726:	4b54      	ldr	r3, [pc, #336]	; (8003878 <main+0x164>)
 8003728:	2201      	movs	r2, #1
 800372a:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 800372c:	4b52      	ldr	r3, [pc, #328]	; (8003878 <main+0x164>)
 800372e:	2201      	movs	r2, #1
 8003730:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 8003732:	4b51      	ldr	r3, [pc, #324]	; (8003878 <main+0x164>)
 8003734:	2200      	movs	r2, #0
 8003736:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8003738:	4b4f      	ldr	r3, [pc, #316]	; (8003878 <main+0x164>)
 800373a:	2200      	movs	r2, #0
 800373c:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 800373e:	4b4e      	ldr	r3, [pc, #312]	; (8003878 <main+0x164>)
 8003740:	2200      	movs	r2, #0
 8003742:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 8003744:	4b4c      	ldr	r3, [pc, #304]	; (8003878 <main+0x164>)
 8003746:	2200      	movs	r2, #0
 8003748:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 800374a:	4b4b      	ldr	r3, [pc, #300]	; (8003878 <main+0x164>)
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]

	DAC_target_speed=0.01; //  V/s
 8003750:	4b4a      	ldr	r3, [pc, #296]	; (800387c <main+0x168>)
 8003752:	4a4b      	ldr	r2, [pc, #300]	; (8003880 <main+0x16c>)
 8003754:	601a      	str	r2, [r3, #0]
	DAC_code=DAC_CODE_MIDDLE;
 8003756:	4b4b      	ldr	r3, [pc, #300]	; (8003884 <main+0x170>)
 8003758:	4a4b      	ldr	r2, [pc, #300]	; (8003888 <main+0x174>)
 800375a:	601a      	str	r2, [r3, #0]
	DAC_code_direction=1;
 800375c:	4b4b      	ldr	r3, [pc, #300]	; (800388c <main+0x178>)
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003762:	f001 faa8 	bl	8004cb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003766:	f000 f8a5 	bl	80038b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800376a:	f7ff fe35 	bl	80033d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800376e:	f000 fe0b 	bl	8004388 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003772:	f000 fe3d 	bl	80043f0 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8003776:	f00a ff53 	bl	800e620 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800377a:	f001 f8b3 	bl	80048e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800377e:	f001 f8ff 	bl	8004980 <MX_TIM4_Init>
  MX_I2C1_Init();
 8003782:	f7ff ff35 	bl	80035f0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003786:	f001 f861 	bl	800484c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800378a:	f000 f8df 	bl	800394c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  init_LCD();
 800378e:	f7fe fe99 	bl	80024c4 <init_LCD>
  LcdUpdate();
  LcdClear_massive();
  HAL_Delay(3000); //WarmUP
*/

  load_data_from_EEPROM();
 8003792:	f7ff fd3f 	bl	8003214 <load_data_from_EEPROM>
  TMP117_Initialization(hi2c1);
 8003796:	4c3e      	ldr	r4, [pc, #248]	; (8003890 <main+0x17c>)
 8003798:	4668      	mov	r0, sp
 800379a:	f104 0310 	add.w	r3, r4, #16
 800379e:	2244      	movs	r2, #68	; 0x44
 80037a0:	4619      	mov	r1, r3
 80037a2:	f00b fce3 	bl	800f16c <memcpy>
 80037a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80037aa:	f001 fa2d 	bl	8004c08 <TMP117_Initialization>
  DDS_Init();
 80037ae:	f7fe fb0d 	bl	8001dcc <DDS_Init>
  DAC_SendInit();
 80037b2:	f7fe f8f3 	bl	800199c <DAC_SendInit>
  DAC_Write(DAC_code);
 80037b6:	4b33      	ldr	r3, [pc, #204]	; (8003884 <main+0x170>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe f894 	bl	80018e8 <DAC_Write>

  HAL_TIM_Base_Start_IT(&htim3);
 80037c0:	4834      	ldr	r0, [pc, #208]	; (8003894 <main+0x180>)
 80037c2:	f006 f9ff 	bl	8009bc4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80037c6:	4834      	ldr	r0, [pc, #208]	; (8003898 <main+0x184>)
 80037c8:	f006 f9fc 	bl	8009bc4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80037cc:	213c      	movs	r1, #60	; 0x3c
 80037ce:	4833      	ldr	r0, [pc, #204]	; (800389c <main+0x188>)
 80037d0:	f006 fae8 	bl	8009da4 <HAL_TIM_Encoder_Start>


  output_state(Output_off_STATE);
 80037d4:	2000      	movs	r0, #0
 80037d6:	f7fe ffaf 	bl	8002738 <output_state>
  CPLD_control(CPLD_OFF_STATE);
 80037da:	2000      	movs	r0, #0
 80037dc:	f7fd fff0 	bl	80017c0 <CPLD_control>

  send_answer_to_CDC(CLEAR_TYPE_1);
 80037e0:	2004      	movs	r0, #4
 80037e2:	f7ff f97b 	bl	8002adc <send_answer_to_CDC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(USB_CDC_End_Line_Received)
 80037e6:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <main+0x18c>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d021      	beq.n	8003834 <main+0x120>
		{
			uint8_t i=0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	71fb      	strb	r3, [r7, #7]
			USB_CDC_End_Line_Received=0;
 80037f4:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <main+0x18c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
			while (1) {
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	4a29      	ldr	r2, [pc, #164]	; (80038a4 <main+0x190>)
 80037fe:	4413      	add	r3, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff77 	bl	80036f4 <USB_rx_command_buffer_pop_refd>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <main+0x100>
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	4a25      	ldr	r2, [pc, #148]	; (80038a4 <main+0x190>)
 8003810:	210a      	movs	r1, #10
 8003812:	54d1      	strb	r1, [r2, r3]
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <main+0x190>)
 8003818:	5cd3      	ldrb	r3, [r2, r3]
 800381a:	2b0a      	cmp	r3, #10
 800381c:	d008      	beq.n	8003830 <main+0x11c>
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <main+0x190>)
 8003822:	5cd3      	ldrb	r3, [r2, r3]
 8003824:	2b0d      	cmp	r3, #13
 8003826:	d003      	beq.n	8003830 <main+0x11c>
				i++;
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	3301      	adds	r3, #1
 800382c:	71fb      	strb	r3, [r7, #7]
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 800382e:	e7e4      	b.n	80037fa <main+0xe6>
			}
			Parsing_USB_command();
 8003830:	f000 f948 	bl	8003ac4 <Parsing_USB_command>
		}

		if(Need_update_DDS)
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <main+0x194>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00d      	beq.n	8003858 <main+0x144>
		{
			if(Ramp_dac_step_complete)
 800383c:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <main+0x198>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <main+0x140>
			{
				DDS_Update();
 8003844:	f7fe fb9e 	bl	8001f84 <DDS_Update>
				Need_update_DDS=0;
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <main+0x194>)
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
				Ramp_dac_step_complete=0;
 800384e:	4b17      	ldr	r3, [pc, #92]	; (80038ac <main+0x198>)
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
			}
			DDS_Calculation();
 8003854:	f7fe f99a 	bl	8001b8c <DDS_Calculation>

		}
		if(Need_update_Display)
 8003858:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <main+0x19c>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0c2      	beq.n	80037e6 <main+0xd2>
		{
			display_screen(dU_dt_SCREEN);
 8003860:	2000      	movs	r0, #0
 8003862:	f7ff f87b 	bl	800295c <display_screen>
			LcdUpdate();
 8003866:	f7fe fc55 	bl	8002114 <LcdUpdate>
			LcdClear_massive();
 800386a:	f7fe fc87 	bl	800217c <LcdClear_massive>
			Need_update_Display=0;
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <main+0x19c>)
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
		if(USB_CDC_End_Line_Received)
 8003874:	e7b7      	b.n	80037e6 <main+0xd2>
 8003876:	bf00      	nop
 8003878:	20000cc8 	.word	0x20000cc8
 800387c:	20000cdc 	.word	0x20000cdc
 8003880:	3c23d70a 	.word	0x3c23d70a
 8003884:	20000cf0 	.word	0x20000cf0
 8003888:	0007ffff 	.word	0x0007ffff
 800388c:	20000cf4 	.word	0x20000cf4
 8003890:	20000c0c 	.word	0x20000c0c
 8003894:	20000dec 	.word	0x20000dec
 8003898:	20000dac 	.word	0x20000dac
 800389c:	20000e2c 	.word	0x20000e2c
 80038a0:	20000be8 	.word	0x20000be8
 80038a4:	20000bec 	.word	0x20000bec
 80038a8:	20000cf6 	.word	0x20000cf6
 80038ac:	20000cf7 	.word	0x20000cf7
 80038b0:	20000cf5 	.word	0x20000cf5

080038b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b092      	sub	sp, #72	; 0x48
 80038b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038ba:	f107 0314 	add.w	r3, r7, #20
 80038be:	2234      	movs	r2, #52	; 0x34
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f00b fc60 	bl	800f188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038c8:	463b      	mov	r3, r7
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
 80038d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038d6:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <SystemClock_Config+0x94>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80038de:	4a1a      	ldr	r2, [pc, #104]	; (8003948 <SystemClock_Config+0x94>)
 80038e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038e4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038e6:	2301      	movs	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038ea:	2301      	movs	r3, #1
 80038ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038ee:	2302      	movs	r3, #2
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80038f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80038fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003902:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	4618      	mov	r0, r3
 800390a:	f004 fc99 	bl	8008240 <HAL_RCC_OscConfig>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8003914:	f000 fd32 	bl	800437c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003918:	230f      	movs	r3, #15
 800391a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800391c:	2303      	movs	r3, #3
 800391e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003928:	2300      	movs	r3, #0
 800392a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800392c:	463b      	mov	r3, r7
 800392e:	2101      	movs	r1, #1
 8003930:	4618      	mov	r0, r3
 8003932:	f004 ffb5 	bl	80088a0 <HAL_RCC_ClockConfig>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800393c:	f000 fd1e 	bl	800437c <Error_Handler>
  }
}
 8003940:	bf00      	nop
 8003942:	3748      	adds	r7, #72	; 0x48
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40007000 	.word	0x40007000

0800394c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003950:	2200      	movs	r2, #0
 8003952:	2100      	movs	r1, #0
 8003954:	2017      	movs	r0, #23
 8003956:	f001 fb16 	bl	8004f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800395a:	2017      	movs	r0, #23
 800395c:	f001 fb2f 	bl	8004fbe <HAL_NVIC_EnableIRQ>
}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_TIM_PeriodElapsedCallback>:
//==============================================================================================


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3 )// INL correction, each 500ms
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a0b      	ldr	r2, [pc, #44]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d106      	bne.n	8003982 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		if(cfg.LDACMODE==1)Need_update_DDS=1;
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003976:	789b      	ldrb	r3, [r3, #2]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d102      	bne.n	8003982 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim2 )//User interface workload, each 10ms
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a08      	ldr	r2, [pc, #32]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d102      	bne.n	8003990 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		Need_update_Display=1;
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
	}

}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000dec 	.word	0x20000dec
 80039a0:	20000cc8 	.word	0x20000cc8
 80039a4:	20000cf6 	.word	0x20000cf6
 80039a8:	20000dac 	.word	0x20000dac
 80039ac:	20000cf5 	.word	0x20000cf5

080039b0 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	80fb      	strh	r3, [r7, #6]
	DAC_Write_FAST();
 80039ba:	f7fd ffd5 	bl	8001968 <DAC_Write_FAST>
	Ramp_dac_step_complete=1;
 80039be:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <HAL_GPIO_EXTI_Callback+0xfc>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_9)
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ca:	d16b      	bne.n	8003aa4 <HAL_GPIO_EXTI_Callback+0xf4>
	{
		if(DAC_code_direction)
 80039cc:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <HAL_GPIO_EXTI_Callback+0x100>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d035      	beq.n	8003a40 <HAL_GPIO_EXTI_Callback+0x90>
		{
			if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 80039d4:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <HAL_GPIO_EXTI_Callback+0x104>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 80039dc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80039e0:	4a35      	ldr	r2, [pc, #212]	; (8003ab8 <HAL_GPIO_EXTI_Callback+0x108>)
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d322      	bcc.n	8003a2e <HAL_GPIO_EXTI_Callback+0x7e>
			{
				DAC_code+=DDS_target_multipiller;
 80039e8:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <HAL_GPIO_EXTI_Callback+0x108>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b31      	ldr	r3, [pc, #196]	; (8003ab4 <HAL_GPIO_EXTI_Callback+0x104>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4413      	add	r3, r2
 80039f2:	4a31      	ldr	r2, [pc, #196]	; (8003ab8 <HAL_GPIO_EXTI_Callback+0x108>)
 80039f4:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80039f6:	4b31      	ldr	r3, [pc, #196]	; (8003abc <HAL_GPIO_EXTI_Callback+0x10c>)
 80039f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039fc:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 80039fe:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a08:	f023 030f 	bic.w	r3, r3, #15
 8003a0c:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	4413      	add	r3, r2
 8003a12:	4a2a      	ldr	r2, [pc, #168]	; (8003abc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a14:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <HAL_GPIO_EXTI_Callback+0x110>)
 8003a20:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <HAL_GPIO_EXTI_Callback+0x110>)
 8003a2a:	805a      	strh	r2, [r3, #2]
 8003a2c:	e03a      	b.n	8003aa4 <HAL_GPIO_EXTI_Callback+0xf4>

			} else  {
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f7fd fec6 	bl	80017c0 <CPLD_control>
				DAC_SendInit();
 8003a34:	f7fd ffb2 	bl	800199c <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 8003a38:	2005      	movs	r0, #5
 8003a3a:	f7ff f84f 	bl	8002adc <send_answer_to_CDC>
				return;
 8003a3e:	e031      	b.n	8003aa4 <HAL_GPIO_EXTI_Callback+0xf4>
			}
		}
		else
		{
			if(DAC_code>=DDS_target_multipiller)
 8003a40:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <HAL_GPIO_EXTI_Callback+0x104>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d322      	bcc.n	8003a92 <HAL_GPIO_EXTI_Callback+0xe2>
			{
				DAC_code-=DDS_target_multipiller;
 8003a4c:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <HAL_GPIO_EXTI_Callback+0x104>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a58:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8003a5a:	4b18      	ldr	r3, [pc, #96]	; (8003abc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a60:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8003a62:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a6c:	f023 030f 	bic.w	r3, r3, #15
 8003a70:	4a12      	ldr	r2, [pc, #72]	; (8003abc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	4413      	add	r3, r2
 8003a76:	4a11      	ldr	r2, [pc, #68]	; (8003abc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a78:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <HAL_GPIO_EXTI_Callback+0x110>)
 8003a84:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <HAL_GPIO_EXTI_Callback+0x110>)
 8003a8e:	805a      	strh	r2, [r3, #2]
 8003a90:	e008      	b.n	8003aa4 <HAL_GPIO_EXTI_Callback+0xf4>

			} else {
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8003a92:	2000      	movs	r0, #0
 8003a94:	f7fd fe94 	bl	80017c0 <CPLD_control>
				DAC_SendInit();
 8003a98:	f7fd ff80 	bl	800199c <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 8003a9c:	2005      	movs	r0, #5
 8003a9e:	f7ff f81d 	bl	8002adc <send_answer_to_CDC>
				return;
 8003aa2:	bf00      	nop
			}
		}
	}
}
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000cf7 	.word	0x20000cf7
 8003ab0:	20000cf4 	.word	0x20000cf4
 8003ab4:	2000077c 	.word	0x2000077c
 8003ab8:	20000cf0 	.word	0x20000cf0
 8003abc:	20000cc0 	.word	0x20000cc0
 8003ac0:	20000cc4 	.word	0x20000cc4

08003ac4 <Parsing_USB_command>:

void Parsing_USB_command(void)
{
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b0a7      	sub	sp, #156	; 0x9c
 8003ac8:	af12      	add	r7, sp, #72	; 0x48
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];
	uint8_t cdc_counter=0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	found = strtok((char *)command_buffer," ");
 8003ad0:	49c3      	ldr	r1, [pc, #780]	; (8003de0 <Parsing_USB_command+0x31c>)
 8003ad2:	48c4      	ldr	r0, [pc, #784]	; (8003de4 <Parsing_USB_command+0x320>)
 8003ad4:	f00c fe00 	bl	80106d8 <strtok>
 8003ad8:	6478      	str	r0, [r7, #68]	; 0x44
	if(found!=NULL)
 8003ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <Parsing_USB_command+0x3a>
	{
		strcpy(decoded_string_1,found);
 8003ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f00b ffd6 	bl	800fa98 <strcpy>
	{
		send_answer_to_CDC(ERROR_TYPE_1);
		return;
	}

	found = strtok(NULL,"\r");
 8003aec:	49be      	ldr	r1, [pc, #760]	; (8003de8 <Parsing_USB_command+0x324>)
 8003aee:	2000      	movs	r0, #0
 8003af0:	f00c fdf2 	bl	80106d8 <strtok>
 8003af4:	6478      	str	r0, [r7, #68]	; 0x44
	if(found!=NULL)
 8003af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d024      	beq.n	8003b46 <Parsing_USB_command+0x82>
 8003afc:	e004      	b.n	8003b08 <Parsing_USB_command+0x44>
		send_answer_to_CDC(ERROR_TYPE_1);
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7fe ffec 	bl	8002adc <send_answer_to_CDC>
		return;
 8003b04:	f000 bc05 	b.w	8004312 <Parsing_USB_command+0x84e>
	{
		strcpy(decoded_string_2,found);
 8003b08:	1d3b      	adds	r3, r7, #4
 8003b0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f00b ffc3 	bl	800fa98 <strcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 8003b12:	2300      	movs	r3, #0
 8003b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b16:	e00d      	b.n	8003b34 <Parsing_USB_command+0x70>
 8003b18:	1d3a      	adds	r2, r7, #4
 8003b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1c:	4413      	add	r3, r2
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d104      	bne.n	8003b2e <Parsing_USB_command+0x6a>
 8003b24:	1d3a      	adds	r2, r7, #4
 8003b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b28:	4413      	add	r3, r2
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b30:	3301      	adds	r3, #1
 8003b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b34:	1d3b      	adds	r3, r7, #4
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fc fb2c 	bl	8000194 <strlen>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d8e9      	bhi.n	8003b18 <Parsing_USB_command+0x54>
 8003b44:	e003      	b.n	8003b4e <Parsing_USB_command+0x8a>
	}
	else
	{
		send_answer_to_CDC(ERROR_TYPE_1);
 8003b46:	2000      	movs	r0, #0
 8003b48:	f7fe ffc8 	bl	8002adc <send_answer_to_CDC>
		return;
 8003b4c:	e3e1      	b.n	8004312 <Parsing_USB_command+0x84e>
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8003b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b52:	49a6      	ldr	r1, [pc, #664]	; (8003dec <Parsing_USB_command+0x328>)
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fb13 	bl	8000180 <strcmp>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11f      	bne.n	8003ba0 <Parsing_USB_command+0xdc>
	{
		if(!(strcmp(decoded_string_2,"START")))
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	49a3      	ldr	r1, [pc, #652]	; (8003df0 <Parsing_USB_command+0x32c>)
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fc fb0b 	bl	8000180 <strcmp>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <Parsing_USB_command+0xb8>
		{
			cmd_SWEEP_START();
 8003b70:	f7ff f886 	bl	8002c80 <cmd_SWEEP_START>
			send_answer_to_CDC(OK_TYPE_2);
 8003b74:	2003      	movs	r0, #3
 8003b76:	f7fe ffb1 	bl	8002adc <send_answer_to_CDC>
			return;
 8003b7a:	e3ca      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP")))
 8003b7c:	1d3b      	adds	r3, r7, #4
 8003b7e:	499d      	ldr	r1, [pc, #628]	; (8003df4 <Parsing_USB_command+0x330>)
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fc fafd 	bl	8000180 <strcmp>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <Parsing_USB_command+0xd4>
			{
				cmd_SWEEP_STOP();
 8003b8c:	f7ff f888 	bl	8002ca0 <cmd_SWEEP_STOP>
				send_answer_to_CDC(OK_TYPE_2);
 8003b90:	2003      	movs	r0, #3
 8003b92:	f7fe ffa3 	bl	8002adc <send_answer_to_CDC>
				return;
 8003b96:	e3bc      	b.n	8004312 <Parsing_USB_command+0x84e>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f7fe ff9f 	bl	8002adc <send_answer_to_CDC>
				return;
 8003b9e:	e3b8      	b.n	8004312 <Parsing_USB_command+0x84e>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 8003ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba4:	4994      	ldr	r1, [pc, #592]	; (8003df8 <Parsing_USB_command+0x334>)
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fc faea 	bl	8000180 <strcmp>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d136      	bne.n	8003c20 <Parsing_USB_command+0x15c>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	4991      	ldr	r1, [pc, #580]	; (8003dfc <Parsing_USB_command+0x338>)
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fae2 	bl	8000180 <strcmp>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <Parsing_USB_command+0x10c>
			cmd_DAC_SET(DAC_CODE_TOP);
 8003bc2:	488f      	ldr	r0, [pc, #572]	; (8003e00 <Parsing_USB_command+0x33c>)
 8003bc4:	f7ff f876 	bl	8002cb4 <cmd_DAC_SET>
			send_answer_to_CDC(OK_TYPE_2);
 8003bc8:	2003      	movs	r0, #3
 8003bca:	f7fe ff87 	bl	8002adc <send_answer_to_CDC>
			return;
 8003bce:	e3a0      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8003bd0:	1d3b      	adds	r3, r7, #4
 8003bd2:	498c      	ldr	r1, [pc, #560]	; (8003e04 <Parsing_USB_command+0x340>)
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fc fad3 	bl	8000180 <strcmp>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <Parsing_USB_command+0x12a>
				cmd_DAC_SET(DAC_CODE_DOWN);
 8003be0:	2000      	movs	r0, #0
 8003be2:	f7ff f867 	bl	8002cb4 <cmd_DAC_SET>
				send_answer_to_CDC(OK_TYPE_2);
 8003be6:	2003      	movs	r0, #3
 8003be8:	f7fe ff78 	bl	8002adc <send_answer_to_CDC>
				return;
 8003bec:	e391      	b.n	8004312 <Parsing_USB_command+0x84e>
			}
			else
			{
				if(cmd_SET_OUTPUT_VOLTAGE(atof(decoded_string_2)))
 8003bee:	1d3b      	adds	r3, r7, #4
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f00b fa8d 	bl	800f110 <atof>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f7fc ff85 	bl	8000b0c <__aeabi_d2f>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff f881 	bl	8002d0c <cmd_SET_OUTPUT_VOLTAGE>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <Parsing_USB_command+0x154>
				{
					send_answer_to_CDC(OK_TYPE_2);
 8003c10:	2003      	movs	r0, #3
 8003c12:	f7fe ff63 	bl	8002adc <send_answer_to_CDC>
					return;
 8003c16:	e37c      	b.n	8004312 <Parsing_USB_command+0x84e>
				}
				else
				{
					send_answer_to_CDC(ERROR_TYPE_2);
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f7fe ff5f 	bl	8002adc <send_answer_to_CDC>
					return;
 8003c1e:	e378      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
	}


	// ==== OUTPUT command ====
	if(!(strcmp(decoded_string_1,"OUTPUT")))
 8003c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c24:	4978      	ldr	r1, [pc, #480]	; (8003e08 <Parsing_USB_command+0x344>)
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fc faaa 	bl	8000180 <strcmp>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d13f      	bne.n	8003cb2 <Parsing_USB_command+0x1ee>
	{
		if(!(strcmp(decoded_string_2,"OFF"))){
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	4975      	ldr	r1, [pc, #468]	; (8003e0c <Parsing_USB_command+0x348>)
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc faa2 	bl	8000180 <strcmp>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <Parsing_USB_command+0x18c>
			output_state(Output_off_STATE);
 8003c42:	2000      	movs	r0, #0
 8003c44:	f7fe fd78 	bl	8002738 <output_state>
			send_answer_to_CDC(OK_TYPE_2);
 8003c48:	2003      	movs	r0, #3
 8003c4a:	f7fe ff47 	bl	8002adc <send_answer_to_CDC>
			return;
 8003c4e:	e360      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"X1"))){
 8003c50:	1d3b      	adds	r3, r7, #4
 8003c52:	496f      	ldr	r1, [pc, #444]	; (8003e10 <Parsing_USB_command+0x34c>)
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc fa93 	bl	8000180 <strcmp>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <Parsing_USB_command+0x1aa>
				output_state(Output_x1_STATE);
 8003c60:	2001      	movs	r0, #1
 8003c62:	f7fe fd69 	bl	8002738 <output_state>
				send_answer_to_CDC(OK_TYPE_2);
 8003c66:	2003      	movs	r0, #3
 8003c68:	f7fe ff38 	bl	8002adc <send_answer_to_CDC>
				return;
 8003c6c:	e351      	b.n	8004312 <Parsing_USB_command+0x84e>
			}
			else
			{
				if(!(strcmp(decoded_string_2,"X2"))){
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	4968      	ldr	r1, [pc, #416]	; (8003e14 <Parsing_USB_command+0x350>)
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fa84 	bl	8000180 <strcmp>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <Parsing_USB_command+0x1c8>
					output_state(Output_x2_STATE);
 8003c7e:	2002      	movs	r0, #2
 8003c80:	f7fe fd5a 	bl	8002738 <output_state>
					send_answer_to_CDC(OK_TYPE_2);
 8003c84:	2003      	movs	r0, #3
 8003c86:	f7fe ff29 	bl	8002adc <send_answer_to_CDC>
					return;
 8003c8a:	e342      	b.n	8004312 <Parsing_USB_command+0x84e>
				}
				else
				{
					if(!(strcmp(decoded_string_2,"X4"))){
 8003c8c:	1d3b      	adds	r3, r7, #4
 8003c8e:	4962      	ldr	r1, [pc, #392]	; (8003e18 <Parsing_USB_command+0x354>)
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fc fa75 	bl	8000180 <strcmp>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <Parsing_USB_command+0x1e6>
						output_state(Output_x4_STATE);
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	f7fe fd4b 	bl	8002738 <output_state>
						send_answer_to_CDC(OK_TYPE_2);
 8003ca2:	2003      	movs	r0, #3
 8003ca4:	f7fe ff1a 	bl	8002adc <send_answer_to_CDC>
						return;
 8003ca8:	e333      	b.n	8004312 <Parsing_USB_command+0x84e>
					}
					else
					{
						send_answer_to_CDC(ERROR_TYPE_2);
 8003caa:	2001      	movs	r0, #1
 8003cac:	f7fe ff16 	bl	8002adc <send_answer_to_CDC>
						return;
 8003cb0:	e32f      	b.n	8004312 <Parsing_USB_command+0x84e>
			}
		}
	}

	// ==== DAC_CAL_TEMP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TEMP")))
 8003cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cb6:	4959      	ldr	r1, [pc, #356]	; (8003e1c <Parsing_USB_command+0x358>)
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fa61 	bl	8000180 <strcmp>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d116      	bne.n	8003cf2 <Parsing_USB_command+0x22e>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8003cc4:	1d3b      	adds	r3, r7, #4
 8003cc6:	494a      	ldr	r1, [pc, #296]	; (8003df0 <Parsing_USB_command+0x32c>)
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc fa59 	bl	8000180 <strcmp>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <Parsing_USB_command+0x226>
			send_answer_to_CDC(RUN_CAL_TYPE_TEMP);
 8003cd4:	200f      	movs	r0, #15
 8003cd6:	f7fe ff01 	bl	8002adc <send_answer_to_CDC>
			cmd_CAL(DAC_CAL_TEMP,NONE);
 8003cda:	4951      	ldr	r1, [pc, #324]	; (8003e20 <Parsing_USB_command+0x35c>)
 8003cdc:	2006      	movs	r0, #6
 8003cde:	f7ff f96b 	bl	8002fb8 <cmd_CAL>
			send_answer_to_CDC(OK_TYPE_1);
 8003ce2:	2002      	movs	r0, #2
 8003ce4:	f7fe fefa 	bl	8002adc <send_answer_to_CDC>
			return;
 8003ce8:	e313      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 8003cea:	2000      	movs	r0, #0
 8003cec:	f7fe fef6 	bl	8002adc <send_answer_to_CDC>
			return;
 8003cf0:	e30f      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
	}

	// ==== DAC_CAL_POLY_A command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_A")))
 8003cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cf6:	494b      	ldr	r1, [pc, #300]	; (8003e24 <Parsing_USB_command+0x360>)
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fc fa41 	bl	8000180 <strcmp>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d112      	bne.n	8003d2a <Parsing_USB_command+0x266>
	{
		cmd_CAL(DAC_CAL_POLY_A,atof(decoded_string_2));
 8003d04:	1d3b      	adds	r3, r7, #4
 8003d06:	4618      	mov	r0, r3
 8003d08:	f00b fa02 	bl	800f110 <atof>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	f7fc fefa 	bl	8000b0c <__aeabi_d2f>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	2007      	movs	r0, #7
 8003d1e:	f7ff f94b 	bl	8002fb8 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003d22:	2003      	movs	r0, #3
 8003d24:	f7fe feda 	bl	8002adc <send_answer_to_CDC>
		return;
 8003d28:	e2f3      	b.n	8004312 <Parsing_USB_command+0x84e>
	}

	// ==== DAC_CAL_POLY_B command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_B")))
 8003d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2e:	493e      	ldr	r1, [pc, #248]	; (8003e28 <Parsing_USB_command+0x364>)
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fa25 	bl	8000180 <strcmp>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d112      	bne.n	8003d62 <Parsing_USB_command+0x29e>
	{
		cmd_CAL(DAC_CAL_POLY_B,atof(decoded_string_2));
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f00b f9e6 	bl	800f110 <atof>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fc fede 	bl	8000b0c <__aeabi_d2f>
 8003d50:	4603      	mov	r3, r0
 8003d52:	4619      	mov	r1, r3
 8003d54:	2008      	movs	r0, #8
 8003d56:	f7ff f92f 	bl	8002fb8 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003d5a:	2003      	movs	r0, #3
 8003d5c:	f7fe febe 	bl	8002adc <send_answer_to_CDC>
		return;
 8003d60:	e2d7      	b.n	8004312 <Parsing_USB_command+0x84e>
	}

	// ==== DAC_CAL_POLY_C command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_C")))
 8003d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d66:	4931      	ldr	r1, [pc, #196]	; (8003e2c <Parsing_USB_command+0x368>)
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fc fa09 	bl	8000180 <strcmp>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d112      	bne.n	8003d9a <Parsing_USB_command+0x2d6>
	{
		cmd_CAL(DAC_CAL_POLY_C,atof(decoded_string_2));
 8003d74:	1d3b      	adds	r3, r7, #4
 8003d76:	4618      	mov	r0, r3
 8003d78:	f00b f9ca 	bl	800f110 <atof>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	f7fc fec2 	bl	8000b0c <__aeabi_d2f>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	2009      	movs	r0, #9
 8003d8e:	f7ff f913 	bl	8002fb8 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003d92:	2003      	movs	r0, #3
 8003d94:	f7fe fea2 	bl	8002adc <send_answer_to_CDC>
		return;
 8003d98:	e2bb      	b.n	8004312 <Parsing_USB_command+0x84e>
	}

	// ==== GAIN_X2_CAL command ====
	if(!(strcmp(decoded_string_1,"GAIN_X2_CAL")))
 8003d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d9e:	4924      	ldr	r1, [pc, #144]	; (8003e30 <Parsing_USB_command+0x36c>)
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc f9ed 	bl	8000180 <strcmp>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d143      	bne.n	8003e34 <Parsing_USB_command+0x370>
	{
		if(cmd_CAL(GAIN_X2_CAL,atof(decoded_string_2)))
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f00b f9ae 	bl	800f110 <atof>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f7fc fea6 	bl	8000b0c <__aeabi_d2f>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	200c      	movs	r0, #12
 8003dc6:	f7ff f8f7 	bl	8002fb8 <cmd_CAL>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <Parsing_USB_command+0x314>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003dd0:	2003      	movs	r0, #3
 8003dd2:	f7fe fe83 	bl	8002adc <send_answer_to_CDC>
			return;
 8003dd6:	e29c      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f7fe fe7f 	bl	8002adc <send_answer_to_CDC>
			return;
 8003dde:	e298      	b.n	8004312 <Parsing_USB_command+0x84e>
 8003de0:	08013658 	.word	0x08013658
 8003de4:	20000bec 	.word	0x20000bec
 8003de8:	0801365c 	.word	0x0801365c
 8003dec:	08013660 	.word	0x08013660
 8003df0:	08013668 	.word	0x08013668
 8003df4:	08013670 	.word	0x08013670
 8003df8:	08013678 	.word	0x08013678
 8003dfc:	08013680 	.word	0x08013680
 8003e00:	000fffff 	.word	0x000fffff
 8003e04:	08013684 	.word	0x08013684
 8003e08:	0801368c 	.word	0x0801368c
 8003e0c:	08013694 	.word	0x08013694
 8003e10:	08013698 	.word	0x08013698
 8003e14:	0801369c 	.word	0x0801369c
 8003e18:	080136a0 	.word	0x080136a0
 8003e1c:	080136a4 	.word	0x080136a4
 8003e20:	41600000 	.word	0x41600000
 8003e24:	080136b4 	.word	0x080136b4
 8003e28:	080136c4 	.word	0x080136c4
 8003e2c:	080136d4 	.word	0x080136d4
 8003e30:	080136e4 	.word	0x080136e4
		}
	}

	// ==== GAIN_X4_CAL command ====
	if(!(strcmp(decoded_string_1,"GAIN_X4_CAL")))
 8003e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e38:	49b6      	ldr	r1, [pc, #728]	; (8004114 <Parsing_USB_command+0x650>)
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc f9a0 	bl	8000180 <strcmp>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d119      	bne.n	8003e7a <Parsing_USB_command+0x3b6>
	{
		if(cmd_CAL(GAIN_X4_CAL,atof(decoded_string_2)))
 8003e46:	1d3b      	adds	r3, r7, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f00b f961 	bl	800f110 <atof>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4610      	mov	r0, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	f7fc fe59 	bl	8000b0c <__aeabi_d2f>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	200d      	movs	r0, #13
 8003e60:	f7ff f8aa 	bl	8002fb8 <cmd_CAL>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <Parsing_USB_command+0x3ae>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003e6a:	2003      	movs	r0, #3
 8003e6c:	f7fe fe36 	bl	8002adc <send_answer_to_CDC>
			return;
 8003e70:	e24f      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003e72:	2001      	movs	r0, #1
 8003e74:	f7fe fe32 	bl	8002adc <send_answer_to_CDC>
			return;
 8003e78:	e24b      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
	}


	// ==== DAC_CAL_TOP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TOP")))
 8003e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e7e:	49a6      	ldr	r1, [pc, #664]	; (8004118 <Parsing_USB_command+0x654>)
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fc f97d 	bl	8000180 <strcmp>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d119      	bne.n	8003ec0 <Parsing_USB_command+0x3fc>
	{
		if(cmd_CAL(DAC_CAL_TOP,atof(decoded_string_2)))
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f00b f93e 	bl	800f110 <atof>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f7fc fe36 	bl	8000b0c <__aeabi_d2f>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	200a      	movs	r0, #10
 8003ea6:	f7ff f887 	bl	8002fb8 <cmd_CAL>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <Parsing_USB_command+0x3f4>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003eb0:	2003      	movs	r0, #3
 8003eb2:	f7fe fe13 	bl	8002adc <send_answer_to_CDC>
			return;
 8003eb6:	e22c      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f7fe fe0f 	bl	8002adc <send_answer_to_CDC>
			return;
 8003ebe:	e228      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
	}


	// ==== DAC_CAL_DOWN command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_DOWN")))
 8003ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec4:	4995      	ldr	r1, [pc, #596]	; (800411c <Parsing_USB_command+0x658>)
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc f95a 	bl	8000180 <strcmp>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d119      	bne.n	8003f06 <Parsing_USB_command+0x442>
	{
		if(cmd_CAL(DAC_CAL_DOWN,atof(decoded_string_2)))
 8003ed2:	1d3b      	adds	r3, r7, #4
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f00b f91b 	bl	800f110 <atof>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f7fc fe13 	bl	8000b0c <__aeabi_d2f>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4619      	mov	r1, r3
 8003eea:	200b      	movs	r0, #11
 8003eec:	f7ff f864 	bl	8002fb8 <cmd_CAL>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <Parsing_USB_command+0x43a>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003ef6:	2003      	movs	r0, #3
 8003ef8:	f7fe fdf0 	bl	8002adc <send_answer_to_CDC>
			return;
 8003efc:	e209      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003efe:	2001      	movs	r0, #1
 8003f00:	f7fe fdec 	bl	8002adc <send_answer_to_CDC>
			return;
 8003f04:	e205      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 8003f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f0a:	4985      	ldr	r1, [pc, #532]	; (8004120 <Parsing_USB_command+0x65c>)
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc f937 	bl	8000180 <strcmp>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d118      	bne.n	8003f4a <Parsing_USB_command+0x486>
	{
		if(cmd_SWEEP_RATE(atof(decoded_string_2)))
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f00b f8f8 	bl	800f110 <atof>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	f7fc fdf0 	bl	8000b0c <__aeabi_d2f>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff f802 	bl	8002f38 <cmd_SWEEP_RATE>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <Parsing_USB_command+0x47e>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003f3a:	2003      	movs	r0, #3
 8003f3c:	f7fe fdce 	bl	8002adc <send_answer_to_CDC>
			return;
 8003f40:	e1e7      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 8003f42:	2000      	movs	r0, #0
 8003f44:	f7fe fdca 	bl	8002adc <send_answer_to_CDC>
			return;
 8003f48:	e1e3      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
	}

	// ==== SHOW command ====
	if(!(strcmp(decoded_string_1,"SHOW")))
 8003f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f4e:	4975      	ldr	r1, [pc, #468]	; (8004124 <Parsing_USB_command+0x660>)
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc f915 	bl	8000180 <strcmp>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f040 81ab 	bne.w	80042b4 <Parsing_USB_command+0x7f0>
	{
	if(!(strcmp(decoded_string_2,"INFO"))){
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	4971      	ldr	r1, [pc, #452]	; (8004128 <Parsing_USB_command+0x664>)
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc f90c 	bl	8000180 <strcmp>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f040 819e 	bne.w	80042ac <Parsing_USB_command+0x7e8>
		sprintf((char *)large_string_buffer,"\n\rDAC 0xFFFFF voltage calibration constant: %1.6E\n\r",cal_DAC_up_voltage);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8003f70:	4b6e      	ldr	r3, [pc, #440]	; (800412c <Parsing_USB_command+0x668>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc fa79 	bl	800046c <__aeabi_f2d>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	496c      	ldr	r1, [pc, #432]	; (8004130 <Parsing_USB_command+0x66c>)
 8003f80:	486c      	ldr	r0, [pc, #432]	; (8004134 <Parsing_USB_command+0x670>)
 8003f82:	f00b fd69 	bl	800fa58 <siprintf>
 8003f86:	e004      	b.n	8003f92 <Parsing_USB_command+0x4ce>
 8003f88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003f92:	4868      	ldr	r0, [pc, #416]	; (8004134 <Parsing_USB_command+0x670>)
 8003f94:	f7fc f8fe 	bl	8000194 <strlen>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4865      	ldr	r0, [pc, #404]	; (8004134 <Parsing_USB_command+0x670>)
 8003fa0:	f00a fc42 	bl	800e828 <CDC_Transmit_FS>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <Parsing_USB_command+0x4ee>
 8003faa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fae:	2bff      	cmp	r3, #255	; 0xff
 8003fb0:	d1ea      	bne.n	8003f88 <Parsing_USB_command+0x4c4>
		sprintf((char *)large_string_buffer,"DAC 0x00000 voltage calibration constant: %1.6E\n\r",cal_DAC_down_voltage);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8003fb2:	4b61      	ldr	r3, [pc, #388]	; (8004138 <Parsing_USB_command+0x674>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc fa58 	bl	800046c <__aeabi_f2d>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	495e      	ldr	r1, [pc, #376]	; (800413c <Parsing_USB_command+0x678>)
 8003fc2:	485c      	ldr	r0, [pc, #368]	; (8004134 <Parsing_USB_command+0x670>)
 8003fc4:	f00b fd48 	bl	800fa58 <siprintf>
 8003fc8:	e004      	b.n	8003fd4 <Parsing_USB_command+0x510>
 8003fca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003fd4:	4857      	ldr	r0, [pc, #348]	; (8004134 <Parsing_USB_command+0x670>)
 8003fd6:	f7fc f8dd 	bl	8000194 <strlen>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4854      	ldr	r0, [pc, #336]	; (8004134 <Parsing_USB_command+0x670>)
 8003fe2:	f00a fc21 	bl	800e828 <CDC_Transmit_FS>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <Parsing_USB_command+0x530>
 8003fec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003ff0:	2bff      	cmp	r3, #255	; 0xff
 8003ff2:	d1ea      	bne.n	8003fca <Parsing_USB_command+0x506>
		sprintf((char *)large_string_buffer,"Linearity correction A: %1.6E\n\r",corr_coeff_1);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8003ff4:	4b52      	ldr	r3, [pc, #328]	; (8004140 <Parsing_USB_command+0x67c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fc fa37 	bl	800046c <__aeabi_f2d>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4950      	ldr	r1, [pc, #320]	; (8004144 <Parsing_USB_command+0x680>)
 8004004:	484b      	ldr	r0, [pc, #300]	; (8004134 <Parsing_USB_command+0x670>)
 8004006:	f00b fd27 	bl	800fa58 <siprintf>
 800400a:	e004      	b.n	8004016 <Parsing_USB_command+0x552>
 800400c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004010:	3301      	adds	r3, #1
 8004012:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004016:	4847      	ldr	r0, [pc, #284]	; (8004134 <Parsing_USB_command+0x670>)
 8004018:	f7fc f8bc 	bl	8000194 <strlen>
 800401c:	4603      	mov	r3, r0
 800401e:	b29b      	uxth	r3, r3
 8004020:	4619      	mov	r1, r3
 8004022:	4844      	ldr	r0, [pc, #272]	; (8004134 <Parsing_USB_command+0x670>)
 8004024:	f00a fc00 	bl	800e828 <CDC_Transmit_FS>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <Parsing_USB_command+0x572>
 800402e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004032:	2bff      	cmp	r3, #255	; 0xff
 8004034:	d1ea      	bne.n	800400c <Parsing_USB_command+0x548>
		sprintf((char *)large_string_buffer,"Linearity correction B: %1.6E\n\r",corr_coeff_2);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004036:	4b44      	ldr	r3, [pc, #272]	; (8004148 <Parsing_USB_command+0x684>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fc fa16 	bl	800046c <__aeabi_f2d>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4941      	ldr	r1, [pc, #260]	; (800414c <Parsing_USB_command+0x688>)
 8004046:	483b      	ldr	r0, [pc, #236]	; (8004134 <Parsing_USB_command+0x670>)
 8004048:	f00b fd06 	bl	800fa58 <siprintf>
 800404c:	e004      	b.n	8004058 <Parsing_USB_command+0x594>
 800404e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004052:	3301      	adds	r3, #1
 8004054:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004058:	4836      	ldr	r0, [pc, #216]	; (8004134 <Parsing_USB_command+0x670>)
 800405a:	f7fc f89b 	bl	8000194 <strlen>
 800405e:	4603      	mov	r3, r0
 8004060:	b29b      	uxth	r3, r3
 8004062:	4619      	mov	r1, r3
 8004064:	4833      	ldr	r0, [pc, #204]	; (8004134 <Parsing_USB_command+0x670>)
 8004066:	f00a fbdf 	bl	800e828 <CDC_Transmit_FS>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <Parsing_USB_command+0x5b4>
 8004070:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004074:	2bff      	cmp	r3, #255	; 0xff
 8004076:	d1ea      	bne.n	800404e <Parsing_USB_command+0x58a>
		sprintf((char *)large_string_buffer,"Linearity correction C: %1.6E\n\r",corr_coeff_3);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004078:	4b35      	ldr	r3, [pc, #212]	; (8004150 <Parsing_USB_command+0x68c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7fc f9f5 	bl	800046c <__aeabi_f2d>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4933      	ldr	r1, [pc, #204]	; (8004154 <Parsing_USB_command+0x690>)
 8004088:	482a      	ldr	r0, [pc, #168]	; (8004134 <Parsing_USB_command+0x670>)
 800408a:	f00b fce5 	bl	800fa58 <siprintf>
 800408e:	e004      	b.n	800409a <Parsing_USB_command+0x5d6>
 8004090:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004094:	3301      	adds	r3, #1
 8004096:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800409a:	4826      	ldr	r0, [pc, #152]	; (8004134 <Parsing_USB_command+0x670>)
 800409c:	f7fc f87a 	bl	8000194 <strlen>
 80040a0:	4603      	mov	r3, r0
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	4619      	mov	r1, r3
 80040a6:	4823      	ldr	r0, [pc, #140]	; (8004134 <Parsing_USB_command+0x670>)
 80040a8:	f00a fbbe 	bl	800e828 <CDC_Transmit_FS>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <Parsing_USB_command+0x5f6>
 80040b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040b6:	2bff      	cmp	r3, #255	; 0xff
 80040b8:	d1ea      	bne.n	8004090 <Parsing_USB_command+0x5cc>
		sprintf((char *)large_string_buffer,"LT5400 gain X2 correction: %1.6E\n\r",gain_x2_coeff);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <Parsing_USB_command+0x694>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc f9d4 	bl	800046c <__aeabi_f2d>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4924      	ldr	r1, [pc, #144]	; (800415c <Parsing_USB_command+0x698>)
 80040ca:	481a      	ldr	r0, [pc, #104]	; (8004134 <Parsing_USB_command+0x670>)
 80040cc:	f00b fcc4 	bl	800fa58 <siprintf>
 80040d0:	e004      	b.n	80040dc <Parsing_USB_command+0x618>
 80040d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040d6:	3301      	adds	r3, #1
 80040d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80040dc:	4815      	ldr	r0, [pc, #84]	; (8004134 <Parsing_USB_command+0x670>)
 80040de:	f7fc f859 	bl	8000194 <strlen>
 80040e2:	4603      	mov	r3, r0
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	4619      	mov	r1, r3
 80040e8:	4812      	ldr	r0, [pc, #72]	; (8004134 <Parsing_USB_command+0x670>)
 80040ea:	f00a fb9d 	bl	800e828 <CDC_Transmit_FS>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <Parsing_USB_command+0x638>
 80040f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040f8:	2bff      	cmp	r3, #255	; 0xff
 80040fa:	d1ea      	bne.n	80040d2 <Parsing_USB_command+0x60e>
		sprintf((char *)large_string_buffer,"LT5400 gain X4 correction: %1.6E\n\r\n\r",gain_x4_coeff);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80040fc:	4b18      	ldr	r3, [pc, #96]	; (8004160 <Parsing_USB_command+0x69c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7fc f9b3 	bl	800046c <__aeabi_f2d>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4916      	ldr	r1, [pc, #88]	; (8004164 <Parsing_USB_command+0x6a0>)
 800410c:	4809      	ldr	r0, [pc, #36]	; (8004134 <Parsing_USB_command+0x670>)
 800410e:	f00b fca3 	bl	800fa58 <siprintf>
 8004112:	e02e      	b.n	8004172 <Parsing_USB_command+0x6ae>
 8004114:	080136f0 	.word	0x080136f0
 8004118:	080136fc 	.word	0x080136fc
 800411c:	08013708 	.word	0x08013708
 8004120:	08013718 	.word	0x08013718
 8004124:	08013724 	.word	0x08013724
 8004128:	0801372c 	.word	0x0801372c
 800412c:	20000ce4 	.word	0x20000ce4
 8004130:	08013734 	.word	0x08013734
 8004134:	20000c60 	.word	0x20000c60
 8004138:	20000ce8 	.word	0x20000ce8
 800413c:	08013768 	.word	0x08013768
 8004140:	20000af4 	.word	0x20000af4
 8004144:	0801379c 	.word	0x0801379c
 8004148:	20000af8 	.word	0x20000af8
 800414c:	080137bc 	.word	0x080137bc
 8004150:	20000afc 	.word	0x20000afc
 8004154:	080137dc 	.word	0x080137dc
 8004158:	20000b00 	.word	0x20000b00
 800415c:	080137fc 	.word	0x080137fc
 8004160:	20000b04 	.word	0x20000b04
 8004164:	08013820 	.word	0x08013820
 8004168:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800416c:	3301      	adds	r3, #1
 800416e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004172:	4869      	ldr	r0, [pc, #420]	; (8004318 <Parsing_USB_command+0x854>)
 8004174:	f7fc f80e 	bl	8000194 <strlen>
 8004178:	4603      	mov	r3, r0
 800417a:	b29b      	uxth	r3, r3
 800417c:	4619      	mov	r1, r3
 800417e:	4866      	ldr	r0, [pc, #408]	; (8004318 <Parsing_USB_command+0x854>)
 8004180:	f00a fb52 	bl	800e828 <CDC_Transmit_FS>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <Parsing_USB_command+0x6ce>
 800418a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800418e:	2bff      	cmp	r3, #255	; 0xff
 8004190:	d1ea      	bne.n	8004168 <Parsing_USB_command+0x6a4>
		sprintf((char *)large_string_buffer,"DAC code: 0x%x\n\r",(unsigned int)DAC_code);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004192:	4b62      	ldr	r3, [pc, #392]	; (800431c <Parsing_USB_command+0x858>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	4961      	ldr	r1, [pc, #388]	; (8004320 <Parsing_USB_command+0x85c>)
 800419a:	485f      	ldr	r0, [pc, #380]	; (8004318 <Parsing_USB_command+0x854>)
 800419c:	f00b fc5c 	bl	800fa58 <siprintf>
 80041a0:	e004      	b.n	80041ac <Parsing_USB_command+0x6e8>
 80041a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041a6:	3301      	adds	r3, #1
 80041a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80041ac:	485a      	ldr	r0, [pc, #360]	; (8004318 <Parsing_USB_command+0x854>)
 80041ae:	f7fb fff1 	bl	8000194 <strlen>
 80041b2:	4603      	mov	r3, r0
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	4619      	mov	r1, r3
 80041b8:	4857      	ldr	r0, [pc, #348]	; (8004318 <Parsing_USB_command+0x854>)
 80041ba:	f00a fb35 	bl	800e828 <CDC_Transmit_FS>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <Parsing_USB_command+0x708>
 80041c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041c8:	2bff      	cmp	r3, #255	; 0xff
 80041ca:	d1ea      	bne.n	80041a2 <Parsing_USB_command+0x6de>
		sprintf((char *)large_string_buffer,"CPLD control word: 0x%x\n\r",CPLD_WORD);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80041cc:	4b55      	ldr	r3, [pc, #340]	; (8004324 <Parsing_USB_command+0x860>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	4955      	ldr	r1, [pc, #340]	; (8004328 <Parsing_USB_command+0x864>)
 80041d4:	4850      	ldr	r0, [pc, #320]	; (8004318 <Parsing_USB_command+0x854>)
 80041d6:	f00b fc3f 	bl	800fa58 <siprintf>
 80041da:	e004      	b.n	80041e6 <Parsing_USB_command+0x722>
 80041dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041e0:	3301      	adds	r3, #1
 80041e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80041e6:	484c      	ldr	r0, [pc, #304]	; (8004318 <Parsing_USB_command+0x854>)
 80041e8:	f7fb ffd4 	bl	8000194 <strlen>
 80041ec:	4603      	mov	r3, r0
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	4619      	mov	r1, r3
 80041f2:	4849      	ldr	r0, [pc, #292]	; (8004318 <Parsing_USB_command+0x854>)
 80041f4:	f00a fb18 	bl	800e828 <CDC_Transmit_FS>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <Parsing_USB_command+0x742>
 80041fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004202:	2bff      	cmp	r3, #255	; 0xff
 8004204:	d1ea      	bne.n	80041dc <Parsing_USB_command+0x718>
		sprintf((char *)large_string_buffer,"Output mode: 0x%x\n\r",Current_output_status);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004206:	4b49      	ldr	r3, [pc, #292]	; (800432c <Parsing_USB_command+0x868>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	4948      	ldr	r1, [pc, #288]	; (8004330 <Parsing_USB_command+0x86c>)
 800420e:	4842      	ldr	r0, [pc, #264]	; (8004318 <Parsing_USB_command+0x854>)
 8004210:	f00b fc22 	bl	800fa58 <siprintf>
 8004214:	e004      	b.n	8004220 <Parsing_USB_command+0x75c>
 8004216:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800421a:	3301      	adds	r3, #1
 800421c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004220:	483d      	ldr	r0, [pc, #244]	; (8004318 <Parsing_USB_command+0x854>)
 8004222:	f7fb ffb7 	bl	8000194 <strlen>
 8004226:	4603      	mov	r3, r0
 8004228:	b29b      	uxth	r3, r3
 800422a:	4619      	mov	r1, r3
 800422c:	483a      	ldr	r0, [pc, #232]	; (8004318 <Parsing_USB_command+0x854>)
 800422e:	f00a fafb 	bl	800e828 <CDC_Transmit_FS>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <Parsing_USB_command+0x77c>
 8004238:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800423c:	2bff      	cmp	r3, #255	; 0xff
 800423e:	d1ea      	bne.n	8004216 <Parsing_USB_command+0x752>
		sprintf((char *)large_string_buffer,"Temperature: %2.3f°C\n\r",TMP117_get_Temperature(hi2c1)*0.0078125);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004240:	4c3c      	ldr	r4, [pc, #240]	; (8004334 <Parsing_USB_command+0x870>)
 8004242:	4668      	mov	r0, sp
 8004244:	f104 0310 	add.w	r3, r4, #16
 8004248:	2244      	movs	r2, #68	; 0x44
 800424a:	4619      	mov	r1, r3
 800424c:	f00a ff8e 	bl	800f16c <memcpy>
 8004250:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004254:	f000 fc6c 	bl	8004b30 <TMP117_get_Temperature>
 8004258:	4603      	mov	r3, r0
 800425a:	4618      	mov	r0, r3
 800425c:	f7fc f8f4 	bl	8000448 <__aeabi_i2d>
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004268:	f7fc f958 	bl	800051c <__aeabi_dmul>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4931      	ldr	r1, [pc, #196]	; (8004338 <Parsing_USB_command+0x874>)
 8004272:	4829      	ldr	r0, [pc, #164]	; (8004318 <Parsing_USB_command+0x854>)
 8004274:	f00b fbf0 	bl	800fa58 <siprintf>
 8004278:	e004      	b.n	8004284 <Parsing_USB_command+0x7c0>
 800427a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800427e:	3301      	adds	r3, #1
 8004280:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004284:	4824      	ldr	r0, [pc, #144]	; (8004318 <Parsing_USB_command+0x854>)
 8004286:	f7fb ff85 	bl	8000194 <strlen>
 800428a:	4603      	mov	r3, r0
 800428c:	b29b      	uxth	r3, r3
 800428e:	4619      	mov	r1, r3
 8004290:	4821      	ldr	r0, [pc, #132]	; (8004318 <Parsing_USB_command+0x854>)
 8004292:	f00a fac9 	bl	800e828 <CDC_Transmit_FS>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <Parsing_USB_command+0x7e0>
 800429c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80042a0:	2bff      	cmp	r3, #255	; 0xff
 80042a2:	d1ea      	bne.n	800427a <Parsing_USB_command+0x7b6>
		send_answer_to_CDC(OK_TYPE_2);
 80042a4:	2003      	movs	r0, #3
 80042a6:	f7fe fc19 	bl	8002adc <send_answer_to_CDC>
		return;
 80042aa:	e032      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 80042ac:	2000      	movs	r0, #0
 80042ae:	f7fe fc15 	bl	8002adc <send_answer_to_CDC>
			return;
 80042b2:	e02e      	b.n	8004312 <Parsing_USB_command+0x84e>




	// ==== SWEEP_DIRECTION command ====
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 80042b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b8:	4920      	ldr	r1, [pc, #128]	; (800433c <Parsing_USB_command+0x878>)
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fb ff60 	bl	8000180 <strcmp>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d121      	bne.n	800430a <Parsing_USB_command+0x846>
	{
		if(!(strcmp(decoded_string_2,"UP"))){
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	491d      	ldr	r1, [pc, #116]	; (8004340 <Parsing_USB_command+0x87c>)
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fb ff58 	bl	8000180 <strcmp>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <Parsing_USB_command+0x820>
			DAC_code_direction=1;
 80042d6:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <Parsing_USB_command+0x880>)
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]
			send_answer_to_CDC(OK_TYPE_2);
 80042dc:	2003      	movs	r0, #3
 80042de:	f7fe fbfd 	bl	8002adc <send_answer_to_CDC>
			return;
 80042e2:	e016      	b.n	8004312 <Parsing_USB_command+0x84e>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 80042e4:	1d3b      	adds	r3, r7, #4
 80042e6:	4918      	ldr	r1, [pc, #96]	; (8004348 <Parsing_USB_command+0x884>)
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fb ff49 	bl	8000180 <strcmp>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <Parsing_USB_command+0x83e>
				DAC_code_direction=0;
 80042f4:	4b13      	ldr	r3, [pc, #76]	; (8004344 <Parsing_USB_command+0x880>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
				send_answer_to_CDC(OK_TYPE_2);
 80042fa:	2003      	movs	r0, #3
 80042fc:	f7fe fbee 	bl	8002adc <send_answer_to_CDC>
				return;
 8004300:	e007      	b.n	8004312 <Parsing_USB_command+0x84e>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 8004302:	2000      	movs	r0, #0
 8004304:	f7fe fbea 	bl	8002adc <send_answer_to_CDC>
				return;
 8004308:	e003      	b.n	8004312 <Parsing_USB_command+0x84e>
			}

		}
	}

	send_answer_to_CDC(ERROR_TYPE_1);
 800430a:	2000      	movs	r0, #0
 800430c:	f7fe fbe6 	bl	8002adc <send_answer_to_CDC>
	return;
 8004310:	bf00      	nop
}
 8004312:	3754      	adds	r7, #84	; 0x54
 8004314:	46bd      	mov	sp, r7
 8004316:	bd90      	pop	{r4, r7, pc}
 8004318:	20000c60 	.word	0x20000c60
 800431c:	20000cf0 	.word	0x20000cf0
 8004320:	08013848 	.word	0x08013848
 8004324:	20000cd2 	.word	0x20000cd2
 8004328:	0801385c 	.word	0x0801385c
 800432c:	20000cec 	.word	0x20000cec
 8004330:	08013878 	.word	0x08013878
 8004334:	20000c0c 	.word	0x20000c0c
 8004338:	0801388c 	.word	0x0801388c
 800433c:	080138a4 	.word	0x080138a4
 8004340:	080138b4 	.word	0x080138b4
 8004344:	20000cf4 	.word	0x20000cf4
 8004348:	08013684 	.word	0x08013684

0800434c <Write_to_circ_buffer>:

void Write_to_circ_buffer(uint8_t Buf)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 8004356:	1dfb      	adds	r3, r7, #7
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff f9bb 	bl	80036d4 <USB_rx_command_buffer_push_refd>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <Write_to_circ_buffer+0x24>
 8004364:	4b04      	ldr	r3, [pc, #16]	; (8004378 <Write_to_circ_buffer+0x2c>)
 8004366:	2200      	movs	r2, #0
 8004368:	809a      	strh	r2, [r3, #4]
 800436a:	4b03      	ldr	r3, [pc, #12]	; (8004378 <Write_to_circ_buffer+0x2c>)
 800436c:	2200      	movs	r2, #0
 800436e:	80da      	strh	r2, [r3, #6]
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000770 	.word	0x20000770

0800437c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004380:	b672      	cpsid	i
}
 8004382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004384:	e7fe      	b.n	8004384 <Error_Handler+0x8>
	...

08004388 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800438c:	4b16      	ldr	r3, [pc, #88]	; (80043e8 <MX_SPI1_Init+0x60>)
 800438e:	4a17      	ldr	r2, [pc, #92]	; (80043ec <MX_SPI1_Init+0x64>)
 8004390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <MX_SPI1_Init+0x60>)
 8004394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <MX_SPI1_Init+0x60>)
 800439c:	2200      	movs	r2, #0
 800439e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80043a0:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <MX_SPI1_Init+0x60>)
 80043a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <MX_SPI1_Init+0x60>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <MX_SPI1_Init+0x60>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <MX_SPI1_Init+0x60>)
 80043b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <MX_SPI1_Init+0x60>)
 80043be:	2218      	movs	r2, #24
 80043c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <MX_SPI1_Init+0x60>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <MX_SPI1_Init+0x60>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <MX_SPI1_Init+0x60>)
 80043d0:	220a      	movs	r2, #10
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043d4:	4804      	ldr	r0, [pc, #16]	; (80043e8 <MX_SPI1_Init+0x60>)
 80043d6:	f004 fd15 	bl	8008e04 <HAL_SPI_Init>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 80043e0:	f7ff ffcc 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043e4:	bf00      	nop
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000cf8 	.word	0x20000cf8
 80043ec:	40013000 	.word	0x40013000

080043f0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80043f4:	4b16      	ldr	r3, [pc, #88]	; (8004450 <MX_SPI2_Init+0x60>)
 80043f6:	4a17      	ldr	r2, [pc, #92]	; (8004454 <MX_SPI2_Init+0x64>)
 80043f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <MX_SPI2_Init+0x60>)
 80043fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004400:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004402:	4b13      	ldr	r3, [pc, #76]	; (8004450 <MX_SPI2_Init+0x60>)
 8004404:	2200      	movs	r2, #0
 8004406:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004408:	4b11      	ldr	r3, [pc, #68]	; (8004450 <MX_SPI2_Init+0x60>)
 800440a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800440e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <MX_SPI2_Init+0x60>)
 8004412:	2200      	movs	r2, #0
 8004414:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004416:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <MX_SPI2_Init+0x60>)
 8004418:	2201      	movs	r2, #1
 800441a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <MX_SPI2_Init+0x60>)
 800441e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004422:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004424:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <MX_SPI2_Init+0x60>)
 8004426:	2218      	movs	r2, #24
 8004428:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800442a:	4b09      	ldr	r3, [pc, #36]	; (8004450 <MX_SPI2_Init+0x60>)
 800442c:	2200      	movs	r2, #0
 800442e:	621a      	str	r2, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <MX_SPI2_Init+0x60>)
 8004432:	2200      	movs	r2, #0
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <MX_SPI2_Init+0x60>)
 8004438:	220a      	movs	r2, #10
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800443c:	4804      	ldr	r0, [pc, #16]	; (8004450 <MX_SPI2_Init+0x60>)
 800443e:	f004 fce1 	bl	8008e04 <HAL_SPI_Init>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8004448:	f7ff ff98 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800444c:	bf00      	nop
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000d50 	.word	0x20000d50
 8004454:	40003800 	.word	0x40003800

08004458 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08c      	sub	sp, #48	; 0x30
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004460:	f107 031c 	add.w	r3, r7, #28
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a32      	ldr	r2, [pc, #200]	; (8004540 <HAL_SPI_MspInit+0xe8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d130      	bne.n	80044dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_SPI_MspInit+0xec>)
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	4a31      	ldr	r2, [pc, #196]	; (8004544 <HAL_SPI_MspInit+0xec>)
 8004480:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004484:	6213      	str	r3, [r2, #32]
 8004486:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <HAL_SPI_MspInit+0xec>)
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004492:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <HAL_SPI_MspInit+0xec>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	4a2b      	ldr	r2, [pc, #172]	; (8004544 <HAL_SPI_MspInit+0xec>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	61d3      	str	r3, [r2, #28]
 800449e:	4b29      	ldr	r3, [pc, #164]	; (8004544 <HAL_SPI_MspInit+0xec>)
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80044aa:	23e0      	movs	r3, #224	; 0xe0
 80044ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	2302      	movs	r3, #2
 80044b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b6:	2303      	movs	r3, #3
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044ba:	2305      	movs	r3, #5
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044be:	f107 031c 	add.w	r3, r7, #28
 80044c2:	4619      	mov	r1, r3
 80044c4:	4820      	ldr	r0, [pc, #128]	; (8004548 <HAL_SPI_MspInit+0xf0>)
 80044c6:	f001 f933 	bl	8005730 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80044ca:	2200      	movs	r2, #0
 80044cc:	2101      	movs	r1, #1
 80044ce:	2023      	movs	r0, #35	; 0x23
 80044d0:	f000 fd59 	bl	8004f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80044d4:	2023      	movs	r0, #35	; 0x23
 80044d6:	f000 fd72 	bl	8004fbe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80044da:	e02d      	b.n	8004538 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1a      	ldr	r2, [pc, #104]	; (800454c <HAL_SPI_MspInit+0xf4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d128      	bne.n	8004538 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044e6:	4b17      	ldr	r3, [pc, #92]	; (8004544 <HAL_SPI_MspInit+0xec>)
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	4a16      	ldr	r2, [pc, #88]	; (8004544 <HAL_SPI_MspInit+0xec>)
 80044ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044f0:	6253      	str	r3, [r2, #36]	; 0x24
 80044f2:	4b14      	ldr	r3, [pc, #80]	; (8004544 <HAL_SPI_MspInit+0xec>)
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fe:	4b11      	ldr	r3, [pc, #68]	; (8004544 <HAL_SPI_MspInit+0xec>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	4a10      	ldr	r2, [pc, #64]	; (8004544 <HAL_SPI_MspInit+0xec>)
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	61d3      	str	r3, [r2, #28]
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <HAL_SPI_MspInit+0xec>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004516:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800451a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451c:	2302      	movs	r3, #2
 800451e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	2300      	movs	r3, #0
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004524:	2303      	movs	r3, #3
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004528:	2305      	movs	r3, #5
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800452c:	f107 031c 	add.w	r3, r7, #28
 8004530:	4619      	mov	r1, r3
 8004532:	4807      	ldr	r0, [pc, #28]	; (8004550 <HAL_SPI_MspInit+0xf8>)
 8004534:	f001 f8fc 	bl	8005730 <HAL_GPIO_Init>
}
 8004538:	bf00      	nop
 800453a:	3730      	adds	r7, #48	; 0x30
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40013000 	.word	0x40013000
 8004544:	40023800 	.word	0x40023800
 8004548:	40020000 	.word	0x40020000
 800454c:	40003800 	.word	0x40003800
 8004550:	40020400 	.word	0x40020400

08004554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800455a:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <HAL_MspInit+0xa0>)
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	4a25      	ldr	r2, [pc, #148]	; (80045f4 <HAL_MspInit+0xa0>)
 8004560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004564:	6253      	str	r3, [r2, #36]	; 0x24
 8004566:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <HAL_MspInit+0xa0>)
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <HAL_MspInit+0xa0>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <HAL_MspInit+0xa0>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6213      	str	r3, [r2, #32]
 800457e:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <HAL_MspInit+0xa0>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <HAL_MspInit+0xa0>)
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_MspInit+0xa0>)
 8004590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004594:	6253      	str	r3, [r2, #36]	; 0x24
 8004596:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <HAL_MspInit+0xa0>)
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2101      	movs	r1, #1
 80045a6:	f06f 000b 	mvn.w	r0, #11
 80045aa:	f000 fcec 	bl	8004f86 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80045ae:	2200      	movs	r2, #0
 80045b0:	2101      	movs	r1, #1
 80045b2:	f06f 000a 	mvn.w	r0, #10
 80045b6:	f000 fce6 	bl	8004f86 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	2101      	movs	r1, #1
 80045be:	f06f 0009 	mvn.w	r0, #9
 80045c2:	f000 fce0 	bl	8004f86 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 80045c6:	2200      	movs	r2, #0
 80045c8:	2101      	movs	r1, #1
 80045ca:	f06f 0004 	mvn.w	r0, #4
 80045ce:	f000 fcda 	bl	8004f86 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80045d2:	2200      	movs	r2, #0
 80045d4:	2101      	movs	r1, #1
 80045d6:	f06f 0003 	mvn.w	r0, #3
 80045da:	f000 fcd4 	bl	8004f86 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80045de:	2200      	movs	r2, #0
 80045e0:	2101      	movs	r1, #1
 80045e2:	f06f 0001 	mvn.w	r0, #1
 80045e6:	f000 fcce 	bl	8004f86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800

080045f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045fc:	e7fe      	b.n	80045fc <NMI_Handler+0x4>

080045fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004602:	e7fe      	b.n	8004602 <HardFault_Handler+0x4>

08004604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004608:	e7fe      	b.n	8004608 <MemManage_Handler+0x4>

0800460a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800460e:	e7fe      	b.n	800460e <BusFault_Handler+0x4>

08004610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004614:	e7fe      	b.n	8004614 <UsageFault_Handler+0x4>

08004616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004622:	b480      	push	{r7}
 8004624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800462e:	b480      	push	{r7}
 8004630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr

0800463a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800463e:	f000 fb8d 	bl	8004d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800464c:	4802      	ldr	r0, [pc, #8]	; (8004658 <USB_LP_IRQHandler+0x10>)
 800464e:	f002 facf 	bl	8006bf0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004652:	bf00      	nop
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200014b0 	.word	0x200014b0

0800465c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encode_Push_Pin);
 8004660:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004664:	f001 fa14 	bl	8005a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004668:	f44f 7000 	mov.w	r0, #512	; 0x200
 800466c:	f001 fa10 	bl	8005a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004670:	bf00      	nop
 8004672:	bd80      	pop	{r7, pc}

08004674 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004678:	4802      	ldr	r0, [pc, #8]	; (8004684 <TIM2_IRQHandler+0x10>)
 800467a:	f005 fbfd 	bl	8009e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000dac 	.word	0x20000dac

08004688 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800468c:	4802      	ldr	r0, [pc, #8]	; (8004698 <TIM3_IRQHandler+0x10>)
 800468e:	f005 fbf3 	bl	8009e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000dec 	.word	0x20000dec

0800469c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80046a0:	4802      	ldr	r0, [pc, #8]	; (80046ac <SPI1_IRQHandler+0x10>)
 80046a2:	f005 f81b 	bl	80096dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000cf8 	.word	0x20000cf8

080046b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Start_button_Pin);
 80046b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80046b8:	f001 f9ea 	bl	8005a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80046bc:	bf00      	nop
 80046be:	bd80      	pop	{r7, pc}

080046c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
	return 1;
 80046c4:	2301      	movs	r3, #1
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <_kill>:

int _kill(int pid, int sig)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80046d8:	f00a fd1e 	bl	800f118 <__errno>
 80046dc:	4603      	mov	r3, r0
 80046de:	2216      	movs	r2, #22
 80046e0:	601a      	str	r2, [r3, #0]
	return -1;
 80046e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <_exit>:

void _exit (int status)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80046f6:	f04f 31ff 	mov.w	r1, #4294967295
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff ffe7 	bl	80046ce <_kill>
	while (1) {}		/* Make sure we hang here */
 8004700:	e7fe      	b.n	8004700 <_exit+0x12>

08004702 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e00a      	b.n	800472a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004714:	f3af 8000 	nop.w
 8004718:	4601      	mov	r1, r0
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	60ba      	str	r2, [r7, #8]
 8004720:	b2ca      	uxtb	r2, r1
 8004722:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	3301      	adds	r3, #1
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	429a      	cmp	r2, r3
 8004730:	dbf0      	blt.n	8004714 <_read+0x12>
	}

return len;
 8004732:	687b      	ldr	r3, [r7, #4]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e009      	b.n	8004762 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	60ba      	str	r2, [r7, #8]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3301      	adds	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	dbf1      	blt.n	800474e <_write+0x12>
	}
	return len;
 800476a:	687b      	ldr	r3, [r7, #4]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <_close>:

int _close(int file)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
	return -1;
 800477c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr

0800478a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800479a:	605a      	str	r2, [r3, #4]
	return 0;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <_isatty>:

int _isatty(int file)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	return 1;
 80047b0:	2301      	movs	r3, #1
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
	return 0;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047dc:	4a14      	ldr	r2, [pc, #80]	; (8004830 <_sbrk+0x5c>)
 80047de:	4b15      	ldr	r3, [pc, #84]	; (8004834 <_sbrk+0x60>)
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047e8:	4b13      	ldr	r3, [pc, #76]	; (8004838 <_sbrk+0x64>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047f0:	4b11      	ldr	r3, [pc, #68]	; (8004838 <_sbrk+0x64>)
 80047f2:	4a12      	ldr	r2, [pc, #72]	; (800483c <_sbrk+0x68>)
 80047f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <_sbrk+0x64>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	429a      	cmp	r2, r3
 8004802:	d207      	bcs.n	8004814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004804:	f00a fc88 	bl	800f118 <__errno>
 8004808:	4603      	mov	r3, r0
 800480a:	220c      	movs	r2, #12
 800480c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800480e:	f04f 33ff 	mov.w	r3, #4294967295
 8004812:	e009      	b.n	8004828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <_sbrk+0x64>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <_sbrk+0x64>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	4a05      	ldr	r2, [pc, #20]	; (8004838 <_sbrk+0x64>)
 8004824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004826:	68fb      	ldr	r3, [r7, #12]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20004000 	.word	0x20004000
 8004834:	00000c00 	.word	0x00000c00
 8004838:	20000da8 	.word	0x20000da8
 800483c:	200019d0 	.word	0x200019d0

08004840 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004844:	bf00      	nop
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004852:	f107 0308 	add.w	r3, r7, #8
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	605a      	str	r2, [r3, #4]
 800485c:	609a      	str	r2, [r3, #8]
 800485e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004860:	463b      	mov	r3, r7
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004868:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <MX_TIM2_Init+0x94>)
 800486a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800486e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 -1;
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <MX_TIM2_Init+0x94>)
 8004872:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8004876:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004878:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <MX_TIM2_Init+0x94>)
 800487a:	2200      	movs	r2, #0
 800487c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 800487e:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <MX_TIM2_Init+0x94>)
 8004880:	2231      	movs	r2, #49	; 0x31
 8004882:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004884:	4b16      	ldr	r3, [pc, #88]	; (80048e0 <MX_TIM2_Init+0x94>)
 8004886:	2200      	movs	r2, #0
 8004888:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <MX_TIM2_Init+0x94>)
 800488c:	2200      	movs	r2, #0
 800488e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004890:	4813      	ldr	r0, [pc, #76]	; (80048e0 <MX_TIM2_Init+0x94>)
 8004892:	f005 f957 	bl	8009b44 <HAL_TIM_Base_Init>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800489c:	f7ff fd6e 	bl	800437c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80048a6:	f107 0308 	add.w	r3, r7, #8
 80048aa:	4619      	mov	r1, r3
 80048ac:	480c      	ldr	r0, [pc, #48]	; (80048e0 <MX_TIM2_Init+0x94>)
 80048ae:	f005 fbbf 	bl	800a030 <HAL_TIM_ConfigClockSource>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80048b8:	f7ff fd60 	bl	800437c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048bc:	2300      	movs	r3, #0
 80048be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048c4:	463b      	mov	r3, r7
 80048c6:	4619      	mov	r1, r3
 80048c8:	4805      	ldr	r0, [pc, #20]	; (80048e0 <MX_TIM2_Init+0x94>)
 80048ca:	f005 fdb5 	bl	800a438 <HAL_TIMEx_MasterConfigSynchronization>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80048d4:	f7ff fd52 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80048d8:	bf00      	nop
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000dac 	.word	0x20000dac

080048e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048ea:	f107 0308 	add.w	r3, r7, #8
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	605a      	str	r2, [r3, #4]
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048f8:	463b      	mov	r3, r7
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004900:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <MX_TIM3_Init+0x94>)
 8004902:	4a1e      	ldr	r2, [pc, #120]	; (800497c <MX_TIM3_Init+0x98>)
 8004904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 -1;
 8004906:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <MX_TIM3_Init+0x94>)
 8004908:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800490c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <MX_TIM3_Init+0x94>)
 8004910:	2200      	movs	r2, #0
 8004912:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 -1;
 8004914:	4b18      	ldr	r3, [pc, #96]	; (8004978 <MX_TIM3_Init+0x94>)
 8004916:	f240 12f3 	movw	r2, #499	; 0x1f3
 800491a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800491c:	4b16      	ldr	r3, [pc, #88]	; (8004978 <MX_TIM3_Init+0x94>)
 800491e:	2200      	movs	r2, #0
 8004920:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <MX_TIM3_Init+0x94>)
 8004924:	2200      	movs	r2, #0
 8004926:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004928:	4813      	ldr	r0, [pc, #76]	; (8004978 <MX_TIM3_Init+0x94>)
 800492a:	f005 f90b 	bl	8009b44 <HAL_TIM_Base_Init>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004934:	f7ff fd22 	bl	800437c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800493c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	4619      	mov	r1, r3
 8004944:	480c      	ldr	r0, [pc, #48]	; (8004978 <MX_TIM3_Init+0x94>)
 8004946:	f005 fb73 	bl	800a030 <HAL_TIM_ConfigClockSource>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004950:	f7ff fd14 	bl	800437c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004954:	2300      	movs	r3, #0
 8004956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004958:	2300      	movs	r3, #0
 800495a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800495c:	463b      	mov	r3, r7
 800495e:	4619      	mov	r1, r3
 8004960:	4805      	ldr	r0, [pc, #20]	; (8004978 <MX_TIM3_Init+0x94>)
 8004962:	f005 fd69 	bl	800a438 <HAL_TIMEx_MasterConfigSynchronization>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800496c:	f7ff fd06 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004970:	bf00      	nop
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000dec 	.word	0x20000dec
 800497c:	40000400 	.word	0x40000400

08004980 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08c      	sub	sp, #48	; 0x30
 8004984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004986:	f107 030c 	add.w	r3, r7, #12
 800498a:	2224      	movs	r2, #36	; 0x24
 800498c:	2100      	movs	r1, #0
 800498e:	4618      	mov	r0, r3
 8004990:	f00a fbfa 	bl	800f188 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004994:	1d3b      	adds	r3, r7, #4
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800499c:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <MX_TIM4_Init+0xa0>)
 800499e:	4a21      	ldr	r2, [pc, #132]	; (8004a24 <MX_TIM4_Init+0xa4>)
 80049a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80049a2:	4b1f      	ldr	r3, [pc, #124]	; (8004a20 <MX_TIM4_Init+0xa0>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049a8:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <MX_TIM4_Init+0xa0>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80049ae:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <MX_TIM4_Init+0xa0>)
 80049b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049b6:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <MX_TIM4_Init+0xa0>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049bc:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <MX_TIM4_Init+0xa0>)
 80049be:	2200      	movs	r2, #0
 80049c0:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80049c2:	2301      	movs	r3, #1
 80049c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80049c6:	2300      	movs	r3, #0
 80049c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80049ca:	2301      	movs	r3, #1
 80049cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80049d6:	2302      	movs	r3, #2
 80049d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80049da:	2301      	movs	r3, #1
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80049de:	2300      	movs	r3, #0
 80049e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80049e6:	f107 030c 	add.w	r3, r7, #12
 80049ea:	4619      	mov	r1, r3
 80049ec:	480c      	ldr	r0, [pc, #48]	; (8004a20 <MX_TIM4_Init+0xa0>)
 80049ee:	f005 f93b 	bl	8009c68 <HAL_TIM_Encoder_Init>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80049f8:	f7ff fcc0 	bl	800437c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049fc:	2300      	movs	r3, #0
 80049fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004a04:	1d3b      	adds	r3, r7, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	4805      	ldr	r0, [pc, #20]	; (8004a20 <MX_TIM4_Init+0xa0>)
 8004a0a:	f005 fd15 	bl	800a438 <HAL_TIMEx_MasterConfigSynchronization>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004a14:	f7ff fcb2 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004a18:	bf00      	nop
 8004a1a:	3730      	adds	r7, #48	; 0x30
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000e2c 	.word	0x20000e2c
 8004a24:	40000800 	.word	0x40000800

08004a28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a38:	d114      	bne.n	8004a64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a3a:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_TIM_Base_MspInit+0x78>)
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	4a18      	ldr	r2, [pc, #96]	; (8004aa0 <HAL_TIM_Base_MspInit+0x78>)
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	6253      	str	r3, [r2, #36]	; 0x24
 8004a46:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <HAL_TIM_Base_MspInit+0x78>)
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004a52:	2200      	movs	r2, #0
 8004a54:	2101      	movs	r1, #1
 8004a56:	201c      	movs	r0, #28
 8004a58:	f000 fa95 	bl	8004f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004a5c:	201c      	movs	r0, #28
 8004a5e:	f000 faae 	bl	8004fbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004a62:	e018      	b.n	8004a96 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a0e      	ldr	r2, [pc, #56]	; (8004aa4 <HAL_TIM_Base_MspInit+0x7c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d113      	bne.n	8004a96 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <HAL_TIM_Base_MspInit+0x78>)
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	4a0b      	ldr	r2, [pc, #44]	; (8004aa0 <HAL_TIM_Base_MspInit+0x78>)
 8004a74:	f043 0302 	orr.w	r3, r3, #2
 8004a78:	6253      	str	r3, [r2, #36]	; 0x24
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <HAL_TIM_Base_MspInit+0x78>)
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004a86:	2200      	movs	r2, #0
 8004a88:	2101      	movs	r1, #1
 8004a8a:	201d      	movs	r0, #29
 8004a8c:	f000 fa7b 	bl	8004f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a90:	201d      	movs	r0, #29
 8004a92:	f000 fa94 	bl	8004fbe <HAL_NVIC_EnableIRQ>
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40000400 	.word	0x40000400

08004aa8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08a      	sub	sp, #40	; 0x28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a17      	ldr	r2, [pc, #92]	; (8004b24 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d127      	bne.n	8004b1a <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004aca:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <HAL_TIM_Encoder_MspInit+0x80>)
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	4a16      	ldr	r2, [pc, #88]	; (8004b28 <HAL_TIM_Encoder_MspInit+0x80>)
 8004ad0:	f043 0304 	orr.w	r3, r3, #4
 8004ad4:	6253      	str	r3, [r2, #36]	; 0x24
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <HAL_TIM_Encoder_MspInit+0x80>)
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <HAL_TIM_Encoder_MspInit+0x80>)
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <HAL_TIM_Encoder_MspInit+0x80>)
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	61d3      	str	r3, [r2, #28]
 8004aee:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <HAL_TIM_Encoder_MspInit+0x80>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004afa:	23c0      	movs	r3, #192	; 0xc0
 8004afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afe:	2302      	movs	r3, #2
 8004b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b06:	2300      	movs	r3, #0
 8004b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b0e:	f107 0314 	add.w	r3, r7, #20
 8004b12:	4619      	mov	r1, r3
 8004b14:	4805      	ldr	r0, [pc, #20]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x84>)
 8004b16:	f000 fe0b 	bl	8005730 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	3728      	adds	r7, #40	; 0x28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40020400 	.word	0x40020400

08004b30 <TMP117_get_Temperature>:
   @Description   Function gives to us ambient temperature
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  Float
 */
uint16_t TMP117_get_Temperature             (I2C_HandleTypeDef i2c)
{
 8004b30:	b084      	sub	sp, #16
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af02      	add	r7, sp, #8
 8004b38:	f107 0c10 	add.w	ip, r7, #16
 8004b3c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      int16_t tmpx=0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	80fb      	strh	r3, [r7, #6]
      buf[0]=TMP117_TemperatureRegister;
 8004b44:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <TMP117_get_Temperature+0x78>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]

//      buf[0]=TMP117_ConfigurationRegister;

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,1,100);
 8004b4a:	4b18      	ldr	r3, [pc, #96]	; (8004bac <TMP117_get_Temperature+0x7c>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b299      	uxth	r1, r3
 8004b50:	2364      	movs	r3, #100	; 0x64
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	2301      	movs	r3, #1
 8004b56:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <TMP117_get_Temperature+0x78>)
 8004b58:	f107 0010 	add.w	r0, r7, #16
 8004b5c:	f001 f8f4 	bl	8005d48 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8004b60:	2001      	movs	r0, #1
 8004b62:	f000 f917 	bl	8004d94 <HAL_Delay>
      HAL_I2C_Master_Receive(&i2c,TMP117_DeviceID,buf,2,1000);
 8004b66:	4b11      	ldr	r3, [pc, #68]	; (8004bac <TMP117_get_Temperature+0x7c>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	b299      	uxth	r1, r3
 8004b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	2302      	movs	r3, #2
 8004b74:	4a0c      	ldr	r2, [pc, #48]	; (8004ba8 <TMP117_get_Temperature+0x78>)
 8004b76:	f107 0010 	add.w	r0, r7, #16
 8004b7a:	f001 f9e3 	bl	8005f44 <HAL_I2C_Master_Receive>
      tmpx=buf[0];
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <TMP117_get_Temperature+0x78>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	80fb      	strh	r3, [r7, #6]
      tmpx<<=8;
 8004b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	80fb      	strh	r3, [r7, #6]
      tmpx|=buf[1];
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <TMP117_get_Temperature+0x78>)
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	b21a      	sxth	r2, r3
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	80fb      	strh	r3, [r7, #6]

      return tmpx;
 8004b98:	88fb      	ldrh	r3, [r7, #6]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ba4:	b004      	add	sp, #16
 8004ba6:	4770      	bx	lr
 8004ba8:	20000e6c 	.word	0x20000e6c
 8004bac:	20000788 	.word	0x20000788

08004bb0 <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second)
{
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af02      	add	r7, sp, #8
 8004bb8:	f107 0c08 	add.w	ip, r7, #8
 8004bbc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 8004bc0:	4b0f      	ldr	r3, [pc, #60]	; (8004c00 <TMP117_set_Configuration+0x50>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 8004bc6:	4a0e      	ldr	r2, [pc, #56]	; (8004c00 <TMP117_set_Configuration+0x50>)
 8004bc8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8004bcc:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 8004bce:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <TMP117_set_Configuration+0x50>)
 8004bd0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8004bd4:	7093      	strb	r3, [r2, #2]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,2,100);
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <TMP117_set_Configuration+0x54>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b299      	uxth	r1, r3
 8004bdc:	2364      	movs	r3, #100	; 0x64
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2302      	movs	r3, #2
 8004be2:	4a07      	ldr	r2, [pc, #28]	; (8004c00 <TMP117_set_Configuration+0x50>)
 8004be4:	f107 0008 	add.w	r0, r7, #8
 8004be8:	f001 f8ae 	bl	8005d48 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8004bec:	2001      	movs	r0, #1
 8004bee:	f000 f8d1 	bl	8004d94 <HAL_Delay>
}
 8004bf2:	bf00      	nop
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bfa:	b004      	add	sp, #16
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000e70 	.word	0x20000e70
 8004c04:	20000788 	.word	0x20000788

08004c08 <TMP117_Initialization>:
   @Description   Custom Parameters for Sensor
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  void
 */
void TMP117_Initialization               (I2C_HandleTypeDef i2c)
{
 8004c08:	b084      	sub	sp, #16
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b094      	sub	sp, #80	; 0x50
 8004c0e:	af14      	add	r7, sp, #80	; 0x50
 8004c10:	f107 0c08 	add.w	ip, r7, #8
 8004c14:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    TMP117_set_Configuration(i2c,0x02,0x22);
 8004c18:	2322      	movs	r3, #34	; 0x22
 8004c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	9311      	str	r3, [sp, #68]	; 0x44
 8004c20:	4668      	mov	r0, sp
 8004c22:	f107 0318 	add.w	r3, r7, #24
 8004c26:	2244      	movs	r2, #68	; 0x44
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f00a fa9f 	bl	800f16c <memcpy>
 8004c2e:	f107 0308 	add.w	r3, r7, #8
 8004c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c34:	f7ff ffbc 	bl	8004bb0 <TMP117_set_Configuration>
	HAL_Delay(2); // wait 2ms
 8004c38:	2002      	movs	r0, #2
 8004c3a:	f000 f8ab 	bl	8004d94 <HAL_Delay>
	TMP117_set_Configuration(i2c,0x03,0xA0);
 8004c3e:	23a0      	movs	r3, #160	; 0xa0
 8004c40:	9312      	str	r3, [sp, #72]	; 0x48
 8004c42:	2303      	movs	r3, #3
 8004c44:	9311      	str	r3, [sp, #68]	; 0x44
 8004c46:	4668      	mov	r0, sp
 8004c48:	f107 0318 	add.w	r3, r7, #24
 8004c4c:	2244      	movs	r2, #68	; 0x44
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f00a fa8c 	bl	800f16c <memcpy>
 8004c54:	f107 0308 	add.w	r3, r7, #8
 8004c58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c5a:	f7ff ffa9 	bl	8004bb0 <TMP117_set_Configuration>
	//TMP117_set_Configuration(i2c,0x02,0x20);
//      TMP117_set_Temperature_Offset(i2c,0x00,0x00); //Default Value
//      TMP117_set_LowLimit(i2c,0x12,0x80);           //Set 10 Celcius
//      TMP117_set_HighLimit(i2c,0x51,0x20);          //Set 40 Celcius
}
 8004c5e:	bf00      	nop
 8004c60:	46bd      	mov	sp, r7
 8004c62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c66:	b004      	add	sp, #16
 8004c68:	4770      	bx	lr
	...

08004c6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c6c:	480c      	ldr	r0, [pc, #48]	; (8004ca0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c6e:	490d      	ldr	r1, [pc, #52]	; (8004ca4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c70:	4a0d      	ldr	r2, [pc, #52]	; (8004ca8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c74:	e002      	b.n	8004c7c <LoopCopyDataInit>

08004c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c7a:	3304      	adds	r3, #4

08004c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c80:	d3f9      	bcc.n	8004c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c82:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c84:	4c0a      	ldr	r4, [pc, #40]	; (8004cb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c88:	e001      	b.n	8004c8e <LoopFillZerobss>

08004c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c8c:	3204      	adds	r2, #4

08004c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c90:	d3fb      	bcc.n	8004c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c92:	f7ff fdd5 	bl	8004840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c96:	f00a fa45 	bl	800f124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c9a:	f7fe fd3b 	bl	8003714 <main>
  bx lr
 8004c9e:	4770      	bx	lr
  ldr r0, =_sdata
 8004ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ca4:	20000ad8 	.word	0x20000ad8
  ldr r2, =_sidata
 8004ca8:	08013e20 	.word	0x08013e20
  ldr r2, =_sbss
 8004cac:	20000ad8 	.word	0x20000ad8
  ldr r4, =_ebss
 8004cb0:	200019cc 	.word	0x200019cc

08004cb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004cb4:	e7fe      	b.n	8004cb4 <ADC1_IRQHandler>

08004cb6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cc0:	2003      	movs	r0, #3
 8004cc2:	f000 f955 	bl	8004f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cc6:	200f      	movs	r0, #15
 8004cc8:	f000 f80e 	bl	8004ce8 <HAL_InitTick>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	71fb      	strb	r3, [r7, #7]
 8004cd6:	e001      	b.n	8004cdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004cd8:	f7ff fc3c 	bl	8004554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004cf4:	4b16      	ldr	r3, [pc, #88]	; (8004d50 <HAL_InitTick+0x68>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d022      	beq.n	8004d42 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <HAL_InitTick+0x6c>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <HAL_InitTick+0x68>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f962 	bl	8004fda <HAL_SYSTICK_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10f      	bne.n	8004d3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b0f      	cmp	r3, #15
 8004d20:	d809      	bhi.n	8004d36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d22:	2200      	movs	r2, #0
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2a:	f000 f92c 	bl	8004f86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d2e:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <HAL_InitTick+0x70>)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	e007      	b.n	8004d46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
 8004d3a:	e004      	b.n	8004d46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	e001      	b.n	8004d46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000790 	.word	0x20000790
 8004d54:	20000784 	.word	0x20000784
 8004d58:	2000078c 	.word	0x2000078c

08004d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_IncTick+0x1c>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_IncTick+0x20>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	4a03      	ldr	r2, [pc, #12]	; (8004d78 <HAL_IncTick+0x1c>)
 8004d6c:	6013      	str	r3, [r2, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000e74 	.word	0x20000e74
 8004d7c:	20000790 	.word	0x20000790

08004d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return uwTick;
 8004d84:	4b02      	ldr	r3, [pc, #8]	; (8004d90 <HAL_GetTick+0x10>)
 8004d86:	681b      	ldr	r3, [r3, #0]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr
 8004d90:	20000e74 	.word	0x20000e74

08004d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d9c:	f7ff fff0 	bl	8004d80 <HAL_GetTick>
 8004da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d004      	beq.n	8004db8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_Delay+0x40>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004db8:	bf00      	nop
 8004dba:	f7ff ffe1 	bl	8004d80 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d8f7      	bhi.n	8004dba <HAL_Delay+0x26>
  {
  }
}
 8004dca:	bf00      	nop
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000790 	.word	0x20000790

08004dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004de8:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <__NVIC_SetPriorityGrouping+0x44>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004df4:	4013      	ands	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e0a:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <__NVIC_SetPriorityGrouping+0x44>)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	60d3      	str	r3, [r2, #12]
}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	e000ed00 	.word	0xe000ed00

08004e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <__NVIC_GetPriorityGrouping+0x18>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	f003 0307 	and.w	r3, r3, #7
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	e000ed00 	.word	0xe000ed00

08004e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	db0b      	blt.n	8004e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	f003 021f 	and.w	r2, r3, #31
 8004e54:	4906      	ldr	r1, [pc, #24]	; (8004e70 <__NVIC_EnableIRQ+0x34>)
 8004e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr
 8004e70:	e000e100 	.word	0xe000e100

08004e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	6039      	str	r1, [r7, #0]
 8004e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	db0a      	blt.n	8004e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	490c      	ldr	r1, [pc, #48]	; (8004ec0 <__NVIC_SetPriority+0x4c>)
 8004e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e92:	0112      	lsls	r2, r2, #4
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	440b      	add	r3, r1
 8004e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e9c:	e00a      	b.n	8004eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	4908      	ldr	r1, [pc, #32]	; (8004ec4 <__NVIC_SetPriority+0x50>)
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	3b04      	subs	r3, #4
 8004eac:	0112      	lsls	r2, r2, #4
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	761a      	strb	r2, [r3, #24]
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	e000e100 	.word	0xe000e100
 8004ec4:	e000ed00 	.word	0xe000ed00

08004ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b089      	sub	sp, #36	; 0x24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f1c3 0307 	rsb	r3, r3, #7
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	bf28      	it	cs
 8004ee6:	2304      	movcs	r3, #4
 8004ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	3304      	adds	r3, #4
 8004eee:	2b06      	cmp	r3, #6
 8004ef0:	d902      	bls.n	8004ef8 <NVIC_EncodePriority+0x30>
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3b03      	subs	r3, #3
 8004ef6:	e000      	b.n	8004efa <NVIC_EncodePriority+0x32>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004efc:	f04f 32ff 	mov.w	r2, #4294967295
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43da      	mvns	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f10:	f04f 31ff 	mov.w	r1, #4294967295
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1a:	43d9      	mvns	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f20:	4313      	orrs	r3, r2
         );
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3724      	adds	r7, #36	; 0x24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr

08004f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f3c:	d301      	bcc.n	8004f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e00f      	b.n	8004f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f42:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <SysTick_Config+0x40>)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f4a:	210f      	movs	r1, #15
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	f7ff ff90 	bl	8004e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f54:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <SysTick_Config+0x40>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f5a:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <SysTick_Config+0x40>)
 8004f5c:	2207      	movs	r2, #7
 8004f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	e000e010 	.word	0xe000e010

08004f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff ff2d 	bl	8004dd8 <__NVIC_SetPriorityGrouping>
}
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b086      	sub	sp, #24
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
 8004f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f98:	f7ff ff42 	bl	8004e20 <__NVIC_GetPriorityGrouping>
 8004f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	6978      	ldr	r0, [r7, #20]
 8004fa4:	f7ff ff90 	bl	8004ec8 <NVIC_EncodePriority>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff ff5f 	bl	8004e74 <__NVIC_SetPriority>
}
 8004fb6:	bf00      	nop
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff ff35 	bl	8004e3c <__NVIC_EnableIRQ>
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ffa2 	bl	8004f2c <SysTick_Config>
 8004fe8:	4603      	mov	r3, r0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d005      	beq.n	8005016 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2204      	movs	r2, #4
 800500e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
 8005014:	e029      	b.n	800506a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 020e 	bic.w	r2, r2, #14
 8005024:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f003 021c 	and.w	r2, r3, #28
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	2101      	movs	r1, #1
 8005044:	fa01 f202 	lsl.w	r2, r1, r2
 8005048:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
    }
  }
  return status;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800507c:	f7ff fe80 	bl	8004d80 <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005082:	e010      	b.n	80050a6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d00c      	beq.n	80050a6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <FLASH_WaitForLastOperation+0x2e>
 8005092:	f7ff fe75 	bl	8004d80 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d201      	bcs.n	80050a6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e02f      	b.n	8005106 <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80050a6:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <FLASH_WaitForLastOperation+0x9c>)
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d0e8      	beq.n	8005084 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80050b2:	4b17      	ldr	r3, [pc, #92]	; (8005110 <FLASH_WaitForLastOperation+0x9c>)
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d102      	bne.n	80050c4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80050be:	4b14      	ldr	r3, [pc, #80]	; (8005110 <FLASH_WaitForLastOperation+0x9c>)
 80050c0:	2202      	movs	r2, #2
 80050c2:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80050c4:	4b12      	ldr	r3, [pc, #72]	; (8005110 <FLASH_WaitForLastOperation+0x9c>)
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d0:	d014      	beq.n	80050fc <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80050d2:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <FLASH_WaitForLastOperation+0x9c>)
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80050da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050de:	d00d      	beq.n	80050fc <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <FLASH_WaitForLastOperation+0x9c>)
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80050e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ec:	d006      	beq.n	80050fc <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80050ee:	4b08      	ldr	r3, [pc, #32]	; (8005110 <FLASH_WaitForLastOperation+0x9c>)
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 80050f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050fa:	d103      	bne.n	8005104 <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80050fc:	f000 f80a 	bl	8005114 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40023c00 	.word	0x40023c00

08005114 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800511e:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <FLASH_SetErrorCode+0xa4>)
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512a:	d109      	bne.n	8005140 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800512c:	4b23      	ldr	r3, [pc, #140]	; (80051bc <FLASH_SetErrorCode+0xa8>)
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	4a21      	ldr	r2, [pc, #132]	; (80051bc <FLASH_SetErrorCode+0xa8>)
 8005136:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <FLASH_SetErrorCode+0xa4>)
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514c:	d109      	bne.n	8005162 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800514e:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <FLASH_SetErrorCode+0xa8>)
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	4a19      	ldr	r2, [pc, #100]	; (80051bc <FLASH_SetErrorCode+0xa8>)
 8005158:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005160:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005162:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <FLASH_SetErrorCode+0xa4>)
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516e:	d109      	bne.n	8005184 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005170:	4b12      	ldr	r3, [pc, #72]	; (80051bc <FLASH_SetErrorCode+0xa8>)
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f043 0304 	orr.w	r3, r3, #4
 8005178:	4a10      	ldr	r2, [pc, #64]	; (80051bc <FLASH_SetErrorCode+0xa8>)
 800517a:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005182:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <FLASH_SetErrorCode+0xa4>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005190:	d109      	bne.n	80051a6 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8005192:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <FLASH_SetErrorCode+0xa8>)
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f043 0308 	orr.w	r3, r3, #8
 800519a:	4a08      	ldr	r2, [pc, #32]	; (80051bc <FLASH_SetErrorCode+0xa8>)
 800519c:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051a4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80051a6:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <FLASH_SetErrorCode+0xa4>)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6193      	str	r3, [r2, #24]
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40023c00 	.word	0x40023c00
 80051bc:	20000e78 	.word	0x20000e78

080051c0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80051c4:	4b09      	ldr	r3, [pc, #36]	; (80051ec <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80051d2:	4a07      	ldr	r2, [pc, #28]	; (80051f0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 80051d4:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80051d6:	4b05      	ldr	r3, [pc, #20]	; (80051ec <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80051d8:	4a06      	ldr	r2, [pc, #24]	; (80051f4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 80051da:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	e000      	b.n	80051e2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40023c00 	.word	0x40023c00
 80051f0:	89abcdef 	.word	0x89abcdef
 80051f4:	02030405 	.word	0x02030405

080051f8 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a04      	ldr	r2, [pc, #16]	; (8005214 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40023c00 	.word	0x40023c00

08005218 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005226:	f24c 3050 	movw	r0, #50000	; 0xc350
 800522a:	f7ff ff23 	bl	8005074 <FLASH_WaitForLastOperation>
 800522e:	4603      	mov	r3, r0
 8005230:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11a      	bne.n	800526e <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 800523a:	2200      	movs	r2, #0
 800523c:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d102      	bne.n	800524a <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d102      	bne.n	8005256 <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2200      	movs	r2, #0
 8005254:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005262:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005266:	f7ff ff05 	bl	8005074 <FLASH_WaitForLastOperation>
 800526a:	4603      	mov	r3, r0
 800526c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 800526e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000e78 	.word	0x20000e78

0800527c <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800528c:	4b31      	ldr	r3, [pc, #196]	; (8005354 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800528e:	7c1b      	ldrb	r3, [r3, #16]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 8005294:	2302      	movs	r3, #2
 8005296:	e058      	b.n	800534a <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 8005298:	4b2e      	ldr	r3, [pc, #184]	; (8005354 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800529a:	2201      	movs	r2, #1
 800529c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800529e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052a2:	f7ff fee7 	bl	8005074 <FLASH_WaitForLastOperation>
 80052a6:	4603      	mov	r3, r0
 80052a8:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d148      	bne.n	8005342 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80052b0:	4b28      	ldr	r3, [pc, #160]	; (8005354 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d106      	bne.n	80052ca <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	68b8      	ldr	r0, [r7, #8]
 80052c0:	f000 fa18 	bl	80056f4 <FLASH_DATAEEPROM_ProgramWord>
 80052c4:	4603      	mov	r3, r0
 80052c6:	75fb      	strb	r3, [r7, #23]
 80052c8:	e03b      	b.n	8005342 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d108      	bne.n	80052e2 <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	4619      	mov	r1, r3
 80052d6:	68b8      	ldr	r0, [r7, #8]
 80052d8:	f000 f99c 	bl	8005614 <FLASH_DATAEEPROM_ProgramHalfWord>
 80052dc:	4603      	mov	r3, r0
 80052de:	75fb      	strb	r3, [r7, #23]
 80052e0:	e02f      	b.n	8005342 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d108      	bne.n	80052fa <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	4619      	mov	r1, r3
 80052ee:	68b8      	ldr	r0, [r7, #8]
 80052f0:	f000 f934 	bl	800555c <FLASH_DATAEEPROM_ProgramByte>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]
 80052f8:	e023      	b.n	8005342 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d108      	bne.n	8005312 <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	4619      	mov	r1, r3
 8005306:	68b8      	ldr	r0, [r7, #8]
 8005308:	f000 f826 	bl	8005358 <FLASH_DATAEEPROM_FastProgramByte>
 800530c:	4603      	mov	r3, r0
 800530e:	75fb      	strb	r3, [r7, #23]
 8005310:	e017      	b.n	8005342 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d108      	bne.n	800532a <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	b29b      	uxth	r3, r3
 800531c:	4619      	mov	r1, r3
 800531e:	68b8      	ldr	r0, [r7, #8]
 8005320:	f000 f87e 	bl	8005420 <FLASH_DATAEEPROM_FastProgramHalfWord>
 8005324:	4603      	mov	r3, r0
 8005326:	75fb      	strb	r3, [r7, #23]
 8005328:	e00b      	b.n	8005342 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b10      	cmp	r3, #16
 800532e:	d106      	bne.n	800533e <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	68b8      	ldr	r0, [r7, #8]
 8005334:	f000 f8ec 	bl	8005510 <FLASH_DATAEEPROM_FastProgramWord>
 8005338:	4603      	mov	r3, r0
 800533a:	75fb      	strb	r3, [r7, #23]
 800533c:	e001      	b.n	8005342 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005342:	4b04      	ldr	r3, [pc, #16]	; (8005354 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8005344:	2200      	movs	r2, #0
 8005346:	741a      	strb	r2, [r3, #16]

  return status;
 8005348:	7dfb      	ldrb	r3, [r7, #23]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000e78 	.word	0x20000e78

08005358 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005370:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005374:	f7ff fe7e 	bl	8005074 <FLASH_WaitForLastOperation>
 8005378:	4603      	mov	r3, r0
 800537a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d145      	bne.n	800540e <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8005382:	4b25      	ldr	r3, [pc, #148]	; (8005418 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4a24      	ldr	r2, [pc, #144]	; (8005418 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8005388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800538c:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	78fa      	ldrb	r2, [r7, #3]
 8005398:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800539a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800539e:	f7ff fe69 	bl	8005074 <FLASH_WaitForLastOperation>
 80053a2:	4603      	mov	r3, r0
 80053a4:	75fb      	strb	r3, [r7, #23]
 80053a6:	e032      	b.n	800540e <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f023 0303 	bic.w	r3, r3, #3
 80053ae:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	22ff      	movs	r2, #255	; 0xff
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	43db      	mvns	r3, r3
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4013      	ands	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f023 0303 	bic.w	r3, r3, #3
 80053d6:	4619      	mov	r1, r3
 80053d8:	2002      	movs	r0, #2
 80053da:	f7ff ff1d 	bl	8005218 <HAL_FLASHEx_DATAEEPROM_Erase>
 80053de:	4603      	mov	r3, r0
 80053e0:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80053e2:	4b0e      	ldr	r3, [pc, #56]	; (800541c <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f023 0303 	bic.w	r3, r3, #3
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4619      	mov	r1, r3
 80053f2:	2010      	movs	r0, #16
 80053f4:	f7ff ff42 	bl	800527c <HAL_FLASHEx_DATAEEPROM_Program>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80053fc:	4b07      	ldr	r3, [pc, #28]	; (800541c <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80053fe:	7c1b      	ldrb	r3, [r3, #16]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 8005404:	2302      	movs	r3, #2
 8005406:	e003      	b.n	8005410 <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 8005408:	4b04      	ldr	r3, [pc, #16]	; (800541c <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 800540a:	2201      	movs	r2, #1
 800540c:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800540e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40023c00 	.word	0x40023c00
 800541c:	20000e78 	.word	0x20000e78

08005420 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005438:	f24c 3050 	movw	r0, #50000	; 0xc350
 800543c:	f7ff fe1a 	bl	8005074 <FLASH_WaitForLastOperation>
 8005440:	4603      	mov	r3, r0
 8005442:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d158      	bne.n	80054fc <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800544a:	4b2f      	ldr	r3, [pc, #188]	; (8005508 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4a2e      	ldr	r2, [pc, #184]	; (8005508 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 8005450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005454:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 8005456:	887b      	ldrh	r3, [r7, #2]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	887a      	ldrh	r2, [r7, #2]
 8005460:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005462:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005466:	f7ff fe05 	bl	8005074 <FLASH_WaitForLastOperation>
 800546a:	4603      	mov	r3, r0
 800546c:	75fb      	strb	r3, [r7, #23]
 800546e:	e045      	b.n	80054fc <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8005470:	4b26      	ldr	r3, [pc, #152]	; (800550c <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8005472:	2200      	movs	r2, #0
 8005474:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f003 0303 	and.w	r3, r3, #3
 800547c:	2b03      	cmp	r3, #3
 800547e:	d028      	beq.n	80054d2 <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	43db      	mvns	r3, r3
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4013      	ands	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f023 0303 	bic.w	r3, r3, #3
 80054b0:	4619      	mov	r1, r3
 80054b2:	2002      	movs	r0, #2
 80054b4:	f7ff feb0 	bl	8005218 <HAL_FLASHEx_DATAEEPROM_Erase>
 80054b8:	4603      	mov	r3, r0
 80054ba:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f023 0303 	bic.w	r3, r3, #3
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4619      	mov	r1, r3
 80054c6:	2010      	movs	r0, #16
 80054c8:	f7ff fed8 	bl	800527c <HAL_FLASHEx_DATAEEPROM_Program>
 80054cc:	4603      	mov	r3, r0
 80054ce:	75fb      	strb	r3, [r7, #23]
 80054d0:	e00b      	b.n	80054ea <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 80054d2:	2200      	movs	r2, #0
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	2004      	movs	r0, #4
 80054d8:	f7ff fed0 	bl	800527c <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3301      	adds	r3, #1
 80054e0:	2200      	movs	r2, #0
 80054e2:	4619      	mov	r1, r3
 80054e4:	2004      	movs	r0, #4
 80054e6:	f7ff fec9 	bl	800527c <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80054ea:	4b08      	ldr	r3, [pc, #32]	; (800550c <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 80054ec:	7c1b      	ldrb	r3, [r3, #16]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e003      	b.n	80054fe <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 80054f6:	4b05      	ldr	r3, [pc, #20]	; (800550c <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40023c00 	.word	0x40023c00
 800550c:	20000e78 	.word	0x20000e78

08005510 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800551e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005522:	f7ff fda7 	bl	8005074 <FLASH_WaitForLastOperation>
 8005526:	4603      	mov	r3, r0
 8005528:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10e      	bne.n	800554e <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a08      	ldr	r2, [pc, #32]	; (8005558 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8005536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800553a:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005542:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005546:	f7ff fd95 	bl	8005074 <FLASH_WaitForLastOperation>
 800554a:	4603      	mov	r3, r0
 800554c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40023c00 	.word	0x40023c00

0800555c <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005574:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005578:	f7ff fd7c 	bl	8005074 <FLASH_WaitForLastOperation>
 800557c:	4603      	mov	r3, r0
 800557e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d13f      	bne.n	8005606 <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d009      	beq.n	80055a0 <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	78fa      	ldrb	r2, [r7, #3]
 8005590:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005592:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005596:	f7ff fd6d 	bl	8005074 <FLASH_WaitForLastOperation>
 800559a:	4603      	mov	r3, r0
 800559c:	75fb      	strb	r3, [r7, #23]
 800559e:	e032      	b.n	8005606 <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	22ff      	movs	r2, #255	; 0xff
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	43db      	mvns	r3, r3
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4013      	ands	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f023 0303 	bic.w	r3, r3, #3
 80055ce:	4619      	mov	r1, r3
 80055d0:	2002      	movs	r0, #2
 80055d2:	f7ff fe21 	bl	8005218 <HAL_FLASHEx_DATAEEPROM_Erase>
 80055d6:	4603      	mov	r3, r0
 80055d8:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 80055dc:	2200      	movs	r2, #0
 80055de:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f023 0303 	bic.w	r3, r3, #3
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4619      	mov	r1, r3
 80055ea:	2010      	movs	r0, #16
 80055ec:	f7ff fe46 	bl	800527c <HAL_FLASHEx_DATAEEPROM_Program>
 80055f0:	4603      	mov	r3, r0
 80055f2:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 80055f6:	7c1b      	ldrb	r3, [r3, #16]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <FLASH_DATAEEPROM_ProgramByte+0xa4>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e003      	b.n	8005608 <FLASH_DATAEEPROM_ProgramByte+0xac>
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8005602:	2201      	movs	r2, #1
 8005604:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005606:	7dfb      	ldrb	r3, [r7, #23]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20000e78 	.word	0x20000e78

08005614 <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800562c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005630:	f7ff fd20 	bl	8005074 <FLASH_WaitForLastOperation>
 8005634:	4603      	mov	r3, r0
 8005636:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005638:	7dfb      	ldrb	r3, [r7, #23]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d152      	bne.n	80056e4 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 800563e:	887b      	ldrh	r3, [r7, #2]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d009      	beq.n	8005658 <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	887a      	ldrh	r2, [r7, #2]
 8005648:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800564a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800564e:	f7ff fd11 	bl	8005074 <FLASH_WaitForLastOperation>
 8005652:	4603      	mov	r3, r0
 8005654:	75fb      	strb	r3, [r7, #23]
 8005656:	e045      	b.n	80056e4 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8005658:	4b25      	ldr	r3, [pc, #148]	; (80056f0 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 800565a:	2200      	movs	r2, #0
 800565c:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	2b03      	cmp	r3, #3
 8005666:	d028      	beq.n	80056ba <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	43db      	mvns	r3, r3
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4013      	ands	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f023 0303 	bic.w	r3, r3, #3
 8005698:	4619      	mov	r1, r3
 800569a:	2002      	movs	r0, #2
 800569c:	f7ff fdbc 	bl	8005218 <HAL_FLASHEx_DATAEEPROM_Erase>
 80056a0:	4603      	mov	r3, r0
 80056a2:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4619      	mov	r1, r3
 80056ae:	2010      	movs	r0, #16
 80056b0:	f7ff fde4 	bl	800527c <HAL_FLASHEx_DATAEEPROM_Program>
 80056b4:	4603      	mov	r3, r0
 80056b6:	75fb      	strb	r3, [r7, #23]
 80056b8:	e00b      	b.n	80056d2 <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 80056ba:	2200      	movs	r2, #0
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	2004      	movs	r0, #4
 80056c0:	f7ff fddc 	bl	800527c <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3301      	adds	r3, #1
 80056c8:	2200      	movs	r2, #0
 80056ca:	4619      	mov	r1, r3
 80056cc:	2004      	movs	r0, #4
 80056ce:	f7ff fdd5 	bl	800527c <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 80056d4:	7c1b      	ldrb	r3, [r3, #16]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 80056da:	2302      	movs	r3, #2
 80056dc:	e003      	b.n	80056e6 <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000e78 	.word	0x20000e78

080056f4 <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005702:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005706:	f7ff fcb5 	bl	8005074 <FLASH_WaitForLastOperation>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d108      	bne.n	8005726 <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800571a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800571e:	f7ff fca9 	bl	8005074 <FLASH_WaitForLastOperation>
 8005722:	4603      	mov	r3, r0
 8005724:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8005726:	7bfb      	ldrb	r3, [r7, #15]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005746:	e154      	b.n	80059f2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	2101      	movs	r1, #1
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	fa01 f303 	lsl.w	r3, r1, r3
 8005754:	4013      	ands	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8146 	beq.w	80059ec <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f003 0303 	and.w	r3, r3, #3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d005      	beq.n	8005778 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005774:	2b02      	cmp	r3, #2
 8005776:	d130      	bne.n	80057da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2203      	movs	r2, #3
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4013      	ands	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80057ae:	2201      	movs	r2, #1
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4013      	ands	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	f003 0201 	and.w	r2, r3, #1
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d017      	beq.n	8005816 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	2203      	movs	r2, #3
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4013      	ands	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d123      	bne.n	800586a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	08da      	lsrs	r2, r3, #3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3208      	adds	r2, #8
 800582a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	220f      	movs	r2, #15
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4013      	ands	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	08da      	lsrs	r2, r3, #3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3208      	adds	r2, #8
 8005864:	6939      	ldr	r1, [r7, #16]
 8005866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	2203      	movs	r2, #3
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43db      	mvns	r3, r3
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4013      	ands	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f003 0203 	and.w	r2, r3, #3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80a0 	beq.w	80059ec <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ac:	4b58      	ldr	r3, [pc, #352]	; (8005a10 <HAL_GPIO_Init+0x2e0>)
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	4a57      	ldr	r2, [pc, #348]	; (8005a10 <HAL_GPIO_Init+0x2e0>)
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	6213      	str	r3, [r2, #32]
 80058b8:	4b55      	ldr	r3, [pc, #340]	; (8005a10 <HAL_GPIO_Init+0x2e0>)
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80058c4:	4a53      	ldr	r2, [pc, #332]	; (8005a14 <HAL_GPIO_Init+0x2e4>)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	089b      	lsrs	r3, r3, #2
 80058ca:	3302      	adds	r3, #2
 80058cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	220f      	movs	r2, #15
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4013      	ands	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a4b      	ldr	r2, [pc, #300]	; (8005a18 <HAL_GPIO_Init+0x2e8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d019      	beq.n	8005924 <HAL_GPIO_Init+0x1f4>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a4a      	ldr	r2, [pc, #296]	; (8005a1c <HAL_GPIO_Init+0x2ec>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <HAL_GPIO_Init+0x1f0>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a49      	ldr	r2, [pc, #292]	; (8005a20 <HAL_GPIO_Init+0x2f0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00d      	beq.n	800591c <HAL_GPIO_Init+0x1ec>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a48      	ldr	r2, [pc, #288]	; (8005a24 <HAL_GPIO_Init+0x2f4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d007      	beq.n	8005918 <HAL_GPIO_Init+0x1e8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a47      	ldr	r2, [pc, #284]	; (8005a28 <HAL_GPIO_Init+0x2f8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d101      	bne.n	8005914 <HAL_GPIO_Init+0x1e4>
 8005910:	2304      	movs	r3, #4
 8005912:	e008      	b.n	8005926 <HAL_GPIO_Init+0x1f6>
 8005914:	2305      	movs	r3, #5
 8005916:	e006      	b.n	8005926 <HAL_GPIO_Init+0x1f6>
 8005918:	2303      	movs	r3, #3
 800591a:	e004      	b.n	8005926 <HAL_GPIO_Init+0x1f6>
 800591c:	2302      	movs	r3, #2
 800591e:	e002      	b.n	8005926 <HAL_GPIO_Init+0x1f6>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <HAL_GPIO_Init+0x1f6>
 8005924:	2300      	movs	r3, #0
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	f002 0203 	and.w	r2, r2, #3
 800592c:	0092      	lsls	r2, r2, #2
 800592e:	4093      	lsls	r3, r2
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005936:	4937      	ldr	r1, [pc, #220]	; (8005a14 <HAL_GPIO_Init+0x2e4>)
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	089b      	lsrs	r3, r3, #2
 800593c:	3302      	adds	r3, #2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005944:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <HAL_GPIO_Init+0x2fc>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	43db      	mvns	r3, r3
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4013      	ands	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005968:	4a30      	ldr	r2, [pc, #192]	; (8005a2c <HAL_GPIO_Init+0x2fc>)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800596e:	4b2f      	ldr	r3, [pc, #188]	; (8005a2c <HAL_GPIO_Init+0x2fc>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	43db      	mvns	r3, r3
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4013      	ands	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005992:	4a26      	ldr	r2, [pc, #152]	; (8005a2c <HAL_GPIO_Init+0x2fc>)
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005998:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <HAL_GPIO_Init+0x2fc>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4013      	ands	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80059bc:	4a1b      	ldr	r2, [pc, #108]	; (8005a2c <HAL_GPIO_Init+0x2fc>)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059c2:	4b1a      	ldr	r3, [pc, #104]	; (8005a2c <HAL_GPIO_Init+0x2fc>)
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	43db      	mvns	r3, r3
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4013      	ands	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80059e6:	4a11      	ldr	r2, [pc, #68]	; (8005a2c <HAL_GPIO_Init+0x2fc>)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	3301      	adds	r3, #1
 80059f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f47f aea3 	bne.w	8005748 <HAL_GPIO_Init+0x18>
  }
}
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40023800 	.word	0x40023800
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40020000 	.word	0x40020000
 8005a1c:	40020400 	.word	0x40020400
 8005a20:	40020800 	.word	0x40020800
 8005a24:	40020c00 	.word	0x40020c00
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	40010400 	.word	0x40010400

08005a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	887b      	ldrh	r3, [r7, #2]
 8005a42:	4013      	ands	r3, r2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
 8005a4c:	e001      	b.n	8005a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr

08005a5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	460b      	mov	r3, r1
 8005a68:	807b      	strh	r3, [r7, #2]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a6e:	787b      	ldrb	r3, [r7, #1]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a74:	887a      	ldrh	r2, [r7, #2]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8005a7a:	e003      	b.n	8005a84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8005a7c:	887b      	ldrh	r3, [r7, #2]
 8005a7e:	041a      	lsls	r2, r3, #16
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	619a      	str	r2, [r3, #24]
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
	...

08005a90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a9a:	4b08      	ldr	r3, [pc, #32]	; (8005abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d006      	beq.n	8005ab4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005aa6:	4a05      	ldr	r2, [pc, #20]	; (8005abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fd ff7e 	bl	80039b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40010400 	.word	0x40010400

08005ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e12b      	b.n	8005d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fd fdb0 	bl	800364c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2224      	movs	r2, #36	; 0x24
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b24:	f003 f8fa 	bl	8008d1c <HAL_RCC_GetPCLK1Freq>
 8005b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	4a81      	ldr	r2, [pc, #516]	; (8005d34 <HAL_I2C_Init+0x274>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d807      	bhi.n	8005b44 <HAL_I2C_Init+0x84>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4a80      	ldr	r2, [pc, #512]	; (8005d38 <HAL_I2C_Init+0x278>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	bf94      	ite	ls
 8005b3c:	2301      	movls	r3, #1
 8005b3e:	2300      	movhi	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	e006      	b.n	8005b52 <HAL_I2C_Init+0x92>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a7d      	ldr	r2, [pc, #500]	; (8005d3c <HAL_I2C_Init+0x27c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	bf94      	ite	ls
 8005b4c:	2301      	movls	r3, #1
 8005b4e:	2300      	movhi	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e0e7      	b.n	8005d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4a78      	ldr	r2, [pc, #480]	; (8005d40 <HAL_I2C_Init+0x280>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	0c9b      	lsrs	r3, r3, #18
 8005b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	4a6a      	ldr	r2, [pc, #424]	; (8005d34 <HAL_I2C_Init+0x274>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d802      	bhi.n	8005b94 <HAL_I2C_Init+0xd4>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	3301      	adds	r3, #1
 8005b92:	e009      	b.n	8005ba8 <HAL_I2C_Init+0xe8>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b9a:	fb02 f303 	mul.w	r3, r2, r3
 8005b9e:	4a69      	ldr	r2, [pc, #420]	; (8005d44 <HAL_I2C_Init+0x284>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	099b      	lsrs	r3, r3, #6
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	430b      	orrs	r3, r1
 8005bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	495c      	ldr	r1, [pc, #368]	; (8005d34 <HAL_I2C_Init+0x274>)
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	d819      	bhi.n	8005bfc <HAL_I2C_Init+0x13c>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	1e59      	subs	r1, r3, #1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bd6:	1c59      	adds	r1, r3, #1
 8005bd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bdc:	400b      	ands	r3, r1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_I2C_Init+0x138>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1e59      	subs	r1, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf6:	e051      	b.n	8005c9c <HAL_I2C_Init+0x1dc>
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	e04f      	b.n	8005c9c <HAL_I2C_Init+0x1dc>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d111      	bne.n	8005c28 <HAL_I2C_Init+0x168>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	1e58      	subs	r0, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6859      	ldr	r1, [r3, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	440b      	add	r3, r1
 8005c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c16:	3301      	adds	r3, #1
 8005c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	e012      	b.n	8005c4e <HAL_I2C_Init+0x18e>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1e58      	subs	r0, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6859      	ldr	r1, [r3, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	0099      	lsls	r1, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c3e:	3301      	adds	r3, #1
 8005c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bf0c      	ite	eq
 8005c48:	2301      	moveq	r3, #1
 8005c4a:	2300      	movne	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_I2C_Init+0x196>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e022      	b.n	8005c9c <HAL_I2C_Init+0x1dc>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10e      	bne.n	8005c7c <HAL_I2C_Init+0x1bc>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	1e58      	subs	r0, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6859      	ldr	r1, [r3, #4]
 8005c66:	460b      	mov	r3, r1
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	440b      	add	r3, r1
 8005c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c70:	3301      	adds	r3, #1
 8005c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7a:	e00f      	b.n	8005c9c <HAL_I2C_Init+0x1dc>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	1e58      	subs	r0, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6859      	ldr	r1, [r3, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	0099      	lsls	r1, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c92:	3301      	adds	r3, #1
 8005c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	6809      	ldr	r1, [r1, #0]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69da      	ldr	r2, [r3, #28]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005cca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6911      	ldr	r1, [r2, #16]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	68d2      	ldr	r2, [r2, #12]
 8005cd6:	4311      	orrs	r1, r2
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695a      	ldr	r2, [r3, #20]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	000186a0 	.word	0x000186a0
 8005d38:	001e847f 	.word	0x001e847f
 8005d3c:	003d08ff 	.word	0x003d08ff
 8005d40:	431bde83 	.word	0x431bde83
 8005d44:	10624dd3 	.word	0x10624dd3

08005d48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	461a      	mov	r2, r3
 8005d54:	460b      	mov	r3, r1
 8005d56:	817b      	strh	r3, [r7, #10]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d5c:	f7ff f810 	bl	8004d80 <HAL_GetTick>
 8005d60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	f040 80e0 	bne.w	8005f30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	2319      	movs	r3, #25
 8005d76:	2201      	movs	r2, #1
 8005d78:	4970      	ldr	r1, [pc, #448]	; (8005f3c <HAL_I2C_Master_Transmit+0x1f4>)
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 fc58 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d86:	2302      	movs	r3, #2
 8005d88:	e0d3      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_I2C_Master_Transmit+0x50>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e0cc      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1ea>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d007      	beq.n	8005dbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0201 	orr.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2221      	movs	r2, #33	; 0x21
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2210      	movs	r2, #16
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	893a      	ldrh	r2, [r7, #8]
 8005dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a50      	ldr	r2, [pc, #320]	; (8005f40 <HAL_I2C_Master_Transmit+0x1f8>)
 8005dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e00:	8979      	ldrh	r1, [r7, #10]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	6a3a      	ldr	r2, [r7, #32]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fac2 	bl	8006390 <I2C_MasterRequestWrite>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e08d      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e16:	2300      	movs	r3, #0
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e2c:	e066      	b.n	8005efc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	6a39      	ldr	r1, [r7, #32]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fcd2 	bl	80067dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00d      	beq.n	8005e5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d107      	bne.n	8005e56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e06b      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	781a      	ldrb	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d11b      	bne.n	8005ed0 <HAL_I2C_Master_Transmit+0x188>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d017      	beq.n	8005ed0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	781a      	ldrb	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	6a39      	ldr	r1, [r7, #32]
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fcc2 	bl	800685e <I2C_WaitOnBTFFlagUntilTimeout>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00d      	beq.n	8005efc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d107      	bne.n	8005ef8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e01a      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d194      	bne.n	8005e2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e000      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
  }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	00100002 	.word	0x00100002
 8005f40:	ffff0000 	.word	0xffff0000

08005f44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08c      	sub	sp, #48	; 0x30
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	460b      	mov	r3, r1
 8005f52:	817b      	strh	r3, [r7, #10]
 8005f54:	4613      	mov	r3, r2
 8005f56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f58:	f7fe ff12 	bl	8004d80 <HAL_GetTick>
 8005f5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	f040 820b 	bne.w	8006382 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2319      	movs	r3, #25
 8005f72:	2201      	movs	r2, #1
 8005f74:	497c      	ldr	r1, [pc, #496]	; (8006168 <HAL_I2C_Master_Receive+0x224>)
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fb5a 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005f82:	2302      	movs	r3, #2
 8005f84:	e1fe      	b.n	8006384 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_I2C_Master_Receive+0x50>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e1f7      	b.n	8006384 <HAL_I2C_Master_Receive+0x440>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d007      	beq.n	8005fba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0201 	orr.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2222      	movs	r2, #34	; 0x22
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2210      	movs	r2, #16
 8005fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	893a      	ldrh	r2, [r7, #8]
 8005fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a5c      	ldr	r2, [pc, #368]	; (800616c <HAL_I2C_Master_Receive+0x228>)
 8005ffa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ffc:	8979      	ldrh	r1, [r7, #10]
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 fa46 	bl	8006494 <I2C_MasterRequestRead>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e1b8      	b.n	8006384 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006016:	2b00      	cmp	r3, #0
 8006018:	d113      	bne.n	8006042 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800601a:	2300      	movs	r3, #0
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	623b      	str	r3, [r7, #32]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	623b      	str	r3, [r7, #32]
 800602e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e18c      	b.n	800635c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006046:	2b01      	cmp	r3, #1
 8006048:	d11b      	bne.n	8006082 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006058:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e16c      	b.n	800635c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006086:	2b02      	cmp	r3, #2
 8006088:	d11b      	bne.n	80060c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006098:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	e14c      	b.n	800635c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060e8:	e138      	b.n	800635c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	f200 80f1 	bhi.w	80062d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d123      	bne.n	8006144 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 fbed 	bl	80068e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e139      	b.n	8006384 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006142:	e10b      	b.n	800635c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006148:	2b02      	cmp	r3, #2
 800614a:	d14e      	bne.n	80061ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	2200      	movs	r2, #0
 8006154:	4906      	ldr	r1, [pc, #24]	; (8006170 <HAL_I2C_Master_Receive+0x22c>)
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fa6a 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d008      	beq.n	8006174 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e10e      	b.n	8006384 <HAL_I2C_Master_Receive+0x440>
 8006166:	bf00      	nop
 8006168:	00100002 	.word	0x00100002
 800616c:	ffff0000 	.word	0xffff0000
 8006170:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	3b01      	subs	r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061e8:	e0b8      	b.n	800635c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	2200      	movs	r2, #0
 80061f2:	4966      	ldr	r1, [pc, #408]	; (800638c <HAL_I2C_Master_Receive+0x448>)
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fa1b 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0bf      	b.n	8006384 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006212:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	2200      	movs	r2, #0
 800624e:	494f      	ldr	r1, [pc, #316]	; (800638c <HAL_I2C_Master_Receive+0x448>)
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f9ed 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e091      	b.n	8006384 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800626e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062d4:	e042      	b.n	800635c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fb00 	bl	80068e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e04c      	b.n	8006384 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006306:	3b01      	subs	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b04      	cmp	r3, #4
 8006328:	d118      	bne.n	800635c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006360:	2b00      	cmp	r3, #0
 8006362:	f47f aec2 	bne.w	80060ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	e000      	b.n	8006384 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006382:	2302      	movs	r3, #2
  }
}
 8006384:	4618      	mov	r0, r3
 8006386:	3728      	adds	r7, #40	; 0x28
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	00010004 	.word	0x00010004

08006390 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af02      	add	r7, sp, #8
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	607a      	str	r2, [r7, #4]
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	460b      	mov	r3, r1
 800639e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d006      	beq.n	80063ba <I2C_MasterRequestWrite+0x2a>
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d003      	beq.n	80063ba <I2C_MasterRequestWrite+0x2a>
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063b8:	d108      	bne.n	80063cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e00b      	b.n	80063e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	2b12      	cmp	r3, #18
 80063d2:	d107      	bne.n	80063e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f91d 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00d      	beq.n	8006418 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640a:	d103      	bne.n	8006414 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e035      	b.n	8006484 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006420:	d108      	bne.n	8006434 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006422:	897b      	ldrh	r3, [r7, #10]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006430:	611a      	str	r2, [r3, #16]
 8006432:	e01b      	b.n	800646c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006434:	897b      	ldrh	r3, [r7, #10]
 8006436:	11db      	asrs	r3, r3, #7
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f003 0306 	and.w	r3, r3, #6
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f063 030f 	orn	r3, r3, #15
 8006444:	b2da      	uxtb	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	490e      	ldr	r1, [pc, #56]	; (800648c <I2C_MasterRequestWrite+0xfc>)
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f943 	bl	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e010      	b.n	8006484 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006462:	897b      	ldrh	r3, [r7, #10]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	4907      	ldr	r1, [pc, #28]	; (8006490 <I2C_MasterRequestWrite+0x100>)
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f933 	bl	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	00010008 	.word	0x00010008
 8006490:	00010002 	.word	0x00010002

08006494 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	460b      	mov	r3, r1
 80064a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d006      	beq.n	80064ce <I2C_MasterRequestRead+0x3a>
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d003      	beq.n	80064ce <I2C_MasterRequestRead+0x3a>
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064cc:	d108      	bne.n	80064e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e00b      	b.n	80064f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	2b11      	cmp	r3, #17
 80064e6:	d107      	bne.n	80064f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f893 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00d      	beq.n	800652c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651e:	d103      	bne.n	8006528 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e079      	b.n	8006620 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006534:	d108      	bne.n	8006548 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006536:	897b      	ldrh	r3, [r7, #10]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	b2da      	uxtb	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	611a      	str	r2, [r3, #16]
 8006546:	e05f      	b.n	8006608 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006548:	897b      	ldrh	r3, [r7, #10]
 800654a:	11db      	asrs	r3, r3, #7
 800654c:	b2db      	uxtb	r3, r3
 800654e:	f003 0306 	and.w	r3, r3, #6
 8006552:	b2db      	uxtb	r3, r3
 8006554:	f063 030f 	orn	r3, r3, #15
 8006558:	b2da      	uxtb	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	4930      	ldr	r1, [pc, #192]	; (8006628 <I2C_MasterRequestRead+0x194>)
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 f8b9 	bl	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e054      	b.n	8006620 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006576:	897b      	ldrh	r3, [r7, #10]
 8006578:	b2da      	uxtb	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4929      	ldr	r1, [pc, #164]	; (800662c <I2C_MasterRequestRead+0x198>)
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 f8a9 	bl	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e044      	b.n	8006620 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f831 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00d      	beq.n	80065f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e2:	d103      	bne.n	80065ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e017      	b.n	8006620 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80065f0:	897b      	ldrh	r3, [r7, #10]
 80065f2:	11db      	asrs	r3, r3, #7
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f003 0306 	and.w	r3, r3, #6
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	f063 030e 	orn	r3, r3, #14
 8006600:	b2da      	uxtb	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	4907      	ldr	r1, [pc, #28]	; (800662c <I2C_MasterRequestRead+0x198>)
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 f865 	bl	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	00010008 	.word	0x00010008
 800662c:	00010002 	.word	0x00010002

08006630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	4613      	mov	r3, r2
 800663e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006640:	e025      	b.n	800668e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d021      	beq.n	800668e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800664a:	f7fe fb99 	bl	8004d80 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d302      	bcc.n	8006660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d116      	bne.n	800668e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	f043 0220 	orr.w	r2, r3, #32
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e023      	b.n	80066d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	0c1b      	lsrs	r3, r3, #16
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b01      	cmp	r3, #1
 8006696:	d10d      	bne.n	80066b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	43da      	mvns	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4013      	ands	r3, r2
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bf0c      	ite	eq
 80066aa:	2301      	moveq	r3, #1
 80066ac:	2300      	movne	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	e00c      	b.n	80066ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	43da      	mvns	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4013      	ands	r3, r2
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	bf0c      	ite	eq
 80066c6:	2301      	moveq	r3, #1
 80066c8:	2300      	movne	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d0b6      	beq.n	8006642 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066ec:	e051      	b.n	8006792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fc:	d123      	bne.n	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800670c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006716:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f043 0204 	orr.w	r2, r3, #4
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e046      	b.n	80067d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d021      	beq.n	8006792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674e:	f7fe fb17 	bl	8004d80 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	429a      	cmp	r2, r3
 800675c:	d302      	bcc.n	8006764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d116      	bne.n	8006792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	f043 0220 	orr.w	r2, r3, #32
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e020      	b.n	80067d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	d10c      	bne.n	80067b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	43da      	mvns	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4013      	ands	r3, r2
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bf14      	ite	ne
 80067ae:	2301      	movne	r3, #1
 80067b0:	2300      	moveq	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	e00b      	b.n	80067ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	43da      	mvns	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4013      	ands	r3, r2
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bf14      	ite	ne
 80067c8:	2301      	movne	r3, #1
 80067ca:	2300      	moveq	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d18d      	bne.n	80066ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067e8:	e02d      	b.n	8006846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f8ce 	bl	800698c <I2C_IsAcknowledgeFailed>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e02d      	b.n	8006856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d021      	beq.n	8006846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006802:	f7fe fabd 	bl	8004d80 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	429a      	cmp	r2, r3
 8006810:	d302      	bcc.n	8006818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d116      	bne.n	8006846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2220      	movs	r2, #32
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	f043 0220 	orr.w	r2, r3, #32
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e007      	b.n	8006856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006850:	2b80      	cmp	r3, #128	; 0x80
 8006852:	d1ca      	bne.n	80067ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800686a:	e02d      	b.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f88d 	bl	800698c <I2C_IsAcknowledgeFailed>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e02d      	b.n	80068d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	d021      	beq.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006884:	f7fe fa7c 	bl	8004d80 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	429a      	cmp	r2, r3
 8006892:	d302      	bcc.n	800689a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d116      	bne.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	f043 0220 	orr.w	r2, r3, #32
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e007      	b.n	80068d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d1ca      	bne.n	800686c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068ec:	e042      	b.n	8006974 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d119      	bne.n	8006930 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0210 	mvn.w	r2, #16
 8006904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e029      	b.n	8006984 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006930:	f7fe fa26 	bl	8004d80 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	429a      	cmp	r2, r3
 800693e:	d302      	bcc.n	8006946 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d116      	bne.n	8006974 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	f043 0220 	orr.w	r2, r3, #32
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e007      	b.n	8006984 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d1b5      	bne.n	80068ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800699e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a2:	d11b      	bne.n	80069dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f043 0204 	orr.w	r2, r3, #4
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80069e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ea:	b08b      	sub	sp, #44	; 0x2c
 80069ec:	af06      	add	r7, sp, #24
 80069ee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e0d0      	b.n	8006b9c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d106      	bne.n	8006a14 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f008 f85c 	bl	800eacc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2203      	movs	r2, #3
 8006a18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f003 fd7d 	bl	800a520 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
 8006a2a:	e04c      	b.n	8006ac6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	440b      	add	r3, r1
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	2201      	movs	r2, #1
 8006a40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	440b      	add	r3, r1
 8006a52:	7bfa      	ldrb	r2, [r7, #15]
 8006a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006a56:	7bfa      	ldrb	r2, [r7, #15]
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	b298      	uxth	r0, r3
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	440b      	add	r3, r1
 8006a68:	3336      	adds	r3, #54	; 0x36
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	440b      	add	r3, r1
 8006a7e:	3303      	adds	r3, #3
 8006a80:	2200      	movs	r2, #0
 8006a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006a84:	7bfa      	ldrb	r2, [r7, #15]
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	440b      	add	r3, r1
 8006a92:	3338      	adds	r3, #56	; 0x38
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a98:	7bfa      	ldrb	r2, [r7, #15]
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	440b      	add	r3, r1
 8006aa6:	333c      	adds	r3, #60	; 0x3c
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006aac:	7bfa      	ldrb	r2, [r7, #15]
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	440b      	add	r3, r1
 8006aba:	3340      	adds	r3, #64	; 0x40
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	73fb      	strb	r3, [r7, #15]
 8006ac6:	7bfa      	ldrb	r2, [r7, #15]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d3ad      	bcc.n	8006a2c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	73fb      	strb	r3, [r7, #15]
 8006ad4:	e044      	b.n	8006b60 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ad6:	7bfa      	ldrb	r2, [r7, #15]
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	440b      	add	r3, r1
 8006ae4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006ae8:	2200      	movs	r2, #0
 8006aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006aec:	7bfa      	ldrb	r2, [r7, #15]
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	440b      	add	r3, r1
 8006afa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006afe:	7bfa      	ldrb	r2, [r7, #15]
 8006b00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006b02:	7bfa      	ldrb	r2, [r7, #15]
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	440b      	add	r3, r1
 8006b10:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006b14:	2200      	movs	r2, #0
 8006b16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006b18:	7bfa      	ldrb	r2, [r7, #15]
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	440b      	add	r3, r1
 8006b26:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006b2e:	7bfa      	ldrb	r2, [r7, #15]
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	00db      	lsls	r3, r3, #3
 8006b3a:	440b      	add	r3, r1
 8006b3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006b44:	7bfa      	ldrb	r2, [r7, #15]
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	440b      	add	r3, r1
 8006b52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	73fb      	strb	r3, [r7, #15]
 8006b60:	7bfa      	ldrb	r2, [r7, #15]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d3b5      	bcc.n	8006ad6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	687e      	ldr	r6, [r7, #4]
 8006b72:	466d      	mov	r5, sp
 8006b74:	f106 0410 	add.w	r4, r6, #16
 8006b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	602b      	str	r3, [r5, #0]
 8006b80:	1d33      	adds	r3, r6, #4
 8006b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b84:	6838      	ldr	r0, [r7, #0]
 8006b86:	f003 fce5 	bl	800a554 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ba4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_PCD_Start+0x16>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e016      	b.n	8006be8 <HAL_PCD_Start+0x44>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f003 fc94 	bl	800a4f4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006bcc:	2101      	movs	r1, #1
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f007 ff5e 	bl	800ea90 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f006 f979 	bl	800ced0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f006 f971 	bl	800cee4 <USB_ReadInterrupts>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c0c:	d102      	bne.n	8006c14 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 faf5 	bl	80071fe <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f006 f963 	bl	800cee4 <USB_ReadInterrupts>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c28:	d112      	bne.n	8006c50 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3c:	b292      	uxth	r2, r2
 8006c3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f007 ffbd 	bl	800ebc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006c48:	2100      	movs	r1, #0
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f8c7 	bl	8006dde <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f006 f945 	bl	800cee4 <USB_ReadInterrupts>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c64:	d10b      	bne.n	8006c7e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c78:	b292      	uxth	r2, r2
 8006c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f006 f92e 	bl	800cee4 <USB_ReadInterrupts>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c92:	d10b      	bne.n	8006cac <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ca6:	b292      	uxth	r2, r2
 8006ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f006 f917 	bl	800cee4 <USB_ReadInterrupts>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc0:	d126      	bne.n	8006d10 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0204 	bic.w	r2, r2, #4
 8006cd4:	b292      	uxth	r2, r2
 8006cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0208 	bic.w	r2, r2, #8
 8006cec:	b292      	uxth	r2, r2
 8006cee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f007 ff9e 	bl	800ec34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d0a:	b292      	uxth	r2, r2
 8006d0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f006 f8e5 	bl	800cee4 <USB_ReadInterrupts>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d24:	d126      	bne.n	8006d74 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f042 0208 	orr.w	r2, r2, #8
 8006d38:	b292      	uxth	r2, r2
 8006d3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d50:	b292      	uxth	r2, r2
 8006d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0204 	orr.w	r2, r2, #4
 8006d68:	b292      	uxth	r2, r2
 8006d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f007 ff46 	bl	800ec00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f006 f8b3 	bl	800cee4 <USB_ReadInterrupts>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d88:	d10e      	bne.n	8006da8 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d9c:	b292      	uxth	r2, r2
 8006d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f007 feff 	bl	800eba6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f006 f899 	bl	800cee4 <USB_ReadInterrupts>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dbc:	d10b      	bne.n	8006dd6 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dd0:	b292      	uxth	r2, r2
 8006dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_PCD_SetAddress+0x1a>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e013      	b.n	8006e20 <HAL_PCD_SetAddress+0x42>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	78fa      	ldrb	r2, [r7, #3]
 8006e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	78fa      	ldrb	r2, [r7, #3]
 8006e0e:	4611      	mov	r1, r2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f006 f84a 	bl	800ceaa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	4608      	mov	r0, r1
 8006e32:	4611      	mov	r1, r2
 8006e34:	461a      	mov	r2, r3
 8006e36:	4603      	mov	r3, r0
 8006e38:	70fb      	strb	r3, [r7, #3]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	803b      	strh	r3, [r7, #0]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	da0e      	bge.n	8006e6c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	705a      	strb	r2, [r3, #1]
 8006e6a:	e00e      	b.n	8006e8a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	f003 0207 	and.w	r2, r3, #7
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	4413      	add	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006e96:	883a      	ldrh	r2, [r7, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	78ba      	ldrb	r2, [r7, #2]
 8006ea0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	785b      	ldrb	r3, [r3, #1]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d004      	beq.n	8006eb4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006eb4:	78bb      	ldrb	r3, [r7, #2]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d102      	bne.n	8006ec0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d101      	bne.n	8006ece <HAL_PCD_EP_Open+0xa6>
 8006eca:	2302      	movs	r3, #2
 8006ecc:	e00e      	b.n	8006eec <HAL_PCD_EP_Open+0xc4>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68f9      	ldr	r1, [r7, #12]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f003 fb59 	bl	800a594 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006eea:	7afb      	ldrb	r3, [r7, #11]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da0e      	bge.n	8006f26 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f08:	78fb      	ldrb	r3, [r7, #3]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	705a      	strb	r2, [r3, #1]
 8006f24:	e00e      	b.n	8006f44 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f26:	78fb      	ldrb	r3, [r7, #3]
 8006f28:	f003 0207 	and.w	r2, r3, #7
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_PCD_EP_Close+0x6a>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e00e      	b.n	8006f7c <HAL_PCD_EP_Close+0x88>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68f9      	ldr	r1, [r7, #12]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f003 fe7b 	bl	800ac68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	460b      	mov	r3, r1
 8006f92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f94:	7afb      	ldrb	r3, [r7, #11]
 8006f96:	f003 0207 	and.w	r2, r3, #7
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006fd0:	7afb      	ldrb	r3, [r7, #11]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6979      	ldr	r1, [r7, #20]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f004 f82d 	bl	800b040 <USB_EPStartXfer>
 8006fe6:	e005      	b.n	8006ff4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6979      	ldr	r1, [r7, #20]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f004 f826 	bl	800b040 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800700a:	78fb      	ldrb	r3, [r7, #3]
 800700c:	f003 0207 	and.w	r2, r3, #7
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	440b      	add	r3, r1
 800701c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007020:	681b      	ldr	r3, [r3, #0]
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr

0800702c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	607a      	str	r2, [r7, #4]
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	460b      	mov	r3, r1
 800703a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2200      	movs	r2, #0
 8007070:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2201      	movs	r2, #1
 8007076:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007078:	7afb      	ldrb	r3, [r7, #11]
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	b2da      	uxtb	r2, r3
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007084:	7afb      	ldrb	r3, [r7, #11]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6979      	ldr	r1, [r7, #20]
 8007094:	4618      	mov	r0, r3
 8007096:	f003 ffd3 	bl	800b040 <USB_EPStartXfer>
 800709a:	e005      	b.n	80070a8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6979      	ldr	r1, [r7, #20]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f003 ffcc 	bl	800b040 <USB_EPStartXfer>
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	460b      	mov	r3, r1
 80070bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	f003 0207 	and.w	r2, r3, #7
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d901      	bls.n	80070d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e03e      	b.n	800714e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	da0e      	bge.n	80070f6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	4613      	mov	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	4413      	add	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2201      	movs	r2, #1
 80070f2:	705a      	strb	r2, [r3, #1]
 80070f4:	e00c      	b.n	8007110 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80070f6:	78fa      	ldrb	r2, [r7, #3]
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	4413      	add	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	b2da      	uxtb	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007128:	2b01      	cmp	r3, #1
 800712a:	d101      	bne.n	8007130 <HAL_PCD_EP_SetStall+0x7e>
 800712c:	2302      	movs	r3, #2
 800712e:	e00e      	b.n	800714e <HAL_PCD_EP_SetStall+0x9c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68f9      	ldr	r1, [r7, #12]
 800713e:	4618      	mov	r0, r3
 8007140:	f005 fdb6 	bl	800ccb0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	f003 020f 	and.w	r2, r3, #15
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	429a      	cmp	r2, r3
 800716e:	d901      	bls.n	8007174 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e040      	b.n	80071f6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007178:	2b00      	cmp	r3, #0
 800717a:	da0e      	bge.n	800719a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	4413      	add	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	705a      	strb	r2, [r3, #1]
 8007198:	e00e      	b.n	80071b8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800719a:	78fb      	ldrb	r3, [r7, #3]
 800719c:	f003 0207 	and.w	r2, r3, #7
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	4413      	add	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_PCD_EP_ClrStall+0x82>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e00e      	b.n	80071f6 <HAL_PCD_EP_ClrStall+0xa0>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68f9      	ldr	r1, [r7, #12]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f005 fdb2 	bl	800cd50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b08e      	sub	sp, #56	; 0x38
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007206:	e2ec      	b.n	80077e2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007210:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007212:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800721e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007222:	2b00      	cmp	r3, #0
 8007224:	f040 8161 	bne.w	80074ea <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007228:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b00      	cmp	r3, #0
 8007230:	d152      	bne.n	80072d8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800723e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007242:	81fb      	strh	r3, [r7, #14]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	89fb      	ldrh	r3, [r7, #14]
 800724a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007252:	b29b      	uxth	r3, r3
 8007254:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3328      	adds	r3, #40	; 0x28
 800725a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007264:	b29b      	uxth	r3, r3
 8007266:	461a      	mov	r2, r3
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	4413      	add	r3, r2
 8007270:	3302      	adds	r3, #2
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6812      	ldr	r2, [r2, #0]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	695a      	ldr	r2, [r3, #20]
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	441a      	add	r2, r3
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007296:	2100      	movs	r1, #0
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f007 fc6a 	bl	800eb72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 829b 	beq.w	80077e2 <PCD_EP_ISR_Handler+0x5e4>
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f040 8296 	bne.w	80077e2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	b292      	uxth	r2, r2
 80072ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80072d6:	e284      	b.n	80077e2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80072e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80072ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d034      	beq.n	800735c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	461a      	mov	r2, r3
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	4413      	add	r3, r2
 8007306:	3306      	adds	r3, #6
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007330:	b29b      	uxth	r3, r3
 8007332:	f005 fe2b 	bl	800cf8c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29a      	uxth	r2, r3
 800733e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007342:	4013      	ands	r3, r2
 8007344:	823b      	strh	r3, [r7, #16]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	8a3a      	ldrh	r2, [r7, #16]
 800734c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007350:	b292      	uxth	r2, r2
 8007352:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f007 fbdf 	bl	800eb18 <HAL_PCD_SetupStageCallback>
 800735a:	e242      	b.n	80077e2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800735c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007360:	2b00      	cmp	r3, #0
 8007362:	f280 823e 	bge.w	80077e2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29a      	uxth	r2, r3
 800736e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007372:	4013      	ands	r3, r2
 8007374:	83bb      	strh	r3, [r7, #28]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	8bba      	ldrh	r2, [r7, #28]
 800737c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007380:	b292      	uxth	r2, r2
 8007382:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738c:	b29b      	uxth	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	4413      	add	r3, r2
 8007398:	3306      	adds	r3, #6
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6812      	ldr	r2, [r2, #0]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d019      	beq.n	80073ec <PCD_EP_ISR_Handler+0x1ee>
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d015      	beq.n	80073ec <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	6959      	ldr	r1, [r3, #20]
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f005 fddb 	bl	800cf8c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	695a      	ldr	r2, [r3, #20]
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	441a      	add	r2, r3
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80073e4:	2100      	movs	r1, #0
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f007 fba8 	bl	800eb3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f040 81f2 	bne.w	80077e2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	61bb      	str	r3, [r7, #24]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800740c:	b29b      	uxth	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	4413      	add	r3, r2
 8007414:	61bb      	str	r3, [r7, #24]
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800741c:	617b      	str	r3, [r7, #20]
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d112      	bne.n	800744c <PCD_EP_ISR_Handler+0x24e>
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007430:	b29a      	uxth	r2, r3
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	801a      	strh	r2, [r3, #0]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007444:	b29a      	uxth	r2, r3
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e02f      	b.n	80074ac <PCD_EP_ISR_Handler+0x2ae>
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	2b3e      	cmp	r3, #62	; 0x3e
 8007452:	d813      	bhi.n	800747c <PCD_EP_ISR_Handler+0x27e>
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	085b      	lsrs	r3, r3, #1
 800745a:	633b      	str	r3, [r7, #48]	; 0x30
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <PCD_EP_ISR_Handler+0x270>
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	3301      	adds	r3, #1
 800746c:	633b      	str	r3, [r7, #48]	; 0x30
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	b29b      	uxth	r3, r3
 8007472:	029b      	lsls	r3, r3, #10
 8007474:	b29a      	uxth	r2, r3
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	801a      	strh	r2, [r3, #0]
 800747a:	e017      	b.n	80074ac <PCD_EP_ISR_Handler+0x2ae>
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	633b      	str	r3, [r7, #48]	; 0x30
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <PCD_EP_ISR_Handler+0x298>
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	3b01      	subs	r3, #1
 8007494:	633b      	str	r3, [r7, #48]	; 0x30
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	b29b      	uxth	r3, r3
 800749a:	029b      	lsls	r3, r3, #10
 800749c:	b29b      	uxth	r3, r3
 800749e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074bc:	827b      	strh	r3, [r7, #18]
 80074be:	8a7b      	ldrh	r3, [r7, #18]
 80074c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074c4:	827b      	strh	r3, [r7, #18]
 80074c6:	8a7b      	ldrh	r3, [r7, #18]
 80074c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074cc:	827b      	strh	r3, [r7, #18]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	8a7b      	ldrh	r3, [r7, #18]
 80074d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	8013      	strh	r3, [r2, #0]
 80074e8:	e17b      	b.n	80077e2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80074fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007500:	2b00      	cmp	r3, #0
 8007502:	f280 80ea 	bge.w	80076da <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	b29a      	uxth	r2, r3
 8007518:	f640 738f 	movw	r3, #3983	; 0xf8f
 800751c:	4013      	ands	r3, r2
 800751e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007530:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007534:	b292      	uxth	r2, r2
 8007536:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007538:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	4413      	add	r3, r2
 800754c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	7b1b      	ldrb	r3, [r3, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d122      	bne.n	800759c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755e:	b29b      	uxth	r3, r3
 8007560:	461a      	mov	r2, r3
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	4413      	add	r3, r2
 800756a:	3306      	adds	r3, #6
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6812      	ldr	r2, [r2, #0]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800757e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8007580:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 8087 	beq.w	8007696 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	6959      	ldr	r1, [r3, #20]
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	88da      	ldrh	r2, [r3, #6]
 8007594:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007596:	f005 fcf9 	bl	800cf8c <USB_ReadPMA>
 800759a:	e07c      	b.n	8007696 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	78db      	ldrb	r3, [r3, #3]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d108      	bne.n	80075b6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80075a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80075a6:	461a      	mov	r2, r3
 80075a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f927 	bl	80077fe <HAL_PCD_EP_DB_Receive>
 80075b0:	4603      	mov	r3, r0
 80075b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80075b4:	e06f      	b.n	8007696 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	441a      	add	r2, r3
 80075e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d021      	beq.n	8007654 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007618:	b29b      	uxth	r3, r3
 800761a:	461a      	mov	r2, r3
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	4413      	add	r3, r2
 8007624:	3302      	adds	r3, #2
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6812      	ldr	r2, [r2, #0]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007638:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800763a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800763c:	2b00      	cmp	r3, #0
 800763e:	d02a      	beq.n	8007696 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	6959      	ldr	r1, [r3, #20]
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	891a      	ldrh	r2, [r3, #8]
 800764c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800764e:	f005 fc9d 	bl	800cf8c <USB_ReadPMA>
 8007652:	e020      	b.n	8007696 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765c:	b29b      	uxth	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	4413      	add	r3, r2
 8007668:	3306      	adds	r3, #6
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6812      	ldr	r2, [r2, #0]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800767c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800767e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6818      	ldr	r0, [r3, #0]
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	6959      	ldr	r1, [r3, #20]
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	895a      	ldrh	r2, [r3, #10]
 8007690:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007692:	f005 fc7b 	bl	800cf8c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	69da      	ldr	r2, [r3, #28]
 800769a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800769c:	441a      	add	r2, r3
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	695a      	ldr	r2, [r3, #20]
 80076a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80076a8:	441a      	add	r2, r3
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d004      	beq.n	80076c0 <PCD_EP_ISR_Handler+0x4c2>
 80076b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d206      	bcs.n	80076ce <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f007 fa38 	bl	800eb3c <HAL_PCD_DataOutStageCallback>
 80076cc:	e005      	b.n	80076da <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076d4:	4618      	mov	r0, r3
 80076d6:	f003 fcb3 	bl	800b040 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80076da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80076dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d07e      	beq.n	80077e2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80076e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	4613      	mov	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4413      	add	r3, r2
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800770e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007712:	843b      	strh	r3, [r7, #32]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	461a      	mov	r2, r3
 800771a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	441a      	add	r2, r3
 8007722:	8c3b      	ldrh	r3, [r7, #32]
 8007724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772c:	b29b      	uxth	r3, r3
 800772e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	78db      	ldrb	r3, [r3, #3]
 8007734:	2b03      	cmp	r3, #3
 8007736:	d00c      	beq.n	8007752 <PCD_EP_ISR_Handler+0x554>
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	78db      	ldrb	r3, [r3, #3]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d008      	beq.n	8007752 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007744:	2b02      	cmp	r3, #2
 8007746:	d146      	bne.n	80077d6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007748:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800774a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774e:	2b00      	cmp	r3, #0
 8007750:	d141      	bne.n	80077d6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800775a:	b29b      	uxth	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4413      	add	r3, r2
 8007766:	3302      	adds	r3, #2
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800777a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	699a      	ldr	r2, [r3, #24]
 8007780:	8bfb      	ldrh	r3, [r7, #30]
 8007782:	429a      	cmp	r2, r3
 8007784:	d906      	bls.n	8007794 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	8bfb      	ldrh	r3, [r7, #30]
 800778c:	1ad2      	subs	r2, r2, r3
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	619a      	str	r2, [r3, #24]
 8007792:	e002      	b.n	800779a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	2200      	movs	r2, #0
 8007798:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f007 f9e2 	bl	800eb72 <HAL_PCD_DataInStageCallback>
 80077ae:	e018      	b.n	80077e2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	695a      	ldr	r2, [r3, #20]
 80077b4:	8bfb      	ldrh	r3, [r7, #30]
 80077b6:	441a      	add	r2, r3
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	69da      	ldr	r2, [r3, #28]
 80077c0:	8bfb      	ldrh	r3, [r7, #30]
 80077c2:	441a      	add	r2, r3
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077ce:	4618      	mov	r0, r3
 80077d0:	f003 fc36 	bl	800b040 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80077d4:	e005      	b.n	80077e2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80077d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80077d8:	461a      	mov	r2, r3
 80077da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f91b 	bl	8007a18 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	b21b      	sxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f6ff ad0a 	blt.w	8007208 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3738      	adds	r7, #56	; 0x38
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b088      	sub	sp, #32
 8007802:	af00      	add	r7, sp, #0
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	4613      	mov	r3, r2
 800780a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d07e      	beq.n	8007914 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800781e:	b29b      	uxth	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	4413      	add	r3, r2
 800782a:	3302      	adds	r3, #2
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	6812      	ldr	r2, [r2, #0]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800783e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	699a      	ldr	r2, [r3, #24]
 8007844:	8b7b      	ldrh	r3, [r7, #26]
 8007846:	429a      	cmp	r2, r3
 8007848:	d306      	bcc.n	8007858 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	8b7b      	ldrh	r3, [r7, #26]
 8007850:	1ad2      	subs	r2, r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	619a      	str	r2, [r3, #24]
 8007856:	e002      	b.n	800785e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2200      	movs	r2, #0
 800785c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d123      	bne.n	80078ae <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800787c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007880:	833b      	strh	r3, [r7, #24]
 8007882:	8b3b      	ldrh	r3, [r7, #24]
 8007884:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007888:	833b      	strh	r3, [r7, #24]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	441a      	add	r2, r3
 8007898:	8b3b      	ldrh	r3, [r7, #24]
 800789a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800789e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80078ae:	88fb      	ldrh	r3, [r7, #6]
 80078b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01f      	beq.n	80078f8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d2:	82fb      	strh	r3, [r7, #22]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	441a      	add	r2, r3
 80078e2:	8afb      	ldrh	r3, [r7, #22]
 80078e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80078f8:	8b7b      	ldrh	r3, [r7, #26]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 8087 	beq.w	8007a0e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6959      	ldr	r1, [r3, #20]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	891a      	ldrh	r2, [r3, #8]
 800790c:	8b7b      	ldrh	r3, [r7, #26]
 800790e:	f005 fb3d 	bl	800cf8c <USB_ReadPMA>
 8007912:	e07c      	b.n	8007a0e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791c:	b29b      	uxth	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	4413      	add	r3, r2
 8007928:	3306      	adds	r3, #6
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	6812      	ldr	r2, [r2, #0]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800793c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	8b7b      	ldrh	r3, [r7, #26]
 8007944:	429a      	cmp	r2, r3
 8007946:	d306      	bcc.n	8007956 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	8b7b      	ldrh	r3, [r7, #26]
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	619a      	str	r2, [r3, #24]
 8007954:	e002      	b.n	800795c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2200      	movs	r2, #0
 800795a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d123      	bne.n	80079ac <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	b29b      	uxth	r3, r3
 8007976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800797a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797e:	83fb      	strh	r3, [r7, #30]
 8007980:	8bfb      	ldrh	r3, [r7, #30]
 8007982:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007986:	83fb      	strh	r3, [r7, #30]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	441a      	add	r2, r3
 8007996:	8bfb      	ldrh	r3, [r7, #30]
 8007998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800799c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d11f      	bne.n	80079f6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d0:	83bb      	strh	r3, [r7, #28]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	441a      	add	r2, r3
 80079e0:	8bbb      	ldrh	r3, [r7, #28]
 80079e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80079f6:	8b7b      	ldrh	r3, [r7, #26]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d008      	beq.n	8007a0e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6818      	ldr	r0, [r3, #0]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	6959      	ldr	r1, [r3, #20]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	895a      	ldrh	r2, [r3, #10]
 8007a08:	8b7b      	ldrh	r3, [r7, #26]
 8007a0a:	f005 fabf 	bl	800cf8c <USB_ReadPMA>
    }
  }

  return count;
 8007a0e:	8b7b      	ldrh	r3, [r7, #26]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3720      	adds	r7, #32
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b0a2      	sub	sp, #136	; 0x88
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4613      	mov	r3, r2
 8007a24:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007a26:	88fb      	ldrh	r3, [r7, #6]
 8007a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 81c7 	beq.w	8007dc0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	4413      	add	r3, r2
 8007a46:	3302      	adds	r3, #2
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d907      	bls.n	8007a7a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	699a      	ldr	r2, [r3, #24]
 8007a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	619a      	str	r2, [r3, #24]
 8007a78:	e002      	b.n	8007a80 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 80b9 	bne.w	8007bfc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	785b      	ldrb	r3, [r3, #1]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d126      	bne.n	8007ae0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	4413      	add	r3, r2
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	011a      	lsls	r2, r3, #4
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	801a      	strh	r2, [r3, #0]
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	e01a      	b.n	8007b16 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	785b      	ldrb	r3, [r3, #1]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d116      	bne.n	8007b16 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	633b      	str	r3, [r7, #48]	; 0x30
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	461a      	mov	r2, r3
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	4413      	add	r3, r2
 8007afe:	633b      	str	r3, [r7, #48]	; 0x30
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	011a      	lsls	r2, r3, #4
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	4413      	add	r3, r2
 8007b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	2200      	movs	r2, #0
 8007b14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	623b      	str	r3, [r7, #32]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d126      	bne.n	8007b72 <HAL_PCD_EP_DB_Transmit+0x15a>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	4413      	add	r3, r2
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	011a      	lsls	r2, r3, #4
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	4413      	add	r3, r2
 8007b46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	801a      	strh	r2, [r3, #0]
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	e017      	b.n	8007ba2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d113      	bne.n	8007ba2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	461a      	mov	r2, r3
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	4413      	add	r3, r2
 8007b8a:	623b      	str	r3, [r7, #32]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	011a      	lsls	r2, r3, #4
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	4413      	add	r3, r2
 8007b96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f006 ffe2 	bl	800eb72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007bae:	88fb      	ldrh	r3, [r7, #6]
 8007bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 82d4 	beq.w	8008162 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd4:	827b      	strh	r3, [r7, #18]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	441a      	add	r2, r3
 8007be4:	8a7b      	ldrh	r3, [r7, #18]
 8007be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	8013      	strh	r3, [r2, #0]
 8007bfa:	e2b2      	b.n	8008162 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007bfc:	88fb      	ldrh	r3, [r7, #6]
 8007bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d021      	beq.n	8007c4a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	441a      	add	r2, r3
 8007c32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	f040 8286 	bne.w	8008162 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	695a      	ldr	r2, [r3, #20]
 8007c5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c5e:	441a      	add	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	69da      	ldr	r2, [r3, #28]
 8007c68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c6c:	441a      	add	r2, r3
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	6a1a      	ldr	r2, [r3, #32]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d309      	bcc.n	8007c92 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	6a1a      	ldr	r2, [r3, #32]
 8007c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c8a:	1ad2      	subs	r2, r2, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	621a      	str	r2, [r3, #32]
 8007c90:	e015      	b.n	8007cbe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d107      	bne.n	8007caa <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8007c9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007ca8:	e009      	b.n	8007cbe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d155      	bne.n	8007d72 <HAL_PCD_EP_DB_Transmit+0x35a>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	4413      	add	r3, r2
 8007cdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	011a      	lsls	r2, r3, #4
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34
 8007cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d112      	bne.n	8007d1a <HAL_PCD_EP_DB_Transmit+0x302>
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d02:	801a      	strh	r2, [r3, #0]
 8007d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d16:	801a      	strh	r2, [r3, #0]
 8007d18:	e047      	b.n	8007daa <HAL_PCD_EP_DB_Transmit+0x392>
 8007d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d1e:	d811      	bhi.n	8007d44 <HAL_PCD_EP_DB_Transmit+0x32c>
 8007d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d22:	085b      	lsrs	r3, r3, #1
 8007d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <HAL_PCD_EP_DB_Transmit+0x31e>
 8007d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d32:	3301      	adds	r3, #1
 8007d34:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	029b      	lsls	r3, r3, #10
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	801a      	strh	r2, [r3, #0]
 8007d42:	e032      	b.n	8007daa <HAL_PCD_EP_DB_Transmit+0x392>
 8007d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d46:	095b      	lsrs	r3, r3, #5
 8007d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d4c:	f003 031f 	and.w	r3, r3, #31
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d102      	bne.n	8007d5a <HAL_PCD_EP_DB_Transmit+0x342>
 8007d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d56:	3b01      	subs	r3, #1
 8007d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	029b      	lsls	r3, r3, #10
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6e:	801a      	strh	r2, [r3, #0]
 8007d70:	e01b      	b.n	8007daa <HAL_PCD_EP_DB_Transmit+0x392>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d117      	bne.n	8007daa <HAL_PCD_EP_DB_Transmit+0x392>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8e:	4413      	add	r3, r2
 8007d90:	643b      	str	r3, [r7, #64]	; 0x40
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	011a      	lsls	r2, r3, #4
 8007d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6959      	ldr	r1, [r3, #20]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	891a      	ldrh	r2, [r3, #8]
 8007db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f005 f8a2 	bl	800cf02 <USB_WritePMA>
 8007dbe:	e1d0      	b.n	8008162 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	3306      	adds	r3, #6
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	699a      	ldr	r2, [r3, #24]
 8007df0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d307      	bcc.n	8007e08 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	619a      	str	r2, [r3, #24]
 8007e06:	e002      	b.n	8007e0e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f040 80c4 	bne.w	8007fa0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	785b      	ldrb	r3, [r3, #1]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d126      	bne.n	8007e6e <HAL_PCD_EP_DB_Transmit+0x456>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e34:	4413      	add	r3, r2
 8007e36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	011a      	lsls	r2, r3, #4
 8007e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e40:	4413      	add	r3, r2
 8007e42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e56:	801a      	strh	r2, [r3, #0]
 8007e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e6a:	801a      	strh	r2, [r3, #0]
 8007e6c:	e01a      	b.n	8007ea4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	785b      	ldrb	r3, [r3, #1]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d116      	bne.n	8007ea4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	677b      	str	r3, [r7, #116]	; 0x74
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	461a      	mov	r2, r3
 8007e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e8a:	4413      	add	r3, r2
 8007e8c:	677b      	str	r3, [r7, #116]	; 0x74
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	011a      	lsls	r2, r3, #4
 8007e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e96:	4413      	add	r3, r2
 8007e98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e9c:	673b      	str	r3, [r7, #112]	; 0x70
 8007e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d12f      	bne.n	8007f12 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007eca:	4413      	add	r3, r2
 8007ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	011a      	lsls	r2, r3, #4
 8007ed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007eda:	4413      	add	r3, r2
 8007edc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ef6:	801a      	strh	r2, [r3, #0]
 8007ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e017      	b.n	8007f42 <HAL_PCD_EP_DB_Transmit+0x52a>
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	785b      	ldrb	r3, [r3, #1]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d113      	bne.n	8007f42 <HAL_PCD_EP_DB_Transmit+0x52a>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f28:	4413      	add	r3, r2
 8007f2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	011a      	lsls	r2, r3, #4
 8007f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f34:	4413      	add	r3, r2
 8007f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f3e:	2200      	movs	r2, #0
 8007f40:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	4619      	mov	r1, r3
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f006 fe12 	bl	800eb72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f040 8104 	bne.w	8008162 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	441a      	add	r2, r3
 8007f86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	8013      	strh	r3, [r2, #0]
 8007f9e:	e0e0      	b.n	8008162 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007fa0:	88fb      	ldrh	r3, [r7, #6]
 8007fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d121      	bne.n	8007fee <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	441a      	add	r2, r3
 8007fd6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	f040 80b4 	bne.w	8008162 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	695a      	ldr	r2, [r3, #20]
 8007ffe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008002:	441a      	add	r2, r3
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	69da      	ldr	r2, [r3, #28]
 800800c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008010:	441a      	add	r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	6a1a      	ldr	r2, [r3, #32]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	429a      	cmp	r2, r3
 8008020:	d309      	bcc.n	8008036 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	6a1a      	ldr	r2, [r3, #32]
 800802c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800802e:	1ad2      	subs	r2, r2, r3
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	621a      	str	r2, [r3, #32]
 8008034:	e015      	b.n	8008062 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d107      	bne.n	800804e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800803e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008042:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800804c:	e009      	b.n	8008062 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2200      	movs	r2, #0
 8008058:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	667b      	str	r3, [r7, #100]	; 0x64
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d155      	bne.n	800811c <HAL_PCD_EP_DB_Transmit+0x704>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800807e:	b29b      	uxth	r3, r3
 8008080:	461a      	mov	r2, r3
 8008082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008084:	4413      	add	r3, r2
 8008086:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	011a      	lsls	r2, r3, #4
 800808e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008090:	4413      	add	r3, r2
 8008092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008096:	65bb      	str	r3, [r7, #88]	; 0x58
 8008098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800809a:	2b00      	cmp	r3, #0
 800809c:	d112      	bne.n	80080c4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800809e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080ac:	801a      	strh	r2, [r3, #0]
 80080ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080bc:	b29a      	uxth	r2, r3
 80080be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080c0:	801a      	strh	r2, [r3, #0]
 80080c2:	e044      	b.n	800814e <HAL_PCD_EP_DB_Transmit+0x736>
 80080c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080c6:	2b3e      	cmp	r3, #62	; 0x3e
 80080c8:	d811      	bhi.n	80080ee <HAL_PCD_EP_DB_Transmit+0x6d6>
 80080ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	657b      	str	r3, [r7, #84]	; 0x54
 80080d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80080da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080dc:	3301      	adds	r3, #1
 80080de:	657b      	str	r3, [r7, #84]	; 0x54
 80080e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	029b      	lsls	r3, r3, #10
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	e02f      	b.n	800814e <HAL_PCD_EP_DB_Transmit+0x736>
 80080ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f0:	095b      	lsrs	r3, r3, #5
 80080f2:	657b      	str	r3, [r7, #84]	; 0x54
 80080f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f6:	f003 031f 	and.w	r3, r3, #31
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80080fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008100:	3b01      	subs	r3, #1
 8008102:	657b      	str	r3, [r7, #84]	; 0x54
 8008104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008106:	b29b      	uxth	r3, r3
 8008108:	029b      	lsls	r3, r3, #10
 800810a:	b29b      	uxth	r3, r3
 800810c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008114:	b29a      	uxth	r2, r3
 8008116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008118:	801a      	strh	r2, [r3, #0]
 800811a:	e018      	b.n	800814e <HAL_PCD_EP_DB_Transmit+0x736>
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d114      	bne.n	800814e <HAL_PCD_EP_DB_Transmit+0x736>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800812c:	b29b      	uxth	r3, r3
 800812e:	461a      	mov	r2, r3
 8008130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008132:	4413      	add	r3, r2
 8008134:	667b      	str	r3, [r7, #100]	; 0x64
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	011a      	lsls	r2, r3, #4
 800813c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800813e:	4413      	add	r3, r2
 8008140:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008144:	663b      	str	r3, [r7, #96]	; 0x60
 8008146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008148:	b29a      	uxth	r2, r3
 800814a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800814c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	6959      	ldr	r1, [r3, #20]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	895a      	ldrh	r2, [r3, #10]
 800815a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800815c:	b29b      	uxth	r3, r3
 800815e:	f004 fed0 	bl	800cf02 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800817c:	823b      	strh	r3, [r7, #16]
 800817e:	8a3b      	ldrh	r3, [r7, #16]
 8008180:	f083 0310 	eor.w	r3, r3, #16
 8008184:	823b      	strh	r3, [r7, #16]
 8008186:	8a3b      	ldrh	r3, [r7, #16]
 8008188:	f083 0320 	eor.w	r3, r3, #32
 800818c:	823b      	strh	r3, [r7, #16]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	441a      	add	r2, r3
 800819c:	8a3b      	ldrh	r3, [r7, #16]
 800819e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3788      	adds	r7, #136	; 0x88
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	607b      	str	r3, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	817b      	strh	r3, [r7, #10]
 80081ca:	4613      	mov	r3, r2
 80081cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80081ce:	897b      	ldrh	r3, [r7, #10]
 80081d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00b      	beq.n	80081f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081da:	897b      	ldrh	r3, [r7, #10]
 80081dc:	f003 0307 	and.w	r3, r3, #7
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	4413      	add	r3, r2
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e009      	b.n	8008206 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80081f2:	897a      	ldrh	r2, [r7, #10]
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4413      	add	r3, r2
 8008204:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008206:	893b      	ldrh	r3, [r7, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d107      	bne.n	800821c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2200      	movs	r2, #0
 8008210:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	b29a      	uxth	r2, r3
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	80da      	strh	r2, [r3, #6]
 800821a:	e00b      	b.n	8008234 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2201      	movs	r2, #1
 8008220:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	b29a      	uxth	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	0c1b      	lsrs	r3, r3, #16
 800822e:	b29a      	uxth	r2, r3
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	bc80      	pop	{r7}
 800823e:	4770      	bx	lr

08008240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e31d      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008252:	4b94      	ldr	r3, [pc, #592]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 030c 	and.w	r3, r3, #12
 800825a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800825c:	4b91      	ldr	r3, [pc, #580]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008264:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d07b      	beq.n	800836a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	2b08      	cmp	r3, #8
 8008276:	d006      	beq.n	8008286 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	2b0c      	cmp	r3, #12
 800827c:	d10f      	bne.n	800829e <HAL_RCC_OscConfig+0x5e>
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008284:	d10b      	bne.n	800829e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008286:	4b87      	ldr	r3, [pc, #540]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d06a      	beq.n	8008368 <HAL_RCC_OscConfig+0x128>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d166      	bne.n	8008368 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e2f7      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d106      	bne.n	80082b4 <HAL_RCC_OscConfig+0x74>
 80082a6:	4b7f      	ldr	r3, [pc, #508]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a7e      	ldr	r2, [pc, #504]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	e02d      	b.n	8008310 <HAL_RCC_OscConfig+0xd0>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10c      	bne.n	80082d6 <HAL_RCC_OscConfig+0x96>
 80082bc:	4b79      	ldr	r3, [pc, #484]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a78      	ldr	r2, [pc, #480]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	4b76      	ldr	r3, [pc, #472]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a75      	ldr	r2, [pc, #468]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	e01c      	b.n	8008310 <HAL_RCC_OscConfig+0xd0>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	2b05      	cmp	r3, #5
 80082dc:	d10c      	bne.n	80082f8 <HAL_RCC_OscConfig+0xb8>
 80082de:	4b71      	ldr	r3, [pc, #452]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a70      	ldr	r2, [pc, #448]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	4b6e      	ldr	r3, [pc, #440]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a6d      	ldr	r2, [pc, #436]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	e00b      	b.n	8008310 <HAL_RCC_OscConfig+0xd0>
 80082f8:	4b6a      	ldr	r3, [pc, #424]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a69      	ldr	r2, [pc, #420]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80082fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	4b67      	ldr	r3, [pc, #412]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a66      	ldr	r2, [pc, #408]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 800830a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800830e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d013      	beq.n	8008340 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008318:	f7fc fd32 	bl	8004d80 <HAL_GetTick>
 800831c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800831e:	e008      	b.n	8008332 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008320:	f7fc fd2e 	bl	8004d80 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b64      	cmp	r3, #100	; 0x64
 800832c:	d901      	bls.n	8008332 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e2ad      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008332:	4b5c      	ldr	r3, [pc, #368]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0f0      	beq.n	8008320 <HAL_RCC_OscConfig+0xe0>
 800833e:	e014      	b.n	800836a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008340:	f7fc fd1e 	bl	8004d80 <HAL_GetTick>
 8008344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008346:	e008      	b.n	800835a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008348:	f7fc fd1a 	bl	8004d80 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b64      	cmp	r3, #100	; 0x64
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e299      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800835a:	4b52      	ldr	r3, [pc, #328]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1f0      	bne.n	8008348 <HAL_RCC_OscConfig+0x108>
 8008366:	e000      	b.n	800836a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d05a      	beq.n	800842c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	2b04      	cmp	r3, #4
 800837a:	d005      	beq.n	8008388 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	2b0c      	cmp	r3, #12
 8008380:	d119      	bne.n	80083b6 <HAL_RCC_OscConfig+0x176>
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d116      	bne.n	80083b6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008388:	4b46      	ldr	r3, [pc, #280]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <HAL_RCC_OscConfig+0x160>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d001      	beq.n	80083a0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e276      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083a0:	4b40      	ldr	r3, [pc, #256]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	493d      	ldr	r1, [pc, #244]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083b4:	e03a      	b.n	800842c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d020      	beq.n	8008400 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083be:	4b3a      	ldr	r3, [pc, #232]	; (80084a8 <HAL_RCC_OscConfig+0x268>)
 80083c0:	2201      	movs	r2, #1
 80083c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083c4:	f7fc fcdc 	bl	8004d80 <HAL_GetTick>
 80083c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083ca:	e008      	b.n	80083de <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083cc:	f7fc fcd8 	bl	8004d80 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e257      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083de:	4b31      	ldr	r3, [pc, #196]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0f0      	beq.n	80083cc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ea:	4b2e      	ldr	r3, [pc, #184]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	021b      	lsls	r3, r3, #8
 80083f8:	492a      	ldr	r1, [pc, #168]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	604b      	str	r3, [r1, #4]
 80083fe:	e015      	b.n	800842c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008400:	4b29      	ldr	r3, [pc, #164]	; (80084a8 <HAL_RCC_OscConfig+0x268>)
 8008402:	2200      	movs	r2, #0
 8008404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008406:	f7fc fcbb 	bl	8004d80 <HAL_GetTick>
 800840a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800840c:	e008      	b.n	8008420 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800840e:	f7fc fcb7 	bl	8004d80 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	2b02      	cmp	r3, #2
 800841a:	d901      	bls.n	8008420 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e236      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008420:	4b20      	ldr	r3, [pc, #128]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1f0      	bne.n	800840e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0310 	and.w	r3, r3, #16
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 80b8 	beq.w	80085aa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d170      	bne.n	8008522 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008440:	4b18      	ldr	r3, [pc, #96]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <HAL_RCC_OscConfig+0x218>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e21a      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a1a      	ldr	r2, [r3, #32]
 800845c:	4b11      	ldr	r3, [pc, #68]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008464:	429a      	cmp	r2, r3
 8008466:	d921      	bls.n	80084ac <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fc69 	bl	8008d44 <RCC_SetFlashLatencyFromMSIRange>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e208      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800847c:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	4906      	ldr	r1, [pc, #24]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 800848a:	4313      	orrs	r3, r2
 800848c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800848e:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	061b      	lsls	r3, r3, #24
 800849c:	4901      	ldr	r1, [pc, #4]	; (80084a4 <HAL_RCC_OscConfig+0x264>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	604b      	str	r3, [r1, #4]
 80084a2:	e020      	b.n	80084e6 <HAL_RCC_OscConfig+0x2a6>
 80084a4:	40023800 	.word	0x40023800
 80084a8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084ac:	4b99      	ldr	r3, [pc, #612]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	4996      	ldr	r1, [pc, #600]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084be:	4b95      	ldr	r3, [pc, #596]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	061b      	lsls	r3, r3, #24
 80084cc:	4991      	ldr	r1, [pc, #580]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fc34 	bl	8008d44 <RCC_SetFlashLatencyFromMSIRange>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e1d3      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	0b5b      	lsrs	r3, r3, #13
 80084ec:	3301      	adds	r3, #1
 80084ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80084f2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80084f6:	4a87      	ldr	r2, [pc, #540]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80084f8:	6892      	ldr	r2, [r2, #8]
 80084fa:	0912      	lsrs	r2, r2, #4
 80084fc:	f002 020f 	and.w	r2, r2, #15
 8008500:	4985      	ldr	r1, [pc, #532]	; (8008718 <HAL_RCC_OscConfig+0x4d8>)
 8008502:	5c8a      	ldrb	r2, [r1, r2]
 8008504:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008506:	4a85      	ldr	r2, [pc, #532]	; (800871c <HAL_RCC_OscConfig+0x4dc>)
 8008508:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800850a:	4b85      	ldr	r3, [pc, #532]	; (8008720 <HAL_RCC_OscConfig+0x4e0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7fc fbea 	bl	8004ce8 <HAL_InitTick>
 8008514:	4603      	mov	r3, r0
 8008516:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d045      	beq.n	80085aa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	e1b5      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d029      	beq.n	800857e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800852a:	4b7e      	ldr	r3, [pc, #504]	; (8008724 <HAL_RCC_OscConfig+0x4e4>)
 800852c:	2201      	movs	r2, #1
 800852e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008530:	f7fc fc26 	bl	8004d80 <HAL_GetTick>
 8008534:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008538:	f7fc fc22 	bl	8004d80 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b02      	cmp	r3, #2
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e1a1      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800854a:	4b72      	ldr	r3, [pc, #456]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008552:	2b00      	cmp	r3, #0
 8008554:	d0f0      	beq.n	8008538 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008556:	4b6f      	ldr	r3, [pc, #444]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	496c      	ldr	r1, [pc, #432]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 8008564:	4313      	orrs	r3, r2
 8008566:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008568:	4b6a      	ldr	r3, [pc, #424]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	061b      	lsls	r3, r3, #24
 8008576:	4967      	ldr	r1, [pc, #412]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 8008578:	4313      	orrs	r3, r2
 800857a:	604b      	str	r3, [r1, #4]
 800857c:	e015      	b.n	80085aa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800857e:	4b69      	ldr	r3, [pc, #420]	; (8008724 <HAL_RCC_OscConfig+0x4e4>)
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008584:	f7fc fbfc 	bl	8004d80 <HAL_GetTick>
 8008588:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800858c:	f7fc fbf8 	bl	8004d80 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e177      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800859e:	4b5d      	ldr	r3, [pc, #372]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1f0      	bne.n	800858c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d030      	beq.n	8008618 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d016      	beq.n	80085ec <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085be:	4b5a      	ldr	r3, [pc, #360]	; (8008728 <HAL_RCC_OscConfig+0x4e8>)
 80085c0:	2201      	movs	r2, #1
 80085c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085c4:	f7fc fbdc 	bl	8004d80 <HAL_GetTick>
 80085c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80085ca:	e008      	b.n	80085de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085cc:	f7fc fbd8 	bl	8004d80 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d901      	bls.n	80085de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e157      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80085de:	4b4d      	ldr	r3, [pc, #308]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80085e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0f0      	beq.n	80085cc <HAL_RCC_OscConfig+0x38c>
 80085ea:	e015      	b.n	8008618 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085ec:	4b4e      	ldr	r3, [pc, #312]	; (8008728 <HAL_RCC_OscConfig+0x4e8>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085f2:	f7fc fbc5 	bl	8004d80 <HAL_GetTick>
 80085f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085f8:	e008      	b.n	800860c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085fa:	f7fc fbc1 	bl	8004d80 <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	2b02      	cmp	r3, #2
 8008606:	d901      	bls.n	800860c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e140      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800860c:	4b41      	ldr	r3, [pc, #260]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 800860e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1f0      	bne.n	80085fa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80b5 	beq.w	8008790 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008626:	2300      	movs	r3, #0
 8008628:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800862a:	4b3a      	ldr	r3, [pc, #232]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10d      	bne.n	8008652 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008636:	4b37      	ldr	r3, [pc, #220]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	4a36      	ldr	r2, [pc, #216]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 800863c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008640:	6253      	str	r3, [r2, #36]	; 0x24
 8008642:	4b34      	ldr	r3, [pc, #208]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 8008644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800864a:	60bb      	str	r3, [r7, #8]
 800864c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800864e:	2301      	movs	r3, #1
 8008650:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008652:	4b36      	ldr	r3, [pc, #216]	; (800872c <HAL_RCC_OscConfig+0x4ec>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865a:	2b00      	cmp	r3, #0
 800865c:	d118      	bne.n	8008690 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800865e:	4b33      	ldr	r3, [pc, #204]	; (800872c <HAL_RCC_OscConfig+0x4ec>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a32      	ldr	r2, [pc, #200]	; (800872c <HAL_RCC_OscConfig+0x4ec>)
 8008664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800866a:	f7fc fb89 	bl	8004d80 <HAL_GetTick>
 800866e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008670:	e008      	b.n	8008684 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008672:	f7fc fb85 	bl	8004d80 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	2b64      	cmp	r3, #100	; 0x64
 800867e:	d901      	bls.n	8008684 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e104      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008684:	4b29      	ldr	r3, [pc, #164]	; (800872c <HAL_RCC_OscConfig+0x4ec>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0f0      	beq.n	8008672 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d106      	bne.n	80086a6 <HAL_RCC_OscConfig+0x466>
 8008698:	4b1e      	ldr	r3, [pc, #120]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 800869a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869c:	4a1d      	ldr	r2, [pc, #116]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 800869e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086a2:	6353      	str	r3, [r2, #52]	; 0x34
 80086a4:	e02d      	b.n	8008702 <HAL_RCC_OscConfig+0x4c2>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10c      	bne.n	80086c8 <HAL_RCC_OscConfig+0x488>
 80086ae:	4b19      	ldr	r3, [pc, #100]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b2:	4a18      	ldr	r2, [pc, #96]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086b8:	6353      	str	r3, [r2, #52]	; 0x34
 80086ba:	4b16      	ldr	r3, [pc, #88]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086be:	4a15      	ldr	r2, [pc, #84]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086c4:	6353      	str	r3, [r2, #52]	; 0x34
 80086c6:	e01c      	b.n	8008702 <HAL_RCC_OscConfig+0x4c2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	2b05      	cmp	r3, #5
 80086ce:	d10c      	bne.n	80086ea <HAL_RCC_OscConfig+0x4aa>
 80086d0:	4b10      	ldr	r3, [pc, #64]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d4:	4a0f      	ldr	r2, [pc, #60]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086da:	6353      	str	r3, [r2, #52]	; 0x34
 80086dc:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e0:	4a0c      	ldr	r2, [pc, #48]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086e6:	6353      	str	r3, [r2, #52]	; 0x34
 80086e8:	e00b      	b.n	8008702 <HAL_RCC_OscConfig+0x4c2>
 80086ea:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ee:	4a09      	ldr	r2, [pc, #36]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086f4:	6353      	str	r3, [r2, #52]	; 0x34
 80086f6:	4b07      	ldr	r3, [pc, #28]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fa:	4a06      	ldr	r2, [pc, #24]	; (8008714 <HAL_RCC_OscConfig+0x4d4>)
 80086fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008700:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d024      	beq.n	8008754 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800870a:	f7fc fb39 	bl	8004d80 <HAL_GetTick>
 800870e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008710:	e019      	b.n	8008746 <HAL_RCC_OscConfig+0x506>
 8008712:	bf00      	nop
 8008714:	40023800 	.word	0x40023800
 8008718:	080138fc 	.word	0x080138fc
 800871c:	20000784 	.word	0x20000784
 8008720:	2000078c 	.word	0x2000078c
 8008724:	42470020 	.word	0x42470020
 8008728:	42470680 	.word	0x42470680
 800872c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008730:	f7fc fb26 	bl	8004d80 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	f241 3288 	movw	r2, #5000	; 0x1388
 800873e:	4293      	cmp	r3, r2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e0a3      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008746:	4b54      	ldr	r3, [pc, #336]	; (8008898 <HAL_RCC_OscConfig+0x658>)
 8008748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0ee      	beq.n	8008730 <HAL_RCC_OscConfig+0x4f0>
 8008752:	e014      	b.n	800877e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008754:	f7fc fb14 	bl	8004d80 <HAL_GetTick>
 8008758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800875a:	e00a      	b.n	8008772 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800875c:	f7fc fb10 	bl	8004d80 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	f241 3288 	movw	r2, #5000	; 0x1388
 800876a:	4293      	cmp	r3, r2
 800876c:	d901      	bls.n	8008772 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e08d      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008772:	4b49      	ldr	r3, [pc, #292]	; (8008898 <HAL_RCC_OscConfig+0x658>)
 8008774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1ee      	bne.n	800875c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800877e:	7ffb      	ldrb	r3, [r7, #31]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d105      	bne.n	8008790 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008784:	4b44      	ldr	r3, [pc, #272]	; (8008898 <HAL_RCC_OscConfig+0x658>)
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	4a43      	ldr	r2, [pc, #268]	; (8008898 <HAL_RCC_OscConfig+0x658>)
 800878a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800878e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	d079      	beq.n	800888c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	2b0c      	cmp	r3, #12
 800879c:	d056      	beq.n	800884c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d13b      	bne.n	800881e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087a6:	4b3d      	ldr	r3, [pc, #244]	; (800889c <HAL_RCC_OscConfig+0x65c>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087ac:	f7fc fae8 	bl	8004d80 <HAL_GetTick>
 80087b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087b2:	e008      	b.n	80087c6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087b4:	f7fc fae4 	bl	8004d80 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e063      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087c6:	4b34      	ldr	r3, [pc, #208]	; (8008898 <HAL_RCC_OscConfig+0x658>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1f0      	bne.n	80087b4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087d2:	4b31      	ldr	r3, [pc, #196]	; (8008898 <HAL_RCC_OscConfig+0x658>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e2:	4319      	orrs	r1, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e8:	430b      	orrs	r3, r1
 80087ea:	492b      	ldr	r1, [pc, #172]	; (8008898 <HAL_RCC_OscConfig+0x658>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087f0:	4b2a      	ldr	r3, [pc, #168]	; (800889c <HAL_RCC_OscConfig+0x65c>)
 80087f2:	2201      	movs	r2, #1
 80087f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087f6:	f7fc fac3 	bl	8004d80 <HAL_GetTick>
 80087fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087fc:	e008      	b.n	8008810 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087fe:	f7fc fabf 	bl	8004d80 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b02      	cmp	r3, #2
 800880a:	d901      	bls.n	8008810 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e03e      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008810:	4b21      	ldr	r3, [pc, #132]	; (8008898 <HAL_RCC_OscConfig+0x658>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d0f0      	beq.n	80087fe <HAL_RCC_OscConfig+0x5be>
 800881c:	e036      	b.n	800888c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800881e:	4b1f      	ldr	r3, [pc, #124]	; (800889c <HAL_RCC_OscConfig+0x65c>)
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008824:	f7fc faac 	bl	8004d80 <HAL_GetTick>
 8008828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800882a:	e008      	b.n	800883e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800882c:	f7fc faa8 	bl	8004d80 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d901      	bls.n	800883e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e027      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800883e:	4b16      	ldr	r3, [pc, #88]	; (8008898 <HAL_RCC_OscConfig+0x658>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1f0      	bne.n	800882c <HAL_RCC_OscConfig+0x5ec>
 800884a:	e01f      	b.n	800888c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e01a      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008858:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <HAL_RCC_OscConfig+0x658>)
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	429a      	cmp	r2, r3
 800886a:	d10d      	bne.n	8008888 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008876:	429a      	cmp	r2, r3
 8008878:	d106      	bne.n	8008888 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008884:	429a      	cmp	r2, r3
 8008886:	d001      	beq.n	800888c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e000      	b.n	800888e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3720      	adds	r7, #32
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	40023800 	.word	0x40023800
 800889c:	42470060 	.word	0x42470060

080088a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e11a      	b.n	8008aea <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088b4:	4b8f      	ldr	r3, [pc, #572]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d919      	bls.n	80088f6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d105      	bne.n	80088d4 <HAL_RCC_ClockConfig+0x34>
 80088c8:	4b8a      	ldr	r3, [pc, #552]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a89      	ldr	r2, [pc, #548]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 80088ce:	f043 0304 	orr.w	r3, r3, #4
 80088d2:	6013      	str	r3, [r2, #0]
 80088d4:	4b87      	ldr	r3, [pc, #540]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f023 0201 	bic.w	r2, r3, #1
 80088dc:	4985      	ldr	r1, [pc, #532]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e4:	4b83      	ldr	r3, [pc, #524]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d001      	beq.n	80088f6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e0f9      	b.n	8008aea <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d008      	beq.n	8008914 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008902:	4b7d      	ldr	r3, [pc, #500]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	497a      	ldr	r1, [pc, #488]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 8008910:	4313      	orrs	r3, r2
 8008912:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 808e 	beq.w	8008a3e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	2b02      	cmp	r3, #2
 8008928:	d107      	bne.n	800893a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800892a:	4b73      	ldr	r3, [pc, #460]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d121      	bne.n	800897a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e0d7      	b.n	8008aea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	2b03      	cmp	r3, #3
 8008940:	d107      	bne.n	8008952 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008942:	4b6d      	ldr	r3, [pc, #436]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d115      	bne.n	800897a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e0cb      	b.n	8008aea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d107      	bne.n	800896a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800895a:	4b67      	ldr	r3, [pc, #412]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d109      	bne.n	800897a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e0bf      	b.n	8008aea <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800896a:	4b63      	ldr	r3, [pc, #396]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e0b7      	b.n	8008aea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800897a:	4b5f      	ldr	r3, [pc, #380]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f023 0203 	bic.w	r2, r3, #3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	495c      	ldr	r1, [pc, #368]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 8008988:	4313      	orrs	r3, r2
 800898a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800898c:	f7fc f9f8 	bl	8004d80 <HAL_GetTick>
 8008990:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d112      	bne.n	80089c0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800899a:	e00a      	b.n	80089b2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800899c:	f7fc f9f0 	bl	8004d80 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d901      	bls.n	80089b2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e09b      	b.n	8008aea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80089b2:	4b51      	ldr	r3, [pc, #324]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f003 030c 	and.w	r3, r3, #12
 80089ba:	2b08      	cmp	r3, #8
 80089bc:	d1ee      	bne.n	800899c <HAL_RCC_ClockConfig+0xfc>
 80089be:	e03e      	b.n	8008a3e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d112      	bne.n	80089ee <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089c8:	e00a      	b.n	80089e0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089ca:	f7fc f9d9 	bl	8004d80 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d8:	4293      	cmp	r3, r2
 80089da:	d901      	bls.n	80089e0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e084      	b.n	8008aea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089e0:	4b45      	ldr	r3, [pc, #276]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f003 030c 	and.w	r3, r3, #12
 80089e8:	2b0c      	cmp	r3, #12
 80089ea:	d1ee      	bne.n	80089ca <HAL_RCC_ClockConfig+0x12a>
 80089ec:	e027      	b.n	8008a3e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d11d      	bne.n	8008a32 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80089f6:	e00a      	b.n	8008a0e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089f8:	f7fc f9c2 	bl	8004d80 <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e06d      	b.n	8008aea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a0e:	4b3a      	ldr	r3, [pc, #232]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f003 030c 	and.w	r3, r3, #12
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d1ee      	bne.n	80089f8 <HAL_RCC_ClockConfig+0x158>
 8008a1a:	e010      	b.n	8008a3e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a1c:	f7fc f9b0 	bl	8004d80 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e05b      	b.n	8008aea <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008a32:	4b31      	ldr	r3, [pc, #196]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f003 030c 	and.w	r3, r3, #12
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1ee      	bne.n	8008a1c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a3e:	4b2d      	ldr	r3, [pc, #180]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d219      	bcs.n	8008a80 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d105      	bne.n	8008a5e <HAL_RCC_ClockConfig+0x1be>
 8008a52:	4b28      	ldr	r3, [pc, #160]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a27      	ldr	r2, [pc, #156]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 8008a58:	f043 0304 	orr.w	r3, r3, #4
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	4b25      	ldr	r3, [pc, #148]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f023 0201 	bic.w	r2, r3, #1
 8008a66:	4923      	ldr	r1, [pc, #140]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a6e:	4b21      	ldr	r3, [pc, #132]	; (8008af4 <HAL_RCC_ClockConfig+0x254>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d001      	beq.n	8008a80 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e034      	b.n	8008aea <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d008      	beq.n	8008a9e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	4917      	ldr	r1, [pc, #92]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0308 	and.w	r3, r3, #8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d009      	beq.n	8008abe <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008aaa:	4b13      	ldr	r3, [pc, #76]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	490f      	ldr	r1, [pc, #60]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008abe:	f000 f823 	bl	8008b08 <HAL_RCC_GetSysClockFreq>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <HAL_RCC_ClockConfig+0x258>)
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	091b      	lsrs	r3, r3, #4
 8008aca:	f003 030f 	and.w	r3, r3, #15
 8008ace:	490b      	ldr	r1, [pc, #44]	; (8008afc <HAL_RCC_ClockConfig+0x25c>)
 8008ad0:	5ccb      	ldrb	r3, [r1, r3]
 8008ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad6:	4a0a      	ldr	r2, [pc, #40]	; (8008b00 <HAL_RCC_ClockConfig+0x260>)
 8008ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008ada:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <HAL_RCC_ClockConfig+0x264>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fc f902 	bl	8004ce8 <HAL_InitTick>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	72fb      	strb	r3, [r7, #11]

  return status;
 8008ae8:	7afb      	ldrb	r3, [r7, #11]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	40023c00 	.word	0x40023c00
 8008af8:	40023800 	.word	0x40023800
 8008afc:	080138fc 	.word	0x080138fc
 8008b00:	20000784 	.word	0x20000784
 8008b04:	2000078c 	.word	0x2000078c

08008b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b0c:	b092      	sub	sp, #72	; 0x48
 8008b0e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8008b10:	4b79      	ldr	r3, [pc, #484]	; (8008cf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b18:	f003 030c 	and.w	r3, r3, #12
 8008b1c:	2b0c      	cmp	r3, #12
 8008b1e:	d00d      	beq.n	8008b3c <HAL_RCC_GetSysClockFreq+0x34>
 8008b20:	2b0c      	cmp	r3, #12
 8008b22:	f200 80d5 	bhi.w	8008cd0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d002      	beq.n	8008b30 <HAL_RCC_GetSysClockFreq+0x28>
 8008b2a:	2b08      	cmp	r3, #8
 8008b2c:	d003      	beq.n	8008b36 <HAL_RCC_GetSysClockFreq+0x2e>
 8008b2e:	e0cf      	b.n	8008cd0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b30:	4b72      	ldr	r3, [pc, #456]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008b32:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008b34:	e0da      	b.n	8008cec <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008b36:	4b72      	ldr	r3, [pc, #456]	; (8008d00 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008b38:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008b3a:	e0d7      	b.n	8008cec <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b3e:	0c9b      	lsrs	r3, r3, #18
 8008b40:	f003 020f 	and.w	r2, r3, #15
 8008b44:	4b6f      	ldr	r3, [pc, #444]	; (8008d04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008b46:	5c9b      	ldrb	r3, [r3, r2]
 8008b48:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4c:	0d9b      	lsrs	r3, r3, #22
 8008b4e:	f003 0303 	and.w	r3, r3, #3
 8008b52:	3301      	adds	r3, #1
 8008b54:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b56:	4b68      	ldr	r3, [pc, #416]	; (8008cf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d05d      	beq.n	8008c1e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	2200      	movs	r2, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	460d      	mov	r5, r1
 8008b6e:	4622      	mov	r2, r4
 8008b70:	462b      	mov	r3, r5
 8008b72:	f04f 0000 	mov.w	r0, #0
 8008b76:	f04f 0100 	mov.w	r1, #0
 8008b7a:	0159      	lsls	r1, r3, #5
 8008b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b80:	0150      	lsls	r0, r2, #5
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4621      	mov	r1, r4
 8008b88:	1a51      	subs	r1, r2, r1
 8008b8a:	6139      	str	r1, [r7, #16]
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	f04f 0200 	mov.w	r2, #0
 8008b98:	f04f 0300 	mov.w	r3, #0
 8008b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ba0:	4659      	mov	r1, fp
 8008ba2:	018b      	lsls	r3, r1, #6
 8008ba4:	4651      	mov	r1, sl
 8008ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008baa:	4651      	mov	r1, sl
 8008bac:	018a      	lsls	r2, r1, #6
 8008bae:	46d4      	mov	ip, sl
 8008bb0:	ebb2 080c 	subs.w	r8, r2, ip
 8008bb4:	4659      	mov	r1, fp
 8008bb6:	eb63 0901 	sbc.w	r9, r3, r1
 8008bba:	f04f 0200 	mov.w	r2, #0
 8008bbe:	f04f 0300 	mov.w	r3, #0
 8008bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bce:	4690      	mov	r8, r2
 8008bd0:	4699      	mov	r9, r3
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	eb18 0303 	adds.w	r3, r8, r3
 8008bd8:	60bb      	str	r3, [r7, #8]
 8008bda:	462b      	mov	r3, r5
 8008bdc:	eb49 0303 	adc.w	r3, r9, r3
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008bee:	4629      	mov	r1, r5
 8008bf0:	024b      	lsls	r3, r1, #9
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8008bfc:	4601      	mov	r1, r0
 8008bfe:	024a      	lsls	r2, r1, #9
 8008c00:	4610      	mov	r0, r2
 8008c02:	4619      	mov	r1, r3
 8008c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c06:	2200      	movs	r2, #0
 8008c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c10:	f7f8 fac0 	bl	8001194 <__aeabi_uldivmod>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4613      	mov	r3, r2
 8008c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c1c:	e055      	b.n	8008cca <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c20:	2200      	movs	r2, #0
 8008c22:	623b      	str	r3, [r7, #32]
 8008c24:	627a      	str	r2, [r7, #36]	; 0x24
 8008c26:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008c2a:	4642      	mov	r2, r8
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	f04f 0000 	mov.w	r0, #0
 8008c32:	f04f 0100 	mov.w	r1, #0
 8008c36:	0159      	lsls	r1, r3, #5
 8008c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c3c:	0150      	lsls	r0, r2, #5
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	46c4      	mov	ip, r8
 8008c44:	ebb2 0a0c 	subs.w	sl, r2, ip
 8008c48:	4640      	mov	r0, r8
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	468c      	mov	ip, r1
 8008c4e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8008c52:	f04f 0200 	mov.w	r2, #0
 8008c56:	f04f 0300 	mov.w	r3, #0
 8008c5a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c5e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c62:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c66:	ebb2 040a 	subs.w	r4, r2, sl
 8008c6a:	eb63 050b 	sbc.w	r5, r3, fp
 8008c6e:	f04f 0200 	mov.w	r2, #0
 8008c72:	f04f 0300 	mov.w	r3, #0
 8008c76:	00eb      	lsls	r3, r5, #3
 8008c78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c7c:	00e2      	lsls	r2, r4, #3
 8008c7e:	4614      	mov	r4, r2
 8008c80:	461d      	mov	r5, r3
 8008c82:	4603      	mov	r3, r0
 8008c84:	18e3      	adds	r3, r4, r3
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	eb45 0303 	adc.w	r3, r5, r3
 8008c8e:	607b      	str	r3, [r7, #4]
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	f04f 0300 	mov.w	r3, #0
 8008c98:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	028b      	lsls	r3, r1, #10
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8008caa:	4601      	mov	r1, r0
 8008cac:	028a      	lsls	r2, r1, #10
 8008cae:	4610      	mov	r0, r2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	61bb      	str	r3, [r7, #24]
 8008cb8:	61fa      	str	r2, [r7, #28]
 8008cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cbe:	f7f8 fa69 	bl	8001194 <__aeabi_uldivmod>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8008cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ccc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008cce:	e00d      	b.n	8008cec <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008cd0:	4b09      	ldr	r3, [pc, #36]	; (8008cf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	0b5b      	lsrs	r3, r3, #13
 8008cd6:	f003 0307 	and.w	r3, r3, #7
 8008cda:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	3301      	adds	r3, #1
 8008ce0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008cea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3748      	adds	r7, #72	; 0x48
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cf8:	40023800 	.word	0x40023800
 8008cfc:	00f42400 	.word	0x00f42400
 8008d00:	007a1200 	.word	0x007a1200
 8008d04:	080138f0 	.word	0x080138f0

08008d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d0c:	4b02      	ldr	r3, [pc, #8]	; (8008d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bc80      	pop	{r7}
 8008d16:	4770      	bx	lr
 8008d18:	20000784 	.word	0x20000784

08008d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d20:	f7ff fff2 	bl	8008d08 <HAL_RCC_GetHCLKFreq>
 8008d24:	4602      	mov	r2, r0
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	0a1b      	lsrs	r3, r3, #8
 8008d2c:	f003 0307 	and.w	r3, r3, #7
 8008d30:	4903      	ldr	r1, [pc, #12]	; (8008d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d32:	5ccb      	ldrb	r3, [r1, r3]
 8008d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	40023800 	.word	0x40023800
 8008d40:	0801390c 	.word	0x0801390c

08008d44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008d50:	4b29      	ldr	r3, [pc, #164]	; (8008df8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d12c      	bne.n	8008db6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008d5c:	4b26      	ldr	r3, [pc, #152]	; (8008df8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008d68:	4b24      	ldr	r3, [pc, #144]	; (8008dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	e016      	b.n	8008da2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d74:	4b20      	ldr	r3, [pc, #128]	; (8008df8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	4a1f      	ldr	r2, [pc, #124]	; (8008df8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d7e:	6253      	str	r3, [r2, #36]	; 0x24
 8008d80:	4b1d      	ldr	r3, [pc, #116]	; (8008df8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008d8c:	4b1b      	ldr	r3, [pc, #108]	; (8008dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008d94:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d96:	4b18      	ldr	r3, [pc, #96]	; (8008df8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008da0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008da8:	d105      	bne.n	8008db6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008db0:	d101      	bne.n	8008db6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8008db2:	2301      	movs	r3, #1
 8008db4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d105      	bne.n	8008dc8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8008dbc:	4b10      	ldr	r3, [pc, #64]	; (8008e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0f      	ldr	r2, [pc, #60]	; (8008e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008dc2:	f043 0304 	orr.w	r3, r3, #4
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f023 0201 	bic.w	r2, r3, #1
 8008dd0:	490b      	ldr	r1, [pc, #44]	; (8008e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008dd8:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d001      	beq.n	8008dea <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bc80      	pop	{r7}
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	40023800 	.word	0x40023800
 8008dfc:	40007000 	.word	0x40007000
 8008e00:	40023c00 	.word	0x40023c00

08008e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e06e      	b.n	8008ef4 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d108      	bne.n	8008e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e26:	d009      	beq.n	8008e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	61da      	str	r2, [r3, #28]
 8008e2e:	e005      	b.n	8008e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d106      	bne.n	8008e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7fb fafe 	bl	8004458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eac:	431a      	orrs	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec0:	ea42 0103 	orr.w	r1, r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	0c1a      	lsrs	r2, r3, #16
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f002 0204 	and.w	r2, r2, #4
 8008ee2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b088      	sub	sp, #32
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	603b      	str	r3, [r7, #0]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d101      	bne.n	8008f1e <HAL_SPI_Transmit+0x22>
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	e126      	b.n	800916c <HAL_SPI_Transmit+0x270>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f26:	f7fb ff2b 	bl	8004d80 <HAL_GetTick>
 8008f2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008f2c:	88fb      	ldrh	r3, [r7, #6]
 8008f2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d002      	beq.n	8008f42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f40:	e10b      	b.n	800915a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <HAL_SPI_Transmit+0x52>
 8008f48:	88fb      	ldrh	r3, [r7, #6]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d102      	bne.n	8008f54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f52:	e102      	b.n	800915a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2203      	movs	r2, #3
 8008f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	88fa      	ldrh	r2, [r7, #6]
 8008f6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	88fa      	ldrh	r2, [r7, #6]
 8008f72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f9a:	d10f      	bne.n	8008fbc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008faa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc6:	2b40      	cmp	r3, #64	; 0x40
 8008fc8:	d007      	beq.n	8008fda <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fe2:	d14b      	bne.n	800907c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <HAL_SPI_Transmit+0xf6>
 8008fec:	8afb      	ldrh	r3, [r7, #22]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d13e      	bne.n	8009070 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	881a      	ldrh	r2, [r3, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009002:	1c9a      	adds	r2, r3, #2
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800900c:	b29b      	uxth	r3, r3
 800900e:	3b01      	subs	r3, #1
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009016:	e02b      	b.n	8009070 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b02      	cmp	r3, #2
 8009024:	d112      	bne.n	800904c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	881a      	ldrh	r2, [r3, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	1c9a      	adds	r2, r3, #2
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009040:	b29b      	uxth	r3, r3
 8009042:	3b01      	subs	r3, #1
 8009044:	b29a      	uxth	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	86da      	strh	r2, [r3, #54]	; 0x36
 800904a:	e011      	b.n	8009070 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800904c:	f7fb fe98 	bl	8004d80 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d803      	bhi.n	8009064 <HAL_SPI_Transmit+0x168>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009062:	d102      	bne.n	800906a <HAL_SPI_Transmit+0x16e>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d102      	bne.n	8009070 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800906e:	e074      	b.n	800915a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009074:	b29b      	uxth	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1ce      	bne.n	8009018 <HAL_SPI_Transmit+0x11c>
 800907a:	e04c      	b.n	8009116 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <HAL_SPI_Transmit+0x18e>
 8009084:	8afb      	ldrh	r3, [r7, #22]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d140      	bne.n	800910c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	330c      	adds	r3, #12
 8009094:	7812      	ldrb	r2, [r2, #0]
 8009096:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	3b01      	subs	r3, #1
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80090b0:	e02c      	b.n	800910c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d113      	bne.n	80090e8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	330c      	adds	r3, #12
 80090ca:	7812      	ldrb	r2, [r2, #0]
 80090cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d2:	1c5a      	adds	r2, r3, #1
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090dc:	b29b      	uxth	r3, r3
 80090de:	3b01      	subs	r3, #1
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80090e6:	e011      	b.n	800910c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090e8:	f7fb fe4a 	bl	8004d80 <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d803      	bhi.n	8009100 <HAL_SPI_Transmit+0x204>
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fe:	d102      	bne.n	8009106 <HAL_SPI_Transmit+0x20a>
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d102      	bne.n	800910c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	77fb      	strb	r3, [r7, #31]
          goto error;
 800910a:	e026      	b.n	800915a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009110:	b29b      	uxth	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1cd      	bne.n	80090b2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f000 fcd0 	bl	8009ac0 <SPI_EndRxTxTransaction>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2220      	movs	r2, #32
 800912a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10a      	bne.n	800914a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009134:	2300      	movs	r3, #0
 8009136:	613b      	str	r3, [r7, #16]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	77fb      	strb	r3, [r7, #31]
 8009156:	e000      	b.n	800915a <HAL_SPI_Transmit+0x25e>
  }

error:
 8009158:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800916a:	7ffb      	ldrb	r3, [r7, #31]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3720      	adds	r7, #32
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af02      	add	r7, sp, #8
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	603b      	str	r3, [r7, #0]
 8009180:	4613      	mov	r3, r2
 8009182:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009190:	d112      	bne.n	80091b8 <HAL_SPI_Receive+0x44>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10e      	bne.n	80091b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2204      	movs	r2, #4
 800919e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80091a2:	88fa      	ldrh	r2, [r7, #6]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	4613      	mov	r3, r2
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	68b9      	ldr	r1, [r7, #8]
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f000 f8f1 	bl	8009396 <HAL_SPI_TransmitReceive>
 80091b4:	4603      	mov	r3, r0
 80091b6:	e0ea      	b.n	800938e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d101      	bne.n	80091c6 <HAL_SPI_Receive+0x52>
 80091c2:	2302      	movs	r3, #2
 80091c4:	e0e3      	b.n	800938e <HAL_SPI_Receive+0x21a>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091ce:	f7fb fdd7 	bl	8004d80 <HAL_GetTick>
 80091d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d002      	beq.n	80091e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80091e0:	2302      	movs	r3, #2
 80091e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80091e4:	e0ca      	b.n	800937c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <HAL_SPI_Receive+0x7e>
 80091ec:	88fb      	ldrh	r3, [r7, #6]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d102      	bne.n	80091f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80091f6:	e0c1      	b.n	800937c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2204      	movs	r2, #4
 80091fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	88fa      	ldrh	r2, [r7, #6]
 8009210:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	88fa      	ldrh	r2, [r7, #6]
 8009216:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800923e:	d10f      	bne.n	8009260 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800924e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800925e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926a:	2b40      	cmp	r3, #64	; 0x40
 800926c:	d007      	beq.n	800927e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800927c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d162      	bne.n	800934c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009286:	e02e      	b.n	80092e6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b01      	cmp	r3, #1
 8009294:	d115      	bne.n	80092c2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f103 020c 	add.w	r2, r3, #12
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a2:	7812      	ldrb	r2, [r2, #0]
 80092a4:	b2d2      	uxtb	r2, r2
 80092a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092c0:	e011      	b.n	80092e6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092c2:	f7fb fd5d 	bl	8004d80 <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d803      	bhi.n	80092da <HAL_SPI_Receive+0x166>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d8:	d102      	bne.n	80092e0 <HAL_SPI_Receive+0x16c>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d102      	bne.n	80092e6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80092e4:	e04a      	b.n	800937c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1cb      	bne.n	8009288 <HAL_SPI_Receive+0x114>
 80092f0:	e031      	b.n	8009356 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d113      	bne.n	8009328 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68da      	ldr	r2, [r3, #12]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930a:	b292      	uxth	r2, r2
 800930c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	1c9a      	adds	r2, r3, #2
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800931c:	b29b      	uxth	r3, r3
 800931e:	3b01      	subs	r3, #1
 8009320:	b29a      	uxth	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009326:	e011      	b.n	800934c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009328:	f7fb fd2a 	bl	8004d80 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	429a      	cmp	r2, r3
 8009336:	d803      	bhi.n	8009340 <HAL_SPI_Receive+0x1cc>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d102      	bne.n	8009346 <HAL_SPI_Receive+0x1d2>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d102      	bne.n	800934c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	75fb      	strb	r3, [r7, #23]
          goto error;
 800934a:	e017      	b.n	800937c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009350:	b29b      	uxth	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1cd      	bne.n	80092f2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f000 fb4a 	bl	80099f4 <SPI_EndRxTransaction>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d002      	beq.n	800936c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2220      	movs	r2, #32
 800936a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	75fb      	strb	r3, [r7, #23]
 8009378:	e000      	b.n	800937c <HAL_SPI_Receive+0x208>
  }

error :
 800937a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800938c:	7dfb      	ldrb	r3, [r7, #23]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b08c      	sub	sp, #48	; 0x30
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80093a4:	2301      	movs	r3, #1
 80093a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <HAL_SPI_TransmitReceive+0x26>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e18a      	b.n	80096d2 <HAL_SPI_TransmitReceive+0x33c>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093c4:	f7fb fcdc 	bl	8004d80 <HAL_GetTick>
 80093c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80093da:	887b      	ldrh	r3, [r7, #2]
 80093dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d00f      	beq.n	8009406 <HAL_SPI_TransmitReceive+0x70>
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093ec:	d107      	bne.n	80093fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d103      	bne.n	80093fe <HAL_SPI_TransmitReceive+0x68>
 80093f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	d003      	beq.n	8009406 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80093fe:	2302      	movs	r3, #2
 8009400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009404:	e15b      	b.n	80096be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d005      	beq.n	8009418 <HAL_SPI_TransmitReceive+0x82>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <HAL_SPI_TransmitReceive+0x82>
 8009412:	887b      	ldrh	r3, [r7, #2]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d103      	bne.n	8009420 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800941e:	e14e      	b.n	80096be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b04      	cmp	r3, #4
 800942a:	d003      	beq.n	8009434 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2205      	movs	r2, #5
 8009430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	887a      	ldrh	r2, [r7, #2]
 8009444:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	887a      	ldrh	r2, [r7, #2]
 800944a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	887a      	ldrh	r2, [r7, #2]
 8009456:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	887a      	ldrh	r2, [r7, #2]
 800945c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009474:	2b40      	cmp	r3, #64	; 0x40
 8009476:	d007      	beq.n	8009488 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009486:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009490:	d178      	bne.n	8009584 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <HAL_SPI_TransmitReceive+0x10a>
 800949a:	8b7b      	ldrh	r3, [r7, #26]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d166      	bne.n	800956e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a4:	881a      	ldrh	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b0:	1c9a      	adds	r2, r3, #2
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	3b01      	subs	r3, #1
 80094be:	b29a      	uxth	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094c4:	e053      	b.n	800956e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d11b      	bne.n	800950c <HAL_SPI_TransmitReceive+0x176>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d016      	beq.n	800950c <HAL_SPI_TransmitReceive+0x176>
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d113      	bne.n	800950c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e8:	881a      	ldrh	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f4:	1c9a      	adds	r2, r3, #2
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094fe:	b29b      	uxth	r3, r3
 8009500:	3b01      	subs	r3, #1
 8009502:	b29a      	uxth	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b01      	cmp	r3, #1
 8009518:	d119      	bne.n	800954e <HAL_SPI_TransmitReceive+0x1b8>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800951e:	b29b      	uxth	r3, r3
 8009520:	2b00      	cmp	r3, #0
 8009522:	d014      	beq.n	800954e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68da      	ldr	r2, [r3, #12]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952e:	b292      	uxth	r2, r2
 8009530:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	1c9a      	adds	r2, r3, #2
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009540:	b29b      	uxth	r3, r3
 8009542:	3b01      	subs	r3, #1
 8009544:	b29a      	uxth	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800954a:	2301      	movs	r3, #1
 800954c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800954e:	f7fb fc17 	bl	8004d80 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800955a:	429a      	cmp	r2, r3
 800955c:	d807      	bhi.n	800956e <HAL_SPI_TransmitReceive+0x1d8>
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009564:	d003      	beq.n	800956e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800956c:	e0a7      	b.n	80096be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009572:	b29b      	uxth	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1a6      	bne.n	80094c6 <HAL_SPI_TransmitReceive+0x130>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800957c:	b29b      	uxth	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1a1      	bne.n	80094c6 <HAL_SPI_TransmitReceive+0x130>
 8009582:	e07c      	b.n	800967e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <HAL_SPI_TransmitReceive+0x1fc>
 800958c:	8b7b      	ldrh	r3, [r7, #26]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d16b      	bne.n	800966a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	330c      	adds	r3, #12
 800959c:	7812      	ldrb	r2, [r2, #0]
 800959e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	3b01      	subs	r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095b8:	e057      	b.n	800966a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f003 0302 	and.w	r3, r3, #2
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d11c      	bne.n	8009602 <HAL_SPI_TransmitReceive+0x26c>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d017      	beq.n	8009602 <HAL_SPI_TransmitReceive+0x26c>
 80095d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d114      	bne.n	8009602 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	330c      	adds	r3, #12
 80095e2:	7812      	ldrb	r2, [r2, #0]
 80095e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	3b01      	subs	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095fe:	2300      	movs	r3, #0
 8009600:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b01      	cmp	r3, #1
 800960e:	d119      	bne.n	8009644 <HAL_SPI_TransmitReceive+0x2ae>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009614:	b29b      	uxth	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d014      	beq.n	8009644 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	b2d2      	uxtb	r2, r2
 8009626:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009636:	b29b      	uxth	r3, r3
 8009638:	3b01      	subs	r3, #1
 800963a:	b29a      	uxth	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009640:	2301      	movs	r3, #1
 8009642:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009644:	f7fb fb9c 	bl	8004d80 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009650:	429a      	cmp	r2, r3
 8009652:	d803      	bhi.n	800965c <HAL_SPI_TransmitReceive+0x2c6>
 8009654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965a:	d102      	bne.n	8009662 <HAL_SPI_TransmitReceive+0x2cc>
 800965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965e:	2b00      	cmp	r3, #0
 8009660:	d103      	bne.n	800966a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009668:	e029      	b.n	80096be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800966e:	b29b      	uxth	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1a2      	bne.n	80095ba <HAL_SPI_TransmitReceive+0x224>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009678:	b29b      	uxth	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	d19d      	bne.n	80095ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800967e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 fa1c 	bl	8009ac0 <SPI_EndRxTxTransaction>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d006      	beq.n	800969c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2220      	movs	r2, #32
 8009698:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800969a:	e010      	b.n	80096be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10b      	bne.n	80096bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	617b      	str	r3, [r7, #20]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	617b      	str	r3, [r7, #20]
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	e000      	b.n	80096be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80096bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3730      	adds	r7, #48	; 0x30
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	099b      	lsrs	r3, r3, #6
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10f      	bne.n	8009720 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	099b      	lsrs	r3, r3, #6
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	d004      	beq.n	8009720 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	4798      	blx	r3
    return;
 800971e:	e0be      	b.n	800989e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	085b      	lsrs	r3, r3, #1
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00a      	beq.n	8009742 <HAL_SPI_IRQHandler+0x66>
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	09db      	lsrs	r3, r3, #7
 8009730:	f003 0301 	and.w	r3, r3, #1
 8009734:	2b00      	cmp	r3, #0
 8009736:	d004      	beq.n	8009742 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	4798      	blx	r3
    return;
 8009740:	e0ad      	b.n	800989e <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	095b      	lsrs	r3, r3, #5
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	2b00      	cmp	r3, #0
 800974c:	d106      	bne.n	800975c <HAL_SPI_IRQHandler+0x80>
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	099b      	lsrs	r3, r3, #6
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80a1 	beq.w	800989e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	095b      	lsrs	r3, r3, #5
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 809a 	beq.w	800989e <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	099b      	lsrs	r3, r3, #6
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b00      	cmp	r3, #0
 8009774:	d023      	beq.n	80097be <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b03      	cmp	r3, #3
 8009780:	d011      	beq.n	80097a6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009786:	f043 0204 	orr.w	r2, r3, #4
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800978e:	2300      	movs	r3, #0
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	617b      	str	r3, [r7, #20]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	e00b      	b.n	80097be <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097a6:	2300      	movs	r3, #0
 80097a8:	613b      	str	r3, [r7, #16]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	613b      	str	r3, [r7, #16]
 80097ba:	693b      	ldr	r3, [r7, #16]
        return;
 80097bc:	e06f      	b.n	800989e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	095b      	lsrs	r3, r3, #5
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d014      	beq.n	80097f4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ce:	f043 0201 	orr.w	r2, r3, #1
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80097d6:	2300      	movs	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d04f      	beq.n	800989c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800980a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	d104      	bne.n	8009828 <HAL_SPI_IRQHandler+0x14c>
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	d034      	beq.n	8009892 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 0203 	bic.w	r2, r2, #3
 8009836:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d011      	beq.n	8009864 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009844:	4a17      	ldr	r2, [pc, #92]	; (80098a4 <HAL_SPI_IRQHandler+0x1c8>)
 8009846:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800984c:	4618      	mov	r0, r3
 800984e:	f7fb fbd0 	bl	8004ff2 <HAL_DMA_Abort_IT>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d005      	beq.n	8009864 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800985c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009868:	2b00      	cmp	r3, #0
 800986a:	d016      	beq.n	800989a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009870:	4a0c      	ldr	r2, [pc, #48]	; (80098a4 <HAL_SPI_IRQHandler+0x1c8>)
 8009872:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009878:	4618      	mov	r0, r3
 800987a:	f7fb fbba 	bl	8004ff2 <HAL_DMA_Abort_IT>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00a      	beq.n	800989a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009888:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009890:	e003      	b.n	800989a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f808 	bl	80098a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009898:	e000      	b.n	800989c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800989a:	bf00      	nop
    return;
 800989c:	bf00      	nop
  }
}
 800989e:	3720      	adds	r7, #32
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	080098bb 	.word	0x080098bb

080098a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bc80      	pop	{r7}
 80098b8:	4770      	bx	lr

080098ba <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7ff ffe7 	bl	80098a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098da:	bf00      	nop
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	603b      	str	r3, [r7, #0]
 80098f0:	4613      	mov	r3, r2
 80098f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80098f4:	f7fb fa44 	bl	8004d80 <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	1a9b      	subs	r3, r3, r2
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	4413      	add	r3, r2
 8009902:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009904:	f7fb fa3c 	bl	8004d80 <HAL_GetTick>
 8009908:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800990a:	4b39      	ldr	r3, [pc, #228]	; (80099f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	015b      	lsls	r3, r3, #5
 8009910:	0d1b      	lsrs	r3, r3, #20
 8009912:	69fa      	ldr	r2, [r7, #28]
 8009914:	fb02 f303 	mul.w	r3, r2, r3
 8009918:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800991a:	e054      	b.n	80099c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009922:	d050      	beq.n	80099c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009924:	f7fb fa2c 	bl	8004d80 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	429a      	cmp	r2, r3
 8009932:	d902      	bls.n	800993a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d13d      	bne.n	80099b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009952:	d111      	bne.n	8009978 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800995c:	d004      	beq.n	8009968 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009966:	d107      	bne.n	8009978 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009980:	d10f      	bne.n	80099a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e017      	b.n	80099e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4013      	ands	r3, r2
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	bf0c      	ite	eq
 80099d6:	2301      	moveq	r3, #1
 80099d8:	2300      	movne	r3, #0
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	461a      	mov	r2, r3
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d19b      	bne.n	800991c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3720      	adds	r7, #32
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20000784 	.word	0x20000784

080099f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af02      	add	r7, sp, #8
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a08:	d111      	bne.n	8009a2e <SPI_EndRxTransaction+0x3a>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a12:	d004      	beq.n	8009a1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a1c:	d107      	bne.n	8009a2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a36:	d12a      	bne.n	8009a8e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a40:	d012      	beq.n	8009a68 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	2180      	movs	r1, #128	; 0x80
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7ff ff49 	bl	80098e4 <SPI_WaitFlagStateUntilTimeout>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d02d      	beq.n	8009ab4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5c:	f043 0220 	orr.w	r2, r3, #32
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e026      	b.n	8009ab6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2101      	movs	r1, #1
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f7ff ff36 	bl	80098e4 <SPI_WaitFlagStateUntilTimeout>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d01a      	beq.n	8009ab4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a82:	f043 0220 	orr.w	r2, r3, #32
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e013      	b.n	8009ab6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2200      	movs	r2, #0
 8009a96:	2101      	movs	r1, #1
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f7ff ff23 	bl	80098e4 <SPI_WaitFlagStateUntilTimeout>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d007      	beq.n	8009ab4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa8:	f043 0220 	orr.w	r2, r3, #32
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e000      	b.n	8009ab6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af02      	add	r7, sp, #8
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009acc:	4b1b      	ldr	r3, [pc, #108]	; (8009b3c <SPI_EndRxTxTransaction+0x7c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a1b      	ldr	r2, [pc, #108]	; (8009b40 <SPI_EndRxTxTransaction+0x80>)
 8009ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad6:	0d5b      	lsrs	r3, r3, #21
 8009ad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009adc:	fb02 f303 	mul.w	r3, r2, r3
 8009ae0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009aea:	d112      	bne.n	8009b12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2200      	movs	r2, #0
 8009af4:	2180      	movs	r1, #128	; 0x80
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f7ff fef4 	bl	80098e4 <SPI_WaitFlagStateUntilTimeout>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d016      	beq.n	8009b30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b06:	f043 0220 	orr.w	r2, r3, #32
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e00f      	b.n	8009b32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00a      	beq.n	8009b2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b28:	2b80      	cmp	r3, #128	; 0x80
 8009b2a:	d0f2      	beq.n	8009b12 <SPI_EndRxTxTransaction+0x52>
 8009b2c:	e000      	b.n	8009b30 <SPI_EndRxTxTransaction+0x70>
        break;
 8009b2e:	bf00      	nop
  }

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3718      	adds	r7, #24
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20000784 	.word	0x20000784
 8009b40:	165e9f81 	.word	0x165e9f81

08009b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e031      	b.n	8009bba <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d106      	bne.n	8009b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7fa ff5c 	bl	8004a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	4619      	mov	r1, r3
 8009b82:	4610      	mov	r0, r2
 8009b84:	f000 fb3c 	bl	800a200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d001      	beq.n	8009bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e03a      	b.n	8009c52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2202      	movs	r2, #2
 8009be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f042 0201 	orr.w	r2, r2, #1
 8009bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bfc:	d00e      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0x58>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a16      	ldr	r2, [pc, #88]	; (8009c5c <HAL_TIM_Base_Start_IT+0x98>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d009      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0x58>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a14      	ldr	r2, [pc, #80]	; (8009c60 <HAL_TIM_Base_Start_IT+0x9c>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d004      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0x58>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a13      	ldr	r2, [pc, #76]	; (8009c64 <HAL_TIM_Base_Start_IT+0xa0>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d111      	bne.n	8009c40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f003 0307 	and.w	r3, r3, #7
 8009c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b06      	cmp	r3, #6
 8009c2c:	d010      	beq.n	8009c50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f042 0201 	orr.w	r2, r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c3e:	e007      	b.n	8009c50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f042 0201 	orr.w	r2, r2, #1
 8009c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bc80      	pop	{r7}
 8009c5a:	4770      	bx	lr
 8009c5c:	40000400 	.word	0x40000400
 8009c60:	40000800 	.word	0x40000800
 8009c64:	40010800 	.word	0x40010800

08009c68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e08f      	b.n	8009d9c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d106      	bne.n	8009c96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7fa ff09 	bl	8004aa8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2202      	movs	r2, #2
 8009c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	6812      	ldr	r2, [r2, #0]
 8009ca8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cac:	f023 0307 	bic.w	r3, r3, #7
 8009cb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	f000 fa9f 	bl	800a200 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6a1b      	ldr	r3, [r3, #32]
 8009cd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cea:	f023 0303 	bic.w	r3, r3, #3
 8009cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	689a      	ldr	r2, [r3, #8]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	021b      	lsls	r3, r3, #8
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	693a      	ldr	r2, [r7, #16]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009d08:	f023 030c 	bic.w	r3, r3, #12
 8009d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	021b      	lsls	r3, r3, #8
 8009d24:	4313      	orrs	r3, r2
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	011a      	lsls	r2, r3, #4
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	031b      	lsls	r3, r3, #12
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009d46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009d4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	011b      	lsls	r3, r3, #4
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009db4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009dbc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d109      	bne.n	8009dd8 <HAL_TIM_Encoder_Start+0x34>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d001      	beq.n	8009dce <HAL_TIM_Encoder_Start+0x2a>
    {
      return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e050      	b.n	8009e70 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009dd6:	e01c      	b.n	8009e12 <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d109      	bne.n	8009df2 <HAL_TIM_Encoder_Start+0x4e>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d001      	beq.n	8009de8 <HAL_TIM_Encoder_Start+0x44>
    {
      return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e043      	b.n	8009e70 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2202      	movs	r2, #2
 8009dec:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009df0:	e00f      	b.n	8009e12 <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d102      	bne.n	8009dfe <HAL_TIM_Encoder_Start+0x5a>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d001      	beq.n	8009e02 <HAL_TIM_Encoder_Start+0x5e>
    {
      return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e036      	b.n	8009e70 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2202      	movs	r2, #2
 8009e06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2202      	movs	r2, #2
 8009e0e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d003      	beq.n	8009e20 <HAL_TIM_Encoder_Start+0x7c>
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b04      	cmp	r3, #4
 8009e1c:	d008      	beq.n	8009e30 <HAL_TIM_Encoder_Start+0x8c>
 8009e1e:	e00f      	b.n	8009e40 <HAL_TIM_Encoder_Start+0x9c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2201      	movs	r2, #1
 8009e26:	2100      	movs	r1, #0
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 fae1 	bl	800a3f0 <TIM_CCxChannelCmd>
      break;
 8009e2e:	e016      	b.n	8009e5e <HAL_TIM_Encoder_Start+0xba>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2201      	movs	r2, #1
 8009e36:	2104      	movs	r1, #4
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 fad9 	bl	800a3f0 <TIM_CCxChannelCmd>
      break;
 8009e3e:	e00e      	b.n	8009e5e <HAL_TIM_Encoder_Start+0xba>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2201      	movs	r2, #1
 8009e46:	2100      	movs	r1, #0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 fad1 	bl	800a3f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2201      	movs	r2, #1
 8009e54:	2104      	movs	r1, #4
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 faca 	bl	800a3f0 <TIM_CCxChannelCmd>
      break;
 8009e5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f042 0201 	orr.w	r2, r2, #1
 8009e6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f003 0302 	and.w	r3, r3, #2
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d122      	bne.n	8009ed4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d11b      	bne.n	8009ed4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f06f 0202 	mvn.w	r2, #2
 8009ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	f003 0303 	and.w	r3, r3, #3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f985 	bl	800a1ca <HAL_TIM_IC_CaptureCallback>
 8009ec0:	e005      	b.n	8009ece <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f978 	bl	800a1b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f987 	bl	800a1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	f003 0304 	and.w	r3, r3, #4
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	d122      	bne.n	8009f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f003 0304 	and.w	r3, r3, #4
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	d11b      	bne.n	8009f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f06f 0204 	mvn.w	r2, #4
 8009ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2202      	movs	r2, #2
 8009efe:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f95b 	bl	800a1ca <HAL_TIM_IC_CaptureCallback>
 8009f14:	e005      	b.n	8009f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f94e 	bl	800a1b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f95d 	bl	800a1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	f003 0308 	and.w	r3, r3, #8
 8009f32:	2b08      	cmp	r3, #8
 8009f34:	d122      	bne.n	8009f7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	f003 0308 	and.w	r3, r3, #8
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d11b      	bne.n	8009f7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f06f 0208 	mvn.w	r2, #8
 8009f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2204      	movs	r2, #4
 8009f52:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d003      	beq.n	8009f6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f931 	bl	800a1ca <HAL_TIM_IC_CaptureCallback>
 8009f68:	e005      	b.n	8009f76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f924 	bl	800a1b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f933 	bl	800a1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	f003 0310 	and.w	r3, r3, #16
 8009f86:	2b10      	cmp	r3, #16
 8009f88:	d122      	bne.n	8009fd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	f003 0310 	and.w	r3, r3, #16
 8009f94:	2b10      	cmp	r3, #16
 8009f96:	d11b      	bne.n	8009fd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f06f 0210 	mvn.w	r2, #16
 8009fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2208      	movs	r2, #8
 8009fa6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	69db      	ldr	r3, [r3, #28]
 8009fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f907 	bl	800a1ca <HAL_TIM_IC_CaptureCallback>
 8009fbc:	e005      	b.n	8009fca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f8fa 	bl	800a1b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f909 	bl	800a1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d10e      	bne.n	8009ffc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d107      	bne.n	8009ffc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f06f 0201 	mvn.w	r2, #1
 8009ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7f9 fcb4 	bl	8003964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a006:	2b40      	cmp	r3, #64	; 0x40
 800a008:	d10e      	bne.n	800a028 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a014:	2b40      	cmp	r3, #64	; 0x40
 800a016:	d107      	bne.n	800a028 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f8e3 	bl	800a1ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a040:	2b01      	cmp	r3, #1
 800a042:	d101      	bne.n	800a048 <HAL_TIM_ConfigClockSource+0x18>
 800a044:	2302      	movs	r3, #2
 800a046:	e0b3      	b.n	800a1b0 <HAL_TIM_ConfigClockSource+0x180>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2202      	movs	r2, #2
 800a054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a06e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a080:	d03e      	beq.n	800a100 <HAL_TIM_ConfigClockSource+0xd0>
 800a082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a086:	f200 8087 	bhi.w	800a198 <HAL_TIM_ConfigClockSource+0x168>
 800a08a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a08e:	f000 8085 	beq.w	800a19c <HAL_TIM_ConfigClockSource+0x16c>
 800a092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a096:	d87f      	bhi.n	800a198 <HAL_TIM_ConfigClockSource+0x168>
 800a098:	2b70      	cmp	r3, #112	; 0x70
 800a09a:	d01a      	beq.n	800a0d2 <HAL_TIM_ConfigClockSource+0xa2>
 800a09c:	2b70      	cmp	r3, #112	; 0x70
 800a09e:	d87b      	bhi.n	800a198 <HAL_TIM_ConfigClockSource+0x168>
 800a0a0:	2b60      	cmp	r3, #96	; 0x60
 800a0a2:	d050      	beq.n	800a146 <HAL_TIM_ConfigClockSource+0x116>
 800a0a4:	2b60      	cmp	r3, #96	; 0x60
 800a0a6:	d877      	bhi.n	800a198 <HAL_TIM_ConfigClockSource+0x168>
 800a0a8:	2b50      	cmp	r3, #80	; 0x50
 800a0aa:	d03c      	beq.n	800a126 <HAL_TIM_ConfigClockSource+0xf6>
 800a0ac:	2b50      	cmp	r3, #80	; 0x50
 800a0ae:	d873      	bhi.n	800a198 <HAL_TIM_ConfigClockSource+0x168>
 800a0b0:	2b40      	cmp	r3, #64	; 0x40
 800a0b2:	d058      	beq.n	800a166 <HAL_TIM_ConfigClockSource+0x136>
 800a0b4:	2b40      	cmp	r3, #64	; 0x40
 800a0b6:	d86f      	bhi.n	800a198 <HAL_TIM_ConfigClockSource+0x168>
 800a0b8:	2b30      	cmp	r3, #48	; 0x30
 800a0ba:	d064      	beq.n	800a186 <HAL_TIM_ConfigClockSource+0x156>
 800a0bc:	2b30      	cmp	r3, #48	; 0x30
 800a0be:	d86b      	bhi.n	800a198 <HAL_TIM_ConfigClockSource+0x168>
 800a0c0:	2b20      	cmp	r3, #32
 800a0c2:	d060      	beq.n	800a186 <HAL_TIM_ConfigClockSource+0x156>
 800a0c4:	2b20      	cmp	r3, #32
 800a0c6:	d867      	bhi.n	800a198 <HAL_TIM_ConfigClockSource+0x168>
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d05c      	beq.n	800a186 <HAL_TIM_ConfigClockSource+0x156>
 800a0cc:	2b10      	cmp	r3, #16
 800a0ce:	d05a      	beq.n	800a186 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a0d0:	e062      	b.n	800a198 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	6899      	ldr	r1, [r3, #8]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	685a      	ldr	r2, [r3, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	f000 f966 	bl	800a3b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	609a      	str	r2, [r3, #8]
      break;
 800a0fe:	e04e      	b.n	800a19e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	6899      	ldr	r1, [r3, #8]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	f000 f94f 	bl	800a3b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	689a      	ldr	r2, [r3, #8]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a122:	609a      	str	r2, [r3, #8]
      break;
 800a124:	e03b      	b.n	800a19e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	6859      	ldr	r1, [r3, #4]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	461a      	mov	r2, r3
 800a134:	f000 f8c6 	bl	800a2c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2150      	movs	r1, #80	; 0x50
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 f91d 	bl	800a37e <TIM_ITRx_SetConfig>
      break;
 800a144:	e02b      	b.n	800a19e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6818      	ldr	r0, [r3, #0]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	6859      	ldr	r1, [r3, #4]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	461a      	mov	r2, r3
 800a154:	f000 f8e4 	bl	800a320 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2160      	movs	r1, #96	; 0x60
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f90d 	bl	800a37e <TIM_ITRx_SetConfig>
      break;
 800a164:	e01b      	b.n	800a19e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	6859      	ldr	r1, [r3, #4]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	461a      	mov	r2, r3
 800a174:	f000 f8a6 	bl	800a2c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2140      	movs	r1, #64	; 0x40
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f8fd 	bl	800a37e <TIM_ITRx_SetConfig>
      break;
 800a184:	e00b      	b.n	800a19e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4619      	mov	r1, r3
 800a190:	4610      	mov	r0, r2
 800a192:	f000 f8f4 	bl	800a37e <TIM_ITRx_SetConfig>
        break;
 800a196:	e002      	b.n	800a19e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a198:	bf00      	nop
 800a19a:	e000      	b.n	800a19e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a19c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr

0800a1ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b083      	sub	sp, #12
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1d2:	bf00      	nop
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bc80      	pop	{r7}
 800a1da:	4770      	bx	lr

0800a1dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bc80      	pop	{r7}
 800a1ec:	4770      	bx	lr

0800a1ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b083      	sub	sp, #12
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bc80      	pop	{r7}
 800a1fe:	4770      	bx	lr

0800a200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a216:	d007      	beq.n	800a228 <TIM_Base_SetConfig+0x28>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a25      	ldr	r2, [pc, #148]	; (800a2b0 <TIM_Base_SetConfig+0xb0>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d003      	beq.n	800a228 <TIM_Base_SetConfig+0x28>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a24      	ldr	r2, [pc, #144]	; (800a2b4 <TIM_Base_SetConfig+0xb4>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d108      	bne.n	800a23a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a22e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a240:	d013      	beq.n	800a26a <TIM_Base_SetConfig+0x6a>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a1a      	ldr	r2, [pc, #104]	; (800a2b0 <TIM_Base_SetConfig+0xb0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d00f      	beq.n	800a26a <TIM_Base_SetConfig+0x6a>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a19      	ldr	r2, [pc, #100]	; (800a2b4 <TIM_Base_SetConfig+0xb4>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d00b      	beq.n	800a26a <TIM_Base_SetConfig+0x6a>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a18      	ldr	r2, [pc, #96]	; (800a2b8 <TIM_Base_SetConfig+0xb8>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d007      	beq.n	800a26a <TIM_Base_SetConfig+0x6a>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a17      	ldr	r2, [pc, #92]	; (800a2bc <TIM_Base_SetConfig+0xbc>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d003      	beq.n	800a26a <TIM_Base_SetConfig+0x6a>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a16      	ldr	r2, [pc, #88]	; (800a2c0 <TIM_Base_SetConfig+0xc0>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d108      	bne.n	800a27c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	4313      	orrs	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	689a      	ldr	r2, [r3, #8]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	615a      	str	r2, [r3, #20]
}
 800a2a6:	bf00      	nop
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bc80      	pop	{r7}
 800a2ae:	4770      	bx	lr
 800a2b0:	40000400 	.word	0x40000400
 800a2b4:	40000800 	.word	0x40000800
 800a2b8:	40010800 	.word	0x40010800
 800a2bc:	40010c00 	.word	0x40010c00
 800a2c0:	40011000 	.word	0x40011000

0800a2c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b087      	sub	sp, #28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6a1b      	ldr	r3, [r3, #32]
 800a2d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	f023 0201 	bic.w	r2, r3, #1
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	011b      	lsls	r3, r3, #4
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f023 030a 	bic.w	r3, r3, #10
 800a300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	4313      	orrs	r3, r2
 800a308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	621a      	str	r2, [r3, #32]
}
 800a316:	bf00      	nop
 800a318:	371c      	adds	r7, #28
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bc80      	pop	{r7}
 800a31e:	4770      	bx	lr

0800a320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	f023 0210 	bic.w	r2, r3, #16
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6a1b      	ldr	r3, [r3, #32]
 800a342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a34a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	031b      	lsls	r3, r3, #12
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	4313      	orrs	r3, r2
 800a354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a35c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	011b      	lsls	r3, r3, #4
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	4313      	orrs	r3, r2
 800a366:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	621a      	str	r2, [r3, #32]
}
 800a374:	bf00      	nop
 800a376:	371c      	adds	r7, #28
 800a378:	46bd      	mov	sp, r7
 800a37a:	bc80      	pop	{r7}
 800a37c:	4770      	bx	lr

0800a37e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a37e:	b480      	push	{r7}
 800a380:	b085      	sub	sp, #20
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	f043 0307 	orr.w	r3, r3, #7
 800a3a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	609a      	str	r2, [r3, #8]
}
 800a3a8:	bf00      	nop
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bc80      	pop	{r7}
 800a3b0:	4770      	bx	lr

0800a3b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b087      	sub	sp, #28
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	60b9      	str	r1, [r7, #8]
 800a3bc:	607a      	str	r2, [r7, #4]
 800a3be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	021a      	lsls	r2, r3, #8
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	431a      	orrs	r2, r3
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	609a      	str	r2, [r3, #8]
}
 800a3e6:	bf00      	nop
 800a3e8:	371c      	adds	r7, #28
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr

0800a3f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f003 031f 	and.w	r3, r3, #31
 800a402:	2201      	movs	r2, #1
 800a404:	fa02 f303 	lsl.w	r3, r2, r3
 800a408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6a1a      	ldr	r2, [r3, #32]
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	43db      	mvns	r3, r3
 800a412:	401a      	ands	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6a1a      	ldr	r2, [r3, #32]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	f003 031f 	and.w	r3, r3, #31
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	fa01 f303 	lsl.w	r3, r1, r3
 800a428:	431a      	orrs	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	621a      	str	r2, [r3, #32]
}
 800a42e:	bf00      	nop
 800a430:	371c      	adds	r7, #28
 800a432:	46bd      	mov	sp, r7
 800a434:	bc80      	pop	{r7}
 800a436:	4770      	bx	lr

0800a438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d101      	bne.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a44c:	2302      	movs	r3, #2
 800a44e:	e046      	b.n	800a4de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	4313      	orrs	r3, r2
 800a480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a492:	d00e      	beq.n	800a4b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a13      	ldr	r2, [pc, #76]	; (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d009      	beq.n	800a4b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a12      	ldr	r2, [pc, #72]	; (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d004      	beq.n	800a4b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a10      	ldr	r2, [pc, #64]	; (800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d10c      	bne.n	800a4cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bc80      	pop	{r7}
 800a4e6:	4770      	bx	lr
 800a4e8:	40000400 	.word	0x40000400
 800a4ec:	40000800 	.word	0x40000800
 800a4f0:	40010800 	.word	0x40010800

0800a4f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a504:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a508:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bc80      	pop	{r7}
 800a51e:	4770      	bx	lr

0800a520 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a528:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a52c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a534:	b29a      	uxth	r2, r3
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	43db      	mvns	r3, r3
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	4013      	ands	r3, r2
 800a540:	b29a      	uxth	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	bc80      	pop	{r7}
 800a552:	4770      	bx	lr

0800a554 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a554:	b084      	sub	sp, #16
 800a556:	b480      	push	{r7}
 800a558:	b083      	sub	sp, #12
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	f107 0014 	add.w	r0, r7, #20
 800a562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bc80      	pop	{r7}
 800a590:	b004      	add	sp, #16
 800a592:	4770      	bx	lr

0800a594 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a594:	b480      	push	{r7}
 800a596:	b09b      	sub	sp, #108	; 0x6c
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a5b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	78db      	ldrb	r3, [r3, #3]
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d81f      	bhi.n	800a606 <USB_ActivateEndpoint+0x72>
 800a5c6:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <USB_ActivateEndpoint+0x38>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a5dd 	.word	0x0800a5dd
 800a5d0:	0800a5f9 	.word	0x0800a5f9
 800a5d4:	0800a60f 	.word	0x0800a60f
 800a5d8:	0800a5eb 	.word	0x0800a5eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a5dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a5e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5e4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a5e8:	e012      	b.n	800a610 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a5ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a5ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a5f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a5f6:	e00b      	b.n	800a610 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a5f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a5fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a600:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a604:	e004      	b.n	800a610 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800a60c:	e000      	b.n	800a610 <USB_ActivateEndpoint+0x7c>
      break;
 800a60e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	441a      	add	r2, r3
 800a61a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a61e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a62a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a62e:	b29b      	uxth	r3, r3
 800a630:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a648:	b29a      	uxth	r2, r3
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	4313      	orrs	r3, r2
 800a652:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	441a      	add	r2, r3
 800a660:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a66c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a674:	b29b      	uxth	r3, r3
 800a676:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	7b1b      	ldrb	r3, [r3, #12]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f040 8149 	bne.w	800a914 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	785b      	ldrb	r3, [r3, #1]
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 8084 	beq.w	800a794 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	617b      	str	r3, [r7, #20]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a696:	b29b      	uxth	r3, r3
 800a698:	461a      	mov	r2, r3
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	4413      	add	r3, r2
 800a69e:	617b      	str	r3, [r7, #20]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	011a      	lsls	r2, r3, #4
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6ae:	613b      	str	r3, [r7, #16]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	88db      	ldrh	r3, [r3, #6]
 800a6b4:	085b      	lsrs	r3, r3, #1
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	005b      	lsls	r3, r3, #1
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	881b      	ldrh	r3, [r3, #0]
 800a6cc:	81fb      	strh	r3, [r7, #14]
 800a6ce:	89fb      	ldrh	r3, [r7, #14]
 800a6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d01b      	beq.n	800a710 <USB_ActivateEndpoint+0x17c>
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ee:	81bb      	strh	r3, [r7, #12]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	441a      	add	r2, r3
 800a6fa:	89bb      	ldrh	r3, [r7, #12]
 800a6fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a708:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	78db      	ldrb	r3, [r3, #3]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d020      	beq.n	800a75a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	b29b      	uxth	r3, r3
 800a726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a72a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a72e:	813b      	strh	r3, [r7, #8]
 800a730:	893b      	ldrh	r3, [r7, #8]
 800a732:	f083 0320 	eor.w	r3, r3, #32
 800a736:	813b      	strh	r3, [r7, #8]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	441a      	add	r2, r3
 800a742:	893b      	ldrh	r3, [r7, #8]
 800a744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a74c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a754:	b29b      	uxth	r3, r3
 800a756:	8013      	strh	r3, [r2, #0]
 800a758:	e27f      	b.n	800ac5a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	881b      	ldrh	r3, [r3, #0]
 800a766:	b29b      	uxth	r3, r3
 800a768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a76c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a770:	817b      	strh	r3, [r7, #10]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	441a      	add	r2, r3
 800a77c:	897b      	ldrh	r3, [r7, #10]
 800a77e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a78e:	b29b      	uxth	r3, r3
 800a790:	8013      	strh	r3, [r2, #0]
 800a792:	e262      	b.n	800ac5a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a4:	4413      	add	r3, r2
 800a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	011a      	lsls	r2, r3, #4
 800a7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a7b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	88db      	ldrh	r3, [r3, #6]
 800a7bc:	085b      	lsrs	r3, r3, #1
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	4413      	add	r3, r2
 800a7da:	627b      	str	r3, [r7, #36]	; 0x24
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	011a      	lsls	r2, r3, #4
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a7ea:	623b      	str	r3, [r7, #32]
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d112      	bne.n	800a81a <USB_ActivateEndpoint+0x286>
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	801a      	strh	r2, [r3, #0]
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a80e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a812:	b29a      	uxth	r2, r3
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	801a      	strh	r2, [r3, #0]
 800a818:	e02f      	b.n	800a87a <USB_ActivateEndpoint+0x2e6>
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	2b3e      	cmp	r3, #62	; 0x3e
 800a820:	d813      	bhi.n	800a84a <USB_ActivateEndpoint+0x2b6>
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	085b      	lsrs	r3, r3, #1
 800a828:	663b      	str	r3, [r7, #96]	; 0x60
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <USB_ActivateEndpoint+0x2a8>
 800a836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a838:	3301      	adds	r3, #1
 800a83a:	663b      	str	r3, [r7, #96]	; 0x60
 800a83c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a83e:	b29b      	uxth	r3, r3
 800a840:	029b      	lsls	r3, r3, #10
 800a842:	b29a      	uxth	r2, r3
 800a844:	6a3b      	ldr	r3, [r7, #32]
 800a846:	801a      	strh	r2, [r3, #0]
 800a848:	e017      	b.n	800a87a <USB_ActivateEndpoint+0x2e6>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	095b      	lsrs	r3, r3, #5
 800a850:	663b      	str	r3, [r7, #96]	; 0x60
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	f003 031f 	and.w	r3, r3, #31
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d102      	bne.n	800a864 <USB_ActivateEndpoint+0x2d0>
 800a85e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a860:	3b01      	subs	r3, #1
 800a862:	663b      	str	r3, [r7, #96]	; 0x60
 800a864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a866:	b29b      	uxth	r3, r3
 800a868:	029b      	lsls	r3, r3, #10
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a874:	b29a      	uxth	r2, r3
 800a876:	6a3b      	ldr	r3, [r7, #32]
 800a878:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	83fb      	strh	r3, [r7, #30]
 800a888:	8bfb      	ldrh	r3, [r7, #30]
 800a88a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d01b      	beq.n	800a8ca <USB_ActivateEndpoint+0x336>
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4413      	add	r3, r2
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8a8:	83bb      	strh	r3, [r7, #28]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	441a      	add	r2, r3
 800a8b4:	8bbb      	ldrh	r3, [r7, #28]
 800a8b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4413      	add	r3, r2
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8e0:	837b      	strh	r3, [r7, #26]
 800a8e2:	8b7b      	ldrh	r3, [r7, #26]
 800a8e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a8e8:	837b      	strh	r3, [r7, #26]
 800a8ea:	8b7b      	ldrh	r3, [r7, #26]
 800a8ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a8f0:	837b      	strh	r3, [r7, #26]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	441a      	add	r2, r3
 800a8fc:	8b7b      	ldrh	r3, [r7, #26]
 800a8fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a90a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a90e:	b29b      	uxth	r3, r3
 800a910:	8013      	strh	r3, [r2, #0]
 800a912:	e1a2      	b.n	800ac5a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	b29b      	uxth	r3, r3
 800a922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a92a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	441a      	add	r2, r3
 800a938:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a93c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a944:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	65bb      	str	r3, [r7, #88]	; 0x58
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	461a      	mov	r2, r3
 800a95e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a960:	4413      	add	r3, r2
 800a962:	65bb      	str	r3, [r7, #88]	; 0x58
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	011a      	lsls	r2, r3, #4
 800a96a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a972:	657b      	str	r3, [r7, #84]	; 0x54
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	891b      	ldrh	r3, [r3, #8]
 800a978:	085b      	lsrs	r3, r3, #1
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	b29a      	uxth	r2, r3
 800a980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a982:	801a      	strh	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	653b      	str	r3, [r7, #80]	; 0x50
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a98e:	b29b      	uxth	r3, r3
 800a990:	461a      	mov	r2, r3
 800a992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a994:	4413      	add	r3, r2
 800a996:	653b      	str	r3, [r7, #80]	; 0x50
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	011a      	lsls	r2, r3, #4
 800a99e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a9a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	895b      	ldrh	r3, [r3, #10]
 800a9ac:	085b      	lsrs	r3, r3, #1
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	785b      	ldrb	r3, [r3, #1]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f040 8091 	bne.w	800aae4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	4413      	add	r3, r2
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a9d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a9d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d01b      	beq.n	800aa12 <USB_ActivateEndpoint+0x47e>
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9f0:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	441a      	add	r2, r3
 800a9fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a9fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	873b      	strh	r3, [r7, #56]	; 0x38
 800aa20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d01b      	beq.n	800aa62 <USB_ActivateEndpoint+0x4ce>
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	881b      	ldrh	r3, [r3, #0]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa40:	86fb      	strh	r3, [r7, #54]	; 0x36
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	441a      	add	r2, r3
 800aa4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa78:	86bb      	strh	r3, [r7, #52]	; 0x34
 800aa7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aa7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa80:	86bb      	strh	r3, [r7, #52]	; 0x34
 800aa82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aa84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa88:	86bb      	strh	r3, [r7, #52]	; 0x34
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	441a      	add	r2, r3
 800aa94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aa96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aabc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aac0:	867b      	strh	r3, [r7, #50]	; 0x32
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	441a      	add	r2, r3
 800aacc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aade:	b29b      	uxth	r3, r3
 800aae0:	8013      	strh	r3, [r2, #0]
 800aae2:	e0ba      	b.n	800ac5a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800aaf4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800aaf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d01d      	beq.n	800ab3c <USB_ActivateEndpoint+0x5a8>
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab16:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	441a      	add	r2, r3
 800ab24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ab28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	881b      	ldrh	r3, [r3, #0]
 800ab48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ab4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ab50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d01d      	beq.n	800ab94 <USB_ActivateEndpoint+0x600>
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	441a      	add	r2, r3
 800ab7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ab80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	78db      	ldrb	r3, [r3, #3]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d024      	beq.n	800abe6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	881b      	ldrh	r3, [r3, #0]
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800abb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800abba:	f083 0320 	eor.w	r3, r3, #32
 800abbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	441a      	add	r2, r3
 800abcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800abd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	8013      	strh	r3, [r2, #0]
 800abe4:	e01d      	b.n	800ac22 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	881b      	ldrh	r3, [r3, #0]
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abfc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	441a      	add	r2, r3
 800ac0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac38:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	441a      	add	r2, r3
 800ac44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ac46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800ac5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	376c      	adds	r7, #108	; 0x6c
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bc80      	pop	{r7}
 800ac66:	4770      	bx	lr

0800ac68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b08d      	sub	sp, #52	; 0x34
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	7b1b      	ldrb	r3, [r3, #12]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f040 808e 	bne.w	800ad98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	785b      	ldrb	r3, [r3, #1]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d044      	beq.n	800ad0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4413      	add	r3, r2
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	81bb      	strh	r3, [r7, #12]
 800ac92:	89bb      	ldrh	r3, [r7, #12]
 800ac94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d01b      	beq.n	800acd4 <USB_DeactivateEndpoint+0x6c>
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acb2:	817b      	strh	r3, [r7, #10]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	441a      	add	r2, r3
 800acbe:	897b      	ldrh	r3, [r7, #10]
 800acc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800accc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ace6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acea:	813b      	strh	r3, [r7, #8]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	441a      	add	r2, r3
 800acf6:	893b      	ldrh	r3, [r7, #8]
 800acf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	8013      	strh	r3, [r2, #0]
 800ad0c:	e192      	b.n	800b034 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	881b      	ldrh	r3, [r3, #0]
 800ad1a:	827b      	strh	r3, [r7, #18]
 800ad1c:	8a7b      	ldrh	r3, [r7, #18]
 800ad1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d01b      	beq.n	800ad5e <USB_DeactivateEndpoint+0xf6>
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad3c:	823b      	strh	r3, [r7, #16]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	441a      	add	r2, r3
 800ad48:	8a3b      	ldrh	r3, [r7, #16]
 800ad4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	881b      	ldrh	r3, [r3, #0]
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad74:	81fb      	strh	r3, [r7, #14]
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	441a      	add	r2, r3
 800ad80:	89fb      	ldrh	r3, [r7, #14]
 800ad82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	8013      	strh	r3, [r2, #0]
 800ad96:	e14d      	b.n	800b034 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	785b      	ldrb	r3, [r3, #1]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f040 80a5 	bne.w	800aeec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	843b      	strh	r3, [r7, #32]
 800adb0:	8c3b      	ldrh	r3, [r7, #32]
 800adb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d01b      	beq.n	800adf2 <USB_DeactivateEndpoint+0x18a>
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add0:	83fb      	strh	r3, [r7, #30]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	441a      	add	r2, r3
 800addc:	8bfb      	ldrh	r3, [r7, #30]
 800adde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ade2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ade6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800adea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adee:	b29b      	uxth	r3, r3
 800adf0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	83bb      	strh	r3, [r7, #28]
 800ae00:	8bbb      	ldrh	r3, [r7, #28]
 800ae02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d01b      	beq.n	800ae42 <USB_DeactivateEndpoint+0x1da>
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4413      	add	r3, r2
 800ae14:	881b      	ldrh	r3, [r3, #0]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae20:	837b      	strh	r3, [r7, #26]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	441a      	add	r2, r3
 800ae2c:	8b7b      	ldrh	r3, [r7, #26]
 800ae2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae58:	833b      	strh	r3, [r7, #24]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	441a      	add	r2, r3
 800ae64:	8b3b      	ldrh	r3, [r7, #24]
 800ae66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae90:	82fb      	strh	r3, [r7, #22]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	441a      	add	r2, r3
 800ae9c:	8afb      	ldrh	r3, [r7, #22]
 800ae9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	881b      	ldrh	r3, [r3, #0]
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aec8:	82bb      	strh	r3, [r7, #20]
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	441a      	add	r2, r3
 800aed4:	8abb      	ldrh	r3, [r7, #20]
 800aed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	8013      	strh	r3, [r2, #0]
 800aeea:	e0a3      	b.n	800b034 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800aefa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aefc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af00:	2b00      	cmp	r3, #0
 800af02:	d01b      	beq.n	800af3c <USB_DeactivateEndpoint+0x2d4>
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	b29b      	uxth	r3, r3
 800af12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	441a      	add	r2, r3
 800af26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af38:	b29b      	uxth	r3, r3
 800af3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	857b      	strh	r3, [r7, #42]	; 0x2a
 800af4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800af4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01b      	beq.n	800af8c <USB_DeactivateEndpoint+0x324>
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4413      	add	r3, r2
 800af5e:	881b      	ldrh	r3, [r3, #0]
 800af60:	b29b      	uxth	r3, r3
 800af62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af6a:	853b      	strh	r3, [r7, #40]	; 0x28
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	441a      	add	r2, r3
 800af76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af88:	b29b      	uxth	r3, r3
 800af8a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4413      	add	r3, r2
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afa2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	441a      	add	r2, r3
 800afae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800afb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	881b      	ldrh	r3, [r3, #0]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afda:	84bb      	strh	r3, [r7, #36]	; 0x24
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	441a      	add	r2, r3
 800afe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff8:	b29b      	uxth	r3, r3
 800affa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	4413      	add	r3, r2
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	b29b      	uxth	r3, r3
 800b00a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b012:	847b      	strh	r3, [r7, #34]	; 0x22
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	441a      	add	r2, r3
 800b01e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b030:	b29b      	uxth	r3, r3
 800b032:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3734      	adds	r7, #52	; 0x34
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bc80      	pop	{r7}
 800b03e:	4770      	bx	lr

0800b040 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b0cc      	sub	sp, #304	; 0x130
 800b044:	af00      	add	r7, sp, #0
 800b046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b04a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b04e:	6018      	str	r0, [r3, #0]
 800b050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b058:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b05a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b05e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	785b      	ldrb	r3, [r3, #1]
 800b066:	2b01      	cmp	r3, #1
 800b068:	f041 817d 	bne.w	800c366 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b06c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	699a      	ldr	r2, [r3, #24]
 800b078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b07c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	429a      	cmp	r2, r3
 800b086:	d908      	bls.n	800b09a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b08c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b098:	e007      	b.n	800b0aa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b09a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b09e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b0aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	7b1b      	ldrb	r3, [r3, #12]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d152      	bne.n	800b160 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b0ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6959      	ldr	r1, [r3, #20]
 800b0c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	88da      	ldrh	r2, [r3, #6]
 800b0d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b0dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b0e0:	6800      	ldr	r0, [r0, #0]
 800b0e2:	f001 ff0e 	bl	800cf02 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b0e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b0ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b0f2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b0f6:	6812      	ldr	r2, [r2, #0]
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b108:	b29b      	uxth	r3, r3
 800b10a:	4619      	mov	r1, r3
 800b10c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b110:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b114:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b118:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800b11c:	6812      	ldr	r2, [r2, #0]
 800b11e:	440a      	add	r2, r1
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	011a      	lsls	r2, r3, #4
 800b130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b134:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4413      	add	r3, r2
 800b13c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b144:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b14e:	b29a      	uxth	r2, r3
 800b150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b154:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	801a      	strh	r2, [r3, #0]
 800b15c:	f001 b8b5 	b.w	800c2ca <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	78db      	ldrb	r3, [r3, #3]
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	f040 84c6 	bne.w	800bafe <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6a1a      	ldr	r2, [r3, #32]
 800b17e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	f240 8443 	bls.w	800ba16 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800b190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b19e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b1ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	441a      	add	r2, r3
 800b1d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b1d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1e0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b1ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	6a1a      	ldr	r2, [r3, #32]
 800b1f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1fc:	1ad2      	subs	r2, r2, r3
 800b1fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b20a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b20e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	b29b      	uxth	r3, r3
 800b228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 823e 	beq.w	800b6ae <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b236:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b23a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b23e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b242:	6812      	ldr	r2, [r2, #0]
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b24a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	785b      	ldrb	r3, [r3, #1]
 800b252:	2b00      	cmp	r3, #0
 800b254:	f040 809a 	bne.w	800b38c <USB_EPStartXfer+0x34c>
 800b258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b260:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b264:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b268:	6812      	ldr	r2, [r2, #0]
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	4619      	mov	r1, r3
 800b27e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b286:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b28a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800b28e:	6812      	ldr	r2, [r2, #0]
 800b290:	440a      	add	r2, r1
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b298:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	011a      	lsls	r2, r3, #4
 800b2a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800b2b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b2ba:	601a      	str	r2, [r3, #0]
 800b2bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d122      	bne.n	800b30a <USB_EPStartXfer+0x2ca>
 800b2c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	881b      	ldrh	r3, [r3, #0]
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	801a      	strh	r2, [r3, #0]
 800b2e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	881b      	ldrh	r3, [r3, #0]
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b300:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	801a      	strh	r2, [r3, #0]
 800b308:	e079      	b.n	800b3fe <USB_EPStartXfer+0x3be>
 800b30a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b30e:	2b3e      	cmp	r3, #62	; 0x3e
 800b310:	d81b      	bhi.n	800b34a <USB_EPStartXfer+0x30a>
 800b312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b316:	085b      	lsrs	r3, r3, #1
 800b318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b31c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b320:	f003 0301 	and.w	r3, r3, #1
 800b324:	2b00      	cmp	r3, #0
 800b326:	d004      	beq.n	800b332 <USB_EPStartXfer+0x2f2>
 800b328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b32c:	3301      	adds	r3, #1
 800b32e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b336:	b29b      	uxth	r3, r3
 800b338:	029b      	lsls	r3, r3, #10
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b340:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	801a      	strh	r2, [r3, #0]
 800b348:	e059      	b.n	800b3fe <USB_EPStartXfer+0x3be>
 800b34a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b34e:	095b      	lsrs	r3, r3, #5
 800b350:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b358:	f003 031f 	and.w	r3, r3, #31
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d104      	bne.n	800b36a <USB_EPStartXfer+0x32a>
 800b360:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b364:	3b01      	subs	r3, #1
 800b366:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b36a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b36e:	b29b      	uxth	r3, r3
 800b370:	029b      	lsls	r3, r3, #10
 800b372:	b29b      	uxth	r3, r3
 800b374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b382:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	801a      	strh	r2, [r3, #0]
 800b38a:	e038      	b.n	800b3fe <USB_EPStartXfer+0x3be>
 800b38c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	785b      	ldrb	r3, [r3, #1]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d130      	bne.n	800b3fe <USB_EPStartXfer+0x3be>
 800b39c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b3b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b3ba:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800b3be:	6812      	ldr	r2, [r2, #0]
 800b3c0:	440a      	add	r2, r1
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	011a      	lsls	r2, r3, #4
 800b3d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4413      	add	r3, r2
 800b3de:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800b3e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3ea:	601a      	str	r2, [r3, #0]
 800b3ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b3fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	895b      	ldrh	r3, [r3, #10]
 800b40a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b40e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6959      	ldr	r1, [r3, #20]
 800b41a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b41e:	b29b      	uxth	r3, r3
 800b420:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b424:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b428:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b42c:	6800      	ldr	r0, [r0, #0]
 800b42e:	f001 fd68 	bl	800cf02 <USB_WritePMA>
            ep->xfer_buff += len;
 800b432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	695a      	ldr	r2, [r3, #20]
 800b43e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b442:	441a      	add	r2, r3
 800b444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	6a1a      	ldr	r2, [r3, #32]
 800b45c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d90f      	bls.n	800b48c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800b46c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6a1a      	ldr	r2, [r3, #32]
 800b478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b47c:	1ad2      	subs	r2, r2, r3
 800b47e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	621a      	str	r2, [r3, #32]
 800b48a:	e00e      	b.n	800b4aa <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800b48c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6a1b      	ldr	r3, [r3, #32]
 800b498:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800b49c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b4aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	785b      	ldrb	r3, [r3, #1]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f040 809a 	bne.w	800b5f0 <USB_EPStartXfer+0x5b0>
 800b4bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b4c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b4c8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b4cc:	6812      	ldr	r2, [r2, #0]
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b4ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b4ee:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800b4f2:	6812      	ldr	r2, [r2, #0]
 800b4f4:	440a      	add	r2, r1
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	011a      	lsls	r2, r3, #4
 800b506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b50a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4413      	add	r3, r2
 800b512:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b51a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b51e:	601a      	str	r2, [r3, #0]
 800b520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b524:	2b00      	cmp	r3, #0
 800b526:	d122      	bne.n	800b56e <USB_EPStartXfer+0x52e>
 800b528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b52c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	b29b      	uxth	r3, r3
 800b536:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b540:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	801a      	strh	r2, [r3, #0]
 800b548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b54c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	b29b      	uxth	r3, r3
 800b556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b55a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b55e:	b29a      	uxth	r2, r3
 800b560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b564:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	801a      	strh	r2, [r3, #0]
 800b56c:	e083      	b.n	800b676 <USB_EPStartXfer+0x636>
 800b56e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b572:	2b3e      	cmp	r3, #62	; 0x3e
 800b574:	d81b      	bhi.n	800b5ae <USB_EPStartXfer+0x56e>
 800b576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b57a:	085b      	lsrs	r3, r3, #1
 800b57c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b584:	f003 0301 	and.w	r3, r3, #1
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d004      	beq.n	800b596 <USB_EPStartXfer+0x556>
 800b58c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b590:	3301      	adds	r3, #1
 800b592:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b596:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	029b      	lsls	r3, r3, #10
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	801a      	strh	r2, [r3, #0]
 800b5ac:	e063      	b.n	800b676 <USB_EPStartXfer+0x636>
 800b5ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5b2:	095b      	lsrs	r3, r3, #5
 800b5b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b5b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5bc:	f003 031f 	and.w	r3, r3, #31
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d104      	bne.n	800b5ce <USB_EPStartXfer+0x58e>
 800b5c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b5ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	029b      	lsls	r3, r3, #10
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	801a      	strh	r2, [r3, #0]
 800b5ee:	e042      	b.n	800b676 <USB_EPStartXfer+0x636>
 800b5f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	785b      	ldrb	r3, [r3, #1]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d13a      	bne.n	800b676 <USB_EPStartXfer+0x636>
 800b600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b604:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b608:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b60c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b610:	6812      	ldr	r2, [r2, #0]
 800b612:	601a      	str	r2, [r3, #0]
 800b614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b622:	b29b      	uxth	r3, r3
 800b624:	4619      	mov	r1, r3
 800b626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b62a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b62e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b632:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800b636:	6812      	ldr	r2, [r2, #0]
 800b638:	440a      	add	r2, r1
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	011a      	lsls	r2, r3, #4
 800b64a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b64e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4413      	add	r3, r2
 800b656:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b65a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b65e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b662:	601a      	str	r2, [r3, #0]
 800b664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b668:	b29a      	uxth	r2, r3
 800b66a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b66e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b67a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	891b      	ldrh	r3, [r3, #8]
 800b682:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b68a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6959      	ldr	r1, [r3, #20]
 800b692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b696:	b29b      	uxth	r3, r3
 800b698:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b69c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b6a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b6a4:	6800      	ldr	r0, [r0, #0]
 800b6a6:	f001 fc2c 	bl	800cf02 <USB_WritePMA>
 800b6aa:	f000 be0e 	b.w	800c2ca <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b6ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	785b      	ldrb	r3, [r3, #1]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d16d      	bne.n	800b79a <USB_EPStartXfer+0x75a>
 800b6be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	461a      	mov	r2, r3
 800b6dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6de:	4413      	add	r3, r2
 800b6e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	011a      	lsls	r2, r3, #4
 800b6f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b6f8:	647b      	str	r3, [r7, #68]	; 0x44
 800b6fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d112      	bne.n	800b728 <USB_EPStartXfer+0x6e8>
 800b702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	b29b      	uxth	r3, r3
 800b708:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b710:	801a      	strh	r2, [r3, #0]
 800b712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	b29b      	uxth	r3, r3
 800b718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b71c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b720:	b29a      	uxth	r2, r3
 800b722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b724:	801a      	strh	r2, [r3, #0]
 800b726:	e063      	b.n	800b7f0 <USB_EPStartXfer+0x7b0>
 800b728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b72c:	2b3e      	cmp	r3, #62	; 0x3e
 800b72e:	d817      	bhi.n	800b760 <USB_EPStartXfer+0x720>
 800b730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b734:	085b      	lsrs	r3, r3, #1
 800b736:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b73a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b73e:	f003 0301 	and.w	r3, r3, #1
 800b742:	2b00      	cmp	r3, #0
 800b744:	d004      	beq.n	800b750 <USB_EPStartXfer+0x710>
 800b746:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b74a:	3301      	adds	r3, #1
 800b74c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b750:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b754:	b29b      	uxth	r3, r3
 800b756:	029b      	lsls	r3, r3, #10
 800b758:	b29a      	uxth	r2, r3
 800b75a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b75c:	801a      	strh	r2, [r3, #0]
 800b75e:	e047      	b.n	800b7f0 <USB_EPStartXfer+0x7b0>
 800b760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b764:	095b      	lsrs	r3, r3, #5
 800b766:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b76a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b76e:	f003 031f 	and.w	r3, r3, #31
 800b772:	2b00      	cmp	r3, #0
 800b774:	d104      	bne.n	800b780 <USB_EPStartXfer+0x740>
 800b776:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b77a:	3b01      	subs	r3, #1
 800b77c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b780:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b784:	b29b      	uxth	r3, r3
 800b786:	029b      	lsls	r3, r3, #10
 800b788:	b29b      	uxth	r3, r3
 800b78a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b78e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b792:	b29a      	uxth	r2, r3
 800b794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b796:	801a      	strh	r2, [r3, #0]
 800b798:	e02a      	b.n	800b7f0 <USB_EPStartXfer+0x7b0>
 800b79a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b79e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	785b      	ldrb	r3, [r3, #1]
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d122      	bne.n	800b7f0 <USB_EPStartXfer+0x7b0>
 800b7aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	653b      	str	r3, [r7, #80]	; 0x50
 800b7b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7ca:	4413      	add	r3, r2
 800b7cc:	653b      	str	r3, [r7, #80]	; 0x50
 800b7ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	011a      	lsls	r2, r3, #4
 800b7dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7de:	4413      	add	r3, r2
 800b7e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b7e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b7f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	891b      	ldrh	r3, [r3, #8]
 800b7fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	6959      	ldr	r1, [r3, #20]
 800b80c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b810:	b29b      	uxth	r3, r3
 800b812:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b816:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b81a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b81e:	6800      	ldr	r0, [r0, #0]
 800b820:	f001 fb6f 	bl	800cf02 <USB_WritePMA>
            ep->xfer_buff += len;
 800b824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	695a      	ldr	r2, [r3, #20]
 800b830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b834:	441a      	add	r2, r3
 800b836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b83a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6a1a      	ldr	r2, [r3, #32]
 800b84e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d90f      	bls.n	800b87e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800b85e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	6a1a      	ldr	r2, [r3, #32]
 800b86a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b86e:	1ad2      	subs	r2, r2, r3
 800b870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	621a      	str	r2, [r3, #32]
 800b87c:	e00e      	b.n	800b89c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800b87e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	6a1b      	ldr	r3, [r3, #32]
 800b88a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800b88e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2200      	movs	r2, #0
 800b89a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b89c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	643b      	str	r3, [r7, #64]	; 0x40
 800b8a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	785b      	ldrb	r3, [r3, #1]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d16d      	bne.n	800b994 <USB_EPStartXfer+0x954>
 800b8b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d8:	4413      	add	r3, r2
 800b8da:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	011a      	lsls	r2, r3, #4
 800b8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ec:	4413      	add	r3, r2
 800b8ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b8f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d112      	bne.n	800b922 <USB_EPStartXfer+0x8e2>
 800b8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fe:	881b      	ldrh	r3, [r3, #0]
 800b900:	b29b      	uxth	r3, r3
 800b902:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b906:	b29a      	uxth	r2, r3
 800b908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90a:	801a      	strh	r2, [r3, #0]
 800b90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	b29b      	uxth	r3, r3
 800b912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b91e:	801a      	strh	r2, [r3, #0]
 800b920:	e05d      	b.n	800b9de <USB_EPStartXfer+0x99e>
 800b922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b926:	2b3e      	cmp	r3, #62	; 0x3e
 800b928:	d817      	bhi.n	800b95a <USB_EPStartXfer+0x91a>
 800b92a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b92e:	085b      	lsrs	r3, r3, #1
 800b930:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b938:	f003 0301 	and.w	r3, r3, #1
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <USB_EPStartXfer+0x90a>
 800b940:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b944:	3301      	adds	r3, #1
 800b946:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b94a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b94e:	b29b      	uxth	r3, r3
 800b950:	029b      	lsls	r3, r3, #10
 800b952:	b29a      	uxth	r2, r3
 800b954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b956:	801a      	strh	r2, [r3, #0]
 800b958:	e041      	b.n	800b9de <USB_EPStartXfer+0x99e>
 800b95a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b95e:	095b      	lsrs	r3, r3, #5
 800b960:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b968:	f003 031f 	and.w	r3, r3, #31
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d104      	bne.n	800b97a <USB_EPStartXfer+0x93a>
 800b970:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b974:	3b01      	subs	r3, #1
 800b976:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b97a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b97e:	b29b      	uxth	r3, r3
 800b980:	029b      	lsls	r3, r3, #10
 800b982:	b29b      	uxth	r3, r3
 800b984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b990:	801a      	strh	r2, [r3, #0]
 800b992:	e024      	b.n	800b9de <USB_EPStartXfer+0x99e>
 800b994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	785b      	ldrb	r3, [r3, #1]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d11c      	bne.n	800b9de <USB_EPStartXfer+0x99e>
 800b9a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9b8:	4413      	add	r3, r2
 800b9ba:	643b      	str	r3, [r7, #64]	; 0x40
 800b9bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	011a      	lsls	r2, r3, #4
 800b9ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9cc:	4413      	add	r3, r2
 800b9ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b9de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	895b      	ldrh	r3, [r3, #10]
 800b9ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6959      	ldr	r1, [r3, #20]
 800b9fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ba04:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ba08:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ba0c:	6800      	ldr	r0, [r0, #0]
 800ba0e:	f001 fa78 	bl	800cf02 <USB_WritePMA>
 800ba12:	f000 bc5a 	b.w	800c2ca <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ba16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6a1b      	ldr	r3, [r3, #32]
 800ba22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800ba26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ba48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba4c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ba50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	441a      	add	r2, r3
 800ba6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ba6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ba82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	461a      	mov	r2, r3
 800baa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baa2:	4413      	add	r3, r2
 800baa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800baaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	011a      	lsls	r2, r3, #4
 800bab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bab6:	4413      	add	r3, r2
 800bab8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800babc:	65bb      	str	r3, [r7, #88]	; 0x58
 800babe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bac6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bacc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	891b      	ldrh	r3, [r3, #8]
 800bad4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800badc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	6959      	ldr	r1, [r3, #20]
 800bae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bae8:	b29b      	uxth	r3, r3
 800baea:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800baee:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800baf2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800baf6:	6800      	ldr	r0, [r0, #0]
 800baf8:	f001 fa03 	bl	800cf02 <USB_WritePMA>
 800bafc:	e3e5      	b.n	800c2ca <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bafe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	881b      	ldrh	r3, [r3, #0]
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb24:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800bb28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	441a      	add	r2, r3
 800bb42:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800bb46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bb52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bb5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6a1a      	ldr	r2, [r3, #32]
 800bb66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb6a:	1ad2      	subs	r2, r2, r3
 800bb6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bb78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4413      	add	r3, r2
 800bb92:	881b      	ldrh	r3, [r3, #0]
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f000 81bc 	beq.w	800bf18 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	785b      	ldrb	r3, [r3, #1]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d16d      	bne.n	800bc9a <USB_EPStartXfer+0xc5a>
 800bbbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	461a      	mov	r2, r3
 800bbdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbde:	4413      	add	r3, r2
 800bbe0:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	011a      	lsls	r2, r3, #4
 800bbf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bbf8:	677b      	str	r3, [r7, #116]	; 0x74
 800bbfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d112      	bne.n	800bc28 <USB_EPStartXfer+0xbe8>
 800bc02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc04:	881b      	ldrh	r3, [r3, #0]
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc10:	801a      	strh	r2, [r3, #0]
 800bc12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc24:	801a      	strh	r2, [r3, #0]
 800bc26:	e060      	b.n	800bcea <USB_EPStartXfer+0xcaa>
 800bc28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc2c:	2b3e      	cmp	r3, #62	; 0x3e
 800bc2e:	d817      	bhi.n	800bc60 <USB_EPStartXfer+0xc20>
 800bc30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc34:	085b      	lsrs	r3, r3, #1
 800bc36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bc3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d004      	beq.n	800bc50 <USB_EPStartXfer+0xc10>
 800bc46:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bc50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	029b      	lsls	r3, r3, #10
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc5c:	801a      	strh	r2, [r3, #0]
 800bc5e:	e044      	b.n	800bcea <USB_EPStartXfer+0xcaa>
 800bc60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc64:	095b      	lsrs	r3, r3, #5
 800bc66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bc6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc6e:	f003 031f 	and.w	r3, r3, #31
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d104      	bne.n	800bc80 <USB_EPStartXfer+0xc40>
 800bc76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bc80:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	029b      	lsls	r3, r3, #10
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc96:	801a      	strh	r2, [r3, #0]
 800bc98:	e027      	b.n	800bcea <USB_EPStartXfer+0xcaa>
 800bc9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	785b      	ldrb	r3, [r3, #1]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d11f      	bne.n	800bcea <USB_EPStartXfer+0xcaa>
 800bcaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	461a      	mov	r2, r3
 800bcbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bcc0:	4413      	add	r3, r2
 800bcc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	011a      	lsls	r2, r3, #4
 800bcd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bcd8:	4413      	add	r3, r2
 800bcda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bcde:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bce4:	b29a      	uxth	r2, r3
 800bce6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bce8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bcea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	895b      	ldrh	r3, [r3, #10]
 800bcf6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bcfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6959      	ldr	r1, [r3, #20]
 800bd06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800bd10:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800bd14:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800bd18:	6800      	ldr	r0, [r0, #0]
 800bd1a:	f001 f8f2 	bl	800cf02 <USB_WritePMA>
          ep->xfer_buff += len;
 800bd1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	695a      	ldr	r2, [r3, #20]
 800bd2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd2e:	441a      	add	r2, r3
 800bd30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800bd3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6a1a      	ldr	r2, [r3, #32]
 800bd48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d90f      	bls.n	800bd78 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800bd58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6a1a      	ldr	r2, [r3, #32]
 800bd64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd68:	1ad2      	subs	r2, r2, r3
 800bd6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	621a      	str	r2, [r3, #32]
 800bd76:	e00e      	b.n	800bd96 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800bd78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800bd88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2200      	movs	r2, #0
 800bd94:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800bd96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 8295 	beq.w	800c2ca <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bda0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bda4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	785b      	ldrb	r3, [r3, #1]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d16d      	bne.n	800be8c <USB_EPStartXfer+0xe4c>
 800bdb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	461a      	mov	r2, r3
 800bdce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdd0:	4413      	add	r3, r2
 800bdd2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	011a      	lsls	r2, r3, #4
 800bde2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bde4:	4413      	add	r3, r2
 800bde6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bdea:	667b      	str	r3, [r7, #100]	; 0x64
 800bdec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d112      	bne.n	800be1a <USB_EPStartXfer+0xdda>
 800bdf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdf6:	881b      	ldrh	r3, [r3, #0]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be02:	801a      	strh	r2, [r3, #0]
 800be04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be06:	881b      	ldrh	r3, [r3, #0]
 800be08:	b29b      	uxth	r3, r3
 800be0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be12:	b29a      	uxth	r2, r3
 800be14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be16:	801a      	strh	r2, [r3, #0]
 800be18:	e063      	b.n	800bee2 <USB_EPStartXfer+0xea2>
 800be1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be1e:	2b3e      	cmp	r3, #62	; 0x3e
 800be20:	d817      	bhi.n	800be52 <USB_EPStartXfer+0xe12>
 800be22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be26:	085b      	lsrs	r3, r3, #1
 800be28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800be2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be30:	f003 0301 	and.w	r3, r3, #1
 800be34:	2b00      	cmp	r3, #0
 800be36:	d004      	beq.n	800be42 <USB_EPStartXfer+0xe02>
 800be38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3c:	3301      	adds	r3, #1
 800be3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800be42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be46:	b29b      	uxth	r3, r3
 800be48:	029b      	lsls	r3, r3, #10
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be4e:	801a      	strh	r2, [r3, #0]
 800be50:	e047      	b.n	800bee2 <USB_EPStartXfer+0xea2>
 800be52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be56:	095b      	lsrs	r3, r3, #5
 800be58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800be5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be60:	f003 031f 	and.w	r3, r3, #31
 800be64:	2b00      	cmp	r3, #0
 800be66:	d104      	bne.n	800be72 <USB_EPStartXfer+0xe32>
 800be68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be6c:	3b01      	subs	r3, #1
 800be6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800be72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be76:	b29b      	uxth	r3, r3
 800be78:	029b      	lsls	r3, r3, #10
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be84:	b29a      	uxth	r2, r3
 800be86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be88:	801a      	strh	r2, [r3, #0]
 800be8a:	e02a      	b.n	800bee2 <USB_EPStartXfer+0xea2>
 800be8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	785b      	ldrb	r3, [r3, #1]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d122      	bne.n	800bee2 <USB_EPStartXfer+0xea2>
 800be9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	673b      	str	r3, [r7, #112]	; 0x70
 800bea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800beac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	461a      	mov	r2, r3
 800beba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bebc:	4413      	add	r3, r2
 800bebe:	673b      	str	r3, [r7, #112]	; 0x70
 800bec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	011a      	lsls	r2, r3, #4
 800bece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bed0:	4413      	add	r3, r2
 800bed2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bed6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bedc:	b29a      	uxth	r2, r3
 800bede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bee0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	891b      	ldrh	r3, [r3, #8]
 800beee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6959      	ldr	r1, [r3, #20]
 800befe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800bf08:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800bf0c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800bf10:	6800      	ldr	r0, [r0, #0]
 800bf12:	f000 fff6 	bl	800cf02 <USB_WritePMA>
 800bf16:	e1d8      	b.n	800c2ca <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bf18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	785b      	ldrb	r3, [r3, #1]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d178      	bne.n	800c01a <USB_EPStartXfer+0xfda>
 800bf28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	461a      	mov	r2, r3
 800bf48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf4c:	4413      	add	r3, r2
 800bf4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	011a      	lsls	r2, r3, #4
 800bf60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf64:	4413      	add	r3, r2
 800bf66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d116      	bne.n	800bfa4 <USB_EPStartXfer+0xf64>
 800bf76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf7a:	881b      	ldrh	r3, [r3, #0]
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf88:	801a      	strh	r2, [r3, #0]
 800bf8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfa0:	801a      	strh	r2, [r3, #0]
 800bfa2:	e06b      	b.n	800c07c <USB_EPStartXfer+0x103c>
 800bfa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfa8:	2b3e      	cmp	r3, #62	; 0x3e
 800bfaa:	d818      	bhi.n	800bfde <USB_EPStartXfer+0xf9e>
 800bfac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfb0:	085b      	lsrs	r3, r3, #1
 800bfb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800bfb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d004      	beq.n	800bfcc <USB_EPStartXfer+0xf8c>
 800bfc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800bfcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	029b      	lsls	r3, r3, #10
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfda:	801a      	strh	r2, [r3, #0]
 800bfdc:	e04e      	b.n	800c07c <USB_EPStartXfer+0x103c>
 800bfde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfe2:	095b      	lsrs	r3, r3, #5
 800bfe4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800bfe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfec:	f003 031f 	and.w	r3, r3, #31
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d104      	bne.n	800bffe <USB_EPStartXfer+0xfbe>
 800bff4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bff8:	3b01      	subs	r3, #1
 800bffa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800bffe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c002:	b29b      	uxth	r3, r3
 800c004:	029b      	lsls	r3, r3, #10
 800c006:	b29b      	uxth	r3, r3
 800c008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c010:	b29a      	uxth	r2, r3
 800c012:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c016:	801a      	strh	r2, [r3, #0]
 800c018:	e030      	b.n	800c07c <USB_EPStartXfer+0x103c>
 800c01a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c01e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	785b      	ldrb	r3, [r3, #1]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d128      	bne.n	800c07c <USB_EPStartXfer+0x103c>
 800c02a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c02e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c03c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c046:	b29b      	uxth	r3, r3
 800c048:	461a      	mov	r2, r3
 800c04a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c04e:	4413      	add	r3, r2
 800c050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	011a      	lsls	r2, r3, #4
 800c062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c066:	4413      	add	r3, r2
 800c068:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c06c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c074:	b29a      	uxth	r2, r3
 800c076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c07a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c07c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	891b      	ldrh	r3, [r3, #8]
 800c088:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c08c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6959      	ldr	r1, [r3, #20]
 800c098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c0a2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800c0a6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800c0aa:	6800      	ldr	r0, [r0, #0]
 800c0ac:	f000 ff29 	bl	800cf02 <USB_WritePMA>
          ep->xfer_buff += len;
 800c0b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	695a      	ldr	r2, [r3, #20]
 800c0bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0c0:	441a      	add	r2, r3
 800c0c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800c0ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	6a1a      	ldr	r2, [r3, #32]
 800c0da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d90f      	bls.n	800c10a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800c0ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6a1a      	ldr	r2, [r3, #32]
 800c0f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0fa:	1ad2      	subs	r2, r2, r3
 800c0fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	621a      	str	r2, [r3, #32]
 800c108:	e00e      	b.n	800c128 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800c10a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c10e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6a1b      	ldr	r3, [r3, #32]
 800c116:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800c11a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c11e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2200      	movs	r2, #0
 800c126:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800c128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f000 80cc 	beq.w	800c2ca <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c136:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	785b      	ldrb	r3, [r3, #1]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d178      	bne.n	800c242 <USB_EPStartXfer+0x1202>
 800c150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c15e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	461a      	mov	r2, r3
 800c170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c174:	4413      	add	r3, r2
 800c176:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c17a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c17e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	011a      	lsls	r2, r3, #4
 800c188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c18c:	4413      	add	r3, r2
 800c18e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c192:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d116      	bne.n	800c1cc <USB_EPStartXfer+0x118c>
 800c19e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1a2:	881b      	ldrh	r3, [r3, #0]
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1b0:	801a      	strh	r2, [r3, #0]
 800c1b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1b6:	881b      	ldrh	r3, [r3, #0]
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1c8:	801a      	strh	r2, [r3, #0]
 800c1ca:	e064      	b.n	800c296 <USB_EPStartXfer+0x1256>
 800c1cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1d0:	2b3e      	cmp	r3, #62	; 0x3e
 800c1d2:	d818      	bhi.n	800c206 <USB_EPStartXfer+0x11c6>
 800c1d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1d8:	085b      	lsrs	r3, r3, #1
 800c1da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c1de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <USB_EPStartXfer+0x11b4>
 800c1ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c1f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	029b      	lsls	r3, r3, #10
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c202:	801a      	strh	r2, [r3, #0]
 800c204:	e047      	b.n	800c296 <USB_EPStartXfer+0x1256>
 800c206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c20a:	095b      	lsrs	r3, r3, #5
 800c20c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c214:	f003 031f 	and.w	r3, r3, #31
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d104      	bne.n	800c226 <USB_EPStartXfer+0x11e6>
 800c21c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c220:	3b01      	subs	r3, #1
 800c222:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	029b      	lsls	r3, r3, #10
 800c22e:	b29b      	uxth	r3, r3
 800c230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c238:	b29a      	uxth	r2, r3
 800c23a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c23e:	801a      	strh	r2, [r3, #0]
 800c240:	e029      	b.n	800c296 <USB_EPStartXfer+0x1256>
 800c242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	785b      	ldrb	r3, [r3, #1]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d121      	bne.n	800c296 <USB_EPStartXfer+0x1256>
 800c252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c260:	b29b      	uxth	r3, r3
 800c262:	461a      	mov	r2, r3
 800c264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c268:	4413      	add	r3, r2
 800c26a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c26e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	011a      	lsls	r2, r3, #4
 800c27c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c280:	4413      	add	r3, r2
 800c282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c286:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c28a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c28e:	b29a      	uxth	r2, r3
 800c290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c294:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c29a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	895b      	ldrh	r3, [r3, #10]
 800c2a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c2a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	6959      	ldr	r1, [r3, #20]
 800c2b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c2bc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800c2c0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800c2c4:	6800      	ldr	r0, [r0, #0]
 800c2c6:	f000 fe1c 	bl	800cf02 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c2ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	881b      	ldrh	r3, [r3, #0]
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c2ec:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800c2f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2f8:	8013      	strh	r3, [r2, #0]
 800c2fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2fe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800c302:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c306:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800c30a:	8812      	ldrh	r2, [r2, #0]
 800c30c:	f082 0210 	eor.w	r2, r2, #16
 800c310:	801a      	strh	r2, [r3, #0]
 800c312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c316:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800c31a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c31e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800c322:	8812      	ldrh	r2, [r2, #0]
 800c324:	f082 0220 	eor.w	r2, r2, #32
 800c328:	801a      	strh	r2, [r3, #0]
 800c32a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c32e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	441a      	add	r2, r3
 800c344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c348:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c35a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c35e:	b29b      	uxth	r3, r3
 800c360:	8013      	strh	r3, [r2, #0]
 800c362:	f000 bc9f 	b.w	800cca4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c36a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	7b1b      	ldrb	r3, [r3, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	f040 80ae 	bne.w	800c4d4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c37c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	699a      	ldr	r2, [r3, #24]
 800c384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	691b      	ldr	r3, [r3, #16]
 800c390:	429a      	cmp	r2, r3
 800c392:	d917      	bls.n	800c3c4 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800c394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800c3a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	699a      	ldr	r2, [r3, #24]
 800c3b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3b4:	1ad2      	subs	r2, r2, r3
 800c3b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	619a      	str	r2, [r3, #24]
 800c3c2:	e00e      	b.n	800c3e2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800c3c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800c3d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c3e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c3f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	461a      	mov	r2, r3
 800c402:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c406:	4413      	add	r3, r2
 800c408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c40c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	011a      	lsls	r2, r3, #4
 800c41a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c41e:	4413      	add	r3, r2
 800c420:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d116      	bne.n	800c45e <USB_EPStartXfer+0x141e>
 800c430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c434:	881b      	ldrh	r3, [r3, #0]
 800c436:	b29b      	uxth	r3, r3
 800c438:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c442:	801a      	strh	r2, [r3, #0]
 800c444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c454:	b29a      	uxth	r2, r3
 800c456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c45a:	801a      	strh	r2, [r3, #0]
 800c45c:	e3e8      	b.n	800cc30 <USB_EPStartXfer+0x1bf0>
 800c45e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c462:	2b3e      	cmp	r3, #62	; 0x3e
 800c464:	d818      	bhi.n	800c498 <USB_EPStartXfer+0x1458>
 800c466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c46a:	085b      	lsrs	r3, r3, #1
 800c46c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c474:	f003 0301 	and.w	r3, r3, #1
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <USB_EPStartXfer+0x1446>
 800c47c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c480:	3301      	adds	r3, #1
 800c482:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c486:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	029b      	lsls	r3, r3, #10
 800c48e:	b29a      	uxth	r2, r3
 800c490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c494:	801a      	strh	r2, [r3, #0]
 800c496:	e3cb      	b.n	800cc30 <USB_EPStartXfer+0x1bf0>
 800c498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c49c:	095b      	lsrs	r3, r3, #5
 800c49e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c4a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c4a6:	f003 031f 	and.w	r3, r3, #31
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d104      	bne.n	800c4b8 <USB_EPStartXfer+0x1478>
 800c4ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c4b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	029b      	lsls	r3, r3, #10
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4d0:	801a      	strh	r2, [r3, #0]
 800c4d2:	e3ad      	b.n	800cc30 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c4d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	78db      	ldrb	r3, [r3, #3]
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	f040 8200 	bne.w	800c8e6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c4e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	785b      	ldrb	r3, [r3, #1]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f040 8091 	bne.w	800c61a <USB_EPStartXfer+0x15da>
 800c4f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c50a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c514:	b29b      	uxth	r3, r3
 800c516:	461a      	mov	r2, r3
 800c518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c51c:	4413      	add	r3, r2
 800c51e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	011a      	lsls	r2, r3, #4
 800c530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c534:	4413      	add	r3, r2
 800c536:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c53a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c53e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d116      	bne.n	800c57c <USB_EPStartXfer+0x153c>
 800c54e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c552:	881b      	ldrh	r3, [r3, #0]
 800c554:	b29b      	uxth	r3, r3
 800c556:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c560:	801a      	strh	r2, [r3, #0]
 800c562:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	b29b      	uxth	r3, r3
 800c56a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c56e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c572:	b29a      	uxth	r2, r3
 800c574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c578:	801a      	strh	r2, [r3, #0]
 800c57a:	e083      	b.n	800c684 <USB_EPStartXfer+0x1644>
 800c57c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	2b3e      	cmp	r3, #62	; 0x3e
 800c58a:	d820      	bhi.n	800c5ce <USB_EPStartXfer+0x158e>
 800c58c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	691b      	ldr	r3, [r3, #16]
 800c598:	085b      	lsrs	r3, r3, #1
 800c59a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c59e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c5a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	f003 0301 	and.w	r3, r3, #1
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d004      	beq.n	800c5bc <USB_EPStartXfer+0x157c>
 800c5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	029b      	lsls	r3, r3, #10
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c5ca:	801a      	strh	r2, [r3, #0]
 800c5cc:	e05a      	b.n	800c684 <USB_EPStartXfer+0x1644>
 800c5ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c5d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	095b      	lsrs	r3, r3, #5
 800c5dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c5e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c5e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	691b      	ldr	r3, [r3, #16]
 800c5ec:	f003 031f 	and.w	r3, r3, #31
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d104      	bne.n	800c5fe <USB_EPStartXfer+0x15be>
 800c5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c602:	b29b      	uxth	r3, r3
 800c604:	029b      	lsls	r3, r3, #10
 800c606:	b29b      	uxth	r3, r3
 800c608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c60c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c610:	b29a      	uxth	r2, r3
 800c612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c616:	801a      	strh	r2, [r3, #0]
 800c618:	e034      	b.n	800c684 <USB_EPStartXfer+0x1644>
 800c61a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c61e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	785b      	ldrb	r3, [r3, #1]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d12c      	bne.n	800c684 <USB_EPStartXfer+0x1644>
 800c62a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c62e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c63c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c646:	b29b      	uxth	r3, r3
 800c648:	461a      	mov	r2, r3
 800c64a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c64e:	4413      	add	r3, r2
 800c650:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	011a      	lsls	r2, r3, #4
 800c662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c666:	4413      	add	r3, r2
 800c668:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c66c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c682:	801a      	strh	r2, [r3, #0]
 800c684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	785b      	ldrb	r3, [r3, #1]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f040 8091 	bne.w	800c7c6 <USB_EPStartXfer+0x1786>
 800c6a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c6b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c6ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	011a      	lsls	r2, r3, #4
 800c6dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c6e0:	4413      	add	r3, r2
 800c6e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c6e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d116      	bne.n	800c728 <USB_EPStartXfer+0x16e8>
 800c6fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	b29b      	uxth	r3, r3
 800c702:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c706:	b29a      	uxth	r2, r3
 800c708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c70c:	801a      	strh	r2, [r3, #0]
 800c70e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c712:	881b      	ldrh	r3, [r3, #0]
 800c714:	b29b      	uxth	r3, r3
 800c716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c71a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c71e:	b29a      	uxth	r2, r3
 800c720:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c724:	801a      	strh	r2, [r3, #0]
 800c726:	e07c      	b.n	800c822 <USB_EPStartXfer+0x17e2>
 800c728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c72c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	2b3e      	cmp	r3, #62	; 0x3e
 800c736:	d820      	bhi.n	800c77a <USB_EPStartXfer+0x173a>
 800c738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c73c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	085b      	lsrs	r3, r3, #1
 800c746:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c74a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c74e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	f003 0301 	and.w	r3, r3, #1
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d004      	beq.n	800c768 <USB_EPStartXfer+0x1728>
 800c75e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c762:	3301      	adds	r3, #1
 800c764:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c768:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	029b      	lsls	r3, r3, #10
 800c770:	b29a      	uxth	r2, r3
 800c772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c776:	801a      	strh	r2, [r3, #0]
 800c778:	e053      	b.n	800c822 <USB_EPStartXfer+0x17e2>
 800c77a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c77e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	095b      	lsrs	r3, r3, #5
 800c788:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c78c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	f003 031f 	and.w	r3, r3, #31
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d104      	bne.n	800c7aa <USB_EPStartXfer+0x176a>
 800c7a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c7aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	029b      	lsls	r3, r3, #10
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7c2:	801a      	strh	r2, [r3, #0]
 800c7c4:	e02d      	b.n	800c822 <USB_EPStartXfer+0x17e2>
 800c7c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	785b      	ldrb	r3, [r3, #1]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d125      	bne.n	800c822 <USB_EPStartXfer+0x17e2>
 800c7d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c7ec:	4413      	add	r3, r2
 800c7ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c7f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	011a      	lsls	r2, r3, #4
 800c800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c804:	4413      	add	r3, r2
 800c806:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c80a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c80e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c820:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	69db      	ldr	r3, [r3, #28]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 81fe 	beq.w	800cc30 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	4413      	add	r3, r2
 800c84e:	881b      	ldrh	r3, [r3, #0]
 800c850:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c854:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d005      	beq.n	800c86c <USB_EPStartXfer+0x182c>
 800c860:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10d      	bne.n	800c888 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c86c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c874:	2b00      	cmp	r3, #0
 800c876:	f040 81db 	bne.w	800cc30 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c87a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c882:	2b00      	cmp	r3, #0
 800c884:	f040 81d4 	bne.w	800cc30 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800c888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c88c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	4413      	add	r3, r2
 800c8a2:	881b      	ldrh	r3, [r3, #0]
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ae:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800c8b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c8b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c8c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	441a      	add	r2, r3
 800c8cc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800c8d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c8dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	8013      	strh	r3, [r2, #0]
 800c8e4:	e1a4      	b.n	800cc30 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c8e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c8ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	78db      	ldrb	r3, [r3, #3]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	f040 819a 	bne.w	800cc2c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c8f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c8fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	699a      	ldr	r2, [r3, #24]
 800c904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	429a      	cmp	r2, r3
 800c912:	d917      	bls.n	800c944 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800c914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	691b      	ldr	r3, [r3, #16]
 800c920:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800c924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	699a      	ldr	r2, [r3, #24]
 800c930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c934:	1ad2      	subs	r2, r2, r3
 800c936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c93a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	619a      	str	r2, [r3, #24]
 800c942:	e00e      	b.n	800c962 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800c944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	699b      	ldr	r3, [r3, #24]
 800c950:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800c954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2200      	movs	r2, #0
 800c960:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	785b      	ldrb	r3, [r3, #1]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d178      	bne.n	800ca64 <USB_EPStartXfer+0x1a24>
 800c972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c98e:	b29b      	uxth	r3, r3
 800c990:	461a      	mov	r2, r3
 800c992:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c996:	4413      	add	r3, r2
 800c998:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c99c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	011a      	lsls	r2, r3, #4
 800c9aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c9b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c9b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d116      	bne.n	800c9ee <USB_EPStartXfer+0x19ae>
 800c9c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c9c4:	881b      	ldrh	r3, [r3, #0]
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c9d2:	801a      	strh	r2, [r3, #0]
 800c9d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c9d8:	881b      	ldrh	r3, [r3, #0]
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c9ea:	801a      	strh	r2, [r3, #0]
 800c9ec:	e06b      	b.n	800cac6 <USB_EPStartXfer+0x1a86>
 800c9ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9f2:	2b3e      	cmp	r3, #62	; 0x3e
 800c9f4:	d818      	bhi.n	800ca28 <USB_EPStartXfer+0x19e8>
 800c9f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9fa:	085b      	lsrs	r3, r3, #1
 800c9fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ca00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca04:	f003 0301 	and.w	r3, r3, #1
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d004      	beq.n	800ca16 <USB_EPStartXfer+0x19d6>
 800ca0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca10:	3301      	adds	r3, #1
 800ca12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ca16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	029b      	lsls	r3, r3, #10
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ca24:	801a      	strh	r2, [r3, #0]
 800ca26:	e04e      	b.n	800cac6 <USB_EPStartXfer+0x1a86>
 800ca28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca2c:	095b      	lsrs	r3, r3, #5
 800ca2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ca32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca36:	f003 031f 	and.w	r3, r3, #31
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d104      	bne.n	800ca48 <USB_EPStartXfer+0x1a08>
 800ca3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca42:	3b01      	subs	r3, #1
 800ca44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ca48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	029b      	lsls	r3, r3, #10
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ca60:	801a      	strh	r2, [r3, #0]
 800ca62:	e030      	b.n	800cac6 <USB_EPStartXfer+0x1a86>
 800ca64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	785b      	ldrb	r3, [r3, #1]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d128      	bne.n	800cac6 <USB_EPStartXfer+0x1a86>
 800ca74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ca82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	461a      	mov	r2, r3
 800ca94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca98:	4413      	add	r3, r2
 800ca9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ca9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800caa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	011a      	lsls	r2, r3, #4
 800caac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cab0:	4413      	add	r3, r2
 800cab2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cab6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800caba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cac4:	801a      	strh	r2, [r3, #0]
 800cac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800caca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	785b      	ldrb	r3, [r3, #1]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d178      	bne.n	800cbd6 <USB_EPStartXfer+0x1b96>
 800cae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800caf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800caf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	461a      	mov	r2, r3
 800cb04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb08:	4413      	add	r3, r2
 800cb0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cb0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	011a      	lsls	r2, r3, #4
 800cb1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb20:	4413      	add	r3, r2
 800cb22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cb26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d116      	bne.n	800cb60 <USB_EPStartXfer+0x1b20>
 800cb32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb36:	881b      	ldrh	r3, [r3, #0]
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb44:	801a      	strh	r2, [r3, #0]
 800cb46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb4a:	881b      	ldrh	r3, [r3, #0]
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb5c:	801a      	strh	r2, [r3, #0]
 800cb5e:	e067      	b.n	800cc30 <USB_EPStartXfer+0x1bf0>
 800cb60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb64:	2b3e      	cmp	r3, #62	; 0x3e
 800cb66:	d818      	bhi.n	800cb9a <USB_EPStartXfer+0x1b5a>
 800cb68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb6c:	085b      	lsrs	r3, r3, #1
 800cb6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cb72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb76:	f003 0301 	and.w	r3, r3, #1
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d004      	beq.n	800cb88 <USB_EPStartXfer+0x1b48>
 800cb7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cb82:	3301      	adds	r3, #1
 800cb84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cb88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	029b      	lsls	r3, r3, #10
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb96:	801a      	strh	r2, [r3, #0]
 800cb98:	e04a      	b.n	800cc30 <USB_EPStartXfer+0x1bf0>
 800cb9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb9e:	095b      	lsrs	r3, r3, #5
 800cba0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cba8:	f003 031f 	and.w	r3, r3, #31
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d104      	bne.n	800cbba <USB_EPStartXfer+0x1b7a>
 800cbb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cbba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	029b      	lsls	r3, r3, #10
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cbd2:	801a      	strh	r2, [r3, #0]
 800cbd4:	e02c      	b.n	800cc30 <USB_EPStartXfer+0x1bf0>
 800cbd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	785b      	ldrb	r3, [r3, #1]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d124      	bne.n	800cc30 <USB_EPStartXfer+0x1bf0>
 800cbe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbfc:	4413      	add	r3, r2
 800cbfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cc02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	011a      	lsls	r2, r3, #4
 800cc10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc14:	4413      	add	r3, r2
 800cc16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cc1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cc1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc28:	801a      	strh	r2, [r3, #0]
 800cc2a:	e001      	b.n	800cc30 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e03a      	b.n	800cca6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	881b      	ldrh	r3, [r3, #0]
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc56:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800cc5a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800cc5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cc62:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800cc66:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800cc6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cc6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800cc72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	441a      	add	r2, r3
 800cc8c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800cc90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	785b      	ldrb	r3, [r3, #1]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d020      	beq.n	800cd04 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	4413      	add	r3, r2
 800cccc:	881b      	ldrh	r3, [r3, #0]
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccd8:	81bb      	strh	r3, [r7, #12]
 800ccda:	89bb      	ldrh	r3, [r7, #12]
 800ccdc:	f083 0310 	eor.w	r3, r3, #16
 800cce0:	81bb      	strh	r3, [r7, #12]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	441a      	add	r2, r3
 800ccec:	89bb      	ldrh	r3, [r7, #12]
 800ccee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	8013      	strh	r3, [r2, #0]
 800cd02:	e01f      	b.n	800cd44 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4413      	add	r3, r2
 800cd0e:	881b      	ldrh	r3, [r3, #0]
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd1a:	81fb      	strh	r3, [r7, #14]
 800cd1c:	89fb      	ldrh	r3, [r7, #14]
 800cd1e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cd22:	81fb      	strh	r3, [r7, #14]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	441a      	add	r2, r3
 800cd2e:	89fb      	ldrh	r3, [r7, #14]
 800cd30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bc80      	pop	{r7}
 800cd4e:	4770      	bx	lr

0800cd50 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b087      	sub	sp, #28
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	7b1b      	ldrb	r3, [r3, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f040 809d 	bne.w	800ce9e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	785b      	ldrb	r3, [r3, #1]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d04c      	beq.n	800ce06 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	4413      	add	r3, r2
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	823b      	strh	r3, [r7, #16]
 800cd7a:	8a3b      	ldrh	r3, [r7, #16]
 800cd7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d01b      	beq.n	800cdbc <USB_EPClearStall+0x6c>
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	4413      	add	r3, r2
 800cd8e:	881b      	ldrh	r3, [r3, #0]
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd9a:	81fb      	strh	r3, [r7, #14]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	441a      	add	r2, r3
 800cda6:	89fb      	ldrh	r3, [r7, #14]
 800cda8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	78db      	ldrb	r3, [r3, #3]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d06c      	beq.n	800ce9e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4413      	add	r3, r2
 800cdce:	881b      	ldrh	r3, [r3, #0]
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdda:	81bb      	strh	r3, [r7, #12]
 800cddc:	89bb      	ldrh	r3, [r7, #12]
 800cdde:	f083 0320 	eor.w	r3, r3, #32
 800cde2:	81bb      	strh	r3, [r7, #12]
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	441a      	add	r2, r3
 800cdee:	89bb      	ldrh	r3, [r7, #12]
 800cdf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	8013      	strh	r3, [r2, #0]
 800ce04:	e04b      	b.n	800ce9e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	4413      	add	r3, r2
 800ce10:	881b      	ldrh	r3, [r3, #0]
 800ce12:	82fb      	strh	r3, [r7, #22]
 800ce14:	8afb      	ldrh	r3, [r7, #22]
 800ce16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d01b      	beq.n	800ce56 <USB_EPClearStall+0x106>
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4413      	add	r3, r2
 800ce28:	881b      	ldrh	r3, [r3, #0]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce34:	82bb      	strh	r3, [r7, #20]
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	441a      	add	r2, r3
 800ce40:	8abb      	ldrh	r3, [r7, #20]
 800ce42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ce4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4413      	add	r3, r2
 800ce60:	881b      	ldrh	r3, [r3, #0]
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce6c:	827b      	strh	r3, [r7, #18]
 800ce6e:	8a7b      	ldrh	r3, [r7, #18]
 800ce70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ce74:	827b      	strh	r3, [r7, #18]
 800ce76:	8a7b      	ldrh	r3, [r7, #18]
 800ce78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ce7c:	827b      	strh	r3, [r7, #18]
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	441a      	add	r2, r3
 800ce88:	8a7b      	ldrh	r3, [r7, #18]
 800ce8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	371c      	adds	r7, #28
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bc80      	pop	{r7}
 800cea8:	4770      	bx	lr

0800ceaa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ceaa:	b480      	push	{r7}
 800ceac:	b083      	sub	sp, #12
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ceb6:	78fb      	ldrb	r3, [r7, #3]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d103      	bne.n	800cec4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2280      	movs	r2, #128	; 0x80
 800cec0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bc80      	pop	{r7}
 800cece:	4770      	bx	lr

0800ced0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ced8:	2300      	movs	r3, #0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	370c      	adds	r7, #12
 800cede:	46bd      	mov	sp, r7
 800cee0:	bc80      	pop	{r7}
 800cee2:	4770      	bx	lr

0800cee4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b085      	sub	sp, #20
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cef6:	68fb      	ldr	r3, [r7, #12]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3714      	adds	r7, #20
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bc80      	pop	{r7}
 800cf00:	4770      	bx	lr

0800cf02 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cf02:	b480      	push	{r7}
 800cf04:	b08d      	sub	sp, #52	; 0x34
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	60f8      	str	r0, [r7, #12]
 800cf0a:	60b9      	str	r1, [r7, #8]
 800cf0c:	4611      	mov	r1, r2
 800cf0e:	461a      	mov	r2, r3
 800cf10:	460b      	mov	r3, r1
 800cf12:	80fb      	strh	r3, [r7, #6]
 800cf14:	4613      	mov	r3, r2
 800cf16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cf18:	88bb      	ldrh	r3, [r7, #4]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	085b      	lsrs	r3, r3, #1
 800cf1e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cf28:	88fb      	ldrh	r3, [r7, #6]
 800cf2a:	005a      	lsls	r2, r3, #1
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	4413      	add	r3, r2
 800cf30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf34:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf3a:	e01e      	b.n	800cf7a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800cf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf44:	3301      	adds	r3, #1
 800cf46:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800cf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	021b      	lsls	r3, r3, #8
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	461a      	mov	r2, r3
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf64:	3302      	adds	r3, #2
 800cf66:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800cf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6a:	3302      	adds	r3, #2
 800cf6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	3301      	adds	r3, #1
 800cf72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf76:	3b01      	subs	r3, #1
 800cf78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1dd      	bne.n	800cf3c <USB_WritePMA+0x3a>
  }
}
 800cf80:	bf00      	nop
 800cf82:	bf00      	nop
 800cf84:	3734      	adds	r7, #52	; 0x34
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bc80      	pop	{r7}
 800cf8a:	4770      	bx	lr

0800cf8c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b08b      	sub	sp, #44	; 0x2c
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	4611      	mov	r1, r2
 800cf98:	461a      	mov	r2, r3
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	80fb      	strh	r3, [r7, #6]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cfa2:	88bb      	ldrh	r3, [r7, #4]
 800cfa4:	085b      	lsrs	r3, r3, #1
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cfb2:	88fb      	ldrh	r3, [r7, #6]
 800cfb4:	005a      	lsls	r2, r3, #1
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	4413      	add	r3, r2
 800cfba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cfbe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	627b      	str	r3, [r7, #36]	; 0x24
 800cfc4:	e01b      	b.n	800cffe <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800cfc6:	6a3b      	ldr	r3, [r7, #32]
 800cfc8:	881b      	ldrh	r3, [r3, #0]
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cfce:	6a3b      	ldr	r3, [r7, #32]
 800cfd0:	3302      	adds	r3, #2
 800cfd2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	b2da      	uxtb	r2, r3
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	0a1b      	lsrs	r3, r3, #8
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	3301      	adds	r3, #1
 800cff0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800cff2:	6a3b      	ldr	r3, [r7, #32]
 800cff4:	3302      	adds	r3, #2
 800cff6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	3b01      	subs	r3, #1
 800cffc:	627b      	str	r3, [r7, #36]	; 0x24
 800cffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1e0      	bne.n	800cfc6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800d004:	88bb      	ldrh	r3, [r7, #4]
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d007      	beq.n	800d020 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800d010:	6a3b      	ldr	r3, [r7, #32]
 800d012:	881b      	ldrh	r3, [r3, #0]
 800d014:	b29b      	uxth	r3, r3
 800d016:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	701a      	strb	r2, [r3, #0]
  }
}
 800d020:	bf00      	nop
 800d022:	372c      	adds	r7, #44	; 0x2c
 800d024:	46bd      	mov	sp, r7
 800d026:	bc80      	pop	{r7}
 800d028:	4770      	bx	lr

0800d02a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b084      	sub	sp, #16
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	460b      	mov	r3, r1
 800d034:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d036:	2300      	movs	r3, #0
 800d038:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	7c1b      	ldrb	r3, [r3, #16]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d115      	bne.n	800d06e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d042:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d046:	2202      	movs	r2, #2
 800d048:	2181      	movs	r1, #129	; 0x81
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f001 fe75 	bl	800ed3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d05a:	2202      	movs	r2, #2
 800d05c:	2101      	movs	r1, #1
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f001 fe6b 	bl	800ed3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800d06c:	e012      	b.n	800d094 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d06e:	2340      	movs	r3, #64	; 0x40
 800d070:	2202      	movs	r2, #2
 800d072:	2181      	movs	r1, #129	; 0x81
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f001 fe60 	bl	800ed3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d080:	2340      	movs	r3, #64	; 0x40
 800d082:	2202      	movs	r2, #2
 800d084:	2101      	movs	r1, #1
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f001 fe57 	bl	800ed3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2201      	movs	r2, #1
 800d090:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d094:	2308      	movs	r3, #8
 800d096:	2203      	movs	r2, #3
 800d098:	2182      	movs	r1, #130	; 0x82
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f001 fe4d 	bl	800ed3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800d0a6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d0aa:	f001 ff6d 	bl	800ef88 <USBD_static_malloc>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d102      	bne.n	800d0c6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	73fb      	strb	r3, [r7, #15]
 800d0c4:	e026      	b.n	800d114 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d0cc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	7c1b      	ldrb	r3, [r3, #16]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d109      	bne.n	800d104 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0fa:	2101      	movs	r1, #1
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f001 ff0d 	bl	800ef1c <USBD_LL_PrepareReceive>
 800d102:	e007      	b.n	800d114 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d10a:	2340      	movs	r3, #64	; 0x40
 800d10c:	2101      	movs	r1, #1
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f001 ff04 	bl	800ef1c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d114:	7bfb      	ldrb	r3, [r7, #15]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b084      	sub	sp, #16
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	460b      	mov	r3, r1
 800d128:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d12e:	2181      	movs	r1, #129	; 0x81
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f001 fe28 	bl	800ed86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d13c:	2101      	movs	r1, #1
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f001 fe21 	bl	800ed86 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d14c:	2182      	movs	r1, #130	; 0x82
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f001 fe19 	bl	800ed86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00e      	beq.n	800d182 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d174:	4618      	mov	r0, r3
 800d176:	f001 ff13 	bl	800efa0 <USBD_static_free>
    pdev->pClassData = NULL;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800d182:	7bfb      	ldrb	r3, [r7, #15]
}
 800d184:	4618      	mov	r0, r3
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b086      	sub	sp, #24
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d19c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d039      	beq.n	800d22a <USBD_CDC_Setup+0x9e>
 800d1b6:	2b20      	cmp	r3, #32
 800d1b8:	d17f      	bne.n	800d2ba <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	88db      	ldrh	r3, [r3, #6]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d029      	beq.n	800d216 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	b25b      	sxtb	r3, r3
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	da11      	bge.n	800d1f0 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800d1d8:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	88d2      	ldrh	r2, [r2, #6]
 800d1de:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d1e0:	6939      	ldr	r1, [r7, #16]
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	88db      	ldrh	r3, [r3, #6]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f001 f994 	bl	800e516 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800d1ee:	e06b      	b.n	800d2c8 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	785a      	ldrb	r2, [r3, #1]
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	88db      	ldrh	r3, [r3, #6]
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d206:	6939      	ldr	r1, [r7, #16]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	88db      	ldrh	r3, [r3, #6]
 800d20c:	461a      	mov	r2, r3
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f001 f9af 	bl	800e572 <USBD_CtlPrepareRx>
    break;
 800d214:	e058      	b.n	800d2c8 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	683a      	ldr	r2, [r7, #0]
 800d220:	7850      	ldrb	r0, [r2, #1]
 800d222:	2200      	movs	r2, #0
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	4798      	blx	r3
    break;
 800d228:	e04e      	b.n	800d2c8 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	785b      	ldrb	r3, [r3, #1]
 800d22e:	2b0b      	cmp	r3, #11
 800d230:	d02e      	beq.n	800d290 <USBD_CDC_Setup+0x104>
 800d232:	2b0b      	cmp	r3, #11
 800d234:	dc38      	bgt.n	800d2a8 <USBD_CDC_Setup+0x11c>
 800d236:	2b00      	cmp	r3, #0
 800d238:	d002      	beq.n	800d240 <USBD_CDC_Setup+0xb4>
 800d23a:	2b0a      	cmp	r3, #10
 800d23c:	d014      	beq.n	800d268 <USBD_CDC_Setup+0xdc>
 800d23e:	e033      	b.n	800d2a8 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d246:	2b03      	cmp	r3, #3
 800d248:	d107      	bne.n	800d25a <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800d24a:	f107 030c 	add.w	r3, r7, #12
 800d24e:	2202      	movs	r2, #2
 800d250:	4619      	mov	r1, r3
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f001 f95f 	bl	800e516 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d258:	e02e      	b.n	800d2b8 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800d25a:	6839      	ldr	r1, [r7, #0]
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f001 f8f0 	bl	800e442 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d262:	2302      	movs	r3, #2
 800d264:	75fb      	strb	r3, [r7, #23]
      break;
 800d266:	e027      	b.n	800d2b8 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d26e:	2b03      	cmp	r3, #3
 800d270:	d107      	bne.n	800d282 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800d272:	f107 030f 	add.w	r3, r7, #15
 800d276:	2201      	movs	r2, #1
 800d278:	4619      	mov	r1, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f001 f94b 	bl	800e516 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d280:	e01a      	b.n	800d2b8 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800d282:	6839      	ldr	r1, [r7, #0]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f001 f8dc 	bl	800e442 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d28a:	2302      	movs	r3, #2
 800d28c:	75fb      	strb	r3, [r7, #23]
      break;
 800d28e:	e013      	b.n	800d2b8 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d296:	2b03      	cmp	r3, #3
 800d298:	d00d      	beq.n	800d2b6 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f001 f8d0 	bl	800e442 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d2a2:	2302      	movs	r3, #2
 800d2a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d2a6:	e006      	b.n	800d2b6 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800d2a8:	6839      	ldr	r1, [r7, #0]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f001 f8c9 	bl	800e442 <USBD_CtlError>
      ret = USBD_FAIL;
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	75fb      	strb	r3, [r7, #23]
      break;
 800d2b4:	e000      	b.n	800d2b8 <USBD_CDC_Setup+0x12c>
      break;
 800d2b6:	bf00      	nop
    }
    break;
 800d2b8:	e006      	b.n	800d2c8 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f001 f8c0 	bl	800e442 <USBD_CtlError>
    ret = USBD_FAIL;
 800d2c2:	2302      	movs	r3, #2
 800d2c4:	75fb      	strb	r3, [r7, #23]
    break;
 800d2c6:	bf00      	nop
  }

  return ret;
 800d2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3718      	adds	r7, #24
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b084      	sub	sp, #16
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	460b      	mov	r3, r1
 800d2dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d2e4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d2ec:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d03a      	beq.n	800d36e <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d2f8:	78fa      	ldrb	r2, [r7, #3]
 800d2fa:	6879      	ldr	r1, [r7, #4]
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4413      	add	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	440b      	add	r3, r1
 800d306:	331c      	adds	r3, #28
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d029      	beq.n	800d362 <USBD_CDC_DataIn+0x90>
 800d30e:	78fa      	ldrb	r2, [r7, #3]
 800d310:	6879      	ldr	r1, [r7, #4]
 800d312:	4613      	mov	r3, r2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	4413      	add	r3, r2
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	440b      	add	r3, r1
 800d31c:	331c      	adds	r3, #28
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	78f9      	ldrb	r1, [r7, #3]
 800d322:	68b8      	ldr	r0, [r7, #8]
 800d324:	460b      	mov	r3, r1
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	440b      	add	r3, r1
 800d32a:	00db      	lsls	r3, r3, #3
 800d32c:	4403      	add	r3, r0
 800d32e:	3338      	adds	r3, #56	; 0x38
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	fbb2 f1f3 	udiv	r1, r2, r3
 800d336:	fb01 f303 	mul.w	r3, r1, r3
 800d33a:	1ad3      	subs	r3, r2, r3
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d110      	bne.n	800d362 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d340:	78fa      	ldrb	r2, [r7, #3]
 800d342:	6879      	ldr	r1, [r7, #4]
 800d344:	4613      	mov	r3, r2
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	4413      	add	r3, r2
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	440b      	add	r3, r1
 800d34e:	331c      	adds	r3, #28
 800d350:	2200      	movs	r2, #0
 800d352:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800d354:	78f9      	ldrb	r1, [r7, #3]
 800d356:	2300      	movs	r3, #0
 800d358:	2200      	movs	r2, #0
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f001 fdbb 	bl	800eed6 <USBD_LL_Transmit>
 800d360:	e003      	b.n	800d36a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2200      	movs	r2, #0
 800d366:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800d36a:	2300      	movs	r3, #0
 800d36c:	e000      	b.n	800d370 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d36e:	2302      	movs	r3, #2
  }
}
 800d370:	4618      	mov	r0, r3
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	460b      	mov	r3, r1
 800d382:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d38a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800d38c:	78fb      	ldrb	r3, [r7, #3]
 800d38e:	4619      	mov	r1, r3
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f001 fde6 	bl	800ef62 <USBD_LL_GetRxDataSize>
 800d396:	4602      	mov	r2, r0
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00d      	beq.n	800d3c4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d3bc:	4611      	mov	r1, r2
 800d3be:	4798      	blx	r3

    return USBD_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	e000      	b.n	800d3c6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d3c4:	2302      	movs	r3, #2
  }
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b084      	sub	sp, #16
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d3dc:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d015      	beq.n	800d414 <USBD_CDC_EP0_RxReady+0x46>
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d3ee:	2bff      	cmp	r3, #255	; 0xff
 800d3f0:	d010      	beq.n	800d414 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d3f8:	689b      	ldr	r3, [r3, #8]
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d400:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d408:	b292      	uxth	r2, r2
 800d40a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	22ff      	movs	r2, #255	; 0xff
 800d410:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
	...

0800d420 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2243      	movs	r2, #67	; 0x43
 800d42c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d42e:	4b03      	ldr	r3, [pc, #12]	; (800d43c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d430:	4618      	mov	r0, r3
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	bc80      	pop	{r7}
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	2000081c 	.word	0x2000081c

0800d440 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2243      	movs	r2, #67	; 0x43
 800d44c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d44e:	4b03      	ldr	r3, [pc, #12]	; (800d45c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	bc80      	pop	{r7}
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	200007d8 	.word	0x200007d8

0800d460 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2243      	movs	r2, #67	; 0x43
 800d46c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d46e:	4b03      	ldr	r3, [pc, #12]	; (800d47c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d470:	4618      	mov	r0, r3
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	bc80      	pop	{r7}
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	20000860 	.word	0x20000860

0800d480 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	220a      	movs	r2, #10
 800d48c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d48e:	4b03      	ldr	r3, [pc, #12]	; (800d49c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d490:	4618      	mov	r0, r3
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	bc80      	pop	{r7}
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	20000794 	.word	0x20000794

0800d4a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d4aa:	2302      	movs	r3, #2
 800d4ac:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d005      	beq.n	800d4c0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	683a      	ldr	r2, [r7, #0]
 800d4b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3714      	adds	r7, #20
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bc80      	pop	{r7}
 800d4ca:	4770      	bx	lr

0800d4cc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b087      	sub	sp, #28
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d4e0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	68ba      	ldr	r2, [r7, #8]
 800d4e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d4ea:	88fa      	ldrh	r2, [r7, #6]
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d4f2:	2300      	movs	r3, #0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	371c      	adds	r7, #28
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bc80      	pop	{r7}
 800d4fc:	4770      	bx	lr

0800d4fe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800d4fe:	b480      	push	{r7}
 800d500:	b085      	sub	sp, #20
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
 800d506:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d50e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d518:	2300      	movs	r3, #0
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3714      	adds	r7, #20
 800d51e:	46bd      	mov	sp, r7
 800d520:	bc80      	pop	{r7}
 800d522:	4770      	bx	lr

0800d524 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d532:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d01c      	beq.n	800d578 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d544:	2b00      	cmp	r3, #0
 800d546:	d115      	bne.n	800d574 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d566:	b29b      	uxth	r3, r3
 800d568:	2181      	movs	r1, #129	; 0x81
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f001 fcb3 	bl	800eed6 <USBD_LL_Transmit>

      return USBD_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	e002      	b.n	800d57a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d574:	2301      	movs	r3, #1
 800d576:	e000      	b.n	800d57a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d578:	2302      	movs	r3, #2
  }
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3710      	adds	r7, #16
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b084      	sub	sp, #16
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d590:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d017      	beq.n	800d5cc <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	7c1b      	ldrb	r3, [r3, #16]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d109      	bne.n	800d5b8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d5aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5ae:	2101      	movs	r1, #1
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f001 fcb3 	bl	800ef1c <USBD_LL_PrepareReceive>
 800d5b6:	e007      	b.n	800d5c8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d5be:	2340      	movs	r3, #64	; 0x40
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f001 fcaa 	bl	800ef1c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	e000      	b.n	800d5ce <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d5cc:	2302      	movs	r3, #2
  }
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b084      	sub	sp, #16
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	60f8      	str	r0, [r7, #12]
 800d5de:	60b9      	str	r1, [r7, #8]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d5ea:	2302      	movs	r3, #2
 800d5ec:	e01a      	b.n	800d624 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d003      	beq.n	800d600 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	79fa      	ldrb	r2, [r7, #7]
 800d61a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d61c:	68f8      	ldr	r0, [r7, #12]
 800d61e:	f001 fb17 	bl	800ec50 <USBD_LL_Init>

  return USBD_OK;
 800d622:	2300      	movs	r3, #0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d006      	beq.n	800d64e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	73fb      	strb	r3, [r7, #15]
 800d64c:	e001      	b.n	800d652 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d64e:	2302      	movs	r3, #2
 800d650:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d652:	7bfb      	ldrb	r3, [r7, #15]
}
 800d654:	4618      	mov	r0, r3
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	bc80      	pop	{r7}
 800d65c:	4770      	bx	lr

0800d65e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b082      	sub	sp, #8
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f001 fb4c 	bl	800ed04 <USBD_LL_Start>

  return USBD_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800d676:	b480      	push	{r7}
 800d678:	b083      	sub	sp, #12
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	bc80      	pop	{r7}
 800d688:	4770      	bx	lr

0800d68a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b084      	sub	sp, #16
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	460b      	mov	r3, r1
 800d694:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800d696:	2302      	movs	r3, #2
 800d698:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00c      	beq.n	800d6be <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	78fa      	ldrb	r2, [r7, #3]
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	4798      	blx	r3
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d101      	bne.n	800d6be <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	78fa      	ldrb	r2, [r7, #3]
 800d6de:	4611      	mov	r1, r2
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	4798      	blx	r3
  return USBD_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b082      	sub	sp, #8
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
 800d6f6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d6fe:	6839      	ldr	r1, [r7, #0]
 800d700:	4618      	mov	r0, r3
 800d702:	f000 fe62 	bl	800e3ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2201      	movs	r2, #1
 800d70a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800d714:	461a      	mov	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d722:	f003 031f 	and.w	r3, r3, #31
 800d726:	2b02      	cmp	r3, #2
 800d728:	d016      	beq.n	800d758 <USBD_LL_SetupStage+0x6a>
 800d72a:	2b02      	cmp	r3, #2
 800d72c:	d81c      	bhi.n	800d768 <USBD_LL_SetupStage+0x7a>
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d002      	beq.n	800d738 <USBD_LL_SetupStage+0x4a>
 800d732:	2b01      	cmp	r3, #1
 800d734:	d008      	beq.n	800d748 <USBD_LL_SetupStage+0x5a>
 800d736:	e017      	b.n	800d768 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d73e:	4619      	mov	r1, r3
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f9c5 	bl	800dad0 <USBD_StdDevReq>
    break;
 800d746:	e01a      	b.n	800d77e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d74e:	4619      	mov	r1, r3
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fa27 	bl	800dba4 <USBD_StdItfReq>
    break;
 800d756:	e012      	b.n	800d77e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d75e:	4619      	mov	r1, r3
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fa67 	bl	800dc34 <USBD_StdEPReq>
    break;
 800d766:	e00a      	b.n	800d77e <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d76e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d772:	b2db      	uxtb	r3, r3
 800d774:	4619      	mov	r1, r3
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f001 fb24 	bl	800edc4 <USBD_LL_StallEP>
    break;
 800d77c:	bf00      	nop
  }

  return USBD_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b086      	sub	sp, #24
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	460b      	mov	r3, r1
 800d792:	607a      	str	r2, [r7, #4]
 800d794:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800d796:	7afb      	ldrb	r3, [r7, #11]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d14b      	bne.n	800d834 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d7a2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d7aa:	2b03      	cmp	r3, #3
 800d7ac:	d134      	bne.n	800d818 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	68da      	ldr	r2, [r3, #12]
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d919      	bls.n	800d7ee <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	68da      	ldr	r2, [r3, #12]
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	1ad2      	subs	r2, r2, r3
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	68da      	ldr	r2, [r3, #12]
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d203      	bcs.n	800d7dc <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	e002      	b.n	800d7e2 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	6879      	ldr	r1, [r7, #4]
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f000 fee1 	bl	800e5ae <USBD_CtlContinueRx>
 800d7ec:	e038      	b.n	800d860 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00a      	beq.n	800d810 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d800:	2b03      	cmp	r3, #3
 800d802:	d105      	bne.n	800d810 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f000 fede 	bl	800e5d2 <USBD_CtlSendStatus>
 800d816:	e023      	b.n	800d860 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d81e:	2b05      	cmp	r3, #5
 800d820:	d11e      	bne.n	800d860 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2200      	movs	r2, #0
 800d826:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800d82a:	2100      	movs	r1, #0
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f001 fac9 	bl	800edc4 <USBD_LL_StallEP>
 800d832:	e015      	b.n	800d860 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d83a:	699b      	ldr	r3, [r3, #24]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00d      	beq.n	800d85c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800d846:	2b03      	cmp	r3, #3
 800d848:	d108      	bne.n	800d85c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d850:	699b      	ldr	r3, [r3, #24]
 800d852:	7afa      	ldrb	r2, [r7, #11]
 800d854:	4611      	mov	r1, r2
 800d856:	68f8      	ldr	r0, [r7, #12]
 800d858:	4798      	blx	r3
 800d85a:	e001      	b.n	800d860 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d85c:	2302      	movs	r3, #2
 800d85e:	e000      	b.n	800d862 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d860:	2300      	movs	r3, #0
}
 800d862:	4618      	mov	r0, r3
 800d864:	3718      	adds	r7, #24
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}

0800d86a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b086      	sub	sp, #24
 800d86e:	af00      	add	r7, sp, #0
 800d870:	60f8      	str	r0, [r7, #12]
 800d872:	460b      	mov	r3, r1
 800d874:	607a      	str	r2, [r7, #4]
 800d876:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800d878:	7afb      	ldrb	r3, [r7, #11]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d17f      	bne.n	800d97e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	3314      	adds	r3, #20
 800d882:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d15c      	bne.n	800d948 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	68da      	ldr	r2, [r3, #12]
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	691b      	ldr	r3, [r3, #16]
 800d896:	429a      	cmp	r2, r3
 800d898:	d915      	bls.n	800d8c6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	68da      	ldr	r2, [r3, #12]
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	1ad2      	subs	r2, r2, r3
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	68db      	ldr	r3, [r3, #12]
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	6879      	ldr	r1, [r7, #4]
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	f000 fe4b 	bl	800e54e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	2100      	movs	r1, #0
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f001 fb2c 	bl	800ef1c <USBD_LL_PrepareReceive>
 800d8c4:	e04e      	b.n	800d964 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	697a      	ldr	r2, [r7, #20]
 800d8cc:	6912      	ldr	r2, [r2, #16]
 800d8ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8d2:	fb01 f202 	mul.w	r2, r1, r2
 800d8d6:	1a9b      	subs	r3, r3, r2
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d11c      	bne.n	800d916 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	689a      	ldr	r2, [r3, #8]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d316      	bcc.n	800d916 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	689a      	ldr	r2, [r3, #8]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d20f      	bcs.n	800d916 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f000 fe27 	bl	800e54e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2200      	movs	r2, #0
 800d904:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d908:	2300      	movs	r3, #0
 800d90a:	2200      	movs	r2, #0
 800d90c:	2100      	movs	r1, #0
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f001 fb04 	bl	800ef1c <USBD_LL_PrepareReceive>
 800d914:	e026      	b.n	800d964 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00a      	beq.n	800d938 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d928:	2b03      	cmp	r3, #3
 800d92a:	d105      	bne.n	800d938 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d938:	2180      	movs	r1, #128	; 0x80
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	f001 fa42 	bl	800edc4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f000 fe59 	bl	800e5f8 <USBD_CtlReceiveStatus>
 800d946:	e00d      	b.n	800d964 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d94e:	2b04      	cmp	r3, #4
 800d950:	d004      	beq.n	800d95c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d103      	bne.n	800d964 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d95c:	2180      	movs	r1, #128	; 0x80
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f001 fa30 	bl	800edc4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d11d      	bne.n	800d9aa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f7ff fe81 	bl	800d676 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2200      	movs	r2, #0
 800d978:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800d97c:	e015      	b.n	800d9aa <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d984:	695b      	ldr	r3, [r3, #20]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00d      	beq.n	800d9a6 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800d990:	2b03      	cmp	r3, #3
 800d992:	d108      	bne.n	800d9a6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	7afa      	ldrb	r2, [r7, #11]
 800d99e:	4611      	mov	r1, r2
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	4798      	blx	r3
 800d9a4:	e001      	b.n	800d9aa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	e000      	b.n	800d9ac <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d9bc:	2340      	movs	r3, #64	; 0x40
 800d9be:	2200      	movs	r2, #0
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f001 f9b9 	bl	800ed3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2240      	movs	r2, #64	; 0x40
 800d9d4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d9d8:	2340      	movs	r3, #64	; 0x40
 800d9da:	2200      	movs	r2, #0
 800d9dc:	2180      	movs	r1, #128	; 0x80
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f001 f9ab 	bl	800ed3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2240      	movs	r2, #64	; 0x40
 800d9ee:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800da14:	2b00      	cmp	r3, #0
 800da16:	d009      	beq.n	800da2c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	6852      	ldr	r2, [r2, #4]
 800da24:	b2d2      	uxtb	r2, r2
 800da26:	4611      	mov	r1, r2
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	4798      	blx	r3
  }

  return USBD_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800da36:	b480      	push	{r7}
 800da38:	b083      	sub	sp, #12
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
 800da3e:	460b      	mov	r3, r1
 800da40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	78fa      	ldrb	r2, [r7, #3]
 800da46:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	370c      	adds	r7, #12
 800da4e:	46bd      	mov	sp, r7
 800da50:	bc80      	pop	{r7}
 800da52:	4770      	bx	lr

0800da54 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2204      	movs	r2, #4
 800da6c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	370c      	adds	r7, #12
 800da76:	46bd      	mov	sp, r7
 800da78:	bc80      	pop	{r7}
 800da7a:	4770      	bx	lr

0800da7c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800da90:	2300      	movs	r3, #0
}
 800da92:	4618      	mov	r0, r3
 800da94:	370c      	adds	r7, #12
 800da96:	46bd      	mov	sp, r7
 800da98:	bc80      	pop	{r7}
 800da9a:	4770      	bx	lr

0800da9c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800daaa:	2b03      	cmp	r3, #3
 800daac:	d10b      	bne.n	800dac6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dab4:	69db      	ldr	r3, [r3, #28]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d005      	beq.n	800dac6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dac0:	69db      	ldr	r3, [r3, #28]
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dae6:	2b40      	cmp	r3, #64	; 0x40
 800dae8:	d005      	beq.n	800daf6 <USBD_StdDevReq+0x26>
 800daea:	2b40      	cmp	r3, #64	; 0x40
 800daec:	d84f      	bhi.n	800db8e <USBD_StdDevReq+0xbe>
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d009      	beq.n	800db06 <USBD_StdDevReq+0x36>
 800daf2:	2b20      	cmp	r3, #32
 800daf4:	d14b      	bne.n	800db8e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	4798      	blx	r3
    break;
 800db04:	e048      	b.n	800db98 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	785b      	ldrb	r3, [r3, #1]
 800db0a:	2b09      	cmp	r3, #9
 800db0c:	d839      	bhi.n	800db82 <USBD_StdDevReq+0xb2>
 800db0e:	a201      	add	r2, pc, #4	; (adr r2, 800db14 <USBD_StdDevReq+0x44>)
 800db10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db14:	0800db65 	.word	0x0800db65
 800db18:	0800db79 	.word	0x0800db79
 800db1c:	0800db83 	.word	0x0800db83
 800db20:	0800db6f 	.word	0x0800db6f
 800db24:	0800db83 	.word	0x0800db83
 800db28:	0800db47 	.word	0x0800db47
 800db2c:	0800db3d 	.word	0x0800db3d
 800db30:	0800db83 	.word	0x0800db83
 800db34:	0800db5b 	.word	0x0800db5b
 800db38:	0800db51 	.word	0x0800db51
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f9da 	bl	800def8 <USBD_GetDescriptor>
      break;
 800db44:	e022      	b.n	800db8c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 facf 	bl	800e0ec <USBD_SetAddress>
      break;
 800db4e:	e01d      	b.n	800db8c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800db50:	6839      	ldr	r1, [r7, #0]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 fb0e 	bl	800e174 <USBD_SetConfig>
      break;
 800db58:	e018      	b.n	800db8c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800db5a:	6839      	ldr	r1, [r7, #0]
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fb97 	bl	800e290 <USBD_GetConfig>
      break;
 800db62:	e013      	b.n	800db8c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fbc7 	bl	800e2fa <USBD_GetStatus>
      break;
 800db6c:	e00e      	b.n	800db8c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800db6e:	6839      	ldr	r1, [r7, #0]
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f000 fbf5 	bl	800e360 <USBD_SetFeature>
      break;
 800db76:	e009      	b.n	800db8c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800db78:	6839      	ldr	r1, [r7, #0]
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fc04 	bl	800e388 <USBD_ClrFeature>
      break;
 800db80:	e004      	b.n	800db8c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 fc5c 	bl	800e442 <USBD_CtlError>
      break;
 800db8a:	bf00      	nop
    }
    break;
 800db8c:	e004      	b.n	800db98 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800db8e:	6839      	ldr	r1, [r7, #0]
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 fc56 	bl	800e442 <USBD_CtlError>
    break;
 800db96:	bf00      	nop
  }

  return ret;
 800db98:	7bfb      	ldrb	r3, [r7, #15]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop

0800dba4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbba:	2b40      	cmp	r3, #64	; 0x40
 800dbbc:	d005      	beq.n	800dbca <USBD_StdItfReq+0x26>
 800dbbe:	2b40      	cmp	r3, #64	; 0x40
 800dbc0:	d82e      	bhi.n	800dc20 <USBD_StdItfReq+0x7c>
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <USBD_StdItfReq+0x26>
 800dbc6:	2b20      	cmp	r3, #32
 800dbc8:	d12a      	bne.n	800dc20 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	2b02      	cmp	r3, #2
 800dbd4:	d81d      	bhi.n	800dc12 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	889b      	ldrh	r3, [r3, #4]
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d813      	bhi.n	800dc08 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	6839      	ldr	r1, [r7, #0]
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	4798      	blx	r3
 800dbee:	4603      	mov	r3, r0
 800dbf0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	88db      	ldrh	r3, [r3, #6]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d110      	bne.n	800dc1c <USBD_StdItfReq+0x78>
 800dbfa:	7bfb      	ldrb	r3, [r7, #15]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d10d      	bne.n	800dc1c <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 fce6 	bl	800e5d2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800dc06:	e009      	b.n	800dc1c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800dc08:	6839      	ldr	r1, [r7, #0]
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 fc19 	bl	800e442 <USBD_CtlError>
      break;
 800dc10:	e004      	b.n	800dc1c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800dc12:	6839      	ldr	r1, [r7, #0]
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 fc14 	bl	800e442 <USBD_CtlError>
      break;
 800dc1a:	e000      	b.n	800dc1e <USBD_StdItfReq+0x7a>
      break;
 800dc1c:	bf00      	nop
    }
    break;
 800dc1e:	e004      	b.n	800dc2a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800dc20:	6839      	ldr	r1, [r7, #0]
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 fc0d 	bl	800e442 <USBD_CtlError>
    break;
 800dc28:	bf00      	nop
  }

  return USBD_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	889b      	ldrh	r3, [r3, #4]
 800dc46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc50:	2b40      	cmp	r3, #64	; 0x40
 800dc52:	d007      	beq.n	800dc64 <USBD_StdEPReq+0x30>
 800dc54:	2b40      	cmp	r3, #64	; 0x40
 800dc56:	f200 8144 	bhi.w	800dee2 <USBD_StdEPReq+0x2ae>
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00a      	beq.n	800dc74 <USBD_StdEPReq+0x40>
 800dc5e:	2b20      	cmp	r3, #32
 800dc60:	f040 813f 	bne.w	800dee2 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	6839      	ldr	r1, [r7, #0]
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	4798      	blx	r3
    break;
 800dc72:	e13b      	b.n	800deec <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc7c:	2b20      	cmp	r3, #32
 800dc7e:	d10a      	bne.n	800dc96 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	6839      	ldr	r1, [r7, #0]
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	4798      	blx	r3
 800dc8e:	4603      	mov	r3, r0
 800dc90:	73fb      	strb	r3, [r7, #15]

      return ret;
 800dc92:	7bfb      	ldrb	r3, [r7, #15]
 800dc94:	e12b      	b.n	800deee <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	785b      	ldrb	r3, [r3, #1]
 800dc9a:	2b03      	cmp	r3, #3
 800dc9c:	d007      	beq.n	800dcae <USBD_StdEPReq+0x7a>
 800dc9e:	2b03      	cmp	r3, #3
 800dca0:	f300 8119 	bgt.w	800ded6 <USBD_StdEPReq+0x2a2>
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d072      	beq.n	800dd8e <USBD_StdEPReq+0x15a>
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d03a      	beq.n	800dd22 <USBD_StdEPReq+0xee>
 800dcac:	e113      	b.n	800ded6 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d002      	beq.n	800dcbe <USBD_StdEPReq+0x8a>
 800dcb8:	2b03      	cmp	r3, #3
 800dcba:	d015      	beq.n	800dce8 <USBD_StdEPReq+0xb4>
 800dcbc:	e02b      	b.n	800dd16 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcbe:	7bbb      	ldrb	r3, [r7, #14]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00c      	beq.n	800dcde <USBD_StdEPReq+0xaa>
 800dcc4:	7bbb      	ldrb	r3, [r7, #14]
 800dcc6:	2b80      	cmp	r3, #128	; 0x80
 800dcc8:	d009      	beq.n	800dcde <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800dcca:	7bbb      	ldrb	r3, [r7, #14]
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f001 f878 	bl	800edc4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800dcd4:	2180      	movs	r1, #128	; 0x80
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f001 f874 	bl	800edc4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800dcdc:	e020      	b.n	800dd20 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f000 fbae 	bl	800e442 <USBD_CtlError>
        break;
 800dce6:	e01b      	b.n	800dd20 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	885b      	ldrh	r3, [r3, #2]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d10e      	bne.n	800dd0e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dcf0:	7bbb      	ldrb	r3, [r7, #14]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00b      	beq.n	800dd0e <USBD_StdEPReq+0xda>
 800dcf6:	7bbb      	ldrb	r3, [r7, #14]
 800dcf8:	2b80      	cmp	r3, #128	; 0x80
 800dcfa:	d008      	beq.n	800dd0e <USBD_StdEPReq+0xda>
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	88db      	ldrh	r3, [r3, #6]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d104      	bne.n	800dd0e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800dd04:	7bbb      	ldrb	r3, [r7, #14]
 800dd06:	4619      	mov	r1, r3
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f001 f85b 	bl	800edc4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 fc5f 	bl	800e5d2 <USBD_CtlSendStatus>

        break;
 800dd14:	e004      	b.n	800dd20 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800dd16:	6839      	ldr	r1, [r7, #0]
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 fb92 	bl	800e442 <USBD_CtlError>
        break;
 800dd1e:	bf00      	nop
      }
      break;
 800dd20:	e0de      	b.n	800dee0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d002      	beq.n	800dd32 <USBD_StdEPReq+0xfe>
 800dd2c:	2b03      	cmp	r3, #3
 800dd2e:	d015      	beq.n	800dd5c <USBD_StdEPReq+0x128>
 800dd30:	e026      	b.n	800dd80 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd32:	7bbb      	ldrb	r3, [r7, #14]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00c      	beq.n	800dd52 <USBD_StdEPReq+0x11e>
 800dd38:	7bbb      	ldrb	r3, [r7, #14]
 800dd3a:	2b80      	cmp	r3, #128	; 0x80
 800dd3c:	d009      	beq.n	800dd52 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800dd3e:	7bbb      	ldrb	r3, [r7, #14]
 800dd40:	4619      	mov	r1, r3
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f001 f83e 	bl	800edc4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800dd48:	2180      	movs	r1, #128	; 0x80
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f001 f83a 	bl	800edc4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800dd50:	e01c      	b.n	800dd8c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800dd52:	6839      	ldr	r1, [r7, #0]
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fb74 	bl	800e442 <USBD_CtlError>
        break;
 800dd5a:	e017      	b.n	800dd8c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	885b      	ldrh	r3, [r3, #2]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d112      	bne.n	800dd8a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800dd64:	7bbb      	ldrb	r3, [r7, #14]
 800dd66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d004      	beq.n	800dd78 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd6e:	7bbb      	ldrb	r3, [r7, #14]
 800dd70:	4619      	mov	r1, r3
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f001 f845 	bl	800ee02 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 fc2a 	bl	800e5d2 <USBD_CtlSendStatus>
        }
        break;
 800dd7e:	e004      	b.n	800dd8a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800dd80:	6839      	ldr	r1, [r7, #0]
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 fb5d 	bl	800e442 <USBD_CtlError>
        break;
 800dd88:	e000      	b.n	800dd8c <USBD_StdEPReq+0x158>
        break;
 800dd8a:	bf00      	nop
      }
      break;
 800dd8c:	e0a8      	b.n	800dee0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dd94:	2b02      	cmp	r3, #2
 800dd96:	d002      	beq.n	800dd9e <USBD_StdEPReq+0x16a>
 800dd98:	2b03      	cmp	r3, #3
 800dd9a:	d031      	beq.n	800de00 <USBD_StdEPReq+0x1cc>
 800dd9c:	e095      	b.n	800deca <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd9e:	7bbb      	ldrb	r3, [r7, #14]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d007      	beq.n	800ddb4 <USBD_StdEPReq+0x180>
 800dda4:	7bbb      	ldrb	r3, [r7, #14]
 800dda6:	2b80      	cmp	r3, #128	; 0x80
 800dda8:	d004      	beq.n	800ddb4 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800ddaa:	6839      	ldr	r1, [r7, #0]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 fb48 	bl	800e442 <USBD_CtlError>
          break;
 800ddb2:	e08f      	b.n	800ded4 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ddb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	da0b      	bge.n	800ddd4 <USBD_StdEPReq+0x1a0>
 800ddbc:	7bbb      	ldrb	r3, [r7, #14]
 800ddbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	4413      	add	r3, r2
 800ddc8:	009b      	lsls	r3, r3, #2
 800ddca:	3310      	adds	r3, #16
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	4413      	add	r3, r2
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	e00a      	b.n	800ddea <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ddd4:	7bbb      	ldrb	r3, [r7, #14]
 800ddd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ddda:	4613      	mov	r3, r2
 800dddc:	009b      	lsls	r3, r3, #2
 800ddde:	4413      	add	r3, r2
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	4413      	add	r3, r2
 800ddea:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	2202      	movs	r2, #2
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 fb8c 	bl	800e516 <USBD_CtlSendData>
          break;
 800ddfe:	e069      	b.n	800ded4 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800de00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de04:	2b00      	cmp	r3, #0
 800de06:	da11      	bge.n	800de2c <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800de08:	7bbb      	ldrb	r3, [r7, #14]
 800de0a:	f003 020f 	and.w	r2, r3, #15
 800de0e:	6879      	ldr	r1, [r7, #4]
 800de10:	4613      	mov	r3, r2
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	4413      	add	r3, r2
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	440b      	add	r3, r1
 800de1a:	3318      	adds	r3, #24
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d117      	bne.n	800de52 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800de22:	6839      	ldr	r1, [r7, #0]
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fb0c 	bl	800e442 <USBD_CtlError>
            break;
 800de2a:	e053      	b.n	800ded4 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800de2c:	7bbb      	ldrb	r3, [r7, #14]
 800de2e:	f003 020f 	and.w	r2, r3, #15
 800de32:	6879      	ldr	r1, [r7, #4]
 800de34:	4613      	mov	r3, r2
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	4413      	add	r3, r2
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	440b      	add	r3, r1
 800de3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d104      	bne.n	800de52 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 faf9 	bl	800e442 <USBD_CtlError>
            break;
 800de50:	e040      	b.n	800ded4 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800de52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de56:	2b00      	cmp	r3, #0
 800de58:	da0b      	bge.n	800de72 <USBD_StdEPReq+0x23e>
 800de5a:	7bbb      	ldrb	r3, [r7, #14]
 800de5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de60:	4613      	mov	r3, r2
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	4413      	add	r3, r2
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	3310      	adds	r3, #16
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	4413      	add	r3, r2
 800de6e:	3304      	adds	r3, #4
 800de70:	e00a      	b.n	800de88 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800de72:	7bbb      	ldrb	r3, [r7, #14]
 800de74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800de78:	4613      	mov	r3, r2
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	4413      	add	r3, r2
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	4413      	add	r3, r2
 800de88:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800de8a:	7bbb      	ldrb	r3, [r7, #14]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d002      	beq.n	800de96 <USBD_StdEPReq+0x262>
 800de90:	7bbb      	ldrb	r3, [r7, #14]
 800de92:	2b80      	cmp	r3, #128	; 0x80
 800de94:	d103      	bne.n	800de9e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	2200      	movs	r2, #0
 800de9a:	601a      	str	r2, [r3, #0]
 800de9c:	e00e      	b.n	800debc <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800de9e:	7bbb      	ldrb	r3, [r7, #14]
 800dea0:	4619      	mov	r1, r3
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 ffcc 	bl	800ee40 <USBD_LL_IsStallEP>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d003      	beq.n	800deb6 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2201      	movs	r2, #1
 800deb2:	601a      	str	r2, [r3, #0]
 800deb4:	e002      	b.n	800debc <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	2200      	movs	r2, #0
 800deba:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2202      	movs	r2, #2
 800dec0:	4619      	mov	r1, r3
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 fb27 	bl	800e516 <USBD_CtlSendData>
          break;
 800dec8:	e004      	b.n	800ded4 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800deca:	6839      	ldr	r1, [r7, #0]
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 fab8 	bl	800e442 <USBD_CtlError>
        break;
 800ded2:	bf00      	nop
      }
      break;
 800ded4:	e004      	b.n	800dee0 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800ded6:	6839      	ldr	r1, [r7, #0]
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 fab2 	bl	800e442 <USBD_CtlError>
      break;
 800dede:	bf00      	nop
    }
    break;
 800dee0:	e004      	b.n	800deec <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 faac 	bl	800e442 <USBD_CtlError>
    break;
 800deea:	bf00      	nop
  }

  return ret;
 800deec:	7bfb      	ldrb	r3, [r7, #15]
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
	...

0800def8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	885b      	ldrh	r3, [r3, #2]
 800df06:	0a1b      	lsrs	r3, r3, #8
 800df08:	b29b      	uxth	r3, r3
 800df0a:	3b01      	subs	r3, #1
 800df0c:	2b06      	cmp	r3, #6
 800df0e:	f200 80c9 	bhi.w	800e0a4 <USBD_GetDescriptor+0x1ac>
 800df12:	a201      	add	r2, pc, #4	; (adr r2, 800df18 <USBD_GetDescriptor+0x20>)
 800df14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df18:	0800df35 	.word	0x0800df35
 800df1c:	0800df4d 	.word	0x0800df4d
 800df20:	0800df8d 	.word	0x0800df8d
 800df24:	0800e0a5 	.word	0x0800e0a5
 800df28:	0800e0a5 	.word	0x0800e0a5
 800df2c:	0800e051 	.word	0x0800e051
 800df30:	0800e077 	.word	0x0800e077
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	7c12      	ldrb	r2, [r2, #16]
 800df40:	f107 010a 	add.w	r1, r7, #10
 800df44:	4610      	mov	r0, r2
 800df46:	4798      	blx	r3
 800df48:	60f8      	str	r0, [r7, #12]
    break;
 800df4a:	e0b0      	b.n	800e0ae <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	7c1b      	ldrb	r3, [r3, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10d      	bne.n	800df70 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800df5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df5c:	f107 020a 	add.w	r2, r7, #10
 800df60:	4610      	mov	r0, r2
 800df62:	4798      	blx	r3
 800df64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	3301      	adds	r3, #1
 800df6a:	2202      	movs	r2, #2
 800df6c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800df6e:	e09e      	b.n	800e0ae <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800df76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df78:	f107 020a 	add.w	r2, r7, #10
 800df7c:	4610      	mov	r0, r2
 800df7e:	4798      	blx	r3
 800df80:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	3301      	adds	r3, #1
 800df86:	2202      	movs	r2, #2
 800df88:	701a      	strb	r2, [r3, #0]
    break;
 800df8a:	e090      	b.n	800e0ae <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	885b      	ldrh	r3, [r3, #2]
 800df90:	b2db      	uxtb	r3, r3
 800df92:	2b05      	cmp	r3, #5
 800df94:	d856      	bhi.n	800e044 <USBD_GetDescriptor+0x14c>
 800df96:	a201      	add	r2, pc, #4	; (adr r2, 800df9c <USBD_GetDescriptor+0xa4>)
 800df98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df9c:	0800dfb5 	.word	0x0800dfb5
 800dfa0:	0800dfcd 	.word	0x0800dfcd
 800dfa4:	0800dfe5 	.word	0x0800dfe5
 800dfa8:	0800dffd 	.word	0x0800dffd
 800dfac:	0800e015 	.word	0x0800e015
 800dfb0:	0800e02d 	.word	0x0800e02d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	7c12      	ldrb	r2, [r2, #16]
 800dfc0:	f107 010a 	add.w	r1, r7, #10
 800dfc4:	4610      	mov	r0, r2
 800dfc6:	4798      	blx	r3
 800dfc8:	60f8      	str	r0, [r7, #12]
      break;
 800dfca:	e040      	b.n	800e04e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	7c12      	ldrb	r2, [r2, #16]
 800dfd8:	f107 010a 	add.w	r1, r7, #10
 800dfdc:	4610      	mov	r0, r2
 800dfde:	4798      	blx	r3
 800dfe0:	60f8      	str	r0, [r7, #12]
      break;
 800dfe2:	e034      	b.n	800e04e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	7c12      	ldrb	r2, [r2, #16]
 800dff0:	f107 010a 	add.w	r1, r7, #10
 800dff4:	4610      	mov	r0, r2
 800dff6:	4798      	blx	r3
 800dff8:	60f8      	str	r0, [r7, #12]
      break;
 800dffa:	e028      	b.n	800e04e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e002:	691b      	ldr	r3, [r3, #16]
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	7c12      	ldrb	r2, [r2, #16]
 800e008:	f107 010a 	add.w	r1, r7, #10
 800e00c:	4610      	mov	r0, r2
 800e00e:	4798      	blx	r3
 800e010:	60f8      	str	r0, [r7, #12]
      break;
 800e012:	e01c      	b.n	800e04e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e01a:	695b      	ldr	r3, [r3, #20]
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	7c12      	ldrb	r2, [r2, #16]
 800e020:	f107 010a 	add.w	r1, r7, #10
 800e024:	4610      	mov	r0, r2
 800e026:	4798      	blx	r3
 800e028:	60f8      	str	r0, [r7, #12]
      break;
 800e02a:	e010      	b.n	800e04e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e032:	699b      	ldr	r3, [r3, #24]
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	7c12      	ldrb	r2, [r2, #16]
 800e038:	f107 010a 	add.w	r1, r7, #10
 800e03c:	4610      	mov	r0, r2
 800e03e:	4798      	blx	r3
 800e040:	60f8      	str	r0, [r7, #12]
      break;
 800e042:	e004      	b.n	800e04e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800e044:	6839      	ldr	r1, [r7, #0]
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 f9fb 	bl	800e442 <USBD_CtlError>
      return;
 800e04c:	e04b      	b.n	800e0e6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800e04e:	e02e      	b.n	800e0ae <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	7c1b      	ldrb	r3, [r3, #16]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d109      	bne.n	800e06c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e060:	f107 020a 	add.w	r2, r7, #10
 800e064:	4610      	mov	r0, r2
 800e066:	4798      	blx	r3
 800e068:	60f8      	str	r0, [r7, #12]
      break;
 800e06a:	e020      	b.n	800e0ae <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 f9e7 	bl	800e442 <USBD_CtlError>
      return;
 800e074:	e037      	b.n	800e0e6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	7c1b      	ldrb	r3, [r3, #16]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10d      	bne.n	800e09a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e086:	f107 020a 	add.w	r2, r7, #10
 800e08a:	4610      	mov	r0, r2
 800e08c:	4798      	blx	r3
 800e08e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	3301      	adds	r3, #1
 800e094:	2207      	movs	r2, #7
 800e096:	701a      	strb	r2, [r3, #0]
      break;
 800e098:	e009      	b.n	800e0ae <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e09a:	6839      	ldr	r1, [r7, #0]
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 f9d0 	bl	800e442 <USBD_CtlError>
      return;
 800e0a2:	e020      	b.n	800e0e6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800e0a4:	6839      	ldr	r1, [r7, #0]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 f9cb 	bl	800e442 <USBD_CtlError>
    return;
 800e0ac:	e01b      	b.n	800e0e6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800e0ae:	897b      	ldrh	r3, [r7, #10]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d011      	beq.n	800e0d8 <USBD_GetDescriptor+0x1e0>
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	88db      	ldrh	r3, [r3, #6]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d00d      	beq.n	800e0d8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	88da      	ldrh	r2, [r3, #6]
 800e0c0:	897b      	ldrh	r3, [r7, #10]
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	bf28      	it	cs
 800e0c6:	4613      	movcs	r3, r2
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800e0cc:	897b      	ldrh	r3, [r7, #10]
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	68f9      	ldr	r1, [r7, #12]
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fa1f 	bl	800e516 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	88db      	ldrh	r3, [r3, #6]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d102      	bne.n	800e0e6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 fa76 	bl	800e5d2 <USBD_CtlSendStatus>
  }
}
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	889b      	ldrh	r3, [r3, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d130      	bne.n	800e160 <USBD_SetAddress+0x74>
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	88db      	ldrh	r3, [r3, #6]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d12c      	bne.n	800e160 <USBD_SetAddress+0x74>
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	885b      	ldrh	r3, [r3, #2]
 800e10a:	2b7f      	cmp	r3, #127	; 0x7f
 800e10c:	d828      	bhi.n	800e160 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	885b      	ldrh	r3, [r3, #2]
 800e112:	b2db      	uxtb	r3, r3
 800e114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e118:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e120:	2b03      	cmp	r3, #3
 800e122:	d104      	bne.n	800e12e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800e124:	6839      	ldr	r1, [r7, #0]
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 f98b 	bl	800e442 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e12c:	e01d      	b.n	800e16a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	7bfa      	ldrb	r2, [r7, #15]
 800e132:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e136:	7bfb      	ldrb	r3, [r7, #15]
 800e138:	4619      	mov	r1, r3
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 feac 	bl	800ee98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f000 fa46 	bl	800e5d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e146:	7bfb      	ldrb	r3, [r7, #15]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d004      	beq.n	800e156 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2202      	movs	r2, #2
 800e150:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e154:	e009      	b.n	800e16a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e15e:	e004      	b.n	800e16a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e160:	6839      	ldr	r1, [r7, #0]
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f000 f96d 	bl	800e442 <USBD_CtlError>
  }
}
 800e168:	bf00      	nop
 800e16a:	bf00      	nop
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
	...

0800e174 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	885b      	ldrh	r3, [r3, #2]
 800e182:	b2da      	uxtb	r2, r3
 800e184:	4b41      	ldr	r3, [pc, #260]	; (800e28c <USBD_SetConfig+0x118>)
 800e186:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e188:	4b40      	ldr	r3, [pc, #256]	; (800e28c <USBD_SetConfig+0x118>)
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d904      	bls.n	800e19a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e190:	6839      	ldr	r1, [r7, #0]
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f955 	bl	800e442 <USBD_CtlError>
 800e198:	e075      	b.n	800e286 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	d002      	beq.n	800e1aa <USBD_SetConfig+0x36>
 800e1a4:	2b03      	cmp	r3, #3
 800e1a6:	d023      	beq.n	800e1f0 <USBD_SetConfig+0x7c>
 800e1a8:	e062      	b.n	800e270 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800e1aa:	4b38      	ldr	r3, [pc, #224]	; (800e28c <USBD_SetConfig+0x118>)
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d01a      	beq.n	800e1e8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800e1b2:	4b36      	ldr	r3, [pc, #216]	; (800e28c <USBD_SetConfig+0x118>)
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2203      	movs	r2, #3
 800e1c0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e1c4:	4b31      	ldr	r3, [pc, #196]	; (800e28c <USBD_SetConfig+0x118>)
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7ff fa5d 	bl	800d68a <USBD_SetClassConfig>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b02      	cmp	r3, #2
 800e1d4:	d104      	bne.n	800e1e0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800e1d6:	6839      	ldr	r1, [r7, #0]
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 f932 	bl	800e442 <USBD_CtlError>
          return;
 800e1de:	e052      	b.n	800e286 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 f9f6 	bl	800e5d2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e1e6:	e04e      	b.n	800e286 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f000 f9f2 	bl	800e5d2 <USBD_CtlSendStatus>
      break;
 800e1ee:	e04a      	b.n	800e286 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e1f0:	4b26      	ldr	r3, [pc, #152]	; (800e28c <USBD_SetConfig+0x118>)
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d112      	bne.n	800e21e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2202      	movs	r2, #2
 800e1fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800e200:	4b22      	ldr	r3, [pc, #136]	; (800e28c <USBD_SetConfig+0x118>)
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	461a      	mov	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800e20a:	4b20      	ldr	r3, [pc, #128]	; (800e28c <USBD_SetConfig+0x118>)
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	4619      	mov	r1, r3
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7ff fa59 	bl	800d6c8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 f9db 	bl	800e5d2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e21c:	e033      	b.n	800e286 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800e21e:	4b1b      	ldr	r3, [pc, #108]	; (800e28c <USBD_SetConfig+0x118>)
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	461a      	mov	r2, r3
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d01d      	beq.n	800e268 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	b2db      	uxtb	r3, r3
 800e232:	4619      	mov	r1, r3
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7ff fa47 	bl	800d6c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e23a:	4b14      	ldr	r3, [pc, #80]	; (800e28c <USBD_SetConfig+0x118>)
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	461a      	mov	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e244:	4b11      	ldr	r3, [pc, #68]	; (800e28c <USBD_SetConfig+0x118>)
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	4619      	mov	r1, r3
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7ff fa1d 	bl	800d68a <USBD_SetClassConfig>
 800e250:	4603      	mov	r3, r0
 800e252:	2b02      	cmp	r3, #2
 800e254:	d104      	bne.n	800e260 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800e256:	6839      	ldr	r1, [r7, #0]
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 f8f2 	bl	800e442 <USBD_CtlError>
          return;
 800e25e:	e012      	b.n	800e286 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 f9b6 	bl	800e5d2 <USBD_CtlSendStatus>
      break;
 800e266:	e00e      	b.n	800e286 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 f9b2 	bl	800e5d2 <USBD_CtlSendStatus>
      break;
 800e26e:	e00a      	b.n	800e286 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 f8e5 	bl	800e442 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800e278:	4b04      	ldr	r3, [pc, #16]	; (800e28c <USBD_SetConfig+0x118>)
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	4619      	mov	r1, r3
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7ff fa22 	bl	800d6c8 <USBD_ClrClassConfig>
      break;
 800e284:	bf00      	nop
    }
  }
}
 800e286:	3708      	adds	r7, #8
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	20000e90 	.word	0x20000e90

0800e290 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	88db      	ldrh	r3, [r3, #6]
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d004      	beq.n	800e2ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800e2a2:	6839      	ldr	r1, [r7, #0]
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f8cc 	bl	800e442 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800e2aa:	e022      	b.n	800e2f2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e2b2:	2b02      	cmp	r3, #2
 800e2b4:	dc02      	bgt.n	800e2bc <USBD_GetConfig+0x2c>
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	dc03      	bgt.n	800e2c2 <USBD_GetConfig+0x32>
 800e2ba:	e015      	b.n	800e2e8 <USBD_GetConfig+0x58>
 800e2bc:	2b03      	cmp	r3, #3
 800e2be:	d00b      	beq.n	800e2d8 <USBD_GetConfig+0x48>
 800e2c0:	e012      	b.n	800e2e8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	3308      	adds	r3, #8
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 f920 	bl	800e516 <USBD_CtlSendData>
      break;
 800e2d6:	e00c      	b.n	800e2f2 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	3304      	adds	r3, #4
 800e2dc:	2201      	movs	r2, #1
 800e2de:	4619      	mov	r1, r3
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 f918 	bl	800e516 <USBD_CtlSendData>
      break;
 800e2e6:	e004      	b.n	800e2f2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800e2e8:	6839      	ldr	r1, [r7, #0]
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 f8a9 	bl	800e442 <USBD_CtlError>
      break;
 800e2f0:	bf00      	nop
}
 800e2f2:	bf00      	nop
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}

0800e2fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b082      	sub	sp, #8
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
 800e302:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e30a:	3b01      	subs	r3, #1
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d81e      	bhi.n	800e34e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	88db      	ldrh	r3, [r3, #6]
 800e314:	2b02      	cmp	r3, #2
 800e316:	d004      	beq.n	800e322 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e318:	6839      	ldr	r1, [r7, #0]
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 f891 	bl	800e442 <USBD_CtlError>
      break;
 800e320:	e01a      	b.n	800e358 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2201      	movs	r2, #1
 800e326:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d005      	beq.n	800e33e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	f043 0202 	orr.w	r2, r3, #2
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	330c      	adds	r3, #12
 800e342:	2202      	movs	r2, #2
 800e344:	4619      	mov	r1, r3
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 f8e5 	bl	800e516 <USBD_CtlSendData>
    break;
 800e34c:	e004      	b.n	800e358 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800e34e:	6839      	ldr	r1, [r7, #0]
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 f876 	bl	800e442 <USBD_CtlError>
    break;
 800e356:	bf00      	nop
  }
}
 800e358:	bf00      	nop
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	885b      	ldrh	r3, [r3, #2]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d106      	bne.n	800e380 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2201      	movs	r2, #1
 800e376:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f929 	bl	800e5d2 <USBD_CtlSendStatus>
  }

}
 800e380:	bf00      	nop
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e398:	3b01      	subs	r3, #1
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	d80b      	bhi.n	800e3b6 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	885b      	ldrh	r3, [r3, #2]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d10c      	bne.n	800e3c0 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 f90f 	bl	800e5d2 <USBD_CtlSendStatus>
    }
    break;
 800e3b4:	e004      	b.n	800e3c0 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800e3b6:	6839      	ldr	r1, [r7, #0]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 f842 	bl	800e442 <USBD_CtlError>
    break;
 800e3be:	e000      	b.n	800e3c2 <USBD_ClrFeature+0x3a>
    break;
 800e3c0:	bf00      	nop
  }
}
 800e3c2:	bf00      	nop
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e3ca:	b480      	push	{r7}
 800e3cc:	b083      	sub	sp, #12
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
 800e3d2:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	781a      	ldrb	r2, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	785a      	ldrb	r2, [r3, #1]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	3302      	adds	r3, #2
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	b29a      	uxth	r2, r3
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	3303      	adds	r3, #3
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	021b      	lsls	r3, r3, #8
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	4413      	add	r3, r2
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	3304      	adds	r3, #4
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	b29a      	uxth	r2, r3
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	3305      	adds	r3, #5
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	b29b      	uxth	r3, r3
 800e410:	021b      	lsls	r3, r3, #8
 800e412:	b29b      	uxth	r3, r3
 800e414:	4413      	add	r3, r2
 800e416:	b29a      	uxth	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	3306      	adds	r3, #6
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	b29a      	uxth	r2, r3
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	3307      	adds	r3, #7
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	021b      	lsls	r3, r3, #8
 800e42e:	b29b      	uxth	r3, r3
 800e430:	4413      	add	r3, r2
 800e432:	b29a      	uxth	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	80da      	strh	r2, [r3, #6]

}
 800e438:	bf00      	nop
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bc80      	pop	{r7}
 800e440:	4770      	bx	lr

0800e442 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e442:	b580      	push	{r7, lr}
 800e444:	b082      	sub	sp, #8
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
 800e44a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800e44c:	2180      	movs	r1, #128	; 0x80
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 fcb8 	bl	800edc4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800e454:	2100      	movs	r1, #0
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f000 fcb4 	bl	800edc4 <USBD_LL_StallEP>
}
 800e45c:	bf00      	nop
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b086      	sub	sp, #24
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e470:	2300      	movs	r3, #0
 800e472:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d032      	beq.n	800e4e0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f000 f834 	bl	800e4e8 <USBD_GetLen>
 800e480:	4603      	mov	r3, r0
 800e482:	3301      	adds	r3, #1
 800e484:	b29b      	uxth	r3, r3
 800e486:	005b      	lsls	r3, r3, #1
 800e488:	b29a      	uxth	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e48e:	7dfb      	ldrb	r3, [r7, #23]
 800e490:	1c5a      	adds	r2, r3, #1
 800e492:	75fa      	strb	r2, [r7, #23]
 800e494:	461a      	mov	r2, r3
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	4413      	add	r3, r2
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	7812      	ldrb	r2, [r2, #0]
 800e49e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e4a0:	7dfb      	ldrb	r3, [r7, #23]
 800e4a2:	1c5a      	adds	r2, r3, #1
 800e4a4:	75fa      	strb	r2, [r7, #23]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	2203      	movs	r2, #3
 800e4ae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e4b0:	e012      	b.n	800e4d8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	1c5a      	adds	r2, r3, #1
 800e4b6:	60fa      	str	r2, [r7, #12]
 800e4b8:	7dfa      	ldrb	r2, [r7, #23]
 800e4ba:	1c51      	adds	r1, r2, #1
 800e4bc:	75f9      	strb	r1, [r7, #23]
 800e4be:	4611      	mov	r1, r2
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	440a      	add	r2, r1
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e4c8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ca:	1c5a      	adds	r2, r3, #1
 800e4cc:	75fa      	strb	r2, [r7, #23]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1e8      	bne.n	800e4b2 <USBD_GetString+0x4e>
    }
  }
}
 800e4e0:	bf00      	nop
 800e4e2:	3718      	adds	r7, #24
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b085      	sub	sp, #20
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800e4f4:	e005      	b.n	800e502 <USBD_GetLen+0x1a>
    {
        len++;
 800e4f6:	7bfb      	ldrb	r3, [r7, #15]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	73fb      	strb	r3, [r7, #15]
        buf++;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	3301      	adds	r3, #1
 800e500:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d1f5      	bne.n	800e4f6 <USBD_GetLen+0xe>
    }

    return len;
 800e50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3714      	adds	r7, #20
 800e510:	46bd      	mov	sp, r7
 800e512:	bc80      	pop	{r7}
 800e514:	4770      	bx	lr

0800e516 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b084      	sub	sp, #16
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	60f8      	str	r0, [r7, #12]
 800e51e:	60b9      	str	r1, [r7, #8]
 800e520:	4613      	mov	r3, r2
 800e522:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2202      	movs	r2, #2
 800e528:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800e52c:	88fa      	ldrh	r2, [r7, #6]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e532:	88fa      	ldrh	r2, [r7, #6]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e538:	88fb      	ldrh	r3, [r7, #6]
 800e53a:	68ba      	ldr	r2, [r7, #8]
 800e53c:	2100      	movs	r1, #0
 800e53e:	68f8      	ldr	r0, [r7, #12]
 800e540:	f000 fcc9 	bl	800eed6 <USBD_LL_Transmit>

  return USBD_OK;
 800e544:	2300      	movs	r3, #0
}
 800e546:	4618      	mov	r0, r3
 800e548:	3710      	adds	r7, #16
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}

0800e54e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b084      	sub	sp, #16
 800e552:	af00      	add	r7, sp, #0
 800e554:	60f8      	str	r0, [r7, #12]
 800e556:	60b9      	str	r1, [r7, #8]
 800e558:	4613      	mov	r3, r2
 800e55a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e55c:	88fb      	ldrh	r3, [r7, #6]
 800e55e:	68ba      	ldr	r2, [r7, #8]
 800e560:	2100      	movs	r1, #0
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f000 fcb7 	bl	800eed6 <USBD_LL_Transmit>

  return USBD_OK;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b084      	sub	sp, #16
 800e576:	af00      	add	r7, sp, #0
 800e578:	60f8      	str	r0, [r7, #12]
 800e57a:	60b9      	str	r1, [r7, #8]
 800e57c:	4613      	mov	r3, r2
 800e57e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2203      	movs	r2, #3
 800e584:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800e588:	88fa      	ldrh	r2, [r7, #6]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800e590:	88fa      	ldrh	r2, [r7, #6]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800e598:	88fb      	ldrh	r3, [r7, #6]
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	2100      	movs	r1, #0
 800e59e:	68f8      	ldr	r0, [r7, #12]
 800e5a0:	f000 fcbc 	bl	800ef1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e5a4:	2300      	movs	r3, #0
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3710      	adds	r7, #16
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b084      	sub	sp, #16
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	60f8      	str	r0, [r7, #12]
 800e5b6:	60b9      	str	r1, [r7, #8]
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e5bc:	88fb      	ldrh	r3, [r7, #6]
 800e5be:	68ba      	ldr	r2, [r7, #8]
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f000 fcaa 	bl	800ef1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e5c8:	2300      	movs	r3, #0
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b082      	sub	sp, #8
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2204      	movs	r2, #4
 800e5de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 fc74 	bl	800eed6 <USBD_LL_Transmit>

  return USBD_OK;
 800e5ee:	2300      	movs	r3, #0
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2205      	movs	r2, #5
 800e604:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e608:	2300      	movs	r3, #0
 800e60a:	2200      	movs	r2, #0
 800e60c:	2100      	movs	r1, #0
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 fc84 	bl	800ef1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3708      	adds	r7, #8
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
	...

0800e620 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e624:	2200      	movs	r2, #0
 800e626:	4912      	ldr	r1, [pc, #72]	; (800e670 <MX_USB_DEVICE_Init+0x50>)
 800e628:	4812      	ldr	r0, [pc, #72]	; (800e674 <MX_USB_DEVICE_Init+0x54>)
 800e62a:	f7fe ffd4 	bl	800d5d6 <USBD_Init>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d001      	beq.n	800e638 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e634:	f7f5 fea2 	bl	800437c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e638:	490f      	ldr	r1, [pc, #60]	; (800e678 <MX_USB_DEVICE_Init+0x58>)
 800e63a:	480e      	ldr	r0, [pc, #56]	; (800e674 <MX_USB_DEVICE_Init+0x54>)
 800e63c:	f7fe fff6 	bl	800d62c <USBD_RegisterClass>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d001      	beq.n	800e64a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e646:	f7f5 fe99 	bl	800437c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e64a:	490c      	ldr	r1, [pc, #48]	; (800e67c <MX_USB_DEVICE_Init+0x5c>)
 800e64c:	4809      	ldr	r0, [pc, #36]	; (800e674 <MX_USB_DEVICE_Init+0x54>)
 800e64e:	f7fe ff27 	bl	800d4a0 <USBD_CDC_RegisterInterface>
 800e652:	4603      	mov	r3, r0
 800e654:	2b00      	cmp	r3, #0
 800e656:	d001      	beq.n	800e65c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e658:	f7f5 fe90 	bl	800437c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e65c:	4805      	ldr	r0, [pc, #20]	; (800e674 <MX_USB_DEVICE_Init+0x54>)
 800e65e:	f7fe fffe 	bl	800d65e <USBD_Start>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e668:	f7f5 fe88 	bl	800437c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e66c:	bf00      	nop
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	200008b4 	.word	0x200008b4
 800e674:	20000e94 	.word	0x20000e94
 800e678:	200007a0 	.word	0x200007a0
 800e67c:	200008a4 	.word	0x200008a4

0800e680 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e684:	2200      	movs	r2, #0
 800e686:	4905      	ldr	r1, [pc, #20]	; (800e69c <CDC_Init_FS+0x1c>)
 800e688:	4805      	ldr	r0, [pc, #20]	; (800e6a0 <CDC_Init_FS+0x20>)
 800e68a:	f7fe ff1f 	bl	800d4cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e68e:	4905      	ldr	r1, [pc, #20]	; (800e6a4 <CDC_Init_FS+0x24>)
 800e690:	4803      	ldr	r0, [pc, #12]	; (800e6a0 <CDC_Init_FS+0x20>)
 800e692:	f7fe ff34 	bl	800d4fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e696:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e698:	4618      	mov	r0, r3
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	200011b0 	.word	0x200011b0
 800e6a0:	20000e94 	.word	0x20000e94
 800e6a4:	20001130 	.word	0x20001130

0800e6a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e6ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bc80      	pop	{r7}
 800e6b4:	4770      	bx	lr
	...

0800e6b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	4603      	mov	r3, r0
 800e6c0:	6039      	str	r1, [r7, #0]
 800e6c2:	71fb      	strb	r3, [r7, #7]
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e6c8:	79fb      	ldrb	r3, [r7, #7]
 800e6ca:	2b23      	cmp	r3, #35	; 0x23
 800e6cc:	d866      	bhi.n	800e79c <CDC_Control_FS+0xe4>
 800e6ce:	a201      	add	r2, pc, #4	; (adr r2, 800e6d4 <CDC_Control_FS+0x1c>)
 800e6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d4:	0800e79d 	.word	0x0800e79d
 800e6d8:	0800e79d 	.word	0x0800e79d
 800e6dc:	0800e79d 	.word	0x0800e79d
 800e6e0:	0800e79d 	.word	0x0800e79d
 800e6e4:	0800e79d 	.word	0x0800e79d
 800e6e8:	0800e79d 	.word	0x0800e79d
 800e6ec:	0800e79d 	.word	0x0800e79d
 800e6f0:	0800e79d 	.word	0x0800e79d
 800e6f4:	0800e79d 	.word	0x0800e79d
 800e6f8:	0800e79d 	.word	0x0800e79d
 800e6fc:	0800e79d 	.word	0x0800e79d
 800e700:	0800e79d 	.word	0x0800e79d
 800e704:	0800e79d 	.word	0x0800e79d
 800e708:	0800e79d 	.word	0x0800e79d
 800e70c:	0800e79d 	.word	0x0800e79d
 800e710:	0800e79d 	.word	0x0800e79d
 800e714:	0800e79d 	.word	0x0800e79d
 800e718:	0800e79d 	.word	0x0800e79d
 800e71c:	0800e79d 	.word	0x0800e79d
 800e720:	0800e79d 	.word	0x0800e79d
 800e724:	0800e79d 	.word	0x0800e79d
 800e728:	0800e79d 	.word	0x0800e79d
 800e72c:	0800e79d 	.word	0x0800e79d
 800e730:	0800e79d 	.word	0x0800e79d
 800e734:	0800e79d 	.word	0x0800e79d
 800e738:	0800e79d 	.word	0x0800e79d
 800e73c:	0800e79d 	.word	0x0800e79d
 800e740:	0800e79d 	.word	0x0800e79d
 800e744:	0800e79d 	.word	0x0800e79d
 800e748:	0800e79d 	.word	0x0800e79d
 800e74c:	0800e79d 	.word	0x0800e79d
 800e750:	0800e79d 	.word	0x0800e79d
 800e754:	0800e79d 	.word	0x0800e79d
 800e758:	0800e765 	.word	0x0800e765
 800e75c:	0800e79d 	.word	0x0800e79d
 800e760:	0800e79d 	.word	0x0800e79d
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	2220      	movs	r2, #32
 800e768:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	3301      	adds	r3, #1
 800e76e:	22c2      	movs	r2, #194	; 0xc2
 800e770:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	3302      	adds	r3, #2
 800e776:	2201      	movs	r2, #1
 800e778:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	3303      	adds	r3, #3
 800e77e:	2200      	movs	r2, #0
 800e780:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	3304      	adds	r3, #4
 800e786:	2200      	movs	r2, #0
 800e788:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	3305      	adds	r3, #5
 800e78e:	2200      	movs	r2, #0
 800e790:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	3306      	adds	r3, #6
 800e796:	2208      	movs	r2, #8
 800e798:	701a      	strb	r2, [r3, #0]
    break;
 800e79a:	e000      	b.n	800e79e <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e79c:	bf00      	nop
  }

  return (USBD_OK);
 800e79e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bc80      	pop	{r7}
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop

0800e7ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800e7ba:	e018      	b.n	800e7ee <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	2b0a      	cmp	r3, #10
 800e7c6:	d005      	beq.n	800e7d4 <CDC_Receive_FS+0x28>
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	2b0d      	cmp	r3, #13
 800e7d2:	d102      	bne.n	800e7da <CDC_Receive_FS+0x2e>
 800e7d4:	4b12      	ldr	r3, [pc, #72]	; (800e820 <CDC_Receive_FS+0x74>)
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	4413      	add	r3, r2
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7f5 fdb2 	bl	800434c <Write_to_circ_buffer>
	  i++;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d3e1      	bcc.n	800e7bc <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	4619      	mov	r1, r3
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 f811 	bl	800e828 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e806:	6879      	ldr	r1, [r7, #4]
 800e808:	4806      	ldr	r0, [pc, #24]	; (800e824 <CDC_Receive_FS+0x78>)
 800e80a:	f7fe fe78 	bl	800d4fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e80e:	4805      	ldr	r0, [pc, #20]	; (800e824 <CDC_Receive_FS+0x78>)
 800e810:	f7fe feb7 	bl	800d582 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e814:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e816:	4618      	mov	r0, r3
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	20000be8 	.word	0x20000be8
 800e824:	20000e94 	.word	0x20000e94

0800e828 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	460b      	mov	r3, r1
 800e832:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e834:	2300      	movs	r3, #0
 800e836:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e838:	4b0d      	ldr	r3, [pc, #52]	; (800e870 <CDC_Transmit_FS+0x48>)
 800e83a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e83e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e846:	2b00      	cmp	r3, #0
 800e848:	d001      	beq.n	800e84e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e84a:	2301      	movs	r3, #1
 800e84c:	e00b      	b.n	800e866 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e84e:	887b      	ldrh	r3, [r7, #2]
 800e850:	461a      	mov	r2, r3
 800e852:	6879      	ldr	r1, [r7, #4]
 800e854:	4806      	ldr	r0, [pc, #24]	; (800e870 <CDC_Transmit_FS+0x48>)
 800e856:	f7fe fe39 	bl	800d4cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e85a:	4805      	ldr	r0, [pc, #20]	; (800e870 <CDC_Transmit_FS+0x48>)
 800e85c:	f7fe fe62 	bl	800d524 <USBD_CDC_TransmitPacket>
 800e860:	4603      	mov	r3, r0
 800e862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e864:	7bfb      	ldrb	r3, [r7, #15]
}
 800e866:	4618      	mov	r0, r3
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	20000e94 	.word	0x20000e94

0800e874 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	4603      	mov	r3, r0
 800e87c:	6039      	str	r1, [r7, #0]
 800e87e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2212      	movs	r2, #18
 800e884:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e886:	4b03      	ldr	r3, [pc, #12]	; (800e894 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e888:	4618      	mov	r0, r3
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bc80      	pop	{r7}
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	200008d0 	.word	0x200008d0

0800e898 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	4603      	mov	r3, r0
 800e8a0:	6039      	str	r1, [r7, #0]
 800e8a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	2204      	movs	r2, #4
 800e8a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e8aa:	4b03      	ldr	r3, [pc, #12]	; (800e8b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bc80      	pop	{r7}
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	200008e4 	.word	0x200008e4

0800e8bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	6039      	str	r1, [r7, #0]
 800e8c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e8c8:	79fb      	ldrb	r3, [r7, #7]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d105      	bne.n	800e8da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e8ce:	683a      	ldr	r2, [r7, #0]
 800e8d0:	4907      	ldr	r1, [pc, #28]	; (800e8f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e8d2:	4808      	ldr	r0, [pc, #32]	; (800e8f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e8d4:	f7ff fdc6 	bl	800e464 <USBD_GetString>
 800e8d8:	e004      	b.n	800e8e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	4904      	ldr	r1, [pc, #16]	; (800e8f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e8de:	4805      	ldr	r0, [pc, #20]	; (800e8f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e8e0:	f7ff fdc0 	bl	800e464 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8e4:	4b02      	ldr	r3, [pc, #8]	; (800e8f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3708      	adds	r7, #8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	200012b0 	.word	0x200012b0
 800e8f4:	080138b8 	.word	0x080138b8

0800e8f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	4603      	mov	r3, r0
 800e900:	6039      	str	r1, [r7, #0]
 800e902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e904:	683a      	ldr	r2, [r7, #0]
 800e906:	4904      	ldr	r1, [pc, #16]	; (800e918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e908:	4804      	ldr	r0, [pc, #16]	; (800e91c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e90a:	f7ff fdab 	bl	800e464 <USBD_GetString>
  return USBD_StrDesc;
 800e90e:	4b02      	ldr	r3, [pc, #8]	; (800e918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e910:	4618      	mov	r0, r3
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	200012b0 	.word	0x200012b0
 800e91c:	080138c4 	.word	0x080138c4

0800e920 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	4603      	mov	r3, r0
 800e928:	6039      	str	r1, [r7, #0]
 800e92a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	221a      	movs	r2, #26
 800e930:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e932:	f000 f843 	bl	800e9bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e936:	4b02      	ldr	r3, [pc, #8]	; (800e940 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	200008e8 	.word	0x200008e8

0800e944 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	4603      	mov	r3, r0
 800e94c:	6039      	str	r1, [r7, #0]
 800e94e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e950:	79fb      	ldrb	r3, [r7, #7]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d105      	bne.n	800e962 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e956:	683a      	ldr	r2, [r7, #0]
 800e958:	4907      	ldr	r1, [pc, #28]	; (800e978 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e95a:	4808      	ldr	r0, [pc, #32]	; (800e97c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e95c:	f7ff fd82 	bl	800e464 <USBD_GetString>
 800e960:	e004      	b.n	800e96c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	4904      	ldr	r1, [pc, #16]	; (800e978 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e966:	4805      	ldr	r0, [pc, #20]	; (800e97c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e968:	f7ff fd7c 	bl	800e464 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e96c:	4b02      	ldr	r3, [pc, #8]	; (800e978 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	200012b0 	.word	0x200012b0
 800e97c:	080138d4 	.word	0x080138d4

0800e980 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	4603      	mov	r3, r0
 800e988:	6039      	str	r1, [r7, #0]
 800e98a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e98c:	79fb      	ldrb	r3, [r7, #7]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d105      	bne.n	800e99e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	4907      	ldr	r1, [pc, #28]	; (800e9b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e996:	4808      	ldr	r0, [pc, #32]	; (800e9b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e998:	f7ff fd64 	bl	800e464 <USBD_GetString>
 800e99c:	e004      	b.n	800e9a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e99e:	683a      	ldr	r2, [r7, #0]
 800e9a0:	4904      	ldr	r1, [pc, #16]	; (800e9b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e9a2:	4805      	ldr	r0, [pc, #20]	; (800e9b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e9a4:	f7ff fd5e 	bl	800e464 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9a8:	4b02      	ldr	r3, [pc, #8]	; (800e9b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	200012b0 	.word	0x200012b0
 800e9b8:	080138e0 	.word	0x080138e0

0800e9bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ea00 <Get_SerialNum+0x44>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e9c8:	4b0e      	ldr	r3, [pc, #56]	; (800ea04 <Get_SerialNum+0x48>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e9ce:	4b0e      	ldr	r3, [pc, #56]	; (800ea08 <Get_SerialNum+0x4c>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e9d4:	68fa      	ldr	r2, [r7, #12]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4413      	add	r3, r2
 800e9da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d009      	beq.n	800e9f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e9e2:	2208      	movs	r2, #8
 800e9e4:	4909      	ldr	r1, [pc, #36]	; (800ea0c <Get_SerialNum+0x50>)
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f000 f814 	bl	800ea14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e9ec:	2204      	movs	r2, #4
 800e9ee:	4908      	ldr	r1, [pc, #32]	; (800ea10 <Get_SerialNum+0x54>)
 800e9f0:	68b8      	ldr	r0, [r7, #8]
 800e9f2:	f000 f80f 	bl	800ea14 <IntToUnicode>
  }
}
 800e9f6:	bf00      	nop
 800e9f8:	3710      	adds	r7, #16
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	1ff80050 	.word	0x1ff80050
 800ea04:	1ff80054 	.word	0x1ff80054
 800ea08:	1ff80058 	.word	0x1ff80058
 800ea0c:	200008ea 	.word	0x200008ea
 800ea10:	200008fa 	.word	0x200008fa

0800ea14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b087      	sub	sp, #28
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ea22:	2300      	movs	r3, #0
 800ea24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ea26:	2300      	movs	r3, #0
 800ea28:	75fb      	strb	r3, [r7, #23]
 800ea2a:	e027      	b.n	800ea7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	0f1b      	lsrs	r3, r3, #28
 800ea30:	2b09      	cmp	r3, #9
 800ea32:	d80b      	bhi.n	800ea4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	0f1b      	lsrs	r3, r3, #28
 800ea38:	b2da      	uxtb	r2, r3
 800ea3a:	7dfb      	ldrb	r3, [r7, #23]
 800ea3c:	005b      	lsls	r3, r3, #1
 800ea3e:	4619      	mov	r1, r3
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	440b      	add	r3, r1
 800ea44:	3230      	adds	r2, #48	; 0x30
 800ea46:	b2d2      	uxtb	r2, r2
 800ea48:	701a      	strb	r2, [r3, #0]
 800ea4a:	e00a      	b.n	800ea62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	0f1b      	lsrs	r3, r3, #28
 800ea50:	b2da      	uxtb	r2, r3
 800ea52:	7dfb      	ldrb	r3, [r7, #23]
 800ea54:	005b      	lsls	r3, r3, #1
 800ea56:	4619      	mov	r1, r3
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	440b      	add	r3, r1
 800ea5c:	3237      	adds	r2, #55	; 0x37
 800ea5e:	b2d2      	uxtb	r2, r2
 800ea60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	011b      	lsls	r3, r3, #4
 800ea66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ea68:	7dfb      	ldrb	r3, [r7, #23]
 800ea6a:	005b      	lsls	r3, r3, #1
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	68ba      	ldr	r2, [r7, #8]
 800ea70:	4413      	add	r3, r2
 800ea72:	2200      	movs	r2, #0
 800ea74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ea76:	7dfb      	ldrb	r3, [r7, #23]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	75fb      	strb	r3, [r7, #23]
 800ea7c:	7dfa      	ldrb	r2, [r7, #23]
 800ea7e:	79fb      	ldrb	r3, [r7, #7]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d3d3      	bcc.n	800ea2c <IntToUnicode+0x18>
  }
}
 800ea84:	bf00      	nop
 800ea86:	bf00      	nop
 800ea88:	371c      	adds	r7, #28
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bc80      	pop	{r7}
 800ea8e:	4770      	bx	lr

0800ea90 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800ea9c:	78fb      	ldrb	r3, [r7, #3]
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d106      	bne.n	800eab0 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800eaa2:	4b09      	ldr	r3, [pc, #36]	; (800eac8 <HAL_PCDEx_SetConnectionState+0x38>)
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	4a08      	ldr	r2, [pc, #32]	; (800eac8 <HAL_PCDEx_SetConnectionState+0x38>)
 800eaa8:	f043 0301 	orr.w	r3, r3, #1
 800eaac:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800eaae:	e005      	b.n	800eabc <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800eab0:	4b05      	ldr	r3, [pc, #20]	; (800eac8 <HAL_PCDEx_SetConnectionState+0x38>)
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	4a04      	ldr	r2, [pc, #16]	; (800eac8 <HAL_PCDEx_SetConnectionState+0x38>)
 800eab6:	f023 0301 	bic.w	r3, r3, #1
 800eaba:	6053      	str	r3, [r2, #4]
}
 800eabc:	bf00      	nop
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bc80      	pop	{r7}
 800eac4:	4770      	bx	lr
 800eac6:	bf00      	nop
 800eac8:	40010000 	.word	0x40010000

0800eacc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a0d      	ldr	r2, [pc, #52]	; (800eb10 <HAL_PCD_MspInit+0x44>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d113      	bne.n	800eb06 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800eade:	4b0d      	ldr	r3, [pc, #52]	; (800eb14 <HAL_PCD_MspInit+0x48>)
 800eae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae2:	4a0c      	ldr	r2, [pc, #48]	; (800eb14 <HAL_PCD_MspInit+0x48>)
 800eae4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800eae8:	6253      	str	r3, [r2, #36]	; 0x24
 800eaea:	4b0a      	ldr	r3, [pc, #40]	; (800eb14 <HAL_PCD_MspInit+0x48>)
 800eaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eaf2:	60fb      	str	r3, [r7, #12]
 800eaf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	2101      	movs	r1, #1
 800eafa:	2014      	movs	r0, #20
 800eafc:	f7f6 fa43 	bl	8004f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800eb00:	2014      	movs	r0, #20
 800eb02:	f7f6 fa5c 	bl	8004fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800eb06:	bf00      	nop
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	40005c00 	.word	0x40005c00
 800eb14:	40023800 	.word	0x40023800

0800eb18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	4610      	mov	r0, r2
 800eb30:	f7fe fddd 	bl	800d6ee <USBD_LL_SetupStage>
}
 800eb34:	bf00      	nop
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800eb4e:	78fa      	ldrb	r2, [r7, #3]
 800eb50:	6879      	ldr	r1, [r7, #4]
 800eb52:	4613      	mov	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	4413      	add	r3, r2
 800eb58:	00db      	lsls	r3, r3, #3
 800eb5a:	440b      	add	r3, r1
 800eb5c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	78fb      	ldrb	r3, [r7, #3]
 800eb64:	4619      	mov	r1, r3
 800eb66:	f7fe fe0f 	bl	800d788 <USBD_LL_DataOutStage>
}
 800eb6a:	bf00      	nop
 800eb6c:	3708      	adds	r7, #8
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b082      	sub	sp, #8
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800eb84:	78fa      	ldrb	r2, [r7, #3]
 800eb86:	6879      	ldr	r1, [r7, #4]
 800eb88:	4613      	mov	r3, r2
 800eb8a:	009b      	lsls	r3, r3, #2
 800eb8c:	4413      	add	r3, r2
 800eb8e:	00db      	lsls	r3, r3, #3
 800eb90:	440b      	add	r3, r1
 800eb92:	333c      	adds	r3, #60	; 0x3c
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	78fb      	ldrb	r3, [r7, #3]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	f7fe fe66 	bl	800d86a <USBD_LL_DataInStage>
}
 800eb9e:	bf00      	nop
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b082      	sub	sp, #8
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fe ff71 	bl	800da9c <USBD_LL_SOF>
}
 800ebba:	bf00      	nop
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	d001      	beq.n	800ebda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ebd6:	f7f5 fbd1 	bl	800437c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ebe0:	7bfa      	ldrb	r2, [r7, #15]
 800ebe2:	4611      	mov	r1, r2
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7fe ff26 	bl	800da36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fe fedf 	bl	800d9b4 <USBD_LL_Reset>
}
 800ebf6:	bf00      	nop
 800ebf8:	3710      	adds	r7, #16
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
	...

0800ec00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe ff20 	bl	800da54 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	699b      	ldr	r3, [r3, #24]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d005      	beq.n	800ec28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec1c:	4b04      	ldr	r3, [pc, #16]	; (800ec30 <HAL_PCD_SuspendCallback+0x30>)
 800ec1e:	691b      	ldr	r3, [r3, #16]
 800ec20:	4a03      	ldr	r2, [pc, #12]	; (800ec30 <HAL_PCD_SuspendCallback+0x30>)
 800ec22:	f043 0306 	orr.w	r3, r3, #6
 800ec26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ec28:	bf00      	nop
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	e000ed00 	.word	0xe000ed00

0800ec34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fe ff1a 	bl	800da7c <USBD_LL_Resume>
}
 800ec48:	bf00      	nop
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ec58:	4a28      	ldr	r2, [pc, #160]	; (800ecfc <USBD_LL_Init+0xac>)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4a26      	ldr	r2, [pc, #152]	; (800ecfc <USBD_LL_Init+0xac>)
 800ec64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800ec68:	4b24      	ldr	r3, [pc, #144]	; (800ecfc <USBD_LL_Init+0xac>)
 800ec6a:	4a25      	ldr	r2, [pc, #148]	; (800ed00 <USBD_LL_Init+0xb0>)
 800ec6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ec6e:	4b23      	ldr	r3, [pc, #140]	; (800ecfc <USBD_LL_Init+0xac>)
 800ec70:	2208      	movs	r2, #8
 800ec72:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ec74:	4b21      	ldr	r3, [pc, #132]	; (800ecfc <USBD_LL_Init+0xac>)
 800ec76:	2202      	movs	r2, #2
 800ec78:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ec7a:	4b20      	ldr	r3, [pc, #128]	; (800ecfc <USBD_LL_Init+0xac>)
 800ec7c:	2202      	movs	r2, #2
 800ec7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ec80:	4b1e      	ldr	r3, [pc, #120]	; (800ecfc <USBD_LL_Init+0xac>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ec86:	4b1d      	ldr	r3, [pc, #116]	; (800ecfc <USBD_LL_Init+0xac>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ec8c:	481b      	ldr	r0, [pc, #108]	; (800ecfc <USBD_LL_Init+0xac>)
 800ec8e:	f7f7 feab 	bl	80069e8 <HAL_PCD_Init>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d001      	beq.n	800ec9c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ec98:	f7f5 fb70 	bl	800437c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800eca2:	2318      	movs	r3, #24
 800eca4:	2200      	movs	r2, #0
 800eca6:	2100      	movs	r1, #0
 800eca8:	f7f9 fa88 	bl	80081bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ecb2:	2358      	movs	r3, #88	; 0x58
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	2180      	movs	r1, #128	; 0x80
 800ecb8:	f7f9 fa80 	bl	80081bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ecc2:	23c0      	movs	r3, #192	; 0xc0
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	2181      	movs	r1, #129	; 0x81
 800ecc8:	f7f9 fa78 	bl	80081bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ecd2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	2101      	movs	r1, #1
 800ecda:	f7f9 fa6f 	bl	80081bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ece4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ece8:	2200      	movs	r2, #0
 800ecea:	2182      	movs	r1, #130	; 0x82
 800ecec:	f7f9 fa66 	bl	80081bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	200014b0 	.word	0x200014b0
 800ed00:	40005c00 	.word	0x40005c00

0800ed04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed10:	2300      	movs	r3, #0
 800ed12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7f7 ff42 	bl	8006ba4 <HAL_PCD_Start>
 800ed20:	4603      	mov	r3, r0
 800ed22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed24:	7bfb      	ldrb	r3, [r7, #15]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f000 f944 	bl	800efb4 <USBD_Get_USB_Status>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b084      	sub	sp, #16
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
 800ed42:	4608      	mov	r0, r1
 800ed44:	4611      	mov	r1, r2
 800ed46:	461a      	mov	r2, r3
 800ed48:	4603      	mov	r3, r0
 800ed4a:	70fb      	strb	r3, [r7, #3]
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	70bb      	strb	r3, [r7, #2]
 800ed50:	4613      	mov	r3, r2
 800ed52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ed62:	78bb      	ldrb	r3, [r7, #2]
 800ed64:	883a      	ldrh	r2, [r7, #0]
 800ed66:	78f9      	ldrb	r1, [r7, #3]
 800ed68:	f7f8 f85e 	bl	8006e28 <HAL_PCD_EP_Open>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
 800ed72:	4618      	mov	r0, r3
 800ed74:	f000 f91e 	bl	800efb4 <USBD_Get_USB_Status>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b084      	sub	sp, #16
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
 800ed8e:	460b      	mov	r3, r1
 800ed90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed92:	2300      	movs	r3, #0
 800ed94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed96:	2300      	movs	r3, #0
 800ed98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800eda0:	78fa      	ldrb	r2, [r7, #3]
 800eda2:	4611      	mov	r1, r2
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7f8 f8a5 	bl	8006ef4 <HAL_PCD_EP_Close>
 800edaa:	4603      	mov	r3, r0
 800edac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edae:	7bfb      	ldrb	r3, [r7, #15]
 800edb0:	4618      	mov	r0, r3
 800edb2:	f000 f8ff 	bl	800efb4 <USBD_Get_USB_Status>
 800edb6:	4603      	mov	r3, r0
 800edb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edba:	7bbb      	ldrb	r3, [r7, #14]
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3710      	adds	r7, #16
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	460b      	mov	r3, r1
 800edce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edd0:	2300      	movs	r3, #0
 800edd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edd4:	2300      	movs	r3, #0
 800edd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800edde:	78fa      	ldrb	r2, [r7, #3]
 800ede0:	4611      	mov	r1, r2
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7f8 f965 	bl	80070b2 <HAL_PCD_EP_SetStall>
 800ede8:	4603      	mov	r3, r0
 800edea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edec:	7bfb      	ldrb	r3, [r7, #15]
 800edee:	4618      	mov	r0, r3
 800edf0:	f000 f8e0 	bl	800efb4 <USBD_Get_USB_Status>
 800edf4:	4603      	mov	r3, r0
 800edf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3710      	adds	r7, #16
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b084      	sub	sp, #16
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee12:	2300      	movs	r3, #0
 800ee14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ee1c:	78fa      	ldrb	r2, [r7, #3]
 800ee1e:	4611      	mov	r1, r2
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7f8 f998 	bl	8007156 <HAL_PCD_EP_ClrStall>
 800ee26:	4603      	mov	r3, r0
 800ee28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee2a:	7bfb      	ldrb	r3, [r7, #15]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f000 f8c1 	bl	800efb4 <USBD_Get_USB_Status>
 800ee32:	4603      	mov	r3, r0
 800ee34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee36:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	460b      	mov	r3, r1
 800ee4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ee52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ee54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	da0c      	bge.n	800ee76 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ee5c:	78fb      	ldrb	r3, [r7, #3]
 800ee5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee62:	68f9      	ldr	r1, [r7, #12]
 800ee64:	1c5a      	adds	r2, r3, #1
 800ee66:	4613      	mov	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	4413      	add	r3, r2
 800ee6c:	00db      	lsls	r3, r3, #3
 800ee6e:	440b      	add	r3, r1
 800ee70:	3302      	adds	r3, #2
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	e00b      	b.n	800ee8e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ee76:	78fb      	ldrb	r3, [r7, #3]
 800ee78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee7c:	68f9      	ldr	r1, [r7, #12]
 800ee7e:	4613      	mov	r3, r2
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	4413      	add	r3, r2
 800ee84:	00db      	lsls	r3, r3, #3
 800ee86:	440b      	add	r3, r1
 800ee88:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ee8c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3714      	adds	r7, #20
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bc80      	pop	{r7}
 800ee96:	4770      	bx	lr

0800ee98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	460b      	mov	r3, r1
 800eea2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eea4:	2300      	movs	r3, #0
 800eea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800eeb2:	78fa      	ldrb	r2, [r7, #3]
 800eeb4:	4611      	mov	r1, r2
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7f7 ff91 	bl	8006dde <HAL_PCD_SetAddress>
 800eebc:	4603      	mov	r3, r0
 800eebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eec0:	7bfb      	ldrb	r3, [r7, #15]
 800eec2:	4618      	mov	r0, r3
 800eec4:	f000 f876 	bl	800efb4 <USBD_Get_USB_Status>
 800eec8:	4603      	mov	r3, r0
 800eeca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eecc:	7bbb      	ldrb	r3, [r7, #14]
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3710      	adds	r7, #16
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b086      	sub	sp, #24
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	60f8      	str	r0, [r7, #12]
 800eede:	607a      	str	r2, [r7, #4]
 800eee0:	461a      	mov	r2, r3
 800eee2:	460b      	mov	r3, r1
 800eee4:	72fb      	strb	r3, [r7, #11]
 800eee6:	4613      	mov	r3, r2
 800eee8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeea:	2300      	movs	r3, #0
 800eeec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeee:	2300      	movs	r3, #0
 800eef0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800eef8:	893b      	ldrh	r3, [r7, #8]
 800eefa:	7af9      	ldrb	r1, [r7, #11]
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	f7f8 f895 	bl	800702c <HAL_PCD_EP_Transmit>
 800ef02:	4603      	mov	r3, r0
 800ef04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef06:	7dfb      	ldrb	r3, [r7, #23]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f000 f853 	bl	800efb4 <USBD_Get_USB_Status>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef12:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	607a      	str	r2, [r7, #4]
 800ef26:	461a      	mov	r2, r3
 800ef28:	460b      	mov	r3, r1
 800ef2a:	72fb      	strb	r3, [r7, #11]
 800ef2c:	4613      	mov	r3, r2
 800ef2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef30:	2300      	movs	r3, #0
 800ef32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ef3e:	893b      	ldrh	r3, [r7, #8]
 800ef40:	7af9      	ldrb	r1, [r7, #11]
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	f7f8 f81e 	bl	8006f84 <HAL_PCD_EP_Receive>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef4c:	7dfb      	ldrb	r3, [r7, #23]
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f000 f830 	bl	800efb4 <USBD_Get_USB_Status>
 800ef54:	4603      	mov	r3, r0
 800ef56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef58:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3718      	adds	r7, #24
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b082      	sub	sp, #8
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ef74:	78fa      	ldrb	r2, [r7, #3]
 800ef76:	4611      	mov	r1, r2
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7f8 f840 	bl	8006ffe <HAL_PCD_EP_GetRxCount>
 800ef7e:	4603      	mov	r3, r0
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ef90:	4b02      	ldr	r3, [pc, #8]	; (800ef9c <USBD_static_malloc+0x14>)
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	370c      	adds	r7, #12
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bc80      	pop	{r7}
 800ef9a:	4770      	bx	lr
 800ef9c:	2000179c 	.word	0x2000179c

0800efa0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]

}
 800efa8:	bf00      	nop
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	bc80      	pop	{r7}
 800efb0:	4770      	bx	lr
	...

0800efb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b085      	sub	sp, #20
 800efb8:	af00      	add	r7, sp, #0
 800efba:	4603      	mov	r3, r0
 800efbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efbe:	2300      	movs	r3, #0
 800efc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800efc2:	79fb      	ldrb	r3, [r7, #7]
 800efc4:	2b03      	cmp	r3, #3
 800efc6:	d817      	bhi.n	800eff8 <USBD_Get_USB_Status+0x44>
 800efc8:	a201      	add	r2, pc, #4	; (adr r2, 800efd0 <USBD_Get_USB_Status+0x1c>)
 800efca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efce:	bf00      	nop
 800efd0:	0800efe1 	.word	0x0800efe1
 800efd4:	0800efe7 	.word	0x0800efe7
 800efd8:	0800efed 	.word	0x0800efed
 800efdc:	0800eff3 	.word	0x0800eff3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800efe0:	2300      	movs	r3, #0
 800efe2:	73fb      	strb	r3, [r7, #15]
    break;
 800efe4:	e00b      	b.n	800effe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800efe6:	2302      	movs	r3, #2
 800efe8:	73fb      	strb	r3, [r7, #15]
    break;
 800efea:	e008      	b.n	800effe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800efec:	2301      	movs	r3, #1
 800efee:	73fb      	strb	r3, [r7, #15]
    break;
 800eff0:	e005      	b.n	800effe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eff2:	2302      	movs	r3, #2
 800eff4:	73fb      	strb	r3, [r7, #15]
    break;
 800eff6:	e002      	b.n	800effe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eff8:	2302      	movs	r3, #2
 800effa:	73fb      	strb	r3, [r7, #15]
    break;
 800effc:	bf00      	nop
  }
  return usb_status;
 800effe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3714      	adds	r7, #20
 800f004:	46bd      	mov	sp, r7
 800f006:	bc80      	pop	{r7}
 800f008:	4770      	bx	lr
 800f00a:	bf00      	nop
 800f00c:	0000      	movs	r0, r0
	...

0800f010 <floor>:
 800f010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f014:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f018:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f01c:	2e13      	cmp	r6, #19
 800f01e:	4602      	mov	r2, r0
 800f020:	460b      	mov	r3, r1
 800f022:	4607      	mov	r7, r0
 800f024:	460c      	mov	r4, r1
 800f026:	4605      	mov	r5, r0
 800f028:	dc33      	bgt.n	800f092 <floor+0x82>
 800f02a:	2e00      	cmp	r6, #0
 800f02c:	da14      	bge.n	800f058 <floor+0x48>
 800f02e:	a334      	add	r3, pc, #208	; (adr r3, 800f100 <floor+0xf0>)
 800f030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f034:	f7f1 f8bc 	bl	80001b0 <__adddf3>
 800f038:	2200      	movs	r2, #0
 800f03a:	2300      	movs	r3, #0
 800f03c:	f7f1 fcfe 	bl	8000a3c <__aeabi_dcmpgt>
 800f040:	b138      	cbz	r0, 800f052 <floor+0x42>
 800f042:	2c00      	cmp	r4, #0
 800f044:	da58      	bge.n	800f0f8 <floor+0xe8>
 800f046:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f04a:	431d      	orrs	r5, r3
 800f04c:	d001      	beq.n	800f052 <floor+0x42>
 800f04e:	2500      	movs	r5, #0
 800f050:	4c2d      	ldr	r4, [pc, #180]	; (800f108 <floor+0xf8>)
 800f052:	4623      	mov	r3, r4
 800f054:	462f      	mov	r7, r5
 800f056:	e025      	b.n	800f0a4 <floor+0x94>
 800f058:	4a2c      	ldr	r2, [pc, #176]	; (800f10c <floor+0xfc>)
 800f05a:	fa42 f806 	asr.w	r8, r2, r6
 800f05e:	ea01 0208 	and.w	r2, r1, r8
 800f062:	4302      	orrs	r2, r0
 800f064:	d01e      	beq.n	800f0a4 <floor+0x94>
 800f066:	a326      	add	r3, pc, #152	; (adr r3, 800f100 <floor+0xf0>)
 800f068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06c:	f7f1 f8a0 	bl	80001b0 <__adddf3>
 800f070:	2200      	movs	r2, #0
 800f072:	2300      	movs	r3, #0
 800f074:	f7f1 fce2 	bl	8000a3c <__aeabi_dcmpgt>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d0ea      	beq.n	800f052 <floor+0x42>
 800f07c:	2c00      	cmp	r4, #0
 800f07e:	bfbe      	ittt	lt
 800f080:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f084:	fa43 f606 	asrlt.w	r6, r3, r6
 800f088:	19a4      	addlt	r4, r4, r6
 800f08a:	2500      	movs	r5, #0
 800f08c:	ea24 0408 	bic.w	r4, r4, r8
 800f090:	e7df      	b.n	800f052 <floor+0x42>
 800f092:	2e33      	cmp	r6, #51	; 0x33
 800f094:	dd0a      	ble.n	800f0ac <floor+0x9c>
 800f096:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f09a:	d103      	bne.n	800f0a4 <floor+0x94>
 800f09c:	f7f1 f888 	bl	80001b0 <__adddf3>
 800f0a0:	4607      	mov	r7, r0
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	4638      	mov	r0, r7
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f0b0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800f0b4:	fa22 f808 	lsr.w	r8, r2, r8
 800f0b8:	ea18 0f00 	tst.w	r8, r0
 800f0bc:	d0f2      	beq.n	800f0a4 <floor+0x94>
 800f0be:	a310      	add	r3, pc, #64	; (adr r3, 800f100 <floor+0xf0>)
 800f0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c4:	f7f1 f874 	bl	80001b0 <__adddf3>
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	f7f1 fcb6 	bl	8000a3c <__aeabi_dcmpgt>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	d0be      	beq.n	800f052 <floor+0x42>
 800f0d4:	2c00      	cmp	r4, #0
 800f0d6:	da02      	bge.n	800f0de <floor+0xce>
 800f0d8:	2e14      	cmp	r6, #20
 800f0da:	d103      	bne.n	800f0e4 <floor+0xd4>
 800f0dc:	3401      	adds	r4, #1
 800f0de:	ea25 0508 	bic.w	r5, r5, r8
 800f0e2:	e7b6      	b.n	800f052 <floor+0x42>
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f0ea:	fa03 f606 	lsl.w	r6, r3, r6
 800f0ee:	4435      	add	r5, r6
 800f0f0:	42bd      	cmp	r5, r7
 800f0f2:	bf38      	it	cc
 800f0f4:	18e4      	addcc	r4, r4, r3
 800f0f6:	e7f2      	b.n	800f0de <floor+0xce>
 800f0f8:	2500      	movs	r5, #0
 800f0fa:	462c      	mov	r4, r5
 800f0fc:	e7a9      	b.n	800f052 <floor+0x42>
 800f0fe:	bf00      	nop
 800f100:	8800759c 	.word	0x8800759c
 800f104:	7e37e43c 	.word	0x7e37e43c
 800f108:	bff00000 	.word	0xbff00000
 800f10c:	000fffff 	.word	0x000fffff

0800f110 <atof>:
 800f110:	2100      	movs	r1, #0
 800f112:	f001 bad5 	b.w	80106c0 <strtod>
	...

0800f118 <__errno>:
 800f118:	4b01      	ldr	r3, [pc, #4]	; (800f120 <__errno+0x8>)
 800f11a:	6818      	ldr	r0, [r3, #0]
 800f11c:	4770      	bx	lr
 800f11e:	bf00      	nop
 800f120:	20000904 	.word	0x20000904

0800f124 <__libc_init_array>:
 800f124:	b570      	push	{r4, r5, r6, lr}
 800f126:	2600      	movs	r6, #0
 800f128:	4d0c      	ldr	r5, [pc, #48]	; (800f15c <__libc_init_array+0x38>)
 800f12a:	4c0d      	ldr	r4, [pc, #52]	; (800f160 <__libc_init_array+0x3c>)
 800f12c:	1b64      	subs	r4, r4, r5
 800f12e:	10a4      	asrs	r4, r4, #2
 800f130:	42a6      	cmp	r6, r4
 800f132:	d109      	bne.n	800f148 <__libc_init_array+0x24>
 800f134:	f004 fa30 	bl	8013598 <_init>
 800f138:	2600      	movs	r6, #0
 800f13a:	4d0a      	ldr	r5, [pc, #40]	; (800f164 <__libc_init_array+0x40>)
 800f13c:	4c0a      	ldr	r4, [pc, #40]	; (800f168 <__libc_init_array+0x44>)
 800f13e:	1b64      	subs	r4, r4, r5
 800f140:	10a4      	asrs	r4, r4, #2
 800f142:	42a6      	cmp	r6, r4
 800f144:	d105      	bne.n	800f152 <__libc_init_array+0x2e>
 800f146:	bd70      	pop	{r4, r5, r6, pc}
 800f148:	f855 3b04 	ldr.w	r3, [r5], #4
 800f14c:	4798      	blx	r3
 800f14e:	3601      	adds	r6, #1
 800f150:	e7ee      	b.n	800f130 <__libc_init_array+0xc>
 800f152:	f855 3b04 	ldr.w	r3, [r5], #4
 800f156:	4798      	blx	r3
 800f158:	3601      	adds	r6, #1
 800f15a:	e7f2      	b.n	800f142 <__libc_init_array+0x1e>
 800f15c:	08013e18 	.word	0x08013e18
 800f160:	08013e18 	.word	0x08013e18
 800f164:	08013e18 	.word	0x08013e18
 800f168:	08013e1c 	.word	0x08013e1c

0800f16c <memcpy>:
 800f16c:	440a      	add	r2, r1
 800f16e:	4291      	cmp	r1, r2
 800f170:	f100 33ff 	add.w	r3, r0, #4294967295
 800f174:	d100      	bne.n	800f178 <memcpy+0xc>
 800f176:	4770      	bx	lr
 800f178:	b510      	push	{r4, lr}
 800f17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f17e:	4291      	cmp	r1, r2
 800f180:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f184:	d1f9      	bne.n	800f17a <memcpy+0xe>
 800f186:	bd10      	pop	{r4, pc}

0800f188 <memset>:
 800f188:	4603      	mov	r3, r0
 800f18a:	4402      	add	r2, r0
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d100      	bne.n	800f192 <memset+0xa>
 800f190:	4770      	bx	lr
 800f192:	f803 1b01 	strb.w	r1, [r3], #1
 800f196:	e7f9      	b.n	800f18c <memset+0x4>

0800f198 <__cvt>:
 800f198:	2b00      	cmp	r3, #0
 800f19a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f19e:	461f      	mov	r7, r3
 800f1a0:	bfbb      	ittet	lt
 800f1a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800f1a6:	461f      	movlt	r7, r3
 800f1a8:	2300      	movge	r3, #0
 800f1aa:	232d      	movlt	r3, #45	; 0x2d
 800f1ac:	b088      	sub	sp, #32
 800f1ae:	4614      	mov	r4, r2
 800f1b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f1b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f1b4:	7013      	strb	r3, [r2, #0]
 800f1b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f1b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800f1bc:	f023 0820 	bic.w	r8, r3, #32
 800f1c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f1c4:	d005      	beq.n	800f1d2 <__cvt+0x3a>
 800f1c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f1ca:	d100      	bne.n	800f1ce <__cvt+0x36>
 800f1cc:	3501      	adds	r5, #1
 800f1ce:	2302      	movs	r3, #2
 800f1d0:	e000      	b.n	800f1d4 <__cvt+0x3c>
 800f1d2:	2303      	movs	r3, #3
 800f1d4:	aa07      	add	r2, sp, #28
 800f1d6:	9204      	str	r2, [sp, #16]
 800f1d8:	aa06      	add	r2, sp, #24
 800f1da:	e9cd a202 	strd	sl, r2, [sp, #8]
 800f1de:	e9cd 3500 	strd	r3, r5, [sp]
 800f1e2:	4622      	mov	r2, r4
 800f1e4:	463b      	mov	r3, r7
 800f1e6:	f001 fb7f 	bl	80108e8 <_dtoa_r>
 800f1ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f1ee:	4606      	mov	r6, r0
 800f1f0:	d102      	bne.n	800f1f8 <__cvt+0x60>
 800f1f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f1f4:	07db      	lsls	r3, r3, #31
 800f1f6:	d522      	bpl.n	800f23e <__cvt+0xa6>
 800f1f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f1fc:	eb06 0905 	add.w	r9, r6, r5
 800f200:	d110      	bne.n	800f224 <__cvt+0x8c>
 800f202:	7833      	ldrb	r3, [r6, #0]
 800f204:	2b30      	cmp	r3, #48	; 0x30
 800f206:	d10a      	bne.n	800f21e <__cvt+0x86>
 800f208:	2200      	movs	r2, #0
 800f20a:	2300      	movs	r3, #0
 800f20c:	4620      	mov	r0, r4
 800f20e:	4639      	mov	r1, r7
 800f210:	f7f1 fbec 	bl	80009ec <__aeabi_dcmpeq>
 800f214:	b918      	cbnz	r0, 800f21e <__cvt+0x86>
 800f216:	f1c5 0501 	rsb	r5, r5, #1
 800f21a:	f8ca 5000 	str.w	r5, [sl]
 800f21e:	f8da 3000 	ldr.w	r3, [sl]
 800f222:	4499      	add	r9, r3
 800f224:	2200      	movs	r2, #0
 800f226:	2300      	movs	r3, #0
 800f228:	4620      	mov	r0, r4
 800f22a:	4639      	mov	r1, r7
 800f22c:	f7f1 fbde 	bl	80009ec <__aeabi_dcmpeq>
 800f230:	b108      	cbz	r0, 800f236 <__cvt+0x9e>
 800f232:	f8cd 901c 	str.w	r9, [sp, #28]
 800f236:	2230      	movs	r2, #48	; 0x30
 800f238:	9b07      	ldr	r3, [sp, #28]
 800f23a:	454b      	cmp	r3, r9
 800f23c:	d307      	bcc.n	800f24e <__cvt+0xb6>
 800f23e:	4630      	mov	r0, r6
 800f240:	9b07      	ldr	r3, [sp, #28]
 800f242:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f244:	1b9b      	subs	r3, r3, r6
 800f246:	6013      	str	r3, [r2, #0]
 800f248:	b008      	add	sp, #32
 800f24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f24e:	1c59      	adds	r1, r3, #1
 800f250:	9107      	str	r1, [sp, #28]
 800f252:	701a      	strb	r2, [r3, #0]
 800f254:	e7f0      	b.n	800f238 <__cvt+0xa0>

0800f256 <__exponent>:
 800f256:	4603      	mov	r3, r0
 800f258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f25a:	2900      	cmp	r1, #0
 800f25c:	f803 2b02 	strb.w	r2, [r3], #2
 800f260:	bfb6      	itet	lt
 800f262:	222d      	movlt	r2, #45	; 0x2d
 800f264:	222b      	movge	r2, #43	; 0x2b
 800f266:	4249      	neglt	r1, r1
 800f268:	2909      	cmp	r1, #9
 800f26a:	7042      	strb	r2, [r0, #1]
 800f26c:	dd2b      	ble.n	800f2c6 <__exponent+0x70>
 800f26e:	f10d 0407 	add.w	r4, sp, #7
 800f272:	46a4      	mov	ip, r4
 800f274:	270a      	movs	r7, #10
 800f276:	fb91 f6f7 	sdiv	r6, r1, r7
 800f27a:	460a      	mov	r2, r1
 800f27c:	46a6      	mov	lr, r4
 800f27e:	fb07 1516 	mls	r5, r7, r6, r1
 800f282:	2a63      	cmp	r2, #99	; 0x63
 800f284:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800f288:	4631      	mov	r1, r6
 800f28a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f28e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f292:	dcf0      	bgt.n	800f276 <__exponent+0x20>
 800f294:	3130      	adds	r1, #48	; 0x30
 800f296:	f1ae 0502 	sub.w	r5, lr, #2
 800f29a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f29e:	4629      	mov	r1, r5
 800f2a0:	1c44      	adds	r4, r0, #1
 800f2a2:	4561      	cmp	r1, ip
 800f2a4:	d30a      	bcc.n	800f2bc <__exponent+0x66>
 800f2a6:	f10d 0209 	add.w	r2, sp, #9
 800f2aa:	eba2 020e 	sub.w	r2, r2, lr
 800f2ae:	4565      	cmp	r5, ip
 800f2b0:	bf88      	it	hi
 800f2b2:	2200      	movhi	r2, #0
 800f2b4:	4413      	add	r3, r2
 800f2b6:	1a18      	subs	r0, r3, r0
 800f2b8:	b003      	add	sp, #12
 800f2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2c0:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f2c4:	e7ed      	b.n	800f2a2 <__exponent+0x4c>
 800f2c6:	2330      	movs	r3, #48	; 0x30
 800f2c8:	3130      	adds	r1, #48	; 0x30
 800f2ca:	7083      	strb	r3, [r0, #2]
 800f2cc:	70c1      	strb	r1, [r0, #3]
 800f2ce:	1d03      	adds	r3, r0, #4
 800f2d0:	e7f1      	b.n	800f2b6 <__exponent+0x60>
	...

0800f2d4 <_printf_float>:
 800f2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d8:	b091      	sub	sp, #68	; 0x44
 800f2da:	460c      	mov	r4, r1
 800f2dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800f2e0:	4616      	mov	r6, r2
 800f2e2:	461f      	mov	r7, r3
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	f002 fc65 	bl	8011bb4 <_localeconv_r>
 800f2ea:	6803      	ldr	r3, [r0, #0]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f2f0:	f7f0 ff50 	bl	8000194 <strlen>
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	930e      	str	r3, [sp, #56]	; 0x38
 800f2f8:	f8d8 3000 	ldr.w	r3, [r8]
 800f2fc:	900a      	str	r0, [sp, #40]	; 0x28
 800f2fe:	3307      	adds	r3, #7
 800f300:	f023 0307 	bic.w	r3, r3, #7
 800f304:	f103 0208 	add.w	r2, r3, #8
 800f308:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f30c:	f8d4 b000 	ldr.w	fp, [r4]
 800f310:	f8c8 2000 	str.w	r2, [r8]
 800f314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f318:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f31c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800f320:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800f324:	930b      	str	r3, [sp, #44]	; 0x2c
 800f326:	f04f 32ff 	mov.w	r2, #4294967295
 800f32a:	4640      	mov	r0, r8
 800f32c:	4b9c      	ldr	r3, [pc, #624]	; (800f5a0 <_printf_float+0x2cc>)
 800f32e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f330:	f7f1 fb8e 	bl	8000a50 <__aeabi_dcmpun>
 800f334:	bb70      	cbnz	r0, 800f394 <_printf_float+0xc0>
 800f336:	f04f 32ff 	mov.w	r2, #4294967295
 800f33a:	4640      	mov	r0, r8
 800f33c:	4b98      	ldr	r3, [pc, #608]	; (800f5a0 <_printf_float+0x2cc>)
 800f33e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f340:	f7f1 fb68 	bl	8000a14 <__aeabi_dcmple>
 800f344:	bb30      	cbnz	r0, 800f394 <_printf_float+0xc0>
 800f346:	2200      	movs	r2, #0
 800f348:	2300      	movs	r3, #0
 800f34a:	4640      	mov	r0, r8
 800f34c:	4651      	mov	r1, sl
 800f34e:	f7f1 fb57 	bl	8000a00 <__aeabi_dcmplt>
 800f352:	b110      	cbz	r0, 800f35a <_printf_float+0x86>
 800f354:	232d      	movs	r3, #45	; 0x2d
 800f356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f35a:	4b92      	ldr	r3, [pc, #584]	; (800f5a4 <_printf_float+0x2d0>)
 800f35c:	4892      	ldr	r0, [pc, #584]	; (800f5a8 <_printf_float+0x2d4>)
 800f35e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f362:	bf94      	ite	ls
 800f364:	4698      	movls	r8, r3
 800f366:	4680      	movhi	r8, r0
 800f368:	2303      	movs	r3, #3
 800f36a:	f04f 0a00 	mov.w	sl, #0
 800f36e:	6123      	str	r3, [r4, #16]
 800f370:	f02b 0304 	bic.w	r3, fp, #4
 800f374:	6023      	str	r3, [r4, #0]
 800f376:	4633      	mov	r3, r6
 800f378:	4621      	mov	r1, r4
 800f37a:	4628      	mov	r0, r5
 800f37c:	9700      	str	r7, [sp, #0]
 800f37e:	aa0f      	add	r2, sp, #60	; 0x3c
 800f380:	f000 f9d4 	bl	800f72c <_printf_common>
 800f384:	3001      	adds	r0, #1
 800f386:	f040 8090 	bne.w	800f4aa <_printf_float+0x1d6>
 800f38a:	f04f 30ff 	mov.w	r0, #4294967295
 800f38e:	b011      	add	sp, #68	; 0x44
 800f390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f394:	4642      	mov	r2, r8
 800f396:	4653      	mov	r3, sl
 800f398:	4640      	mov	r0, r8
 800f39a:	4651      	mov	r1, sl
 800f39c:	f7f1 fb58 	bl	8000a50 <__aeabi_dcmpun>
 800f3a0:	b148      	cbz	r0, 800f3b6 <_printf_float+0xe2>
 800f3a2:	f1ba 0f00 	cmp.w	sl, #0
 800f3a6:	bfb8      	it	lt
 800f3a8:	232d      	movlt	r3, #45	; 0x2d
 800f3aa:	4880      	ldr	r0, [pc, #512]	; (800f5ac <_printf_float+0x2d8>)
 800f3ac:	bfb8      	it	lt
 800f3ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f3b2:	4b7f      	ldr	r3, [pc, #508]	; (800f5b0 <_printf_float+0x2dc>)
 800f3b4:	e7d3      	b.n	800f35e <_printf_float+0x8a>
 800f3b6:	6863      	ldr	r3, [r4, #4]
 800f3b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f3bc:	1c5a      	adds	r2, r3, #1
 800f3be:	d142      	bne.n	800f446 <_printf_float+0x172>
 800f3c0:	2306      	movs	r3, #6
 800f3c2:	6063      	str	r3, [r4, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	9206      	str	r2, [sp, #24]
 800f3c8:	aa0e      	add	r2, sp, #56	; 0x38
 800f3ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800f3ce:	aa0d      	add	r2, sp, #52	; 0x34
 800f3d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800f3d4:	9203      	str	r2, [sp, #12]
 800f3d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800f3da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f3de:	6023      	str	r3, [r4, #0]
 800f3e0:	6863      	ldr	r3, [r4, #4]
 800f3e2:	4642      	mov	r2, r8
 800f3e4:	9300      	str	r3, [sp, #0]
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	4653      	mov	r3, sl
 800f3ea:	910b      	str	r1, [sp, #44]	; 0x2c
 800f3ec:	f7ff fed4 	bl	800f198 <__cvt>
 800f3f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f3f2:	4680      	mov	r8, r0
 800f3f4:	2947      	cmp	r1, #71	; 0x47
 800f3f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f3f8:	d108      	bne.n	800f40c <_printf_float+0x138>
 800f3fa:	1cc8      	adds	r0, r1, #3
 800f3fc:	db02      	blt.n	800f404 <_printf_float+0x130>
 800f3fe:	6863      	ldr	r3, [r4, #4]
 800f400:	4299      	cmp	r1, r3
 800f402:	dd40      	ble.n	800f486 <_printf_float+0x1b2>
 800f404:	f1a9 0902 	sub.w	r9, r9, #2
 800f408:	fa5f f989 	uxtb.w	r9, r9
 800f40c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f410:	d81f      	bhi.n	800f452 <_printf_float+0x17e>
 800f412:	464a      	mov	r2, r9
 800f414:	3901      	subs	r1, #1
 800f416:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f41a:	910d      	str	r1, [sp, #52]	; 0x34
 800f41c:	f7ff ff1b 	bl	800f256 <__exponent>
 800f420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f422:	4682      	mov	sl, r0
 800f424:	1813      	adds	r3, r2, r0
 800f426:	2a01      	cmp	r2, #1
 800f428:	6123      	str	r3, [r4, #16]
 800f42a:	dc02      	bgt.n	800f432 <_printf_float+0x15e>
 800f42c:	6822      	ldr	r2, [r4, #0]
 800f42e:	07d2      	lsls	r2, r2, #31
 800f430:	d501      	bpl.n	800f436 <_printf_float+0x162>
 800f432:	3301      	adds	r3, #1
 800f434:	6123      	str	r3, [r4, #16]
 800f436:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d09b      	beq.n	800f376 <_printf_float+0xa2>
 800f43e:	232d      	movs	r3, #45	; 0x2d
 800f440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f444:	e797      	b.n	800f376 <_printf_float+0xa2>
 800f446:	2947      	cmp	r1, #71	; 0x47
 800f448:	d1bc      	bne.n	800f3c4 <_printf_float+0xf0>
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d1ba      	bne.n	800f3c4 <_printf_float+0xf0>
 800f44e:	2301      	movs	r3, #1
 800f450:	e7b7      	b.n	800f3c2 <_printf_float+0xee>
 800f452:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f456:	d118      	bne.n	800f48a <_printf_float+0x1b6>
 800f458:	2900      	cmp	r1, #0
 800f45a:	6863      	ldr	r3, [r4, #4]
 800f45c:	dd0b      	ble.n	800f476 <_printf_float+0x1a2>
 800f45e:	6121      	str	r1, [r4, #16]
 800f460:	b913      	cbnz	r3, 800f468 <_printf_float+0x194>
 800f462:	6822      	ldr	r2, [r4, #0]
 800f464:	07d0      	lsls	r0, r2, #31
 800f466:	d502      	bpl.n	800f46e <_printf_float+0x19a>
 800f468:	3301      	adds	r3, #1
 800f46a:	440b      	add	r3, r1
 800f46c:	6123      	str	r3, [r4, #16]
 800f46e:	f04f 0a00 	mov.w	sl, #0
 800f472:	65a1      	str	r1, [r4, #88]	; 0x58
 800f474:	e7df      	b.n	800f436 <_printf_float+0x162>
 800f476:	b913      	cbnz	r3, 800f47e <_printf_float+0x1aa>
 800f478:	6822      	ldr	r2, [r4, #0]
 800f47a:	07d2      	lsls	r2, r2, #31
 800f47c:	d501      	bpl.n	800f482 <_printf_float+0x1ae>
 800f47e:	3302      	adds	r3, #2
 800f480:	e7f4      	b.n	800f46c <_printf_float+0x198>
 800f482:	2301      	movs	r3, #1
 800f484:	e7f2      	b.n	800f46c <_printf_float+0x198>
 800f486:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f48a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f48c:	4299      	cmp	r1, r3
 800f48e:	db05      	blt.n	800f49c <_printf_float+0x1c8>
 800f490:	6823      	ldr	r3, [r4, #0]
 800f492:	6121      	str	r1, [r4, #16]
 800f494:	07d8      	lsls	r0, r3, #31
 800f496:	d5ea      	bpl.n	800f46e <_printf_float+0x19a>
 800f498:	1c4b      	adds	r3, r1, #1
 800f49a:	e7e7      	b.n	800f46c <_printf_float+0x198>
 800f49c:	2900      	cmp	r1, #0
 800f49e:	bfcc      	ite	gt
 800f4a0:	2201      	movgt	r2, #1
 800f4a2:	f1c1 0202 	rsble	r2, r1, #2
 800f4a6:	4413      	add	r3, r2
 800f4a8:	e7e0      	b.n	800f46c <_printf_float+0x198>
 800f4aa:	6823      	ldr	r3, [r4, #0]
 800f4ac:	055a      	lsls	r2, r3, #21
 800f4ae:	d407      	bmi.n	800f4c0 <_printf_float+0x1ec>
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	4642      	mov	r2, r8
 800f4b4:	4631      	mov	r1, r6
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	47b8      	blx	r7
 800f4ba:	3001      	adds	r0, #1
 800f4bc:	d12b      	bne.n	800f516 <_printf_float+0x242>
 800f4be:	e764      	b.n	800f38a <_printf_float+0xb6>
 800f4c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f4c4:	f240 80dd 	bls.w	800f682 <_printf_float+0x3ae>
 800f4c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	f7f1 fa8c 	bl	80009ec <__aeabi_dcmpeq>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d033      	beq.n	800f540 <_printf_float+0x26c>
 800f4d8:	2301      	movs	r3, #1
 800f4da:	4631      	mov	r1, r6
 800f4dc:	4628      	mov	r0, r5
 800f4de:	4a35      	ldr	r2, [pc, #212]	; (800f5b4 <_printf_float+0x2e0>)
 800f4e0:	47b8      	blx	r7
 800f4e2:	3001      	adds	r0, #1
 800f4e4:	f43f af51 	beq.w	800f38a <_printf_float+0xb6>
 800f4e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	db02      	blt.n	800f4f6 <_printf_float+0x222>
 800f4f0:	6823      	ldr	r3, [r4, #0]
 800f4f2:	07d8      	lsls	r0, r3, #31
 800f4f4:	d50f      	bpl.n	800f516 <_printf_float+0x242>
 800f4f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	47b8      	blx	r7
 800f500:	3001      	adds	r0, #1
 800f502:	f43f af42 	beq.w	800f38a <_printf_float+0xb6>
 800f506:	f04f 0800 	mov.w	r8, #0
 800f50a:	f104 091a 	add.w	r9, r4, #26
 800f50e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f510:	3b01      	subs	r3, #1
 800f512:	4543      	cmp	r3, r8
 800f514:	dc09      	bgt.n	800f52a <_printf_float+0x256>
 800f516:	6823      	ldr	r3, [r4, #0]
 800f518:	079b      	lsls	r3, r3, #30
 800f51a:	f100 8102 	bmi.w	800f722 <_printf_float+0x44e>
 800f51e:	68e0      	ldr	r0, [r4, #12]
 800f520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f522:	4298      	cmp	r0, r3
 800f524:	bfb8      	it	lt
 800f526:	4618      	movlt	r0, r3
 800f528:	e731      	b.n	800f38e <_printf_float+0xba>
 800f52a:	2301      	movs	r3, #1
 800f52c:	464a      	mov	r2, r9
 800f52e:	4631      	mov	r1, r6
 800f530:	4628      	mov	r0, r5
 800f532:	47b8      	blx	r7
 800f534:	3001      	adds	r0, #1
 800f536:	f43f af28 	beq.w	800f38a <_printf_float+0xb6>
 800f53a:	f108 0801 	add.w	r8, r8, #1
 800f53e:	e7e6      	b.n	800f50e <_printf_float+0x23a>
 800f540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f542:	2b00      	cmp	r3, #0
 800f544:	dc38      	bgt.n	800f5b8 <_printf_float+0x2e4>
 800f546:	2301      	movs	r3, #1
 800f548:	4631      	mov	r1, r6
 800f54a:	4628      	mov	r0, r5
 800f54c:	4a19      	ldr	r2, [pc, #100]	; (800f5b4 <_printf_float+0x2e0>)
 800f54e:	47b8      	blx	r7
 800f550:	3001      	adds	r0, #1
 800f552:	f43f af1a 	beq.w	800f38a <_printf_float+0xb6>
 800f556:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f55a:	4313      	orrs	r3, r2
 800f55c:	d102      	bne.n	800f564 <_printf_float+0x290>
 800f55e:	6823      	ldr	r3, [r4, #0]
 800f560:	07d9      	lsls	r1, r3, #31
 800f562:	d5d8      	bpl.n	800f516 <_printf_float+0x242>
 800f564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f568:	4631      	mov	r1, r6
 800f56a:	4628      	mov	r0, r5
 800f56c:	47b8      	blx	r7
 800f56e:	3001      	adds	r0, #1
 800f570:	f43f af0b 	beq.w	800f38a <_printf_float+0xb6>
 800f574:	f04f 0900 	mov.w	r9, #0
 800f578:	f104 0a1a 	add.w	sl, r4, #26
 800f57c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f57e:	425b      	negs	r3, r3
 800f580:	454b      	cmp	r3, r9
 800f582:	dc01      	bgt.n	800f588 <_printf_float+0x2b4>
 800f584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f586:	e794      	b.n	800f4b2 <_printf_float+0x1de>
 800f588:	2301      	movs	r3, #1
 800f58a:	4652      	mov	r2, sl
 800f58c:	4631      	mov	r1, r6
 800f58e:	4628      	mov	r0, r5
 800f590:	47b8      	blx	r7
 800f592:	3001      	adds	r0, #1
 800f594:	f43f aef9 	beq.w	800f38a <_printf_float+0xb6>
 800f598:	f109 0901 	add.w	r9, r9, #1
 800f59c:	e7ee      	b.n	800f57c <_printf_float+0x2a8>
 800f59e:	bf00      	nop
 800f5a0:	7fefffff 	.word	0x7fefffff
 800f5a4:	08013918 	.word	0x08013918
 800f5a8:	0801391c 	.word	0x0801391c
 800f5ac:	08013924 	.word	0x08013924
 800f5b0:	08013920 	.word	0x08013920
 800f5b4:	08013928 	.word	0x08013928
 800f5b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	bfa8      	it	ge
 800f5c0:	461a      	movge	r2, r3
 800f5c2:	2a00      	cmp	r2, #0
 800f5c4:	4691      	mov	r9, r2
 800f5c6:	dc37      	bgt.n	800f638 <_printf_float+0x364>
 800f5c8:	f04f 0b00 	mov.w	fp, #0
 800f5cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5d0:	f104 021a 	add.w	r2, r4, #26
 800f5d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f5d8:	ebaa 0309 	sub.w	r3, sl, r9
 800f5dc:	455b      	cmp	r3, fp
 800f5de:	dc33      	bgt.n	800f648 <_printf_float+0x374>
 800f5e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	db3b      	blt.n	800f660 <_printf_float+0x38c>
 800f5e8:	6823      	ldr	r3, [r4, #0]
 800f5ea:	07da      	lsls	r2, r3, #31
 800f5ec:	d438      	bmi.n	800f660 <_printf_float+0x38c>
 800f5ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f5f2:	eba3 020a 	sub.w	r2, r3, sl
 800f5f6:	eba3 0901 	sub.w	r9, r3, r1
 800f5fa:	4591      	cmp	r9, r2
 800f5fc:	bfa8      	it	ge
 800f5fe:	4691      	movge	r9, r2
 800f600:	f1b9 0f00 	cmp.w	r9, #0
 800f604:	dc34      	bgt.n	800f670 <_printf_float+0x39c>
 800f606:	f04f 0800 	mov.w	r8, #0
 800f60a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f60e:	f104 0a1a 	add.w	sl, r4, #26
 800f612:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f616:	1a9b      	subs	r3, r3, r2
 800f618:	eba3 0309 	sub.w	r3, r3, r9
 800f61c:	4543      	cmp	r3, r8
 800f61e:	f77f af7a 	ble.w	800f516 <_printf_float+0x242>
 800f622:	2301      	movs	r3, #1
 800f624:	4652      	mov	r2, sl
 800f626:	4631      	mov	r1, r6
 800f628:	4628      	mov	r0, r5
 800f62a:	47b8      	blx	r7
 800f62c:	3001      	adds	r0, #1
 800f62e:	f43f aeac 	beq.w	800f38a <_printf_float+0xb6>
 800f632:	f108 0801 	add.w	r8, r8, #1
 800f636:	e7ec      	b.n	800f612 <_printf_float+0x33e>
 800f638:	4613      	mov	r3, r2
 800f63a:	4631      	mov	r1, r6
 800f63c:	4642      	mov	r2, r8
 800f63e:	4628      	mov	r0, r5
 800f640:	47b8      	blx	r7
 800f642:	3001      	adds	r0, #1
 800f644:	d1c0      	bne.n	800f5c8 <_printf_float+0x2f4>
 800f646:	e6a0      	b.n	800f38a <_printf_float+0xb6>
 800f648:	2301      	movs	r3, #1
 800f64a:	4631      	mov	r1, r6
 800f64c:	4628      	mov	r0, r5
 800f64e:	920b      	str	r2, [sp, #44]	; 0x2c
 800f650:	47b8      	blx	r7
 800f652:	3001      	adds	r0, #1
 800f654:	f43f ae99 	beq.w	800f38a <_printf_float+0xb6>
 800f658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f65a:	f10b 0b01 	add.w	fp, fp, #1
 800f65e:	e7b9      	b.n	800f5d4 <_printf_float+0x300>
 800f660:	4631      	mov	r1, r6
 800f662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f666:	4628      	mov	r0, r5
 800f668:	47b8      	blx	r7
 800f66a:	3001      	adds	r0, #1
 800f66c:	d1bf      	bne.n	800f5ee <_printf_float+0x31a>
 800f66e:	e68c      	b.n	800f38a <_printf_float+0xb6>
 800f670:	464b      	mov	r3, r9
 800f672:	4631      	mov	r1, r6
 800f674:	4628      	mov	r0, r5
 800f676:	eb08 020a 	add.w	r2, r8, sl
 800f67a:	47b8      	blx	r7
 800f67c:	3001      	adds	r0, #1
 800f67e:	d1c2      	bne.n	800f606 <_printf_float+0x332>
 800f680:	e683      	b.n	800f38a <_printf_float+0xb6>
 800f682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f684:	2a01      	cmp	r2, #1
 800f686:	dc01      	bgt.n	800f68c <_printf_float+0x3b8>
 800f688:	07db      	lsls	r3, r3, #31
 800f68a:	d537      	bpl.n	800f6fc <_printf_float+0x428>
 800f68c:	2301      	movs	r3, #1
 800f68e:	4642      	mov	r2, r8
 800f690:	4631      	mov	r1, r6
 800f692:	4628      	mov	r0, r5
 800f694:	47b8      	blx	r7
 800f696:	3001      	adds	r0, #1
 800f698:	f43f ae77 	beq.w	800f38a <_printf_float+0xb6>
 800f69c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6a0:	4631      	mov	r1, r6
 800f6a2:	4628      	mov	r0, r5
 800f6a4:	47b8      	blx	r7
 800f6a6:	3001      	adds	r0, #1
 800f6a8:	f43f ae6f 	beq.w	800f38a <_printf_float+0xb6>
 800f6ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	f7f1 f99a 	bl	80009ec <__aeabi_dcmpeq>
 800f6b8:	b9d8      	cbnz	r0, 800f6f2 <_printf_float+0x41e>
 800f6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6bc:	f108 0201 	add.w	r2, r8, #1
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	4631      	mov	r1, r6
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	47b8      	blx	r7
 800f6c8:	3001      	adds	r0, #1
 800f6ca:	d10e      	bne.n	800f6ea <_printf_float+0x416>
 800f6cc:	e65d      	b.n	800f38a <_printf_float+0xb6>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	464a      	mov	r2, r9
 800f6d2:	4631      	mov	r1, r6
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	47b8      	blx	r7
 800f6d8:	3001      	adds	r0, #1
 800f6da:	f43f ae56 	beq.w	800f38a <_printf_float+0xb6>
 800f6de:	f108 0801 	add.w	r8, r8, #1
 800f6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	4543      	cmp	r3, r8
 800f6e8:	dcf1      	bgt.n	800f6ce <_printf_float+0x3fa>
 800f6ea:	4653      	mov	r3, sl
 800f6ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f6f0:	e6e0      	b.n	800f4b4 <_printf_float+0x1e0>
 800f6f2:	f04f 0800 	mov.w	r8, #0
 800f6f6:	f104 091a 	add.w	r9, r4, #26
 800f6fa:	e7f2      	b.n	800f6e2 <_printf_float+0x40e>
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	4642      	mov	r2, r8
 800f700:	e7df      	b.n	800f6c2 <_printf_float+0x3ee>
 800f702:	2301      	movs	r3, #1
 800f704:	464a      	mov	r2, r9
 800f706:	4631      	mov	r1, r6
 800f708:	4628      	mov	r0, r5
 800f70a:	47b8      	blx	r7
 800f70c:	3001      	adds	r0, #1
 800f70e:	f43f ae3c 	beq.w	800f38a <_printf_float+0xb6>
 800f712:	f108 0801 	add.w	r8, r8, #1
 800f716:	68e3      	ldr	r3, [r4, #12]
 800f718:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f71a:	1a5b      	subs	r3, r3, r1
 800f71c:	4543      	cmp	r3, r8
 800f71e:	dcf0      	bgt.n	800f702 <_printf_float+0x42e>
 800f720:	e6fd      	b.n	800f51e <_printf_float+0x24a>
 800f722:	f04f 0800 	mov.w	r8, #0
 800f726:	f104 0919 	add.w	r9, r4, #25
 800f72a:	e7f4      	b.n	800f716 <_printf_float+0x442>

0800f72c <_printf_common>:
 800f72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f730:	4616      	mov	r6, r2
 800f732:	4699      	mov	r9, r3
 800f734:	688a      	ldr	r2, [r1, #8]
 800f736:	690b      	ldr	r3, [r1, #16]
 800f738:	4607      	mov	r7, r0
 800f73a:	4293      	cmp	r3, r2
 800f73c:	bfb8      	it	lt
 800f73e:	4613      	movlt	r3, r2
 800f740:	6033      	str	r3, [r6, #0]
 800f742:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f746:	460c      	mov	r4, r1
 800f748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f74c:	b10a      	cbz	r2, 800f752 <_printf_common+0x26>
 800f74e:	3301      	adds	r3, #1
 800f750:	6033      	str	r3, [r6, #0]
 800f752:	6823      	ldr	r3, [r4, #0]
 800f754:	0699      	lsls	r1, r3, #26
 800f756:	bf42      	ittt	mi
 800f758:	6833      	ldrmi	r3, [r6, #0]
 800f75a:	3302      	addmi	r3, #2
 800f75c:	6033      	strmi	r3, [r6, #0]
 800f75e:	6825      	ldr	r5, [r4, #0]
 800f760:	f015 0506 	ands.w	r5, r5, #6
 800f764:	d106      	bne.n	800f774 <_printf_common+0x48>
 800f766:	f104 0a19 	add.w	sl, r4, #25
 800f76a:	68e3      	ldr	r3, [r4, #12]
 800f76c:	6832      	ldr	r2, [r6, #0]
 800f76e:	1a9b      	subs	r3, r3, r2
 800f770:	42ab      	cmp	r3, r5
 800f772:	dc28      	bgt.n	800f7c6 <_printf_common+0x9a>
 800f774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f778:	1e13      	subs	r3, r2, #0
 800f77a:	6822      	ldr	r2, [r4, #0]
 800f77c:	bf18      	it	ne
 800f77e:	2301      	movne	r3, #1
 800f780:	0692      	lsls	r2, r2, #26
 800f782:	d42d      	bmi.n	800f7e0 <_printf_common+0xb4>
 800f784:	4649      	mov	r1, r9
 800f786:	4638      	mov	r0, r7
 800f788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f78c:	47c0      	blx	r8
 800f78e:	3001      	adds	r0, #1
 800f790:	d020      	beq.n	800f7d4 <_printf_common+0xa8>
 800f792:	6823      	ldr	r3, [r4, #0]
 800f794:	68e5      	ldr	r5, [r4, #12]
 800f796:	f003 0306 	and.w	r3, r3, #6
 800f79a:	2b04      	cmp	r3, #4
 800f79c:	bf18      	it	ne
 800f79e:	2500      	movne	r5, #0
 800f7a0:	6832      	ldr	r2, [r6, #0]
 800f7a2:	f04f 0600 	mov.w	r6, #0
 800f7a6:	68a3      	ldr	r3, [r4, #8]
 800f7a8:	bf08      	it	eq
 800f7aa:	1aad      	subeq	r5, r5, r2
 800f7ac:	6922      	ldr	r2, [r4, #16]
 800f7ae:	bf08      	it	eq
 800f7b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	bfc4      	itt	gt
 800f7b8:	1a9b      	subgt	r3, r3, r2
 800f7ba:	18ed      	addgt	r5, r5, r3
 800f7bc:	341a      	adds	r4, #26
 800f7be:	42b5      	cmp	r5, r6
 800f7c0:	d11a      	bne.n	800f7f8 <_printf_common+0xcc>
 800f7c2:	2000      	movs	r0, #0
 800f7c4:	e008      	b.n	800f7d8 <_printf_common+0xac>
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	4652      	mov	r2, sl
 800f7ca:	4649      	mov	r1, r9
 800f7cc:	4638      	mov	r0, r7
 800f7ce:	47c0      	blx	r8
 800f7d0:	3001      	adds	r0, #1
 800f7d2:	d103      	bne.n	800f7dc <_printf_common+0xb0>
 800f7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7dc:	3501      	adds	r5, #1
 800f7de:	e7c4      	b.n	800f76a <_printf_common+0x3e>
 800f7e0:	2030      	movs	r0, #48	; 0x30
 800f7e2:	18e1      	adds	r1, r4, r3
 800f7e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f7e8:	1c5a      	adds	r2, r3, #1
 800f7ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f7ee:	4422      	add	r2, r4
 800f7f0:	3302      	adds	r3, #2
 800f7f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f7f6:	e7c5      	b.n	800f784 <_printf_common+0x58>
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	4622      	mov	r2, r4
 800f7fc:	4649      	mov	r1, r9
 800f7fe:	4638      	mov	r0, r7
 800f800:	47c0      	blx	r8
 800f802:	3001      	adds	r0, #1
 800f804:	d0e6      	beq.n	800f7d4 <_printf_common+0xa8>
 800f806:	3601      	adds	r6, #1
 800f808:	e7d9      	b.n	800f7be <_printf_common+0x92>
	...

0800f80c <_printf_i>:
 800f80c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f810:	7e0f      	ldrb	r7, [r1, #24]
 800f812:	4691      	mov	r9, r2
 800f814:	2f78      	cmp	r7, #120	; 0x78
 800f816:	4680      	mov	r8, r0
 800f818:	460c      	mov	r4, r1
 800f81a:	469a      	mov	sl, r3
 800f81c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f81e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f822:	d807      	bhi.n	800f834 <_printf_i+0x28>
 800f824:	2f62      	cmp	r7, #98	; 0x62
 800f826:	d80a      	bhi.n	800f83e <_printf_i+0x32>
 800f828:	2f00      	cmp	r7, #0
 800f82a:	f000 80d9 	beq.w	800f9e0 <_printf_i+0x1d4>
 800f82e:	2f58      	cmp	r7, #88	; 0x58
 800f830:	f000 80a4 	beq.w	800f97c <_printf_i+0x170>
 800f834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f83c:	e03a      	b.n	800f8b4 <_printf_i+0xa8>
 800f83e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f842:	2b15      	cmp	r3, #21
 800f844:	d8f6      	bhi.n	800f834 <_printf_i+0x28>
 800f846:	a101      	add	r1, pc, #4	; (adr r1, 800f84c <_printf_i+0x40>)
 800f848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f84c:	0800f8a5 	.word	0x0800f8a5
 800f850:	0800f8b9 	.word	0x0800f8b9
 800f854:	0800f835 	.word	0x0800f835
 800f858:	0800f835 	.word	0x0800f835
 800f85c:	0800f835 	.word	0x0800f835
 800f860:	0800f835 	.word	0x0800f835
 800f864:	0800f8b9 	.word	0x0800f8b9
 800f868:	0800f835 	.word	0x0800f835
 800f86c:	0800f835 	.word	0x0800f835
 800f870:	0800f835 	.word	0x0800f835
 800f874:	0800f835 	.word	0x0800f835
 800f878:	0800f9c7 	.word	0x0800f9c7
 800f87c:	0800f8e9 	.word	0x0800f8e9
 800f880:	0800f9a9 	.word	0x0800f9a9
 800f884:	0800f835 	.word	0x0800f835
 800f888:	0800f835 	.word	0x0800f835
 800f88c:	0800f9e9 	.word	0x0800f9e9
 800f890:	0800f835 	.word	0x0800f835
 800f894:	0800f8e9 	.word	0x0800f8e9
 800f898:	0800f835 	.word	0x0800f835
 800f89c:	0800f835 	.word	0x0800f835
 800f8a0:	0800f9b1 	.word	0x0800f9b1
 800f8a4:	682b      	ldr	r3, [r5, #0]
 800f8a6:	1d1a      	adds	r2, r3, #4
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	602a      	str	r2, [r5, #0]
 800f8ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e0a4      	b.n	800fa02 <_printf_i+0x1f6>
 800f8b8:	6820      	ldr	r0, [r4, #0]
 800f8ba:	6829      	ldr	r1, [r5, #0]
 800f8bc:	0606      	lsls	r6, r0, #24
 800f8be:	f101 0304 	add.w	r3, r1, #4
 800f8c2:	d50a      	bpl.n	800f8da <_printf_i+0xce>
 800f8c4:	680e      	ldr	r6, [r1, #0]
 800f8c6:	602b      	str	r3, [r5, #0]
 800f8c8:	2e00      	cmp	r6, #0
 800f8ca:	da03      	bge.n	800f8d4 <_printf_i+0xc8>
 800f8cc:	232d      	movs	r3, #45	; 0x2d
 800f8ce:	4276      	negs	r6, r6
 800f8d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8d4:	230a      	movs	r3, #10
 800f8d6:	485e      	ldr	r0, [pc, #376]	; (800fa50 <_printf_i+0x244>)
 800f8d8:	e019      	b.n	800f90e <_printf_i+0x102>
 800f8da:	680e      	ldr	r6, [r1, #0]
 800f8dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f8e0:	602b      	str	r3, [r5, #0]
 800f8e2:	bf18      	it	ne
 800f8e4:	b236      	sxthne	r6, r6
 800f8e6:	e7ef      	b.n	800f8c8 <_printf_i+0xbc>
 800f8e8:	682b      	ldr	r3, [r5, #0]
 800f8ea:	6820      	ldr	r0, [r4, #0]
 800f8ec:	1d19      	adds	r1, r3, #4
 800f8ee:	6029      	str	r1, [r5, #0]
 800f8f0:	0601      	lsls	r1, r0, #24
 800f8f2:	d501      	bpl.n	800f8f8 <_printf_i+0xec>
 800f8f4:	681e      	ldr	r6, [r3, #0]
 800f8f6:	e002      	b.n	800f8fe <_printf_i+0xf2>
 800f8f8:	0646      	lsls	r6, r0, #25
 800f8fa:	d5fb      	bpl.n	800f8f4 <_printf_i+0xe8>
 800f8fc:	881e      	ldrh	r6, [r3, #0]
 800f8fe:	2f6f      	cmp	r7, #111	; 0x6f
 800f900:	bf0c      	ite	eq
 800f902:	2308      	moveq	r3, #8
 800f904:	230a      	movne	r3, #10
 800f906:	4852      	ldr	r0, [pc, #328]	; (800fa50 <_printf_i+0x244>)
 800f908:	2100      	movs	r1, #0
 800f90a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f90e:	6865      	ldr	r5, [r4, #4]
 800f910:	2d00      	cmp	r5, #0
 800f912:	bfa8      	it	ge
 800f914:	6821      	ldrge	r1, [r4, #0]
 800f916:	60a5      	str	r5, [r4, #8]
 800f918:	bfa4      	itt	ge
 800f91a:	f021 0104 	bicge.w	r1, r1, #4
 800f91e:	6021      	strge	r1, [r4, #0]
 800f920:	b90e      	cbnz	r6, 800f926 <_printf_i+0x11a>
 800f922:	2d00      	cmp	r5, #0
 800f924:	d04d      	beq.n	800f9c2 <_printf_i+0x1b6>
 800f926:	4615      	mov	r5, r2
 800f928:	fbb6 f1f3 	udiv	r1, r6, r3
 800f92c:	fb03 6711 	mls	r7, r3, r1, r6
 800f930:	5dc7      	ldrb	r7, [r0, r7]
 800f932:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f936:	4637      	mov	r7, r6
 800f938:	42bb      	cmp	r3, r7
 800f93a:	460e      	mov	r6, r1
 800f93c:	d9f4      	bls.n	800f928 <_printf_i+0x11c>
 800f93e:	2b08      	cmp	r3, #8
 800f940:	d10b      	bne.n	800f95a <_printf_i+0x14e>
 800f942:	6823      	ldr	r3, [r4, #0]
 800f944:	07de      	lsls	r6, r3, #31
 800f946:	d508      	bpl.n	800f95a <_printf_i+0x14e>
 800f948:	6923      	ldr	r3, [r4, #16]
 800f94a:	6861      	ldr	r1, [r4, #4]
 800f94c:	4299      	cmp	r1, r3
 800f94e:	bfde      	ittt	le
 800f950:	2330      	movle	r3, #48	; 0x30
 800f952:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f956:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f95a:	1b52      	subs	r2, r2, r5
 800f95c:	6122      	str	r2, [r4, #16]
 800f95e:	464b      	mov	r3, r9
 800f960:	4621      	mov	r1, r4
 800f962:	4640      	mov	r0, r8
 800f964:	f8cd a000 	str.w	sl, [sp]
 800f968:	aa03      	add	r2, sp, #12
 800f96a:	f7ff fedf 	bl	800f72c <_printf_common>
 800f96e:	3001      	adds	r0, #1
 800f970:	d14c      	bne.n	800fa0c <_printf_i+0x200>
 800f972:	f04f 30ff 	mov.w	r0, #4294967295
 800f976:	b004      	add	sp, #16
 800f978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f97c:	4834      	ldr	r0, [pc, #208]	; (800fa50 <_printf_i+0x244>)
 800f97e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f982:	6829      	ldr	r1, [r5, #0]
 800f984:	6823      	ldr	r3, [r4, #0]
 800f986:	f851 6b04 	ldr.w	r6, [r1], #4
 800f98a:	6029      	str	r1, [r5, #0]
 800f98c:	061d      	lsls	r5, r3, #24
 800f98e:	d514      	bpl.n	800f9ba <_printf_i+0x1ae>
 800f990:	07df      	lsls	r7, r3, #31
 800f992:	bf44      	itt	mi
 800f994:	f043 0320 	orrmi.w	r3, r3, #32
 800f998:	6023      	strmi	r3, [r4, #0]
 800f99a:	b91e      	cbnz	r6, 800f9a4 <_printf_i+0x198>
 800f99c:	6823      	ldr	r3, [r4, #0]
 800f99e:	f023 0320 	bic.w	r3, r3, #32
 800f9a2:	6023      	str	r3, [r4, #0]
 800f9a4:	2310      	movs	r3, #16
 800f9a6:	e7af      	b.n	800f908 <_printf_i+0xfc>
 800f9a8:	6823      	ldr	r3, [r4, #0]
 800f9aa:	f043 0320 	orr.w	r3, r3, #32
 800f9ae:	6023      	str	r3, [r4, #0]
 800f9b0:	2378      	movs	r3, #120	; 0x78
 800f9b2:	4828      	ldr	r0, [pc, #160]	; (800fa54 <_printf_i+0x248>)
 800f9b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f9b8:	e7e3      	b.n	800f982 <_printf_i+0x176>
 800f9ba:	0659      	lsls	r1, r3, #25
 800f9bc:	bf48      	it	mi
 800f9be:	b2b6      	uxthmi	r6, r6
 800f9c0:	e7e6      	b.n	800f990 <_printf_i+0x184>
 800f9c2:	4615      	mov	r5, r2
 800f9c4:	e7bb      	b.n	800f93e <_printf_i+0x132>
 800f9c6:	682b      	ldr	r3, [r5, #0]
 800f9c8:	6826      	ldr	r6, [r4, #0]
 800f9ca:	1d18      	adds	r0, r3, #4
 800f9cc:	6961      	ldr	r1, [r4, #20]
 800f9ce:	6028      	str	r0, [r5, #0]
 800f9d0:	0635      	lsls	r5, r6, #24
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	d501      	bpl.n	800f9da <_printf_i+0x1ce>
 800f9d6:	6019      	str	r1, [r3, #0]
 800f9d8:	e002      	b.n	800f9e0 <_printf_i+0x1d4>
 800f9da:	0670      	lsls	r0, r6, #25
 800f9dc:	d5fb      	bpl.n	800f9d6 <_printf_i+0x1ca>
 800f9de:	8019      	strh	r1, [r3, #0]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	4615      	mov	r5, r2
 800f9e4:	6123      	str	r3, [r4, #16]
 800f9e6:	e7ba      	b.n	800f95e <_printf_i+0x152>
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	1d1a      	adds	r2, r3, #4
 800f9ee:	602a      	str	r2, [r5, #0]
 800f9f0:	681d      	ldr	r5, [r3, #0]
 800f9f2:	6862      	ldr	r2, [r4, #4]
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	f002 f8fb 	bl	8011bf0 <memchr>
 800f9fa:	b108      	cbz	r0, 800fa00 <_printf_i+0x1f4>
 800f9fc:	1b40      	subs	r0, r0, r5
 800f9fe:	6060      	str	r0, [r4, #4]
 800fa00:	6863      	ldr	r3, [r4, #4]
 800fa02:	6123      	str	r3, [r4, #16]
 800fa04:	2300      	movs	r3, #0
 800fa06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa0a:	e7a8      	b.n	800f95e <_printf_i+0x152>
 800fa0c:	462a      	mov	r2, r5
 800fa0e:	4649      	mov	r1, r9
 800fa10:	4640      	mov	r0, r8
 800fa12:	6923      	ldr	r3, [r4, #16]
 800fa14:	47d0      	blx	sl
 800fa16:	3001      	adds	r0, #1
 800fa18:	d0ab      	beq.n	800f972 <_printf_i+0x166>
 800fa1a:	6823      	ldr	r3, [r4, #0]
 800fa1c:	079b      	lsls	r3, r3, #30
 800fa1e:	d413      	bmi.n	800fa48 <_printf_i+0x23c>
 800fa20:	68e0      	ldr	r0, [r4, #12]
 800fa22:	9b03      	ldr	r3, [sp, #12]
 800fa24:	4298      	cmp	r0, r3
 800fa26:	bfb8      	it	lt
 800fa28:	4618      	movlt	r0, r3
 800fa2a:	e7a4      	b.n	800f976 <_printf_i+0x16a>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	4632      	mov	r2, r6
 800fa30:	4649      	mov	r1, r9
 800fa32:	4640      	mov	r0, r8
 800fa34:	47d0      	blx	sl
 800fa36:	3001      	adds	r0, #1
 800fa38:	d09b      	beq.n	800f972 <_printf_i+0x166>
 800fa3a:	3501      	adds	r5, #1
 800fa3c:	68e3      	ldr	r3, [r4, #12]
 800fa3e:	9903      	ldr	r1, [sp, #12]
 800fa40:	1a5b      	subs	r3, r3, r1
 800fa42:	42ab      	cmp	r3, r5
 800fa44:	dcf2      	bgt.n	800fa2c <_printf_i+0x220>
 800fa46:	e7eb      	b.n	800fa20 <_printf_i+0x214>
 800fa48:	2500      	movs	r5, #0
 800fa4a:	f104 0619 	add.w	r6, r4, #25
 800fa4e:	e7f5      	b.n	800fa3c <_printf_i+0x230>
 800fa50:	0801392a 	.word	0x0801392a
 800fa54:	0801393b 	.word	0x0801393b

0800fa58 <siprintf>:
 800fa58:	b40e      	push	{r1, r2, r3}
 800fa5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fa5e:	b500      	push	{lr}
 800fa60:	b09c      	sub	sp, #112	; 0x70
 800fa62:	ab1d      	add	r3, sp, #116	; 0x74
 800fa64:	9002      	str	r0, [sp, #8]
 800fa66:	9006      	str	r0, [sp, #24]
 800fa68:	9107      	str	r1, [sp, #28]
 800fa6a:	9104      	str	r1, [sp, #16]
 800fa6c:	4808      	ldr	r0, [pc, #32]	; (800fa90 <siprintf+0x38>)
 800fa6e:	4909      	ldr	r1, [pc, #36]	; (800fa94 <siprintf+0x3c>)
 800fa70:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa74:	9105      	str	r1, [sp, #20]
 800fa76:	6800      	ldr	r0, [r0, #0]
 800fa78:	a902      	add	r1, sp, #8
 800fa7a:	9301      	str	r3, [sp, #4]
 800fa7c:	f002 feca 	bl	8012814 <_svfiprintf_r>
 800fa80:	2200      	movs	r2, #0
 800fa82:	9b02      	ldr	r3, [sp, #8]
 800fa84:	701a      	strb	r2, [r3, #0]
 800fa86:	b01c      	add	sp, #112	; 0x70
 800fa88:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa8c:	b003      	add	sp, #12
 800fa8e:	4770      	bx	lr
 800fa90:	20000904 	.word	0x20000904
 800fa94:	ffff0208 	.word	0xffff0208

0800fa98 <strcpy>:
 800fa98:	4603      	mov	r3, r0
 800fa9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa9e:	f803 2b01 	strb.w	r2, [r3], #1
 800faa2:	2a00      	cmp	r2, #0
 800faa4:	d1f9      	bne.n	800fa9a <strcpy+0x2>
 800faa6:	4770      	bx	lr

0800faa8 <sulp>:
 800faa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faac:	460f      	mov	r7, r1
 800faae:	4690      	mov	r8, r2
 800fab0:	f002 fc1c 	bl	80122ec <__ulp>
 800fab4:	4604      	mov	r4, r0
 800fab6:	460d      	mov	r5, r1
 800fab8:	f1b8 0f00 	cmp.w	r8, #0
 800fabc:	d011      	beq.n	800fae2 <sulp+0x3a>
 800fabe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800fac2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	dd0b      	ble.n	800fae2 <sulp+0x3a>
 800faca:	2400      	movs	r4, #0
 800facc:	051b      	lsls	r3, r3, #20
 800face:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fad2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fad6:	4622      	mov	r2, r4
 800fad8:	462b      	mov	r3, r5
 800fada:	f7f0 fd1f 	bl	800051c <__aeabi_dmul>
 800fade:	4604      	mov	r4, r0
 800fae0:	460d      	mov	r5, r1
 800fae2:	4620      	mov	r0, r4
 800fae4:	4629      	mov	r1, r5
 800fae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faea:	0000      	movs	r0, r0
 800faec:	0000      	movs	r0, r0
	...

0800faf0 <_strtod_l>:
 800faf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf4:	469b      	mov	fp, r3
 800faf6:	2300      	movs	r3, #0
 800faf8:	b09f      	sub	sp, #124	; 0x7c
 800fafa:	931a      	str	r3, [sp, #104]	; 0x68
 800fafc:	4b9e      	ldr	r3, [pc, #632]	; (800fd78 <_strtod_l+0x288>)
 800fafe:	4682      	mov	sl, r0
 800fb00:	681f      	ldr	r7, [r3, #0]
 800fb02:	460e      	mov	r6, r1
 800fb04:	4638      	mov	r0, r7
 800fb06:	9215      	str	r2, [sp, #84]	; 0x54
 800fb08:	f7f0 fb44 	bl	8000194 <strlen>
 800fb0c:	f04f 0800 	mov.w	r8, #0
 800fb10:	4604      	mov	r4, r0
 800fb12:	f04f 0900 	mov.w	r9, #0
 800fb16:	9619      	str	r6, [sp, #100]	; 0x64
 800fb18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fb1a:	781a      	ldrb	r2, [r3, #0]
 800fb1c:	2a2b      	cmp	r2, #43	; 0x2b
 800fb1e:	d04c      	beq.n	800fbba <_strtod_l+0xca>
 800fb20:	d83a      	bhi.n	800fb98 <_strtod_l+0xa8>
 800fb22:	2a0d      	cmp	r2, #13
 800fb24:	d833      	bhi.n	800fb8e <_strtod_l+0x9e>
 800fb26:	2a08      	cmp	r2, #8
 800fb28:	d833      	bhi.n	800fb92 <_strtod_l+0xa2>
 800fb2a:	2a00      	cmp	r2, #0
 800fb2c:	d03d      	beq.n	800fbaa <_strtod_l+0xba>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	930a      	str	r3, [sp, #40]	; 0x28
 800fb32:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800fb34:	782b      	ldrb	r3, [r5, #0]
 800fb36:	2b30      	cmp	r3, #48	; 0x30
 800fb38:	f040 80aa 	bne.w	800fc90 <_strtod_l+0x1a0>
 800fb3c:	786b      	ldrb	r3, [r5, #1]
 800fb3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fb42:	2b58      	cmp	r3, #88	; 0x58
 800fb44:	d166      	bne.n	800fc14 <_strtod_l+0x124>
 800fb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb48:	4650      	mov	r0, sl
 800fb4a:	9301      	str	r3, [sp, #4]
 800fb4c:	ab1a      	add	r3, sp, #104	; 0x68
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	4a8a      	ldr	r2, [pc, #552]	; (800fd7c <_strtod_l+0x28c>)
 800fb52:	f8cd b008 	str.w	fp, [sp, #8]
 800fb56:	ab1b      	add	r3, sp, #108	; 0x6c
 800fb58:	a919      	add	r1, sp, #100	; 0x64
 800fb5a:	f001 fd2d 	bl	80115b8 <__gethex>
 800fb5e:	f010 0607 	ands.w	r6, r0, #7
 800fb62:	4604      	mov	r4, r0
 800fb64:	d005      	beq.n	800fb72 <_strtod_l+0x82>
 800fb66:	2e06      	cmp	r6, #6
 800fb68:	d129      	bne.n	800fbbe <_strtod_l+0xce>
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	3501      	adds	r5, #1
 800fb6e:	9519      	str	r5, [sp, #100]	; 0x64
 800fb70:	930a      	str	r3, [sp, #40]	; 0x28
 800fb72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f040 858a 	bne.w	801068e <_strtod_l+0xb9e>
 800fb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb7c:	b1d3      	cbz	r3, 800fbb4 <_strtod_l+0xc4>
 800fb7e:	4642      	mov	r2, r8
 800fb80:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fb84:	4610      	mov	r0, r2
 800fb86:	4619      	mov	r1, r3
 800fb88:	b01f      	add	sp, #124	; 0x7c
 800fb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8e:	2a20      	cmp	r2, #32
 800fb90:	d1cd      	bne.n	800fb2e <_strtod_l+0x3e>
 800fb92:	3301      	adds	r3, #1
 800fb94:	9319      	str	r3, [sp, #100]	; 0x64
 800fb96:	e7bf      	b.n	800fb18 <_strtod_l+0x28>
 800fb98:	2a2d      	cmp	r2, #45	; 0x2d
 800fb9a:	d1c8      	bne.n	800fb2e <_strtod_l+0x3e>
 800fb9c:	2201      	movs	r2, #1
 800fb9e:	920a      	str	r2, [sp, #40]	; 0x28
 800fba0:	1c5a      	adds	r2, r3, #1
 800fba2:	9219      	str	r2, [sp, #100]	; 0x64
 800fba4:	785b      	ldrb	r3, [r3, #1]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d1c3      	bne.n	800fb32 <_strtod_l+0x42>
 800fbaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbac:	9619      	str	r6, [sp, #100]	; 0x64
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	f040 856b 	bne.w	801068a <_strtod_l+0xb9a>
 800fbb4:	4642      	mov	r2, r8
 800fbb6:	464b      	mov	r3, r9
 800fbb8:	e7e4      	b.n	800fb84 <_strtod_l+0x94>
 800fbba:	2200      	movs	r2, #0
 800fbbc:	e7ef      	b.n	800fb9e <_strtod_l+0xae>
 800fbbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fbc0:	b13a      	cbz	r2, 800fbd2 <_strtod_l+0xe2>
 800fbc2:	2135      	movs	r1, #53	; 0x35
 800fbc4:	a81c      	add	r0, sp, #112	; 0x70
 800fbc6:	f002 fc95 	bl	80124f4 <__copybits>
 800fbca:	4650      	mov	r0, sl
 800fbcc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800fbce:	f002 f85d 	bl	8011c8c <_Bfree>
 800fbd2:	3e01      	subs	r6, #1
 800fbd4:	2e04      	cmp	r6, #4
 800fbd6:	d806      	bhi.n	800fbe6 <_strtod_l+0xf6>
 800fbd8:	e8df f006 	tbb	[pc, r6]
 800fbdc:	1714030a 	.word	0x1714030a
 800fbe0:	0a          	.byte	0x0a
 800fbe1:	00          	.byte	0x00
 800fbe2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800fbe6:	0721      	lsls	r1, r4, #28
 800fbe8:	d5c3      	bpl.n	800fb72 <_strtod_l+0x82>
 800fbea:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800fbee:	e7c0      	b.n	800fb72 <_strtod_l+0x82>
 800fbf0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fbf2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800fbf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fbfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fbfe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800fc02:	e7f0      	b.n	800fbe6 <_strtod_l+0xf6>
 800fc04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fd80 <_strtod_l+0x290>
 800fc08:	e7ed      	b.n	800fbe6 <_strtod_l+0xf6>
 800fc0a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fc0e:	f04f 38ff 	mov.w	r8, #4294967295
 800fc12:	e7e8      	b.n	800fbe6 <_strtod_l+0xf6>
 800fc14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc16:	1c5a      	adds	r2, r3, #1
 800fc18:	9219      	str	r2, [sp, #100]	; 0x64
 800fc1a:	785b      	ldrb	r3, [r3, #1]
 800fc1c:	2b30      	cmp	r3, #48	; 0x30
 800fc1e:	d0f9      	beq.n	800fc14 <_strtod_l+0x124>
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d0a6      	beq.n	800fb72 <_strtod_l+0x82>
 800fc24:	2301      	movs	r3, #1
 800fc26:	9307      	str	r3, [sp, #28]
 800fc28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc2a:	220a      	movs	r2, #10
 800fc2c:	9308      	str	r3, [sp, #32]
 800fc2e:	2300      	movs	r3, #0
 800fc30:	469b      	mov	fp, r3
 800fc32:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800fc36:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fc38:	7805      	ldrb	r5, [r0, #0]
 800fc3a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800fc3e:	b2d9      	uxtb	r1, r3
 800fc40:	2909      	cmp	r1, #9
 800fc42:	d927      	bls.n	800fc94 <_strtod_l+0x1a4>
 800fc44:	4622      	mov	r2, r4
 800fc46:	4639      	mov	r1, r7
 800fc48:	f003 f852 	bl	8012cf0 <strncmp>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d033      	beq.n	800fcb8 <_strtod_l+0x1c8>
 800fc50:	2000      	movs	r0, #0
 800fc52:	462a      	mov	r2, r5
 800fc54:	465c      	mov	r4, fp
 800fc56:	4603      	mov	r3, r0
 800fc58:	9004      	str	r0, [sp, #16]
 800fc5a:	2a65      	cmp	r2, #101	; 0x65
 800fc5c:	d001      	beq.n	800fc62 <_strtod_l+0x172>
 800fc5e:	2a45      	cmp	r2, #69	; 0x45
 800fc60:	d114      	bne.n	800fc8c <_strtod_l+0x19c>
 800fc62:	b91c      	cbnz	r4, 800fc6c <_strtod_l+0x17c>
 800fc64:	9a07      	ldr	r2, [sp, #28]
 800fc66:	4302      	orrs	r2, r0
 800fc68:	d09f      	beq.n	800fbaa <_strtod_l+0xba>
 800fc6a:	2400      	movs	r4, #0
 800fc6c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800fc6e:	1c72      	adds	r2, r6, #1
 800fc70:	9219      	str	r2, [sp, #100]	; 0x64
 800fc72:	7872      	ldrb	r2, [r6, #1]
 800fc74:	2a2b      	cmp	r2, #43	; 0x2b
 800fc76:	d079      	beq.n	800fd6c <_strtod_l+0x27c>
 800fc78:	2a2d      	cmp	r2, #45	; 0x2d
 800fc7a:	f000 8083 	beq.w	800fd84 <_strtod_l+0x294>
 800fc7e:	2700      	movs	r7, #0
 800fc80:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fc84:	2909      	cmp	r1, #9
 800fc86:	f240 8083 	bls.w	800fd90 <_strtod_l+0x2a0>
 800fc8a:	9619      	str	r6, [sp, #100]	; 0x64
 800fc8c:	2500      	movs	r5, #0
 800fc8e:	e09f      	b.n	800fdd0 <_strtod_l+0x2e0>
 800fc90:	2300      	movs	r3, #0
 800fc92:	e7c8      	b.n	800fc26 <_strtod_l+0x136>
 800fc94:	f1bb 0f08 	cmp.w	fp, #8
 800fc98:	bfd5      	itete	le
 800fc9a:	9906      	ldrle	r1, [sp, #24]
 800fc9c:	9905      	ldrgt	r1, [sp, #20]
 800fc9e:	fb02 3301 	mlale	r3, r2, r1, r3
 800fca2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fca6:	f100 0001 	add.w	r0, r0, #1
 800fcaa:	bfd4      	ite	le
 800fcac:	9306      	strle	r3, [sp, #24]
 800fcae:	9305      	strgt	r3, [sp, #20]
 800fcb0:	f10b 0b01 	add.w	fp, fp, #1
 800fcb4:	9019      	str	r0, [sp, #100]	; 0x64
 800fcb6:	e7be      	b.n	800fc36 <_strtod_l+0x146>
 800fcb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fcba:	191a      	adds	r2, r3, r4
 800fcbc:	9219      	str	r2, [sp, #100]	; 0x64
 800fcbe:	5d1a      	ldrb	r2, [r3, r4]
 800fcc0:	f1bb 0f00 	cmp.w	fp, #0
 800fcc4:	d036      	beq.n	800fd34 <_strtod_l+0x244>
 800fcc6:	465c      	mov	r4, fp
 800fcc8:	9004      	str	r0, [sp, #16]
 800fcca:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fcce:	2b09      	cmp	r3, #9
 800fcd0:	d912      	bls.n	800fcf8 <_strtod_l+0x208>
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	e7c1      	b.n	800fc5a <_strtod_l+0x16a>
 800fcd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fcd8:	3001      	adds	r0, #1
 800fcda:	1c5a      	adds	r2, r3, #1
 800fcdc:	9219      	str	r2, [sp, #100]	; 0x64
 800fcde:	785a      	ldrb	r2, [r3, #1]
 800fce0:	2a30      	cmp	r2, #48	; 0x30
 800fce2:	d0f8      	beq.n	800fcd6 <_strtod_l+0x1e6>
 800fce4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fce8:	2b08      	cmp	r3, #8
 800fcea:	f200 84d5 	bhi.w	8010698 <_strtod_l+0xba8>
 800fcee:	9004      	str	r0, [sp, #16]
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fcf6:	9308      	str	r3, [sp, #32]
 800fcf8:	3a30      	subs	r2, #48	; 0x30
 800fcfa:	f100 0301 	add.w	r3, r0, #1
 800fcfe:	d013      	beq.n	800fd28 <_strtod_l+0x238>
 800fd00:	9904      	ldr	r1, [sp, #16]
 800fd02:	1905      	adds	r5, r0, r4
 800fd04:	4419      	add	r1, r3
 800fd06:	9104      	str	r1, [sp, #16]
 800fd08:	4623      	mov	r3, r4
 800fd0a:	210a      	movs	r1, #10
 800fd0c:	42ab      	cmp	r3, r5
 800fd0e:	d113      	bne.n	800fd38 <_strtod_l+0x248>
 800fd10:	1823      	adds	r3, r4, r0
 800fd12:	2b08      	cmp	r3, #8
 800fd14:	f104 0401 	add.w	r4, r4, #1
 800fd18:	4404      	add	r4, r0
 800fd1a:	dc1b      	bgt.n	800fd54 <_strtod_l+0x264>
 800fd1c:	230a      	movs	r3, #10
 800fd1e:	9906      	ldr	r1, [sp, #24]
 800fd20:	fb03 2301 	mla	r3, r3, r1, r2
 800fd24:	9306      	str	r3, [sp, #24]
 800fd26:	2300      	movs	r3, #0
 800fd28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	1c51      	adds	r1, r2, #1
 800fd2e:	9119      	str	r1, [sp, #100]	; 0x64
 800fd30:	7852      	ldrb	r2, [r2, #1]
 800fd32:	e7ca      	b.n	800fcca <_strtod_l+0x1da>
 800fd34:	4658      	mov	r0, fp
 800fd36:	e7d3      	b.n	800fce0 <_strtod_l+0x1f0>
 800fd38:	2b08      	cmp	r3, #8
 800fd3a:	dc04      	bgt.n	800fd46 <_strtod_l+0x256>
 800fd3c:	9f06      	ldr	r7, [sp, #24]
 800fd3e:	434f      	muls	r7, r1
 800fd40:	9706      	str	r7, [sp, #24]
 800fd42:	3301      	adds	r3, #1
 800fd44:	e7e2      	b.n	800fd0c <_strtod_l+0x21c>
 800fd46:	1c5f      	adds	r7, r3, #1
 800fd48:	2f10      	cmp	r7, #16
 800fd4a:	bfde      	ittt	le
 800fd4c:	9f05      	ldrle	r7, [sp, #20]
 800fd4e:	434f      	mulle	r7, r1
 800fd50:	9705      	strle	r7, [sp, #20]
 800fd52:	e7f6      	b.n	800fd42 <_strtod_l+0x252>
 800fd54:	2c10      	cmp	r4, #16
 800fd56:	bfdf      	itttt	le
 800fd58:	230a      	movle	r3, #10
 800fd5a:	9905      	ldrle	r1, [sp, #20]
 800fd5c:	fb03 2301 	mlale	r3, r3, r1, r2
 800fd60:	9305      	strle	r3, [sp, #20]
 800fd62:	e7e0      	b.n	800fd26 <_strtod_l+0x236>
 800fd64:	2300      	movs	r3, #0
 800fd66:	9304      	str	r3, [sp, #16]
 800fd68:	2301      	movs	r3, #1
 800fd6a:	e77b      	b.n	800fc64 <_strtod_l+0x174>
 800fd6c:	2700      	movs	r7, #0
 800fd6e:	1cb2      	adds	r2, r6, #2
 800fd70:	9219      	str	r2, [sp, #100]	; 0x64
 800fd72:	78b2      	ldrb	r2, [r6, #2]
 800fd74:	e784      	b.n	800fc80 <_strtod_l+0x190>
 800fd76:	bf00      	nop
 800fd78:	08013b30 	.word	0x08013b30
 800fd7c:	0801394c 	.word	0x0801394c
 800fd80:	7ff00000 	.word	0x7ff00000
 800fd84:	2701      	movs	r7, #1
 800fd86:	e7f2      	b.n	800fd6e <_strtod_l+0x27e>
 800fd88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fd8a:	1c51      	adds	r1, r2, #1
 800fd8c:	9119      	str	r1, [sp, #100]	; 0x64
 800fd8e:	7852      	ldrb	r2, [r2, #1]
 800fd90:	2a30      	cmp	r2, #48	; 0x30
 800fd92:	d0f9      	beq.n	800fd88 <_strtod_l+0x298>
 800fd94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fd98:	2908      	cmp	r1, #8
 800fd9a:	f63f af77 	bhi.w	800fc8c <_strtod_l+0x19c>
 800fd9e:	f04f 0e0a 	mov.w	lr, #10
 800fda2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800fda6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fda8:	9209      	str	r2, [sp, #36]	; 0x24
 800fdaa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fdac:	1c51      	adds	r1, r2, #1
 800fdae:	9119      	str	r1, [sp, #100]	; 0x64
 800fdb0:	7852      	ldrb	r2, [r2, #1]
 800fdb2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800fdb6:	2d09      	cmp	r5, #9
 800fdb8:	d935      	bls.n	800fe26 <_strtod_l+0x336>
 800fdba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800fdbc:	1b49      	subs	r1, r1, r5
 800fdbe:	2908      	cmp	r1, #8
 800fdc0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800fdc4:	dc02      	bgt.n	800fdcc <_strtod_l+0x2dc>
 800fdc6:	4565      	cmp	r5, ip
 800fdc8:	bfa8      	it	ge
 800fdca:	4665      	movge	r5, ip
 800fdcc:	b107      	cbz	r7, 800fdd0 <_strtod_l+0x2e0>
 800fdce:	426d      	negs	r5, r5
 800fdd0:	2c00      	cmp	r4, #0
 800fdd2:	d14c      	bne.n	800fe6e <_strtod_l+0x37e>
 800fdd4:	9907      	ldr	r1, [sp, #28]
 800fdd6:	4301      	orrs	r1, r0
 800fdd8:	f47f aecb 	bne.w	800fb72 <_strtod_l+0x82>
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f47f aee4 	bne.w	800fbaa <_strtod_l+0xba>
 800fde2:	2a69      	cmp	r2, #105	; 0x69
 800fde4:	d026      	beq.n	800fe34 <_strtod_l+0x344>
 800fde6:	dc23      	bgt.n	800fe30 <_strtod_l+0x340>
 800fde8:	2a49      	cmp	r2, #73	; 0x49
 800fdea:	d023      	beq.n	800fe34 <_strtod_l+0x344>
 800fdec:	2a4e      	cmp	r2, #78	; 0x4e
 800fdee:	f47f aedc 	bne.w	800fbaa <_strtod_l+0xba>
 800fdf2:	499d      	ldr	r1, [pc, #628]	; (8010068 <_strtod_l+0x578>)
 800fdf4:	a819      	add	r0, sp, #100	; 0x64
 800fdf6:	f001 fe2d 	bl	8011a54 <__match>
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	f43f aed5 	beq.w	800fbaa <_strtod_l+0xba>
 800fe00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	2b28      	cmp	r3, #40	; 0x28
 800fe06:	d12c      	bne.n	800fe62 <_strtod_l+0x372>
 800fe08:	4998      	ldr	r1, [pc, #608]	; (801006c <_strtod_l+0x57c>)
 800fe0a:	aa1c      	add	r2, sp, #112	; 0x70
 800fe0c:	a819      	add	r0, sp, #100	; 0x64
 800fe0e:	f001 fe35 	bl	8011a7c <__hexnan>
 800fe12:	2805      	cmp	r0, #5
 800fe14:	d125      	bne.n	800fe62 <_strtod_l+0x372>
 800fe16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fe18:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800fe1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800fe20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800fe24:	e6a5      	b.n	800fb72 <_strtod_l+0x82>
 800fe26:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800fe2a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800fe2e:	e7bc      	b.n	800fdaa <_strtod_l+0x2ba>
 800fe30:	2a6e      	cmp	r2, #110	; 0x6e
 800fe32:	e7dc      	b.n	800fdee <_strtod_l+0x2fe>
 800fe34:	498e      	ldr	r1, [pc, #568]	; (8010070 <_strtod_l+0x580>)
 800fe36:	a819      	add	r0, sp, #100	; 0x64
 800fe38:	f001 fe0c 	bl	8011a54 <__match>
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	f43f aeb4 	beq.w	800fbaa <_strtod_l+0xba>
 800fe42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe44:	498b      	ldr	r1, [pc, #556]	; (8010074 <_strtod_l+0x584>)
 800fe46:	3b01      	subs	r3, #1
 800fe48:	a819      	add	r0, sp, #100	; 0x64
 800fe4a:	9319      	str	r3, [sp, #100]	; 0x64
 800fe4c:	f001 fe02 	bl	8011a54 <__match>
 800fe50:	b910      	cbnz	r0, 800fe58 <_strtod_l+0x368>
 800fe52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe54:	3301      	adds	r3, #1
 800fe56:	9319      	str	r3, [sp, #100]	; 0x64
 800fe58:	f04f 0800 	mov.w	r8, #0
 800fe5c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8010078 <_strtod_l+0x588>
 800fe60:	e687      	b.n	800fb72 <_strtod_l+0x82>
 800fe62:	4886      	ldr	r0, [pc, #536]	; (801007c <_strtod_l+0x58c>)
 800fe64:	f002 ff2e 	bl	8012cc4 <nan>
 800fe68:	4680      	mov	r8, r0
 800fe6a:	4689      	mov	r9, r1
 800fe6c:	e681      	b.n	800fb72 <_strtod_l+0x82>
 800fe6e:	9b04      	ldr	r3, [sp, #16]
 800fe70:	f1bb 0f00 	cmp.w	fp, #0
 800fe74:	bf08      	it	eq
 800fe76:	46a3      	moveq	fp, r4
 800fe78:	1aeb      	subs	r3, r5, r3
 800fe7a:	2c10      	cmp	r4, #16
 800fe7c:	9806      	ldr	r0, [sp, #24]
 800fe7e:	4626      	mov	r6, r4
 800fe80:	9307      	str	r3, [sp, #28]
 800fe82:	bfa8      	it	ge
 800fe84:	2610      	movge	r6, #16
 800fe86:	f7f0 facf 	bl	8000428 <__aeabi_ui2d>
 800fe8a:	2c09      	cmp	r4, #9
 800fe8c:	4680      	mov	r8, r0
 800fe8e:	4689      	mov	r9, r1
 800fe90:	dd13      	ble.n	800feba <_strtod_l+0x3ca>
 800fe92:	4b7b      	ldr	r3, [pc, #492]	; (8010080 <_strtod_l+0x590>)
 800fe94:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fe98:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fe9c:	f7f0 fb3e 	bl	800051c <__aeabi_dmul>
 800fea0:	4680      	mov	r8, r0
 800fea2:	9805      	ldr	r0, [sp, #20]
 800fea4:	4689      	mov	r9, r1
 800fea6:	f7f0 fabf 	bl	8000428 <__aeabi_ui2d>
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	4640      	mov	r0, r8
 800feb0:	4649      	mov	r1, r9
 800feb2:	f7f0 f97d 	bl	80001b0 <__adddf3>
 800feb6:	4680      	mov	r8, r0
 800feb8:	4689      	mov	r9, r1
 800feba:	2c0f      	cmp	r4, #15
 800febc:	dc36      	bgt.n	800ff2c <_strtod_l+0x43c>
 800febe:	9b07      	ldr	r3, [sp, #28]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	f43f ae56 	beq.w	800fb72 <_strtod_l+0x82>
 800fec6:	dd22      	ble.n	800ff0e <_strtod_l+0x41e>
 800fec8:	2b16      	cmp	r3, #22
 800feca:	dc09      	bgt.n	800fee0 <_strtod_l+0x3f0>
 800fecc:	496c      	ldr	r1, [pc, #432]	; (8010080 <_strtod_l+0x590>)
 800fece:	4642      	mov	r2, r8
 800fed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fed4:	464b      	mov	r3, r9
 800fed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800feda:	f7f0 fb1f 	bl	800051c <__aeabi_dmul>
 800fede:	e7c3      	b.n	800fe68 <_strtod_l+0x378>
 800fee0:	9a07      	ldr	r2, [sp, #28]
 800fee2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800fee6:	4293      	cmp	r3, r2
 800fee8:	db20      	blt.n	800ff2c <_strtod_l+0x43c>
 800feea:	4d65      	ldr	r5, [pc, #404]	; (8010080 <_strtod_l+0x590>)
 800feec:	f1c4 040f 	rsb	r4, r4, #15
 800fef0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800fef4:	4642      	mov	r2, r8
 800fef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fefa:	464b      	mov	r3, r9
 800fefc:	f7f0 fb0e 	bl	800051c <__aeabi_dmul>
 800ff00:	9b07      	ldr	r3, [sp, #28]
 800ff02:	1b1c      	subs	r4, r3, r4
 800ff04:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ff08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff0c:	e7e5      	b.n	800feda <_strtod_l+0x3ea>
 800ff0e:	9b07      	ldr	r3, [sp, #28]
 800ff10:	3316      	adds	r3, #22
 800ff12:	db0b      	blt.n	800ff2c <_strtod_l+0x43c>
 800ff14:	9b04      	ldr	r3, [sp, #16]
 800ff16:	4640      	mov	r0, r8
 800ff18:	1b5d      	subs	r5, r3, r5
 800ff1a:	4b59      	ldr	r3, [pc, #356]	; (8010080 <_strtod_l+0x590>)
 800ff1c:	4649      	mov	r1, r9
 800ff1e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ff22:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff26:	f7f0 fc23 	bl	8000770 <__aeabi_ddiv>
 800ff2a:	e79d      	b.n	800fe68 <_strtod_l+0x378>
 800ff2c:	9b07      	ldr	r3, [sp, #28]
 800ff2e:	1ba6      	subs	r6, r4, r6
 800ff30:	441e      	add	r6, r3
 800ff32:	2e00      	cmp	r6, #0
 800ff34:	dd74      	ble.n	8010020 <_strtod_l+0x530>
 800ff36:	f016 030f 	ands.w	r3, r6, #15
 800ff3a:	d00a      	beq.n	800ff52 <_strtod_l+0x462>
 800ff3c:	4950      	ldr	r1, [pc, #320]	; (8010080 <_strtod_l+0x590>)
 800ff3e:	4642      	mov	r2, r8
 800ff40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ff44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff48:	464b      	mov	r3, r9
 800ff4a:	f7f0 fae7 	bl	800051c <__aeabi_dmul>
 800ff4e:	4680      	mov	r8, r0
 800ff50:	4689      	mov	r9, r1
 800ff52:	f036 060f 	bics.w	r6, r6, #15
 800ff56:	d052      	beq.n	800fffe <_strtod_l+0x50e>
 800ff58:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800ff5c:	dd27      	ble.n	800ffae <_strtod_l+0x4be>
 800ff5e:	f04f 0b00 	mov.w	fp, #0
 800ff62:	f8cd b010 	str.w	fp, [sp, #16]
 800ff66:	f8cd b020 	str.w	fp, [sp, #32]
 800ff6a:	f8cd b018 	str.w	fp, [sp, #24]
 800ff6e:	2322      	movs	r3, #34	; 0x22
 800ff70:	f04f 0800 	mov.w	r8, #0
 800ff74:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8010078 <_strtod_l+0x588>
 800ff78:	f8ca 3000 	str.w	r3, [sl]
 800ff7c:	9b08      	ldr	r3, [sp, #32]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	f43f adf7 	beq.w	800fb72 <_strtod_l+0x82>
 800ff84:	4650      	mov	r0, sl
 800ff86:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ff88:	f001 fe80 	bl	8011c8c <_Bfree>
 800ff8c:	4650      	mov	r0, sl
 800ff8e:	9906      	ldr	r1, [sp, #24]
 800ff90:	f001 fe7c 	bl	8011c8c <_Bfree>
 800ff94:	4650      	mov	r0, sl
 800ff96:	9904      	ldr	r1, [sp, #16]
 800ff98:	f001 fe78 	bl	8011c8c <_Bfree>
 800ff9c:	4650      	mov	r0, sl
 800ff9e:	9908      	ldr	r1, [sp, #32]
 800ffa0:	f001 fe74 	bl	8011c8c <_Bfree>
 800ffa4:	4659      	mov	r1, fp
 800ffa6:	4650      	mov	r0, sl
 800ffa8:	f001 fe70 	bl	8011c8c <_Bfree>
 800ffac:	e5e1      	b.n	800fb72 <_strtod_l+0x82>
 800ffae:	4b35      	ldr	r3, [pc, #212]	; (8010084 <_strtod_l+0x594>)
 800ffb0:	4640      	mov	r0, r8
 800ffb2:	9305      	str	r3, [sp, #20]
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	4649      	mov	r1, r9
 800ffb8:	461f      	mov	r7, r3
 800ffba:	1136      	asrs	r6, r6, #4
 800ffbc:	2e01      	cmp	r6, #1
 800ffbe:	dc21      	bgt.n	8010004 <_strtod_l+0x514>
 800ffc0:	b10b      	cbz	r3, 800ffc6 <_strtod_l+0x4d6>
 800ffc2:	4680      	mov	r8, r0
 800ffc4:	4689      	mov	r9, r1
 800ffc6:	4b2f      	ldr	r3, [pc, #188]	; (8010084 <_strtod_l+0x594>)
 800ffc8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ffcc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ffd0:	4642      	mov	r2, r8
 800ffd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ffd6:	464b      	mov	r3, r9
 800ffd8:	f7f0 faa0 	bl	800051c <__aeabi_dmul>
 800ffdc:	4b26      	ldr	r3, [pc, #152]	; (8010078 <_strtod_l+0x588>)
 800ffde:	460a      	mov	r2, r1
 800ffe0:	400b      	ands	r3, r1
 800ffe2:	4929      	ldr	r1, [pc, #164]	; (8010088 <_strtod_l+0x598>)
 800ffe4:	4680      	mov	r8, r0
 800ffe6:	428b      	cmp	r3, r1
 800ffe8:	d8b9      	bhi.n	800ff5e <_strtod_l+0x46e>
 800ffea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ffee:	428b      	cmp	r3, r1
 800fff0:	bf86      	itte	hi
 800fff2:	f04f 38ff 	movhi.w	r8, #4294967295
 800fff6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801008c <_strtod_l+0x59c>
 800fffa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800fffe:	2300      	movs	r3, #0
 8010000:	9305      	str	r3, [sp, #20]
 8010002:	e07f      	b.n	8010104 <_strtod_l+0x614>
 8010004:	07f2      	lsls	r2, r6, #31
 8010006:	d505      	bpl.n	8010014 <_strtod_l+0x524>
 8010008:	9b05      	ldr	r3, [sp, #20]
 801000a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000e:	f7f0 fa85 	bl	800051c <__aeabi_dmul>
 8010012:	2301      	movs	r3, #1
 8010014:	9a05      	ldr	r2, [sp, #20]
 8010016:	3701      	adds	r7, #1
 8010018:	3208      	adds	r2, #8
 801001a:	1076      	asrs	r6, r6, #1
 801001c:	9205      	str	r2, [sp, #20]
 801001e:	e7cd      	b.n	800ffbc <_strtod_l+0x4cc>
 8010020:	d0ed      	beq.n	800fffe <_strtod_l+0x50e>
 8010022:	4276      	negs	r6, r6
 8010024:	f016 020f 	ands.w	r2, r6, #15
 8010028:	d00a      	beq.n	8010040 <_strtod_l+0x550>
 801002a:	4b15      	ldr	r3, [pc, #84]	; (8010080 <_strtod_l+0x590>)
 801002c:	4640      	mov	r0, r8
 801002e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010032:	4649      	mov	r1, r9
 8010034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010038:	f7f0 fb9a 	bl	8000770 <__aeabi_ddiv>
 801003c:	4680      	mov	r8, r0
 801003e:	4689      	mov	r9, r1
 8010040:	1136      	asrs	r6, r6, #4
 8010042:	d0dc      	beq.n	800fffe <_strtod_l+0x50e>
 8010044:	2e1f      	cmp	r6, #31
 8010046:	dd23      	ble.n	8010090 <_strtod_l+0x5a0>
 8010048:	f04f 0b00 	mov.w	fp, #0
 801004c:	f8cd b010 	str.w	fp, [sp, #16]
 8010050:	f8cd b020 	str.w	fp, [sp, #32]
 8010054:	f8cd b018 	str.w	fp, [sp, #24]
 8010058:	2322      	movs	r3, #34	; 0x22
 801005a:	f04f 0800 	mov.w	r8, #0
 801005e:	f04f 0900 	mov.w	r9, #0
 8010062:	f8ca 3000 	str.w	r3, [sl]
 8010066:	e789      	b.n	800ff7c <_strtod_l+0x48c>
 8010068:	08013925 	.word	0x08013925
 801006c:	08013960 	.word	0x08013960
 8010070:	0801391d 	.word	0x0801391d
 8010074:	08013a53 	.word	0x08013a53
 8010078:	7ff00000 	.word	0x7ff00000
 801007c:	08013a4f 	.word	0x08013a4f
 8010080:	08013bc8 	.word	0x08013bc8
 8010084:	08013ba0 	.word	0x08013ba0
 8010088:	7ca00000 	.word	0x7ca00000
 801008c:	7fefffff 	.word	0x7fefffff
 8010090:	f016 0310 	ands.w	r3, r6, #16
 8010094:	bf18      	it	ne
 8010096:	236a      	movne	r3, #106	; 0x6a
 8010098:	4640      	mov	r0, r8
 801009a:	9305      	str	r3, [sp, #20]
 801009c:	4649      	mov	r1, r9
 801009e:	2300      	movs	r3, #0
 80100a0:	4fb0      	ldr	r7, [pc, #704]	; (8010364 <_strtod_l+0x874>)
 80100a2:	07f2      	lsls	r2, r6, #31
 80100a4:	d504      	bpl.n	80100b0 <_strtod_l+0x5c0>
 80100a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100aa:	f7f0 fa37 	bl	800051c <__aeabi_dmul>
 80100ae:	2301      	movs	r3, #1
 80100b0:	1076      	asrs	r6, r6, #1
 80100b2:	f107 0708 	add.w	r7, r7, #8
 80100b6:	d1f4      	bne.n	80100a2 <_strtod_l+0x5b2>
 80100b8:	b10b      	cbz	r3, 80100be <_strtod_l+0x5ce>
 80100ba:	4680      	mov	r8, r0
 80100bc:	4689      	mov	r9, r1
 80100be:	9b05      	ldr	r3, [sp, #20]
 80100c0:	b1c3      	cbz	r3, 80100f4 <_strtod_l+0x604>
 80100c2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80100c6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	4649      	mov	r1, r9
 80100ce:	dd11      	ble.n	80100f4 <_strtod_l+0x604>
 80100d0:	2b1f      	cmp	r3, #31
 80100d2:	f340 8127 	ble.w	8010324 <_strtod_l+0x834>
 80100d6:	2b34      	cmp	r3, #52	; 0x34
 80100d8:	bfd8      	it	le
 80100da:	f04f 33ff 	movle.w	r3, #4294967295
 80100de:	f04f 0800 	mov.w	r8, #0
 80100e2:	bfcf      	iteee	gt
 80100e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80100e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80100ec:	fa03 f202 	lslle.w	r2, r3, r2
 80100f0:	ea02 0901 	andle.w	r9, r2, r1
 80100f4:	2200      	movs	r2, #0
 80100f6:	2300      	movs	r3, #0
 80100f8:	4640      	mov	r0, r8
 80100fa:	4649      	mov	r1, r9
 80100fc:	f7f0 fc76 	bl	80009ec <__aeabi_dcmpeq>
 8010100:	2800      	cmp	r0, #0
 8010102:	d1a1      	bne.n	8010048 <_strtod_l+0x558>
 8010104:	9b06      	ldr	r3, [sp, #24]
 8010106:	465a      	mov	r2, fp
 8010108:	9300      	str	r3, [sp, #0]
 801010a:	4650      	mov	r0, sl
 801010c:	4623      	mov	r3, r4
 801010e:	9908      	ldr	r1, [sp, #32]
 8010110:	f001 fe24 	bl	8011d5c <__s2b>
 8010114:	9008      	str	r0, [sp, #32]
 8010116:	2800      	cmp	r0, #0
 8010118:	f43f af21 	beq.w	800ff5e <_strtod_l+0x46e>
 801011c:	9b04      	ldr	r3, [sp, #16]
 801011e:	f04f 0b00 	mov.w	fp, #0
 8010122:	1b5d      	subs	r5, r3, r5
 8010124:	9b07      	ldr	r3, [sp, #28]
 8010126:	f8cd b010 	str.w	fp, [sp, #16]
 801012a:	2b00      	cmp	r3, #0
 801012c:	bfb4      	ite	lt
 801012e:	462b      	movlt	r3, r5
 8010130:	2300      	movge	r3, #0
 8010132:	930e      	str	r3, [sp, #56]	; 0x38
 8010134:	9b07      	ldr	r3, [sp, #28]
 8010136:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801013a:	9314      	str	r3, [sp, #80]	; 0x50
 801013c:	9b08      	ldr	r3, [sp, #32]
 801013e:	4650      	mov	r0, sl
 8010140:	6859      	ldr	r1, [r3, #4]
 8010142:	f001 fd63 	bl	8011c0c <_Balloc>
 8010146:	9006      	str	r0, [sp, #24]
 8010148:	2800      	cmp	r0, #0
 801014a:	f43f af10 	beq.w	800ff6e <_strtod_l+0x47e>
 801014e:	9b08      	ldr	r3, [sp, #32]
 8010150:	300c      	adds	r0, #12
 8010152:	691a      	ldr	r2, [r3, #16]
 8010154:	f103 010c 	add.w	r1, r3, #12
 8010158:	3202      	adds	r2, #2
 801015a:	0092      	lsls	r2, r2, #2
 801015c:	f7ff f806 	bl	800f16c <memcpy>
 8010160:	ab1c      	add	r3, sp, #112	; 0x70
 8010162:	9301      	str	r3, [sp, #4]
 8010164:	ab1b      	add	r3, sp, #108	; 0x6c
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	4642      	mov	r2, r8
 801016a:	464b      	mov	r3, r9
 801016c:	4650      	mov	r0, sl
 801016e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8010172:	f002 f935 	bl	80123e0 <__d2b>
 8010176:	901a      	str	r0, [sp, #104]	; 0x68
 8010178:	2800      	cmp	r0, #0
 801017a:	f43f aef8 	beq.w	800ff6e <_strtod_l+0x47e>
 801017e:	2101      	movs	r1, #1
 8010180:	4650      	mov	r0, sl
 8010182:	f001 fe83 	bl	8011e8c <__i2b>
 8010186:	4603      	mov	r3, r0
 8010188:	9004      	str	r0, [sp, #16]
 801018a:	2800      	cmp	r0, #0
 801018c:	f43f aeef 	beq.w	800ff6e <_strtod_l+0x47e>
 8010190:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010192:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010194:	2d00      	cmp	r5, #0
 8010196:	bfab      	itete	ge
 8010198:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801019a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 801019c:	18ee      	addge	r6, r5, r3
 801019e:	1b5c      	sublt	r4, r3, r5
 80101a0:	9b05      	ldr	r3, [sp, #20]
 80101a2:	bfa8      	it	ge
 80101a4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80101a6:	eba5 0503 	sub.w	r5, r5, r3
 80101aa:	4415      	add	r5, r2
 80101ac:	4b6e      	ldr	r3, [pc, #440]	; (8010368 <_strtod_l+0x878>)
 80101ae:	f105 35ff 	add.w	r5, r5, #4294967295
 80101b2:	bfb8      	it	lt
 80101b4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80101b6:	429d      	cmp	r5, r3
 80101b8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80101bc:	f280 80c4 	bge.w	8010348 <_strtod_l+0x858>
 80101c0:	1b5b      	subs	r3, r3, r5
 80101c2:	2b1f      	cmp	r3, #31
 80101c4:	f04f 0701 	mov.w	r7, #1
 80101c8:	eba2 0203 	sub.w	r2, r2, r3
 80101cc:	f300 80b1 	bgt.w	8010332 <_strtod_l+0x842>
 80101d0:	2500      	movs	r5, #0
 80101d2:	fa07 f303 	lsl.w	r3, r7, r3
 80101d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80101d8:	18b7      	adds	r7, r6, r2
 80101da:	9b05      	ldr	r3, [sp, #20]
 80101dc:	42be      	cmp	r6, r7
 80101de:	4414      	add	r4, r2
 80101e0:	441c      	add	r4, r3
 80101e2:	4633      	mov	r3, r6
 80101e4:	bfa8      	it	ge
 80101e6:	463b      	movge	r3, r7
 80101e8:	42a3      	cmp	r3, r4
 80101ea:	bfa8      	it	ge
 80101ec:	4623      	movge	r3, r4
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	bfc2      	ittt	gt
 80101f2:	1aff      	subgt	r7, r7, r3
 80101f4:	1ae4      	subgt	r4, r4, r3
 80101f6:	1af6      	subgt	r6, r6, r3
 80101f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	dd17      	ble.n	801022e <_strtod_l+0x73e>
 80101fe:	461a      	mov	r2, r3
 8010200:	4650      	mov	r0, sl
 8010202:	9904      	ldr	r1, [sp, #16]
 8010204:	f001 ff00 	bl	8012008 <__pow5mult>
 8010208:	9004      	str	r0, [sp, #16]
 801020a:	2800      	cmp	r0, #0
 801020c:	f43f aeaf 	beq.w	800ff6e <_strtod_l+0x47e>
 8010210:	4601      	mov	r1, r0
 8010212:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010214:	4650      	mov	r0, sl
 8010216:	f001 fe4f 	bl	8011eb8 <__multiply>
 801021a:	9009      	str	r0, [sp, #36]	; 0x24
 801021c:	2800      	cmp	r0, #0
 801021e:	f43f aea6 	beq.w	800ff6e <_strtod_l+0x47e>
 8010222:	4650      	mov	r0, sl
 8010224:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010226:	f001 fd31 	bl	8011c8c <_Bfree>
 801022a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801022c:	931a      	str	r3, [sp, #104]	; 0x68
 801022e:	2f00      	cmp	r7, #0
 8010230:	f300 808e 	bgt.w	8010350 <_strtod_l+0x860>
 8010234:	9b07      	ldr	r3, [sp, #28]
 8010236:	2b00      	cmp	r3, #0
 8010238:	dd08      	ble.n	801024c <_strtod_l+0x75c>
 801023a:	4650      	mov	r0, sl
 801023c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801023e:	9906      	ldr	r1, [sp, #24]
 8010240:	f001 fee2 	bl	8012008 <__pow5mult>
 8010244:	9006      	str	r0, [sp, #24]
 8010246:	2800      	cmp	r0, #0
 8010248:	f43f ae91 	beq.w	800ff6e <_strtod_l+0x47e>
 801024c:	2c00      	cmp	r4, #0
 801024e:	dd08      	ble.n	8010262 <_strtod_l+0x772>
 8010250:	4622      	mov	r2, r4
 8010252:	4650      	mov	r0, sl
 8010254:	9906      	ldr	r1, [sp, #24]
 8010256:	f001 ff31 	bl	80120bc <__lshift>
 801025a:	9006      	str	r0, [sp, #24]
 801025c:	2800      	cmp	r0, #0
 801025e:	f43f ae86 	beq.w	800ff6e <_strtod_l+0x47e>
 8010262:	2e00      	cmp	r6, #0
 8010264:	dd08      	ble.n	8010278 <_strtod_l+0x788>
 8010266:	4632      	mov	r2, r6
 8010268:	4650      	mov	r0, sl
 801026a:	9904      	ldr	r1, [sp, #16]
 801026c:	f001 ff26 	bl	80120bc <__lshift>
 8010270:	9004      	str	r0, [sp, #16]
 8010272:	2800      	cmp	r0, #0
 8010274:	f43f ae7b 	beq.w	800ff6e <_strtod_l+0x47e>
 8010278:	4650      	mov	r0, sl
 801027a:	9a06      	ldr	r2, [sp, #24]
 801027c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801027e:	f001 ffa9 	bl	80121d4 <__mdiff>
 8010282:	4683      	mov	fp, r0
 8010284:	2800      	cmp	r0, #0
 8010286:	f43f ae72 	beq.w	800ff6e <_strtod_l+0x47e>
 801028a:	2400      	movs	r4, #0
 801028c:	68c3      	ldr	r3, [r0, #12]
 801028e:	9904      	ldr	r1, [sp, #16]
 8010290:	60c4      	str	r4, [r0, #12]
 8010292:	930b      	str	r3, [sp, #44]	; 0x2c
 8010294:	f001 ff82 	bl	801219c <__mcmp>
 8010298:	42a0      	cmp	r0, r4
 801029a:	da6b      	bge.n	8010374 <_strtod_l+0x884>
 801029c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801029e:	ea53 0308 	orrs.w	r3, r3, r8
 80102a2:	f040 8091 	bne.w	80103c8 <_strtod_l+0x8d8>
 80102a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	f040 808c 	bne.w	80103c8 <_strtod_l+0x8d8>
 80102b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80102b4:	0d1b      	lsrs	r3, r3, #20
 80102b6:	051b      	lsls	r3, r3, #20
 80102b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80102bc:	f240 8084 	bls.w	80103c8 <_strtod_l+0x8d8>
 80102c0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80102c4:	b91b      	cbnz	r3, 80102ce <_strtod_l+0x7de>
 80102c6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	dd7c      	ble.n	80103c8 <_strtod_l+0x8d8>
 80102ce:	4659      	mov	r1, fp
 80102d0:	2201      	movs	r2, #1
 80102d2:	4650      	mov	r0, sl
 80102d4:	f001 fef2 	bl	80120bc <__lshift>
 80102d8:	9904      	ldr	r1, [sp, #16]
 80102da:	4683      	mov	fp, r0
 80102dc:	f001 ff5e 	bl	801219c <__mcmp>
 80102e0:	2800      	cmp	r0, #0
 80102e2:	dd71      	ble.n	80103c8 <_strtod_l+0x8d8>
 80102e4:	9905      	ldr	r1, [sp, #20]
 80102e6:	464b      	mov	r3, r9
 80102e8:	4a20      	ldr	r2, [pc, #128]	; (801036c <_strtod_l+0x87c>)
 80102ea:	2900      	cmp	r1, #0
 80102ec:	f000 808c 	beq.w	8010408 <_strtod_l+0x918>
 80102f0:	ea02 0109 	and.w	r1, r2, r9
 80102f4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80102f8:	f300 8086 	bgt.w	8010408 <_strtod_l+0x918>
 80102fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010300:	f77f aeaa 	ble.w	8010058 <_strtod_l+0x568>
 8010304:	4640      	mov	r0, r8
 8010306:	4649      	mov	r1, r9
 8010308:	4b19      	ldr	r3, [pc, #100]	; (8010370 <_strtod_l+0x880>)
 801030a:	2200      	movs	r2, #0
 801030c:	f7f0 f906 	bl	800051c <__aeabi_dmul>
 8010310:	460b      	mov	r3, r1
 8010312:	4303      	orrs	r3, r0
 8010314:	bf08      	it	eq
 8010316:	2322      	moveq	r3, #34	; 0x22
 8010318:	4680      	mov	r8, r0
 801031a:	4689      	mov	r9, r1
 801031c:	bf08      	it	eq
 801031e:	f8ca 3000 	streq.w	r3, [sl]
 8010322:	e62f      	b.n	800ff84 <_strtod_l+0x494>
 8010324:	f04f 32ff 	mov.w	r2, #4294967295
 8010328:	fa02 f303 	lsl.w	r3, r2, r3
 801032c:	ea03 0808 	and.w	r8, r3, r8
 8010330:	e6e0      	b.n	80100f4 <_strtod_l+0x604>
 8010332:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8010336:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 801033a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 801033e:	35e2      	adds	r5, #226	; 0xe2
 8010340:	fa07 f505 	lsl.w	r5, r7, r5
 8010344:	970f      	str	r7, [sp, #60]	; 0x3c
 8010346:	e747      	b.n	80101d8 <_strtod_l+0x6e8>
 8010348:	2301      	movs	r3, #1
 801034a:	2500      	movs	r5, #0
 801034c:	930f      	str	r3, [sp, #60]	; 0x3c
 801034e:	e743      	b.n	80101d8 <_strtod_l+0x6e8>
 8010350:	463a      	mov	r2, r7
 8010352:	4650      	mov	r0, sl
 8010354:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010356:	f001 feb1 	bl	80120bc <__lshift>
 801035a:	901a      	str	r0, [sp, #104]	; 0x68
 801035c:	2800      	cmp	r0, #0
 801035e:	f47f af69 	bne.w	8010234 <_strtod_l+0x744>
 8010362:	e604      	b.n	800ff6e <_strtod_l+0x47e>
 8010364:	08013978 	.word	0x08013978
 8010368:	fffffc02 	.word	0xfffffc02
 801036c:	7ff00000 	.word	0x7ff00000
 8010370:	39500000 	.word	0x39500000
 8010374:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010378:	d165      	bne.n	8010446 <_strtod_l+0x956>
 801037a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801037c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010380:	b35a      	cbz	r2, 80103da <_strtod_l+0x8ea>
 8010382:	4a99      	ldr	r2, [pc, #612]	; (80105e8 <_strtod_l+0xaf8>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d12b      	bne.n	80103e0 <_strtod_l+0x8f0>
 8010388:	9b05      	ldr	r3, [sp, #20]
 801038a:	4641      	mov	r1, r8
 801038c:	b303      	cbz	r3, 80103d0 <_strtod_l+0x8e0>
 801038e:	464a      	mov	r2, r9
 8010390:	4b96      	ldr	r3, [pc, #600]	; (80105ec <_strtod_l+0xafc>)
 8010392:	4013      	ands	r3, r2
 8010394:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010398:	f04f 32ff 	mov.w	r2, #4294967295
 801039c:	d81b      	bhi.n	80103d6 <_strtod_l+0x8e6>
 801039e:	0d1b      	lsrs	r3, r3, #20
 80103a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80103a4:	fa02 f303 	lsl.w	r3, r2, r3
 80103a8:	4299      	cmp	r1, r3
 80103aa:	d119      	bne.n	80103e0 <_strtod_l+0x8f0>
 80103ac:	4b90      	ldr	r3, [pc, #576]	; (80105f0 <_strtod_l+0xb00>)
 80103ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d102      	bne.n	80103ba <_strtod_l+0x8ca>
 80103b4:	3101      	adds	r1, #1
 80103b6:	f43f adda 	beq.w	800ff6e <_strtod_l+0x47e>
 80103ba:	f04f 0800 	mov.w	r8, #0
 80103be:	4b8b      	ldr	r3, [pc, #556]	; (80105ec <_strtod_l+0xafc>)
 80103c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103c2:	401a      	ands	r2, r3
 80103c4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80103c8:	9b05      	ldr	r3, [sp, #20]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d19a      	bne.n	8010304 <_strtod_l+0x814>
 80103ce:	e5d9      	b.n	800ff84 <_strtod_l+0x494>
 80103d0:	f04f 33ff 	mov.w	r3, #4294967295
 80103d4:	e7e8      	b.n	80103a8 <_strtod_l+0x8b8>
 80103d6:	4613      	mov	r3, r2
 80103d8:	e7e6      	b.n	80103a8 <_strtod_l+0x8b8>
 80103da:	ea53 0308 	orrs.w	r3, r3, r8
 80103de:	d081      	beq.n	80102e4 <_strtod_l+0x7f4>
 80103e0:	b1e5      	cbz	r5, 801041c <_strtod_l+0x92c>
 80103e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103e4:	421d      	tst	r5, r3
 80103e6:	d0ef      	beq.n	80103c8 <_strtod_l+0x8d8>
 80103e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103ea:	4640      	mov	r0, r8
 80103ec:	4649      	mov	r1, r9
 80103ee:	9a05      	ldr	r2, [sp, #20]
 80103f0:	b1c3      	cbz	r3, 8010424 <_strtod_l+0x934>
 80103f2:	f7ff fb59 	bl	800faa8 <sulp>
 80103f6:	4602      	mov	r2, r0
 80103f8:	460b      	mov	r3, r1
 80103fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80103fe:	f7ef fed7 	bl	80001b0 <__adddf3>
 8010402:	4680      	mov	r8, r0
 8010404:	4689      	mov	r9, r1
 8010406:	e7df      	b.n	80103c8 <_strtod_l+0x8d8>
 8010408:	4013      	ands	r3, r2
 801040a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801040e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010412:	f04f 38ff 	mov.w	r8, #4294967295
 8010416:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801041a:	e7d5      	b.n	80103c8 <_strtod_l+0x8d8>
 801041c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801041e:	ea13 0f08 	tst.w	r3, r8
 8010422:	e7e0      	b.n	80103e6 <_strtod_l+0x8f6>
 8010424:	f7ff fb40 	bl	800faa8 <sulp>
 8010428:	4602      	mov	r2, r0
 801042a:	460b      	mov	r3, r1
 801042c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010430:	f7ef febc 	bl	80001ac <__aeabi_dsub>
 8010434:	2200      	movs	r2, #0
 8010436:	2300      	movs	r3, #0
 8010438:	4680      	mov	r8, r0
 801043a:	4689      	mov	r9, r1
 801043c:	f7f0 fad6 	bl	80009ec <__aeabi_dcmpeq>
 8010440:	2800      	cmp	r0, #0
 8010442:	d0c1      	beq.n	80103c8 <_strtod_l+0x8d8>
 8010444:	e608      	b.n	8010058 <_strtod_l+0x568>
 8010446:	4658      	mov	r0, fp
 8010448:	9904      	ldr	r1, [sp, #16]
 801044a:	f002 f825 	bl	8012498 <__ratio>
 801044e:	2200      	movs	r2, #0
 8010450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010454:	4606      	mov	r6, r0
 8010456:	460f      	mov	r7, r1
 8010458:	f7f0 fadc 	bl	8000a14 <__aeabi_dcmple>
 801045c:	2800      	cmp	r0, #0
 801045e:	d070      	beq.n	8010542 <_strtod_l+0xa52>
 8010460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010462:	2b00      	cmp	r3, #0
 8010464:	d042      	beq.n	80104ec <_strtod_l+0x9fc>
 8010466:	2600      	movs	r6, #0
 8010468:	4f62      	ldr	r7, [pc, #392]	; (80105f4 <_strtod_l+0xb04>)
 801046a:	4d62      	ldr	r5, [pc, #392]	; (80105f4 <_strtod_l+0xb04>)
 801046c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801046e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010472:	0d1b      	lsrs	r3, r3, #20
 8010474:	051b      	lsls	r3, r3, #20
 8010476:	930f      	str	r3, [sp, #60]	; 0x3c
 8010478:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801047a:	4b5f      	ldr	r3, [pc, #380]	; (80105f8 <_strtod_l+0xb08>)
 801047c:	429a      	cmp	r2, r3
 801047e:	f040 80c3 	bne.w	8010608 <_strtod_l+0xb18>
 8010482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010484:	4640      	mov	r0, r8
 8010486:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 801048a:	4649      	mov	r1, r9
 801048c:	f001 ff2e 	bl	80122ec <__ulp>
 8010490:	4602      	mov	r2, r0
 8010492:	460b      	mov	r3, r1
 8010494:	4630      	mov	r0, r6
 8010496:	4639      	mov	r1, r7
 8010498:	f7f0 f840 	bl	800051c <__aeabi_dmul>
 801049c:	4642      	mov	r2, r8
 801049e:	464b      	mov	r3, r9
 80104a0:	f7ef fe86 	bl	80001b0 <__adddf3>
 80104a4:	460b      	mov	r3, r1
 80104a6:	4951      	ldr	r1, [pc, #324]	; (80105ec <_strtod_l+0xafc>)
 80104a8:	4a54      	ldr	r2, [pc, #336]	; (80105fc <_strtod_l+0xb0c>)
 80104aa:	4019      	ands	r1, r3
 80104ac:	4291      	cmp	r1, r2
 80104ae:	4680      	mov	r8, r0
 80104b0:	d95d      	bls.n	801056e <_strtod_l+0xa7e>
 80104b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80104b4:	4b4e      	ldr	r3, [pc, #312]	; (80105f0 <_strtod_l+0xb00>)
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d103      	bne.n	80104c2 <_strtod_l+0x9d2>
 80104ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104bc:	3301      	adds	r3, #1
 80104be:	f43f ad56 	beq.w	800ff6e <_strtod_l+0x47e>
 80104c2:	f04f 38ff 	mov.w	r8, #4294967295
 80104c6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80105f0 <_strtod_l+0xb00>
 80104ca:	4650      	mov	r0, sl
 80104cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80104ce:	f001 fbdd 	bl	8011c8c <_Bfree>
 80104d2:	4650      	mov	r0, sl
 80104d4:	9906      	ldr	r1, [sp, #24]
 80104d6:	f001 fbd9 	bl	8011c8c <_Bfree>
 80104da:	4650      	mov	r0, sl
 80104dc:	9904      	ldr	r1, [sp, #16]
 80104de:	f001 fbd5 	bl	8011c8c <_Bfree>
 80104e2:	4659      	mov	r1, fp
 80104e4:	4650      	mov	r0, sl
 80104e6:	f001 fbd1 	bl	8011c8c <_Bfree>
 80104ea:	e627      	b.n	801013c <_strtod_l+0x64c>
 80104ec:	f1b8 0f00 	cmp.w	r8, #0
 80104f0:	d119      	bne.n	8010526 <_strtod_l+0xa36>
 80104f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80104f8:	b9e3      	cbnz	r3, 8010534 <_strtod_l+0xa44>
 80104fa:	2200      	movs	r2, #0
 80104fc:	4630      	mov	r0, r6
 80104fe:	4639      	mov	r1, r7
 8010500:	4b3c      	ldr	r3, [pc, #240]	; (80105f4 <_strtod_l+0xb04>)
 8010502:	f7f0 fa7d 	bl	8000a00 <__aeabi_dcmplt>
 8010506:	b9c8      	cbnz	r0, 801053c <_strtod_l+0xa4c>
 8010508:	2200      	movs	r2, #0
 801050a:	4630      	mov	r0, r6
 801050c:	4639      	mov	r1, r7
 801050e:	4b3c      	ldr	r3, [pc, #240]	; (8010600 <_strtod_l+0xb10>)
 8010510:	f7f0 f804 	bl	800051c <__aeabi_dmul>
 8010514:	4604      	mov	r4, r0
 8010516:	460d      	mov	r5, r1
 8010518:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801051c:	9416      	str	r4, [sp, #88]	; 0x58
 801051e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010520:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8010524:	e7a2      	b.n	801046c <_strtod_l+0x97c>
 8010526:	f1b8 0f01 	cmp.w	r8, #1
 801052a:	d103      	bne.n	8010534 <_strtod_l+0xa44>
 801052c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801052e:	2b00      	cmp	r3, #0
 8010530:	f43f ad92 	beq.w	8010058 <_strtod_l+0x568>
 8010534:	2600      	movs	r6, #0
 8010536:	2400      	movs	r4, #0
 8010538:	4f32      	ldr	r7, [pc, #200]	; (8010604 <_strtod_l+0xb14>)
 801053a:	e796      	b.n	801046a <_strtod_l+0x97a>
 801053c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801053e:	4d30      	ldr	r5, [pc, #192]	; (8010600 <_strtod_l+0xb10>)
 8010540:	e7ea      	b.n	8010518 <_strtod_l+0xa28>
 8010542:	4b2f      	ldr	r3, [pc, #188]	; (8010600 <_strtod_l+0xb10>)
 8010544:	2200      	movs	r2, #0
 8010546:	4630      	mov	r0, r6
 8010548:	4639      	mov	r1, r7
 801054a:	f7ef ffe7 	bl	800051c <__aeabi_dmul>
 801054e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010550:	4604      	mov	r4, r0
 8010552:	460d      	mov	r5, r1
 8010554:	b933      	cbnz	r3, 8010564 <_strtod_l+0xa74>
 8010556:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801055a:	9010      	str	r0, [sp, #64]	; 0x40
 801055c:	9311      	str	r3, [sp, #68]	; 0x44
 801055e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010562:	e783      	b.n	801046c <_strtod_l+0x97c>
 8010564:	4602      	mov	r2, r0
 8010566:	460b      	mov	r3, r1
 8010568:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801056c:	e7f7      	b.n	801055e <_strtod_l+0xa6e>
 801056e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010572:	9b05      	ldr	r3, [sp, #20]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d1a8      	bne.n	80104ca <_strtod_l+0x9da>
 8010578:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801057c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801057e:	0d1b      	lsrs	r3, r3, #20
 8010580:	051b      	lsls	r3, r3, #20
 8010582:	429a      	cmp	r2, r3
 8010584:	d1a1      	bne.n	80104ca <_strtod_l+0x9da>
 8010586:	4620      	mov	r0, r4
 8010588:	4629      	mov	r1, r5
 801058a:	f7f0 fe1b 	bl	80011c4 <__aeabi_d2lz>
 801058e:	f7ef ff97 	bl	80004c0 <__aeabi_l2d>
 8010592:	4602      	mov	r2, r0
 8010594:	460b      	mov	r3, r1
 8010596:	4620      	mov	r0, r4
 8010598:	4629      	mov	r1, r5
 801059a:	f7ef fe07 	bl	80001ac <__aeabi_dsub>
 801059e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80105a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105a4:	ea43 0308 	orr.w	r3, r3, r8
 80105a8:	4313      	orrs	r3, r2
 80105aa:	4604      	mov	r4, r0
 80105ac:	460d      	mov	r5, r1
 80105ae:	d066      	beq.n	801067e <_strtod_l+0xb8e>
 80105b0:	a309      	add	r3, pc, #36	; (adr r3, 80105d8 <_strtod_l+0xae8>)
 80105b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b6:	f7f0 fa23 	bl	8000a00 <__aeabi_dcmplt>
 80105ba:	2800      	cmp	r0, #0
 80105bc:	f47f ace2 	bne.w	800ff84 <_strtod_l+0x494>
 80105c0:	a307      	add	r3, pc, #28	; (adr r3, 80105e0 <_strtod_l+0xaf0>)
 80105c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c6:	4620      	mov	r0, r4
 80105c8:	4629      	mov	r1, r5
 80105ca:	f7f0 fa37 	bl	8000a3c <__aeabi_dcmpgt>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	f43f af7b 	beq.w	80104ca <_strtod_l+0x9da>
 80105d4:	e4d6      	b.n	800ff84 <_strtod_l+0x494>
 80105d6:	bf00      	nop
 80105d8:	94a03595 	.word	0x94a03595
 80105dc:	3fdfffff 	.word	0x3fdfffff
 80105e0:	35afe535 	.word	0x35afe535
 80105e4:	3fe00000 	.word	0x3fe00000
 80105e8:	000fffff 	.word	0x000fffff
 80105ec:	7ff00000 	.word	0x7ff00000
 80105f0:	7fefffff 	.word	0x7fefffff
 80105f4:	3ff00000 	.word	0x3ff00000
 80105f8:	7fe00000 	.word	0x7fe00000
 80105fc:	7c9fffff 	.word	0x7c9fffff
 8010600:	3fe00000 	.word	0x3fe00000
 8010604:	bff00000 	.word	0xbff00000
 8010608:	9b05      	ldr	r3, [sp, #20]
 801060a:	b313      	cbz	r3, 8010652 <_strtod_l+0xb62>
 801060c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801060e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010612:	d81e      	bhi.n	8010652 <_strtod_l+0xb62>
 8010614:	a326      	add	r3, pc, #152	; (adr r3, 80106b0 <_strtod_l+0xbc0>)
 8010616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061a:	4620      	mov	r0, r4
 801061c:	4629      	mov	r1, r5
 801061e:	f7f0 f9f9 	bl	8000a14 <__aeabi_dcmple>
 8010622:	b190      	cbz	r0, 801064a <_strtod_l+0xb5a>
 8010624:	4629      	mov	r1, r5
 8010626:	4620      	mov	r0, r4
 8010628:	f7f0 fa50 	bl	8000acc <__aeabi_d2uiz>
 801062c:	2801      	cmp	r0, #1
 801062e:	bf38      	it	cc
 8010630:	2001      	movcc	r0, #1
 8010632:	f7ef fef9 	bl	8000428 <__aeabi_ui2d>
 8010636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010638:	4604      	mov	r4, r0
 801063a:	460d      	mov	r5, r1
 801063c:	b9d3      	cbnz	r3, 8010674 <_strtod_l+0xb84>
 801063e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010642:	9012      	str	r0, [sp, #72]	; 0x48
 8010644:	9313      	str	r3, [sp, #76]	; 0x4c
 8010646:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801064a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801064c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8010650:	1a9f      	subs	r7, r3, r2
 8010652:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010656:	f001 fe49 	bl	80122ec <__ulp>
 801065a:	4602      	mov	r2, r0
 801065c:	460b      	mov	r3, r1
 801065e:	4630      	mov	r0, r6
 8010660:	4639      	mov	r1, r7
 8010662:	f7ef ff5b 	bl	800051c <__aeabi_dmul>
 8010666:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801066a:	f7ef fda1 	bl	80001b0 <__adddf3>
 801066e:	4680      	mov	r8, r0
 8010670:	4689      	mov	r9, r1
 8010672:	e77e      	b.n	8010572 <_strtod_l+0xa82>
 8010674:	4602      	mov	r2, r0
 8010676:	460b      	mov	r3, r1
 8010678:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801067c:	e7e3      	b.n	8010646 <_strtod_l+0xb56>
 801067e:	a30e      	add	r3, pc, #56	; (adr r3, 80106b8 <_strtod_l+0xbc8>)
 8010680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010684:	f7f0 f9bc 	bl	8000a00 <__aeabi_dcmplt>
 8010688:	e7a1      	b.n	80105ce <_strtod_l+0xade>
 801068a:	2300      	movs	r3, #0
 801068c:	930a      	str	r3, [sp, #40]	; 0x28
 801068e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010690:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010692:	6013      	str	r3, [r2, #0]
 8010694:	f7ff ba71 	b.w	800fb7a <_strtod_l+0x8a>
 8010698:	2a65      	cmp	r2, #101	; 0x65
 801069a:	f43f ab63 	beq.w	800fd64 <_strtod_l+0x274>
 801069e:	2a45      	cmp	r2, #69	; 0x45
 80106a0:	f43f ab60 	beq.w	800fd64 <_strtod_l+0x274>
 80106a4:	2301      	movs	r3, #1
 80106a6:	f7ff bb95 	b.w	800fdd4 <_strtod_l+0x2e4>
 80106aa:	bf00      	nop
 80106ac:	f3af 8000 	nop.w
 80106b0:	ffc00000 	.word	0xffc00000
 80106b4:	41dfffff 	.word	0x41dfffff
 80106b8:	94a03595 	.word	0x94a03595
 80106bc:	3fcfffff 	.word	0x3fcfffff

080106c0 <strtod>:
 80106c0:	460a      	mov	r2, r1
 80106c2:	4601      	mov	r1, r0
 80106c4:	4802      	ldr	r0, [pc, #8]	; (80106d0 <strtod+0x10>)
 80106c6:	4b03      	ldr	r3, [pc, #12]	; (80106d4 <strtod+0x14>)
 80106c8:	6800      	ldr	r0, [r0, #0]
 80106ca:	f7ff ba11 	b.w	800faf0 <_strtod_l>
 80106ce:	bf00      	nop
 80106d0:	20000904 	.word	0x20000904
 80106d4:	2000096c 	.word	0x2000096c

080106d8 <strtok>:
 80106d8:	4b16      	ldr	r3, [pc, #88]	; (8010734 <strtok+0x5c>)
 80106da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106de:	681f      	ldr	r7, [r3, #0]
 80106e0:	4605      	mov	r5, r0
 80106e2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80106e4:	460e      	mov	r6, r1
 80106e6:	b9ec      	cbnz	r4, 8010724 <strtok+0x4c>
 80106e8:	2050      	movs	r0, #80	; 0x50
 80106ea:	f001 fa67 	bl	8011bbc <malloc>
 80106ee:	4602      	mov	r2, r0
 80106f0:	65b8      	str	r0, [r7, #88]	; 0x58
 80106f2:	b920      	cbnz	r0, 80106fe <strtok+0x26>
 80106f4:	2157      	movs	r1, #87	; 0x57
 80106f6:	4b10      	ldr	r3, [pc, #64]	; (8010738 <strtok+0x60>)
 80106f8:	4810      	ldr	r0, [pc, #64]	; (801073c <strtok+0x64>)
 80106fa:	f000 f849 	bl	8010790 <__assert_func>
 80106fe:	e9c0 4400 	strd	r4, r4, [r0]
 8010702:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010706:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801070a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801070e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010712:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010716:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801071a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801071e:	6184      	str	r4, [r0, #24]
 8010720:	7704      	strb	r4, [r0, #28]
 8010722:	6244      	str	r4, [r0, #36]	; 0x24
 8010724:	4631      	mov	r1, r6
 8010726:	4628      	mov	r0, r5
 8010728:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801072a:	2301      	movs	r3, #1
 801072c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010730:	f000 b806 	b.w	8010740 <__strtok_r>
 8010734:	20000904 	.word	0x20000904
 8010738:	080139a0 	.word	0x080139a0
 801073c:	080139b7 	.word	0x080139b7

08010740 <__strtok_r>:
 8010740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010742:	b908      	cbnz	r0, 8010748 <__strtok_r+0x8>
 8010744:	6810      	ldr	r0, [r2, #0]
 8010746:	b188      	cbz	r0, 801076c <__strtok_r+0x2c>
 8010748:	4604      	mov	r4, r0
 801074a:	460f      	mov	r7, r1
 801074c:	4620      	mov	r0, r4
 801074e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010752:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010756:	b91e      	cbnz	r6, 8010760 <__strtok_r+0x20>
 8010758:	b965      	cbnz	r5, 8010774 <__strtok_r+0x34>
 801075a:	4628      	mov	r0, r5
 801075c:	6015      	str	r5, [r2, #0]
 801075e:	e005      	b.n	801076c <__strtok_r+0x2c>
 8010760:	42b5      	cmp	r5, r6
 8010762:	d1f6      	bne.n	8010752 <__strtok_r+0x12>
 8010764:	2b00      	cmp	r3, #0
 8010766:	d1f0      	bne.n	801074a <__strtok_r+0xa>
 8010768:	6014      	str	r4, [r2, #0]
 801076a:	7003      	strb	r3, [r0, #0]
 801076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801076e:	461c      	mov	r4, r3
 8010770:	e00c      	b.n	801078c <__strtok_r+0x4c>
 8010772:	b915      	cbnz	r5, 801077a <__strtok_r+0x3a>
 8010774:	460e      	mov	r6, r1
 8010776:	f814 3b01 	ldrb.w	r3, [r4], #1
 801077a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801077e:	42ab      	cmp	r3, r5
 8010780:	d1f7      	bne.n	8010772 <__strtok_r+0x32>
 8010782:	2b00      	cmp	r3, #0
 8010784:	d0f3      	beq.n	801076e <__strtok_r+0x2e>
 8010786:	2300      	movs	r3, #0
 8010788:	f804 3c01 	strb.w	r3, [r4, #-1]
 801078c:	6014      	str	r4, [r2, #0]
 801078e:	e7ed      	b.n	801076c <__strtok_r+0x2c>

08010790 <__assert_func>:
 8010790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010792:	4614      	mov	r4, r2
 8010794:	461a      	mov	r2, r3
 8010796:	4b09      	ldr	r3, [pc, #36]	; (80107bc <__assert_func+0x2c>)
 8010798:	4605      	mov	r5, r0
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	68d8      	ldr	r0, [r3, #12]
 801079e:	b14c      	cbz	r4, 80107b4 <__assert_func+0x24>
 80107a0:	4b07      	ldr	r3, [pc, #28]	; (80107c0 <__assert_func+0x30>)
 80107a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107a6:	9100      	str	r1, [sp, #0]
 80107a8:	462b      	mov	r3, r5
 80107aa:	4906      	ldr	r1, [pc, #24]	; (80107c4 <__assert_func+0x34>)
 80107ac:	f000 fe8a 	bl	80114c4 <fiprintf>
 80107b0:	f002 fb80 	bl	8012eb4 <abort>
 80107b4:	4b04      	ldr	r3, [pc, #16]	; (80107c8 <__assert_func+0x38>)
 80107b6:	461c      	mov	r4, r3
 80107b8:	e7f3      	b.n	80107a2 <__assert_func+0x12>
 80107ba:	bf00      	nop
 80107bc:	20000904 	.word	0x20000904
 80107c0:	08013a14 	.word	0x08013a14
 80107c4:	08013a21 	.word	0x08013a21
 80107c8:	08013a4f 	.word	0x08013a4f

080107cc <quorem>:
 80107cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d0:	6903      	ldr	r3, [r0, #16]
 80107d2:	690c      	ldr	r4, [r1, #16]
 80107d4:	4607      	mov	r7, r0
 80107d6:	42a3      	cmp	r3, r4
 80107d8:	f2c0 8082 	blt.w	80108e0 <quorem+0x114>
 80107dc:	3c01      	subs	r4, #1
 80107de:	f100 0514 	add.w	r5, r0, #20
 80107e2:	f101 0814 	add.w	r8, r1, #20
 80107e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107ea:	9301      	str	r3, [sp, #4]
 80107ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80107f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107f4:	3301      	adds	r3, #1
 80107f6:	429a      	cmp	r2, r3
 80107f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80107fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010800:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010804:	d331      	bcc.n	801086a <quorem+0x9e>
 8010806:	f04f 0e00 	mov.w	lr, #0
 801080a:	4640      	mov	r0, r8
 801080c:	46ac      	mov	ip, r5
 801080e:	46f2      	mov	sl, lr
 8010810:	f850 2b04 	ldr.w	r2, [r0], #4
 8010814:	b293      	uxth	r3, r2
 8010816:	fb06 e303 	mla	r3, r6, r3, lr
 801081a:	0c12      	lsrs	r2, r2, #16
 801081c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010820:	b29b      	uxth	r3, r3
 8010822:	fb06 e202 	mla	r2, r6, r2, lr
 8010826:	ebaa 0303 	sub.w	r3, sl, r3
 801082a:	f8dc a000 	ldr.w	sl, [ip]
 801082e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010832:	fa1f fa8a 	uxth.w	sl, sl
 8010836:	4453      	add	r3, sl
 8010838:	f8dc a000 	ldr.w	sl, [ip]
 801083c:	b292      	uxth	r2, r2
 801083e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010842:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010846:	b29b      	uxth	r3, r3
 8010848:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801084c:	4581      	cmp	r9, r0
 801084e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010852:	f84c 3b04 	str.w	r3, [ip], #4
 8010856:	d2db      	bcs.n	8010810 <quorem+0x44>
 8010858:	f855 300b 	ldr.w	r3, [r5, fp]
 801085c:	b92b      	cbnz	r3, 801086a <quorem+0x9e>
 801085e:	9b01      	ldr	r3, [sp, #4]
 8010860:	3b04      	subs	r3, #4
 8010862:	429d      	cmp	r5, r3
 8010864:	461a      	mov	r2, r3
 8010866:	d32f      	bcc.n	80108c8 <quorem+0xfc>
 8010868:	613c      	str	r4, [r7, #16]
 801086a:	4638      	mov	r0, r7
 801086c:	f001 fc96 	bl	801219c <__mcmp>
 8010870:	2800      	cmp	r0, #0
 8010872:	db25      	blt.n	80108c0 <quorem+0xf4>
 8010874:	4628      	mov	r0, r5
 8010876:	f04f 0c00 	mov.w	ip, #0
 801087a:	3601      	adds	r6, #1
 801087c:	f858 1b04 	ldr.w	r1, [r8], #4
 8010880:	f8d0 e000 	ldr.w	lr, [r0]
 8010884:	b28b      	uxth	r3, r1
 8010886:	ebac 0303 	sub.w	r3, ip, r3
 801088a:	fa1f f28e 	uxth.w	r2, lr
 801088e:	4413      	add	r3, r2
 8010890:	0c0a      	lsrs	r2, r1, #16
 8010892:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010896:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801089a:	b29b      	uxth	r3, r3
 801089c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108a0:	45c1      	cmp	r9, r8
 80108a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80108a6:	f840 3b04 	str.w	r3, [r0], #4
 80108aa:	d2e7      	bcs.n	801087c <quorem+0xb0>
 80108ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108b4:	b922      	cbnz	r2, 80108c0 <quorem+0xf4>
 80108b6:	3b04      	subs	r3, #4
 80108b8:	429d      	cmp	r5, r3
 80108ba:	461a      	mov	r2, r3
 80108bc:	d30a      	bcc.n	80108d4 <quorem+0x108>
 80108be:	613c      	str	r4, [r7, #16]
 80108c0:	4630      	mov	r0, r6
 80108c2:	b003      	add	sp, #12
 80108c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c8:	6812      	ldr	r2, [r2, #0]
 80108ca:	3b04      	subs	r3, #4
 80108cc:	2a00      	cmp	r2, #0
 80108ce:	d1cb      	bne.n	8010868 <quorem+0x9c>
 80108d0:	3c01      	subs	r4, #1
 80108d2:	e7c6      	b.n	8010862 <quorem+0x96>
 80108d4:	6812      	ldr	r2, [r2, #0]
 80108d6:	3b04      	subs	r3, #4
 80108d8:	2a00      	cmp	r2, #0
 80108da:	d1f0      	bne.n	80108be <quorem+0xf2>
 80108dc:	3c01      	subs	r4, #1
 80108de:	e7eb      	b.n	80108b8 <quorem+0xec>
 80108e0:	2000      	movs	r0, #0
 80108e2:	e7ee      	b.n	80108c2 <quorem+0xf6>
 80108e4:	0000      	movs	r0, r0
	...

080108e8 <_dtoa_r>:
 80108e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ec:	4616      	mov	r6, r2
 80108ee:	461f      	mov	r7, r3
 80108f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80108f2:	b099      	sub	sp, #100	; 0x64
 80108f4:	4605      	mov	r5, r0
 80108f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80108fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80108fe:	b974      	cbnz	r4, 801091e <_dtoa_r+0x36>
 8010900:	2010      	movs	r0, #16
 8010902:	f001 f95b 	bl	8011bbc <malloc>
 8010906:	4602      	mov	r2, r0
 8010908:	6268      	str	r0, [r5, #36]	; 0x24
 801090a:	b920      	cbnz	r0, 8010916 <_dtoa_r+0x2e>
 801090c:	21ea      	movs	r1, #234	; 0xea
 801090e:	4ba8      	ldr	r3, [pc, #672]	; (8010bb0 <_dtoa_r+0x2c8>)
 8010910:	48a8      	ldr	r0, [pc, #672]	; (8010bb4 <_dtoa_r+0x2cc>)
 8010912:	f7ff ff3d 	bl	8010790 <__assert_func>
 8010916:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801091a:	6004      	str	r4, [r0, #0]
 801091c:	60c4      	str	r4, [r0, #12]
 801091e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010920:	6819      	ldr	r1, [r3, #0]
 8010922:	b151      	cbz	r1, 801093a <_dtoa_r+0x52>
 8010924:	685a      	ldr	r2, [r3, #4]
 8010926:	2301      	movs	r3, #1
 8010928:	4093      	lsls	r3, r2
 801092a:	604a      	str	r2, [r1, #4]
 801092c:	608b      	str	r3, [r1, #8]
 801092e:	4628      	mov	r0, r5
 8010930:	f001 f9ac 	bl	8011c8c <_Bfree>
 8010934:	2200      	movs	r2, #0
 8010936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010938:	601a      	str	r2, [r3, #0]
 801093a:	1e3b      	subs	r3, r7, #0
 801093c:	bfaf      	iteee	ge
 801093e:	2300      	movge	r3, #0
 8010940:	2201      	movlt	r2, #1
 8010942:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010946:	9305      	strlt	r3, [sp, #20]
 8010948:	bfa8      	it	ge
 801094a:	f8c8 3000 	strge.w	r3, [r8]
 801094e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010952:	4b99      	ldr	r3, [pc, #612]	; (8010bb8 <_dtoa_r+0x2d0>)
 8010954:	bfb8      	it	lt
 8010956:	f8c8 2000 	strlt.w	r2, [r8]
 801095a:	ea33 0309 	bics.w	r3, r3, r9
 801095e:	d119      	bne.n	8010994 <_dtoa_r+0xac>
 8010960:	f242 730f 	movw	r3, #9999	; 0x270f
 8010964:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010966:	6013      	str	r3, [r2, #0]
 8010968:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801096c:	4333      	orrs	r3, r6
 801096e:	f000 857f 	beq.w	8011470 <_dtoa_r+0xb88>
 8010972:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010974:	b953      	cbnz	r3, 801098c <_dtoa_r+0xa4>
 8010976:	4b91      	ldr	r3, [pc, #580]	; (8010bbc <_dtoa_r+0x2d4>)
 8010978:	e022      	b.n	80109c0 <_dtoa_r+0xd8>
 801097a:	4b91      	ldr	r3, [pc, #580]	; (8010bc0 <_dtoa_r+0x2d8>)
 801097c:	9303      	str	r3, [sp, #12]
 801097e:	3308      	adds	r3, #8
 8010980:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010982:	6013      	str	r3, [r2, #0]
 8010984:	9803      	ldr	r0, [sp, #12]
 8010986:	b019      	add	sp, #100	; 0x64
 8010988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098c:	4b8b      	ldr	r3, [pc, #556]	; (8010bbc <_dtoa_r+0x2d4>)
 801098e:	9303      	str	r3, [sp, #12]
 8010990:	3303      	adds	r3, #3
 8010992:	e7f5      	b.n	8010980 <_dtoa_r+0x98>
 8010994:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010998:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801099c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80109a0:	2200      	movs	r2, #0
 80109a2:	2300      	movs	r3, #0
 80109a4:	f7f0 f822 	bl	80009ec <__aeabi_dcmpeq>
 80109a8:	4680      	mov	r8, r0
 80109aa:	b158      	cbz	r0, 80109c4 <_dtoa_r+0xdc>
 80109ac:	2301      	movs	r3, #1
 80109ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80109b0:	6013      	str	r3, [r2, #0]
 80109b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f000 8558 	beq.w	801146a <_dtoa_r+0xb82>
 80109ba:	4882      	ldr	r0, [pc, #520]	; (8010bc4 <_dtoa_r+0x2dc>)
 80109bc:	6018      	str	r0, [r3, #0]
 80109be:	1e43      	subs	r3, r0, #1
 80109c0:	9303      	str	r3, [sp, #12]
 80109c2:	e7df      	b.n	8010984 <_dtoa_r+0x9c>
 80109c4:	ab16      	add	r3, sp, #88	; 0x58
 80109c6:	9301      	str	r3, [sp, #4]
 80109c8:	ab17      	add	r3, sp, #92	; 0x5c
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	4628      	mov	r0, r5
 80109ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80109d2:	f001 fd05 	bl	80123e0 <__d2b>
 80109d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80109da:	4683      	mov	fp, r0
 80109dc:	2c00      	cmp	r4, #0
 80109de:	d07f      	beq.n	8010ae0 <_dtoa_r+0x1f8>
 80109e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80109e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80109ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80109f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80109f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80109fa:	2200      	movs	r2, #0
 80109fc:	4b72      	ldr	r3, [pc, #456]	; (8010bc8 <_dtoa_r+0x2e0>)
 80109fe:	f7ef fbd5 	bl	80001ac <__aeabi_dsub>
 8010a02:	a365      	add	r3, pc, #404	; (adr r3, 8010b98 <_dtoa_r+0x2b0>)
 8010a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a08:	f7ef fd88 	bl	800051c <__aeabi_dmul>
 8010a0c:	a364      	add	r3, pc, #400	; (adr r3, 8010ba0 <_dtoa_r+0x2b8>)
 8010a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a12:	f7ef fbcd 	bl	80001b0 <__adddf3>
 8010a16:	4606      	mov	r6, r0
 8010a18:	4620      	mov	r0, r4
 8010a1a:	460f      	mov	r7, r1
 8010a1c:	f7ef fd14 	bl	8000448 <__aeabi_i2d>
 8010a20:	a361      	add	r3, pc, #388	; (adr r3, 8010ba8 <_dtoa_r+0x2c0>)
 8010a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a26:	f7ef fd79 	bl	800051c <__aeabi_dmul>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	4630      	mov	r0, r6
 8010a30:	4639      	mov	r1, r7
 8010a32:	f7ef fbbd 	bl	80001b0 <__adddf3>
 8010a36:	4606      	mov	r6, r0
 8010a38:	460f      	mov	r7, r1
 8010a3a:	f7f0 f81f 	bl	8000a7c <__aeabi_d2iz>
 8010a3e:	2200      	movs	r2, #0
 8010a40:	4682      	mov	sl, r0
 8010a42:	2300      	movs	r3, #0
 8010a44:	4630      	mov	r0, r6
 8010a46:	4639      	mov	r1, r7
 8010a48:	f7ef ffda 	bl	8000a00 <__aeabi_dcmplt>
 8010a4c:	b148      	cbz	r0, 8010a62 <_dtoa_r+0x17a>
 8010a4e:	4650      	mov	r0, sl
 8010a50:	f7ef fcfa 	bl	8000448 <__aeabi_i2d>
 8010a54:	4632      	mov	r2, r6
 8010a56:	463b      	mov	r3, r7
 8010a58:	f7ef ffc8 	bl	80009ec <__aeabi_dcmpeq>
 8010a5c:	b908      	cbnz	r0, 8010a62 <_dtoa_r+0x17a>
 8010a5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a62:	f1ba 0f16 	cmp.w	sl, #22
 8010a66:	d858      	bhi.n	8010b1a <_dtoa_r+0x232>
 8010a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010a6c:	4b57      	ldr	r3, [pc, #348]	; (8010bcc <_dtoa_r+0x2e4>)
 8010a6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a76:	f7ef ffc3 	bl	8000a00 <__aeabi_dcmplt>
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	d04f      	beq.n	8010b1e <_dtoa_r+0x236>
 8010a7e:	2300      	movs	r3, #0
 8010a80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a84:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010a88:	1b1c      	subs	r4, r3, r4
 8010a8a:	1e63      	subs	r3, r4, #1
 8010a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8010a8e:	bf49      	itett	mi
 8010a90:	f1c4 0301 	rsbmi	r3, r4, #1
 8010a94:	2300      	movpl	r3, #0
 8010a96:	9306      	strmi	r3, [sp, #24]
 8010a98:	2300      	movmi	r3, #0
 8010a9a:	bf54      	ite	pl
 8010a9c:	9306      	strpl	r3, [sp, #24]
 8010a9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010aa0:	f1ba 0f00 	cmp.w	sl, #0
 8010aa4:	db3d      	blt.n	8010b22 <_dtoa_r+0x23a>
 8010aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aa8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010aac:	4453      	add	r3, sl
 8010aae:	9309      	str	r3, [sp, #36]	; 0x24
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8010ab4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ab6:	2b09      	cmp	r3, #9
 8010ab8:	f200 808c 	bhi.w	8010bd4 <_dtoa_r+0x2ec>
 8010abc:	2b05      	cmp	r3, #5
 8010abe:	bfc4      	itt	gt
 8010ac0:	3b04      	subgt	r3, #4
 8010ac2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8010ac4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ac6:	bfc8      	it	gt
 8010ac8:	2400      	movgt	r4, #0
 8010aca:	f1a3 0302 	sub.w	r3, r3, #2
 8010ace:	bfd8      	it	le
 8010ad0:	2401      	movle	r4, #1
 8010ad2:	2b03      	cmp	r3, #3
 8010ad4:	f200 808a 	bhi.w	8010bec <_dtoa_r+0x304>
 8010ad8:	e8df f003 	tbb	[pc, r3]
 8010adc:	5b4d4f2d 	.word	0x5b4d4f2d
 8010ae0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8010ae4:	441c      	add	r4, r3
 8010ae6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010aea:	2b20      	cmp	r3, #32
 8010aec:	bfc3      	ittte	gt
 8010aee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010af2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8010af6:	fa09 f303 	lslgt.w	r3, r9, r3
 8010afa:	f1c3 0320 	rsble	r3, r3, #32
 8010afe:	bfc6      	itte	gt
 8010b00:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010b04:	4318      	orrgt	r0, r3
 8010b06:	fa06 f003 	lslle.w	r0, r6, r3
 8010b0a:	f7ef fc8d 	bl	8000428 <__aeabi_ui2d>
 8010b0e:	2301      	movs	r3, #1
 8010b10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010b14:	3c01      	subs	r4, #1
 8010b16:	9313      	str	r3, [sp, #76]	; 0x4c
 8010b18:	e76f      	b.n	80109fa <_dtoa_r+0x112>
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e7b2      	b.n	8010a84 <_dtoa_r+0x19c>
 8010b1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8010b20:	e7b1      	b.n	8010a86 <_dtoa_r+0x19e>
 8010b22:	9b06      	ldr	r3, [sp, #24]
 8010b24:	eba3 030a 	sub.w	r3, r3, sl
 8010b28:	9306      	str	r3, [sp, #24]
 8010b2a:	f1ca 0300 	rsb	r3, sl, #0
 8010b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8010b30:	2300      	movs	r3, #0
 8010b32:	930e      	str	r3, [sp, #56]	; 0x38
 8010b34:	e7be      	b.n	8010ab4 <_dtoa_r+0x1cc>
 8010b36:	2300      	movs	r3, #0
 8010b38:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	dc58      	bgt.n	8010bf2 <_dtoa_r+0x30a>
 8010b40:	f04f 0901 	mov.w	r9, #1
 8010b44:	464b      	mov	r3, r9
 8010b46:	f8cd 9020 	str.w	r9, [sp, #32]
 8010b4a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8010b4e:	2200      	movs	r2, #0
 8010b50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8010b52:	6042      	str	r2, [r0, #4]
 8010b54:	2204      	movs	r2, #4
 8010b56:	f102 0614 	add.w	r6, r2, #20
 8010b5a:	429e      	cmp	r6, r3
 8010b5c:	6841      	ldr	r1, [r0, #4]
 8010b5e:	d94e      	bls.n	8010bfe <_dtoa_r+0x316>
 8010b60:	4628      	mov	r0, r5
 8010b62:	f001 f853 	bl	8011c0c <_Balloc>
 8010b66:	9003      	str	r0, [sp, #12]
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d14c      	bne.n	8010c06 <_dtoa_r+0x31e>
 8010b6c:	4602      	mov	r2, r0
 8010b6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b72:	4b17      	ldr	r3, [pc, #92]	; (8010bd0 <_dtoa_r+0x2e8>)
 8010b74:	e6cc      	b.n	8010910 <_dtoa_r+0x28>
 8010b76:	2301      	movs	r3, #1
 8010b78:	e7de      	b.n	8010b38 <_dtoa_r+0x250>
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010b80:	eb0a 0903 	add.w	r9, sl, r3
 8010b84:	f109 0301 	add.w	r3, r9, #1
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	9308      	str	r3, [sp, #32]
 8010b8c:	bfb8      	it	lt
 8010b8e:	2301      	movlt	r3, #1
 8010b90:	e7dd      	b.n	8010b4e <_dtoa_r+0x266>
 8010b92:	2301      	movs	r3, #1
 8010b94:	e7f2      	b.n	8010b7c <_dtoa_r+0x294>
 8010b96:	bf00      	nop
 8010b98:	636f4361 	.word	0x636f4361
 8010b9c:	3fd287a7 	.word	0x3fd287a7
 8010ba0:	8b60c8b3 	.word	0x8b60c8b3
 8010ba4:	3fc68a28 	.word	0x3fc68a28
 8010ba8:	509f79fb 	.word	0x509f79fb
 8010bac:	3fd34413 	.word	0x3fd34413
 8010bb0:	080139a0 	.word	0x080139a0
 8010bb4:	08013a5d 	.word	0x08013a5d
 8010bb8:	7ff00000 	.word	0x7ff00000
 8010bbc:	08013a59 	.word	0x08013a59
 8010bc0:	08013a50 	.word	0x08013a50
 8010bc4:	08013929 	.word	0x08013929
 8010bc8:	3ff80000 	.word	0x3ff80000
 8010bcc:	08013bc8 	.word	0x08013bc8
 8010bd0:	08013ab8 	.word	0x08013ab8
 8010bd4:	2401      	movs	r4, #1
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8010bda:	9322      	str	r3, [sp, #136]	; 0x88
 8010bdc:	f04f 39ff 	mov.w	r9, #4294967295
 8010be0:	2200      	movs	r2, #0
 8010be2:	2312      	movs	r3, #18
 8010be4:	f8cd 9020 	str.w	r9, [sp, #32]
 8010be8:	9223      	str	r2, [sp, #140]	; 0x8c
 8010bea:	e7b0      	b.n	8010b4e <_dtoa_r+0x266>
 8010bec:	2301      	movs	r3, #1
 8010bee:	930b      	str	r3, [sp, #44]	; 0x2c
 8010bf0:	e7f4      	b.n	8010bdc <_dtoa_r+0x2f4>
 8010bf2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8010bf6:	464b      	mov	r3, r9
 8010bf8:	f8cd 9020 	str.w	r9, [sp, #32]
 8010bfc:	e7a7      	b.n	8010b4e <_dtoa_r+0x266>
 8010bfe:	3101      	adds	r1, #1
 8010c00:	6041      	str	r1, [r0, #4]
 8010c02:	0052      	lsls	r2, r2, #1
 8010c04:	e7a7      	b.n	8010b56 <_dtoa_r+0x26e>
 8010c06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010c08:	9a03      	ldr	r2, [sp, #12]
 8010c0a:	601a      	str	r2, [r3, #0]
 8010c0c:	9b08      	ldr	r3, [sp, #32]
 8010c0e:	2b0e      	cmp	r3, #14
 8010c10:	f200 80a8 	bhi.w	8010d64 <_dtoa_r+0x47c>
 8010c14:	2c00      	cmp	r4, #0
 8010c16:	f000 80a5 	beq.w	8010d64 <_dtoa_r+0x47c>
 8010c1a:	f1ba 0f00 	cmp.w	sl, #0
 8010c1e:	dd34      	ble.n	8010c8a <_dtoa_r+0x3a2>
 8010c20:	4a9a      	ldr	r2, [pc, #616]	; (8010e8c <_dtoa_r+0x5a4>)
 8010c22:	f00a 030f 	and.w	r3, sl, #15
 8010c26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010c2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010c32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010c36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8010c3a:	d016      	beq.n	8010c6a <_dtoa_r+0x382>
 8010c3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c40:	4b93      	ldr	r3, [pc, #588]	; (8010e90 <_dtoa_r+0x5a8>)
 8010c42:	2703      	movs	r7, #3
 8010c44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c48:	f7ef fd92 	bl	8000770 <__aeabi_ddiv>
 8010c4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c50:	f004 040f 	and.w	r4, r4, #15
 8010c54:	4e8e      	ldr	r6, [pc, #568]	; (8010e90 <_dtoa_r+0x5a8>)
 8010c56:	b954      	cbnz	r4, 8010c6e <_dtoa_r+0x386>
 8010c58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c60:	f7ef fd86 	bl	8000770 <__aeabi_ddiv>
 8010c64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c68:	e029      	b.n	8010cbe <_dtoa_r+0x3d6>
 8010c6a:	2702      	movs	r7, #2
 8010c6c:	e7f2      	b.n	8010c54 <_dtoa_r+0x36c>
 8010c6e:	07e1      	lsls	r1, r4, #31
 8010c70:	d508      	bpl.n	8010c84 <_dtoa_r+0x39c>
 8010c72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010c76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010c7a:	f7ef fc4f 	bl	800051c <__aeabi_dmul>
 8010c7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010c82:	3701      	adds	r7, #1
 8010c84:	1064      	asrs	r4, r4, #1
 8010c86:	3608      	adds	r6, #8
 8010c88:	e7e5      	b.n	8010c56 <_dtoa_r+0x36e>
 8010c8a:	f000 80a5 	beq.w	8010dd8 <_dtoa_r+0x4f0>
 8010c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c92:	f1ca 0400 	rsb	r4, sl, #0
 8010c96:	4b7d      	ldr	r3, [pc, #500]	; (8010e8c <_dtoa_r+0x5a4>)
 8010c98:	f004 020f 	and.w	r2, r4, #15
 8010c9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca4:	f7ef fc3a 	bl	800051c <__aeabi_dmul>
 8010ca8:	2702      	movs	r7, #2
 8010caa:	2300      	movs	r3, #0
 8010cac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010cb0:	4e77      	ldr	r6, [pc, #476]	; (8010e90 <_dtoa_r+0x5a8>)
 8010cb2:	1124      	asrs	r4, r4, #4
 8010cb4:	2c00      	cmp	r4, #0
 8010cb6:	f040 8084 	bne.w	8010dc2 <_dtoa_r+0x4da>
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1d2      	bne.n	8010c64 <_dtoa_r+0x37c>
 8010cbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	f000 808b 	beq.w	8010ddc <_dtoa_r+0x4f4>
 8010cc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010cca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010cce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	4b6f      	ldr	r3, [pc, #444]	; (8010e94 <_dtoa_r+0x5ac>)
 8010cd6:	f7ef fe93 	bl	8000a00 <__aeabi_dcmplt>
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	d07e      	beq.n	8010ddc <_dtoa_r+0x4f4>
 8010cde:	9b08      	ldr	r3, [sp, #32]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d07b      	beq.n	8010ddc <_dtoa_r+0x4f4>
 8010ce4:	f1b9 0f00 	cmp.w	r9, #0
 8010ce8:	dd38      	ble.n	8010d5c <_dtoa_r+0x474>
 8010cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010cee:	2200      	movs	r2, #0
 8010cf0:	4b69      	ldr	r3, [pc, #420]	; (8010e98 <_dtoa_r+0x5b0>)
 8010cf2:	f7ef fc13 	bl	800051c <__aeabi_dmul>
 8010cf6:	464c      	mov	r4, r9
 8010cf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010cfc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8010d00:	3701      	adds	r7, #1
 8010d02:	4638      	mov	r0, r7
 8010d04:	f7ef fba0 	bl	8000448 <__aeabi_i2d>
 8010d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d0c:	f7ef fc06 	bl	800051c <__aeabi_dmul>
 8010d10:	2200      	movs	r2, #0
 8010d12:	4b62      	ldr	r3, [pc, #392]	; (8010e9c <_dtoa_r+0x5b4>)
 8010d14:	f7ef fa4c 	bl	80001b0 <__adddf3>
 8010d18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010d1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010d20:	9611      	str	r6, [sp, #68]	; 0x44
 8010d22:	2c00      	cmp	r4, #0
 8010d24:	d15d      	bne.n	8010de2 <_dtoa_r+0x4fa>
 8010d26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	4b5c      	ldr	r3, [pc, #368]	; (8010ea0 <_dtoa_r+0x5b8>)
 8010d2e:	f7ef fa3d 	bl	80001ac <__aeabi_dsub>
 8010d32:	4602      	mov	r2, r0
 8010d34:	460b      	mov	r3, r1
 8010d36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010d3a:	4633      	mov	r3, r6
 8010d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d3e:	f7ef fe7d 	bl	8000a3c <__aeabi_dcmpgt>
 8010d42:	2800      	cmp	r0, #0
 8010d44:	f040 829c 	bne.w	8011280 <_dtoa_r+0x998>
 8010d48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010d52:	f7ef fe55 	bl	8000a00 <__aeabi_dcmplt>
 8010d56:	2800      	cmp	r0, #0
 8010d58:	f040 8290 	bne.w	801127c <_dtoa_r+0x994>
 8010d5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8010d60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010d64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	f2c0 8152 	blt.w	8011010 <_dtoa_r+0x728>
 8010d6c:	f1ba 0f0e 	cmp.w	sl, #14
 8010d70:	f300 814e 	bgt.w	8011010 <_dtoa_r+0x728>
 8010d74:	4b45      	ldr	r3, [pc, #276]	; (8010e8c <_dtoa_r+0x5a4>)
 8010d76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010d7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010d7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8010d82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	f280 80db 	bge.w	8010f40 <_dtoa_r+0x658>
 8010d8a:	9b08      	ldr	r3, [sp, #32]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f300 80d7 	bgt.w	8010f40 <_dtoa_r+0x658>
 8010d92:	f040 8272 	bne.w	801127a <_dtoa_r+0x992>
 8010d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	4b40      	ldr	r3, [pc, #256]	; (8010ea0 <_dtoa_r+0x5b8>)
 8010d9e:	f7ef fbbd 	bl	800051c <__aeabi_dmul>
 8010da2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010da6:	f7ef fe3f 	bl	8000a28 <__aeabi_dcmpge>
 8010daa:	9c08      	ldr	r4, [sp, #32]
 8010dac:	4626      	mov	r6, r4
 8010dae:	2800      	cmp	r0, #0
 8010db0:	f040 8248 	bne.w	8011244 <_dtoa_r+0x95c>
 8010db4:	2331      	movs	r3, #49	; 0x31
 8010db6:	9f03      	ldr	r7, [sp, #12]
 8010db8:	f10a 0a01 	add.w	sl, sl, #1
 8010dbc:	f807 3b01 	strb.w	r3, [r7], #1
 8010dc0:	e244      	b.n	801124c <_dtoa_r+0x964>
 8010dc2:	07e2      	lsls	r2, r4, #31
 8010dc4:	d505      	bpl.n	8010dd2 <_dtoa_r+0x4ea>
 8010dc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010dca:	f7ef fba7 	bl	800051c <__aeabi_dmul>
 8010dce:	2301      	movs	r3, #1
 8010dd0:	3701      	adds	r7, #1
 8010dd2:	1064      	asrs	r4, r4, #1
 8010dd4:	3608      	adds	r6, #8
 8010dd6:	e76d      	b.n	8010cb4 <_dtoa_r+0x3cc>
 8010dd8:	2702      	movs	r7, #2
 8010dda:	e770      	b.n	8010cbe <_dtoa_r+0x3d6>
 8010ddc:	46d0      	mov	r8, sl
 8010dde:	9c08      	ldr	r4, [sp, #32]
 8010de0:	e78f      	b.n	8010d02 <_dtoa_r+0x41a>
 8010de2:	9903      	ldr	r1, [sp, #12]
 8010de4:	4b29      	ldr	r3, [pc, #164]	; (8010e8c <_dtoa_r+0x5a4>)
 8010de6:	4421      	add	r1, r4
 8010de8:	9112      	str	r1, [sp, #72]	; 0x48
 8010dea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010dec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010df0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010df4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010df8:	2900      	cmp	r1, #0
 8010dfa:	d055      	beq.n	8010ea8 <_dtoa_r+0x5c0>
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	4929      	ldr	r1, [pc, #164]	; (8010ea4 <_dtoa_r+0x5bc>)
 8010e00:	f7ef fcb6 	bl	8000770 <__aeabi_ddiv>
 8010e04:	463b      	mov	r3, r7
 8010e06:	4632      	mov	r2, r6
 8010e08:	f7ef f9d0 	bl	80001ac <__aeabi_dsub>
 8010e0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010e10:	9f03      	ldr	r7, [sp, #12]
 8010e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e16:	f7ef fe31 	bl	8000a7c <__aeabi_d2iz>
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	f7ef fb14 	bl	8000448 <__aeabi_i2d>
 8010e20:	4602      	mov	r2, r0
 8010e22:	460b      	mov	r3, r1
 8010e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e28:	f7ef f9c0 	bl	80001ac <__aeabi_dsub>
 8010e2c:	4602      	mov	r2, r0
 8010e2e:	460b      	mov	r3, r1
 8010e30:	3430      	adds	r4, #48	; 0x30
 8010e32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010e3a:	f807 4b01 	strb.w	r4, [r7], #1
 8010e3e:	f7ef fddf 	bl	8000a00 <__aeabi_dcmplt>
 8010e42:	2800      	cmp	r0, #0
 8010e44:	d174      	bne.n	8010f30 <_dtoa_r+0x648>
 8010e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e4a:	2000      	movs	r0, #0
 8010e4c:	4911      	ldr	r1, [pc, #68]	; (8010e94 <_dtoa_r+0x5ac>)
 8010e4e:	f7ef f9ad 	bl	80001ac <__aeabi_dsub>
 8010e52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010e56:	f7ef fdd3 	bl	8000a00 <__aeabi_dcmplt>
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	f040 80b7 	bne.w	8010fce <_dtoa_r+0x6e6>
 8010e60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010e62:	429f      	cmp	r7, r3
 8010e64:	f43f af7a 	beq.w	8010d5c <_dtoa_r+0x474>
 8010e68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	4b0a      	ldr	r3, [pc, #40]	; (8010e98 <_dtoa_r+0x5b0>)
 8010e70:	f7ef fb54 	bl	800051c <__aeabi_dmul>
 8010e74:	2200      	movs	r2, #0
 8010e76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010e7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e7e:	4b06      	ldr	r3, [pc, #24]	; (8010e98 <_dtoa_r+0x5b0>)
 8010e80:	f7ef fb4c 	bl	800051c <__aeabi_dmul>
 8010e84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e88:	e7c3      	b.n	8010e12 <_dtoa_r+0x52a>
 8010e8a:	bf00      	nop
 8010e8c:	08013bc8 	.word	0x08013bc8
 8010e90:	08013ba0 	.word	0x08013ba0
 8010e94:	3ff00000 	.word	0x3ff00000
 8010e98:	40240000 	.word	0x40240000
 8010e9c:	401c0000 	.word	0x401c0000
 8010ea0:	40140000 	.word	0x40140000
 8010ea4:	3fe00000 	.word	0x3fe00000
 8010ea8:	4630      	mov	r0, r6
 8010eaa:	4639      	mov	r1, r7
 8010eac:	f7ef fb36 	bl	800051c <__aeabi_dmul>
 8010eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010eb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010eb6:	9c03      	ldr	r4, [sp, #12]
 8010eb8:	9314      	str	r3, [sp, #80]	; 0x50
 8010eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ebe:	f7ef fddd 	bl	8000a7c <__aeabi_d2iz>
 8010ec2:	9015      	str	r0, [sp, #84]	; 0x54
 8010ec4:	f7ef fac0 	bl	8000448 <__aeabi_i2d>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	460b      	mov	r3, r1
 8010ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ed0:	f7ef f96c 	bl	80001ac <__aeabi_dsub>
 8010ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ed6:	4606      	mov	r6, r0
 8010ed8:	3330      	adds	r3, #48	; 0x30
 8010eda:	f804 3b01 	strb.w	r3, [r4], #1
 8010ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ee0:	460f      	mov	r7, r1
 8010ee2:	429c      	cmp	r4, r3
 8010ee4:	f04f 0200 	mov.w	r2, #0
 8010ee8:	d124      	bne.n	8010f34 <_dtoa_r+0x64c>
 8010eea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010eee:	4bb0      	ldr	r3, [pc, #704]	; (80111b0 <_dtoa_r+0x8c8>)
 8010ef0:	f7ef f95e 	bl	80001b0 <__adddf3>
 8010ef4:	4602      	mov	r2, r0
 8010ef6:	460b      	mov	r3, r1
 8010ef8:	4630      	mov	r0, r6
 8010efa:	4639      	mov	r1, r7
 8010efc:	f7ef fd9e 	bl	8000a3c <__aeabi_dcmpgt>
 8010f00:	2800      	cmp	r0, #0
 8010f02:	d163      	bne.n	8010fcc <_dtoa_r+0x6e4>
 8010f04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010f08:	2000      	movs	r0, #0
 8010f0a:	49a9      	ldr	r1, [pc, #676]	; (80111b0 <_dtoa_r+0x8c8>)
 8010f0c:	f7ef f94e 	bl	80001ac <__aeabi_dsub>
 8010f10:	4602      	mov	r2, r0
 8010f12:	460b      	mov	r3, r1
 8010f14:	4630      	mov	r0, r6
 8010f16:	4639      	mov	r1, r7
 8010f18:	f7ef fd72 	bl	8000a00 <__aeabi_dcmplt>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	f43f af1d 	beq.w	8010d5c <_dtoa_r+0x474>
 8010f22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010f24:	1e7b      	subs	r3, r7, #1
 8010f26:	9314      	str	r3, [sp, #80]	; 0x50
 8010f28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8010f2c:	2b30      	cmp	r3, #48	; 0x30
 8010f2e:	d0f8      	beq.n	8010f22 <_dtoa_r+0x63a>
 8010f30:	46c2      	mov	sl, r8
 8010f32:	e03b      	b.n	8010fac <_dtoa_r+0x6c4>
 8010f34:	4b9f      	ldr	r3, [pc, #636]	; (80111b4 <_dtoa_r+0x8cc>)
 8010f36:	f7ef faf1 	bl	800051c <__aeabi_dmul>
 8010f3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010f3e:	e7bc      	b.n	8010eba <_dtoa_r+0x5d2>
 8010f40:	9f03      	ldr	r7, [sp, #12]
 8010f42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010f46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f4a:	4640      	mov	r0, r8
 8010f4c:	4649      	mov	r1, r9
 8010f4e:	f7ef fc0f 	bl	8000770 <__aeabi_ddiv>
 8010f52:	f7ef fd93 	bl	8000a7c <__aeabi_d2iz>
 8010f56:	4604      	mov	r4, r0
 8010f58:	f7ef fa76 	bl	8000448 <__aeabi_i2d>
 8010f5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f60:	f7ef fadc 	bl	800051c <__aeabi_dmul>
 8010f64:	4602      	mov	r2, r0
 8010f66:	460b      	mov	r3, r1
 8010f68:	4640      	mov	r0, r8
 8010f6a:	4649      	mov	r1, r9
 8010f6c:	f7ef f91e 	bl	80001ac <__aeabi_dsub>
 8010f70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8010f74:	f807 6b01 	strb.w	r6, [r7], #1
 8010f78:	9e03      	ldr	r6, [sp, #12]
 8010f7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8010f7e:	1bbe      	subs	r6, r7, r6
 8010f80:	45b4      	cmp	ip, r6
 8010f82:	4602      	mov	r2, r0
 8010f84:	460b      	mov	r3, r1
 8010f86:	d136      	bne.n	8010ff6 <_dtoa_r+0x70e>
 8010f88:	f7ef f912 	bl	80001b0 <__adddf3>
 8010f8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f90:	4680      	mov	r8, r0
 8010f92:	4689      	mov	r9, r1
 8010f94:	f7ef fd52 	bl	8000a3c <__aeabi_dcmpgt>
 8010f98:	bb58      	cbnz	r0, 8010ff2 <_dtoa_r+0x70a>
 8010f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f9e:	4640      	mov	r0, r8
 8010fa0:	4649      	mov	r1, r9
 8010fa2:	f7ef fd23 	bl	80009ec <__aeabi_dcmpeq>
 8010fa6:	b108      	cbz	r0, 8010fac <_dtoa_r+0x6c4>
 8010fa8:	07e1      	lsls	r1, r4, #31
 8010faa:	d422      	bmi.n	8010ff2 <_dtoa_r+0x70a>
 8010fac:	4628      	mov	r0, r5
 8010fae:	4659      	mov	r1, fp
 8010fb0:	f000 fe6c 	bl	8011c8c <_Bfree>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	703b      	strb	r3, [r7, #0]
 8010fb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010fba:	f10a 0001 	add.w	r0, sl, #1
 8010fbe:	6018      	str	r0, [r3, #0]
 8010fc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	f43f acde 	beq.w	8010984 <_dtoa_r+0x9c>
 8010fc8:	601f      	str	r7, [r3, #0]
 8010fca:	e4db      	b.n	8010984 <_dtoa_r+0x9c>
 8010fcc:	4627      	mov	r7, r4
 8010fce:	463b      	mov	r3, r7
 8010fd0:	461f      	mov	r7, r3
 8010fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fd6:	2a39      	cmp	r2, #57	; 0x39
 8010fd8:	d107      	bne.n	8010fea <_dtoa_r+0x702>
 8010fda:	9a03      	ldr	r2, [sp, #12]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d1f7      	bne.n	8010fd0 <_dtoa_r+0x6e8>
 8010fe0:	2230      	movs	r2, #48	; 0x30
 8010fe2:	9903      	ldr	r1, [sp, #12]
 8010fe4:	f108 0801 	add.w	r8, r8, #1
 8010fe8:	700a      	strb	r2, [r1, #0]
 8010fea:	781a      	ldrb	r2, [r3, #0]
 8010fec:	3201      	adds	r2, #1
 8010fee:	701a      	strb	r2, [r3, #0]
 8010ff0:	e79e      	b.n	8010f30 <_dtoa_r+0x648>
 8010ff2:	46d0      	mov	r8, sl
 8010ff4:	e7eb      	b.n	8010fce <_dtoa_r+0x6e6>
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	4b6e      	ldr	r3, [pc, #440]	; (80111b4 <_dtoa_r+0x8cc>)
 8010ffa:	f7ef fa8f 	bl	800051c <__aeabi_dmul>
 8010ffe:	2200      	movs	r2, #0
 8011000:	2300      	movs	r3, #0
 8011002:	4680      	mov	r8, r0
 8011004:	4689      	mov	r9, r1
 8011006:	f7ef fcf1 	bl	80009ec <__aeabi_dcmpeq>
 801100a:	2800      	cmp	r0, #0
 801100c:	d09b      	beq.n	8010f46 <_dtoa_r+0x65e>
 801100e:	e7cd      	b.n	8010fac <_dtoa_r+0x6c4>
 8011010:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011012:	2a00      	cmp	r2, #0
 8011014:	f000 80d0 	beq.w	80111b8 <_dtoa_r+0x8d0>
 8011018:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801101a:	2a01      	cmp	r2, #1
 801101c:	f300 80ae 	bgt.w	801117c <_dtoa_r+0x894>
 8011020:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011022:	2a00      	cmp	r2, #0
 8011024:	f000 80a6 	beq.w	8011174 <_dtoa_r+0x88c>
 8011028:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801102c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801102e:	9f06      	ldr	r7, [sp, #24]
 8011030:	9a06      	ldr	r2, [sp, #24]
 8011032:	2101      	movs	r1, #1
 8011034:	441a      	add	r2, r3
 8011036:	9206      	str	r2, [sp, #24]
 8011038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801103a:	4628      	mov	r0, r5
 801103c:	441a      	add	r2, r3
 801103e:	9209      	str	r2, [sp, #36]	; 0x24
 8011040:	f000 ff24 	bl	8011e8c <__i2b>
 8011044:	4606      	mov	r6, r0
 8011046:	2f00      	cmp	r7, #0
 8011048:	dd0c      	ble.n	8011064 <_dtoa_r+0x77c>
 801104a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801104c:	2b00      	cmp	r3, #0
 801104e:	dd09      	ble.n	8011064 <_dtoa_r+0x77c>
 8011050:	42bb      	cmp	r3, r7
 8011052:	bfa8      	it	ge
 8011054:	463b      	movge	r3, r7
 8011056:	9a06      	ldr	r2, [sp, #24]
 8011058:	1aff      	subs	r7, r7, r3
 801105a:	1ad2      	subs	r2, r2, r3
 801105c:	9206      	str	r2, [sp, #24]
 801105e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011060:	1ad3      	subs	r3, r2, r3
 8011062:	9309      	str	r3, [sp, #36]	; 0x24
 8011064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011066:	b1f3      	cbz	r3, 80110a6 <_dtoa_r+0x7be>
 8011068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801106a:	2b00      	cmp	r3, #0
 801106c:	f000 80a8 	beq.w	80111c0 <_dtoa_r+0x8d8>
 8011070:	2c00      	cmp	r4, #0
 8011072:	dd10      	ble.n	8011096 <_dtoa_r+0x7ae>
 8011074:	4631      	mov	r1, r6
 8011076:	4622      	mov	r2, r4
 8011078:	4628      	mov	r0, r5
 801107a:	f000 ffc5 	bl	8012008 <__pow5mult>
 801107e:	465a      	mov	r2, fp
 8011080:	4601      	mov	r1, r0
 8011082:	4606      	mov	r6, r0
 8011084:	4628      	mov	r0, r5
 8011086:	f000 ff17 	bl	8011eb8 <__multiply>
 801108a:	4680      	mov	r8, r0
 801108c:	4659      	mov	r1, fp
 801108e:	4628      	mov	r0, r5
 8011090:	f000 fdfc 	bl	8011c8c <_Bfree>
 8011094:	46c3      	mov	fp, r8
 8011096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011098:	1b1a      	subs	r2, r3, r4
 801109a:	d004      	beq.n	80110a6 <_dtoa_r+0x7be>
 801109c:	4659      	mov	r1, fp
 801109e:	4628      	mov	r0, r5
 80110a0:	f000 ffb2 	bl	8012008 <__pow5mult>
 80110a4:	4683      	mov	fp, r0
 80110a6:	2101      	movs	r1, #1
 80110a8:	4628      	mov	r0, r5
 80110aa:	f000 feef 	bl	8011e8c <__i2b>
 80110ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110b0:	4604      	mov	r4, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	f340 8086 	ble.w	80111c4 <_dtoa_r+0x8dc>
 80110b8:	461a      	mov	r2, r3
 80110ba:	4601      	mov	r1, r0
 80110bc:	4628      	mov	r0, r5
 80110be:	f000 ffa3 	bl	8012008 <__pow5mult>
 80110c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80110c4:	4604      	mov	r4, r0
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	dd7f      	ble.n	80111ca <_dtoa_r+0x8e2>
 80110ca:	f04f 0800 	mov.w	r8, #0
 80110ce:	6923      	ldr	r3, [r4, #16]
 80110d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80110d4:	6918      	ldr	r0, [r3, #16]
 80110d6:	f000 fe8b 	bl	8011df0 <__hi0bits>
 80110da:	f1c0 0020 	rsb	r0, r0, #32
 80110de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110e0:	4418      	add	r0, r3
 80110e2:	f010 001f 	ands.w	r0, r0, #31
 80110e6:	f000 8092 	beq.w	801120e <_dtoa_r+0x926>
 80110ea:	f1c0 0320 	rsb	r3, r0, #32
 80110ee:	2b04      	cmp	r3, #4
 80110f0:	f340 808a 	ble.w	8011208 <_dtoa_r+0x920>
 80110f4:	f1c0 001c 	rsb	r0, r0, #28
 80110f8:	9b06      	ldr	r3, [sp, #24]
 80110fa:	4407      	add	r7, r0
 80110fc:	4403      	add	r3, r0
 80110fe:	9306      	str	r3, [sp, #24]
 8011100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011102:	4403      	add	r3, r0
 8011104:	9309      	str	r3, [sp, #36]	; 0x24
 8011106:	9b06      	ldr	r3, [sp, #24]
 8011108:	2b00      	cmp	r3, #0
 801110a:	dd05      	ble.n	8011118 <_dtoa_r+0x830>
 801110c:	4659      	mov	r1, fp
 801110e:	461a      	mov	r2, r3
 8011110:	4628      	mov	r0, r5
 8011112:	f000 ffd3 	bl	80120bc <__lshift>
 8011116:	4683      	mov	fp, r0
 8011118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801111a:	2b00      	cmp	r3, #0
 801111c:	dd05      	ble.n	801112a <_dtoa_r+0x842>
 801111e:	4621      	mov	r1, r4
 8011120:	461a      	mov	r2, r3
 8011122:	4628      	mov	r0, r5
 8011124:	f000 ffca 	bl	80120bc <__lshift>
 8011128:	4604      	mov	r4, r0
 801112a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801112c:	2b00      	cmp	r3, #0
 801112e:	d070      	beq.n	8011212 <_dtoa_r+0x92a>
 8011130:	4621      	mov	r1, r4
 8011132:	4658      	mov	r0, fp
 8011134:	f001 f832 	bl	801219c <__mcmp>
 8011138:	2800      	cmp	r0, #0
 801113a:	da6a      	bge.n	8011212 <_dtoa_r+0x92a>
 801113c:	2300      	movs	r3, #0
 801113e:	4659      	mov	r1, fp
 8011140:	220a      	movs	r2, #10
 8011142:	4628      	mov	r0, r5
 8011144:	f000 fdc4 	bl	8011cd0 <__multadd>
 8011148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801114a:	4683      	mov	fp, r0
 801114c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011150:	2b00      	cmp	r3, #0
 8011152:	f000 8194 	beq.w	801147e <_dtoa_r+0xb96>
 8011156:	4631      	mov	r1, r6
 8011158:	2300      	movs	r3, #0
 801115a:	220a      	movs	r2, #10
 801115c:	4628      	mov	r0, r5
 801115e:	f000 fdb7 	bl	8011cd0 <__multadd>
 8011162:	f1b9 0f00 	cmp.w	r9, #0
 8011166:	4606      	mov	r6, r0
 8011168:	f300 8093 	bgt.w	8011292 <_dtoa_r+0x9aa>
 801116c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801116e:	2b02      	cmp	r3, #2
 8011170:	dc57      	bgt.n	8011222 <_dtoa_r+0x93a>
 8011172:	e08e      	b.n	8011292 <_dtoa_r+0x9aa>
 8011174:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011176:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801117a:	e757      	b.n	801102c <_dtoa_r+0x744>
 801117c:	9b08      	ldr	r3, [sp, #32]
 801117e:	1e5c      	subs	r4, r3, #1
 8011180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011182:	42a3      	cmp	r3, r4
 8011184:	bfb7      	itett	lt
 8011186:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011188:	1b1c      	subge	r4, r3, r4
 801118a:	1ae2      	sublt	r2, r4, r3
 801118c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801118e:	bfbe      	ittt	lt
 8011190:	940a      	strlt	r4, [sp, #40]	; 0x28
 8011192:	189b      	addlt	r3, r3, r2
 8011194:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011196:	9b08      	ldr	r3, [sp, #32]
 8011198:	bfb8      	it	lt
 801119a:	2400      	movlt	r4, #0
 801119c:	2b00      	cmp	r3, #0
 801119e:	bfbb      	ittet	lt
 80111a0:	9b06      	ldrlt	r3, [sp, #24]
 80111a2:	9a08      	ldrlt	r2, [sp, #32]
 80111a4:	9f06      	ldrge	r7, [sp, #24]
 80111a6:	1a9f      	sublt	r7, r3, r2
 80111a8:	bfac      	ite	ge
 80111aa:	9b08      	ldrge	r3, [sp, #32]
 80111ac:	2300      	movlt	r3, #0
 80111ae:	e73f      	b.n	8011030 <_dtoa_r+0x748>
 80111b0:	3fe00000 	.word	0x3fe00000
 80111b4:	40240000 	.word	0x40240000
 80111b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80111ba:	9f06      	ldr	r7, [sp, #24]
 80111bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80111be:	e742      	b.n	8011046 <_dtoa_r+0x75e>
 80111c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111c2:	e76b      	b.n	801109c <_dtoa_r+0x7b4>
 80111c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	dc19      	bgt.n	80111fe <_dtoa_r+0x916>
 80111ca:	9b04      	ldr	r3, [sp, #16]
 80111cc:	b9bb      	cbnz	r3, 80111fe <_dtoa_r+0x916>
 80111ce:	9b05      	ldr	r3, [sp, #20]
 80111d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80111d4:	b99b      	cbnz	r3, 80111fe <_dtoa_r+0x916>
 80111d6:	9b05      	ldr	r3, [sp, #20]
 80111d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80111dc:	0d1b      	lsrs	r3, r3, #20
 80111de:	051b      	lsls	r3, r3, #20
 80111e0:	b183      	cbz	r3, 8011204 <_dtoa_r+0x91c>
 80111e2:	f04f 0801 	mov.w	r8, #1
 80111e6:	9b06      	ldr	r3, [sp, #24]
 80111e8:	3301      	adds	r3, #1
 80111ea:	9306      	str	r3, [sp, #24]
 80111ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ee:	3301      	adds	r3, #1
 80111f0:	9309      	str	r3, [sp, #36]	; 0x24
 80111f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	f47f af6a 	bne.w	80110ce <_dtoa_r+0x7e6>
 80111fa:	2001      	movs	r0, #1
 80111fc:	e76f      	b.n	80110de <_dtoa_r+0x7f6>
 80111fe:	f04f 0800 	mov.w	r8, #0
 8011202:	e7f6      	b.n	80111f2 <_dtoa_r+0x90a>
 8011204:	4698      	mov	r8, r3
 8011206:	e7f4      	b.n	80111f2 <_dtoa_r+0x90a>
 8011208:	f43f af7d 	beq.w	8011106 <_dtoa_r+0x81e>
 801120c:	4618      	mov	r0, r3
 801120e:	301c      	adds	r0, #28
 8011210:	e772      	b.n	80110f8 <_dtoa_r+0x810>
 8011212:	9b08      	ldr	r3, [sp, #32]
 8011214:	2b00      	cmp	r3, #0
 8011216:	dc36      	bgt.n	8011286 <_dtoa_r+0x99e>
 8011218:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801121a:	2b02      	cmp	r3, #2
 801121c:	dd33      	ble.n	8011286 <_dtoa_r+0x99e>
 801121e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011222:	f1b9 0f00 	cmp.w	r9, #0
 8011226:	d10d      	bne.n	8011244 <_dtoa_r+0x95c>
 8011228:	4621      	mov	r1, r4
 801122a:	464b      	mov	r3, r9
 801122c:	2205      	movs	r2, #5
 801122e:	4628      	mov	r0, r5
 8011230:	f000 fd4e 	bl	8011cd0 <__multadd>
 8011234:	4601      	mov	r1, r0
 8011236:	4604      	mov	r4, r0
 8011238:	4658      	mov	r0, fp
 801123a:	f000 ffaf 	bl	801219c <__mcmp>
 801123e:	2800      	cmp	r0, #0
 8011240:	f73f adb8 	bgt.w	8010db4 <_dtoa_r+0x4cc>
 8011244:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011246:	9f03      	ldr	r7, [sp, #12]
 8011248:	ea6f 0a03 	mvn.w	sl, r3
 801124c:	f04f 0800 	mov.w	r8, #0
 8011250:	4621      	mov	r1, r4
 8011252:	4628      	mov	r0, r5
 8011254:	f000 fd1a 	bl	8011c8c <_Bfree>
 8011258:	2e00      	cmp	r6, #0
 801125a:	f43f aea7 	beq.w	8010fac <_dtoa_r+0x6c4>
 801125e:	f1b8 0f00 	cmp.w	r8, #0
 8011262:	d005      	beq.n	8011270 <_dtoa_r+0x988>
 8011264:	45b0      	cmp	r8, r6
 8011266:	d003      	beq.n	8011270 <_dtoa_r+0x988>
 8011268:	4641      	mov	r1, r8
 801126a:	4628      	mov	r0, r5
 801126c:	f000 fd0e 	bl	8011c8c <_Bfree>
 8011270:	4631      	mov	r1, r6
 8011272:	4628      	mov	r0, r5
 8011274:	f000 fd0a 	bl	8011c8c <_Bfree>
 8011278:	e698      	b.n	8010fac <_dtoa_r+0x6c4>
 801127a:	2400      	movs	r4, #0
 801127c:	4626      	mov	r6, r4
 801127e:	e7e1      	b.n	8011244 <_dtoa_r+0x95c>
 8011280:	46c2      	mov	sl, r8
 8011282:	4626      	mov	r6, r4
 8011284:	e596      	b.n	8010db4 <_dtoa_r+0x4cc>
 8011286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011288:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801128c:	2b00      	cmp	r3, #0
 801128e:	f000 80fd 	beq.w	801148c <_dtoa_r+0xba4>
 8011292:	2f00      	cmp	r7, #0
 8011294:	dd05      	ble.n	80112a2 <_dtoa_r+0x9ba>
 8011296:	4631      	mov	r1, r6
 8011298:	463a      	mov	r2, r7
 801129a:	4628      	mov	r0, r5
 801129c:	f000 ff0e 	bl	80120bc <__lshift>
 80112a0:	4606      	mov	r6, r0
 80112a2:	f1b8 0f00 	cmp.w	r8, #0
 80112a6:	d05c      	beq.n	8011362 <_dtoa_r+0xa7a>
 80112a8:	4628      	mov	r0, r5
 80112aa:	6871      	ldr	r1, [r6, #4]
 80112ac:	f000 fcae 	bl	8011c0c <_Balloc>
 80112b0:	4607      	mov	r7, r0
 80112b2:	b928      	cbnz	r0, 80112c0 <_dtoa_r+0x9d8>
 80112b4:	4602      	mov	r2, r0
 80112b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80112ba:	4b7f      	ldr	r3, [pc, #508]	; (80114b8 <_dtoa_r+0xbd0>)
 80112bc:	f7ff bb28 	b.w	8010910 <_dtoa_r+0x28>
 80112c0:	6932      	ldr	r2, [r6, #16]
 80112c2:	f106 010c 	add.w	r1, r6, #12
 80112c6:	3202      	adds	r2, #2
 80112c8:	0092      	lsls	r2, r2, #2
 80112ca:	300c      	adds	r0, #12
 80112cc:	f7fd ff4e 	bl	800f16c <memcpy>
 80112d0:	2201      	movs	r2, #1
 80112d2:	4639      	mov	r1, r7
 80112d4:	4628      	mov	r0, r5
 80112d6:	f000 fef1 	bl	80120bc <__lshift>
 80112da:	46b0      	mov	r8, r6
 80112dc:	4606      	mov	r6, r0
 80112de:	9b03      	ldr	r3, [sp, #12]
 80112e0:	3301      	adds	r3, #1
 80112e2:	9308      	str	r3, [sp, #32]
 80112e4:	9b03      	ldr	r3, [sp, #12]
 80112e6:	444b      	add	r3, r9
 80112e8:	930a      	str	r3, [sp, #40]	; 0x28
 80112ea:	9b04      	ldr	r3, [sp, #16]
 80112ec:	f003 0301 	and.w	r3, r3, #1
 80112f0:	9309      	str	r3, [sp, #36]	; 0x24
 80112f2:	9b08      	ldr	r3, [sp, #32]
 80112f4:	4621      	mov	r1, r4
 80112f6:	3b01      	subs	r3, #1
 80112f8:	4658      	mov	r0, fp
 80112fa:	9304      	str	r3, [sp, #16]
 80112fc:	f7ff fa66 	bl	80107cc <quorem>
 8011300:	4603      	mov	r3, r0
 8011302:	4641      	mov	r1, r8
 8011304:	3330      	adds	r3, #48	; 0x30
 8011306:	9006      	str	r0, [sp, #24]
 8011308:	4658      	mov	r0, fp
 801130a:	930b      	str	r3, [sp, #44]	; 0x2c
 801130c:	f000 ff46 	bl	801219c <__mcmp>
 8011310:	4632      	mov	r2, r6
 8011312:	4681      	mov	r9, r0
 8011314:	4621      	mov	r1, r4
 8011316:	4628      	mov	r0, r5
 8011318:	f000 ff5c 	bl	80121d4 <__mdiff>
 801131c:	68c2      	ldr	r2, [r0, #12]
 801131e:	4607      	mov	r7, r0
 8011320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011322:	bb02      	cbnz	r2, 8011366 <_dtoa_r+0xa7e>
 8011324:	4601      	mov	r1, r0
 8011326:	4658      	mov	r0, fp
 8011328:	f000 ff38 	bl	801219c <__mcmp>
 801132c:	4602      	mov	r2, r0
 801132e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011330:	4639      	mov	r1, r7
 8011332:	4628      	mov	r0, r5
 8011334:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8011338:	f000 fca8 	bl	8011c8c <_Bfree>
 801133c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801133e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011340:	9f08      	ldr	r7, [sp, #32]
 8011342:	ea43 0102 	orr.w	r1, r3, r2
 8011346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011348:	430b      	orrs	r3, r1
 801134a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801134c:	d10d      	bne.n	801136a <_dtoa_r+0xa82>
 801134e:	2b39      	cmp	r3, #57	; 0x39
 8011350:	d029      	beq.n	80113a6 <_dtoa_r+0xabe>
 8011352:	f1b9 0f00 	cmp.w	r9, #0
 8011356:	dd01      	ble.n	801135c <_dtoa_r+0xa74>
 8011358:	9b06      	ldr	r3, [sp, #24]
 801135a:	3331      	adds	r3, #49	; 0x31
 801135c:	9a04      	ldr	r2, [sp, #16]
 801135e:	7013      	strb	r3, [r2, #0]
 8011360:	e776      	b.n	8011250 <_dtoa_r+0x968>
 8011362:	4630      	mov	r0, r6
 8011364:	e7b9      	b.n	80112da <_dtoa_r+0x9f2>
 8011366:	2201      	movs	r2, #1
 8011368:	e7e2      	b.n	8011330 <_dtoa_r+0xa48>
 801136a:	f1b9 0f00 	cmp.w	r9, #0
 801136e:	db06      	blt.n	801137e <_dtoa_r+0xa96>
 8011370:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011372:	ea41 0909 	orr.w	r9, r1, r9
 8011376:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011378:	ea59 0101 	orrs.w	r1, r9, r1
 801137c:	d120      	bne.n	80113c0 <_dtoa_r+0xad8>
 801137e:	2a00      	cmp	r2, #0
 8011380:	ddec      	ble.n	801135c <_dtoa_r+0xa74>
 8011382:	4659      	mov	r1, fp
 8011384:	2201      	movs	r2, #1
 8011386:	4628      	mov	r0, r5
 8011388:	9308      	str	r3, [sp, #32]
 801138a:	f000 fe97 	bl	80120bc <__lshift>
 801138e:	4621      	mov	r1, r4
 8011390:	4683      	mov	fp, r0
 8011392:	f000 ff03 	bl	801219c <__mcmp>
 8011396:	2800      	cmp	r0, #0
 8011398:	9b08      	ldr	r3, [sp, #32]
 801139a:	dc02      	bgt.n	80113a2 <_dtoa_r+0xaba>
 801139c:	d1de      	bne.n	801135c <_dtoa_r+0xa74>
 801139e:	07da      	lsls	r2, r3, #31
 80113a0:	d5dc      	bpl.n	801135c <_dtoa_r+0xa74>
 80113a2:	2b39      	cmp	r3, #57	; 0x39
 80113a4:	d1d8      	bne.n	8011358 <_dtoa_r+0xa70>
 80113a6:	2339      	movs	r3, #57	; 0x39
 80113a8:	9a04      	ldr	r2, [sp, #16]
 80113aa:	7013      	strb	r3, [r2, #0]
 80113ac:	463b      	mov	r3, r7
 80113ae:	461f      	mov	r7, r3
 80113b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80113b4:	3b01      	subs	r3, #1
 80113b6:	2a39      	cmp	r2, #57	; 0x39
 80113b8:	d050      	beq.n	801145c <_dtoa_r+0xb74>
 80113ba:	3201      	adds	r2, #1
 80113bc:	701a      	strb	r2, [r3, #0]
 80113be:	e747      	b.n	8011250 <_dtoa_r+0x968>
 80113c0:	2a00      	cmp	r2, #0
 80113c2:	dd03      	ble.n	80113cc <_dtoa_r+0xae4>
 80113c4:	2b39      	cmp	r3, #57	; 0x39
 80113c6:	d0ee      	beq.n	80113a6 <_dtoa_r+0xabe>
 80113c8:	3301      	adds	r3, #1
 80113ca:	e7c7      	b.n	801135c <_dtoa_r+0xa74>
 80113cc:	9a08      	ldr	r2, [sp, #32]
 80113ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80113d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80113d4:	428a      	cmp	r2, r1
 80113d6:	d02a      	beq.n	801142e <_dtoa_r+0xb46>
 80113d8:	4659      	mov	r1, fp
 80113da:	2300      	movs	r3, #0
 80113dc:	220a      	movs	r2, #10
 80113de:	4628      	mov	r0, r5
 80113e0:	f000 fc76 	bl	8011cd0 <__multadd>
 80113e4:	45b0      	cmp	r8, r6
 80113e6:	4683      	mov	fp, r0
 80113e8:	f04f 0300 	mov.w	r3, #0
 80113ec:	f04f 020a 	mov.w	r2, #10
 80113f0:	4641      	mov	r1, r8
 80113f2:	4628      	mov	r0, r5
 80113f4:	d107      	bne.n	8011406 <_dtoa_r+0xb1e>
 80113f6:	f000 fc6b 	bl	8011cd0 <__multadd>
 80113fa:	4680      	mov	r8, r0
 80113fc:	4606      	mov	r6, r0
 80113fe:	9b08      	ldr	r3, [sp, #32]
 8011400:	3301      	adds	r3, #1
 8011402:	9308      	str	r3, [sp, #32]
 8011404:	e775      	b.n	80112f2 <_dtoa_r+0xa0a>
 8011406:	f000 fc63 	bl	8011cd0 <__multadd>
 801140a:	4631      	mov	r1, r6
 801140c:	4680      	mov	r8, r0
 801140e:	2300      	movs	r3, #0
 8011410:	220a      	movs	r2, #10
 8011412:	4628      	mov	r0, r5
 8011414:	f000 fc5c 	bl	8011cd0 <__multadd>
 8011418:	4606      	mov	r6, r0
 801141a:	e7f0      	b.n	80113fe <_dtoa_r+0xb16>
 801141c:	f1b9 0f00 	cmp.w	r9, #0
 8011420:	bfcc      	ite	gt
 8011422:	464f      	movgt	r7, r9
 8011424:	2701      	movle	r7, #1
 8011426:	f04f 0800 	mov.w	r8, #0
 801142a:	9a03      	ldr	r2, [sp, #12]
 801142c:	4417      	add	r7, r2
 801142e:	4659      	mov	r1, fp
 8011430:	2201      	movs	r2, #1
 8011432:	4628      	mov	r0, r5
 8011434:	9308      	str	r3, [sp, #32]
 8011436:	f000 fe41 	bl	80120bc <__lshift>
 801143a:	4621      	mov	r1, r4
 801143c:	4683      	mov	fp, r0
 801143e:	f000 fead 	bl	801219c <__mcmp>
 8011442:	2800      	cmp	r0, #0
 8011444:	dcb2      	bgt.n	80113ac <_dtoa_r+0xac4>
 8011446:	d102      	bne.n	801144e <_dtoa_r+0xb66>
 8011448:	9b08      	ldr	r3, [sp, #32]
 801144a:	07db      	lsls	r3, r3, #31
 801144c:	d4ae      	bmi.n	80113ac <_dtoa_r+0xac4>
 801144e:	463b      	mov	r3, r7
 8011450:	461f      	mov	r7, r3
 8011452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011456:	2a30      	cmp	r2, #48	; 0x30
 8011458:	d0fa      	beq.n	8011450 <_dtoa_r+0xb68>
 801145a:	e6f9      	b.n	8011250 <_dtoa_r+0x968>
 801145c:	9a03      	ldr	r2, [sp, #12]
 801145e:	429a      	cmp	r2, r3
 8011460:	d1a5      	bne.n	80113ae <_dtoa_r+0xac6>
 8011462:	2331      	movs	r3, #49	; 0x31
 8011464:	f10a 0a01 	add.w	sl, sl, #1
 8011468:	e779      	b.n	801135e <_dtoa_r+0xa76>
 801146a:	4b14      	ldr	r3, [pc, #80]	; (80114bc <_dtoa_r+0xbd4>)
 801146c:	f7ff baa8 	b.w	80109c0 <_dtoa_r+0xd8>
 8011470:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011472:	2b00      	cmp	r3, #0
 8011474:	f47f aa81 	bne.w	801097a <_dtoa_r+0x92>
 8011478:	4b11      	ldr	r3, [pc, #68]	; (80114c0 <_dtoa_r+0xbd8>)
 801147a:	f7ff baa1 	b.w	80109c0 <_dtoa_r+0xd8>
 801147e:	f1b9 0f00 	cmp.w	r9, #0
 8011482:	dc03      	bgt.n	801148c <_dtoa_r+0xba4>
 8011484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011486:	2b02      	cmp	r3, #2
 8011488:	f73f aecb 	bgt.w	8011222 <_dtoa_r+0x93a>
 801148c:	9f03      	ldr	r7, [sp, #12]
 801148e:	4621      	mov	r1, r4
 8011490:	4658      	mov	r0, fp
 8011492:	f7ff f99b 	bl	80107cc <quorem>
 8011496:	9a03      	ldr	r2, [sp, #12]
 8011498:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801149c:	f807 3b01 	strb.w	r3, [r7], #1
 80114a0:	1aba      	subs	r2, r7, r2
 80114a2:	4591      	cmp	r9, r2
 80114a4:	ddba      	ble.n	801141c <_dtoa_r+0xb34>
 80114a6:	4659      	mov	r1, fp
 80114a8:	2300      	movs	r3, #0
 80114aa:	220a      	movs	r2, #10
 80114ac:	4628      	mov	r0, r5
 80114ae:	f000 fc0f 	bl	8011cd0 <__multadd>
 80114b2:	4683      	mov	fp, r0
 80114b4:	e7eb      	b.n	801148e <_dtoa_r+0xba6>
 80114b6:	bf00      	nop
 80114b8:	08013ab8 	.word	0x08013ab8
 80114bc:	08013928 	.word	0x08013928
 80114c0:	08013a50 	.word	0x08013a50

080114c4 <fiprintf>:
 80114c4:	b40e      	push	{r1, r2, r3}
 80114c6:	b503      	push	{r0, r1, lr}
 80114c8:	4601      	mov	r1, r0
 80114ca:	ab03      	add	r3, sp, #12
 80114cc:	4805      	ldr	r0, [pc, #20]	; (80114e4 <fiprintf+0x20>)
 80114ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80114d2:	6800      	ldr	r0, [r0, #0]
 80114d4:	9301      	str	r3, [sp, #4]
 80114d6:	f001 fac5 	bl	8012a64 <_vfiprintf_r>
 80114da:	b002      	add	sp, #8
 80114dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80114e0:	b003      	add	sp, #12
 80114e2:	4770      	bx	lr
 80114e4:	20000904 	.word	0x20000904

080114e8 <rshift>:
 80114e8:	6903      	ldr	r3, [r0, #16]
 80114ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80114f2:	f100 0414 	add.w	r4, r0, #20
 80114f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80114fa:	dd46      	ble.n	801158a <rshift+0xa2>
 80114fc:	f011 011f 	ands.w	r1, r1, #31
 8011500:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011504:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011508:	d10c      	bne.n	8011524 <rshift+0x3c>
 801150a:	4629      	mov	r1, r5
 801150c:	f100 0710 	add.w	r7, r0, #16
 8011510:	42b1      	cmp	r1, r6
 8011512:	d335      	bcc.n	8011580 <rshift+0x98>
 8011514:	1a9b      	subs	r3, r3, r2
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	1eea      	subs	r2, r5, #3
 801151a:	4296      	cmp	r6, r2
 801151c:	bf38      	it	cc
 801151e:	2300      	movcc	r3, #0
 8011520:	4423      	add	r3, r4
 8011522:	e015      	b.n	8011550 <rshift+0x68>
 8011524:	46a1      	mov	r9, r4
 8011526:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801152a:	f1c1 0820 	rsb	r8, r1, #32
 801152e:	40cf      	lsrs	r7, r1
 8011530:	f105 0e04 	add.w	lr, r5, #4
 8011534:	4576      	cmp	r6, lr
 8011536:	46f4      	mov	ip, lr
 8011538:	d816      	bhi.n	8011568 <rshift+0x80>
 801153a:	1a9a      	subs	r2, r3, r2
 801153c:	0092      	lsls	r2, r2, #2
 801153e:	3a04      	subs	r2, #4
 8011540:	3501      	adds	r5, #1
 8011542:	42ae      	cmp	r6, r5
 8011544:	bf38      	it	cc
 8011546:	2200      	movcc	r2, #0
 8011548:	18a3      	adds	r3, r4, r2
 801154a:	50a7      	str	r7, [r4, r2]
 801154c:	b107      	cbz	r7, 8011550 <rshift+0x68>
 801154e:	3304      	adds	r3, #4
 8011550:	42a3      	cmp	r3, r4
 8011552:	eba3 0204 	sub.w	r2, r3, r4
 8011556:	bf08      	it	eq
 8011558:	2300      	moveq	r3, #0
 801155a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801155e:	6102      	str	r2, [r0, #16]
 8011560:	bf08      	it	eq
 8011562:	6143      	streq	r3, [r0, #20]
 8011564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011568:	f8dc c000 	ldr.w	ip, [ip]
 801156c:	fa0c fc08 	lsl.w	ip, ip, r8
 8011570:	ea4c 0707 	orr.w	r7, ip, r7
 8011574:	f849 7b04 	str.w	r7, [r9], #4
 8011578:	f85e 7b04 	ldr.w	r7, [lr], #4
 801157c:	40cf      	lsrs	r7, r1
 801157e:	e7d9      	b.n	8011534 <rshift+0x4c>
 8011580:	f851 cb04 	ldr.w	ip, [r1], #4
 8011584:	f847 cf04 	str.w	ip, [r7, #4]!
 8011588:	e7c2      	b.n	8011510 <rshift+0x28>
 801158a:	4623      	mov	r3, r4
 801158c:	e7e0      	b.n	8011550 <rshift+0x68>

0801158e <__hexdig_fun>:
 801158e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011592:	2b09      	cmp	r3, #9
 8011594:	d802      	bhi.n	801159c <__hexdig_fun+0xe>
 8011596:	3820      	subs	r0, #32
 8011598:	b2c0      	uxtb	r0, r0
 801159a:	4770      	bx	lr
 801159c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80115a0:	2b05      	cmp	r3, #5
 80115a2:	d801      	bhi.n	80115a8 <__hexdig_fun+0x1a>
 80115a4:	3847      	subs	r0, #71	; 0x47
 80115a6:	e7f7      	b.n	8011598 <__hexdig_fun+0xa>
 80115a8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80115ac:	2b05      	cmp	r3, #5
 80115ae:	d801      	bhi.n	80115b4 <__hexdig_fun+0x26>
 80115b0:	3827      	subs	r0, #39	; 0x27
 80115b2:	e7f1      	b.n	8011598 <__hexdig_fun+0xa>
 80115b4:	2000      	movs	r0, #0
 80115b6:	4770      	bx	lr

080115b8 <__gethex>:
 80115b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115bc:	b08b      	sub	sp, #44	; 0x2c
 80115be:	9305      	str	r3, [sp, #20]
 80115c0:	4bb2      	ldr	r3, [pc, #712]	; (801188c <__gethex+0x2d4>)
 80115c2:	9002      	str	r0, [sp, #8]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	468b      	mov	fp, r1
 80115c8:	4618      	mov	r0, r3
 80115ca:	4690      	mov	r8, r2
 80115cc:	9303      	str	r3, [sp, #12]
 80115ce:	f7ee fde1 	bl	8000194 <strlen>
 80115d2:	4682      	mov	sl, r0
 80115d4:	9b03      	ldr	r3, [sp, #12]
 80115d6:	f8db 2000 	ldr.w	r2, [fp]
 80115da:	4403      	add	r3, r0
 80115dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80115e0:	9306      	str	r3, [sp, #24]
 80115e2:	1c93      	adds	r3, r2, #2
 80115e4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80115e8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80115ec:	32fe      	adds	r2, #254	; 0xfe
 80115ee:	18d1      	adds	r1, r2, r3
 80115f0:	461f      	mov	r7, r3
 80115f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80115f6:	9101      	str	r1, [sp, #4]
 80115f8:	2830      	cmp	r0, #48	; 0x30
 80115fa:	d0f8      	beq.n	80115ee <__gethex+0x36>
 80115fc:	f7ff ffc7 	bl	801158e <__hexdig_fun>
 8011600:	4604      	mov	r4, r0
 8011602:	2800      	cmp	r0, #0
 8011604:	d13a      	bne.n	801167c <__gethex+0xc4>
 8011606:	4652      	mov	r2, sl
 8011608:	4638      	mov	r0, r7
 801160a:	9903      	ldr	r1, [sp, #12]
 801160c:	f001 fb70 	bl	8012cf0 <strncmp>
 8011610:	4605      	mov	r5, r0
 8011612:	2800      	cmp	r0, #0
 8011614:	d166      	bne.n	80116e4 <__gethex+0x12c>
 8011616:	f817 000a 	ldrb.w	r0, [r7, sl]
 801161a:	eb07 060a 	add.w	r6, r7, sl
 801161e:	f7ff ffb6 	bl	801158e <__hexdig_fun>
 8011622:	2800      	cmp	r0, #0
 8011624:	d060      	beq.n	80116e8 <__gethex+0x130>
 8011626:	4633      	mov	r3, r6
 8011628:	7818      	ldrb	r0, [r3, #0]
 801162a:	461f      	mov	r7, r3
 801162c:	2830      	cmp	r0, #48	; 0x30
 801162e:	f103 0301 	add.w	r3, r3, #1
 8011632:	d0f9      	beq.n	8011628 <__gethex+0x70>
 8011634:	f7ff ffab 	bl	801158e <__hexdig_fun>
 8011638:	2301      	movs	r3, #1
 801163a:	fab0 f480 	clz	r4, r0
 801163e:	4635      	mov	r5, r6
 8011640:	0964      	lsrs	r4, r4, #5
 8011642:	9301      	str	r3, [sp, #4]
 8011644:	463a      	mov	r2, r7
 8011646:	4616      	mov	r6, r2
 8011648:	7830      	ldrb	r0, [r6, #0]
 801164a:	3201      	adds	r2, #1
 801164c:	f7ff ff9f 	bl	801158e <__hexdig_fun>
 8011650:	2800      	cmp	r0, #0
 8011652:	d1f8      	bne.n	8011646 <__gethex+0x8e>
 8011654:	4652      	mov	r2, sl
 8011656:	4630      	mov	r0, r6
 8011658:	9903      	ldr	r1, [sp, #12]
 801165a:	f001 fb49 	bl	8012cf0 <strncmp>
 801165e:	b980      	cbnz	r0, 8011682 <__gethex+0xca>
 8011660:	b94d      	cbnz	r5, 8011676 <__gethex+0xbe>
 8011662:	eb06 050a 	add.w	r5, r6, sl
 8011666:	462a      	mov	r2, r5
 8011668:	4616      	mov	r6, r2
 801166a:	7830      	ldrb	r0, [r6, #0]
 801166c:	3201      	adds	r2, #1
 801166e:	f7ff ff8e 	bl	801158e <__hexdig_fun>
 8011672:	2800      	cmp	r0, #0
 8011674:	d1f8      	bne.n	8011668 <__gethex+0xb0>
 8011676:	1bad      	subs	r5, r5, r6
 8011678:	00ad      	lsls	r5, r5, #2
 801167a:	e004      	b.n	8011686 <__gethex+0xce>
 801167c:	2400      	movs	r4, #0
 801167e:	4625      	mov	r5, r4
 8011680:	e7e0      	b.n	8011644 <__gethex+0x8c>
 8011682:	2d00      	cmp	r5, #0
 8011684:	d1f7      	bne.n	8011676 <__gethex+0xbe>
 8011686:	7833      	ldrb	r3, [r6, #0]
 8011688:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801168c:	2b50      	cmp	r3, #80	; 0x50
 801168e:	d139      	bne.n	8011704 <__gethex+0x14c>
 8011690:	7873      	ldrb	r3, [r6, #1]
 8011692:	2b2b      	cmp	r3, #43	; 0x2b
 8011694:	d02a      	beq.n	80116ec <__gethex+0x134>
 8011696:	2b2d      	cmp	r3, #45	; 0x2d
 8011698:	d02c      	beq.n	80116f4 <__gethex+0x13c>
 801169a:	f04f 0900 	mov.w	r9, #0
 801169e:	1c71      	adds	r1, r6, #1
 80116a0:	7808      	ldrb	r0, [r1, #0]
 80116a2:	f7ff ff74 	bl	801158e <__hexdig_fun>
 80116a6:	1e43      	subs	r3, r0, #1
 80116a8:	b2db      	uxtb	r3, r3
 80116aa:	2b18      	cmp	r3, #24
 80116ac:	d82a      	bhi.n	8011704 <__gethex+0x14c>
 80116ae:	f1a0 0210 	sub.w	r2, r0, #16
 80116b2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80116b6:	f7ff ff6a 	bl	801158e <__hexdig_fun>
 80116ba:	1e43      	subs	r3, r0, #1
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	2b18      	cmp	r3, #24
 80116c0:	d91b      	bls.n	80116fa <__gethex+0x142>
 80116c2:	f1b9 0f00 	cmp.w	r9, #0
 80116c6:	d000      	beq.n	80116ca <__gethex+0x112>
 80116c8:	4252      	negs	r2, r2
 80116ca:	4415      	add	r5, r2
 80116cc:	f8cb 1000 	str.w	r1, [fp]
 80116d0:	b1d4      	cbz	r4, 8011708 <__gethex+0x150>
 80116d2:	9b01      	ldr	r3, [sp, #4]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	bf14      	ite	ne
 80116d8:	2700      	movne	r7, #0
 80116da:	2706      	moveq	r7, #6
 80116dc:	4638      	mov	r0, r7
 80116de:	b00b      	add	sp, #44	; 0x2c
 80116e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e4:	463e      	mov	r6, r7
 80116e6:	4625      	mov	r5, r4
 80116e8:	2401      	movs	r4, #1
 80116ea:	e7cc      	b.n	8011686 <__gethex+0xce>
 80116ec:	f04f 0900 	mov.w	r9, #0
 80116f0:	1cb1      	adds	r1, r6, #2
 80116f2:	e7d5      	b.n	80116a0 <__gethex+0xe8>
 80116f4:	f04f 0901 	mov.w	r9, #1
 80116f8:	e7fa      	b.n	80116f0 <__gethex+0x138>
 80116fa:	230a      	movs	r3, #10
 80116fc:	fb03 0202 	mla	r2, r3, r2, r0
 8011700:	3a10      	subs	r2, #16
 8011702:	e7d6      	b.n	80116b2 <__gethex+0xfa>
 8011704:	4631      	mov	r1, r6
 8011706:	e7e1      	b.n	80116cc <__gethex+0x114>
 8011708:	4621      	mov	r1, r4
 801170a:	1bf3      	subs	r3, r6, r7
 801170c:	3b01      	subs	r3, #1
 801170e:	2b07      	cmp	r3, #7
 8011710:	dc0a      	bgt.n	8011728 <__gethex+0x170>
 8011712:	9802      	ldr	r0, [sp, #8]
 8011714:	f000 fa7a 	bl	8011c0c <_Balloc>
 8011718:	4604      	mov	r4, r0
 801171a:	b940      	cbnz	r0, 801172e <__gethex+0x176>
 801171c:	4602      	mov	r2, r0
 801171e:	21de      	movs	r1, #222	; 0xde
 8011720:	4b5b      	ldr	r3, [pc, #364]	; (8011890 <__gethex+0x2d8>)
 8011722:	485c      	ldr	r0, [pc, #368]	; (8011894 <__gethex+0x2dc>)
 8011724:	f7ff f834 	bl	8010790 <__assert_func>
 8011728:	3101      	adds	r1, #1
 801172a:	105b      	asrs	r3, r3, #1
 801172c:	e7ef      	b.n	801170e <__gethex+0x156>
 801172e:	f04f 0b00 	mov.w	fp, #0
 8011732:	f100 0914 	add.w	r9, r0, #20
 8011736:	f1ca 0301 	rsb	r3, sl, #1
 801173a:	f8cd 9010 	str.w	r9, [sp, #16]
 801173e:	f8cd b004 	str.w	fp, [sp, #4]
 8011742:	9308      	str	r3, [sp, #32]
 8011744:	42b7      	cmp	r7, r6
 8011746:	d33f      	bcc.n	80117c8 <__gethex+0x210>
 8011748:	9f04      	ldr	r7, [sp, #16]
 801174a:	9b01      	ldr	r3, [sp, #4]
 801174c:	f847 3b04 	str.w	r3, [r7], #4
 8011750:	eba7 0709 	sub.w	r7, r7, r9
 8011754:	10bf      	asrs	r7, r7, #2
 8011756:	6127      	str	r7, [r4, #16]
 8011758:	4618      	mov	r0, r3
 801175a:	f000 fb49 	bl	8011df0 <__hi0bits>
 801175e:	017f      	lsls	r7, r7, #5
 8011760:	f8d8 6000 	ldr.w	r6, [r8]
 8011764:	1a3f      	subs	r7, r7, r0
 8011766:	42b7      	cmp	r7, r6
 8011768:	dd62      	ble.n	8011830 <__gethex+0x278>
 801176a:	1bbf      	subs	r7, r7, r6
 801176c:	4639      	mov	r1, r7
 801176e:	4620      	mov	r0, r4
 8011770:	f000 fee3 	bl	801253a <__any_on>
 8011774:	4682      	mov	sl, r0
 8011776:	b1a8      	cbz	r0, 80117a4 <__gethex+0x1ec>
 8011778:	f04f 0a01 	mov.w	sl, #1
 801177c:	1e7b      	subs	r3, r7, #1
 801177e:	1159      	asrs	r1, r3, #5
 8011780:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011784:	f003 021f 	and.w	r2, r3, #31
 8011788:	fa0a f202 	lsl.w	r2, sl, r2
 801178c:	420a      	tst	r2, r1
 801178e:	d009      	beq.n	80117a4 <__gethex+0x1ec>
 8011790:	4553      	cmp	r3, sl
 8011792:	dd05      	ble.n	80117a0 <__gethex+0x1e8>
 8011794:	4620      	mov	r0, r4
 8011796:	1eb9      	subs	r1, r7, #2
 8011798:	f000 fecf 	bl	801253a <__any_on>
 801179c:	2800      	cmp	r0, #0
 801179e:	d144      	bne.n	801182a <__gethex+0x272>
 80117a0:	f04f 0a02 	mov.w	sl, #2
 80117a4:	4639      	mov	r1, r7
 80117a6:	4620      	mov	r0, r4
 80117a8:	f7ff fe9e 	bl	80114e8 <rshift>
 80117ac:	443d      	add	r5, r7
 80117ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80117b2:	42ab      	cmp	r3, r5
 80117b4:	da4a      	bge.n	801184c <__gethex+0x294>
 80117b6:	4621      	mov	r1, r4
 80117b8:	9802      	ldr	r0, [sp, #8]
 80117ba:	f000 fa67 	bl	8011c8c <_Bfree>
 80117be:	2300      	movs	r3, #0
 80117c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80117c2:	27a3      	movs	r7, #163	; 0xa3
 80117c4:	6013      	str	r3, [r2, #0]
 80117c6:	e789      	b.n	80116dc <__gethex+0x124>
 80117c8:	1e73      	subs	r3, r6, #1
 80117ca:	9a06      	ldr	r2, [sp, #24]
 80117cc:	9307      	str	r3, [sp, #28]
 80117ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80117d2:	4293      	cmp	r3, r2
 80117d4:	d019      	beq.n	801180a <__gethex+0x252>
 80117d6:	f1bb 0f20 	cmp.w	fp, #32
 80117da:	d107      	bne.n	80117ec <__gethex+0x234>
 80117dc:	9b04      	ldr	r3, [sp, #16]
 80117de:	9a01      	ldr	r2, [sp, #4]
 80117e0:	f843 2b04 	str.w	r2, [r3], #4
 80117e4:	9304      	str	r3, [sp, #16]
 80117e6:	2300      	movs	r3, #0
 80117e8:	469b      	mov	fp, r3
 80117ea:	9301      	str	r3, [sp, #4]
 80117ec:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80117f0:	f7ff fecd 	bl	801158e <__hexdig_fun>
 80117f4:	9b01      	ldr	r3, [sp, #4]
 80117f6:	f000 000f 	and.w	r0, r0, #15
 80117fa:	fa00 f00b 	lsl.w	r0, r0, fp
 80117fe:	4303      	orrs	r3, r0
 8011800:	9301      	str	r3, [sp, #4]
 8011802:	f10b 0b04 	add.w	fp, fp, #4
 8011806:	9b07      	ldr	r3, [sp, #28]
 8011808:	e00d      	b.n	8011826 <__gethex+0x26e>
 801180a:	9a08      	ldr	r2, [sp, #32]
 801180c:	1e73      	subs	r3, r6, #1
 801180e:	4413      	add	r3, r2
 8011810:	42bb      	cmp	r3, r7
 8011812:	d3e0      	bcc.n	80117d6 <__gethex+0x21e>
 8011814:	4618      	mov	r0, r3
 8011816:	4652      	mov	r2, sl
 8011818:	9903      	ldr	r1, [sp, #12]
 801181a:	9309      	str	r3, [sp, #36]	; 0x24
 801181c:	f001 fa68 	bl	8012cf0 <strncmp>
 8011820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011822:	2800      	cmp	r0, #0
 8011824:	d1d7      	bne.n	80117d6 <__gethex+0x21e>
 8011826:	461e      	mov	r6, r3
 8011828:	e78c      	b.n	8011744 <__gethex+0x18c>
 801182a:	f04f 0a03 	mov.w	sl, #3
 801182e:	e7b9      	b.n	80117a4 <__gethex+0x1ec>
 8011830:	da09      	bge.n	8011846 <__gethex+0x28e>
 8011832:	1bf7      	subs	r7, r6, r7
 8011834:	4621      	mov	r1, r4
 8011836:	463a      	mov	r2, r7
 8011838:	9802      	ldr	r0, [sp, #8]
 801183a:	f000 fc3f 	bl	80120bc <__lshift>
 801183e:	4604      	mov	r4, r0
 8011840:	1bed      	subs	r5, r5, r7
 8011842:	f100 0914 	add.w	r9, r0, #20
 8011846:	f04f 0a00 	mov.w	sl, #0
 801184a:	e7b0      	b.n	80117ae <__gethex+0x1f6>
 801184c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011850:	42a8      	cmp	r0, r5
 8011852:	dd72      	ble.n	801193a <__gethex+0x382>
 8011854:	1b45      	subs	r5, r0, r5
 8011856:	42ae      	cmp	r6, r5
 8011858:	dc35      	bgt.n	80118c6 <__gethex+0x30e>
 801185a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801185e:	2b02      	cmp	r3, #2
 8011860:	d029      	beq.n	80118b6 <__gethex+0x2fe>
 8011862:	2b03      	cmp	r3, #3
 8011864:	d02b      	beq.n	80118be <__gethex+0x306>
 8011866:	2b01      	cmp	r3, #1
 8011868:	d11c      	bne.n	80118a4 <__gethex+0x2ec>
 801186a:	42ae      	cmp	r6, r5
 801186c:	d11a      	bne.n	80118a4 <__gethex+0x2ec>
 801186e:	2e01      	cmp	r6, #1
 8011870:	d112      	bne.n	8011898 <__gethex+0x2e0>
 8011872:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011876:	9a05      	ldr	r2, [sp, #20]
 8011878:	2762      	movs	r7, #98	; 0x62
 801187a:	6013      	str	r3, [r2, #0]
 801187c:	2301      	movs	r3, #1
 801187e:	6123      	str	r3, [r4, #16]
 8011880:	f8c9 3000 	str.w	r3, [r9]
 8011884:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011886:	601c      	str	r4, [r3, #0]
 8011888:	e728      	b.n	80116dc <__gethex+0x124>
 801188a:	bf00      	nop
 801188c:	08013b30 	.word	0x08013b30
 8011890:	08013ab8 	.word	0x08013ab8
 8011894:	08013ac9 	.word	0x08013ac9
 8011898:	4620      	mov	r0, r4
 801189a:	1e71      	subs	r1, r6, #1
 801189c:	f000 fe4d 	bl	801253a <__any_on>
 80118a0:	2800      	cmp	r0, #0
 80118a2:	d1e6      	bne.n	8011872 <__gethex+0x2ba>
 80118a4:	4621      	mov	r1, r4
 80118a6:	9802      	ldr	r0, [sp, #8]
 80118a8:	f000 f9f0 	bl	8011c8c <_Bfree>
 80118ac:	2300      	movs	r3, #0
 80118ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80118b0:	2750      	movs	r7, #80	; 0x50
 80118b2:	6013      	str	r3, [r2, #0]
 80118b4:	e712      	b.n	80116dc <__gethex+0x124>
 80118b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d1f3      	bne.n	80118a4 <__gethex+0x2ec>
 80118bc:	e7d9      	b.n	8011872 <__gethex+0x2ba>
 80118be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d1d6      	bne.n	8011872 <__gethex+0x2ba>
 80118c4:	e7ee      	b.n	80118a4 <__gethex+0x2ec>
 80118c6:	1e6f      	subs	r7, r5, #1
 80118c8:	f1ba 0f00 	cmp.w	sl, #0
 80118cc:	d132      	bne.n	8011934 <__gethex+0x37c>
 80118ce:	b127      	cbz	r7, 80118da <__gethex+0x322>
 80118d0:	4639      	mov	r1, r7
 80118d2:	4620      	mov	r0, r4
 80118d4:	f000 fe31 	bl	801253a <__any_on>
 80118d8:	4682      	mov	sl, r0
 80118da:	2101      	movs	r1, #1
 80118dc:	117b      	asrs	r3, r7, #5
 80118de:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80118e2:	f007 071f 	and.w	r7, r7, #31
 80118e6:	fa01 f707 	lsl.w	r7, r1, r7
 80118ea:	421f      	tst	r7, r3
 80118ec:	f04f 0702 	mov.w	r7, #2
 80118f0:	4629      	mov	r1, r5
 80118f2:	4620      	mov	r0, r4
 80118f4:	bf18      	it	ne
 80118f6:	f04a 0a02 	orrne.w	sl, sl, #2
 80118fa:	1b76      	subs	r6, r6, r5
 80118fc:	f7ff fdf4 	bl	80114e8 <rshift>
 8011900:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011904:	f1ba 0f00 	cmp.w	sl, #0
 8011908:	d048      	beq.n	801199c <__gethex+0x3e4>
 801190a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801190e:	2b02      	cmp	r3, #2
 8011910:	d015      	beq.n	801193e <__gethex+0x386>
 8011912:	2b03      	cmp	r3, #3
 8011914:	d017      	beq.n	8011946 <__gethex+0x38e>
 8011916:	2b01      	cmp	r3, #1
 8011918:	d109      	bne.n	801192e <__gethex+0x376>
 801191a:	f01a 0f02 	tst.w	sl, #2
 801191e:	d006      	beq.n	801192e <__gethex+0x376>
 8011920:	f8d9 0000 	ldr.w	r0, [r9]
 8011924:	ea4a 0a00 	orr.w	sl, sl, r0
 8011928:	f01a 0f01 	tst.w	sl, #1
 801192c:	d10e      	bne.n	801194c <__gethex+0x394>
 801192e:	f047 0710 	orr.w	r7, r7, #16
 8011932:	e033      	b.n	801199c <__gethex+0x3e4>
 8011934:	f04f 0a01 	mov.w	sl, #1
 8011938:	e7cf      	b.n	80118da <__gethex+0x322>
 801193a:	2701      	movs	r7, #1
 801193c:	e7e2      	b.n	8011904 <__gethex+0x34c>
 801193e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011940:	f1c3 0301 	rsb	r3, r3, #1
 8011944:	9315      	str	r3, [sp, #84]	; 0x54
 8011946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011948:	2b00      	cmp	r3, #0
 801194a:	d0f0      	beq.n	801192e <__gethex+0x376>
 801194c:	f04f 0c00 	mov.w	ip, #0
 8011950:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011954:	f104 0314 	add.w	r3, r4, #20
 8011958:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801195c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011960:	4618      	mov	r0, r3
 8011962:	f853 2b04 	ldr.w	r2, [r3], #4
 8011966:	f1b2 3fff 	cmp.w	r2, #4294967295
 801196a:	d01c      	beq.n	80119a6 <__gethex+0x3ee>
 801196c:	3201      	adds	r2, #1
 801196e:	6002      	str	r2, [r0, #0]
 8011970:	2f02      	cmp	r7, #2
 8011972:	f104 0314 	add.w	r3, r4, #20
 8011976:	d13d      	bne.n	80119f4 <__gethex+0x43c>
 8011978:	f8d8 2000 	ldr.w	r2, [r8]
 801197c:	3a01      	subs	r2, #1
 801197e:	42b2      	cmp	r2, r6
 8011980:	d10a      	bne.n	8011998 <__gethex+0x3e0>
 8011982:	2201      	movs	r2, #1
 8011984:	1171      	asrs	r1, r6, #5
 8011986:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801198a:	f006 061f 	and.w	r6, r6, #31
 801198e:	fa02 f606 	lsl.w	r6, r2, r6
 8011992:	421e      	tst	r6, r3
 8011994:	bf18      	it	ne
 8011996:	4617      	movne	r7, r2
 8011998:	f047 0720 	orr.w	r7, r7, #32
 801199c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801199e:	601c      	str	r4, [r3, #0]
 80119a0:	9b05      	ldr	r3, [sp, #20]
 80119a2:	601d      	str	r5, [r3, #0]
 80119a4:	e69a      	b.n	80116dc <__gethex+0x124>
 80119a6:	4299      	cmp	r1, r3
 80119a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80119ac:	d8d8      	bhi.n	8011960 <__gethex+0x3a8>
 80119ae:	68a3      	ldr	r3, [r4, #8]
 80119b0:	459b      	cmp	fp, r3
 80119b2:	db17      	blt.n	80119e4 <__gethex+0x42c>
 80119b4:	6861      	ldr	r1, [r4, #4]
 80119b6:	9802      	ldr	r0, [sp, #8]
 80119b8:	3101      	adds	r1, #1
 80119ba:	f000 f927 	bl	8011c0c <_Balloc>
 80119be:	4681      	mov	r9, r0
 80119c0:	b918      	cbnz	r0, 80119ca <__gethex+0x412>
 80119c2:	4602      	mov	r2, r0
 80119c4:	2184      	movs	r1, #132	; 0x84
 80119c6:	4b19      	ldr	r3, [pc, #100]	; (8011a2c <__gethex+0x474>)
 80119c8:	e6ab      	b.n	8011722 <__gethex+0x16a>
 80119ca:	6922      	ldr	r2, [r4, #16]
 80119cc:	f104 010c 	add.w	r1, r4, #12
 80119d0:	3202      	adds	r2, #2
 80119d2:	0092      	lsls	r2, r2, #2
 80119d4:	300c      	adds	r0, #12
 80119d6:	f7fd fbc9 	bl	800f16c <memcpy>
 80119da:	4621      	mov	r1, r4
 80119dc:	9802      	ldr	r0, [sp, #8]
 80119de:	f000 f955 	bl	8011c8c <_Bfree>
 80119e2:	464c      	mov	r4, r9
 80119e4:	6923      	ldr	r3, [r4, #16]
 80119e6:	1c5a      	adds	r2, r3, #1
 80119e8:	6122      	str	r2, [r4, #16]
 80119ea:	2201      	movs	r2, #1
 80119ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80119f0:	615a      	str	r2, [r3, #20]
 80119f2:	e7bd      	b.n	8011970 <__gethex+0x3b8>
 80119f4:	6922      	ldr	r2, [r4, #16]
 80119f6:	455a      	cmp	r2, fp
 80119f8:	dd0b      	ble.n	8011a12 <__gethex+0x45a>
 80119fa:	2101      	movs	r1, #1
 80119fc:	4620      	mov	r0, r4
 80119fe:	f7ff fd73 	bl	80114e8 <rshift>
 8011a02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a06:	3501      	adds	r5, #1
 8011a08:	42ab      	cmp	r3, r5
 8011a0a:	f6ff aed4 	blt.w	80117b6 <__gethex+0x1fe>
 8011a0e:	2701      	movs	r7, #1
 8011a10:	e7c2      	b.n	8011998 <__gethex+0x3e0>
 8011a12:	f016 061f 	ands.w	r6, r6, #31
 8011a16:	d0fa      	beq.n	8011a0e <__gethex+0x456>
 8011a18:	4453      	add	r3, sl
 8011a1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011a1e:	f000 f9e7 	bl	8011df0 <__hi0bits>
 8011a22:	f1c6 0620 	rsb	r6, r6, #32
 8011a26:	42b0      	cmp	r0, r6
 8011a28:	dbe7      	blt.n	80119fa <__gethex+0x442>
 8011a2a:	e7f0      	b.n	8011a0e <__gethex+0x456>
 8011a2c:	08013ab8 	.word	0x08013ab8

08011a30 <L_shift>:
 8011a30:	f1c2 0208 	rsb	r2, r2, #8
 8011a34:	0092      	lsls	r2, r2, #2
 8011a36:	b570      	push	{r4, r5, r6, lr}
 8011a38:	f1c2 0620 	rsb	r6, r2, #32
 8011a3c:	6843      	ldr	r3, [r0, #4]
 8011a3e:	6804      	ldr	r4, [r0, #0]
 8011a40:	fa03 f506 	lsl.w	r5, r3, r6
 8011a44:	432c      	orrs	r4, r5
 8011a46:	40d3      	lsrs	r3, r2
 8011a48:	6004      	str	r4, [r0, #0]
 8011a4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8011a4e:	4288      	cmp	r0, r1
 8011a50:	d3f4      	bcc.n	8011a3c <L_shift+0xc>
 8011a52:	bd70      	pop	{r4, r5, r6, pc}

08011a54 <__match>:
 8011a54:	b530      	push	{r4, r5, lr}
 8011a56:	6803      	ldr	r3, [r0, #0]
 8011a58:	3301      	adds	r3, #1
 8011a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a5e:	b914      	cbnz	r4, 8011a66 <__match+0x12>
 8011a60:	6003      	str	r3, [r0, #0]
 8011a62:	2001      	movs	r0, #1
 8011a64:	bd30      	pop	{r4, r5, pc}
 8011a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011a6e:	2d19      	cmp	r5, #25
 8011a70:	bf98      	it	ls
 8011a72:	3220      	addls	r2, #32
 8011a74:	42a2      	cmp	r2, r4
 8011a76:	d0f0      	beq.n	8011a5a <__match+0x6>
 8011a78:	2000      	movs	r0, #0
 8011a7a:	e7f3      	b.n	8011a64 <__match+0x10>

08011a7c <__hexnan>:
 8011a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a80:	2500      	movs	r5, #0
 8011a82:	680b      	ldr	r3, [r1, #0]
 8011a84:	4682      	mov	sl, r0
 8011a86:	115e      	asrs	r6, r3, #5
 8011a88:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011a8c:	f013 031f 	ands.w	r3, r3, #31
 8011a90:	bf18      	it	ne
 8011a92:	3604      	addne	r6, #4
 8011a94:	1f37      	subs	r7, r6, #4
 8011a96:	46b9      	mov	r9, r7
 8011a98:	463c      	mov	r4, r7
 8011a9a:	46ab      	mov	fp, r5
 8011a9c:	b087      	sub	sp, #28
 8011a9e:	4690      	mov	r8, r2
 8011aa0:	6802      	ldr	r2, [r0, #0]
 8011aa2:	9301      	str	r3, [sp, #4]
 8011aa4:	f846 5c04 	str.w	r5, [r6, #-4]
 8011aa8:	9502      	str	r5, [sp, #8]
 8011aaa:	7851      	ldrb	r1, [r2, #1]
 8011aac:	1c53      	adds	r3, r2, #1
 8011aae:	9303      	str	r3, [sp, #12]
 8011ab0:	b341      	cbz	r1, 8011b04 <__hexnan+0x88>
 8011ab2:	4608      	mov	r0, r1
 8011ab4:	9205      	str	r2, [sp, #20]
 8011ab6:	9104      	str	r1, [sp, #16]
 8011ab8:	f7ff fd69 	bl	801158e <__hexdig_fun>
 8011abc:	2800      	cmp	r0, #0
 8011abe:	d14f      	bne.n	8011b60 <__hexnan+0xe4>
 8011ac0:	9904      	ldr	r1, [sp, #16]
 8011ac2:	9a05      	ldr	r2, [sp, #20]
 8011ac4:	2920      	cmp	r1, #32
 8011ac6:	d818      	bhi.n	8011afa <__hexnan+0x7e>
 8011ac8:	9b02      	ldr	r3, [sp, #8]
 8011aca:	459b      	cmp	fp, r3
 8011acc:	dd13      	ble.n	8011af6 <__hexnan+0x7a>
 8011ace:	454c      	cmp	r4, r9
 8011ad0:	d206      	bcs.n	8011ae0 <__hexnan+0x64>
 8011ad2:	2d07      	cmp	r5, #7
 8011ad4:	dc04      	bgt.n	8011ae0 <__hexnan+0x64>
 8011ad6:	462a      	mov	r2, r5
 8011ad8:	4649      	mov	r1, r9
 8011ada:	4620      	mov	r0, r4
 8011adc:	f7ff ffa8 	bl	8011a30 <L_shift>
 8011ae0:	4544      	cmp	r4, r8
 8011ae2:	d950      	bls.n	8011b86 <__hexnan+0x10a>
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	f1a4 0904 	sub.w	r9, r4, #4
 8011aea:	f844 3c04 	str.w	r3, [r4, #-4]
 8011aee:	461d      	mov	r5, r3
 8011af0:	464c      	mov	r4, r9
 8011af2:	f8cd b008 	str.w	fp, [sp, #8]
 8011af6:	9a03      	ldr	r2, [sp, #12]
 8011af8:	e7d7      	b.n	8011aaa <__hexnan+0x2e>
 8011afa:	2929      	cmp	r1, #41	; 0x29
 8011afc:	d156      	bne.n	8011bac <__hexnan+0x130>
 8011afe:	3202      	adds	r2, #2
 8011b00:	f8ca 2000 	str.w	r2, [sl]
 8011b04:	f1bb 0f00 	cmp.w	fp, #0
 8011b08:	d050      	beq.n	8011bac <__hexnan+0x130>
 8011b0a:	454c      	cmp	r4, r9
 8011b0c:	d206      	bcs.n	8011b1c <__hexnan+0xa0>
 8011b0e:	2d07      	cmp	r5, #7
 8011b10:	dc04      	bgt.n	8011b1c <__hexnan+0xa0>
 8011b12:	462a      	mov	r2, r5
 8011b14:	4649      	mov	r1, r9
 8011b16:	4620      	mov	r0, r4
 8011b18:	f7ff ff8a 	bl	8011a30 <L_shift>
 8011b1c:	4544      	cmp	r4, r8
 8011b1e:	d934      	bls.n	8011b8a <__hexnan+0x10e>
 8011b20:	4623      	mov	r3, r4
 8011b22:	f1a8 0204 	sub.w	r2, r8, #4
 8011b26:	f853 1b04 	ldr.w	r1, [r3], #4
 8011b2a:	429f      	cmp	r7, r3
 8011b2c:	f842 1f04 	str.w	r1, [r2, #4]!
 8011b30:	d2f9      	bcs.n	8011b26 <__hexnan+0xaa>
 8011b32:	1b3b      	subs	r3, r7, r4
 8011b34:	f023 0303 	bic.w	r3, r3, #3
 8011b38:	3304      	adds	r3, #4
 8011b3a:	3401      	adds	r4, #1
 8011b3c:	3e03      	subs	r6, #3
 8011b3e:	42b4      	cmp	r4, r6
 8011b40:	bf88      	it	hi
 8011b42:	2304      	movhi	r3, #4
 8011b44:	2200      	movs	r2, #0
 8011b46:	4443      	add	r3, r8
 8011b48:	f843 2b04 	str.w	r2, [r3], #4
 8011b4c:	429f      	cmp	r7, r3
 8011b4e:	d2fb      	bcs.n	8011b48 <__hexnan+0xcc>
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	b91b      	cbnz	r3, 8011b5c <__hexnan+0xe0>
 8011b54:	4547      	cmp	r7, r8
 8011b56:	d127      	bne.n	8011ba8 <__hexnan+0x12c>
 8011b58:	2301      	movs	r3, #1
 8011b5a:	603b      	str	r3, [r7, #0]
 8011b5c:	2005      	movs	r0, #5
 8011b5e:	e026      	b.n	8011bae <__hexnan+0x132>
 8011b60:	3501      	adds	r5, #1
 8011b62:	2d08      	cmp	r5, #8
 8011b64:	f10b 0b01 	add.w	fp, fp, #1
 8011b68:	dd06      	ble.n	8011b78 <__hexnan+0xfc>
 8011b6a:	4544      	cmp	r4, r8
 8011b6c:	d9c3      	bls.n	8011af6 <__hexnan+0x7a>
 8011b6e:	2300      	movs	r3, #0
 8011b70:	2501      	movs	r5, #1
 8011b72:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b76:	3c04      	subs	r4, #4
 8011b78:	6822      	ldr	r2, [r4, #0]
 8011b7a:	f000 000f 	and.w	r0, r0, #15
 8011b7e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011b82:	6022      	str	r2, [r4, #0]
 8011b84:	e7b7      	b.n	8011af6 <__hexnan+0x7a>
 8011b86:	2508      	movs	r5, #8
 8011b88:	e7b5      	b.n	8011af6 <__hexnan+0x7a>
 8011b8a:	9b01      	ldr	r3, [sp, #4]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d0df      	beq.n	8011b50 <__hexnan+0xd4>
 8011b90:	f04f 32ff 	mov.w	r2, #4294967295
 8011b94:	f1c3 0320 	rsb	r3, r3, #32
 8011b98:	fa22 f303 	lsr.w	r3, r2, r3
 8011b9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011ba0:	401a      	ands	r2, r3
 8011ba2:	f846 2c04 	str.w	r2, [r6, #-4]
 8011ba6:	e7d3      	b.n	8011b50 <__hexnan+0xd4>
 8011ba8:	3f04      	subs	r7, #4
 8011baa:	e7d1      	b.n	8011b50 <__hexnan+0xd4>
 8011bac:	2004      	movs	r0, #4
 8011bae:	b007      	add	sp, #28
 8011bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011bb4 <_localeconv_r>:
 8011bb4:	4800      	ldr	r0, [pc, #0]	; (8011bb8 <_localeconv_r+0x4>)
 8011bb6:	4770      	bx	lr
 8011bb8:	20000a5c 	.word	0x20000a5c

08011bbc <malloc>:
 8011bbc:	4b02      	ldr	r3, [pc, #8]	; (8011bc8 <malloc+0xc>)
 8011bbe:	4601      	mov	r1, r0
 8011bc0:	6818      	ldr	r0, [r3, #0]
 8011bc2:	f000 bd57 	b.w	8012674 <_malloc_r>
 8011bc6:	bf00      	nop
 8011bc8:	20000904 	.word	0x20000904

08011bcc <__ascii_mbtowc>:
 8011bcc:	b082      	sub	sp, #8
 8011bce:	b901      	cbnz	r1, 8011bd2 <__ascii_mbtowc+0x6>
 8011bd0:	a901      	add	r1, sp, #4
 8011bd2:	b142      	cbz	r2, 8011be6 <__ascii_mbtowc+0x1a>
 8011bd4:	b14b      	cbz	r3, 8011bea <__ascii_mbtowc+0x1e>
 8011bd6:	7813      	ldrb	r3, [r2, #0]
 8011bd8:	600b      	str	r3, [r1, #0]
 8011bda:	7812      	ldrb	r2, [r2, #0]
 8011bdc:	1e10      	subs	r0, r2, #0
 8011bde:	bf18      	it	ne
 8011be0:	2001      	movne	r0, #1
 8011be2:	b002      	add	sp, #8
 8011be4:	4770      	bx	lr
 8011be6:	4610      	mov	r0, r2
 8011be8:	e7fb      	b.n	8011be2 <__ascii_mbtowc+0x16>
 8011bea:	f06f 0001 	mvn.w	r0, #1
 8011bee:	e7f8      	b.n	8011be2 <__ascii_mbtowc+0x16>

08011bf0 <memchr>:
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	b510      	push	{r4, lr}
 8011bf4:	b2c9      	uxtb	r1, r1
 8011bf6:	4402      	add	r2, r0
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	d101      	bne.n	8011c02 <memchr+0x12>
 8011bfe:	2000      	movs	r0, #0
 8011c00:	e003      	b.n	8011c0a <memchr+0x1a>
 8011c02:	7804      	ldrb	r4, [r0, #0]
 8011c04:	3301      	adds	r3, #1
 8011c06:	428c      	cmp	r4, r1
 8011c08:	d1f6      	bne.n	8011bf8 <memchr+0x8>
 8011c0a:	bd10      	pop	{r4, pc}

08011c0c <_Balloc>:
 8011c0c:	b570      	push	{r4, r5, r6, lr}
 8011c0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011c10:	4604      	mov	r4, r0
 8011c12:	460d      	mov	r5, r1
 8011c14:	b976      	cbnz	r6, 8011c34 <_Balloc+0x28>
 8011c16:	2010      	movs	r0, #16
 8011c18:	f7ff ffd0 	bl	8011bbc <malloc>
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	6260      	str	r0, [r4, #36]	; 0x24
 8011c20:	b920      	cbnz	r0, 8011c2c <_Balloc+0x20>
 8011c22:	2166      	movs	r1, #102	; 0x66
 8011c24:	4b17      	ldr	r3, [pc, #92]	; (8011c84 <_Balloc+0x78>)
 8011c26:	4818      	ldr	r0, [pc, #96]	; (8011c88 <_Balloc+0x7c>)
 8011c28:	f7fe fdb2 	bl	8010790 <__assert_func>
 8011c2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c30:	6006      	str	r6, [r0, #0]
 8011c32:	60c6      	str	r6, [r0, #12]
 8011c34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011c36:	68f3      	ldr	r3, [r6, #12]
 8011c38:	b183      	cbz	r3, 8011c5c <_Balloc+0x50>
 8011c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c3c:	68db      	ldr	r3, [r3, #12]
 8011c3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011c42:	b9b8      	cbnz	r0, 8011c74 <_Balloc+0x68>
 8011c44:	2101      	movs	r1, #1
 8011c46:	fa01 f605 	lsl.w	r6, r1, r5
 8011c4a:	1d72      	adds	r2, r6, #5
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	0092      	lsls	r2, r2, #2
 8011c50:	f000 fc94 	bl	801257c <_calloc_r>
 8011c54:	b160      	cbz	r0, 8011c70 <_Balloc+0x64>
 8011c56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011c5a:	e00e      	b.n	8011c7a <_Balloc+0x6e>
 8011c5c:	2221      	movs	r2, #33	; 0x21
 8011c5e:	2104      	movs	r1, #4
 8011c60:	4620      	mov	r0, r4
 8011c62:	f000 fc8b 	bl	801257c <_calloc_r>
 8011c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c68:	60f0      	str	r0, [r6, #12]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d1e4      	bne.n	8011c3a <_Balloc+0x2e>
 8011c70:	2000      	movs	r0, #0
 8011c72:	bd70      	pop	{r4, r5, r6, pc}
 8011c74:	6802      	ldr	r2, [r0, #0]
 8011c76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011c80:	e7f7      	b.n	8011c72 <_Balloc+0x66>
 8011c82:	bf00      	nop
 8011c84:	080139a0 	.word	0x080139a0
 8011c88:	08013b44 	.word	0x08013b44

08011c8c <_Bfree>:
 8011c8c:	b570      	push	{r4, r5, r6, lr}
 8011c8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011c90:	4605      	mov	r5, r0
 8011c92:	460c      	mov	r4, r1
 8011c94:	b976      	cbnz	r6, 8011cb4 <_Bfree+0x28>
 8011c96:	2010      	movs	r0, #16
 8011c98:	f7ff ff90 	bl	8011bbc <malloc>
 8011c9c:	4602      	mov	r2, r0
 8011c9e:	6268      	str	r0, [r5, #36]	; 0x24
 8011ca0:	b920      	cbnz	r0, 8011cac <_Bfree+0x20>
 8011ca2:	218a      	movs	r1, #138	; 0x8a
 8011ca4:	4b08      	ldr	r3, [pc, #32]	; (8011cc8 <_Bfree+0x3c>)
 8011ca6:	4809      	ldr	r0, [pc, #36]	; (8011ccc <_Bfree+0x40>)
 8011ca8:	f7fe fd72 	bl	8010790 <__assert_func>
 8011cac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011cb0:	6006      	str	r6, [r0, #0]
 8011cb2:	60c6      	str	r6, [r0, #12]
 8011cb4:	b13c      	cbz	r4, 8011cc6 <_Bfree+0x3a>
 8011cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011cb8:	6862      	ldr	r2, [r4, #4]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011cc0:	6021      	str	r1, [r4, #0]
 8011cc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011cc6:	bd70      	pop	{r4, r5, r6, pc}
 8011cc8:	080139a0 	.word	0x080139a0
 8011ccc:	08013b44 	.word	0x08013b44

08011cd0 <__multadd>:
 8011cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cd4:	4607      	mov	r7, r0
 8011cd6:	460c      	mov	r4, r1
 8011cd8:	461e      	mov	r6, r3
 8011cda:	2000      	movs	r0, #0
 8011cdc:	690d      	ldr	r5, [r1, #16]
 8011cde:	f101 0c14 	add.w	ip, r1, #20
 8011ce2:	f8dc 3000 	ldr.w	r3, [ip]
 8011ce6:	3001      	adds	r0, #1
 8011ce8:	b299      	uxth	r1, r3
 8011cea:	fb02 6101 	mla	r1, r2, r1, r6
 8011cee:	0c1e      	lsrs	r6, r3, #16
 8011cf0:	0c0b      	lsrs	r3, r1, #16
 8011cf2:	fb02 3306 	mla	r3, r2, r6, r3
 8011cf6:	b289      	uxth	r1, r1
 8011cf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011cfc:	4285      	cmp	r5, r0
 8011cfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011d02:	f84c 1b04 	str.w	r1, [ip], #4
 8011d06:	dcec      	bgt.n	8011ce2 <__multadd+0x12>
 8011d08:	b30e      	cbz	r6, 8011d4e <__multadd+0x7e>
 8011d0a:	68a3      	ldr	r3, [r4, #8]
 8011d0c:	42ab      	cmp	r3, r5
 8011d0e:	dc19      	bgt.n	8011d44 <__multadd+0x74>
 8011d10:	6861      	ldr	r1, [r4, #4]
 8011d12:	4638      	mov	r0, r7
 8011d14:	3101      	adds	r1, #1
 8011d16:	f7ff ff79 	bl	8011c0c <_Balloc>
 8011d1a:	4680      	mov	r8, r0
 8011d1c:	b928      	cbnz	r0, 8011d2a <__multadd+0x5a>
 8011d1e:	4602      	mov	r2, r0
 8011d20:	21b5      	movs	r1, #181	; 0xb5
 8011d22:	4b0c      	ldr	r3, [pc, #48]	; (8011d54 <__multadd+0x84>)
 8011d24:	480c      	ldr	r0, [pc, #48]	; (8011d58 <__multadd+0x88>)
 8011d26:	f7fe fd33 	bl	8010790 <__assert_func>
 8011d2a:	6922      	ldr	r2, [r4, #16]
 8011d2c:	f104 010c 	add.w	r1, r4, #12
 8011d30:	3202      	adds	r2, #2
 8011d32:	0092      	lsls	r2, r2, #2
 8011d34:	300c      	adds	r0, #12
 8011d36:	f7fd fa19 	bl	800f16c <memcpy>
 8011d3a:	4621      	mov	r1, r4
 8011d3c:	4638      	mov	r0, r7
 8011d3e:	f7ff ffa5 	bl	8011c8c <_Bfree>
 8011d42:	4644      	mov	r4, r8
 8011d44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011d48:	3501      	adds	r5, #1
 8011d4a:	615e      	str	r6, [r3, #20]
 8011d4c:	6125      	str	r5, [r4, #16]
 8011d4e:	4620      	mov	r0, r4
 8011d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d54:	08013ab8 	.word	0x08013ab8
 8011d58:	08013b44 	.word	0x08013b44

08011d5c <__s2b>:
 8011d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d60:	4615      	mov	r5, r2
 8011d62:	2209      	movs	r2, #9
 8011d64:	461f      	mov	r7, r3
 8011d66:	3308      	adds	r3, #8
 8011d68:	460c      	mov	r4, r1
 8011d6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d6e:	4606      	mov	r6, r0
 8011d70:	2201      	movs	r2, #1
 8011d72:	2100      	movs	r1, #0
 8011d74:	429a      	cmp	r2, r3
 8011d76:	db09      	blt.n	8011d8c <__s2b+0x30>
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f7ff ff47 	bl	8011c0c <_Balloc>
 8011d7e:	b940      	cbnz	r0, 8011d92 <__s2b+0x36>
 8011d80:	4602      	mov	r2, r0
 8011d82:	21ce      	movs	r1, #206	; 0xce
 8011d84:	4b18      	ldr	r3, [pc, #96]	; (8011de8 <__s2b+0x8c>)
 8011d86:	4819      	ldr	r0, [pc, #100]	; (8011dec <__s2b+0x90>)
 8011d88:	f7fe fd02 	bl	8010790 <__assert_func>
 8011d8c:	0052      	lsls	r2, r2, #1
 8011d8e:	3101      	adds	r1, #1
 8011d90:	e7f0      	b.n	8011d74 <__s2b+0x18>
 8011d92:	9b08      	ldr	r3, [sp, #32]
 8011d94:	2d09      	cmp	r5, #9
 8011d96:	6143      	str	r3, [r0, #20]
 8011d98:	f04f 0301 	mov.w	r3, #1
 8011d9c:	6103      	str	r3, [r0, #16]
 8011d9e:	dd16      	ble.n	8011dce <__s2b+0x72>
 8011da0:	f104 0909 	add.w	r9, r4, #9
 8011da4:	46c8      	mov	r8, r9
 8011da6:	442c      	add	r4, r5
 8011da8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011dac:	4601      	mov	r1, r0
 8011dae:	220a      	movs	r2, #10
 8011db0:	4630      	mov	r0, r6
 8011db2:	3b30      	subs	r3, #48	; 0x30
 8011db4:	f7ff ff8c 	bl	8011cd0 <__multadd>
 8011db8:	45a0      	cmp	r8, r4
 8011dba:	d1f5      	bne.n	8011da8 <__s2b+0x4c>
 8011dbc:	f1a5 0408 	sub.w	r4, r5, #8
 8011dc0:	444c      	add	r4, r9
 8011dc2:	1b2d      	subs	r5, r5, r4
 8011dc4:	1963      	adds	r3, r4, r5
 8011dc6:	42bb      	cmp	r3, r7
 8011dc8:	db04      	blt.n	8011dd4 <__s2b+0x78>
 8011dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dce:	2509      	movs	r5, #9
 8011dd0:	340a      	adds	r4, #10
 8011dd2:	e7f6      	b.n	8011dc2 <__s2b+0x66>
 8011dd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011dd8:	4601      	mov	r1, r0
 8011dda:	220a      	movs	r2, #10
 8011ddc:	4630      	mov	r0, r6
 8011dde:	3b30      	subs	r3, #48	; 0x30
 8011de0:	f7ff ff76 	bl	8011cd0 <__multadd>
 8011de4:	e7ee      	b.n	8011dc4 <__s2b+0x68>
 8011de6:	bf00      	nop
 8011de8:	08013ab8 	.word	0x08013ab8
 8011dec:	08013b44 	.word	0x08013b44

08011df0 <__hi0bits>:
 8011df0:	0c02      	lsrs	r2, r0, #16
 8011df2:	0412      	lsls	r2, r2, #16
 8011df4:	4603      	mov	r3, r0
 8011df6:	b9ca      	cbnz	r2, 8011e2c <__hi0bits+0x3c>
 8011df8:	0403      	lsls	r3, r0, #16
 8011dfa:	2010      	movs	r0, #16
 8011dfc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011e00:	bf04      	itt	eq
 8011e02:	021b      	lsleq	r3, r3, #8
 8011e04:	3008      	addeq	r0, #8
 8011e06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011e0a:	bf04      	itt	eq
 8011e0c:	011b      	lsleq	r3, r3, #4
 8011e0e:	3004      	addeq	r0, #4
 8011e10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011e14:	bf04      	itt	eq
 8011e16:	009b      	lsleq	r3, r3, #2
 8011e18:	3002      	addeq	r0, #2
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	db05      	blt.n	8011e2a <__hi0bits+0x3a>
 8011e1e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8011e22:	f100 0001 	add.w	r0, r0, #1
 8011e26:	bf08      	it	eq
 8011e28:	2020      	moveq	r0, #32
 8011e2a:	4770      	bx	lr
 8011e2c:	2000      	movs	r0, #0
 8011e2e:	e7e5      	b.n	8011dfc <__hi0bits+0xc>

08011e30 <__lo0bits>:
 8011e30:	6803      	ldr	r3, [r0, #0]
 8011e32:	4602      	mov	r2, r0
 8011e34:	f013 0007 	ands.w	r0, r3, #7
 8011e38:	d00b      	beq.n	8011e52 <__lo0bits+0x22>
 8011e3a:	07d9      	lsls	r1, r3, #31
 8011e3c:	d421      	bmi.n	8011e82 <__lo0bits+0x52>
 8011e3e:	0798      	lsls	r0, r3, #30
 8011e40:	bf49      	itett	mi
 8011e42:	085b      	lsrmi	r3, r3, #1
 8011e44:	089b      	lsrpl	r3, r3, #2
 8011e46:	2001      	movmi	r0, #1
 8011e48:	6013      	strmi	r3, [r2, #0]
 8011e4a:	bf5c      	itt	pl
 8011e4c:	2002      	movpl	r0, #2
 8011e4e:	6013      	strpl	r3, [r2, #0]
 8011e50:	4770      	bx	lr
 8011e52:	b299      	uxth	r1, r3
 8011e54:	b909      	cbnz	r1, 8011e5a <__lo0bits+0x2a>
 8011e56:	2010      	movs	r0, #16
 8011e58:	0c1b      	lsrs	r3, r3, #16
 8011e5a:	b2d9      	uxtb	r1, r3
 8011e5c:	b909      	cbnz	r1, 8011e62 <__lo0bits+0x32>
 8011e5e:	3008      	adds	r0, #8
 8011e60:	0a1b      	lsrs	r3, r3, #8
 8011e62:	0719      	lsls	r1, r3, #28
 8011e64:	bf04      	itt	eq
 8011e66:	091b      	lsreq	r3, r3, #4
 8011e68:	3004      	addeq	r0, #4
 8011e6a:	0799      	lsls	r1, r3, #30
 8011e6c:	bf04      	itt	eq
 8011e6e:	089b      	lsreq	r3, r3, #2
 8011e70:	3002      	addeq	r0, #2
 8011e72:	07d9      	lsls	r1, r3, #31
 8011e74:	d403      	bmi.n	8011e7e <__lo0bits+0x4e>
 8011e76:	085b      	lsrs	r3, r3, #1
 8011e78:	f100 0001 	add.w	r0, r0, #1
 8011e7c:	d003      	beq.n	8011e86 <__lo0bits+0x56>
 8011e7e:	6013      	str	r3, [r2, #0]
 8011e80:	4770      	bx	lr
 8011e82:	2000      	movs	r0, #0
 8011e84:	4770      	bx	lr
 8011e86:	2020      	movs	r0, #32
 8011e88:	4770      	bx	lr
	...

08011e8c <__i2b>:
 8011e8c:	b510      	push	{r4, lr}
 8011e8e:	460c      	mov	r4, r1
 8011e90:	2101      	movs	r1, #1
 8011e92:	f7ff febb 	bl	8011c0c <_Balloc>
 8011e96:	4602      	mov	r2, r0
 8011e98:	b928      	cbnz	r0, 8011ea6 <__i2b+0x1a>
 8011e9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011e9e:	4b04      	ldr	r3, [pc, #16]	; (8011eb0 <__i2b+0x24>)
 8011ea0:	4804      	ldr	r0, [pc, #16]	; (8011eb4 <__i2b+0x28>)
 8011ea2:	f7fe fc75 	bl	8010790 <__assert_func>
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	6144      	str	r4, [r0, #20]
 8011eaa:	6103      	str	r3, [r0, #16]
 8011eac:	bd10      	pop	{r4, pc}
 8011eae:	bf00      	nop
 8011eb0:	08013ab8 	.word	0x08013ab8
 8011eb4:	08013b44 	.word	0x08013b44

08011eb8 <__multiply>:
 8011eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ebc:	4691      	mov	r9, r2
 8011ebe:	690a      	ldr	r2, [r1, #16]
 8011ec0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ec4:	460c      	mov	r4, r1
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	bfbe      	ittt	lt
 8011eca:	460b      	movlt	r3, r1
 8011ecc:	464c      	movlt	r4, r9
 8011ece:	4699      	movlt	r9, r3
 8011ed0:	6927      	ldr	r7, [r4, #16]
 8011ed2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011ed6:	68a3      	ldr	r3, [r4, #8]
 8011ed8:	6861      	ldr	r1, [r4, #4]
 8011eda:	eb07 060a 	add.w	r6, r7, sl
 8011ede:	42b3      	cmp	r3, r6
 8011ee0:	b085      	sub	sp, #20
 8011ee2:	bfb8      	it	lt
 8011ee4:	3101      	addlt	r1, #1
 8011ee6:	f7ff fe91 	bl	8011c0c <_Balloc>
 8011eea:	b930      	cbnz	r0, 8011efa <__multiply+0x42>
 8011eec:	4602      	mov	r2, r0
 8011eee:	f240 115d 	movw	r1, #349	; 0x15d
 8011ef2:	4b43      	ldr	r3, [pc, #268]	; (8012000 <__multiply+0x148>)
 8011ef4:	4843      	ldr	r0, [pc, #268]	; (8012004 <__multiply+0x14c>)
 8011ef6:	f7fe fc4b 	bl	8010790 <__assert_func>
 8011efa:	f100 0514 	add.w	r5, r0, #20
 8011efe:	462b      	mov	r3, r5
 8011f00:	2200      	movs	r2, #0
 8011f02:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011f06:	4543      	cmp	r3, r8
 8011f08:	d321      	bcc.n	8011f4e <__multiply+0x96>
 8011f0a:	f104 0314 	add.w	r3, r4, #20
 8011f0e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011f12:	f109 0314 	add.w	r3, r9, #20
 8011f16:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011f1a:	9202      	str	r2, [sp, #8]
 8011f1c:	1b3a      	subs	r2, r7, r4
 8011f1e:	3a15      	subs	r2, #21
 8011f20:	f022 0203 	bic.w	r2, r2, #3
 8011f24:	3204      	adds	r2, #4
 8011f26:	f104 0115 	add.w	r1, r4, #21
 8011f2a:	428f      	cmp	r7, r1
 8011f2c:	bf38      	it	cc
 8011f2e:	2204      	movcc	r2, #4
 8011f30:	9201      	str	r2, [sp, #4]
 8011f32:	9a02      	ldr	r2, [sp, #8]
 8011f34:	9303      	str	r3, [sp, #12]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d80c      	bhi.n	8011f54 <__multiply+0x9c>
 8011f3a:	2e00      	cmp	r6, #0
 8011f3c:	dd03      	ble.n	8011f46 <__multiply+0x8e>
 8011f3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d059      	beq.n	8011ffa <__multiply+0x142>
 8011f46:	6106      	str	r6, [r0, #16]
 8011f48:	b005      	add	sp, #20
 8011f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4e:	f843 2b04 	str.w	r2, [r3], #4
 8011f52:	e7d8      	b.n	8011f06 <__multiply+0x4e>
 8011f54:	f8b3 a000 	ldrh.w	sl, [r3]
 8011f58:	f1ba 0f00 	cmp.w	sl, #0
 8011f5c:	d023      	beq.n	8011fa6 <__multiply+0xee>
 8011f5e:	46a9      	mov	r9, r5
 8011f60:	f04f 0c00 	mov.w	ip, #0
 8011f64:	f104 0e14 	add.w	lr, r4, #20
 8011f68:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011f6c:	f8d9 1000 	ldr.w	r1, [r9]
 8011f70:	fa1f fb82 	uxth.w	fp, r2
 8011f74:	b289      	uxth	r1, r1
 8011f76:	fb0a 110b 	mla	r1, sl, fp, r1
 8011f7a:	4461      	add	r1, ip
 8011f7c:	f8d9 c000 	ldr.w	ip, [r9]
 8011f80:	0c12      	lsrs	r2, r2, #16
 8011f82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8011f86:	fb0a c202 	mla	r2, sl, r2, ip
 8011f8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011f8e:	b289      	uxth	r1, r1
 8011f90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011f94:	4577      	cmp	r7, lr
 8011f96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011f9a:	f849 1b04 	str.w	r1, [r9], #4
 8011f9e:	d8e3      	bhi.n	8011f68 <__multiply+0xb0>
 8011fa0:	9a01      	ldr	r2, [sp, #4]
 8011fa2:	f845 c002 	str.w	ip, [r5, r2]
 8011fa6:	9a03      	ldr	r2, [sp, #12]
 8011fa8:	3304      	adds	r3, #4
 8011faa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011fae:	f1b9 0f00 	cmp.w	r9, #0
 8011fb2:	d020      	beq.n	8011ff6 <__multiply+0x13e>
 8011fb4:	46ae      	mov	lr, r5
 8011fb6:	f04f 0a00 	mov.w	sl, #0
 8011fba:	6829      	ldr	r1, [r5, #0]
 8011fbc:	f104 0c14 	add.w	ip, r4, #20
 8011fc0:	f8bc b000 	ldrh.w	fp, [ip]
 8011fc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011fc8:	b289      	uxth	r1, r1
 8011fca:	fb09 220b 	mla	r2, r9, fp, r2
 8011fce:	4492      	add	sl, r2
 8011fd0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011fd4:	f84e 1b04 	str.w	r1, [lr], #4
 8011fd8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011fdc:	f8be 1000 	ldrh.w	r1, [lr]
 8011fe0:	0c12      	lsrs	r2, r2, #16
 8011fe2:	fb09 1102 	mla	r1, r9, r2, r1
 8011fe6:	4567      	cmp	r7, ip
 8011fe8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011fec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011ff0:	d8e6      	bhi.n	8011fc0 <__multiply+0x108>
 8011ff2:	9a01      	ldr	r2, [sp, #4]
 8011ff4:	50a9      	str	r1, [r5, r2]
 8011ff6:	3504      	adds	r5, #4
 8011ff8:	e79b      	b.n	8011f32 <__multiply+0x7a>
 8011ffa:	3e01      	subs	r6, #1
 8011ffc:	e79d      	b.n	8011f3a <__multiply+0x82>
 8011ffe:	bf00      	nop
 8012000:	08013ab8 	.word	0x08013ab8
 8012004:	08013b44 	.word	0x08013b44

08012008 <__pow5mult>:
 8012008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801200c:	4615      	mov	r5, r2
 801200e:	f012 0203 	ands.w	r2, r2, #3
 8012012:	4606      	mov	r6, r0
 8012014:	460f      	mov	r7, r1
 8012016:	d007      	beq.n	8012028 <__pow5mult+0x20>
 8012018:	4c25      	ldr	r4, [pc, #148]	; (80120b0 <__pow5mult+0xa8>)
 801201a:	3a01      	subs	r2, #1
 801201c:	2300      	movs	r3, #0
 801201e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012022:	f7ff fe55 	bl	8011cd0 <__multadd>
 8012026:	4607      	mov	r7, r0
 8012028:	10ad      	asrs	r5, r5, #2
 801202a:	d03d      	beq.n	80120a8 <__pow5mult+0xa0>
 801202c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801202e:	b97c      	cbnz	r4, 8012050 <__pow5mult+0x48>
 8012030:	2010      	movs	r0, #16
 8012032:	f7ff fdc3 	bl	8011bbc <malloc>
 8012036:	4602      	mov	r2, r0
 8012038:	6270      	str	r0, [r6, #36]	; 0x24
 801203a:	b928      	cbnz	r0, 8012048 <__pow5mult+0x40>
 801203c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012040:	4b1c      	ldr	r3, [pc, #112]	; (80120b4 <__pow5mult+0xac>)
 8012042:	481d      	ldr	r0, [pc, #116]	; (80120b8 <__pow5mult+0xb0>)
 8012044:	f7fe fba4 	bl	8010790 <__assert_func>
 8012048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801204c:	6004      	str	r4, [r0, #0]
 801204e:	60c4      	str	r4, [r0, #12]
 8012050:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012058:	b94c      	cbnz	r4, 801206e <__pow5mult+0x66>
 801205a:	f240 2171 	movw	r1, #625	; 0x271
 801205e:	4630      	mov	r0, r6
 8012060:	f7ff ff14 	bl	8011e8c <__i2b>
 8012064:	2300      	movs	r3, #0
 8012066:	4604      	mov	r4, r0
 8012068:	f8c8 0008 	str.w	r0, [r8, #8]
 801206c:	6003      	str	r3, [r0, #0]
 801206e:	f04f 0900 	mov.w	r9, #0
 8012072:	07eb      	lsls	r3, r5, #31
 8012074:	d50a      	bpl.n	801208c <__pow5mult+0x84>
 8012076:	4639      	mov	r1, r7
 8012078:	4622      	mov	r2, r4
 801207a:	4630      	mov	r0, r6
 801207c:	f7ff ff1c 	bl	8011eb8 <__multiply>
 8012080:	4680      	mov	r8, r0
 8012082:	4639      	mov	r1, r7
 8012084:	4630      	mov	r0, r6
 8012086:	f7ff fe01 	bl	8011c8c <_Bfree>
 801208a:	4647      	mov	r7, r8
 801208c:	106d      	asrs	r5, r5, #1
 801208e:	d00b      	beq.n	80120a8 <__pow5mult+0xa0>
 8012090:	6820      	ldr	r0, [r4, #0]
 8012092:	b938      	cbnz	r0, 80120a4 <__pow5mult+0x9c>
 8012094:	4622      	mov	r2, r4
 8012096:	4621      	mov	r1, r4
 8012098:	4630      	mov	r0, r6
 801209a:	f7ff ff0d 	bl	8011eb8 <__multiply>
 801209e:	6020      	str	r0, [r4, #0]
 80120a0:	f8c0 9000 	str.w	r9, [r0]
 80120a4:	4604      	mov	r4, r0
 80120a6:	e7e4      	b.n	8012072 <__pow5mult+0x6a>
 80120a8:	4638      	mov	r0, r7
 80120aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120ae:	bf00      	nop
 80120b0:	08013c90 	.word	0x08013c90
 80120b4:	080139a0 	.word	0x080139a0
 80120b8:	08013b44 	.word	0x08013b44

080120bc <__lshift>:
 80120bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120c0:	460c      	mov	r4, r1
 80120c2:	4607      	mov	r7, r0
 80120c4:	4691      	mov	r9, r2
 80120c6:	6923      	ldr	r3, [r4, #16]
 80120c8:	6849      	ldr	r1, [r1, #4]
 80120ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80120ce:	68a3      	ldr	r3, [r4, #8]
 80120d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80120d4:	f108 0601 	add.w	r6, r8, #1
 80120d8:	42b3      	cmp	r3, r6
 80120da:	db0b      	blt.n	80120f4 <__lshift+0x38>
 80120dc:	4638      	mov	r0, r7
 80120de:	f7ff fd95 	bl	8011c0c <_Balloc>
 80120e2:	4605      	mov	r5, r0
 80120e4:	b948      	cbnz	r0, 80120fa <__lshift+0x3e>
 80120e6:	4602      	mov	r2, r0
 80120e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80120ec:	4b29      	ldr	r3, [pc, #164]	; (8012194 <__lshift+0xd8>)
 80120ee:	482a      	ldr	r0, [pc, #168]	; (8012198 <__lshift+0xdc>)
 80120f0:	f7fe fb4e 	bl	8010790 <__assert_func>
 80120f4:	3101      	adds	r1, #1
 80120f6:	005b      	lsls	r3, r3, #1
 80120f8:	e7ee      	b.n	80120d8 <__lshift+0x1c>
 80120fa:	2300      	movs	r3, #0
 80120fc:	f100 0114 	add.w	r1, r0, #20
 8012100:	f100 0210 	add.w	r2, r0, #16
 8012104:	4618      	mov	r0, r3
 8012106:	4553      	cmp	r3, sl
 8012108:	db37      	blt.n	801217a <__lshift+0xbe>
 801210a:	6920      	ldr	r0, [r4, #16]
 801210c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012110:	f104 0314 	add.w	r3, r4, #20
 8012114:	f019 091f 	ands.w	r9, r9, #31
 8012118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801211c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012120:	d02f      	beq.n	8012182 <__lshift+0xc6>
 8012122:	468a      	mov	sl, r1
 8012124:	f04f 0c00 	mov.w	ip, #0
 8012128:	f1c9 0e20 	rsb	lr, r9, #32
 801212c:	681a      	ldr	r2, [r3, #0]
 801212e:	fa02 f209 	lsl.w	r2, r2, r9
 8012132:	ea42 020c 	orr.w	r2, r2, ip
 8012136:	f84a 2b04 	str.w	r2, [sl], #4
 801213a:	f853 2b04 	ldr.w	r2, [r3], #4
 801213e:	4298      	cmp	r0, r3
 8012140:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012144:	d8f2      	bhi.n	801212c <__lshift+0x70>
 8012146:	1b03      	subs	r3, r0, r4
 8012148:	3b15      	subs	r3, #21
 801214a:	f023 0303 	bic.w	r3, r3, #3
 801214e:	3304      	adds	r3, #4
 8012150:	f104 0215 	add.w	r2, r4, #21
 8012154:	4290      	cmp	r0, r2
 8012156:	bf38      	it	cc
 8012158:	2304      	movcc	r3, #4
 801215a:	f841 c003 	str.w	ip, [r1, r3]
 801215e:	f1bc 0f00 	cmp.w	ip, #0
 8012162:	d001      	beq.n	8012168 <__lshift+0xac>
 8012164:	f108 0602 	add.w	r6, r8, #2
 8012168:	3e01      	subs	r6, #1
 801216a:	4638      	mov	r0, r7
 801216c:	4621      	mov	r1, r4
 801216e:	612e      	str	r6, [r5, #16]
 8012170:	f7ff fd8c 	bl	8011c8c <_Bfree>
 8012174:	4628      	mov	r0, r5
 8012176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801217a:	f842 0f04 	str.w	r0, [r2, #4]!
 801217e:	3301      	adds	r3, #1
 8012180:	e7c1      	b.n	8012106 <__lshift+0x4a>
 8012182:	3904      	subs	r1, #4
 8012184:	f853 2b04 	ldr.w	r2, [r3], #4
 8012188:	4298      	cmp	r0, r3
 801218a:	f841 2f04 	str.w	r2, [r1, #4]!
 801218e:	d8f9      	bhi.n	8012184 <__lshift+0xc8>
 8012190:	e7ea      	b.n	8012168 <__lshift+0xac>
 8012192:	bf00      	nop
 8012194:	08013ab8 	.word	0x08013ab8
 8012198:	08013b44 	.word	0x08013b44

0801219c <__mcmp>:
 801219c:	4603      	mov	r3, r0
 801219e:	690a      	ldr	r2, [r1, #16]
 80121a0:	6900      	ldr	r0, [r0, #16]
 80121a2:	b530      	push	{r4, r5, lr}
 80121a4:	1a80      	subs	r0, r0, r2
 80121a6:	d10d      	bne.n	80121c4 <__mcmp+0x28>
 80121a8:	3314      	adds	r3, #20
 80121aa:	3114      	adds	r1, #20
 80121ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80121b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80121b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80121b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80121bc:	4295      	cmp	r5, r2
 80121be:	d002      	beq.n	80121c6 <__mcmp+0x2a>
 80121c0:	d304      	bcc.n	80121cc <__mcmp+0x30>
 80121c2:	2001      	movs	r0, #1
 80121c4:	bd30      	pop	{r4, r5, pc}
 80121c6:	42a3      	cmp	r3, r4
 80121c8:	d3f4      	bcc.n	80121b4 <__mcmp+0x18>
 80121ca:	e7fb      	b.n	80121c4 <__mcmp+0x28>
 80121cc:	f04f 30ff 	mov.w	r0, #4294967295
 80121d0:	e7f8      	b.n	80121c4 <__mcmp+0x28>
	...

080121d4 <__mdiff>:
 80121d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d8:	460d      	mov	r5, r1
 80121da:	4607      	mov	r7, r0
 80121dc:	4611      	mov	r1, r2
 80121de:	4628      	mov	r0, r5
 80121e0:	4614      	mov	r4, r2
 80121e2:	f7ff ffdb 	bl	801219c <__mcmp>
 80121e6:	1e06      	subs	r6, r0, #0
 80121e8:	d111      	bne.n	801220e <__mdiff+0x3a>
 80121ea:	4631      	mov	r1, r6
 80121ec:	4638      	mov	r0, r7
 80121ee:	f7ff fd0d 	bl	8011c0c <_Balloc>
 80121f2:	4602      	mov	r2, r0
 80121f4:	b928      	cbnz	r0, 8012202 <__mdiff+0x2e>
 80121f6:	f240 2132 	movw	r1, #562	; 0x232
 80121fa:	4b3a      	ldr	r3, [pc, #232]	; (80122e4 <__mdiff+0x110>)
 80121fc:	483a      	ldr	r0, [pc, #232]	; (80122e8 <__mdiff+0x114>)
 80121fe:	f7fe fac7 	bl	8010790 <__assert_func>
 8012202:	2301      	movs	r3, #1
 8012204:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012208:	4610      	mov	r0, r2
 801220a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801220e:	bfa4      	itt	ge
 8012210:	4623      	movge	r3, r4
 8012212:	462c      	movge	r4, r5
 8012214:	4638      	mov	r0, r7
 8012216:	6861      	ldr	r1, [r4, #4]
 8012218:	bfa6      	itte	ge
 801221a:	461d      	movge	r5, r3
 801221c:	2600      	movge	r6, #0
 801221e:	2601      	movlt	r6, #1
 8012220:	f7ff fcf4 	bl	8011c0c <_Balloc>
 8012224:	4602      	mov	r2, r0
 8012226:	b918      	cbnz	r0, 8012230 <__mdiff+0x5c>
 8012228:	f44f 7110 	mov.w	r1, #576	; 0x240
 801222c:	4b2d      	ldr	r3, [pc, #180]	; (80122e4 <__mdiff+0x110>)
 801222e:	e7e5      	b.n	80121fc <__mdiff+0x28>
 8012230:	f102 0814 	add.w	r8, r2, #20
 8012234:	46c2      	mov	sl, r8
 8012236:	f04f 0c00 	mov.w	ip, #0
 801223a:	6927      	ldr	r7, [r4, #16]
 801223c:	60c6      	str	r6, [r0, #12]
 801223e:	692e      	ldr	r6, [r5, #16]
 8012240:	f104 0014 	add.w	r0, r4, #20
 8012244:	f105 0914 	add.w	r9, r5, #20
 8012248:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 801224c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012250:	3410      	adds	r4, #16
 8012252:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8012256:	f859 3b04 	ldr.w	r3, [r9], #4
 801225a:	fa1f f18b 	uxth.w	r1, fp
 801225e:	448c      	add	ip, r1
 8012260:	b299      	uxth	r1, r3
 8012262:	0c1b      	lsrs	r3, r3, #16
 8012264:	ebac 0101 	sub.w	r1, ip, r1
 8012268:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801226c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012270:	b289      	uxth	r1, r1
 8012272:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8012276:	454e      	cmp	r6, r9
 8012278:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801227c:	f84a 3b04 	str.w	r3, [sl], #4
 8012280:	d8e7      	bhi.n	8012252 <__mdiff+0x7e>
 8012282:	1b73      	subs	r3, r6, r5
 8012284:	3b15      	subs	r3, #21
 8012286:	f023 0303 	bic.w	r3, r3, #3
 801228a:	3515      	adds	r5, #21
 801228c:	3304      	adds	r3, #4
 801228e:	42ae      	cmp	r6, r5
 8012290:	bf38      	it	cc
 8012292:	2304      	movcc	r3, #4
 8012294:	4418      	add	r0, r3
 8012296:	4443      	add	r3, r8
 8012298:	461e      	mov	r6, r3
 801229a:	4605      	mov	r5, r0
 801229c:	4575      	cmp	r5, lr
 801229e:	d30e      	bcc.n	80122be <__mdiff+0xea>
 80122a0:	f10e 0103 	add.w	r1, lr, #3
 80122a4:	1a09      	subs	r1, r1, r0
 80122a6:	f021 0103 	bic.w	r1, r1, #3
 80122aa:	3803      	subs	r0, #3
 80122ac:	4586      	cmp	lr, r0
 80122ae:	bf38      	it	cc
 80122b0:	2100      	movcc	r1, #0
 80122b2:	4419      	add	r1, r3
 80122b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80122b8:	b18b      	cbz	r3, 80122de <__mdiff+0x10a>
 80122ba:	6117      	str	r7, [r2, #16]
 80122bc:	e7a4      	b.n	8012208 <__mdiff+0x34>
 80122be:	f855 8b04 	ldr.w	r8, [r5], #4
 80122c2:	fa1f f188 	uxth.w	r1, r8
 80122c6:	4461      	add	r1, ip
 80122c8:	140c      	asrs	r4, r1, #16
 80122ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80122ce:	b289      	uxth	r1, r1
 80122d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80122d4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80122d8:	f846 1b04 	str.w	r1, [r6], #4
 80122dc:	e7de      	b.n	801229c <__mdiff+0xc8>
 80122de:	3f01      	subs	r7, #1
 80122e0:	e7e8      	b.n	80122b4 <__mdiff+0xe0>
 80122e2:	bf00      	nop
 80122e4:	08013ab8 	.word	0x08013ab8
 80122e8:	08013b44 	.word	0x08013b44

080122ec <__ulp>:
 80122ec:	4b11      	ldr	r3, [pc, #68]	; (8012334 <__ulp+0x48>)
 80122ee:	400b      	ands	r3, r1
 80122f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	dd02      	ble.n	80122fe <__ulp+0x12>
 80122f8:	2000      	movs	r0, #0
 80122fa:	4619      	mov	r1, r3
 80122fc:	4770      	bx	lr
 80122fe:	425b      	negs	r3, r3
 8012300:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012304:	f04f 0000 	mov.w	r0, #0
 8012308:	f04f 0100 	mov.w	r1, #0
 801230c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012310:	da04      	bge.n	801231c <__ulp+0x30>
 8012312:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012316:	fa43 f102 	asr.w	r1, r3, r2
 801231a:	4770      	bx	lr
 801231c:	f1a2 0314 	sub.w	r3, r2, #20
 8012320:	2b1e      	cmp	r3, #30
 8012322:	bfd6      	itet	le
 8012324:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012328:	2301      	movgt	r3, #1
 801232a:	fa22 f303 	lsrle.w	r3, r2, r3
 801232e:	4618      	mov	r0, r3
 8012330:	4770      	bx	lr
 8012332:	bf00      	nop
 8012334:	7ff00000 	.word	0x7ff00000

08012338 <__b2d>:
 8012338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801233c:	6907      	ldr	r7, [r0, #16]
 801233e:	f100 0914 	add.w	r9, r0, #20
 8012342:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8012346:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801234a:	f1a7 0804 	sub.w	r8, r7, #4
 801234e:	4630      	mov	r0, r6
 8012350:	f7ff fd4e 	bl	8011df0 <__hi0bits>
 8012354:	f1c0 0320 	rsb	r3, r0, #32
 8012358:	280a      	cmp	r0, #10
 801235a:	600b      	str	r3, [r1, #0]
 801235c:	491f      	ldr	r1, [pc, #124]	; (80123dc <__b2d+0xa4>)
 801235e:	dc17      	bgt.n	8012390 <__b2d+0x58>
 8012360:	45c1      	cmp	r9, r8
 8012362:	bf28      	it	cs
 8012364:	2200      	movcs	r2, #0
 8012366:	f1c0 0c0b 	rsb	ip, r0, #11
 801236a:	fa26 f30c 	lsr.w	r3, r6, ip
 801236e:	bf38      	it	cc
 8012370:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8012374:	ea43 0501 	orr.w	r5, r3, r1
 8012378:	f100 0315 	add.w	r3, r0, #21
 801237c:	fa06 f303 	lsl.w	r3, r6, r3
 8012380:	fa22 f20c 	lsr.w	r2, r2, ip
 8012384:	ea43 0402 	orr.w	r4, r3, r2
 8012388:	4620      	mov	r0, r4
 801238a:	4629      	mov	r1, r5
 801238c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012390:	45c1      	cmp	r9, r8
 8012392:	bf2e      	itee	cs
 8012394:	2200      	movcs	r2, #0
 8012396:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801239a:	f1a7 0808 	subcc.w	r8, r7, #8
 801239e:	f1b0 030b 	subs.w	r3, r0, #11
 80123a2:	d016      	beq.n	80123d2 <__b2d+0x9a>
 80123a4:	f1c3 0720 	rsb	r7, r3, #32
 80123a8:	fa22 f107 	lsr.w	r1, r2, r7
 80123ac:	45c8      	cmp	r8, r9
 80123ae:	fa06 f603 	lsl.w	r6, r6, r3
 80123b2:	ea46 0601 	orr.w	r6, r6, r1
 80123b6:	bf94      	ite	ls
 80123b8:	2100      	movls	r1, #0
 80123ba:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80123be:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80123c2:	fa02 f003 	lsl.w	r0, r2, r3
 80123c6:	40f9      	lsrs	r1, r7
 80123c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80123cc:	ea40 0401 	orr.w	r4, r0, r1
 80123d0:	e7da      	b.n	8012388 <__b2d+0x50>
 80123d2:	4614      	mov	r4, r2
 80123d4:	ea46 0501 	orr.w	r5, r6, r1
 80123d8:	e7d6      	b.n	8012388 <__b2d+0x50>
 80123da:	bf00      	nop
 80123dc:	3ff00000 	.word	0x3ff00000

080123e0 <__d2b>:
 80123e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80123e4:	2101      	movs	r1, #1
 80123e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80123ea:	4690      	mov	r8, r2
 80123ec:	461d      	mov	r5, r3
 80123ee:	f7ff fc0d 	bl	8011c0c <_Balloc>
 80123f2:	4604      	mov	r4, r0
 80123f4:	b930      	cbnz	r0, 8012404 <__d2b+0x24>
 80123f6:	4602      	mov	r2, r0
 80123f8:	f240 310a 	movw	r1, #778	; 0x30a
 80123fc:	4b24      	ldr	r3, [pc, #144]	; (8012490 <__d2b+0xb0>)
 80123fe:	4825      	ldr	r0, [pc, #148]	; (8012494 <__d2b+0xb4>)
 8012400:	f7fe f9c6 	bl	8010790 <__assert_func>
 8012404:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8012408:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801240c:	bb2d      	cbnz	r5, 801245a <__d2b+0x7a>
 801240e:	9301      	str	r3, [sp, #4]
 8012410:	f1b8 0300 	subs.w	r3, r8, #0
 8012414:	d026      	beq.n	8012464 <__d2b+0x84>
 8012416:	4668      	mov	r0, sp
 8012418:	9300      	str	r3, [sp, #0]
 801241a:	f7ff fd09 	bl	8011e30 <__lo0bits>
 801241e:	9900      	ldr	r1, [sp, #0]
 8012420:	b1f0      	cbz	r0, 8012460 <__d2b+0x80>
 8012422:	9a01      	ldr	r2, [sp, #4]
 8012424:	f1c0 0320 	rsb	r3, r0, #32
 8012428:	fa02 f303 	lsl.w	r3, r2, r3
 801242c:	430b      	orrs	r3, r1
 801242e:	40c2      	lsrs	r2, r0
 8012430:	6163      	str	r3, [r4, #20]
 8012432:	9201      	str	r2, [sp, #4]
 8012434:	9b01      	ldr	r3, [sp, #4]
 8012436:	2b00      	cmp	r3, #0
 8012438:	bf14      	ite	ne
 801243a:	2102      	movne	r1, #2
 801243c:	2101      	moveq	r1, #1
 801243e:	61a3      	str	r3, [r4, #24]
 8012440:	6121      	str	r1, [r4, #16]
 8012442:	b1c5      	cbz	r5, 8012476 <__d2b+0x96>
 8012444:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012448:	4405      	add	r5, r0
 801244a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801244e:	603d      	str	r5, [r7, #0]
 8012450:	6030      	str	r0, [r6, #0]
 8012452:	4620      	mov	r0, r4
 8012454:	b002      	add	sp, #8
 8012456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801245a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801245e:	e7d6      	b.n	801240e <__d2b+0x2e>
 8012460:	6161      	str	r1, [r4, #20]
 8012462:	e7e7      	b.n	8012434 <__d2b+0x54>
 8012464:	a801      	add	r0, sp, #4
 8012466:	f7ff fce3 	bl	8011e30 <__lo0bits>
 801246a:	2101      	movs	r1, #1
 801246c:	9b01      	ldr	r3, [sp, #4]
 801246e:	6121      	str	r1, [r4, #16]
 8012470:	6163      	str	r3, [r4, #20]
 8012472:	3020      	adds	r0, #32
 8012474:	e7e5      	b.n	8012442 <__d2b+0x62>
 8012476:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801247a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801247e:	6038      	str	r0, [r7, #0]
 8012480:	6918      	ldr	r0, [r3, #16]
 8012482:	f7ff fcb5 	bl	8011df0 <__hi0bits>
 8012486:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801248a:	6031      	str	r1, [r6, #0]
 801248c:	e7e1      	b.n	8012452 <__d2b+0x72>
 801248e:	bf00      	nop
 8012490:	08013ab8 	.word	0x08013ab8
 8012494:	08013b44 	.word	0x08013b44

08012498 <__ratio>:
 8012498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801249c:	4688      	mov	r8, r1
 801249e:	4669      	mov	r1, sp
 80124a0:	4681      	mov	r9, r0
 80124a2:	f7ff ff49 	bl	8012338 <__b2d>
 80124a6:	460f      	mov	r7, r1
 80124a8:	4604      	mov	r4, r0
 80124aa:	460d      	mov	r5, r1
 80124ac:	4640      	mov	r0, r8
 80124ae:	a901      	add	r1, sp, #4
 80124b0:	f7ff ff42 	bl	8012338 <__b2d>
 80124b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80124b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80124bc:	468b      	mov	fp, r1
 80124be:	eba3 0c02 	sub.w	ip, r3, r2
 80124c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80124c6:	1a9b      	subs	r3, r3, r2
 80124c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	bfd5      	itete	le
 80124d0:	460a      	movle	r2, r1
 80124d2:	462a      	movgt	r2, r5
 80124d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80124d8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80124dc:	bfd8      	it	le
 80124de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80124e2:	465b      	mov	r3, fp
 80124e4:	4602      	mov	r2, r0
 80124e6:	4639      	mov	r1, r7
 80124e8:	4620      	mov	r0, r4
 80124ea:	f7ee f941 	bl	8000770 <__aeabi_ddiv>
 80124ee:	b003      	add	sp, #12
 80124f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124f4 <__copybits>:
 80124f4:	3901      	subs	r1, #1
 80124f6:	b570      	push	{r4, r5, r6, lr}
 80124f8:	1149      	asrs	r1, r1, #5
 80124fa:	6914      	ldr	r4, [r2, #16]
 80124fc:	3101      	adds	r1, #1
 80124fe:	f102 0314 	add.w	r3, r2, #20
 8012502:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012506:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801250a:	1f05      	subs	r5, r0, #4
 801250c:	42a3      	cmp	r3, r4
 801250e:	d30c      	bcc.n	801252a <__copybits+0x36>
 8012510:	1aa3      	subs	r3, r4, r2
 8012512:	3b11      	subs	r3, #17
 8012514:	f023 0303 	bic.w	r3, r3, #3
 8012518:	3211      	adds	r2, #17
 801251a:	42a2      	cmp	r2, r4
 801251c:	bf88      	it	hi
 801251e:	2300      	movhi	r3, #0
 8012520:	4418      	add	r0, r3
 8012522:	2300      	movs	r3, #0
 8012524:	4288      	cmp	r0, r1
 8012526:	d305      	bcc.n	8012534 <__copybits+0x40>
 8012528:	bd70      	pop	{r4, r5, r6, pc}
 801252a:	f853 6b04 	ldr.w	r6, [r3], #4
 801252e:	f845 6f04 	str.w	r6, [r5, #4]!
 8012532:	e7eb      	b.n	801250c <__copybits+0x18>
 8012534:	f840 3b04 	str.w	r3, [r0], #4
 8012538:	e7f4      	b.n	8012524 <__copybits+0x30>

0801253a <__any_on>:
 801253a:	f100 0214 	add.w	r2, r0, #20
 801253e:	6900      	ldr	r0, [r0, #16]
 8012540:	114b      	asrs	r3, r1, #5
 8012542:	4298      	cmp	r0, r3
 8012544:	b510      	push	{r4, lr}
 8012546:	db11      	blt.n	801256c <__any_on+0x32>
 8012548:	dd0a      	ble.n	8012560 <__any_on+0x26>
 801254a:	f011 011f 	ands.w	r1, r1, #31
 801254e:	d007      	beq.n	8012560 <__any_on+0x26>
 8012550:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012554:	fa24 f001 	lsr.w	r0, r4, r1
 8012558:	fa00 f101 	lsl.w	r1, r0, r1
 801255c:	428c      	cmp	r4, r1
 801255e:	d10b      	bne.n	8012578 <__any_on+0x3e>
 8012560:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012564:	4293      	cmp	r3, r2
 8012566:	d803      	bhi.n	8012570 <__any_on+0x36>
 8012568:	2000      	movs	r0, #0
 801256a:	bd10      	pop	{r4, pc}
 801256c:	4603      	mov	r3, r0
 801256e:	e7f7      	b.n	8012560 <__any_on+0x26>
 8012570:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012574:	2900      	cmp	r1, #0
 8012576:	d0f5      	beq.n	8012564 <__any_on+0x2a>
 8012578:	2001      	movs	r0, #1
 801257a:	e7f6      	b.n	801256a <__any_on+0x30>

0801257c <_calloc_r>:
 801257c:	b570      	push	{r4, r5, r6, lr}
 801257e:	fba1 5402 	umull	r5, r4, r1, r2
 8012582:	b934      	cbnz	r4, 8012592 <_calloc_r+0x16>
 8012584:	4629      	mov	r1, r5
 8012586:	f000 f875 	bl	8012674 <_malloc_r>
 801258a:	4606      	mov	r6, r0
 801258c:	b928      	cbnz	r0, 801259a <_calloc_r+0x1e>
 801258e:	4630      	mov	r0, r6
 8012590:	bd70      	pop	{r4, r5, r6, pc}
 8012592:	220c      	movs	r2, #12
 8012594:	2600      	movs	r6, #0
 8012596:	6002      	str	r2, [r0, #0]
 8012598:	e7f9      	b.n	801258e <_calloc_r+0x12>
 801259a:	462a      	mov	r2, r5
 801259c:	4621      	mov	r1, r4
 801259e:	f7fc fdf3 	bl	800f188 <memset>
 80125a2:	e7f4      	b.n	801258e <_calloc_r+0x12>

080125a4 <_free_r>:
 80125a4:	b538      	push	{r3, r4, r5, lr}
 80125a6:	4605      	mov	r5, r0
 80125a8:	2900      	cmp	r1, #0
 80125aa:	d040      	beq.n	801262e <_free_r+0x8a>
 80125ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125b0:	1f0c      	subs	r4, r1, #4
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	bfb8      	it	lt
 80125b6:	18e4      	addlt	r4, r4, r3
 80125b8:	f000 feba 	bl	8013330 <__malloc_lock>
 80125bc:	4a1c      	ldr	r2, [pc, #112]	; (8012630 <_free_r+0x8c>)
 80125be:	6813      	ldr	r3, [r2, #0]
 80125c0:	b933      	cbnz	r3, 80125d0 <_free_r+0x2c>
 80125c2:	6063      	str	r3, [r4, #4]
 80125c4:	6014      	str	r4, [r2, #0]
 80125c6:	4628      	mov	r0, r5
 80125c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125cc:	f000 beb6 	b.w	801333c <__malloc_unlock>
 80125d0:	42a3      	cmp	r3, r4
 80125d2:	d908      	bls.n	80125e6 <_free_r+0x42>
 80125d4:	6820      	ldr	r0, [r4, #0]
 80125d6:	1821      	adds	r1, r4, r0
 80125d8:	428b      	cmp	r3, r1
 80125da:	bf01      	itttt	eq
 80125dc:	6819      	ldreq	r1, [r3, #0]
 80125de:	685b      	ldreq	r3, [r3, #4]
 80125e0:	1809      	addeq	r1, r1, r0
 80125e2:	6021      	streq	r1, [r4, #0]
 80125e4:	e7ed      	b.n	80125c2 <_free_r+0x1e>
 80125e6:	461a      	mov	r2, r3
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	b10b      	cbz	r3, 80125f0 <_free_r+0x4c>
 80125ec:	42a3      	cmp	r3, r4
 80125ee:	d9fa      	bls.n	80125e6 <_free_r+0x42>
 80125f0:	6811      	ldr	r1, [r2, #0]
 80125f2:	1850      	adds	r0, r2, r1
 80125f4:	42a0      	cmp	r0, r4
 80125f6:	d10b      	bne.n	8012610 <_free_r+0x6c>
 80125f8:	6820      	ldr	r0, [r4, #0]
 80125fa:	4401      	add	r1, r0
 80125fc:	1850      	adds	r0, r2, r1
 80125fe:	4283      	cmp	r3, r0
 8012600:	6011      	str	r1, [r2, #0]
 8012602:	d1e0      	bne.n	80125c6 <_free_r+0x22>
 8012604:	6818      	ldr	r0, [r3, #0]
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	4401      	add	r1, r0
 801260a:	6011      	str	r1, [r2, #0]
 801260c:	6053      	str	r3, [r2, #4]
 801260e:	e7da      	b.n	80125c6 <_free_r+0x22>
 8012610:	d902      	bls.n	8012618 <_free_r+0x74>
 8012612:	230c      	movs	r3, #12
 8012614:	602b      	str	r3, [r5, #0]
 8012616:	e7d6      	b.n	80125c6 <_free_r+0x22>
 8012618:	6820      	ldr	r0, [r4, #0]
 801261a:	1821      	adds	r1, r4, r0
 801261c:	428b      	cmp	r3, r1
 801261e:	bf01      	itttt	eq
 8012620:	6819      	ldreq	r1, [r3, #0]
 8012622:	685b      	ldreq	r3, [r3, #4]
 8012624:	1809      	addeq	r1, r1, r0
 8012626:	6021      	streq	r1, [r4, #0]
 8012628:	6063      	str	r3, [r4, #4]
 801262a:	6054      	str	r4, [r2, #4]
 801262c:	e7cb      	b.n	80125c6 <_free_r+0x22>
 801262e:	bd38      	pop	{r3, r4, r5, pc}
 8012630:	200019bc 	.word	0x200019bc

08012634 <sbrk_aligned>:
 8012634:	b570      	push	{r4, r5, r6, lr}
 8012636:	4e0e      	ldr	r6, [pc, #56]	; (8012670 <sbrk_aligned+0x3c>)
 8012638:	460c      	mov	r4, r1
 801263a:	6831      	ldr	r1, [r6, #0]
 801263c:	4605      	mov	r5, r0
 801263e:	b911      	cbnz	r1, 8012646 <sbrk_aligned+0x12>
 8012640:	f000 fb46 	bl	8012cd0 <_sbrk_r>
 8012644:	6030      	str	r0, [r6, #0]
 8012646:	4621      	mov	r1, r4
 8012648:	4628      	mov	r0, r5
 801264a:	f000 fb41 	bl	8012cd0 <_sbrk_r>
 801264e:	1c43      	adds	r3, r0, #1
 8012650:	d00a      	beq.n	8012668 <sbrk_aligned+0x34>
 8012652:	1cc4      	adds	r4, r0, #3
 8012654:	f024 0403 	bic.w	r4, r4, #3
 8012658:	42a0      	cmp	r0, r4
 801265a:	d007      	beq.n	801266c <sbrk_aligned+0x38>
 801265c:	1a21      	subs	r1, r4, r0
 801265e:	4628      	mov	r0, r5
 8012660:	f000 fb36 	bl	8012cd0 <_sbrk_r>
 8012664:	3001      	adds	r0, #1
 8012666:	d101      	bne.n	801266c <sbrk_aligned+0x38>
 8012668:	f04f 34ff 	mov.w	r4, #4294967295
 801266c:	4620      	mov	r0, r4
 801266e:	bd70      	pop	{r4, r5, r6, pc}
 8012670:	200019c0 	.word	0x200019c0

08012674 <_malloc_r>:
 8012674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012678:	1ccd      	adds	r5, r1, #3
 801267a:	f025 0503 	bic.w	r5, r5, #3
 801267e:	3508      	adds	r5, #8
 8012680:	2d0c      	cmp	r5, #12
 8012682:	bf38      	it	cc
 8012684:	250c      	movcc	r5, #12
 8012686:	2d00      	cmp	r5, #0
 8012688:	4607      	mov	r7, r0
 801268a:	db01      	blt.n	8012690 <_malloc_r+0x1c>
 801268c:	42a9      	cmp	r1, r5
 801268e:	d905      	bls.n	801269c <_malloc_r+0x28>
 8012690:	230c      	movs	r3, #12
 8012692:	2600      	movs	r6, #0
 8012694:	603b      	str	r3, [r7, #0]
 8012696:	4630      	mov	r0, r6
 8012698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801269c:	4e2e      	ldr	r6, [pc, #184]	; (8012758 <_malloc_r+0xe4>)
 801269e:	f000 fe47 	bl	8013330 <__malloc_lock>
 80126a2:	6833      	ldr	r3, [r6, #0]
 80126a4:	461c      	mov	r4, r3
 80126a6:	bb34      	cbnz	r4, 80126f6 <_malloc_r+0x82>
 80126a8:	4629      	mov	r1, r5
 80126aa:	4638      	mov	r0, r7
 80126ac:	f7ff ffc2 	bl	8012634 <sbrk_aligned>
 80126b0:	1c43      	adds	r3, r0, #1
 80126b2:	4604      	mov	r4, r0
 80126b4:	d14d      	bne.n	8012752 <_malloc_r+0xde>
 80126b6:	6834      	ldr	r4, [r6, #0]
 80126b8:	4626      	mov	r6, r4
 80126ba:	2e00      	cmp	r6, #0
 80126bc:	d140      	bne.n	8012740 <_malloc_r+0xcc>
 80126be:	6823      	ldr	r3, [r4, #0]
 80126c0:	4631      	mov	r1, r6
 80126c2:	4638      	mov	r0, r7
 80126c4:	eb04 0803 	add.w	r8, r4, r3
 80126c8:	f000 fb02 	bl	8012cd0 <_sbrk_r>
 80126cc:	4580      	cmp	r8, r0
 80126ce:	d13a      	bne.n	8012746 <_malloc_r+0xd2>
 80126d0:	6821      	ldr	r1, [r4, #0]
 80126d2:	3503      	adds	r5, #3
 80126d4:	1a6d      	subs	r5, r5, r1
 80126d6:	f025 0503 	bic.w	r5, r5, #3
 80126da:	3508      	adds	r5, #8
 80126dc:	2d0c      	cmp	r5, #12
 80126de:	bf38      	it	cc
 80126e0:	250c      	movcc	r5, #12
 80126e2:	4638      	mov	r0, r7
 80126e4:	4629      	mov	r1, r5
 80126e6:	f7ff ffa5 	bl	8012634 <sbrk_aligned>
 80126ea:	3001      	adds	r0, #1
 80126ec:	d02b      	beq.n	8012746 <_malloc_r+0xd2>
 80126ee:	6823      	ldr	r3, [r4, #0]
 80126f0:	442b      	add	r3, r5
 80126f2:	6023      	str	r3, [r4, #0]
 80126f4:	e00e      	b.n	8012714 <_malloc_r+0xa0>
 80126f6:	6822      	ldr	r2, [r4, #0]
 80126f8:	1b52      	subs	r2, r2, r5
 80126fa:	d41e      	bmi.n	801273a <_malloc_r+0xc6>
 80126fc:	2a0b      	cmp	r2, #11
 80126fe:	d916      	bls.n	801272e <_malloc_r+0xba>
 8012700:	1961      	adds	r1, r4, r5
 8012702:	42a3      	cmp	r3, r4
 8012704:	6025      	str	r5, [r4, #0]
 8012706:	bf18      	it	ne
 8012708:	6059      	strne	r1, [r3, #4]
 801270a:	6863      	ldr	r3, [r4, #4]
 801270c:	bf08      	it	eq
 801270e:	6031      	streq	r1, [r6, #0]
 8012710:	5162      	str	r2, [r4, r5]
 8012712:	604b      	str	r3, [r1, #4]
 8012714:	4638      	mov	r0, r7
 8012716:	f104 060b 	add.w	r6, r4, #11
 801271a:	f000 fe0f 	bl	801333c <__malloc_unlock>
 801271e:	f026 0607 	bic.w	r6, r6, #7
 8012722:	1d23      	adds	r3, r4, #4
 8012724:	1af2      	subs	r2, r6, r3
 8012726:	d0b6      	beq.n	8012696 <_malloc_r+0x22>
 8012728:	1b9b      	subs	r3, r3, r6
 801272a:	50a3      	str	r3, [r4, r2]
 801272c:	e7b3      	b.n	8012696 <_malloc_r+0x22>
 801272e:	6862      	ldr	r2, [r4, #4]
 8012730:	42a3      	cmp	r3, r4
 8012732:	bf0c      	ite	eq
 8012734:	6032      	streq	r2, [r6, #0]
 8012736:	605a      	strne	r2, [r3, #4]
 8012738:	e7ec      	b.n	8012714 <_malloc_r+0xa0>
 801273a:	4623      	mov	r3, r4
 801273c:	6864      	ldr	r4, [r4, #4]
 801273e:	e7b2      	b.n	80126a6 <_malloc_r+0x32>
 8012740:	4634      	mov	r4, r6
 8012742:	6876      	ldr	r6, [r6, #4]
 8012744:	e7b9      	b.n	80126ba <_malloc_r+0x46>
 8012746:	230c      	movs	r3, #12
 8012748:	4638      	mov	r0, r7
 801274a:	603b      	str	r3, [r7, #0]
 801274c:	f000 fdf6 	bl	801333c <__malloc_unlock>
 8012750:	e7a1      	b.n	8012696 <_malloc_r+0x22>
 8012752:	6025      	str	r5, [r4, #0]
 8012754:	e7de      	b.n	8012714 <_malloc_r+0xa0>
 8012756:	bf00      	nop
 8012758:	200019bc 	.word	0x200019bc

0801275c <__ssputs_r>:
 801275c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012760:	688e      	ldr	r6, [r1, #8]
 8012762:	4682      	mov	sl, r0
 8012764:	429e      	cmp	r6, r3
 8012766:	460c      	mov	r4, r1
 8012768:	4690      	mov	r8, r2
 801276a:	461f      	mov	r7, r3
 801276c:	d838      	bhi.n	80127e0 <__ssputs_r+0x84>
 801276e:	898a      	ldrh	r2, [r1, #12]
 8012770:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012774:	d032      	beq.n	80127dc <__ssputs_r+0x80>
 8012776:	6825      	ldr	r5, [r4, #0]
 8012778:	6909      	ldr	r1, [r1, #16]
 801277a:	3301      	adds	r3, #1
 801277c:	eba5 0901 	sub.w	r9, r5, r1
 8012780:	6965      	ldr	r5, [r4, #20]
 8012782:	444b      	add	r3, r9
 8012784:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012788:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801278c:	106d      	asrs	r5, r5, #1
 801278e:	429d      	cmp	r5, r3
 8012790:	bf38      	it	cc
 8012792:	461d      	movcc	r5, r3
 8012794:	0553      	lsls	r3, r2, #21
 8012796:	d531      	bpl.n	80127fc <__ssputs_r+0xa0>
 8012798:	4629      	mov	r1, r5
 801279a:	f7ff ff6b 	bl	8012674 <_malloc_r>
 801279e:	4606      	mov	r6, r0
 80127a0:	b950      	cbnz	r0, 80127b8 <__ssputs_r+0x5c>
 80127a2:	230c      	movs	r3, #12
 80127a4:	f04f 30ff 	mov.w	r0, #4294967295
 80127a8:	f8ca 3000 	str.w	r3, [sl]
 80127ac:	89a3      	ldrh	r3, [r4, #12]
 80127ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127b2:	81a3      	strh	r3, [r4, #12]
 80127b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127b8:	464a      	mov	r2, r9
 80127ba:	6921      	ldr	r1, [r4, #16]
 80127bc:	f7fc fcd6 	bl	800f16c <memcpy>
 80127c0:	89a3      	ldrh	r3, [r4, #12]
 80127c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80127c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127ca:	81a3      	strh	r3, [r4, #12]
 80127cc:	6126      	str	r6, [r4, #16]
 80127ce:	444e      	add	r6, r9
 80127d0:	6026      	str	r6, [r4, #0]
 80127d2:	463e      	mov	r6, r7
 80127d4:	6165      	str	r5, [r4, #20]
 80127d6:	eba5 0509 	sub.w	r5, r5, r9
 80127da:	60a5      	str	r5, [r4, #8]
 80127dc:	42be      	cmp	r6, r7
 80127de:	d900      	bls.n	80127e2 <__ssputs_r+0x86>
 80127e0:	463e      	mov	r6, r7
 80127e2:	4632      	mov	r2, r6
 80127e4:	4641      	mov	r1, r8
 80127e6:	6820      	ldr	r0, [r4, #0]
 80127e8:	f000 fd88 	bl	80132fc <memmove>
 80127ec:	68a3      	ldr	r3, [r4, #8]
 80127ee:	2000      	movs	r0, #0
 80127f0:	1b9b      	subs	r3, r3, r6
 80127f2:	60a3      	str	r3, [r4, #8]
 80127f4:	6823      	ldr	r3, [r4, #0]
 80127f6:	4433      	add	r3, r6
 80127f8:	6023      	str	r3, [r4, #0]
 80127fa:	e7db      	b.n	80127b4 <__ssputs_r+0x58>
 80127fc:	462a      	mov	r2, r5
 80127fe:	f000 fda3 	bl	8013348 <_realloc_r>
 8012802:	4606      	mov	r6, r0
 8012804:	2800      	cmp	r0, #0
 8012806:	d1e1      	bne.n	80127cc <__ssputs_r+0x70>
 8012808:	4650      	mov	r0, sl
 801280a:	6921      	ldr	r1, [r4, #16]
 801280c:	f7ff feca 	bl	80125a4 <_free_r>
 8012810:	e7c7      	b.n	80127a2 <__ssputs_r+0x46>
	...

08012814 <_svfiprintf_r>:
 8012814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012818:	4698      	mov	r8, r3
 801281a:	898b      	ldrh	r3, [r1, #12]
 801281c:	4607      	mov	r7, r0
 801281e:	061b      	lsls	r3, r3, #24
 8012820:	460d      	mov	r5, r1
 8012822:	4614      	mov	r4, r2
 8012824:	b09d      	sub	sp, #116	; 0x74
 8012826:	d50e      	bpl.n	8012846 <_svfiprintf_r+0x32>
 8012828:	690b      	ldr	r3, [r1, #16]
 801282a:	b963      	cbnz	r3, 8012846 <_svfiprintf_r+0x32>
 801282c:	2140      	movs	r1, #64	; 0x40
 801282e:	f7ff ff21 	bl	8012674 <_malloc_r>
 8012832:	6028      	str	r0, [r5, #0]
 8012834:	6128      	str	r0, [r5, #16]
 8012836:	b920      	cbnz	r0, 8012842 <_svfiprintf_r+0x2e>
 8012838:	230c      	movs	r3, #12
 801283a:	603b      	str	r3, [r7, #0]
 801283c:	f04f 30ff 	mov.w	r0, #4294967295
 8012840:	e0d1      	b.n	80129e6 <_svfiprintf_r+0x1d2>
 8012842:	2340      	movs	r3, #64	; 0x40
 8012844:	616b      	str	r3, [r5, #20]
 8012846:	2300      	movs	r3, #0
 8012848:	9309      	str	r3, [sp, #36]	; 0x24
 801284a:	2320      	movs	r3, #32
 801284c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012850:	2330      	movs	r3, #48	; 0x30
 8012852:	f04f 0901 	mov.w	r9, #1
 8012856:	f8cd 800c 	str.w	r8, [sp, #12]
 801285a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012a00 <_svfiprintf_r+0x1ec>
 801285e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012862:	4623      	mov	r3, r4
 8012864:	469a      	mov	sl, r3
 8012866:	f813 2b01 	ldrb.w	r2, [r3], #1
 801286a:	b10a      	cbz	r2, 8012870 <_svfiprintf_r+0x5c>
 801286c:	2a25      	cmp	r2, #37	; 0x25
 801286e:	d1f9      	bne.n	8012864 <_svfiprintf_r+0x50>
 8012870:	ebba 0b04 	subs.w	fp, sl, r4
 8012874:	d00b      	beq.n	801288e <_svfiprintf_r+0x7a>
 8012876:	465b      	mov	r3, fp
 8012878:	4622      	mov	r2, r4
 801287a:	4629      	mov	r1, r5
 801287c:	4638      	mov	r0, r7
 801287e:	f7ff ff6d 	bl	801275c <__ssputs_r>
 8012882:	3001      	adds	r0, #1
 8012884:	f000 80aa 	beq.w	80129dc <_svfiprintf_r+0x1c8>
 8012888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801288a:	445a      	add	r2, fp
 801288c:	9209      	str	r2, [sp, #36]	; 0x24
 801288e:	f89a 3000 	ldrb.w	r3, [sl]
 8012892:	2b00      	cmp	r3, #0
 8012894:	f000 80a2 	beq.w	80129dc <_svfiprintf_r+0x1c8>
 8012898:	2300      	movs	r3, #0
 801289a:	f04f 32ff 	mov.w	r2, #4294967295
 801289e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128a2:	f10a 0a01 	add.w	sl, sl, #1
 80128a6:	9304      	str	r3, [sp, #16]
 80128a8:	9307      	str	r3, [sp, #28]
 80128aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128ae:	931a      	str	r3, [sp, #104]	; 0x68
 80128b0:	4654      	mov	r4, sl
 80128b2:	2205      	movs	r2, #5
 80128b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128b8:	4851      	ldr	r0, [pc, #324]	; (8012a00 <_svfiprintf_r+0x1ec>)
 80128ba:	f7ff f999 	bl	8011bf0 <memchr>
 80128be:	9a04      	ldr	r2, [sp, #16]
 80128c0:	b9d8      	cbnz	r0, 80128fa <_svfiprintf_r+0xe6>
 80128c2:	06d0      	lsls	r0, r2, #27
 80128c4:	bf44      	itt	mi
 80128c6:	2320      	movmi	r3, #32
 80128c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128cc:	0711      	lsls	r1, r2, #28
 80128ce:	bf44      	itt	mi
 80128d0:	232b      	movmi	r3, #43	; 0x2b
 80128d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128d6:	f89a 3000 	ldrb.w	r3, [sl]
 80128da:	2b2a      	cmp	r3, #42	; 0x2a
 80128dc:	d015      	beq.n	801290a <_svfiprintf_r+0xf6>
 80128de:	4654      	mov	r4, sl
 80128e0:	2000      	movs	r0, #0
 80128e2:	f04f 0c0a 	mov.w	ip, #10
 80128e6:	9a07      	ldr	r2, [sp, #28]
 80128e8:	4621      	mov	r1, r4
 80128ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128ee:	3b30      	subs	r3, #48	; 0x30
 80128f0:	2b09      	cmp	r3, #9
 80128f2:	d94e      	bls.n	8012992 <_svfiprintf_r+0x17e>
 80128f4:	b1b0      	cbz	r0, 8012924 <_svfiprintf_r+0x110>
 80128f6:	9207      	str	r2, [sp, #28]
 80128f8:	e014      	b.n	8012924 <_svfiprintf_r+0x110>
 80128fa:	eba0 0308 	sub.w	r3, r0, r8
 80128fe:	fa09 f303 	lsl.w	r3, r9, r3
 8012902:	4313      	orrs	r3, r2
 8012904:	46a2      	mov	sl, r4
 8012906:	9304      	str	r3, [sp, #16]
 8012908:	e7d2      	b.n	80128b0 <_svfiprintf_r+0x9c>
 801290a:	9b03      	ldr	r3, [sp, #12]
 801290c:	1d19      	adds	r1, r3, #4
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	9103      	str	r1, [sp, #12]
 8012912:	2b00      	cmp	r3, #0
 8012914:	bfbb      	ittet	lt
 8012916:	425b      	neglt	r3, r3
 8012918:	f042 0202 	orrlt.w	r2, r2, #2
 801291c:	9307      	strge	r3, [sp, #28]
 801291e:	9307      	strlt	r3, [sp, #28]
 8012920:	bfb8      	it	lt
 8012922:	9204      	strlt	r2, [sp, #16]
 8012924:	7823      	ldrb	r3, [r4, #0]
 8012926:	2b2e      	cmp	r3, #46	; 0x2e
 8012928:	d10c      	bne.n	8012944 <_svfiprintf_r+0x130>
 801292a:	7863      	ldrb	r3, [r4, #1]
 801292c:	2b2a      	cmp	r3, #42	; 0x2a
 801292e:	d135      	bne.n	801299c <_svfiprintf_r+0x188>
 8012930:	9b03      	ldr	r3, [sp, #12]
 8012932:	3402      	adds	r4, #2
 8012934:	1d1a      	adds	r2, r3, #4
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	9203      	str	r2, [sp, #12]
 801293a:	2b00      	cmp	r3, #0
 801293c:	bfb8      	it	lt
 801293e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012942:	9305      	str	r3, [sp, #20]
 8012944:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8012a04 <_svfiprintf_r+0x1f0>
 8012948:	2203      	movs	r2, #3
 801294a:	4650      	mov	r0, sl
 801294c:	7821      	ldrb	r1, [r4, #0]
 801294e:	f7ff f94f 	bl	8011bf0 <memchr>
 8012952:	b140      	cbz	r0, 8012966 <_svfiprintf_r+0x152>
 8012954:	2340      	movs	r3, #64	; 0x40
 8012956:	eba0 000a 	sub.w	r0, r0, sl
 801295a:	fa03 f000 	lsl.w	r0, r3, r0
 801295e:	9b04      	ldr	r3, [sp, #16]
 8012960:	3401      	adds	r4, #1
 8012962:	4303      	orrs	r3, r0
 8012964:	9304      	str	r3, [sp, #16]
 8012966:	f814 1b01 	ldrb.w	r1, [r4], #1
 801296a:	2206      	movs	r2, #6
 801296c:	4826      	ldr	r0, [pc, #152]	; (8012a08 <_svfiprintf_r+0x1f4>)
 801296e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012972:	f7ff f93d 	bl	8011bf0 <memchr>
 8012976:	2800      	cmp	r0, #0
 8012978:	d038      	beq.n	80129ec <_svfiprintf_r+0x1d8>
 801297a:	4b24      	ldr	r3, [pc, #144]	; (8012a0c <_svfiprintf_r+0x1f8>)
 801297c:	bb1b      	cbnz	r3, 80129c6 <_svfiprintf_r+0x1b2>
 801297e:	9b03      	ldr	r3, [sp, #12]
 8012980:	3307      	adds	r3, #7
 8012982:	f023 0307 	bic.w	r3, r3, #7
 8012986:	3308      	adds	r3, #8
 8012988:	9303      	str	r3, [sp, #12]
 801298a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801298c:	4433      	add	r3, r6
 801298e:	9309      	str	r3, [sp, #36]	; 0x24
 8012990:	e767      	b.n	8012862 <_svfiprintf_r+0x4e>
 8012992:	460c      	mov	r4, r1
 8012994:	2001      	movs	r0, #1
 8012996:	fb0c 3202 	mla	r2, ip, r2, r3
 801299a:	e7a5      	b.n	80128e8 <_svfiprintf_r+0xd4>
 801299c:	2300      	movs	r3, #0
 801299e:	f04f 0c0a 	mov.w	ip, #10
 80129a2:	4619      	mov	r1, r3
 80129a4:	3401      	adds	r4, #1
 80129a6:	9305      	str	r3, [sp, #20]
 80129a8:	4620      	mov	r0, r4
 80129aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129ae:	3a30      	subs	r2, #48	; 0x30
 80129b0:	2a09      	cmp	r2, #9
 80129b2:	d903      	bls.n	80129bc <_svfiprintf_r+0x1a8>
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d0c5      	beq.n	8012944 <_svfiprintf_r+0x130>
 80129b8:	9105      	str	r1, [sp, #20]
 80129ba:	e7c3      	b.n	8012944 <_svfiprintf_r+0x130>
 80129bc:	4604      	mov	r4, r0
 80129be:	2301      	movs	r3, #1
 80129c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80129c4:	e7f0      	b.n	80129a8 <_svfiprintf_r+0x194>
 80129c6:	ab03      	add	r3, sp, #12
 80129c8:	9300      	str	r3, [sp, #0]
 80129ca:	462a      	mov	r2, r5
 80129cc:	4638      	mov	r0, r7
 80129ce:	4b10      	ldr	r3, [pc, #64]	; (8012a10 <_svfiprintf_r+0x1fc>)
 80129d0:	a904      	add	r1, sp, #16
 80129d2:	f7fc fc7f 	bl	800f2d4 <_printf_float>
 80129d6:	1c42      	adds	r2, r0, #1
 80129d8:	4606      	mov	r6, r0
 80129da:	d1d6      	bne.n	801298a <_svfiprintf_r+0x176>
 80129dc:	89ab      	ldrh	r3, [r5, #12]
 80129de:	065b      	lsls	r3, r3, #25
 80129e0:	f53f af2c 	bmi.w	801283c <_svfiprintf_r+0x28>
 80129e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129e6:	b01d      	add	sp, #116	; 0x74
 80129e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ec:	ab03      	add	r3, sp, #12
 80129ee:	9300      	str	r3, [sp, #0]
 80129f0:	462a      	mov	r2, r5
 80129f2:	4638      	mov	r0, r7
 80129f4:	4b06      	ldr	r3, [pc, #24]	; (8012a10 <_svfiprintf_r+0x1fc>)
 80129f6:	a904      	add	r1, sp, #16
 80129f8:	f7fc ff08 	bl	800f80c <_printf_i>
 80129fc:	e7eb      	b.n	80129d6 <_svfiprintf_r+0x1c2>
 80129fe:	bf00      	nop
 8012a00:	08013c9c 	.word	0x08013c9c
 8012a04:	08013ca2 	.word	0x08013ca2
 8012a08:	08013ca6 	.word	0x08013ca6
 8012a0c:	0800f2d5 	.word	0x0800f2d5
 8012a10:	0801275d 	.word	0x0801275d

08012a14 <__sfputc_r>:
 8012a14:	6893      	ldr	r3, [r2, #8]
 8012a16:	b410      	push	{r4}
 8012a18:	3b01      	subs	r3, #1
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	6093      	str	r3, [r2, #8]
 8012a1e:	da07      	bge.n	8012a30 <__sfputc_r+0x1c>
 8012a20:	6994      	ldr	r4, [r2, #24]
 8012a22:	42a3      	cmp	r3, r4
 8012a24:	db01      	blt.n	8012a2a <__sfputc_r+0x16>
 8012a26:	290a      	cmp	r1, #10
 8012a28:	d102      	bne.n	8012a30 <__sfputc_r+0x1c>
 8012a2a:	bc10      	pop	{r4}
 8012a2c:	f000 b974 	b.w	8012d18 <__swbuf_r>
 8012a30:	6813      	ldr	r3, [r2, #0]
 8012a32:	1c58      	adds	r0, r3, #1
 8012a34:	6010      	str	r0, [r2, #0]
 8012a36:	7019      	strb	r1, [r3, #0]
 8012a38:	4608      	mov	r0, r1
 8012a3a:	bc10      	pop	{r4}
 8012a3c:	4770      	bx	lr

08012a3e <__sfputs_r>:
 8012a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a40:	4606      	mov	r6, r0
 8012a42:	460f      	mov	r7, r1
 8012a44:	4614      	mov	r4, r2
 8012a46:	18d5      	adds	r5, r2, r3
 8012a48:	42ac      	cmp	r4, r5
 8012a4a:	d101      	bne.n	8012a50 <__sfputs_r+0x12>
 8012a4c:	2000      	movs	r0, #0
 8012a4e:	e007      	b.n	8012a60 <__sfputs_r+0x22>
 8012a50:	463a      	mov	r2, r7
 8012a52:	4630      	mov	r0, r6
 8012a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a58:	f7ff ffdc 	bl	8012a14 <__sfputc_r>
 8012a5c:	1c43      	adds	r3, r0, #1
 8012a5e:	d1f3      	bne.n	8012a48 <__sfputs_r+0xa>
 8012a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a64 <_vfiprintf_r>:
 8012a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a68:	460d      	mov	r5, r1
 8012a6a:	4614      	mov	r4, r2
 8012a6c:	4698      	mov	r8, r3
 8012a6e:	4606      	mov	r6, r0
 8012a70:	b09d      	sub	sp, #116	; 0x74
 8012a72:	b118      	cbz	r0, 8012a7c <_vfiprintf_r+0x18>
 8012a74:	6983      	ldr	r3, [r0, #24]
 8012a76:	b90b      	cbnz	r3, 8012a7c <_vfiprintf_r+0x18>
 8012a78:	f000 fb3a 	bl	80130f0 <__sinit>
 8012a7c:	4b89      	ldr	r3, [pc, #548]	; (8012ca4 <_vfiprintf_r+0x240>)
 8012a7e:	429d      	cmp	r5, r3
 8012a80:	d11b      	bne.n	8012aba <_vfiprintf_r+0x56>
 8012a82:	6875      	ldr	r5, [r6, #4]
 8012a84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a86:	07d9      	lsls	r1, r3, #31
 8012a88:	d405      	bmi.n	8012a96 <_vfiprintf_r+0x32>
 8012a8a:	89ab      	ldrh	r3, [r5, #12]
 8012a8c:	059a      	lsls	r2, r3, #22
 8012a8e:	d402      	bmi.n	8012a96 <_vfiprintf_r+0x32>
 8012a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a92:	f000 fbcb 	bl	801322c <__retarget_lock_acquire_recursive>
 8012a96:	89ab      	ldrh	r3, [r5, #12]
 8012a98:	071b      	lsls	r3, r3, #28
 8012a9a:	d501      	bpl.n	8012aa0 <_vfiprintf_r+0x3c>
 8012a9c:	692b      	ldr	r3, [r5, #16]
 8012a9e:	b9eb      	cbnz	r3, 8012adc <_vfiprintf_r+0x78>
 8012aa0:	4629      	mov	r1, r5
 8012aa2:	4630      	mov	r0, r6
 8012aa4:	f000 f998 	bl	8012dd8 <__swsetup_r>
 8012aa8:	b1c0      	cbz	r0, 8012adc <_vfiprintf_r+0x78>
 8012aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012aac:	07dc      	lsls	r4, r3, #31
 8012aae:	d50e      	bpl.n	8012ace <_vfiprintf_r+0x6a>
 8012ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab4:	b01d      	add	sp, #116	; 0x74
 8012ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aba:	4b7b      	ldr	r3, [pc, #492]	; (8012ca8 <_vfiprintf_r+0x244>)
 8012abc:	429d      	cmp	r5, r3
 8012abe:	d101      	bne.n	8012ac4 <_vfiprintf_r+0x60>
 8012ac0:	68b5      	ldr	r5, [r6, #8]
 8012ac2:	e7df      	b.n	8012a84 <_vfiprintf_r+0x20>
 8012ac4:	4b79      	ldr	r3, [pc, #484]	; (8012cac <_vfiprintf_r+0x248>)
 8012ac6:	429d      	cmp	r5, r3
 8012ac8:	bf08      	it	eq
 8012aca:	68f5      	ldreq	r5, [r6, #12]
 8012acc:	e7da      	b.n	8012a84 <_vfiprintf_r+0x20>
 8012ace:	89ab      	ldrh	r3, [r5, #12]
 8012ad0:	0598      	lsls	r0, r3, #22
 8012ad2:	d4ed      	bmi.n	8012ab0 <_vfiprintf_r+0x4c>
 8012ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ad6:	f000 fbaa 	bl	801322e <__retarget_lock_release_recursive>
 8012ada:	e7e9      	b.n	8012ab0 <_vfiprintf_r+0x4c>
 8012adc:	2300      	movs	r3, #0
 8012ade:	9309      	str	r3, [sp, #36]	; 0x24
 8012ae0:	2320      	movs	r3, #32
 8012ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ae6:	2330      	movs	r3, #48	; 0x30
 8012ae8:	f04f 0901 	mov.w	r9, #1
 8012aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8012af0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8012cb0 <_vfiprintf_r+0x24c>
 8012af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012af8:	4623      	mov	r3, r4
 8012afa:	469a      	mov	sl, r3
 8012afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b00:	b10a      	cbz	r2, 8012b06 <_vfiprintf_r+0xa2>
 8012b02:	2a25      	cmp	r2, #37	; 0x25
 8012b04:	d1f9      	bne.n	8012afa <_vfiprintf_r+0x96>
 8012b06:	ebba 0b04 	subs.w	fp, sl, r4
 8012b0a:	d00b      	beq.n	8012b24 <_vfiprintf_r+0xc0>
 8012b0c:	465b      	mov	r3, fp
 8012b0e:	4622      	mov	r2, r4
 8012b10:	4629      	mov	r1, r5
 8012b12:	4630      	mov	r0, r6
 8012b14:	f7ff ff93 	bl	8012a3e <__sfputs_r>
 8012b18:	3001      	adds	r0, #1
 8012b1a:	f000 80aa 	beq.w	8012c72 <_vfiprintf_r+0x20e>
 8012b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b20:	445a      	add	r2, fp
 8012b22:	9209      	str	r2, [sp, #36]	; 0x24
 8012b24:	f89a 3000 	ldrb.w	r3, [sl]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	f000 80a2 	beq.w	8012c72 <_vfiprintf_r+0x20e>
 8012b2e:	2300      	movs	r3, #0
 8012b30:	f04f 32ff 	mov.w	r2, #4294967295
 8012b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b38:	f10a 0a01 	add.w	sl, sl, #1
 8012b3c:	9304      	str	r3, [sp, #16]
 8012b3e:	9307      	str	r3, [sp, #28]
 8012b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b44:	931a      	str	r3, [sp, #104]	; 0x68
 8012b46:	4654      	mov	r4, sl
 8012b48:	2205      	movs	r2, #5
 8012b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b4e:	4858      	ldr	r0, [pc, #352]	; (8012cb0 <_vfiprintf_r+0x24c>)
 8012b50:	f7ff f84e 	bl	8011bf0 <memchr>
 8012b54:	9a04      	ldr	r2, [sp, #16]
 8012b56:	b9d8      	cbnz	r0, 8012b90 <_vfiprintf_r+0x12c>
 8012b58:	06d1      	lsls	r1, r2, #27
 8012b5a:	bf44      	itt	mi
 8012b5c:	2320      	movmi	r3, #32
 8012b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b62:	0713      	lsls	r3, r2, #28
 8012b64:	bf44      	itt	mi
 8012b66:	232b      	movmi	r3, #43	; 0x2b
 8012b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8012b70:	2b2a      	cmp	r3, #42	; 0x2a
 8012b72:	d015      	beq.n	8012ba0 <_vfiprintf_r+0x13c>
 8012b74:	4654      	mov	r4, sl
 8012b76:	2000      	movs	r0, #0
 8012b78:	f04f 0c0a 	mov.w	ip, #10
 8012b7c:	9a07      	ldr	r2, [sp, #28]
 8012b7e:	4621      	mov	r1, r4
 8012b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b84:	3b30      	subs	r3, #48	; 0x30
 8012b86:	2b09      	cmp	r3, #9
 8012b88:	d94e      	bls.n	8012c28 <_vfiprintf_r+0x1c4>
 8012b8a:	b1b0      	cbz	r0, 8012bba <_vfiprintf_r+0x156>
 8012b8c:	9207      	str	r2, [sp, #28]
 8012b8e:	e014      	b.n	8012bba <_vfiprintf_r+0x156>
 8012b90:	eba0 0308 	sub.w	r3, r0, r8
 8012b94:	fa09 f303 	lsl.w	r3, r9, r3
 8012b98:	4313      	orrs	r3, r2
 8012b9a:	46a2      	mov	sl, r4
 8012b9c:	9304      	str	r3, [sp, #16]
 8012b9e:	e7d2      	b.n	8012b46 <_vfiprintf_r+0xe2>
 8012ba0:	9b03      	ldr	r3, [sp, #12]
 8012ba2:	1d19      	adds	r1, r3, #4
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	9103      	str	r1, [sp, #12]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	bfbb      	ittet	lt
 8012bac:	425b      	neglt	r3, r3
 8012bae:	f042 0202 	orrlt.w	r2, r2, #2
 8012bb2:	9307      	strge	r3, [sp, #28]
 8012bb4:	9307      	strlt	r3, [sp, #28]
 8012bb6:	bfb8      	it	lt
 8012bb8:	9204      	strlt	r2, [sp, #16]
 8012bba:	7823      	ldrb	r3, [r4, #0]
 8012bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8012bbe:	d10c      	bne.n	8012bda <_vfiprintf_r+0x176>
 8012bc0:	7863      	ldrb	r3, [r4, #1]
 8012bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8012bc4:	d135      	bne.n	8012c32 <_vfiprintf_r+0x1ce>
 8012bc6:	9b03      	ldr	r3, [sp, #12]
 8012bc8:	3402      	adds	r4, #2
 8012bca:	1d1a      	adds	r2, r3, #4
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	9203      	str	r2, [sp, #12]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	bfb8      	it	lt
 8012bd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bd8:	9305      	str	r3, [sp, #20]
 8012bda:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8012cb4 <_vfiprintf_r+0x250>
 8012bde:	2203      	movs	r2, #3
 8012be0:	4650      	mov	r0, sl
 8012be2:	7821      	ldrb	r1, [r4, #0]
 8012be4:	f7ff f804 	bl	8011bf0 <memchr>
 8012be8:	b140      	cbz	r0, 8012bfc <_vfiprintf_r+0x198>
 8012bea:	2340      	movs	r3, #64	; 0x40
 8012bec:	eba0 000a 	sub.w	r0, r0, sl
 8012bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8012bf4:	9b04      	ldr	r3, [sp, #16]
 8012bf6:	3401      	adds	r4, #1
 8012bf8:	4303      	orrs	r3, r0
 8012bfa:	9304      	str	r3, [sp, #16]
 8012bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c00:	2206      	movs	r2, #6
 8012c02:	482d      	ldr	r0, [pc, #180]	; (8012cb8 <_vfiprintf_r+0x254>)
 8012c04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c08:	f7fe fff2 	bl	8011bf0 <memchr>
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	d03f      	beq.n	8012c90 <_vfiprintf_r+0x22c>
 8012c10:	4b2a      	ldr	r3, [pc, #168]	; (8012cbc <_vfiprintf_r+0x258>)
 8012c12:	bb1b      	cbnz	r3, 8012c5c <_vfiprintf_r+0x1f8>
 8012c14:	9b03      	ldr	r3, [sp, #12]
 8012c16:	3307      	adds	r3, #7
 8012c18:	f023 0307 	bic.w	r3, r3, #7
 8012c1c:	3308      	adds	r3, #8
 8012c1e:	9303      	str	r3, [sp, #12]
 8012c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c22:	443b      	add	r3, r7
 8012c24:	9309      	str	r3, [sp, #36]	; 0x24
 8012c26:	e767      	b.n	8012af8 <_vfiprintf_r+0x94>
 8012c28:	460c      	mov	r4, r1
 8012c2a:	2001      	movs	r0, #1
 8012c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c30:	e7a5      	b.n	8012b7e <_vfiprintf_r+0x11a>
 8012c32:	2300      	movs	r3, #0
 8012c34:	f04f 0c0a 	mov.w	ip, #10
 8012c38:	4619      	mov	r1, r3
 8012c3a:	3401      	adds	r4, #1
 8012c3c:	9305      	str	r3, [sp, #20]
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c44:	3a30      	subs	r2, #48	; 0x30
 8012c46:	2a09      	cmp	r2, #9
 8012c48:	d903      	bls.n	8012c52 <_vfiprintf_r+0x1ee>
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d0c5      	beq.n	8012bda <_vfiprintf_r+0x176>
 8012c4e:	9105      	str	r1, [sp, #20]
 8012c50:	e7c3      	b.n	8012bda <_vfiprintf_r+0x176>
 8012c52:	4604      	mov	r4, r0
 8012c54:	2301      	movs	r3, #1
 8012c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c5a:	e7f0      	b.n	8012c3e <_vfiprintf_r+0x1da>
 8012c5c:	ab03      	add	r3, sp, #12
 8012c5e:	9300      	str	r3, [sp, #0]
 8012c60:	462a      	mov	r2, r5
 8012c62:	4630      	mov	r0, r6
 8012c64:	4b16      	ldr	r3, [pc, #88]	; (8012cc0 <_vfiprintf_r+0x25c>)
 8012c66:	a904      	add	r1, sp, #16
 8012c68:	f7fc fb34 	bl	800f2d4 <_printf_float>
 8012c6c:	4607      	mov	r7, r0
 8012c6e:	1c78      	adds	r0, r7, #1
 8012c70:	d1d6      	bne.n	8012c20 <_vfiprintf_r+0x1bc>
 8012c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c74:	07d9      	lsls	r1, r3, #31
 8012c76:	d405      	bmi.n	8012c84 <_vfiprintf_r+0x220>
 8012c78:	89ab      	ldrh	r3, [r5, #12]
 8012c7a:	059a      	lsls	r2, r3, #22
 8012c7c:	d402      	bmi.n	8012c84 <_vfiprintf_r+0x220>
 8012c7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c80:	f000 fad5 	bl	801322e <__retarget_lock_release_recursive>
 8012c84:	89ab      	ldrh	r3, [r5, #12]
 8012c86:	065b      	lsls	r3, r3, #25
 8012c88:	f53f af12 	bmi.w	8012ab0 <_vfiprintf_r+0x4c>
 8012c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c8e:	e711      	b.n	8012ab4 <_vfiprintf_r+0x50>
 8012c90:	ab03      	add	r3, sp, #12
 8012c92:	9300      	str	r3, [sp, #0]
 8012c94:	462a      	mov	r2, r5
 8012c96:	4630      	mov	r0, r6
 8012c98:	4b09      	ldr	r3, [pc, #36]	; (8012cc0 <_vfiprintf_r+0x25c>)
 8012c9a:	a904      	add	r1, sp, #16
 8012c9c:	f7fc fdb6 	bl	800f80c <_printf_i>
 8012ca0:	e7e4      	b.n	8012c6c <_vfiprintf_r+0x208>
 8012ca2:	bf00      	nop
 8012ca4:	08013dd0 	.word	0x08013dd0
 8012ca8:	08013df0 	.word	0x08013df0
 8012cac:	08013db0 	.word	0x08013db0
 8012cb0:	08013c9c 	.word	0x08013c9c
 8012cb4:	08013ca2 	.word	0x08013ca2
 8012cb8:	08013ca6 	.word	0x08013ca6
 8012cbc:	0800f2d5 	.word	0x0800f2d5
 8012cc0:	08012a3f 	.word	0x08012a3f

08012cc4 <nan>:
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	4901      	ldr	r1, [pc, #4]	; (8012ccc <nan+0x8>)
 8012cc8:	4770      	bx	lr
 8012cca:	bf00      	nop
 8012ccc:	7ff80000 	.word	0x7ff80000

08012cd0 <_sbrk_r>:
 8012cd0:	b538      	push	{r3, r4, r5, lr}
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	4d05      	ldr	r5, [pc, #20]	; (8012cec <_sbrk_r+0x1c>)
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	4608      	mov	r0, r1
 8012cda:	602b      	str	r3, [r5, #0]
 8012cdc:	f7f1 fd7a 	bl	80047d4 <_sbrk>
 8012ce0:	1c43      	adds	r3, r0, #1
 8012ce2:	d102      	bne.n	8012cea <_sbrk_r+0x1a>
 8012ce4:	682b      	ldr	r3, [r5, #0]
 8012ce6:	b103      	cbz	r3, 8012cea <_sbrk_r+0x1a>
 8012ce8:	6023      	str	r3, [r4, #0]
 8012cea:	bd38      	pop	{r3, r4, r5, pc}
 8012cec:	200019c8 	.word	0x200019c8

08012cf0 <strncmp>:
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	b510      	push	{r4, lr}
 8012cf4:	b172      	cbz	r2, 8012d14 <strncmp+0x24>
 8012cf6:	3901      	subs	r1, #1
 8012cf8:	1884      	adds	r4, r0, r2
 8012cfa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012cfe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012d02:	4290      	cmp	r0, r2
 8012d04:	d101      	bne.n	8012d0a <strncmp+0x1a>
 8012d06:	42a3      	cmp	r3, r4
 8012d08:	d101      	bne.n	8012d0e <strncmp+0x1e>
 8012d0a:	1a80      	subs	r0, r0, r2
 8012d0c:	bd10      	pop	{r4, pc}
 8012d0e:	2800      	cmp	r0, #0
 8012d10:	d1f3      	bne.n	8012cfa <strncmp+0xa>
 8012d12:	e7fa      	b.n	8012d0a <strncmp+0x1a>
 8012d14:	4610      	mov	r0, r2
 8012d16:	e7f9      	b.n	8012d0c <strncmp+0x1c>

08012d18 <__swbuf_r>:
 8012d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d1a:	460e      	mov	r6, r1
 8012d1c:	4614      	mov	r4, r2
 8012d1e:	4605      	mov	r5, r0
 8012d20:	b118      	cbz	r0, 8012d2a <__swbuf_r+0x12>
 8012d22:	6983      	ldr	r3, [r0, #24]
 8012d24:	b90b      	cbnz	r3, 8012d2a <__swbuf_r+0x12>
 8012d26:	f000 f9e3 	bl	80130f0 <__sinit>
 8012d2a:	4b21      	ldr	r3, [pc, #132]	; (8012db0 <__swbuf_r+0x98>)
 8012d2c:	429c      	cmp	r4, r3
 8012d2e:	d12b      	bne.n	8012d88 <__swbuf_r+0x70>
 8012d30:	686c      	ldr	r4, [r5, #4]
 8012d32:	69a3      	ldr	r3, [r4, #24]
 8012d34:	60a3      	str	r3, [r4, #8]
 8012d36:	89a3      	ldrh	r3, [r4, #12]
 8012d38:	071a      	lsls	r2, r3, #28
 8012d3a:	d52f      	bpl.n	8012d9c <__swbuf_r+0x84>
 8012d3c:	6923      	ldr	r3, [r4, #16]
 8012d3e:	b36b      	cbz	r3, 8012d9c <__swbuf_r+0x84>
 8012d40:	6923      	ldr	r3, [r4, #16]
 8012d42:	6820      	ldr	r0, [r4, #0]
 8012d44:	b2f6      	uxtb	r6, r6
 8012d46:	1ac0      	subs	r0, r0, r3
 8012d48:	6963      	ldr	r3, [r4, #20]
 8012d4a:	4637      	mov	r7, r6
 8012d4c:	4283      	cmp	r3, r0
 8012d4e:	dc04      	bgt.n	8012d5a <__swbuf_r+0x42>
 8012d50:	4621      	mov	r1, r4
 8012d52:	4628      	mov	r0, r5
 8012d54:	f000 f938 	bl	8012fc8 <_fflush_r>
 8012d58:	bb30      	cbnz	r0, 8012da8 <__swbuf_r+0x90>
 8012d5a:	68a3      	ldr	r3, [r4, #8]
 8012d5c:	3001      	adds	r0, #1
 8012d5e:	3b01      	subs	r3, #1
 8012d60:	60a3      	str	r3, [r4, #8]
 8012d62:	6823      	ldr	r3, [r4, #0]
 8012d64:	1c5a      	adds	r2, r3, #1
 8012d66:	6022      	str	r2, [r4, #0]
 8012d68:	701e      	strb	r6, [r3, #0]
 8012d6a:	6963      	ldr	r3, [r4, #20]
 8012d6c:	4283      	cmp	r3, r0
 8012d6e:	d004      	beq.n	8012d7a <__swbuf_r+0x62>
 8012d70:	89a3      	ldrh	r3, [r4, #12]
 8012d72:	07db      	lsls	r3, r3, #31
 8012d74:	d506      	bpl.n	8012d84 <__swbuf_r+0x6c>
 8012d76:	2e0a      	cmp	r6, #10
 8012d78:	d104      	bne.n	8012d84 <__swbuf_r+0x6c>
 8012d7a:	4621      	mov	r1, r4
 8012d7c:	4628      	mov	r0, r5
 8012d7e:	f000 f923 	bl	8012fc8 <_fflush_r>
 8012d82:	b988      	cbnz	r0, 8012da8 <__swbuf_r+0x90>
 8012d84:	4638      	mov	r0, r7
 8012d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d88:	4b0a      	ldr	r3, [pc, #40]	; (8012db4 <__swbuf_r+0x9c>)
 8012d8a:	429c      	cmp	r4, r3
 8012d8c:	d101      	bne.n	8012d92 <__swbuf_r+0x7a>
 8012d8e:	68ac      	ldr	r4, [r5, #8]
 8012d90:	e7cf      	b.n	8012d32 <__swbuf_r+0x1a>
 8012d92:	4b09      	ldr	r3, [pc, #36]	; (8012db8 <__swbuf_r+0xa0>)
 8012d94:	429c      	cmp	r4, r3
 8012d96:	bf08      	it	eq
 8012d98:	68ec      	ldreq	r4, [r5, #12]
 8012d9a:	e7ca      	b.n	8012d32 <__swbuf_r+0x1a>
 8012d9c:	4621      	mov	r1, r4
 8012d9e:	4628      	mov	r0, r5
 8012da0:	f000 f81a 	bl	8012dd8 <__swsetup_r>
 8012da4:	2800      	cmp	r0, #0
 8012da6:	d0cb      	beq.n	8012d40 <__swbuf_r+0x28>
 8012da8:	f04f 37ff 	mov.w	r7, #4294967295
 8012dac:	e7ea      	b.n	8012d84 <__swbuf_r+0x6c>
 8012dae:	bf00      	nop
 8012db0:	08013dd0 	.word	0x08013dd0
 8012db4:	08013df0 	.word	0x08013df0
 8012db8:	08013db0 	.word	0x08013db0

08012dbc <__ascii_wctomb>:
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	4608      	mov	r0, r1
 8012dc0:	b141      	cbz	r1, 8012dd4 <__ascii_wctomb+0x18>
 8012dc2:	2aff      	cmp	r2, #255	; 0xff
 8012dc4:	d904      	bls.n	8012dd0 <__ascii_wctomb+0x14>
 8012dc6:	228a      	movs	r2, #138	; 0x8a
 8012dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8012dcc:	601a      	str	r2, [r3, #0]
 8012dce:	4770      	bx	lr
 8012dd0:	2001      	movs	r0, #1
 8012dd2:	700a      	strb	r2, [r1, #0]
 8012dd4:	4770      	bx	lr
	...

08012dd8 <__swsetup_r>:
 8012dd8:	4b32      	ldr	r3, [pc, #200]	; (8012ea4 <__swsetup_r+0xcc>)
 8012dda:	b570      	push	{r4, r5, r6, lr}
 8012ddc:	681d      	ldr	r5, [r3, #0]
 8012dde:	4606      	mov	r6, r0
 8012de0:	460c      	mov	r4, r1
 8012de2:	b125      	cbz	r5, 8012dee <__swsetup_r+0x16>
 8012de4:	69ab      	ldr	r3, [r5, #24]
 8012de6:	b913      	cbnz	r3, 8012dee <__swsetup_r+0x16>
 8012de8:	4628      	mov	r0, r5
 8012dea:	f000 f981 	bl	80130f0 <__sinit>
 8012dee:	4b2e      	ldr	r3, [pc, #184]	; (8012ea8 <__swsetup_r+0xd0>)
 8012df0:	429c      	cmp	r4, r3
 8012df2:	d10f      	bne.n	8012e14 <__swsetup_r+0x3c>
 8012df4:	686c      	ldr	r4, [r5, #4]
 8012df6:	89a3      	ldrh	r3, [r4, #12]
 8012df8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012dfc:	0719      	lsls	r1, r3, #28
 8012dfe:	d42c      	bmi.n	8012e5a <__swsetup_r+0x82>
 8012e00:	06dd      	lsls	r5, r3, #27
 8012e02:	d411      	bmi.n	8012e28 <__swsetup_r+0x50>
 8012e04:	2309      	movs	r3, #9
 8012e06:	6033      	str	r3, [r6, #0]
 8012e08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e10:	81a3      	strh	r3, [r4, #12]
 8012e12:	e03e      	b.n	8012e92 <__swsetup_r+0xba>
 8012e14:	4b25      	ldr	r3, [pc, #148]	; (8012eac <__swsetup_r+0xd4>)
 8012e16:	429c      	cmp	r4, r3
 8012e18:	d101      	bne.n	8012e1e <__swsetup_r+0x46>
 8012e1a:	68ac      	ldr	r4, [r5, #8]
 8012e1c:	e7eb      	b.n	8012df6 <__swsetup_r+0x1e>
 8012e1e:	4b24      	ldr	r3, [pc, #144]	; (8012eb0 <__swsetup_r+0xd8>)
 8012e20:	429c      	cmp	r4, r3
 8012e22:	bf08      	it	eq
 8012e24:	68ec      	ldreq	r4, [r5, #12]
 8012e26:	e7e6      	b.n	8012df6 <__swsetup_r+0x1e>
 8012e28:	0758      	lsls	r0, r3, #29
 8012e2a:	d512      	bpl.n	8012e52 <__swsetup_r+0x7a>
 8012e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e2e:	b141      	cbz	r1, 8012e42 <__swsetup_r+0x6a>
 8012e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e34:	4299      	cmp	r1, r3
 8012e36:	d002      	beq.n	8012e3e <__swsetup_r+0x66>
 8012e38:	4630      	mov	r0, r6
 8012e3a:	f7ff fbb3 	bl	80125a4 <_free_r>
 8012e3e:	2300      	movs	r3, #0
 8012e40:	6363      	str	r3, [r4, #52]	; 0x34
 8012e42:	89a3      	ldrh	r3, [r4, #12]
 8012e44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012e48:	81a3      	strh	r3, [r4, #12]
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	6063      	str	r3, [r4, #4]
 8012e4e:	6923      	ldr	r3, [r4, #16]
 8012e50:	6023      	str	r3, [r4, #0]
 8012e52:	89a3      	ldrh	r3, [r4, #12]
 8012e54:	f043 0308 	orr.w	r3, r3, #8
 8012e58:	81a3      	strh	r3, [r4, #12]
 8012e5a:	6923      	ldr	r3, [r4, #16]
 8012e5c:	b94b      	cbnz	r3, 8012e72 <__swsetup_r+0x9a>
 8012e5e:	89a3      	ldrh	r3, [r4, #12]
 8012e60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e68:	d003      	beq.n	8012e72 <__swsetup_r+0x9a>
 8012e6a:	4621      	mov	r1, r4
 8012e6c:	4630      	mov	r0, r6
 8012e6e:	f000 fa05 	bl	801327c <__smakebuf_r>
 8012e72:	89a0      	ldrh	r0, [r4, #12]
 8012e74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e78:	f010 0301 	ands.w	r3, r0, #1
 8012e7c:	d00a      	beq.n	8012e94 <__swsetup_r+0xbc>
 8012e7e:	2300      	movs	r3, #0
 8012e80:	60a3      	str	r3, [r4, #8]
 8012e82:	6963      	ldr	r3, [r4, #20]
 8012e84:	425b      	negs	r3, r3
 8012e86:	61a3      	str	r3, [r4, #24]
 8012e88:	6923      	ldr	r3, [r4, #16]
 8012e8a:	b943      	cbnz	r3, 8012e9e <__swsetup_r+0xc6>
 8012e8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012e90:	d1ba      	bne.n	8012e08 <__swsetup_r+0x30>
 8012e92:	bd70      	pop	{r4, r5, r6, pc}
 8012e94:	0781      	lsls	r1, r0, #30
 8012e96:	bf58      	it	pl
 8012e98:	6963      	ldrpl	r3, [r4, #20]
 8012e9a:	60a3      	str	r3, [r4, #8]
 8012e9c:	e7f4      	b.n	8012e88 <__swsetup_r+0xb0>
 8012e9e:	2000      	movs	r0, #0
 8012ea0:	e7f7      	b.n	8012e92 <__swsetup_r+0xba>
 8012ea2:	bf00      	nop
 8012ea4:	20000904 	.word	0x20000904
 8012ea8:	08013dd0 	.word	0x08013dd0
 8012eac:	08013df0 	.word	0x08013df0
 8012eb0:	08013db0 	.word	0x08013db0

08012eb4 <abort>:
 8012eb4:	2006      	movs	r0, #6
 8012eb6:	b508      	push	{r3, lr}
 8012eb8:	f000 fa9e 	bl	80133f8 <raise>
 8012ebc:	2001      	movs	r0, #1
 8012ebe:	f7f1 fc16 	bl	80046ee <_exit>
	...

08012ec4 <__sflush_r>:
 8012ec4:	898a      	ldrh	r2, [r1, #12]
 8012ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ec8:	4605      	mov	r5, r0
 8012eca:	0710      	lsls	r0, r2, #28
 8012ecc:	460c      	mov	r4, r1
 8012ece:	d457      	bmi.n	8012f80 <__sflush_r+0xbc>
 8012ed0:	684b      	ldr	r3, [r1, #4]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	dc04      	bgt.n	8012ee0 <__sflush_r+0x1c>
 8012ed6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	dc01      	bgt.n	8012ee0 <__sflush_r+0x1c>
 8012edc:	2000      	movs	r0, #0
 8012ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012ee2:	2e00      	cmp	r6, #0
 8012ee4:	d0fa      	beq.n	8012edc <__sflush_r+0x18>
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012eec:	682f      	ldr	r7, [r5, #0]
 8012eee:	602b      	str	r3, [r5, #0]
 8012ef0:	d032      	beq.n	8012f58 <__sflush_r+0x94>
 8012ef2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012ef4:	89a3      	ldrh	r3, [r4, #12]
 8012ef6:	075a      	lsls	r2, r3, #29
 8012ef8:	d505      	bpl.n	8012f06 <__sflush_r+0x42>
 8012efa:	6863      	ldr	r3, [r4, #4]
 8012efc:	1ac0      	subs	r0, r0, r3
 8012efe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f00:	b10b      	cbz	r3, 8012f06 <__sflush_r+0x42>
 8012f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f04:	1ac0      	subs	r0, r0, r3
 8012f06:	2300      	movs	r3, #0
 8012f08:	4602      	mov	r2, r0
 8012f0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	6a21      	ldr	r1, [r4, #32]
 8012f10:	47b0      	blx	r6
 8012f12:	1c43      	adds	r3, r0, #1
 8012f14:	89a3      	ldrh	r3, [r4, #12]
 8012f16:	d106      	bne.n	8012f26 <__sflush_r+0x62>
 8012f18:	6829      	ldr	r1, [r5, #0]
 8012f1a:	291d      	cmp	r1, #29
 8012f1c:	d82c      	bhi.n	8012f78 <__sflush_r+0xb4>
 8012f1e:	4a29      	ldr	r2, [pc, #164]	; (8012fc4 <__sflush_r+0x100>)
 8012f20:	40ca      	lsrs	r2, r1
 8012f22:	07d6      	lsls	r6, r2, #31
 8012f24:	d528      	bpl.n	8012f78 <__sflush_r+0xb4>
 8012f26:	2200      	movs	r2, #0
 8012f28:	6062      	str	r2, [r4, #4]
 8012f2a:	6922      	ldr	r2, [r4, #16]
 8012f2c:	04d9      	lsls	r1, r3, #19
 8012f2e:	6022      	str	r2, [r4, #0]
 8012f30:	d504      	bpl.n	8012f3c <__sflush_r+0x78>
 8012f32:	1c42      	adds	r2, r0, #1
 8012f34:	d101      	bne.n	8012f3a <__sflush_r+0x76>
 8012f36:	682b      	ldr	r3, [r5, #0]
 8012f38:	b903      	cbnz	r3, 8012f3c <__sflush_r+0x78>
 8012f3a:	6560      	str	r0, [r4, #84]	; 0x54
 8012f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f3e:	602f      	str	r7, [r5, #0]
 8012f40:	2900      	cmp	r1, #0
 8012f42:	d0cb      	beq.n	8012edc <__sflush_r+0x18>
 8012f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f48:	4299      	cmp	r1, r3
 8012f4a:	d002      	beq.n	8012f52 <__sflush_r+0x8e>
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	f7ff fb29 	bl	80125a4 <_free_r>
 8012f52:	2000      	movs	r0, #0
 8012f54:	6360      	str	r0, [r4, #52]	; 0x34
 8012f56:	e7c2      	b.n	8012ede <__sflush_r+0x1a>
 8012f58:	6a21      	ldr	r1, [r4, #32]
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	47b0      	blx	r6
 8012f60:	1c41      	adds	r1, r0, #1
 8012f62:	d1c7      	bne.n	8012ef4 <__sflush_r+0x30>
 8012f64:	682b      	ldr	r3, [r5, #0]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d0c4      	beq.n	8012ef4 <__sflush_r+0x30>
 8012f6a:	2b1d      	cmp	r3, #29
 8012f6c:	d001      	beq.n	8012f72 <__sflush_r+0xae>
 8012f6e:	2b16      	cmp	r3, #22
 8012f70:	d101      	bne.n	8012f76 <__sflush_r+0xb2>
 8012f72:	602f      	str	r7, [r5, #0]
 8012f74:	e7b2      	b.n	8012edc <__sflush_r+0x18>
 8012f76:	89a3      	ldrh	r3, [r4, #12]
 8012f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f7c:	81a3      	strh	r3, [r4, #12]
 8012f7e:	e7ae      	b.n	8012ede <__sflush_r+0x1a>
 8012f80:	690f      	ldr	r7, [r1, #16]
 8012f82:	2f00      	cmp	r7, #0
 8012f84:	d0aa      	beq.n	8012edc <__sflush_r+0x18>
 8012f86:	0793      	lsls	r3, r2, #30
 8012f88:	bf18      	it	ne
 8012f8a:	2300      	movne	r3, #0
 8012f8c:	680e      	ldr	r6, [r1, #0]
 8012f8e:	bf08      	it	eq
 8012f90:	694b      	ldreq	r3, [r1, #20]
 8012f92:	1bf6      	subs	r6, r6, r7
 8012f94:	600f      	str	r7, [r1, #0]
 8012f96:	608b      	str	r3, [r1, #8]
 8012f98:	2e00      	cmp	r6, #0
 8012f9a:	dd9f      	ble.n	8012edc <__sflush_r+0x18>
 8012f9c:	4633      	mov	r3, r6
 8012f9e:	463a      	mov	r2, r7
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	6a21      	ldr	r1, [r4, #32]
 8012fa4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8012fa8:	47e0      	blx	ip
 8012faa:	2800      	cmp	r0, #0
 8012fac:	dc06      	bgt.n	8012fbc <__sflush_r+0xf8>
 8012fae:	89a3      	ldrh	r3, [r4, #12]
 8012fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fb8:	81a3      	strh	r3, [r4, #12]
 8012fba:	e790      	b.n	8012ede <__sflush_r+0x1a>
 8012fbc:	4407      	add	r7, r0
 8012fbe:	1a36      	subs	r6, r6, r0
 8012fc0:	e7ea      	b.n	8012f98 <__sflush_r+0xd4>
 8012fc2:	bf00      	nop
 8012fc4:	20400001 	.word	0x20400001

08012fc8 <_fflush_r>:
 8012fc8:	b538      	push	{r3, r4, r5, lr}
 8012fca:	690b      	ldr	r3, [r1, #16]
 8012fcc:	4605      	mov	r5, r0
 8012fce:	460c      	mov	r4, r1
 8012fd0:	b913      	cbnz	r3, 8012fd8 <_fflush_r+0x10>
 8012fd2:	2500      	movs	r5, #0
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	bd38      	pop	{r3, r4, r5, pc}
 8012fd8:	b118      	cbz	r0, 8012fe2 <_fflush_r+0x1a>
 8012fda:	6983      	ldr	r3, [r0, #24]
 8012fdc:	b90b      	cbnz	r3, 8012fe2 <_fflush_r+0x1a>
 8012fde:	f000 f887 	bl	80130f0 <__sinit>
 8012fe2:	4b14      	ldr	r3, [pc, #80]	; (8013034 <_fflush_r+0x6c>)
 8012fe4:	429c      	cmp	r4, r3
 8012fe6:	d11b      	bne.n	8013020 <_fflush_r+0x58>
 8012fe8:	686c      	ldr	r4, [r5, #4]
 8012fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d0ef      	beq.n	8012fd2 <_fflush_r+0xa>
 8012ff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012ff4:	07d0      	lsls	r0, r2, #31
 8012ff6:	d404      	bmi.n	8013002 <_fflush_r+0x3a>
 8012ff8:	0599      	lsls	r1, r3, #22
 8012ffa:	d402      	bmi.n	8013002 <_fflush_r+0x3a>
 8012ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ffe:	f000 f915 	bl	801322c <__retarget_lock_acquire_recursive>
 8013002:	4628      	mov	r0, r5
 8013004:	4621      	mov	r1, r4
 8013006:	f7ff ff5d 	bl	8012ec4 <__sflush_r>
 801300a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801300c:	4605      	mov	r5, r0
 801300e:	07da      	lsls	r2, r3, #31
 8013010:	d4e0      	bmi.n	8012fd4 <_fflush_r+0xc>
 8013012:	89a3      	ldrh	r3, [r4, #12]
 8013014:	059b      	lsls	r3, r3, #22
 8013016:	d4dd      	bmi.n	8012fd4 <_fflush_r+0xc>
 8013018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801301a:	f000 f908 	bl	801322e <__retarget_lock_release_recursive>
 801301e:	e7d9      	b.n	8012fd4 <_fflush_r+0xc>
 8013020:	4b05      	ldr	r3, [pc, #20]	; (8013038 <_fflush_r+0x70>)
 8013022:	429c      	cmp	r4, r3
 8013024:	d101      	bne.n	801302a <_fflush_r+0x62>
 8013026:	68ac      	ldr	r4, [r5, #8]
 8013028:	e7df      	b.n	8012fea <_fflush_r+0x22>
 801302a:	4b04      	ldr	r3, [pc, #16]	; (801303c <_fflush_r+0x74>)
 801302c:	429c      	cmp	r4, r3
 801302e:	bf08      	it	eq
 8013030:	68ec      	ldreq	r4, [r5, #12]
 8013032:	e7da      	b.n	8012fea <_fflush_r+0x22>
 8013034:	08013dd0 	.word	0x08013dd0
 8013038:	08013df0 	.word	0x08013df0
 801303c:	08013db0 	.word	0x08013db0

08013040 <std>:
 8013040:	2300      	movs	r3, #0
 8013042:	b510      	push	{r4, lr}
 8013044:	4604      	mov	r4, r0
 8013046:	e9c0 3300 	strd	r3, r3, [r0]
 801304a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801304e:	6083      	str	r3, [r0, #8]
 8013050:	8181      	strh	r1, [r0, #12]
 8013052:	6643      	str	r3, [r0, #100]	; 0x64
 8013054:	81c2      	strh	r2, [r0, #14]
 8013056:	6183      	str	r3, [r0, #24]
 8013058:	4619      	mov	r1, r3
 801305a:	2208      	movs	r2, #8
 801305c:	305c      	adds	r0, #92	; 0x5c
 801305e:	f7fc f893 	bl	800f188 <memset>
 8013062:	4b05      	ldr	r3, [pc, #20]	; (8013078 <std+0x38>)
 8013064:	6224      	str	r4, [r4, #32]
 8013066:	6263      	str	r3, [r4, #36]	; 0x24
 8013068:	4b04      	ldr	r3, [pc, #16]	; (801307c <std+0x3c>)
 801306a:	62a3      	str	r3, [r4, #40]	; 0x28
 801306c:	4b04      	ldr	r3, [pc, #16]	; (8013080 <std+0x40>)
 801306e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013070:	4b04      	ldr	r3, [pc, #16]	; (8013084 <std+0x44>)
 8013072:	6323      	str	r3, [r4, #48]	; 0x30
 8013074:	bd10      	pop	{r4, pc}
 8013076:	bf00      	nop
 8013078:	08013431 	.word	0x08013431
 801307c:	08013453 	.word	0x08013453
 8013080:	0801348b 	.word	0x0801348b
 8013084:	080134af 	.word	0x080134af

08013088 <_cleanup_r>:
 8013088:	4901      	ldr	r1, [pc, #4]	; (8013090 <_cleanup_r+0x8>)
 801308a:	f000 b8af 	b.w	80131ec <_fwalk_reent>
 801308e:	bf00      	nop
 8013090:	08012fc9 	.word	0x08012fc9

08013094 <__sfmoreglue>:
 8013094:	2268      	movs	r2, #104	; 0x68
 8013096:	b570      	push	{r4, r5, r6, lr}
 8013098:	1e4d      	subs	r5, r1, #1
 801309a:	4355      	muls	r5, r2
 801309c:	460e      	mov	r6, r1
 801309e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80130a2:	f7ff fae7 	bl	8012674 <_malloc_r>
 80130a6:	4604      	mov	r4, r0
 80130a8:	b140      	cbz	r0, 80130bc <__sfmoreglue+0x28>
 80130aa:	2100      	movs	r1, #0
 80130ac:	e9c0 1600 	strd	r1, r6, [r0]
 80130b0:	300c      	adds	r0, #12
 80130b2:	60a0      	str	r0, [r4, #8]
 80130b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80130b8:	f7fc f866 	bl	800f188 <memset>
 80130bc:	4620      	mov	r0, r4
 80130be:	bd70      	pop	{r4, r5, r6, pc}

080130c0 <__sfp_lock_acquire>:
 80130c0:	4801      	ldr	r0, [pc, #4]	; (80130c8 <__sfp_lock_acquire+0x8>)
 80130c2:	f000 b8b3 	b.w	801322c <__retarget_lock_acquire_recursive>
 80130c6:	bf00      	nop
 80130c8:	200019c5 	.word	0x200019c5

080130cc <__sfp_lock_release>:
 80130cc:	4801      	ldr	r0, [pc, #4]	; (80130d4 <__sfp_lock_release+0x8>)
 80130ce:	f000 b8ae 	b.w	801322e <__retarget_lock_release_recursive>
 80130d2:	bf00      	nop
 80130d4:	200019c5 	.word	0x200019c5

080130d8 <__sinit_lock_acquire>:
 80130d8:	4801      	ldr	r0, [pc, #4]	; (80130e0 <__sinit_lock_acquire+0x8>)
 80130da:	f000 b8a7 	b.w	801322c <__retarget_lock_acquire_recursive>
 80130de:	bf00      	nop
 80130e0:	200019c6 	.word	0x200019c6

080130e4 <__sinit_lock_release>:
 80130e4:	4801      	ldr	r0, [pc, #4]	; (80130ec <__sinit_lock_release+0x8>)
 80130e6:	f000 b8a2 	b.w	801322e <__retarget_lock_release_recursive>
 80130ea:	bf00      	nop
 80130ec:	200019c6 	.word	0x200019c6

080130f0 <__sinit>:
 80130f0:	b510      	push	{r4, lr}
 80130f2:	4604      	mov	r4, r0
 80130f4:	f7ff fff0 	bl	80130d8 <__sinit_lock_acquire>
 80130f8:	69a3      	ldr	r3, [r4, #24]
 80130fa:	b11b      	cbz	r3, 8013104 <__sinit+0x14>
 80130fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013100:	f7ff bff0 	b.w	80130e4 <__sinit_lock_release>
 8013104:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013108:	6523      	str	r3, [r4, #80]	; 0x50
 801310a:	4b13      	ldr	r3, [pc, #76]	; (8013158 <__sinit+0x68>)
 801310c:	4a13      	ldr	r2, [pc, #76]	; (801315c <__sinit+0x6c>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	62a2      	str	r2, [r4, #40]	; 0x28
 8013112:	42a3      	cmp	r3, r4
 8013114:	bf08      	it	eq
 8013116:	2301      	moveq	r3, #1
 8013118:	4620      	mov	r0, r4
 801311a:	bf08      	it	eq
 801311c:	61a3      	streq	r3, [r4, #24]
 801311e:	f000 f81f 	bl	8013160 <__sfp>
 8013122:	6060      	str	r0, [r4, #4]
 8013124:	4620      	mov	r0, r4
 8013126:	f000 f81b 	bl	8013160 <__sfp>
 801312a:	60a0      	str	r0, [r4, #8]
 801312c:	4620      	mov	r0, r4
 801312e:	f000 f817 	bl	8013160 <__sfp>
 8013132:	2200      	movs	r2, #0
 8013134:	2104      	movs	r1, #4
 8013136:	60e0      	str	r0, [r4, #12]
 8013138:	6860      	ldr	r0, [r4, #4]
 801313a:	f7ff ff81 	bl	8013040 <std>
 801313e:	2201      	movs	r2, #1
 8013140:	2109      	movs	r1, #9
 8013142:	68a0      	ldr	r0, [r4, #8]
 8013144:	f7ff ff7c 	bl	8013040 <std>
 8013148:	2202      	movs	r2, #2
 801314a:	2112      	movs	r1, #18
 801314c:	68e0      	ldr	r0, [r4, #12]
 801314e:	f7ff ff77 	bl	8013040 <std>
 8013152:	2301      	movs	r3, #1
 8013154:	61a3      	str	r3, [r4, #24]
 8013156:	e7d1      	b.n	80130fc <__sinit+0xc>
 8013158:	08013914 	.word	0x08013914
 801315c:	08013089 	.word	0x08013089

08013160 <__sfp>:
 8013160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013162:	4607      	mov	r7, r0
 8013164:	f7ff ffac 	bl	80130c0 <__sfp_lock_acquire>
 8013168:	4b1e      	ldr	r3, [pc, #120]	; (80131e4 <__sfp+0x84>)
 801316a:	681e      	ldr	r6, [r3, #0]
 801316c:	69b3      	ldr	r3, [r6, #24]
 801316e:	b913      	cbnz	r3, 8013176 <__sfp+0x16>
 8013170:	4630      	mov	r0, r6
 8013172:	f7ff ffbd 	bl	80130f0 <__sinit>
 8013176:	3648      	adds	r6, #72	; 0x48
 8013178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801317c:	3b01      	subs	r3, #1
 801317e:	d503      	bpl.n	8013188 <__sfp+0x28>
 8013180:	6833      	ldr	r3, [r6, #0]
 8013182:	b30b      	cbz	r3, 80131c8 <__sfp+0x68>
 8013184:	6836      	ldr	r6, [r6, #0]
 8013186:	e7f7      	b.n	8013178 <__sfp+0x18>
 8013188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801318c:	b9d5      	cbnz	r5, 80131c4 <__sfp+0x64>
 801318e:	4b16      	ldr	r3, [pc, #88]	; (80131e8 <__sfp+0x88>)
 8013190:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013194:	60e3      	str	r3, [r4, #12]
 8013196:	6665      	str	r5, [r4, #100]	; 0x64
 8013198:	f000 f847 	bl	801322a <__retarget_lock_init_recursive>
 801319c:	f7ff ff96 	bl	80130cc <__sfp_lock_release>
 80131a0:	2208      	movs	r2, #8
 80131a2:	4629      	mov	r1, r5
 80131a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80131a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80131ac:	6025      	str	r5, [r4, #0]
 80131ae:	61a5      	str	r5, [r4, #24]
 80131b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80131b4:	f7fb ffe8 	bl	800f188 <memset>
 80131b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80131bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80131c0:	4620      	mov	r0, r4
 80131c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c4:	3468      	adds	r4, #104	; 0x68
 80131c6:	e7d9      	b.n	801317c <__sfp+0x1c>
 80131c8:	2104      	movs	r1, #4
 80131ca:	4638      	mov	r0, r7
 80131cc:	f7ff ff62 	bl	8013094 <__sfmoreglue>
 80131d0:	4604      	mov	r4, r0
 80131d2:	6030      	str	r0, [r6, #0]
 80131d4:	2800      	cmp	r0, #0
 80131d6:	d1d5      	bne.n	8013184 <__sfp+0x24>
 80131d8:	f7ff ff78 	bl	80130cc <__sfp_lock_release>
 80131dc:	230c      	movs	r3, #12
 80131de:	603b      	str	r3, [r7, #0]
 80131e0:	e7ee      	b.n	80131c0 <__sfp+0x60>
 80131e2:	bf00      	nop
 80131e4:	08013914 	.word	0x08013914
 80131e8:	ffff0001 	.word	0xffff0001

080131ec <_fwalk_reent>:
 80131ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131f0:	4606      	mov	r6, r0
 80131f2:	4688      	mov	r8, r1
 80131f4:	2700      	movs	r7, #0
 80131f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80131fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80131fe:	f1b9 0901 	subs.w	r9, r9, #1
 8013202:	d505      	bpl.n	8013210 <_fwalk_reent+0x24>
 8013204:	6824      	ldr	r4, [r4, #0]
 8013206:	2c00      	cmp	r4, #0
 8013208:	d1f7      	bne.n	80131fa <_fwalk_reent+0xe>
 801320a:	4638      	mov	r0, r7
 801320c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013210:	89ab      	ldrh	r3, [r5, #12]
 8013212:	2b01      	cmp	r3, #1
 8013214:	d907      	bls.n	8013226 <_fwalk_reent+0x3a>
 8013216:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801321a:	3301      	adds	r3, #1
 801321c:	d003      	beq.n	8013226 <_fwalk_reent+0x3a>
 801321e:	4629      	mov	r1, r5
 8013220:	4630      	mov	r0, r6
 8013222:	47c0      	blx	r8
 8013224:	4307      	orrs	r7, r0
 8013226:	3568      	adds	r5, #104	; 0x68
 8013228:	e7e9      	b.n	80131fe <_fwalk_reent+0x12>

0801322a <__retarget_lock_init_recursive>:
 801322a:	4770      	bx	lr

0801322c <__retarget_lock_acquire_recursive>:
 801322c:	4770      	bx	lr

0801322e <__retarget_lock_release_recursive>:
 801322e:	4770      	bx	lr

08013230 <__swhatbuf_r>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	460e      	mov	r6, r1
 8013234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013238:	4614      	mov	r4, r2
 801323a:	2900      	cmp	r1, #0
 801323c:	461d      	mov	r5, r3
 801323e:	b096      	sub	sp, #88	; 0x58
 8013240:	da08      	bge.n	8013254 <__swhatbuf_r+0x24>
 8013242:	2200      	movs	r2, #0
 8013244:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013248:	602a      	str	r2, [r5, #0]
 801324a:	061a      	lsls	r2, r3, #24
 801324c:	d410      	bmi.n	8013270 <__swhatbuf_r+0x40>
 801324e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013252:	e00e      	b.n	8013272 <__swhatbuf_r+0x42>
 8013254:	466a      	mov	r2, sp
 8013256:	f000 f951 	bl	80134fc <_fstat_r>
 801325a:	2800      	cmp	r0, #0
 801325c:	dbf1      	blt.n	8013242 <__swhatbuf_r+0x12>
 801325e:	9a01      	ldr	r2, [sp, #4]
 8013260:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013264:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013268:	425a      	negs	r2, r3
 801326a:	415a      	adcs	r2, r3
 801326c:	602a      	str	r2, [r5, #0]
 801326e:	e7ee      	b.n	801324e <__swhatbuf_r+0x1e>
 8013270:	2340      	movs	r3, #64	; 0x40
 8013272:	2000      	movs	r0, #0
 8013274:	6023      	str	r3, [r4, #0]
 8013276:	b016      	add	sp, #88	; 0x58
 8013278:	bd70      	pop	{r4, r5, r6, pc}
	...

0801327c <__smakebuf_r>:
 801327c:	898b      	ldrh	r3, [r1, #12]
 801327e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013280:	079d      	lsls	r5, r3, #30
 8013282:	4606      	mov	r6, r0
 8013284:	460c      	mov	r4, r1
 8013286:	d507      	bpl.n	8013298 <__smakebuf_r+0x1c>
 8013288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801328c:	6023      	str	r3, [r4, #0]
 801328e:	6123      	str	r3, [r4, #16]
 8013290:	2301      	movs	r3, #1
 8013292:	6163      	str	r3, [r4, #20]
 8013294:	b002      	add	sp, #8
 8013296:	bd70      	pop	{r4, r5, r6, pc}
 8013298:	466a      	mov	r2, sp
 801329a:	ab01      	add	r3, sp, #4
 801329c:	f7ff ffc8 	bl	8013230 <__swhatbuf_r>
 80132a0:	9900      	ldr	r1, [sp, #0]
 80132a2:	4605      	mov	r5, r0
 80132a4:	4630      	mov	r0, r6
 80132a6:	f7ff f9e5 	bl	8012674 <_malloc_r>
 80132aa:	b948      	cbnz	r0, 80132c0 <__smakebuf_r+0x44>
 80132ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132b0:	059a      	lsls	r2, r3, #22
 80132b2:	d4ef      	bmi.n	8013294 <__smakebuf_r+0x18>
 80132b4:	f023 0303 	bic.w	r3, r3, #3
 80132b8:	f043 0302 	orr.w	r3, r3, #2
 80132bc:	81a3      	strh	r3, [r4, #12]
 80132be:	e7e3      	b.n	8013288 <__smakebuf_r+0xc>
 80132c0:	4b0d      	ldr	r3, [pc, #52]	; (80132f8 <__smakebuf_r+0x7c>)
 80132c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80132c4:	89a3      	ldrh	r3, [r4, #12]
 80132c6:	6020      	str	r0, [r4, #0]
 80132c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132cc:	81a3      	strh	r3, [r4, #12]
 80132ce:	9b00      	ldr	r3, [sp, #0]
 80132d0:	6120      	str	r0, [r4, #16]
 80132d2:	6163      	str	r3, [r4, #20]
 80132d4:	9b01      	ldr	r3, [sp, #4]
 80132d6:	b15b      	cbz	r3, 80132f0 <__smakebuf_r+0x74>
 80132d8:	4630      	mov	r0, r6
 80132da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132de:	f000 f91f 	bl	8013520 <_isatty_r>
 80132e2:	b128      	cbz	r0, 80132f0 <__smakebuf_r+0x74>
 80132e4:	89a3      	ldrh	r3, [r4, #12]
 80132e6:	f023 0303 	bic.w	r3, r3, #3
 80132ea:	f043 0301 	orr.w	r3, r3, #1
 80132ee:	81a3      	strh	r3, [r4, #12]
 80132f0:	89a0      	ldrh	r0, [r4, #12]
 80132f2:	4305      	orrs	r5, r0
 80132f4:	81a5      	strh	r5, [r4, #12]
 80132f6:	e7cd      	b.n	8013294 <__smakebuf_r+0x18>
 80132f8:	08013089 	.word	0x08013089

080132fc <memmove>:
 80132fc:	4288      	cmp	r0, r1
 80132fe:	b510      	push	{r4, lr}
 8013300:	eb01 0402 	add.w	r4, r1, r2
 8013304:	d902      	bls.n	801330c <memmove+0x10>
 8013306:	4284      	cmp	r4, r0
 8013308:	4623      	mov	r3, r4
 801330a:	d807      	bhi.n	801331c <memmove+0x20>
 801330c:	1e43      	subs	r3, r0, #1
 801330e:	42a1      	cmp	r1, r4
 8013310:	d008      	beq.n	8013324 <memmove+0x28>
 8013312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013316:	f803 2f01 	strb.w	r2, [r3, #1]!
 801331a:	e7f8      	b.n	801330e <memmove+0x12>
 801331c:	4601      	mov	r1, r0
 801331e:	4402      	add	r2, r0
 8013320:	428a      	cmp	r2, r1
 8013322:	d100      	bne.n	8013326 <memmove+0x2a>
 8013324:	bd10      	pop	{r4, pc}
 8013326:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801332a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801332e:	e7f7      	b.n	8013320 <memmove+0x24>

08013330 <__malloc_lock>:
 8013330:	4801      	ldr	r0, [pc, #4]	; (8013338 <__malloc_lock+0x8>)
 8013332:	f7ff bf7b 	b.w	801322c <__retarget_lock_acquire_recursive>
 8013336:	bf00      	nop
 8013338:	200019c4 	.word	0x200019c4

0801333c <__malloc_unlock>:
 801333c:	4801      	ldr	r0, [pc, #4]	; (8013344 <__malloc_unlock+0x8>)
 801333e:	f7ff bf76 	b.w	801322e <__retarget_lock_release_recursive>
 8013342:	bf00      	nop
 8013344:	200019c4 	.word	0x200019c4

08013348 <_realloc_r>:
 8013348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801334c:	4680      	mov	r8, r0
 801334e:	4614      	mov	r4, r2
 8013350:	460e      	mov	r6, r1
 8013352:	b921      	cbnz	r1, 801335e <_realloc_r+0x16>
 8013354:	4611      	mov	r1, r2
 8013356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801335a:	f7ff b98b 	b.w	8012674 <_malloc_r>
 801335e:	b92a      	cbnz	r2, 801336c <_realloc_r+0x24>
 8013360:	f7ff f920 	bl	80125a4 <_free_r>
 8013364:	4625      	mov	r5, r4
 8013366:	4628      	mov	r0, r5
 8013368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801336c:	f000 f8fa 	bl	8013564 <_malloc_usable_size_r>
 8013370:	4284      	cmp	r4, r0
 8013372:	4607      	mov	r7, r0
 8013374:	d802      	bhi.n	801337c <_realloc_r+0x34>
 8013376:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801337a:	d812      	bhi.n	80133a2 <_realloc_r+0x5a>
 801337c:	4621      	mov	r1, r4
 801337e:	4640      	mov	r0, r8
 8013380:	f7ff f978 	bl	8012674 <_malloc_r>
 8013384:	4605      	mov	r5, r0
 8013386:	2800      	cmp	r0, #0
 8013388:	d0ed      	beq.n	8013366 <_realloc_r+0x1e>
 801338a:	42bc      	cmp	r4, r7
 801338c:	4622      	mov	r2, r4
 801338e:	4631      	mov	r1, r6
 8013390:	bf28      	it	cs
 8013392:	463a      	movcs	r2, r7
 8013394:	f7fb feea 	bl	800f16c <memcpy>
 8013398:	4631      	mov	r1, r6
 801339a:	4640      	mov	r0, r8
 801339c:	f7ff f902 	bl	80125a4 <_free_r>
 80133a0:	e7e1      	b.n	8013366 <_realloc_r+0x1e>
 80133a2:	4635      	mov	r5, r6
 80133a4:	e7df      	b.n	8013366 <_realloc_r+0x1e>

080133a6 <_raise_r>:
 80133a6:	291f      	cmp	r1, #31
 80133a8:	b538      	push	{r3, r4, r5, lr}
 80133aa:	4604      	mov	r4, r0
 80133ac:	460d      	mov	r5, r1
 80133ae:	d904      	bls.n	80133ba <_raise_r+0x14>
 80133b0:	2316      	movs	r3, #22
 80133b2:	6003      	str	r3, [r0, #0]
 80133b4:	f04f 30ff 	mov.w	r0, #4294967295
 80133b8:	bd38      	pop	{r3, r4, r5, pc}
 80133ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80133bc:	b112      	cbz	r2, 80133c4 <_raise_r+0x1e>
 80133be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80133c2:	b94b      	cbnz	r3, 80133d8 <_raise_r+0x32>
 80133c4:	4620      	mov	r0, r4
 80133c6:	f000 f831 	bl	801342c <_getpid_r>
 80133ca:	462a      	mov	r2, r5
 80133cc:	4601      	mov	r1, r0
 80133ce:	4620      	mov	r0, r4
 80133d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133d4:	f000 b818 	b.w	8013408 <_kill_r>
 80133d8:	2b01      	cmp	r3, #1
 80133da:	d00a      	beq.n	80133f2 <_raise_r+0x4c>
 80133dc:	1c59      	adds	r1, r3, #1
 80133de:	d103      	bne.n	80133e8 <_raise_r+0x42>
 80133e0:	2316      	movs	r3, #22
 80133e2:	6003      	str	r3, [r0, #0]
 80133e4:	2001      	movs	r0, #1
 80133e6:	e7e7      	b.n	80133b8 <_raise_r+0x12>
 80133e8:	2400      	movs	r4, #0
 80133ea:	4628      	mov	r0, r5
 80133ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80133f0:	4798      	blx	r3
 80133f2:	2000      	movs	r0, #0
 80133f4:	e7e0      	b.n	80133b8 <_raise_r+0x12>
	...

080133f8 <raise>:
 80133f8:	4b02      	ldr	r3, [pc, #8]	; (8013404 <raise+0xc>)
 80133fa:	4601      	mov	r1, r0
 80133fc:	6818      	ldr	r0, [r3, #0]
 80133fe:	f7ff bfd2 	b.w	80133a6 <_raise_r>
 8013402:	bf00      	nop
 8013404:	20000904 	.word	0x20000904

08013408 <_kill_r>:
 8013408:	b538      	push	{r3, r4, r5, lr}
 801340a:	2300      	movs	r3, #0
 801340c:	4d06      	ldr	r5, [pc, #24]	; (8013428 <_kill_r+0x20>)
 801340e:	4604      	mov	r4, r0
 8013410:	4608      	mov	r0, r1
 8013412:	4611      	mov	r1, r2
 8013414:	602b      	str	r3, [r5, #0]
 8013416:	f7f1 f95a 	bl	80046ce <_kill>
 801341a:	1c43      	adds	r3, r0, #1
 801341c:	d102      	bne.n	8013424 <_kill_r+0x1c>
 801341e:	682b      	ldr	r3, [r5, #0]
 8013420:	b103      	cbz	r3, 8013424 <_kill_r+0x1c>
 8013422:	6023      	str	r3, [r4, #0]
 8013424:	bd38      	pop	{r3, r4, r5, pc}
 8013426:	bf00      	nop
 8013428:	200019c8 	.word	0x200019c8

0801342c <_getpid_r>:
 801342c:	f7f1 b948 	b.w	80046c0 <_getpid>

08013430 <__sread>:
 8013430:	b510      	push	{r4, lr}
 8013432:	460c      	mov	r4, r1
 8013434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013438:	f000 f89c 	bl	8013574 <_read_r>
 801343c:	2800      	cmp	r0, #0
 801343e:	bfab      	itete	ge
 8013440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013442:	89a3      	ldrhlt	r3, [r4, #12]
 8013444:	181b      	addge	r3, r3, r0
 8013446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801344a:	bfac      	ite	ge
 801344c:	6563      	strge	r3, [r4, #84]	; 0x54
 801344e:	81a3      	strhlt	r3, [r4, #12]
 8013450:	bd10      	pop	{r4, pc}

08013452 <__swrite>:
 8013452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013456:	461f      	mov	r7, r3
 8013458:	898b      	ldrh	r3, [r1, #12]
 801345a:	4605      	mov	r5, r0
 801345c:	05db      	lsls	r3, r3, #23
 801345e:	460c      	mov	r4, r1
 8013460:	4616      	mov	r6, r2
 8013462:	d505      	bpl.n	8013470 <__swrite+0x1e>
 8013464:	2302      	movs	r3, #2
 8013466:	2200      	movs	r2, #0
 8013468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801346c:	f000 f868 	bl	8013540 <_lseek_r>
 8013470:	89a3      	ldrh	r3, [r4, #12]
 8013472:	4632      	mov	r2, r6
 8013474:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013478:	81a3      	strh	r3, [r4, #12]
 801347a:	4628      	mov	r0, r5
 801347c:	463b      	mov	r3, r7
 801347e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013486:	f000 b817 	b.w	80134b8 <_write_r>

0801348a <__sseek>:
 801348a:	b510      	push	{r4, lr}
 801348c:	460c      	mov	r4, r1
 801348e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013492:	f000 f855 	bl	8013540 <_lseek_r>
 8013496:	1c43      	adds	r3, r0, #1
 8013498:	89a3      	ldrh	r3, [r4, #12]
 801349a:	bf15      	itete	ne
 801349c:	6560      	strne	r0, [r4, #84]	; 0x54
 801349e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80134a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80134a6:	81a3      	strheq	r3, [r4, #12]
 80134a8:	bf18      	it	ne
 80134aa:	81a3      	strhne	r3, [r4, #12]
 80134ac:	bd10      	pop	{r4, pc}

080134ae <__sclose>:
 80134ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134b2:	f000 b813 	b.w	80134dc <_close_r>
	...

080134b8 <_write_r>:
 80134b8:	b538      	push	{r3, r4, r5, lr}
 80134ba:	4604      	mov	r4, r0
 80134bc:	4608      	mov	r0, r1
 80134be:	4611      	mov	r1, r2
 80134c0:	2200      	movs	r2, #0
 80134c2:	4d05      	ldr	r5, [pc, #20]	; (80134d8 <_write_r+0x20>)
 80134c4:	602a      	str	r2, [r5, #0]
 80134c6:	461a      	mov	r2, r3
 80134c8:	f7f1 f938 	bl	800473c <_write>
 80134cc:	1c43      	adds	r3, r0, #1
 80134ce:	d102      	bne.n	80134d6 <_write_r+0x1e>
 80134d0:	682b      	ldr	r3, [r5, #0]
 80134d2:	b103      	cbz	r3, 80134d6 <_write_r+0x1e>
 80134d4:	6023      	str	r3, [r4, #0]
 80134d6:	bd38      	pop	{r3, r4, r5, pc}
 80134d8:	200019c8 	.word	0x200019c8

080134dc <_close_r>:
 80134dc:	b538      	push	{r3, r4, r5, lr}
 80134de:	2300      	movs	r3, #0
 80134e0:	4d05      	ldr	r5, [pc, #20]	; (80134f8 <_close_r+0x1c>)
 80134e2:	4604      	mov	r4, r0
 80134e4:	4608      	mov	r0, r1
 80134e6:	602b      	str	r3, [r5, #0]
 80134e8:	f7f1 f944 	bl	8004774 <_close>
 80134ec:	1c43      	adds	r3, r0, #1
 80134ee:	d102      	bne.n	80134f6 <_close_r+0x1a>
 80134f0:	682b      	ldr	r3, [r5, #0]
 80134f2:	b103      	cbz	r3, 80134f6 <_close_r+0x1a>
 80134f4:	6023      	str	r3, [r4, #0]
 80134f6:	bd38      	pop	{r3, r4, r5, pc}
 80134f8:	200019c8 	.word	0x200019c8

080134fc <_fstat_r>:
 80134fc:	b538      	push	{r3, r4, r5, lr}
 80134fe:	2300      	movs	r3, #0
 8013500:	4d06      	ldr	r5, [pc, #24]	; (801351c <_fstat_r+0x20>)
 8013502:	4604      	mov	r4, r0
 8013504:	4608      	mov	r0, r1
 8013506:	4611      	mov	r1, r2
 8013508:	602b      	str	r3, [r5, #0]
 801350a:	f7f1 f93e 	bl	800478a <_fstat>
 801350e:	1c43      	adds	r3, r0, #1
 8013510:	d102      	bne.n	8013518 <_fstat_r+0x1c>
 8013512:	682b      	ldr	r3, [r5, #0]
 8013514:	b103      	cbz	r3, 8013518 <_fstat_r+0x1c>
 8013516:	6023      	str	r3, [r4, #0]
 8013518:	bd38      	pop	{r3, r4, r5, pc}
 801351a:	bf00      	nop
 801351c:	200019c8 	.word	0x200019c8

08013520 <_isatty_r>:
 8013520:	b538      	push	{r3, r4, r5, lr}
 8013522:	2300      	movs	r3, #0
 8013524:	4d05      	ldr	r5, [pc, #20]	; (801353c <_isatty_r+0x1c>)
 8013526:	4604      	mov	r4, r0
 8013528:	4608      	mov	r0, r1
 801352a:	602b      	str	r3, [r5, #0]
 801352c:	f7f1 f93c 	bl	80047a8 <_isatty>
 8013530:	1c43      	adds	r3, r0, #1
 8013532:	d102      	bne.n	801353a <_isatty_r+0x1a>
 8013534:	682b      	ldr	r3, [r5, #0]
 8013536:	b103      	cbz	r3, 801353a <_isatty_r+0x1a>
 8013538:	6023      	str	r3, [r4, #0]
 801353a:	bd38      	pop	{r3, r4, r5, pc}
 801353c:	200019c8 	.word	0x200019c8

08013540 <_lseek_r>:
 8013540:	b538      	push	{r3, r4, r5, lr}
 8013542:	4604      	mov	r4, r0
 8013544:	4608      	mov	r0, r1
 8013546:	4611      	mov	r1, r2
 8013548:	2200      	movs	r2, #0
 801354a:	4d05      	ldr	r5, [pc, #20]	; (8013560 <_lseek_r+0x20>)
 801354c:	602a      	str	r2, [r5, #0]
 801354e:	461a      	mov	r2, r3
 8013550:	f7f1 f934 	bl	80047bc <_lseek>
 8013554:	1c43      	adds	r3, r0, #1
 8013556:	d102      	bne.n	801355e <_lseek_r+0x1e>
 8013558:	682b      	ldr	r3, [r5, #0]
 801355a:	b103      	cbz	r3, 801355e <_lseek_r+0x1e>
 801355c:	6023      	str	r3, [r4, #0]
 801355e:	bd38      	pop	{r3, r4, r5, pc}
 8013560:	200019c8 	.word	0x200019c8

08013564 <_malloc_usable_size_r>:
 8013564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013568:	1f18      	subs	r0, r3, #4
 801356a:	2b00      	cmp	r3, #0
 801356c:	bfbc      	itt	lt
 801356e:	580b      	ldrlt	r3, [r1, r0]
 8013570:	18c0      	addlt	r0, r0, r3
 8013572:	4770      	bx	lr

08013574 <_read_r>:
 8013574:	b538      	push	{r3, r4, r5, lr}
 8013576:	4604      	mov	r4, r0
 8013578:	4608      	mov	r0, r1
 801357a:	4611      	mov	r1, r2
 801357c:	2200      	movs	r2, #0
 801357e:	4d05      	ldr	r5, [pc, #20]	; (8013594 <_read_r+0x20>)
 8013580:	602a      	str	r2, [r5, #0]
 8013582:	461a      	mov	r2, r3
 8013584:	f7f1 f8bd 	bl	8004702 <_read>
 8013588:	1c43      	adds	r3, r0, #1
 801358a:	d102      	bne.n	8013592 <_read_r+0x1e>
 801358c:	682b      	ldr	r3, [r5, #0]
 801358e:	b103      	cbz	r3, 8013592 <_read_r+0x1e>
 8013590:	6023      	str	r3, [r4, #0]
 8013592:	bd38      	pop	{r3, r4, r5, pc}
 8013594:	200019c8 	.word	0x200019c8

08013598 <_init>:
 8013598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801359a:	bf00      	nop
 801359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801359e:	bc08      	pop	{r3}
 80135a0:	469e      	mov	lr, r3
 80135a2:	4770      	bx	lr

080135a4 <_fini>:
 80135a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a6:	bf00      	nop
 80135a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135aa:	bc08      	pop	{r3}
 80135ac:	469e      	mov	lr, r3
 80135ae:	4770      	bx	lr
