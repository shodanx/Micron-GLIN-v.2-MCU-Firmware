
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d018  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  0800d158  0800d158  0001d158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d848  0800d848  00020368  2**0
                  CONTENTS
  4 .ARM          00000008  0800d848  0800d848  0001d848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d850  0800d850  00020368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d850  0800d850  0001d850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d854  0800d854  0001d854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0800d858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d8  20000368  0800dbc0  00020368  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001640  0800dbc0  00021640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164f8  00000000  00000000  00020391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003821  00000000  00000000  00036889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  0003a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  0003ae38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d3  00000000  00000000  0003ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120bb  00000000  00000000  000532fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ca5b  00000000  00000000  000653b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1e11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004884  00000000  00000000  000e1e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000368 	.word	0x20000368
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d140 	.word	0x0800d140

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000036c 	.word	0x2000036c
 800017c:	0800d140 	.word	0x0800d140

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_d2f>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a98:	bf24      	itt	cs
 8000a9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa2:	d90d      	bls.n	8000ac0 <__aeabi_d2f+0x30>
 8000aa4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab8:	bf08      	it	eq
 8000aba:	f020 0001 	biceq.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac4:	d121      	bne.n	8000b0a <__aeabi_d2f+0x7a>
 8000ac6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aca:	bfbc      	itt	lt
 8000acc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	4770      	bxlt	lr
 8000ad2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ada:	f1c2 0218 	rsb	r2, r2, #24
 8000ade:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aea:	bf18      	it	ne
 8000aec:	f040 0001 	orrne.w	r0, r0, #1
 8000af0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000afc:	ea40 000c 	orr.w	r0, r0, ip
 8000b00:	fa23 f302 	lsr.w	r3, r3, r2
 8000b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b08:	e7cc      	b.n	8000aa4 <__aeabi_d2f+0x14>
 8000b0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0e:	d107      	bne.n	8000b20 <__aeabi_d2f+0x90>
 8000b10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b14:	bf1e      	ittt	ne
 8000b16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1e:	4770      	bxne	lr
 8000b20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_frsub>:
 8000b30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	e002      	b.n	8000b3c <__addsf3>
 8000b36:	bf00      	nop

08000b38 <__aeabi_fsub>:
 8000b38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b3c <__addsf3>:
 8000b3c:	0042      	lsls	r2, r0, #1
 8000b3e:	bf1f      	itttt	ne
 8000b40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b44:	ea92 0f03 	teqne	r2, r3
 8000b48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b50:	d06a      	beq.n	8000c28 <__addsf3+0xec>
 8000b52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5a:	bfc1      	itttt	gt
 8000b5c:	18d2      	addgt	r2, r2, r3
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	4048      	eorgt	r0, r1
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	bfb8      	it	lt
 8000b66:	425b      	neglt	r3, r3
 8000b68:	2b19      	cmp	r3, #25
 8000b6a:	bf88      	it	hi
 8000b6c:	4770      	bxhi	lr
 8000b6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8a:	bf18      	it	ne
 8000b8c:	4249      	negne	r1, r1
 8000b8e:	ea92 0f03 	teq	r2, r3
 8000b92:	d03f      	beq.n	8000c14 <__addsf3+0xd8>
 8000b94:	f1a2 0201 	sub.w	r2, r2, #1
 8000b98:	fa41 fc03 	asr.w	ip, r1, r3
 8000b9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ba0:	f1c3 0320 	rsb	r3, r3, #32
 8000ba4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	d502      	bpl.n	8000bb4 <__addsf3+0x78>
 8000bae:	4249      	negs	r1, r1
 8000bb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb8:	d313      	bcc.n	8000be2 <__addsf3+0xa6>
 8000bba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bbe:	d306      	bcc.n	8000bce <__addsf3+0x92>
 8000bc0:	0840      	lsrs	r0, r0, #1
 8000bc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc6:	f102 0201 	add.w	r2, r2, #1
 8000bca:	2afe      	cmp	r2, #254	; 0xfe
 8000bcc:	d251      	bcs.n	8000c72 <__addsf3+0x136>
 8000bce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd6:	bf08      	it	eq
 8000bd8:	f020 0001 	biceq.w	r0, r0, #1
 8000bdc:	ea40 0003 	orr.w	r0, r0, r3
 8000be0:	4770      	bx	lr
 8000be2:	0049      	lsls	r1, r1, #1
 8000be4:	eb40 0000 	adc.w	r0, r0, r0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	bf28      	it	cs
 8000bec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf0:	d2ed      	bcs.n	8000bce <__addsf3+0x92>
 8000bf2:	fab0 fc80 	clz	ip, r0
 8000bf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c02:	bfaa      	itet	ge
 8000c04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c08:	4252      	neglt	r2, r2
 8000c0a:	4318      	orrge	r0, r3
 8000c0c:	bfbc      	itt	lt
 8000c0e:	40d0      	lsrlt	r0, r2
 8000c10:	4318      	orrlt	r0, r3
 8000c12:	4770      	bx	lr
 8000c14:	f092 0f00 	teq	r2, #0
 8000c18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c1c:	bf06      	itte	eq
 8000c1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c22:	3201      	addeq	r2, #1
 8000c24:	3b01      	subne	r3, #1
 8000c26:	e7b5      	b.n	8000b94 <__addsf3+0x58>
 8000c28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c30:	bf18      	it	ne
 8000c32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c36:	d021      	beq.n	8000c7c <__addsf3+0x140>
 8000c38:	ea92 0f03 	teq	r2, r3
 8000c3c:	d004      	beq.n	8000c48 <__addsf3+0x10c>
 8000c3e:	f092 0f00 	teq	r2, #0
 8000c42:	bf08      	it	eq
 8000c44:	4608      	moveq	r0, r1
 8000c46:	4770      	bx	lr
 8000c48:	ea90 0f01 	teq	r0, r1
 8000c4c:	bf1c      	itt	ne
 8000c4e:	2000      	movne	r0, #0
 8000c50:	4770      	bxne	lr
 8000c52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c56:	d104      	bne.n	8000c62 <__addsf3+0x126>
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	4770      	bx	lr
 8000c62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c66:	bf3c      	itt	cc
 8000c68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bxcc	lr
 8000c6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7a:	4770      	bx	lr
 8000c7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c80:	bf16      	itet	ne
 8000c82:	4608      	movne	r0, r1
 8000c84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c88:	4601      	movne	r1, r0
 8000c8a:	0242      	lsls	r2, r0, #9
 8000c8c:	bf06      	itte	eq
 8000c8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c92:	ea90 0f01 	teqeq	r0, r1
 8000c96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_ui2f>:
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e004      	b.n	8000cac <__aeabi_i2f+0x8>
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_i2f>:
 8000ca4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca8:	bf48      	it	mi
 8000caa:	4240      	negmi	r0, r0
 8000cac:	ea5f 0c00 	movs.w	ip, r0
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb8:	4601      	mov	r1, r0
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	e01c      	b.n	8000cfa <__aeabi_l2f+0x2a>

08000cc0 <__aeabi_ul2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e00a      	b.n	8000ce4 <__aeabi_l2f+0x14>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_l2f>:
 8000cd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd4:	bf08      	it	eq
 8000cd6:	4770      	bxeq	lr
 8000cd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cdc:	d502      	bpl.n	8000ce4 <__aeabi_l2f+0x14>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	ea5f 0c01 	movs.w	ip, r1
 8000ce8:	bf02      	ittt	eq
 8000cea:	4684      	moveq	ip, r0
 8000cec:	4601      	moveq	r1, r0
 8000cee:	2000      	moveq	r0, #0
 8000cf0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf4:	bf08      	it	eq
 8000cf6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfe:	fabc f28c 	clz	r2, ip
 8000d02:	3a08      	subs	r2, #8
 8000d04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d08:	db10      	blt.n	8000d2c <__aeabi_l2f+0x5c>
 8000d0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0e:	4463      	add	r3, ip
 8000d10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	f020 0001 	biceq.w	r0, r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	f102 0220 	add.w	r2, r2, #32
 8000d30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_fmul>:
 8000d4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d54:	bf1e      	ittt	ne
 8000d56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5a:	ea92 0f0c 	teqne	r2, ip
 8000d5e:	ea93 0f0c 	teqne	r3, ip
 8000d62:	d06f      	beq.n	8000e44 <__aeabi_fmul+0xf8>
 8000d64:	441a      	add	r2, r3
 8000d66:	ea80 0c01 	eor.w	ip, r0, r1
 8000d6a:	0240      	lsls	r0, r0, #9
 8000d6c:	bf18      	it	ne
 8000d6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d72:	d01e      	beq.n	8000db2 <__aeabi_fmul+0x66>
 8000d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d80:	fba0 3101 	umull	r3, r1, r0, r1
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d8c:	bf3e      	ittt	cc
 8000d8e:	0049      	lslcc	r1, r1, #1
 8000d90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d94:	005b      	lslcc	r3, r3, #1
 8000d96:	ea40 0001 	orr.w	r0, r0, r1
 8000d9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9e:	2afd      	cmp	r2, #253	; 0xfd
 8000da0:	d81d      	bhi.n	8000dde <__aeabi_fmul+0x92>
 8000da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000daa:	bf08      	it	eq
 8000dac:	f020 0001 	biceq.w	r0, r0, #1
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dba:	bf08      	it	eq
 8000dbc:	0249      	lsleq	r1, r1, #9
 8000dbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc6:	3a7f      	subs	r2, #127	; 0x7f
 8000dc8:	bfc2      	ittt	gt
 8000dca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd2:	4770      	bxgt	lr
 8000dd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	3a01      	subs	r2, #1
 8000dde:	dc5d      	bgt.n	8000e9c <__aeabi_fmul+0x150>
 8000de0:	f112 0f19 	cmn.w	r2, #25
 8000de4:	bfdc      	itt	le
 8000de6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dea:	4770      	bxle	lr
 8000dec:	f1c2 0200 	rsb	r2, r2, #0
 8000df0:	0041      	lsls	r1, r0, #1
 8000df2:	fa21 f102 	lsr.w	r1, r1, r2
 8000df6:	f1c2 0220 	rsb	r2, r2, #32
 8000dfa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e02:	f140 0000 	adc.w	r0, r0, #0
 8000e06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e0a:	bf08      	it	eq
 8000e0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e10:	4770      	bx	lr
 8000e12:	f092 0f00 	teq	r2, #0
 8000e16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0040      	lsleq	r0, r0, #1
 8000e1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e22:	3a01      	subeq	r2, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xce>
 8000e26:	ea40 000c 	orr.w	r0, r0, ip
 8000e2a:	f093 0f00 	teq	r3, #0
 8000e2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0049      	lsleq	r1, r1, #1
 8000e36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3a:	3b01      	subeq	r3, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xe6>
 8000e3e:	ea41 010c 	orr.w	r1, r1, ip
 8000e42:	e78f      	b.n	8000d64 <__aeabi_fmul+0x18>
 8000e44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e48:	ea92 0f0c 	teq	r2, ip
 8000e4c:	bf18      	it	ne
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d00a      	beq.n	8000e6a <__aeabi_fmul+0x11e>
 8000e54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e58:	bf18      	it	ne
 8000e5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5e:	d1d8      	bne.n	8000e12 <__aeabi_fmul+0xc6>
 8000e60:	ea80 0001 	eor.w	r0, r0, r1
 8000e64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e68:	4770      	bx	lr
 8000e6a:	f090 0f00 	teq	r0, #0
 8000e6e:	bf17      	itett	ne
 8000e70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e74:	4608      	moveq	r0, r1
 8000e76:	f091 0f00 	teqne	r1, #0
 8000e7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7e:	d014      	beq.n	8000eaa <__aeabi_fmul+0x15e>
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	d101      	bne.n	8000e8a <__aeabi_fmul+0x13e>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d10f      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e8a:	ea93 0f0c 	teq	r3, ip
 8000e8e:	d103      	bne.n	8000e98 <__aeabi_fmul+0x14c>
 8000e90:	024b      	lsls	r3, r1, #9
 8000e92:	bf18      	it	ne
 8000e94:	4608      	movne	r0, r1
 8000e96:	d108      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	4770      	bx	lr
 8000eaa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_fdiv>:
 8000eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ebc:	bf1e      	ittt	ne
 8000ebe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec2:	ea92 0f0c 	teqne	r2, ip
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d069      	beq.n	8000fa0 <__aeabi_fdiv+0xec>
 8000ecc:	eba2 0203 	sub.w	r2, r2, r3
 8000ed0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed4:	0249      	lsls	r1, r1, #9
 8000ed6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eda:	d037      	beq.n	8000f4c <__aeabi_fdiv+0x98>
 8000edc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eec:	428b      	cmp	r3, r1
 8000eee:	bf38      	it	cc
 8000ef0:	005b      	lslcc	r3, r3, #1
 8000ef2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000efa:	428b      	cmp	r3, r1
 8000efc:	bf24      	itt	cs
 8000efe:	1a5b      	subcs	r3, r3, r1
 8000f00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f16:	bf24      	itt	cs
 8000f18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	bf18      	it	ne
 8000f32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f36:	d1e0      	bne.n	8000efa <__aeabi_fdiv+0x46>
 8000f38:	2afd      	cmp	r2, #253	; 0xfd
 8000f3a:	f63f af50 	bhi.w	8000dde <__aeabi_fmul+0x92>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f44:	bf08      	it	eq
 8000f46:	f020 0001 	biceq.w	r0, r0, #1
 8000f4a:	4770      	bx	lr
 8000f4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f54:	327f      	adds	r2, #127	; 0x7f
 8000f56:	bfc2      	ittt	gt
 8000f58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f60:	4770      	bxgt	lr
 8000f62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	3a01      	subs	r2, #1
 8000f6c:	e737      	b.n	8000dde <__aeabi_fmul+0x92>
 8000f6e:	f092 0f00 	teq	r2, #0
 8000f72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0040      	lsleq	r0, r0, #1
 8000f7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7e:	3a01      	subeq	r2, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xc2>
 8000f82:	ea40 000c 	orr.w	r0, r0, ip
 8000f86:	f093 0f00 	teq	r3, #0
 8000f8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0049      	lsleq	r1, r1, #1
 8000f92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f96:	3b01      	subeq	r3, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xda>
 8000f9a:	ea41 010c 	orr.w	r1, r1, ip
 8000f9e:	e795      	b.n	8000ecc <__aeabi_fdiv+0x18>
 8000fa0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa4:	ea92 0f0c 	teq	r2, ip
 8000fa8:	d108      	bne.n	8000fbc <__aeabi_fdiv+0x108>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	f47f af7d 	bne.w	8000eaa <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	f47f af70 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e776      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	d104      	bne.n	8000fcc <__aeabi_fdiv+0x118>
 8000fc2:	024b      	lsls	r3, r1, #9
 8000fc4:	f43f af4c 	beq.w	8000e60 <__aeabi_fmul+0x114>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e76e      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd0:	bf18      	it	ne
 8000fd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	d1ca      	bne.n	8000f6e <__aeabi_fdiv+0xba>
 8000fd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fdc:	f47f af5c 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fe0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe4:	f47f af3c 	bne.w	8000e60 <__aeabi_fmul+0x114>
 8000fe8:	e75f      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fea:	bf00      	nop

08000fec <__gesf2>:
 8000fec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ff0:	e006      	b.n	8001000 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__lesf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	e002      	b.n	8001000 <__cmpsf2+0x4>
 8000ffa:	bf00      	nop

08000ffc <__cmpsf2>:
 8000ffc:	f04f 0c01 	mov.w	ip, #1
 8001000:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001004:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001008:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800100c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001010:	bf18      	it	ne
 8001012:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001016:	d011      	beq.n	800103c <__cmpsf2+0x40>
 8001018:	b001      	add	sp, #4
 800101a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800101e:	bf18      	it	ne
 8001020:	ea90 0f01 	teqne	r0, r1
 8001024:	bf58      	it	pl
 8001026:	ebb2 0003 	subspl.w	r0, r2, r3
 800102a:	bf88      	it	hi
 800102c:	17c8      	asrhi	r0, r1, #31
 800102e:	bf38      	it	cc
 8001030:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001034:	bf18      	it	ne
 8001036:	f040 0001 	orrne.w	r0, r0, #1
 800103a:	4770      	bx	lr
 800103c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001040:	d102      	bne.n	8001048 <__cmpsf2+0x4c>
 8001042:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001046:	d105      	bne.n	8001054 <__cmpsf2+0x58>
 8001048:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800104c:	d1e4      	bne.n	8001018 <__cmpsf2+0x1c>
 800104e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001052:	d0e1      	beq.n	8001018 <__cmpsf2+0x1c>
 8001054:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <__aeabi_cfrcmple>:
 800105c:	4684      	mov	ip, r0
 800105e:	4608      	mov	r0, r1
 8001060:	4661      	mov	r1, ip
 8001062:	e7ff      	b.n	8001064 <__aeabi_cfcmpeq>

08001064 <__aeabi_cfcmpeq>:
 8001064:	b50f      	push	{r0, r1, r2, r3, lr}
 8001066:	f7ff ffc9 	bl	8000ffc <__cmpsf2>
 800106a:	2800      	cmp	r0, #0
 800106c:	bf48      	it	mi
 800106e:	f110 0f00 	cmnmi.w	r0, #0
 8001072:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001074 <__aeabi_fcmpeq>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff fff4 	bl	8001064 <__aeabi_cfcmpeq>
 800107c:	bf0c      	ite	eq
 800107e:	2001      	moveq	r0, #1
 8001080:	2000      	movne	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmplt>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffea 	bl	8001064 <__aeabi_cfcmpeq>
 8001090:	bf34      	ite	cc
 8001092:	2001      	movcc	r0, #1
 8001094:	2000      	movcs	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmple>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffe0 	bl	8001064 <__aeabi_cfcmpeq>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpge>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffd2 	bl	800105c <__aeabi_cfrcmple>
 80010b8:	bf94      	ite	ls
 80010ba:	2001      	movls	r0, #1
 80010bc:	2000      	movhi	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmpgt>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffc8 	bl	800105c <__aeabi_cfrcmple>
 80010cc:	bf34      	ite	cc
 80010ce:	2001      	movcc	r0, #1
 80010d0:	2000      	movcs	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_f2uiz>:
 80010d8:	0042      	lsls	r2, r0, #1
 80010da:	d20e      	bcs.n	80010fa <__aeabi_f2uiz+0x22>
 80010dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e0:	d30b      	bcc.n	80010fa <__aeabi_f2uiz+0x22>
 80010e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ea:	d409      	bmi.n	8001100 <__aeabi_f2uiz+0x28>
 80010ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f4:	fa23 f002 	lsr.w	r0, r3, r2
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2uiz+0x32>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d102      	bne.n	8001110 <__aeabi_f2uiz+0x38>
 800110a:	f04f 30ff 	mov.w	r0, #4294967295
 800110e:	4770      	bx	lr
 8001110:	f04f 0000 	mov.w	r0, #0
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <__aeabi_uldivmod>:
 8001118:	b953      	cbnz	r3, 8001130 <__aeabi_uldivmod+0x18>
 800111a:	b94a      	cbnz	r2, 8001130 <__aeabi_uldivmod+0x18>
 800111c:	2900      	cmp	r1, #0
 800111e:	bf08      	it	eq
 8001120:	2800      	cmpeq	r0, #0
 8001122:	bf1c      	itt	ne
 8001124:	f04f 31ff 	movne.w	r1, #4294967295
 8001128:	f04f 30ff 	movne.w	r0, #4294967295
 800112c:	f000 b9a6 	b.w	800147c <__aeabi_idiv0>
 8001130:	f1ad 0c08 	sub.w	ip, sp, #8
 8001134:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001138:	f000 f83e 	bl	80011b8 <__udivmoddi4>
 800113c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001144:	b004      	add	sp, #16
 8001146:	4770      	bx	lr

08001148 <__aeabi_d2lz>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	460c      	mov	r4, r1
 800114c:	4605      	mov	r5, r0
 800114e:	4621      	mov	r1, r4
 8001150:	4628      	mov	r0, r5
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	f7ff fc53 	bl	8000a00 <__aeabi_dcmplt>
 800115a:	b928      	cbnz	r0, 8001168 <__aeabi_d2lz+0x20>
 800115c:	4628      	mov	r0, r5
 800115e:	4621      	mov	r1, r4
 8001160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001164:	f000 b80a 	b.w	800117c <__aeabi_d2ulz>
 8001168:	4628      	mov	r0, r5
 800116a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800116e:	f000 f805 	bl	800117c <__aeabi_d2ulz>
 8001172:	4240      	negs	r0, r0
 8001174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop

0800117c <__aeabi_d2ulz>:
 800117c:	b5d0      	push	{r4, r6, r7, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__aeabi_d2ulz+0x34>)
 8001182:	4606      	mov	r6, r0
 8001184:	460f      	mov	r7, r1
 8001186:	f7ff f9c9 	bl	800051c <__aeabi_dmul>
 800118a:	f7ff fc61 	bl	8000a50 <__aeabi_d2uiz>
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff f94a 	bl	8000428 <__aeabi_ui2d>
 8001194:	2200      	movs	r2, #0
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <__aeabi_d2ulz+0x38>)
 8001198:	f7ff f9c0 	bl	800051c <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4630      	mov	r0, r6
 80011a2:	4639      	mov	r1, r7
 80011a4:	f7ff f802 	bl	80001ac <__aeabi_dsub>
 80011a8:	f7ff fc52 	bl	8000a50 <__aeabi_d2uiz>
 80011ac:	4621      	mov	r1, r4
 80011ae:	bdd0      	pop	{r4, r6, r7, pc}
 80011b0:	3df00000 	.word	0x3df00000
 80011b4:	41f00000 	.word	0x41f00000

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	9e08      	ldr	r6, [sp, #32]
 80011be:	460d      	mov	r5, r1
 80011c0:	4604      	mov	r4, r0
 80011c2:	468e      	mov	lr, r1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f040 8083 	bne.w	80012d0 <__udivmoddi4+0x118>
 80011ca:	428a      	cmp	r2, r1
 80011cc:	4617      	mov	r7, r2
 80011ce:	d947      	bls.n	8001260 <__udivmoddi4+0xa8>
 80011d0:	fab2 f382 	clz	r3, r2
 80011d4:	b14b      	cbz	r3, 80011ea <__udivmoddi4+0x32>
 80011d6:	f1c3 0120 	rsb	r1, r3, #32
 80011da:	fa05 fe03 	lsl.w	lr, r5, r3
 80011de:	fa20 f101 	lsr.w	r1, r0, r1
 80011e2:	409f      	lsls	r7, r3
 80011e4:	ea41 0e0e 	orr.w	lr, r1, lr
 80011e8:	409c      	lsls	r4, r3
 80011ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011ee:	fbbe fcf8 	udiv	ip, lr, r8
 80011f2:	fa1f f987 	uxth.w	r9, r7
 80011f6:	fb08 e21c 	mls	r2, r8, ip, lr
 80011fa:	fb0c f009 	mul.w	r0, ip, r9
 80011fe:	0c21      	lsrs	r1, r4, #16
 8001200:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001204:	4290      	cmp	r0, r2
 8001206:	d90a      	bls.n	800121e <__udivmoddi4+0x66>
 8001208:	18ba      	adds	r2, r7, r2
 800120a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800120e:	f080 8118 	bcs.w	8001442 <__udivmoddi4+0x28a>
 8001212:	4290      	cmp	r0, r2
 8001214:	f240 8115 	bls.w	8001442 <__udivmoddi4+0x28a>
 8001218:	f1ac 0c02 	sub.w	ip, ip, #2
 800121c:	443a      	add	r2, r7
 800121e:	1a12      	subs	r2, r2, r0
 8001220:	fbb2 f0f8 	udiv	r0, r2, r8
 8001224:	fb08 2210 	mls	r2, r8, r0, r2
 8001228:	fb00 f109 	mul.w	r1, r0, r9
 800122c:	b2a4      	uxth	r4, r4
 800122e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001232:	42a1      	cmp	r1, r4
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x92>
 8001236:	193c      	adds	r4, r7, r4
 8001238:	f100 32ff 	add.w	r2, r0, #4294967295
 800123c:	f080 8103 	bcs.w	8001446 <__udivmoddi4+0x28e>
 8001240:	42a1      	cmp	r1, r4
 8001242:	f240 8100 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001246:	3802      	subs	r0, #2
 8001248:	443c      	add	r4, r7
 800124a:	1a64      	subs	r4, r4, r1
 800124c:	2100      	movs	r1, #0
 800124e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001252:	b11e      	cbz	r6, 800125c <__udivmoddi4+0xa4>
 8001254:	2200      	movs	r2, #0
 8001256:	40dc      	lsrs	r4, r3
 8001258:	e9c6 4200 	strd	r4, r2, [r6]
 800125c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001260:	b902      	cbnz	r2, 8001264 <__udivmoddi4+0xac>
 8001262:	deff      	udf	#255	; 0xff
 8001264:	fab2 f382 	clz	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d14f      	bne.n	800130c <__udivmoddi4+0x154>
 800126c:	1a8d      	subs	r5, r1, r2
 800126e:	2101      	movs	r1, #1
 8001270:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001274:	fa1f f882 	uxth.w	r8, r2
 8001278:	fbb5 fcfe 	udiv	ip, r5, lr
 800127c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001280:	fb08 f00c 	mul.w	r0, r8, ip
 8001284:	0c22      	lsrs	r2, r4, #16
 8001286:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800128a:	42a8      	cmp	r0, r5
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0xe6>
 800128e:	197d      	adds	r5, r7, r5
 8001290:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001294:	d202      	bcs.n	800129c <__udivmoddi4+0xe4>
 8001296:	42a8      	cmp	r0, r5
 8001298:	f200 80e9 	bhi.w	800146e <__udivmoddi4+0x2b6>
 800129c:	4694      	mov	ip, r2
 800129e:	1a2d      	subs	r5, r5, r0
 80012a0:	fbb5 f0fe 	udiv	r0, r5, lr
 80012a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80012a8:	fb08 f800 	mul.w	r8, r8, r0
 80012ac:	b2a4      	uxth	r4, r4
 80012ae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012b2:	45a0      	cmp	r8, r4
 80012b4:	d907      	bls.n	80012c6 <__udivmoddi4+0x10e>
 80012b6:	193c      	adds	r4, r7, r4
 80012b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80012bc:	d202      	bcs.n	80012c4 <__udivmoddi4+0x10c>
 80012be:	45a0      	cmp	r8, r4
 80012c0:	f200 80d9 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012c4:	4610      	mov	r0, r2
 80012c6:	eba4 0408 	sub.w	r4, r4, r8
 80012ca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012ce:	e7c0      	b.n	8001252 <__udivmoddi4+0x9a>
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d908      	bls.n	80012e6 <__udivmoddi4+0x12e>
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	f000 80b1 	beq.w	800143c <__udivmoddi4+0x284>
 80012da:	2100      	movs	r1, #0
 80012dc:	e9c6 0500 	strd	r0, r5, [r6]
 80012e0:	4608      	mov	r0, r1
 80012e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e6:	fab3 f183 	clz	r1, r3
 80012ea:	2900      	cmp	r1, #0
 80012ec:	d14b      	bne.n	8001386 <__udivmoddi4+0x1ce>
 80012ee:	42ab      	cmp	r3, r5
 80012f0:	d302      	bcc.n	80012f8 <__udivmoddi4+0x140>
 80012f2:	4282      	cmp	r2, r0
 80012f4:	f200 80b9 	bhi.w	800146a <__udivmoddi4+0x2b2>
 80012f8:	1a84      	subs	r4, r0, r2
 80012fa:	eb65 0303 	sbc.w	r3, r5, r3
 80012fe:	2001      	movs	r0, #1
 8001300:	469e      	mov	lr, r3
 8001302:	2e00      	cmp	r6, #0
 8001304:	d0aa      	beq.n	800125c <__udivmoddi4+0xa4>
 8001306:	e9c6 4e00 	strd	r4, lr, [r6]
 800130a:	e7a7      	b.n	800125c <__udivmoddi4+0xa4>
 800130c:	409f      	lsls	r7, r3
 800130e:	f1c3 0220 	rsb	r2, r3, #32
 8001312:	40d1      	lsrs	r1, r2
 8001314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001318:	fbb1 f0fe 	udiv	r0, r1, lr
 800131c:	fa1f f887 	uxth.w	r8, r7
 8001320:	fb0e 1110 	mls	r1, lr, r0, r1
 8001324:	fa24 f202 	lsr.w	r2, r4, r2
 8001328:	409d      	lsls	r5, r3
 800132a:	fb00 fc08 	mul.w	ip, r0, r8
 800132e:	432a      	orrs	r2, r5
 8001330:	0c15      	lsrs	r5, r2, #16
 8001332:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001336:	45ac      	cmp	ip, r5
 8001338:	fa04 f403 	lsl.w	r4, r4, r3
 800133c:	d909      	bls.n	8001352 <__udivmoddi4+0x19a>
 800133e:	197d      	adds	r5, r7, r5
 8001340:	f100 31ff 	add.w	r1, r0, #4294967295
 8001344:	f080 808f 	bcs.w	8001466 <__udivmoddi4+0x2ae>
 8001348:	45ac      	cmp	ip, r5
 800134a:	f240 808c 	bls.w	8001466 <__udivmoddi4+0x2ae>
 800134e:	3802      	subs	r0, #2
 8001350:	443d      	add	r5, r7
 8001352:	eba5 050c 	sub.w	r5, r5, ip
 8001356:	fbb5 f1fe 	udiv	r1, r5, lr
 800135a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800135e:	fb01 f908 	mul.w	r9, r1, r8
 8001362:	b295      	uxth	r5, r2
 8001364:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001368:	45a9      	cmp	r9, r5
 800136a:	d907      	bls.n	800137c <__udivmoddi4+0x1c4>
 800136c:	197d      	adds	r5, r7, r5
 800136e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001372:	d274      	bcs.n	800145e <__udivmoddi4+0x2a6>
 8001374:	45a9      	cmp	r9, r5
 8001376:	d972      	bls.n	800145e <__udivmoddi4+0x2a6>
 8001378:	3902      	subs	r1, #2
 800137a:	443d      	add	r5, r7
 800137c:	eba5 0509 	sub.w	r5, r5, r9
 8001380:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001384:	e778      	b.n	8001278 <__udivmoddi4+0xc0>
 8001386:	f1c1 0720 	rsb	r7, r1, #32
 800138a:	408b      	lsls	r3, r1
 800138c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001390:	ea4c 0c03 	orr.w	ip, ip, r3
 8001394:	fa25 f407 	lsr.w	r4, r5, r7
 8001398:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800139c:	fbb4 f9fe 	udiv	r9, r4, lr
 80013a0:	fa1f f88c 	uxth.w	r8, ip
 80013a4:	fb0e 4419 	mls	r4, lr, r9, r4
 80013a8:	fa20 f307 	lsr.w	r3, r0, r7
 80013ac:	fb09 fa08 	mul.w	sl, r9, r8
 80013b0:	408d      	lsls	r5, r1
 80013b2:	431d      	orrs	r5, r3
 80013b4:	0c2b      	lsrs	r3, r5, #16
 80013b6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013ba:	45a2      	cmp	sl, r4
 80013bc:	fa02 f201 	lsl.w	r2, r2, r1
 80013c0:	fa00 f301 	lsl.w	r3, r0, r1
 80013c4:	d909      	bls.n	80013da <__udivmoddi4+0x222>
 80013c6:	eb1c 0404 	adds.w	r4, ip, r4
 80013ca:	f109 30ff 	add.w	r0, r9, #4294967295
 80013ce:	d248      	bcs.n	8001462 <__udivmoddi4+0x2aa>
 80013d0:	45a2      	cmp	sl, r4
 80013d2:	d946      	bls.n	8001462 <__udivmoddi4+0x2aa>
 80013d4:	f1a9 0902 	sub.w	r9, r9, #2
 80013d8:	4464      	add	r4, ip
 80013da:	eba4 040a 	sub.w	r4, r4, sl
 80013de:	fbb4 f0fe 	udiv	r0, r4, lr
 80013e2:	fb0e 4410 	mls	r4, lr, r0, r4
 80013e6:	fb00 fa08 	mul.w	sl, r0, r8
 80013ea:	b2ad      	uxth	r5, r5
 80013ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013f0:	45a2      	cmp	sl, r4
 80013f2:	d908      	bls.n	8001406 <__udivmoddi4+0x24e>
 80013f4:	eb1c 0404 	adds.w	r4, ip, r4
 80013f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80013fc:	d22d      	bcs.n	800145a <__udivmoddi4+0x2a2>
 80013fe:	45a2      	cmp	sl, r4
 8001400:	d92b      	bls.n	800145a <__udivmoddi4+0x2a2>
 8001402:	3802      	subs	r0, #2
 8001404:	4464      	add	r4, ip
 8001406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800140a:	fba0 8902 	umull	r8, r9, r0, r2
 800140e:	eba4 040a 	sub.w	r4, r4, sl
 8001412:	454c      	cmp	r4, r9
 8001414:	46c6      	mov	lr, r8
 8001416:	464d      	mov	r5, r9
 8001418:	d319      	bcc.n	800144e <__udivmoddi4+0x296>
 800141a:	d016      	beq.n	800144a <__udivmoddi4+0x292>
 800141c:	b15e      	cbz	r6, 8001436 <__udivmoddi4+0x27e>
 800141e:	ebb3 020e 	subs.w	r2, r3, lr
 8001422:	eb64 0405 	sbc.w	r4, r4, r5
 8001426:	fa04 f707 	lsl.w	r7, r4, r7
 800142a:	fa22 f301 	lsr.w	r3, r2, r1
 800142e:	431f      	orrs	r7, r3
 8001430:	40cc      	lsrs	r4, r1
 8001432:	e9c6 7400 	strd	r7, r4, [r6]
 8001436:	2100      	movs	r1, #0
 8001438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800143c:	4631      	mov	r1, r6
 800143e:	4630      	mov	r0, r6
 8001440:	e70c      	b.n	800125c <__udivmoddi4+0xa4>
 8001442:	468c      	mov	ip, r1
 8001444:	e6eb      	b.n	800121e <__udivmoddi4+0x66>
 8001446:	4610      	mov	r0, r2
 8001448:	e6ff      	b.n	800124a <__udivmoddi4+0x92>
 800144a:	4543      	cmp	r3, r8
 800144c:	d2e6      	bcs.n	800141c <__udivmoddi4+0x264>
 800144e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001452:	eb69 050c 	sbc.w	r5, r9, ip
 8001456:	3801      	subs	r0, #1
 8001458:	e7e0      	b.n	800141c <__udivmoddi4+0x264>
 800145a:	4628      	mov	r0, r5
 800145c:	e7d3      	b.n	8001406 <__udivmoddi4+0x24e>
 800145e:	4611      	mov	r1, r2
 8001460:	e78c      	b.n	800137c <__udivmoddi4+0x1c4>
 8001462:	4681      	mov	r9, r0
 8001464:	e7b9      	b.n	80013da <__udivmoddi4+0x222>
 8001466:	4608      	mov	r0, r1
 8001468:	e773      	b.n	8001352 <__udivmoddi4+0x19a>
 800146a:	4608      	mov	r0, r1
 800146c:	e749      	b.n	8001302 <__udivmoddi4+0x14a>
 800146e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001472:	443d      	add	r5, r7
 8001474:	e713      	b.n	800129e <__udivmoddi4+0xe6>
 8001476:	3802      	subs	r0, #2
 8001478:	443c      	add	r4, r7
 800147a:	e724      	b.n	80012c6 <__udivmoddi4+0x10e>

0800147c <__aeabi_idiv0>:
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	889b      	ldrh	r3, [r3, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	88db      	ldrh	r3, [r3, #6]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
	if (total < 0)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b00      	cmp	r3, #0
 800149e:	da05      	bge.n	80014ac <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	891b      	ldrh	r3, [r3, #8]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

	if (total == 0)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e031      	b.n	800151c <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	88db      	ldrh	r3, [r3, #6]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	8912      	ldrh	r2, [r2, #8]
 80014c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80014c8:	fb02 f200 	mul.w	r2, r2, r0
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	461a      	mov	r2, r3
			* circ_buf->element_size);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	895b      	ldrh	r3, [r3, #10]
 80014d6:	fb03 f302 	mul.w	r3, r3, r2
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 80014da:	440b      	add	r3, r1
 80014dc:	613b      	str	r3, [r7, #16]

	if (elem)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	895b      	ldrh	r3, [r3, #10]
 80014e8:	461a      	mov	r2, r3
 80014ea:	6939      	ldr	r1, [r7, #16]
 80014ec:	68b8      	ldr	r0, [r7, #8]
 80014ee:	f008 ff5b 	bl	800a3a8 <memcpy>

	if (!read_only) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d110      	bne.n	800151a <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	88db      	ldrh	r3, [r3, #6]
 80014fc:	3301      	adds	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	88db      	ldrh	r3, [r3, #6]
 8001508:	461a      	mov	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	891b      	ldrh	r3, [r3, #8]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	429a      	cmp	r2, r3
 8001512:	db02      	blt.n	800151a <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	88db      	ldrh	r3, [r3, #6]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da05      	bge.n	800154e <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	891b      	ldrh	r3, [r3, #8]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	891b      	ldrh	r3, [r3, #8]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4293      	cmp	r3, r2
 8001558:	db02      	blt.n	8001560 <__circ_gbuf_push+0x3c>
		return -1; // Full
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e02b      	b.n	80015b8 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	889b      	ldrh	r3, [r3, #4]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	8912      	ldrh	r2, [r2, #8]
 800156c:	fbb3 f0f2 	udiv	r0, r3, r2
 8001570:	fb02 f200 	mul.w	r2, r2, r0
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	b29b      	uxth	r3, r3
 8001578:	461a      	mov	r2, r3
			* circ_buf->element_size );
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	895b      	ldrh	r3, [r3, #10]
 800157e:	fb03 f302 	mul.w	r3, r3, r2
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8001582:	440b      	add	r3, r1
 8001584:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	895b      	ldrh	r3, [r3, #10]
 800158a:	461a      	mov	r2, r3
 800158c:	6839      	ldr	r1, [r7, #0]
 800158e:	68b8      	ldr	r0, [r7, #8]
 8001590:	f008 ff0a 	bl	800a3a8 <memcpy>
	circ_buf->push_count++;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	889b      	ldrh	r3, [r3, #4]
 8001598:	3301      	adds	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	461a      	mov	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	891b      	ldrh	r3, [r3, #8]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	429a      	cmp	r2, r3
 80015ae:	db02      	blt.n	80015b6 <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	809a      	strh	r2, [r3, #4]
	return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d6:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a42      	ldr	r2, [pc, #264]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015dc:	f043 0320 	orr.w	r3, r3, #32
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a3c      	ldr	r2, [pc, #240]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <MX_GPIO_Init+0x124>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a36      	ldr	r2, [pc, #216]	; (80016e4 <MX_GPIO_Init+0x124>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <MX_GPIO_Init+0x124>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2111      	movs	r1, #17
 8001622:	4831      	ldr	r0, [pc, #196]	; (80016e8 <MX_GPIO_Init+0x128>)
 8001624:	f001 fcbd 	bl	8002fa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2108      	movs	r1, #8
 800162c:	482f      	ldr	r0, [pc, #188]	; (80016ec <MX_GPIO_Init+0x12c>)
 800162e:	f001 fcb8 	bl	8002fa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_CLR_Pin;
 8001632:	2301      	movs	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001636:	2311      	movs	r3, #17
 8001638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_CLR_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4619      	mov	r1, r3
 8001648:	4827      	ldr	r0, [pc, #156]	; (80016e8 <MX_GPIO_Init+0x128>)
 800164a:	f001 fb13 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 800164e:	2302      	movs	r3, #2
 8001650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001652:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001658:	2301      	movs	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4619      	mov	r1, r3
 8001662:	4821      	ldr	r0, [pc, #132]	; (80016e8 <MX_GPIO_Init+0x128>)
 8001664:	f001 fb06 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CPU_LDAC_Pin;
 8001668:	2304      	movs	r3, #4
 800166a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001672:	2301      	movs	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CPU_LDAC_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	4619      	mov	r1, r3
 800167c:	481a      	ldr	r0, [pc, #104]	; (80016e8 <MX_GPIO_Init+0x128>)
 800167e:	f001 faf9 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8001682:	2310      	movs	r3, #16
 8001684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168a:	2301      	movs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4619      	mov	r1, r3
 8001698:	4813      	ldr	r0, [pc, #76]	; (80016e8 <MX_GPIO_Init+0x128>)
 800169a:	f001 faeb 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COUNT_EN_Pin;
 800169e:	2308      	movs	r3, #8
 80016a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(COUNT_EN_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4619      	mov	r1, r3
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_GPIO_Init+0x12c>)
 80016b6:	f001 fadd 	bl	8002c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2007      	movs	r0, #7
 80016c0:	f001 faa1 	bl	8002c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016c4:	2007      	movs	r0, #7
 80016c6:	f001 faba 	bl	8002c3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2008      	movs	r0, #8
 80016d0:	f001 fa99 	bl	8002c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80016d4:	2008      	movs	r0, #8
 80016d6:	f001 fab2 	bl	8002c3e <HAL_NVIC_EnableIRQ>

}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400

080016f0 <USB_rx_command_buffer_push_refd>:

uint32_t DAC_tx_buffer;
uint8_t DAC_tx_tmp_buffer[4];

// #define CRICBUF_CLEAN_ON_POP
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4804      	ldr	r0, [pc, #16]	; (800170c <USB_rx_command_buffer_push_refd+0x1c>)
 80016fc:	f7ff ff12 	bl	8001524 <__circ_gbuf_push>
 8001700:	4603      	mov	r3, r0
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000000c 	.word	0x2000000c

08001710 <USB_rx_command_buffer_pop_refd>:
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <USB_rx_command_buffer_pop_refd+0x1c>)
 800171e:	f7ff feaf 	bl	8001480 <__circ_gbuf_pop>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000000c 	.word	0x2000000c

08001730 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <main+0xdc>)
 8001738:	2200      	movs	r2, #0
 800173a:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 800173c:	4b33      	ldr	r3, [pc, #204]	; (800180c <main+0xdc>)
 800173e:	2208      	movs	r2, #8
 8001740:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <main+0xdc>)
 8001744:	2201      	movs	r2, #1
 8001746:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 8001748:	4b30      	ldr	r3, [pc, #192]	; (800180c <main+0xdc>)
 800174a:	2201      	movs	r2, #1
 800174c:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 800174e:	4b2f      	ldr	r3, [pc, #188]	; (800180c <main+0xdc>)
 8001750:	2200      	movs	r2, #0
 8001752:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <main+0xdc>)
 8001756:	2200      	movs	r2, #0
 8001758:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <main+0xdc>)
 800175c:	2200      	movs	r2, #0
 800175e:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <main+0xdc>)
 8001762:	2200      	movs	r2, #0
 8001764:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <main+0xdc>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800176c:	f001 f8e3 	bl	8002936 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001770:	f000 f85c 	bl	800182c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001774:	f7ff ff24 	bl	80015c0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001778:	f000 fea0 	bl	80024bc <MX_SPI1_Init>
	MX_SPI2_Init();
 800177c:	f000 fed4 	bl	8002528 <MX_SPI2_Init>
	MX_USB_DEVICE_Init();
 8001780:	f008 f8ee 	bl	8009960 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	DAC_target_speed=0.001; //  V/s
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <main+0xe0>)
 8001786:	4a23      	ldr	r2, [pc, #140]	; (8001814 <main+0xe4>)
 8001788:	601a      	str	r2, [r3, #0]
	DAC_code=0x7FFFF;
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <main+0xe8>)
 800178c:	4a23      	ldr	r2, [pc, #140]	; (800181c <main+0xec>)
 800178e:	601a      	str	r2, [r3, #0]
	DAC_code_direction=0;
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <main+0xf0>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]

	DDS_Init();
 8001796:	f000 f895 	bl	80018c4 <DDS_Init>
	cfg.LDACMODE=0;
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <main+0xdc>)
 800179c:	2200      	movs	r2, #0
 800179e:	709a      	strb	r2, [r3, #2]
	HAL_Delay(500);
 80017a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017a4:	f001 f936 	bl	8002a14 <HAL_Delay>
	DAC_SendInit();
 80017a8:	f000 f964 	bl	8001a74 <DAC_SendInit>
	HAL_Delay(500);
 80017ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017b0:	f001 f930 	bl	8002a14 <HAL_Delay>
	DAC_Write(DAC_code);
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <main+0xe8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fadf 	bl	8001d7c <DAC_Write>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(USB_CDC_End_Line_Received)
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <main+0xf4>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0fb      	beq.n	80017be <main+0x8e>
		{	  uint8_t i=0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	71fb      	strb	r3, [r7, #7]
		USB_CDC_End_Line_Received=0;
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <main+0xf4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
		while (1) {
			if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <main+0xf8>)
 80017d4:	4413      	add	r3, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff9a 	bl	8001710 <USB_rx_command_buffer_pop_refd>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <main+0xba>
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	4a10      	ldr	r2, [pc, #64]	; (8001828 <main+0xf8>)
 80017e6:	210a      	movs	r1, #10
 80017e8:	54d1      	strb	r1, [r2, r3]
			if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <main+0xf8>)
 80017ee:	5cd3      	ldrb	r3, [r2, r3]
 80017f0:	2b0a      	cmp	r3, #10
 80017f2:	d008      	beq.n	8001806 <main+0xd6>
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <main+0xf8>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	2b0d      	cmp	r3, #13
 80017fc:	d003      	beq.n	8001806 <main+0xd6>
			i++;
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	3301      	adds	r3, #1
 8001802:	71fb      	strb	r3, [r7, #7]
			if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8001804:	e7e4      	b.n	80017d0 <main+0xa0>
		}
		Parsing_command();
 8001806:	f000 fb8f 	bl	8001f28 <Parsing_command>
		if(USB_CDC_End_Line_Received)
 800180a:	e7d8      	b.n	80017be <main+0x8e>
 800180c:	200005c8 	.word	0x200005c8
 8001810:	2000061c 	.word	0x2000061c
 8001814:	3a83126f 	.word	0x3a83126f
 8001818:	20000384 	.word	0x20000384
 800181c:	0007ffff 	.word	0x0007ffff
 8001820:	20000620 	.word	0x20000620
 8001824:	2000061b 	.word	0x2000061b
 8001828:	200005fc 	.word	0x200005fc

0800182c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b092      	sub	sp, #72	; 0x48
 8001830:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	2234      	movs	r2, #52	; 0x34
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f008 fdc2 	bl	800a3c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	463b      	mov	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <SystemClock_Config+0x94>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001856:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <SystemClock_Config+0x94>)
 8001858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800185c:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800185e:	2301      	movs	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001862:	2301      	movs	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001866:	2302      	movs	r3, #2
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001870:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001874:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001876:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4618      	mov	r0, r3
 8001882:	f002 ffeb 	bl	800485c <HAL_RCC_OscConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0x64>
	{
		Error_Handler();
 800188c:	f000 fe10 	bl	80024b0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001890:	230f      	movs	r3, #15
 8001892:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001894:	2303      	movs	r3, #3
 8001896:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018a4:	463b      	mov	r3, r7
 80018a6:	2101      	movs	r1, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fb07 	bl	8004ebc <HAL_RCC_ClockConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 80018b4:	f000 fdfc 	bl	80024b0 <Error_Handler>
	}
}
 80018b8:	bf00      	nop
 80018ba:	3748      	adds	r7, #72	; 0x48
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40007000 	.word	0x40007000

080018c4 <DDS_Init>:

/* USER CODE BEGIN 4 */
//==============================================================================================
void DDS_Init(void)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0

	DDS_target_frequecny=0xFFFFF/(DAC_fullrange_voltage/DAC_target_speed);
 80018ca:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <DDS_Init+0x18c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a61      	ldr	r2, [pc, #388]	; (8001a54 <DDS_Init+0x190>)
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff faed 	bl	8000eb4 <__aeabi_fdiv>
 80018da:	4603      	mov	r3, r0
 80018dc:	4619      	mov	r1, r3
 80018de:	485e      	ldr	r0, [pc, #376]	; (8001a58 <DDS_Init+0x194>)
 80018e0:	f7ff fae8 	bl	8000eb4 <__aeabi_fdiv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <DDS_Init+0x198>)
 80018ea:	601a      	str	r2, [r3, #0]

	if((DDS_target_frequecny*256)>500000)
 80018ec:	4b5b      	ldr	r3, [pc, #364]	; (8001a5c <DDS_Init+0x198>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fa29 	bl	8000d4c <__aeabi_fmul>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4958      	ldr	r1, [pc, #352]	; (8001a60 <DDS_Init+0x19c>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fbe0 	bl	80010c4 <__aeabi_fcmpgt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d030      	beq.n	800196c <DDS_Init+0xa8>
	{
		DDS_target_multipiller=(DDS_target_frequecny*256)/500000;
 800190a:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <DDS_Init+0x198>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fa1a 	bl	8000d4c <__aeabi_fmul>
 8001918:	4603      	mov	r3, r0
 800191a:	4951      	ldr	r1, [pc, #324]	; (8001a60 <DDS_Init+0x19c>)
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fac9 	bl	8000eb4 <__aeabi_fdiv>
 8001922:	4603      	mov	r3, r0
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fbd7 	bl	80010d8 <__aeabi_f2uiz>
 800192a:	4603      	mov	r3, r0
 800192c:	4a4d      	ldr	r2, [pc, #308]	; (8001a64 <DDS_Init+0x1a0>)
 800192e:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=0xFFFFF/(DAC_fullrange_voltage/DAC_target_speed)/DDS_target_multipiller;
 8001930:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <DDS_Init+0x18c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a47      	ldr	r2, [pc, #284]	; (8001a54 <DDS_Init+0x190>)
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff faba 	bl	8000eb4 <__aeabi_fdiv>
 8001940:	4603      	mov	r3, r0
 8001942:	4619      	mov	r1, r3
 8001944:	4844      	ldr	r0, [pc, #272]	; (8001a58 <DDS_Init+0x194>)
 8001946:	f7ff fab5 	bl	8000eb4 <__aeabi_fdiv>
 800194a:	4603      	mov	r3, r0
 800194c:	461c      	mov	r4, r3
 800194e:	4b45      	ldr	r3, [pc, #276]	; (8001a64 <DDS_Init+0x1a0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f9a2 	bl	8000c9c <__aeabi_ui2f>
 8001958:	4603      	mov	r3, r0
 800195a:	4619      	mov	r1, r3
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff faa9 	bl	8000eb4 <__aeabi_fdiv>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <DDS_Init+0x198>)
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e002      	b.n	8001972 <DDS_Init+0xae>
	} else DDS_target_multipiller = 1;
 800196c:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <DDS_Init+0x1a0>)
 800196e:	2201      	movs	r2, #1
 8001970:	601a      	str	r2, [r3, #0]

	float DDS_FTW=((DDS_target_frequecny*256)/DDS_clock_frequecny)*0xFFFFFFFF;
 8001972:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <DDS_Init+0x198>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f9e6 	bl	8000d4c <__aeabi_fmul>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <DDS_Init+0x1a4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f7ff fa92 	bl	8000eb4 <__aeabi_fdiv>
 8001990:	4603      	mov	r3, r0
 8001992:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f9d8 	bl	8000d4c <__aeabi_fmul>
 800199c:	4603      	mov	r3, r0
 800199e:	607b      	str	r3, [r7, #4]

	DDS_tx_buffer[0]=0xF800; // Enter DAC to Sleep+Reset mode
 80019a0:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <DDS_Init+0x1a8>)
 80019a2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80019a6:	801a      	strh	r2, [r3, #0]

	DDS_tx_buffer[1]=0x3300; // Write to Frequency 0 Reg, H MSB
 80019a8:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <DDS_Init+0x1a8>)
 80019aa:	f44f 524c 	mov.w	r2, #13056	; 0x3300
 80019ae:	805a      	strh	r2, [r3, #2]
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 80019b0:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <DDS_Init+0x1a8>)
 80019b2:	885c      	ldrh	r4, [r3, #2]
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fb8f 	bl	80010d8 <__aeabi_f2uiz>
 80019ba:	4603      	mov	r3, r0
 80019bc:	0e1b      	lsrs	r3, r3, #24
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4423      	add	r3, r4
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <DDS_Init+0x1a8>)
 80019c6:	805a      	strh	r2, [r3, #2]

	DDS_tx_buffer[2]=0x2200; // Write to Frequency 0 Reg, L MSBs
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <DDS_Init+0x1a8>)
 80019ca:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80019ce:	809a      	strh	r2, [r3, #4]
	DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 80019d0:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <DDS_Init+0x1a8>)
 80019d2:	889c      	ldrh	r4, [r3, #4]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff fb7f 	bl	80010d8 <__aeabi_f2uiz>
 80019da:	4603      	mov	r3, r0
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4423      	add	r3, r4
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <DDS_Init+0x1a8>)
 80019ea:	809a      	strh	r2, [r3, #4]

	DDS_tx_buffer[3]=0x3100; // Write to Frequency 0 Reg, H LSBs
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <DDS_Init+0x1a8>)
 80019ee:	f44f 5244 	mov.w	r2, #12544	; 0x3100
 80019f2:	80da      	strh	r2, [r3, #6]
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <DDS_Init+0x1a8>)
 80019f6:	88dc      	ldrh	r4, [r3, #6]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fb6d 	bl	80010d8 <__aeabi_f2uiz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4423      	add	r3, r4
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <DDS_Init+0x1a8>)
 8001a0e:	80da      	strh	r2, [r3, #6]

	DDS_tx_buffer[4]=0x2000; // Write to Frequency 0 Reg, L LSBs
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <DDS_Init+0x1a8>)
 8001a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a16:	811a      	strh	r2, [r3, #8]
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <DDS_Init+0x1a8>)
 8001a1a:	891c      	ldrh	r4, [r3, #8]
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fb5b 	bl	80010d8 <__aeabi_f2uiz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4423      	add	r3, r4
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <DDS_Init+0x1a8>)
 8001a30:	811a      	strh	r2, [r3, #8]

	DDS_tx_buffer[5]=0xC000; // Exit DAC from Sleep+Reset mode
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <DDS_Init+0x1a8>)
 8001a34:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001a38:	815a      	strh	r2, [r3, #10]

	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 8001a3a:	2364      	movs	r3, #100	; 0x64
 8001a3c:	2206      	movs	r2, #6
 8001a3e:	490b      	ldr	r1, [pc, #44]	; (8001a6c <DDS_Init+0x1a8>)
 8001a40:	480b      	ldr	r0, [pc, #44]	; (8001a70 <DDS_Init+0x1ac>)
 8001a42:	f003 fd19 	bl	8005478 <HAL_SPI_Transmit>

}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000004 	.word	0x20000004
 8001a54:	2000061c 	.word	0x2000061c
 8001a58:	497ffff0 	.word	0x497ffff0
 8001a5c:	200005c4 	.word	0x200005c4
 8001a60:	48f42400 	.word	0x48f42400
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	200005b8 	.word	0x200005b8
 8001a70:	20000624 	.word	0x20000624

08001a74 <DAC_SendInit>:
}


//==============================================================================================
void DAC_SendInit(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	DAC_tx_buffer=0x02000000; // Write CONFIG1
 8001a78:	4b43      	ldr	r3, [pc, #268]	; (8001b88 <DAC_SendInit+0x114>)
 8001a7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a7e:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 8001a80:	4b42      	ldr	r3, [pc, #264]	; (8001b8c <DAC_SendInit+0x118>)
 8001a82:	7a1b      	ldrb	r3, [r3, #8]
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	f003 0210 	and.w	r2, r3, #16
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <DAC_SendInit+0x114>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a3d      	ldr	r2, [pc, #244]	; (8001b88 <DAC_SendInit+0x114>)
 8001a92:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x0F)<<6;
 8001a94:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <DAC_SendInit+0x118>)
 8001a96:	79db      	ldrb	r3, [r3, #7]
 8001a98:	019b      	lsls	r3, r3, #6
 8001a9a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <DAC_SendInit+0x114>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a38      	ldr	r2, [pc, #224]	; (8001b88 <DAC_SendInit+0x114>)
 8001aa6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <DAC_SendInit+0x118>)
 8001aaa:	799b      	ldrb	r3, [r3, #6]
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001ab2:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <DAC_SendInit+0x114>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a33      	ldr	r2, [pc, #204]	; (8001b88 <DAC_SendInit+0x114>)
 8001aba:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 8001abc:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <DAC_SendInit+0x118>)
 8001abe:	795b      	ldrb	r3, [r3, #5]
 8001ac0:	02db      	lsls	r3, r3, #11
 8001ac2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001ac6:	4b30      	ldr	r3, [pc, #192]	; (8001b88 <DAC_SendInit+0x114>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a2e      	ldr	r2, [pc, #184]	; (8001b88 <DAC_SendInit+0x114>)
 8001ace:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <DAC_SendInit+0x118>)
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	031b      	lsls	r3, r3, #12
 8001ad6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <DAC_SendInit+0x114>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <DAC_SendInit+0x114>)
 8001ae2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <DAC_SendInit+0x118>)
 8001ae6:	78db      	ldrb	r3, [r3, #3]
 8001ae8:	035b      	lsls	r3, r3, #13
 8001aea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <DAC_SendInit+0x114>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a24      	ldr	r2, [pc, #144]	; (8001b88 <DAC_SendInit+0x114>)
 8001af6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <DAC_SendInit+0x118>)
 8001afa:	789b      	ldrb	r3, [r3, #2]
 8001afc:	039b      	lsls	r3, r3, #14
 8001afe:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <DAC_SendInit+0x114>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <DAC_SendInit+0x114>)
 8001b0a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <DAC_SendInit+0x118>)
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	049b      	lsls	r3, r3, #18
 8001b12:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <DAC_SendInit+0x114>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a1a      	ldr	r2, [pc, #104]	; (8001b88 <DAC_SendInit+0x114>)
 8001b1e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <DAC_SendInit+0x118>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <DAC_SendInit+0x114>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <DAC_SendInit+0x114>)
 8001b32:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <DAC_SendInit+0x114>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0e1b      	lsrs	r3, r3, #24
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <DAC_SendInit+0x11c>)
 8001b3e:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <DAC_SendInit+0x114>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <DAC_SendInit+0x11c>)
 8001b4a:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <DAC_SendInit+0x114>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <DAC_SendInit+0x11c>)
 8001b56:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <DAC_SendInit+0x114>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <DAC_SendInit+0x11c>)
 8001b60:	70da      	strb	r2, [r3, #3]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2110      	movs	r1, #16
 8001b66:	480b      	ldr	r0, [pc, #44]	; (8001b94 <DAC_SendInit+0x120>)
 8001b68:	f001 fa1b 	bl	8002fa2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,4,5);
 8001b6c:	2305      	movs	r3, #5
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <DAC_SendInit+0x11c>)
 8001b72:	4809      	ldr	r0, [pc, #36]	; (8001b98 <DAC_SendInit+0x124>)
 8001b74:	f003 fc80 	bl	8005478 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <DAC_SendInit+0x120>)
 8001b7e:	f001 fa10 	bl	8002fa2 <HAL_GPIO_WritePin>

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200005f8 	.word	0x200005f8
 8001b8c:	200005c8 	.word	0x200005c8
 8001b90:	200005f4 	.word	0x200005f4
 8001b94:	40020000 	.word	0x40020000
 8001b98:	2000067c 	.word	0x2000067c

08001b9c <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 8001b9c:	b5b0      	push	{r4, r5, r7, lr}
 8001b9e:	b092      	sub	sp, #72	; 0x48
 8001ba0:	af00      	add	r7, sp, #0
	uint8_t OK[]="\r\n OK \n\rEnter command: ";
 8001ba2:	4b6d      	ldr	r3, [pc, #436]	; (8001d58 <DAC_TEMP_CAL+0x1bc>)
 8001ba4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ba8:	461d      	mov	r5, r3
 8001baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bb2:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t run_cal[]="\r\nCalibration in progress...";
 8001bb6:	4b69      	ldr	r3, [pc, #420]	; (8001d5c <DAC_TEMP_CAL+0x1c0>)
 8001bb8:	f107 0408 	add.w	r4, r7, #8
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bc6:	c407      	stmia	r4!, {r0, r1, r2}
 8001bc8:	7023      	strb	r3, [r4, #0]

	uint8_t spi_receive[4],DAC_tx_tmp_buffer2[4],ALM=0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	uint8_t count_tmp=HAL_GPIO_ReadPin(COUNT_EN_GPIO_Port, COUNT_EN_Pin); // Save LDAC signal state
 8001bd0:	2108      	movs	r1, #8
 8001bd2:	4863      	ldr	r0, [pc, #396]	; (8001d60 <DAC_TEMP_CAL+0x1c4>)
 8001bd4:	f001 f9ce 	bl	8002f74 <HAL_GPIO_ReadPin>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001bde:	2201      	movs	r2, #1
 8001be0:	2108      	movs	r1, #8
 8001be2:	485f      	ldr	r0, [pc, #380]	; (8001d60 <DAC_TEMP_CAL+0x1c4>)
 8001be4:	f001 f9dd 	bl	8002fa2 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8001be8:	200a      	movs	r0, #10
 8001bea:	f000 ff13 	bl	8002a14 <HAL_Delay>
	CDC_Transmit_FS(run_cal, strlen((const char *)run_cal));
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe face 	bl	8000194 <strlen>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f007 ffb0 	bl	8009b68 <CDC_Transmit_FS>
	HAL_Delay(10);
 8001c08:	200a      	movs	r0, #10
 8001c0a:	f000 ff03 	bl	8002a14 <HAL_Delay>

	cfg.EN_TMP_CAL=1;
 8001c0e:	4b55      	ldr	r3, [pc, #340]	; (8001d64 <DAC_TEMP_CAL+0x1c8>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
	DAC_SendInit();
 8001c14:	f7ff ff2e 	bl	8001a74 <DAC_SendInit>

	for(int i=0;i<4;i++)spi_receive[i]=0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c1c:	e007      	b.n	8001c2e <DAC_TEMP_CAL+0x92>
 8001c1e:	1d3a      	adds	r2, r7, #4
 8001c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c22:	4413      	add	r3, r2
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	ddf4      	ble.n	8001c1e <DAC_TEMP_CAL+0x82>

	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 8001c34:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <DAC_TEMP_CAL+0x1cc>)
 8001c36:	4a4d      	ldr	r2, [pc, #308]	; (8001d6c <DAC_TEMP_CAL+0x1d0>)
 8001c38:	601a      	str	r2, [r3, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8001c3a:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <DAC_TEMP_CAL+0x1cc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0e1b      	lsrs	r3, r3, #24
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b4b      	ldr	r3, [pc, #300]	; (8001d70 <DAC_TEMP_CAL+0x1d4>)
 8001c44:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8001c46:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <DAC_TEMP_CAL+0x1cc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0c1b      	lsrs	r3, r3, #16
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b48      	ldr	r3, [pc, #288]	; (8001d70 <DAC_TEMP_CAL+0x1d4>)
 8001c50:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8001c52:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <DAC_TEMP_CAL+0x1cc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b45      	ldr	r3, [pc, #276]	; (8001d70 <DAC_TEMP_CAL+0x1d4>)
 8001c5c:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8001c5e:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <DAC_TEMP_CAL+0x1cc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <DAC_TEMP_CAL+0x1d4>)
 8001c66:	70da      	strb	r2, [r3, #3]

	DAC_tx_buffer=0x85000000; // read status register
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <DAC_TEMP_CAL+0x1cc>)
 8001c6a:	f04f 4205 	mov.w	r2, #2231369728	; 0x85000000
 8001c6e:	601a      	str	r2, [r3, #0]

	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8001c70:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <DAC_TEMP_CAL+0x1cc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0e1b      	lsrs	r3, r3, #24
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	703b      	strb	r3, [r7, #0]
	DAC_tx_tmp_buffer2[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <DAC_TEMP_CAL+0x1cc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	707b      	strb	r3, [r7, #1]
	DAC_tx_tmp_buffer2[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <DAC_TEMP_CAL+0x1cc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	70bb      	strb	r3, [r7, #2]
	DAC_tx_tmp_buffer2[3]=(DAC_tx_buffer & 0x000000FF);
 8001c8e:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <DAC_TEMP_CAL+0x1cc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2110      	movs	r1, #16
 8001c9a:	4836      	ldr	r0, [pc, #216]	; (8001d74 <DAC_TEMP_CAL+0x1d8>)
 8001c9c:	f001 f981 	bl	8002fa2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,4,2);
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4932      	ldr	r1, [pc, #200]	; (8001d70 <DAC_TEMP_CAL+0x1d4>)
 8001ca6:	4834      	ldr	r0, [pc, #208]	; (8001d78 <DAC_TEMP_CAL+0x1dc>)
 8001ca8:	f003 fbe6 	bl	8005478 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4830      	ldr	r0, [pc, #192]	; (8001d74 <DAC_TEMP_CAL+0x1d8>)
 8001cb2:	f001 f976 	bl	8002fa2 <HAL_GPIO_WritePin>

	do{

		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2110      	movs	r1, #16
 8001cba:	482e      	ldr	r0, [pc, #184]	; (8001d74 <DAC_TEMP_CAL+0x1d8>)
 8001cbc:	f001 f971 	bl	8002fa2 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,4,2);
 8001cc0:	4639      	mov	r1, r7
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	482c      	ldr	r0, [pc, #176]	; (8001d78 <DAC_TEMP_CAL+0x1dc>)
 8001cc8:	f003 fbd6 	bl	8005478 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2110      	movs	r1, #16
 8001cd0:	4828      	ldr	r0, [pc, #160]	; (8001d74 <DAC_TEMP_CAL+0x1d8>)
 8001cd2:	f001 f966 	bl	8002fa2 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2110      	movs	r1, #16
 8001cda:	4826      	ldr	r0, [pc, #152]	; (8001d74 <DAC_TEMP_CAL+0x1d8>)
 8001cdc:	f001 f961 	bl	8002fa2 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 4, 2);
 8001ce0:	1d39      	adds	r1, r7, #4
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	4824      	ldr	r0, [pc, #144]	; (8001d78 <DAC_TEMP_CAL+0x1dc>)
 8001ce8:	f003 fd02 	bl	80056f0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2110      	movs	r1, #16
 8001cf0:	4820      	ldr	r0, [pc, #128]	; (8001d74 <DAC_TEMP_CAL+0x1d8>)
 8001cf2:	f001 f956 	bl	8002fa2 <HAL_GPIO_WritePin>
		ALM=(spi_receive[2] & 0x10) >> 4;
 8001cf6:	79bb      	ldrb	r3, [r7, #6]
 8001cf8:	111b      	asrs	r3, r3, #4
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if(ALM!=1)HAL_Delay(1000);
 8001d04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d003      	beq.n	8001d14 <DAC_TEMP_CAL+0x178>
 8001d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d10:	f000 fe80 	bl	8002a14 <HAL_Delay>
	}while(ALM!=1);
 8001d14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d1cc      	bne.n	8001cb6 <DAC_TEMP_CAL+0x11a>

	HAL_Delay(10);
 8001d1c:	200a      	movs	r0, #10
 8001d1e:	f000 fe79 	bl	8002a14 <HAL_Delay>
	CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fa34 	bl	8000194 <strlen>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f007 ff16 	bl	8009b68 <CDC_Transmit_FS>
	HAL_Delay(10);
 8001d3c:	200a      	movs	r0, #10
 8001d3e:	f000 fe69 	bl	8002a14 <HAL_Delay>

	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, count_tmp); // Back LDAC signal state
 8001d42:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001d46:	461a      	mov	r2, r3
 8001d48:	2108      	movs	r1, #8
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <DAC_TEMP_CAL+0x1c4>)
 8001d4c:	f001 f929 	bl	8002fa2 <HAL_GPIO_WritePin>
}
 8001d50:	bf00      	nop
 8001d52:	3748      	adds	r7, #72	; 0x48
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bdb0      	pop	{r4, r5, r7, pc}
 8001d58:	0800d158 	.word	0x0800d158
 8001d5c:	0800d170 	.word	0x0800d170
 8001d60:	40020400 	.word	0x40020400
 8001d64:	200005c8 	.word	0x200005c8
 8001d68:	200005f8 	.word	0x200005f8
 8001d6c:	04000100 	.word	0x04000100
 8001d70:	200005f4 	.word	0x200005f4
 8001d74:	40020000 	.word	0x40020000
 8001d78:	2000067c 	.word	0x2000067c

08001d7c <DAC_Write>:

//==============================================================================================
void DAC_Write(uint32_t value)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	// Speedup hint: Calculate data AFTER send.
	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <DAC_Write+0x7c>)
 8001d86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d8a:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d94:	f023 030f 	bic.w	r3, r3, #15
 8001d98:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <DAC_Write+0x7c>)
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <DAC_Write+0x7c>)
 8001da0:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <DAC_Write+0x7c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	0e1b      	lsrs	r3, r3, #24
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <DAC_Write+0x80>)
 8001dac:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <DAC_Write+0x7c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0c1b      	lsrs	r3, r3, #16
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <DAC_Write+0x80>)
 8001db8:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <DAC_Write+0x7c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <DAC_Write+0x80>)
 8001dc4:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <DAC_Write+0x7c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <DAC_Write+0x80>)
 8001dce:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2110      	movs	r1, #16
 8001dd4:	480a      	ldr	r0, [pc, #40]	; (8001e00 <DAC_Write+0x84>)
 8001dd6:	f001 f8e4 	bl	8002fa2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,4,2);
 8001dda:	2302      	movs	r3, #2
 8001ddc:	2204      	movs	r2, #4
 8001dde:	4907      	ldr	r1, [pc, #28]	; (8001dfc <DAC_Write+0x80>)
 8001de0:	4808      	ldr	r0, [pc, #32]	; (8001e04 <DAC_Write+0x88>)
 8001de2:	f003 fb49 	bl	8005478 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001de6:	2201      	movs	r2, #1
 8001de8:	2110      	movs	r1, #16
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <DAC_Write+0x84>)
 8001dec:	f001 f8d9 	bl	8002fa2 <HAL_GPIO_WritePin>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200005f8 	.word	0x200005f8
 8001dfc:	200005f4 	.word	0x200005f4
 8001e00:	40020000 	.word	0x40020000
 8001e04:	2000067c 	.word	0x2000067c

08001e08 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
	uint8_t Done[]="\r\n CYCLE COMPLETE !\n\r\n\r";
 8001e12:	4b32      	ldr	r3, [pc, #200]	; (8001edc <HAL_GPIO_EXTI_Callback+0xd4>)
 8001e14:	f107 0408 	add.w	r4, r7, #8
 8001e18:	461d      	mov	r5, r3
 8001e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e22:	e884 0003 	stmia.w	r4, {r0, r1}
	if(GPIO_Pin == GPIO_PIN_2)
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d152      	bne.n	8001ed2 <HAL_GPIO_EXTI_Callback+0xca>
	{
		if(DAC_code_direction)
 8001e2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d024      	beq.n	8001e7e <HAL_GPIO_EXTI_Callback+0x76>
		{
			if(DAC_code<=0xFFFFF)
 8001e34:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e3c:	d207      	bcs.n	8001e4e <HAL_GPIO_EXTI_Callback+0x46>
			{
				DAC_code+=DDS_target_multipiller;
 8001e3e:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a26      	ldr	r2, [pc, #152]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e03c      	b.n	8001ec8 <HAL_GPIO_EXTI_Callback+0xc0>
			} else  {
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2108      	movs	r1, #8
 8001e52:	4826      	ldr	r0, [pc, #152]	; (8001eec <HAL_GPIO_EXTI_Callback+0xe4>)
 8001e54:	f001 f8a5 	bl	8002fa2 <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8001e5e:	f7ff fe09 	bl	8001a74 <DAC_SendInit>
				//				DAC_code=0xFFFFF;
				//				DAC_code_direction=0;
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe f994 	bl	8000194 <strlen>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f007 fe76 	bl	8009b68 <CDC_Transmit_FS>
 8001e7c:	e024      	b.n	8001ec8 <HAL_GPIO_EXTI_Callback+0xc0>

			}
		}
		else
		{
			if(DAC_code>=DDS_target_multipiller)
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d307      	bcc.n	8001e9a <HAL_GPIO_EXTI_Callback+0x92>
			{
				DAC_code-=DDS_target_multipiller;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e016      	b.n	8001ec8 <HAL_GPIO_EXTI_Callback+0xc0>
			} else {
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2108      	movs	r1, #8
 8001e9e:	4813      	ldr	r0, [pc, #76]	; (8001eec <HAL_GPIO_EXTI_Callback+0xe4>)
 8001ea0:	f001 f87f 	bl	8002fa2 <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8001eaa:	f7ff fde3 	bl	8001a74 <DAC_SendInit>
				//				DAC_code=0x0;
				//				DAC_code_direction=1;
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe f96e 	bl	8000194 <strlen>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f007 fe50 	bl	8009b68 <CDC_Transmit_FS>
			}
		}
		DAC_Write(DAC_code);
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff55 	bl	8001d7c <DAC_Write>
	//		  while(HAL_GPIO_ReadPin(DAC_ALARM_GPIO_Port, DAC_ALARM_Pin)==GPIO_PIN_SET);
	//		  HAL_Delay(100);
	// }
	//  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eda:	bf00      	nop
 8001edc:	0800d190 	.word	0x0800d190
 8001ee0:	20000620 	.word	0x20000620
 8001ee4:	20000384 	.word	0x20000384
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	200005c8 	.word	0x200005c8

08001ef4 <Write_to_circ_buffer>:

//==============================================================================================
void Write_to_circ_buffer(uint8_t Buf)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fbf5 	bl	80016f0 <USB_rx_command_buffer_push_refd>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <Write_to_circ_buffer+0x24>
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <Write_to_circ_buffer+0x2c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	809a      	strh	r2, [r3, #4]
 8001f12:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <Write_to_circ_buffer+0x2c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	80da      	strh	r2, [r3, #6]
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000000c 	.word	0x2000000c
 8001f24:	00000000 	.word	0x00000000

08001f28 <Parsing_command>:

//==============================================================================================
void Parsing_command(void)
{
 8001f28:	b5b0      	push	{r4, r5, r7, lr}
 8001f2a:	b0ec      	sub	sp, #432	; 0x1b0
 8001f2c:	af00      	add	r7, sp, #0
	float atof_tmp;
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];
	//	uint8_t Clear[]="\033c \rEnter command:";
	uint8_t Error1[]="\r\n ERROR\n\r\n\r"
 8001f2e:	f107 0318 	add.w	r3, r7, #24
 8001f32:	4ad4      	ldr	r2, [pc, #848]	; (8002284 <Parsing_command+0x35c>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	4611      	mov	r1, r2
 8001f38:	f240 134b 	movw	r3, #331	; 0x14b
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f008 fa33 	bl	800a3a8 <memcpy>
			"DAC_TEMPCAL START        - start temperature calibration cycle\n\r"
			"SWEEP_RATE 1.0E-3        - set dv/dt speed\n\r"
			"SWEEP_DIRECTION UP/DOWN  - set dv/dt direction(increase or dicrease)\n\r"
			"\n\r"
			"\n\rEnter command: ";
	uint8_t OK[]="\r\n OK \n\rEnter command: ";
 8001f42:	463b      	mov	r3, r7
 8001f44:	4ad0      	ldr	r2, [pc, #832]	; (8002288 <Parsing_command+0x360>)
 8001f46:	461c      	mov	r4, r3
 8001f48:	4615      	mov	r5, r2
 8001f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f52:	e884 0003 	stmia.w	r4, {r0, r1}

	found = strtok((char *)command_buffer," ");
 8001f56:	49cd      	ldr	r1, [pc, #820]	; (800228c <Parsing_command+0x364>)
 8001f58:	48cd      	ldr	r0, [pc, #820]	; (8002290 <Parsing_command+0x368>)
 8001f5a:	f009 f865 	bl	800b028 <strtok>
 8001f5e:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
	if(found!=NULL)
 8001f62:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d011      	beq.n	8001f8e <Parsing_command+0x66>
	{
		strcpy(decoded_string_1,found);
 8001f6a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001f6e:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8001f72:	4618      	mov	r0, r3
 8001f74:	f008 fa2e 	bl	800a3d4 <strcpy>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
		HAL_Delay(10);
		return;
	}

	found = strtok(NULL,"\r");
 8001f78:	49c6      	ldr	r1, [pc, #792]	; (8002294 <Parsing_command+0x36c>)
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f009 f854 	bl	800b028 <strtok>
 8001f80:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
	if(found!=NULL)
 8001f84:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d03e      	beq.n	800200a <Parsing_command+0xe2>
 8001f8c:	e013      	b.n	8001fb6 <Parsing_command+0x8e>
		HAL_Delay(10);
 8001f8e:	200a      	movs	r0, #10
 8001f90:	f000 fd40 	bl	8002a14 <HAL_Delay>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe f8fb 	bl	8000194 <strlen>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	f107 0318 	add.w	r3, r7, #24
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f007 fddd 	bl	8009b68 <CDC_Transmit_FS>
		HAL_Delay(10);
 8001fae:	200a      	movs	r0, #10
 8001fb0:	f000 fd30 	bl	8002a14 <HAL_Delay>
		return;
 8001fb4:	e267      	b.n	8002486 <Parsing_command+0x55e>
	{
		strcpy(decoded_string_2,found);
 8001fb6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001fba:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f008 fa08 	bl	800a3d4 <strcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001fca:	e013      	b.n	8001ff4 <Parsing_command+0xcc>
 8001fcc:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8001fd0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001fd4:	4413      	add	r3, r2
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d106      	bne.n	8001fea <Parsing_command+0xc2>
 8001fdc:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8001fe0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001fe4:	4413      	add	r3, r2
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001ff4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe f8cb 	bl	8000194 <strlen>
 8001ffe:	4602      	mov	r2, r0
 8002000:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002004:	429a      	cmp	r2, r3
 8002006:	d8e1      	bhi.n	8001fcc <Parsing_command+0xa4>
 8002008:	e013      	b.n	8002032 <Parsing_command+0x10a>
	}
	else
	{
		HAL_Delay(10);
 800200a:	200a      	movs	r0, #10
 800200c:	f000 fd02 	bl	8002a14 <HAL_Delay>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002010:	f107 0318 	add.w	r3, r7, #24
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe f8bd 	bl	8000194 <strlen>
 800201a:	4603      	mov	r3, r0
 800201c:	b29a      	uxth	r2, r3
 800201e:	f107 0318 	add.w	r3, r7, #24
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f007 fd9f 	bl	8009b68 <CDC_Transmit_FS>
		HAL_Delay(10);
 800202a:	200a      	movs	r0, #10
 800202c:	f000 fcf2 	bl	8002a14 <HAL_Delay>
		return;
 8002030:	e229      	b.n	8002486 <Parsing_command+0x55e>
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8002032:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8002036:	4998      	ldr	r1, [pc, #608]	; (8002298 <Parsing_command+0x370>)
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe f8a1 	bl	8000180 <strcmp>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d161      	bne.n	8002108 <Parsing_command+0x1e0>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8002044:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002048:	4994      	ldr	r1, [pc, #592]	; (800229c <Parsing_command+0x374>)
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe f898 	bl	8000180 <strcmp>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d11f      	bne.n	8002096 <Parsing_command+0x16e>
			DAC_TEMP_CAL();
 8002056:	f7ff fda1 	bl	8001b9c <DAC_TEMP_CAL>
			HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_RESET); // Enable LDAC signal
 800205a:	2200      	movs	r2, #0
 800205c:	2108      	movs	r1, #8
 800205e:	4890      	ldr	r0, [pc, #576]	; (80022a0 <Parsing_command+0x378>)
 8002060:	f000 ff9f 	bl	8002fa2 <HAL_GPIO_WritePin>
			cfg.LDACMODE=1;
 8002064:	4b8f      	ldr	r3, [pc, #572]	; (80022a4 <Parsing_command+0x37c>)
 8002066:	2201      	movs	r2, #1
 8002068:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 800206a:	f7ff fd03 	bl	8001a74 <DAC_SendInit>
			DDS_Init();
 800206e:	f7ff fc29 	bl	80018c4 <DDS_Init>
			HAL_Delay(10);
 8002072:	200a      	movs	r0, #10
 8002074:	f000 fcce 	bl	8002a14 <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002078:	463b      	mov	r3, r7
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe f88a 	bl	8000194 <strlen>
 8002080:	4603      	mov	r3, r0
 8002082:	b29a      	uxth	r2, r3
 8002084:	463b      	mov	r3, r7
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f007 fd6d 	bl	8009b68 <CDC_Transmit_FS>
			HAL_Delay(10);
 800208e:	200a      	movs	r0, #10
 8002090:	f000 fcc0 	bl	8002a14 <HAL_Delay>
			return;
 8002094:	e1f7      	b.n	8002486 <Parsing_command+0x55e>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP"))){
 8002096:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800209a:	4983      	ldr	r1, [pc, #524]	; (80022a8 <Parsing_command+0x380>)
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe f86f 	bl	8000180 <strcmp>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11b      	bne.n	80020e0 <Parsing_command+0x1b8>
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 80020a8:	2201      	movs	r2, #1
 80020aa:	2108      	movs	r1, #8
 80020ac:	487c      	ldr	r0, [pc, #496]	; (80022a0 <Parsing_command+0x378>)
 80020ae:	f000 ff78 	bl	8002fa2 <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 80020b2:	4b7c      	ldr	r3, [pc, #496]	; (80022a4 <Parsing_command+0x37c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 80020b8:	f7ff fcdc 	bl	8001a74 <DAC_SendInit>
				HAL_Delay(10);
 80020bc:	200a      	movs	r0, #10
 80020be:	f000 fca9 	bl	8002a14 <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 80020c2:	463b      	mov	r3, r7
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe f865 	bl	8000194 <strlen>
 80020ca:	4603      	mov	r3, r0
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	463b      	mov	r3, r7
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f007 fd48 	bl	8009b68 <CDC_Transmit_FS>
				HAL_Delay(10);
 80020d8:	200a      	movs	r0, #10
 80020da:	f000 fc9b 	bl	8002a14 <HAL_Delay>
				return;
 80020de:	e1d2      	b.n	8002486 <Parsing_command+0x55e>
			}
			else
			{
				HAL_Delay(10);
 80020e0:	200a      	movs	r0, #10
 80020e2:	f000 fc97 	bl	8002a14 <HAL_Delay>
				CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 80020e6:	f107 0318 	add.w	r3, r7, #24
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe f852 	bl	8000194 <strlen>
 80020f0:	4603      	mov	r3, r0
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	f107 0318 	add.w	r3, r7, #24
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f007 fd34 	bl	8009b68 <CDC_Transmit_FS>
				HAL_Delay(10);
 8002100:	200a      	movs	r0, #10
 8002102:	f000 fc87 	bl	8002a14 <HAL_Delay>
				return;
 8002106:	e1be      	b.n	8002486 <Parsing_command+0x55e>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 8002108:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800210c:	4967      	ldr	r1, [pc, #412]	; (80022ac <Parsing_command+0x384>)
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f836 	bl	8000180 <strcmp>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 8092 	bne.w	8002240 <Parsing_command+0x318>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 800211c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002120:	4963      	ldr	r1, [pc, #396]	; (80022b0 <Parsing_command+0x388>)
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe f82c 	bl	8000180 <strcmp>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d121      	bne.n	8002172 <Parsing_command+0x24a>
			DAC_code=0xFFFFF;
 800212e:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <Parsing_command+0x38c>)
 8002130:	4a61      	ldr	r2, [pc, #388]	; (80022b8 <Parsing_command+0x390>)
 8002132:	601a      	str	r2, [r3, #0]
			DAC_code_direction=0;
 8002134:	4b61      	ldr	r3, [pc, #388]	; (80022bc <Parsing_command+0x394>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
			cfg.LDACMODE=0;
 800213a:	4b5a      	ldr	r3, [pc, #360]	; (80022a4 <Parsing_command+0x37c>)
 800213c:	2200      	movs	r2, #0
 800213e:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 8002140:	f7ff fc98 	bl	8001a74 <DAC_SendInit>
			DAC_Write(DAC_code);
 8002144:	4b5b      	ldr	r3, [pc, #364]	; (80022b4 <Parsing_command+0x38c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fe17 	bl	8001d7c <DAC_Write>
			HAL_Delay(10);
 800214e:	200a      	movs	r0, #10
 8002150:	f000 fc60 	bl	8002a14 <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002154:	463b      	mov	r3, r7
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f81c 	bl	8000194 <strlen>
 800215c:	4603      	mov	r3, r0
 800215e:	b29a      	uxth	r2, r3
 8002160:	463b      	mov	r3, r7
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f007 fcff 	bl	8009b68 <CDC_Transmit_FS>
			HAL_Delay(10);
 800216a:	200a      	movs	r0, #10
 800216c:	f000 fc52 	bl	8002a14 <HAL_Delay>
			return;
 8002170:	e189      	b.n	8002486 <Parsing_command+0x55e>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8002172:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002176:	4952      	ldr	r1, [pc, #328]	; (80022c0 <Parsing_command+0x398>)
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f801 	bl	8000180 <strcmp>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d121      	bne.n	80021c8 <Parsing_command+0x2a0>
				DAC_code=0x0;
 8002184:	4b4b      	ldr	r3, [pc, #300]	; (80022b4 <Parsing_command+0x38c>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
				DAC_code_direction=1;
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <Parsing_command+0x394>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
				cfg.LDACMODE=0;
 8002190:	4b44      	ldr	r3, [pc, #272]	; (80022a4 <Parsing_command+0x37c>)
 8002192:	2200      	movs	r2, #0
 8002194:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8002196:	f7ff fc6d 	bl	8001a74 <DAC_SendInit>
				DAC_Write(DAC_code);
 800219a:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <Parsing_command+0x38c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fdec 	bl	8001d7c <DAC_Write>
				HAL_Delay(10);
 80021a4:	200a      	movs	r0, #10
 80021a6:	f000 fc35 	bl	8002a14 <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 80021aa:	463b      	mov	r3, r7
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fd fff1 	bl	8000194 <strlen>
 80021b2:	4603      	mov	r3, r0
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	463b      	mov	r3, r7
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f007 fcd4 	bl	8009b68 <CDC_Transmit_FS>
				HAL_Delay(10);
 80021c0:	200a      	movs	r0, #10
 80021c2:	f000 fc27 	bl	8002a14 <HAL_Delay>
				return;
 80021c6:	e15e      	b.n	8002486 <Parsing_command+0x55e>
			}
			else
				if(!(strcmp(decoded_string_2,"MIDDLE"))){
 80021c8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80021cc:	493d      	ldr	r1, [pc, #244]	; (80022c4 <Parsing_command+0x39c>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fd ffd6 	bl	8000180 <strcmp>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11e      	bne.n	8002218 <Parsing_command+0x2f0>
					DAC_code=0x7FFFF;
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <Parsing_command+0x38c>)
 80021dc:	4a3a      	ldr	r2, [pc, #232]	; (80022c8 <Parsing_command+0x3a0>)
 80021de:	601a      	str	r2, [r3, #0]
					//					DAC_code_direction=1;
					cfg.LDACMODE=0;
 80021e0:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <Parsing_command+0x37c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	709a      	strb	r2, [r3, #2]
					DAC_SendInit();
 80021e6:	f7ff fc45 	bl	8001a74 <DAC_SendInit>
					DAC_Write(DAC_code);
 80021ea:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <Parsing_command+0x38c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fdc4 	bl	8001d7c <DAC_Write>
					HAL_Delay(10);
 80021f4:	200a      	movs	r0, #10
 80021f6:	f000 fc0d 	bl	8002a14 <HAL_Delay>
					CDC_Transmit_FS(OK, strlen((const char *)OK));
 80021fa:	463b      	mov	r3, r7
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fd ffc9 	bl	8000194 <strlen>
 8002202:	4603      	mov	r3, r0
 8002204:	b29a      	uxth	r2, r3
 8002206:	463b      	mov	r3, r7
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f007 fcac 	bl	8009b68 <CDC_Transmit_FS>
					HAL_Delay(10);
 8002210:	200a      	movs	r0, #10
 8002212:	f000 fbff 	bl	8002a14 <HAL_Delay>
					return;
 8002216:	e136      	b.n	8002486 <Parsing_command+0x55e>
				}
				else
				{
					HAL_Delay(10);
 8002218:	200a      	movs	r0, #10
 800221a:	f000 fbfb 	bl	8002a14 <HAL_Delay>
					CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 800221e:	f107 0318 	add.w	r3, r7, #24
 8002222:	4618      	mov	r0, r3
 8002224:	f7fd ffb6 	bl	8000194 <strlen>
 8002228:	4603      	mov	r3, r0
 800222a:	b29a      	uxth	r2, r3
 800222c:	f107 0318 	add.w	r3, r7, #24
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f007 fc98 	bl	8009b68 <CDC_Transmit_FS>
					HAL_Delay(10);
 8002238:	200a      	movs	r0, #10
 800223a:	f000 fbeb 	bl	8002a14 <HAL_Delay>
					return;
 800223e:	e122      	b.n	8002486 <Parsing_command+0x55e>
				}
		}
	}

	// ==== DAC_TEMPCAL command ====
	if(!(strcmp(decoded_string_1,"DAC_TEMPCAL")))
 8002240:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8002244:	4921      	ldr	r1, [pc, #132]	; (80022cc <Parsing_command+0x3a4>)
 8002246:	4618      	mov	r0, r3
 8002248:	f7fd ff9a 	bl	8000180 <strcmp>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d154      	bne.n	80022fc <Parsing_command+0x3d4>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8002252:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002256:	4911      	ldr	r1, [pc, #68]	; (800229c <Parsing_command+0x374>)
 8002258:	4618      	mov	r0, r3
 800225a:	f7fd ff91 	bl	8000180 <strcmp>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d137      	bne.n	80022d4 <Parsing_command+0x3ac>
			DAC_code=0xAFFFF;
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <Parsing_command+0x38c>)
 8002266:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <Parsing_command+0x3a8>)
 8002268:	601a      	str	r2, [r3, #0]
			DAC_Write(DAC_code);
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <Parsing_command+0x38c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fd84 	bl	8001d7c <DAC_Write>
			DAC_TEMP_CAL();
 8002274:	f7ff fc92 	bl	8001b9c <DAC_TEMP_CAL>
			DAC_Write(DAC_code);
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <Parsing_command+0x38c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fd7d 	bl	8001d7c <DAC_Write>
			return;
 8002282:	e100      	b.n	8002486 <Parsing_command+0x55e>
 8002284:	0800d210 	.word	0x0800d210
 8002288:	0800d158 	.word	0x0800d158
 800228c:	0800d1a8 	.word	0x0800d1a8
 8002290:	200005fc 	.word	0x200005fc
 8002294:	0800d1ac 	.word	0x0800d1ac
 8002298:	0800d1b0 	.word	0x0800d1b0
 800229c:	0800d1b8 	.word	0x0800d1b8
 80022a0:	40020400 	.word	0x40020400
 80022a4:	200005c8 	.word	0x200005c8
 80022a8:	0800d1c0 	.word	0x0800d1c0
 80022ac:	0800d1c8 	.word	0x0800d1c8
 80022b0:	0800d1d0 	.word	0x0800d1d0
 80022b4:	20000384 	.word	0x20000384
 80022b8:	000fffff 	.word	0x000fffff
 80022bc:	20000620 	.word	0x20000620
 80022c0:	0800d1d4 	.word	0x0800d1d4
 80022c4:	0800d1dc 	.word	0x0800d1dc
 80022c8:	0007ffff 	.word	0x0007ffff
 80022cc:	0800d1e4 	.word	0x0800d1e4
 80022d0:	000affff 	.word	0x000affff
		}
		else
		{
			HAL_Delay(10);
 80022d4:	200a      	movs	r0, #10
 80022d6:	f000 fb9d 	bl	8002a14 <HAL_Delay>
			CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 80022da:	f107 0318 	add.w	r3, r7, #24
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ff58 	bl	8000194 <strlen>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f107 0318 	add.w	r3, r7, #24
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f007 fc3a 	bl	8009b68 <CDC_Transmit_FS>
			HAL_Delay(10);
 80022f4:	200a      	movs	r0, #10
 80022f6:	f000 fb8d 	bl	8002a14 <HAL_Delay>
			return;
 80022fa:	e0c4      	b.n	8002486 <Parsing_command+0x55e>
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 80022fc:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8002300:	4965      	ldr	r1, [pc, #404]	; (8002498 <Parsing_command+0x570>)
 8002302:	4618      	mov	r0, r3
 8002304:	f7fd ff3c 	bl	8000180 <strcmp>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d14e      	bne.n	80023ac <Parsing_command+0x484>
	{
		atof_tmp=atof(decoded_string_2);
 800230e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002312:	4618      	mov	r0, r3
 8002314:	f008 f81a 	bl	800a34c <atof>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f7fe fbb6 	bl	8000a90 <__aeabi_d2f>
 8002324:	4603      	mov	r3, r0
 8002326:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		if(atof_tmp<0.001 || atof_tmp>1)
 800232a:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 800232e:	f7fe f89d 	bl	800046c <__aeabi_f2d>
 8002332:	a357      	add	r3, pc, #348	; (adr r3, 8002490 <Parsing_command+0x568>)
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	f7fe fb62 	bl	8000a00 <__aeabi_dcmplt>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d108      	bne.n	8002354 <Parsing_command+0x42c>
 8002342:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002346:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 800234a:	f7fe febb 	bl	80010c4 <__aeabi_fcmpgt>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <Parsing_command+0x454>
		{
			HAL_Delay(10);
 8002354:	200a      	movs	r0, #10
 8002356:	f000 fb5d 	bl	8002a14 <HAL_Delay>
			CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 800235a:	f107 0318 	add.w	r3, r7, #24
 800235e:	4618      	mov	r0, r3
 8002360:	f7fd ff18 	bl	8000194 <strlen>
 8002364:	4603      	mov	r3, r0
 8002366:	b29a      	uxth	r2, r3
 8002368:	f107 0318 	add.w	r3, r7, #24
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f007 fbfa 	bl	8009b68 <CDC_Transmit_FS>
			HAL_Delay(10);
 8002374:	200a      	movs	r0, #10
 8002376:	f000 fb4d 	bl	8002a14 <HAL_Delay>
			return;
 800237a:	e084      	b.n	8002486 <Parsing_command+0x55e>
		}
		else
		{
			DAC_target_speed=atof_tmp;
 800237c:	4a47      	ldr	r2, [pc, #284]	; (800249c <Parsing_command+0x574>)
 800237e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002382:	6013      	str	r3, [r2, #0]
			DDS_Init();
 8002384:	f7ff fa9e 	bl	80018c4 <DDS_Init>

			HAL_Delay(10);
 8002388:	200a      	movs	r0, #10
 800238a:	f000 fb43 	bl	8002a14 <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 800238e:	463b      	mov	r3, r7
 8002390:	4618      	mov	r0, r3
 8002392:	f7fd feff 	bl	8000194 <strlen>
 8002396:	4603      	mov	r3, r0
 8002398:	b29a      	uxth	r2, r3
 800239a:	463b      	mov	r3, r7
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f007 fbe2 	bl	8009b68 <CDC_Transmit_FS>
			HAL_Delay(10);
 80023a4:	200a      	movs	r0, #10
 80023a6:	f000 fb35 	bl	8002a14 <HAL_Delay>
			return;
 80023aa:	e06c      	b.n	8002486 <Parsing_command+0x55e>
		}
	}

	// ==== SWEEP_DIRECTION command ====
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 80023ac:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80023b0:	493b      	ldr	r1, [pc, #236]	; (80024a0 <Parsing_command+0x578>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fd fee4 	bl	8000180 <strcmp>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d14f      	bne.n	800245e <Parsing_command+0x536>
	{
		if(!(strcmp(decoded_string_2,"UP"))){
 80023be:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80023c2:	4938      	ldr	r1, [pc, #224]	; (80024a4 <Parsing_command+0x57c>)
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fd fedb 	bl	8000180 <strcmp>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d114      	bne.n	80023fa <Parsing_command+0x4d2>
			DAC_code_direction=1;
 80023d0:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <Parsing_command+0x580>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
			HAL_Delay(10);
 80023d6:	200a      	movs	r0, #10
 80023d8:	f000 fb1c 	bl	8002a14 <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 80023dc:	463b      	mov	r3, r7
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fd fed8 	bl	8000194 <strlen>
 80023e4:	4603      	mov	r3, r0
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	463b      	mov	r3, r7
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f007 fbbb 	bl	8009b68 <CDC_Transmit_FS>
			HAL_Delay(10);
 80023f2:	200a      	movs	r0, #10
 80023f4:	f000 fb0e 	bl	8002a14 <HAL_Delay>
			return;
 80023f8:	e045      	b.n	8002486 <Parsing_command+0x55e>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 80023fa:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80023fe:	492b      	ldr	r1, [pc, #172]	; (80024ac <Parsing_command+0x584>)
 8002400:	4618      	mov	r0, r3
 8002402:	f7fd febd 	bl	8000180 <strcmp>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d114      	bne.n	8002436 <Parsing_command+0x50e>
				DAC_code_direction=0;
 800240c:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <Parsing_command+0x580>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
				HAL_Delay(10);
 8002412:	200a      	movs	r0, #10
 8002414:	f000 fafe 	bl	8002a14 <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002418:	463b      	mov	r3, r7
 800241a:	4618      	mov	r0, r3
 800241c:	f7fd feba 	bl	8000194 <strlen>
 8002420:	4603      	mov	r3, r0
 8002422:	b29a      	uxth	r2, r3
 8002424:	463b      	mov	r3, r7
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f007 fb9d 	bl	8009b68 <CDC_Transmit_FS>
				HAL_Delay(10);
 800242e:	200a      	movs	r0, #10
 8002430:	f000 faf0 	bl	8002a14 <HAL_Delay>
				return;
 8002434:	e027      	b.n	8002486 <Parsing_command+0x55e>
			}
			else
			{
				HAL_Delay(10);
 8002436:	200a      	movs	r0, #10
 8002438:	f000 faec 	bl	8002a14 <HAL_Delay>
				CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 800243c:	f107 0318 	add.w	r3, r7, #24
 8002440:	4618      	mov	r0, r3
 8002442:	f7fd fea7 	bl	8000194 <strlen>
 8002446:	4603      	mov	r3, r0
 8002448:	b29a      	uxth	r2, r3
 800244a:	f107 0318 	add.w	r3, r7, #24
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f007 fb89 	bl	8009b68 <CDC_Transmit_FS>
				HAL_Delay(10);
 8002456:	200a      	movs	r0, #10
 8002458:	f000 fadc 	bl	8002a14 <HAL_Delay>
				return;
 800245c:	e013      	b.n	8002486 <Parsing_command+0x55e>





	HAL_Delay(10);
 800245e:	200a      	movs	r0, #10
 8002460:	f000 fad8 	bl	8002a14 <HAL_Delay>
	CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002464:	f107 0318 	add.w	r3, r7, #24
 8002468:	4618      	mov	r0, r3
 800246a:	f7fd fe93 	bl	8000194 <strlen>
 800246e:	4603      	mov	r3, r0
 8002470:	b29a      	uxth	r2, r3
 8002472:	f107 0318 	add.w	r3, r7, #24
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f007 fb75 	bl	8009b68 <CDC_Transmit_FS>
	HAL_Delay(10);
 800247e:	200a      	movs	r0, #10
 8002480:	f000 fac8 	bl	8002a14 <HAL_Delay>
	return;
 8002484:	bf00      	nop
}
 8002486:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800248a:	46bd      	mov	sp, r7
 800248c:	bdb0      	pop	{r4, r5, r7, pc}
 800248e:	bf00      	nop
 8002490:	d2f1a9fc 	.word	0xd2f1a9fc
 8002494:	3f50624d 	.word	0x3f50624d
 8002498:	0800d1f0 	.word	0x0800d1f0
 800249c:	2000061c 	.word	0x2000061c
 80024a0:	0800d1fc 	.word	0x0800d1fc
 80024a4:	0800d20c 	.word	0x0800d20c
 80024a8:	20000620 	.word	0x20000620
 80024ac:	0800d1d4 	.word	0x0800d1d4

080024b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b4:	b672      	cpsid	i
}
 80024b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80024b8:	e7fe      	b.n	80024b8 <Error_Handler+0x8>
	...

080024bc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024c0:	4b17      	ldr	r3, [pc, #92]	; (8002520 <MX_SPI1_Init+0x64>)
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <MX_SPI1_Init+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <MX_SPI1_Init+0x64>)
 80024c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <MX_SPI1_Init+0x64>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <MX_SPI1_Init+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <MX_SPI1_Init+0x64>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <MX_SPI1_Init+0x64>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <MX_SPI1_Init+0x64>)
 80024e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <MX_SPI1_Init+0x64>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <MX_SPI1_Init+0x64>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <MX_SPI1_Init+0x64>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <MX_SPI1_Init+0x64>)
 8002502:	2200      	movs	r2, #0
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <MX_SPI1_Init+0x64>)
 8002508:	220a      	movs	r2, #10
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_SPI1_Init+0x64>)
 800250e:	f002 ff37 	bl	8005380 <HAL_SPI_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002518:	f7ff ffca 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	2000067c 	.word	0x2000067c
 8002524:	40013000 	.word	0x40013000

08002528 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800252c:	4b18      	ldr	r3, [pc, #96]	; (8002590 <MX_SPI2_Init+0x68>)
 800252e:	4a19      	ldr	r2, [pc, #100]	; (8002594 <MX_SPI2_Init+0x6c>)
 8002530:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002532:	4b17      	ldr	r3, [pc, #92]	; (8002590 <MX_SPI2_Init+0x68>)
 8002534:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002538:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <MX_SPI2_Init+0x68>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <MX_SPI2_Init+0x68>)
 8002542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002546:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <MX_SPI2_Init+0x68>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <MX_SPI2_Init+0x68>)
 8002550:	2200      	movs	r2, #0
 8002552:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002554:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_SPI2_Init+0x68>)
 8002556:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800255a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_SPI2_Init+0x68>)
 800255e:	2230      	movs	r2, #48	; 0x30
 8002560:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <MX_SPI2_Init+0x68>)
 8002564:	2200      	movs	r2, #0
 8002566:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <MX_SPI2_Init+0x68>)
 800256a:	2200      	movs	r2, #0
 800256c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <MX_SPI2_Init+0x68>)
 8002570:	2200      	movs	r2, #0
 8002572:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <MX_SPI2_Init+0x68>)
 8002576:	220a      	movs	r2, #10
 8002578:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_SPI2_Init+0x68>)
 800257c:	f002 ff00 	bl	8005380 <HAL_SPI_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002586:	f7ff ff93 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000624 	.word	0x20000624
 8002594:	40003800 	.word	0x40003800

08002598 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	; 0x30
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a2e      	ldr	r2, [pc, #184]	; (8002670 <HAL_SPI_MspInit+0xd8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d128      	bne.n	800260c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ba:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a2d      	ldr	r2, [pc, #180]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 80025c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c4:	6213      	str	r3, [r2, #32]
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a27      	ldr	r2, [pc, #156]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	61d3      	str	r3, [r2, #28]
 80025de:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025ea:	23e0      	movs	r3, #224	; 0xe0
 80025ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025fa:	2305      	movs	r3, #5
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	f107 031c 	add.w	r3, r7, #28
 8002602:	4619      	mov	r1, r3
 8002604:	481c      	ldr	r0, [pc, #112]	; (8002678 <HAL_SPI_MspInit+0xe0>)
 8002606:	f000 fb35 	bl	8002c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800260a:	e02d      	b.n	8002668 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1a      	ldr	r2, [pc, #104]	; (800267c <HAL_SPI_MspInit+0xe4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d128      	bne.n	8002668 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	4a16      	ldr	r2, [pc, #88]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6253      	str	r3, [r2, #36]	; 0x24
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_SPI_MspInit+0xdc>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002646:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800264a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002658:	2305      	movs	r3, #5
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	4619      	mov	r1, r3
 8002662:	4807      	ldr	r0, [pc, #28]	; (8002680 <HAL_SPI_MspInit+0xe8>)
 8002664:	f000 fb06 	bl	8002c74 <HAL_GPIO_Init>
}
 8002668:	bf00      	nop
 800266a:	3730      	adds	r7, #48	; 0x30
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40013000 	.word	0x40013000
 8002674:	40023800 	.word	0x40023800
 8002678:	40020000 	.word	0x40020000
 800267c:	40003800 	.word	0x40003800
 8002680:	40020400 	.word	0x40020400

08002684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_MspInit+0x58>)
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	4a13      	ldr	r2, [pc, #76]	; (80026dc <HAL_MspInit+0x58>)
 8002690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002694:	6253      	str	r3, [r2, #36]	; 0x24
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_MspInit+0x58>)
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_MspInit+0x58>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <HAL_MspInit+0x58>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6213      	str	r3, [r2, #32]
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_MspInit+0x58>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_MspInit+0x58>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	4a07      	ldr	r2, [pc, #28]	; (80026dc <HAL_MspInit+0x58>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6253      	str	r3, [r2, #36]	; 0x24
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_MspInit+0x58>)
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	40023800 	.word	0x40023800

080026e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <NMI_Handler+0x4>

080026e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <HardFault_Handler+0x4>

080026ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <MemManage_Handler+0x4>

080026f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f6:	e7fe      	b.n	80026f6 <BusFault_Handler+0x4>

080026f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <UsageFault_Handler+0x4>

080026fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002726:	f000 f959 	bl	80029dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}

0800272e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DAC_ALARM_Pin);
 8002732:	2002      	movs	r0, #2
 8002734:	f000 fc4e 	bl	8002fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}

0800273c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CPU_LDAC_Pin);
 8002740:	2004      	movs	r0, #4
 8002742:	f000 fc47 	bl	8002fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <USB_LP_IRQHandler+0x10>)
 8002752:	f000 fd5b 	bl	800320c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20001344 	.word	0x20001344

08002760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
	return 1;
 8002764:	2301      	movs	r3, #1
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <_kill>:

int _kill(int pid, int sig)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002778:	f007 fdec 	bl	800a354 <__errno>
 800277c:	4603      	mov	r3, r0
 800277e:	2216      	movs	r2, #22
 8002780:	601a      	str	r2, [r3, #0]
	return -1;
 8002782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_exit>:

void _exit (int status)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002796:	f04f 31ff 	mov.w	r1, #4294967295
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ffe7 	bl	800276e <_kill>
	while (1) {}		/* Make sure we hang here */
 80027a0:	e7fe      	b.n	80027a0 <_exit+0x12>

080027a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	e00a      	b.n	80027ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027b4:	f3af 8000 	nop.w
 80027b8:	4601      	mov	r1, r0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	60ba      	str	r2, [r7, #8]
 80027c0:	b2ca      	uxtb	r2, r1
 80027c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	3301      	adds	r3, #1
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	dbf0      	blt.n	80027b4 <_read+0x12>
	}

return len;
 80027d2:	687b      	ldr	r3, [r7, #4]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	e009      	b.n	8002802 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	60ba      	str	r2, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	3301      	adds	r3, #1
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	429a      	cmp	r2, r3
 8002808:	dbf1      	blt.n	80027ee <_write+0x12>
	}
	return len;
 800280a:	687b      	ldr	r3, [r7, #4]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <_close>:

int _close(int file)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	return -1;
 800281c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800283a:	605a      	str	r2, [r3, #4]
	return 0;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <_isatty>:

int _isatty(int file)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	return 1;
 8002850:	2301      	movs	r3, #1
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
	return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800287c:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <_sbrk+0x5c>)
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <_sbrk+0x60>)
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <_sbrk+0x64>)
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <_sbrk+0x68>)
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d207      	bcs.n	80028b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028a4:	f007 fd56 	bl	800a354 <__errno>
 80028a8:	4603      	mov	r3, r0
 80028aa:	220c      	movs	r2, #12
 80028ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	e009      	b.n	80028c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <_sbrk+0x64>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <_sbrk+0x64>)
 80028c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028c6:	68fb      	ldr	r3, [r7, #12]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20004000 	.word	0x20004000
 80028d4:	00000400 	.word	0x00000400
 80028d8:	20000388 	.word	0x20000388
 80028dc:	20001640 	.word	0x20001640

080028e0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028ec:	480c      	ldr	r0, [pc, #48]	; (8002920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ee:	490d      	ldr	r1, [pc, #52]	; (8002924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f4:	e002      	b.n	80028fc <LoopCopyDataInit>

080028f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fa:	3304      	adds	r3, #4

080028fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002900:	d3f9      	bcc.n	80028f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002904:	4c0a      	ldr	r4, [pc, #40]	; (8002930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002908:	e001      	b.n	800290e <LoopFillZerobss>

0800290a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800290c:	3204      	adds	r2, #4

0800290e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800290e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002910:	d3fb      	bcc.n	800290a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002912:	f7ff ffe5 	bl	80028e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002916:	f007 fd23 	bl	800a360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800291a:	f7fe ff09 	bl	8001730 <main>
  bx lr
 800291e:	4770      	bx	lr
  ldr r0, =_sdata
 8002920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002924:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8002928:	0800d858 	.word	0x0800d858
  ldr r2, =_sbss
 800292c:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8002930:	20001640 	.word	0x20001640

08002934 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002934:	e7fe      	b.n	8002934 <ADC1_IRQHandler>

08002936 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002940:	2003      	movs	r0, #3
 8002942:	f000 f955 	bl	8002bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002946:	200f      	movs	r0, #15
 8002948:	f000 f80e 	bl	8002968 <HAL_InitTick>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	71fb      	strb	r3, [r7, #7]
 8002956:	e001      	b.n	800295c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002958:	f7ff fe94 	bl	8002684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800295c:	79fb      	ldrb	r3, [r7, #7]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_InitTick+0x68>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d022      	beq.n	80029c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <HAL_InitTick+0x6c>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_InitTick+0x68>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002988:	fbb1 f3f3 	udiv	r3, r1, r3
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f962 	bl	8002c5a <HAL_SYSTICK_Config>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10f      	bne.n	80029bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	d809      	bhi.n	80029b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a2:	2200      	movs	r2, #0
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	f04f 30ff 	mov.w	r0, #4294967295
 80029aa:	f000 f92c 	bl	8002c06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <HAL_InitTick+0x70>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	e007      	b.n	80029c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	e004      	b.n	80029c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	e001      	b.n	80029c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000020 	.word	0x20000020
 80029d4:	20000018 	.word	0x20000018
 80029d8:	2000001c 	.word	0x2000001c

080029dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_IncTick+0x1c>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_IncTick+0x20>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <HAL_IncTick+0x1c>)
 80029ec:	6013      	str	r3, [r2, #0]
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	200006d4 	.word	0x200006d4
 80029fc:	20000020 	.word	0x20000020

08002a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <HAL_GetTick+0x10>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	200006d4 	.word	0x200006d4

08002a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff fff0 	bl	8002a00 <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d004      	beq.n	8002a38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_Delay+0x40>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4413      	add	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a38:	bf00      	nop
 8002a3a:	f7ff ffe1 	bl	8002a00 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d8f7      	bhi.n	8002a3a <HAL_Delay+0x26>
  {
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000020 	.word	0x20000020

08002a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a74:	4013      	ands	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	60d3      	str	r3, [r2, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	f003 0307 	and.w	r3, r3, #7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	db0b      	blt.n	8002ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4906      	ldr	r1, [pc, #24]	; (8002af0 <__NVIC_EnableIRQ+0x34>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2001      	movs	r0, #1
 8002ade:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	e000e100 	.word	0xe000e100

08002af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	db0a      	blt.n	8002b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	490c      	ldr	r1, [pc, #48]	; (8002b40 <__NVIC_SetPriority+0x4c>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	440b      	add	r3, r1
 8002b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b1c:	e00a      	b.n	8002b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4908      	ldr	r1, [pc, #32]	; (8002b44 <__NVIC_SetPriority+0x50>)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	3b04      	subs	r3, #4
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	440b      	add	r3, r1
 8002b32:	761a      	strb	r2, [r3, #24]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000e100 	.word	0xe000e100
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	; 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f1c3 0307 	rsb	r3, r3, #7
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	bf28      	it	cs
 8002b66:	2304      	movcs	r3, #4
 8002b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d902      	bls.n	8002b78 <NVIC_EncodePriority+0x30>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3b03      	subs	r3, #3
 8002b76:	e000      	b.n	8002b7a <NVIC_EncodePriority+0x32>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b90:	f04f 31ff 	mov.w	r1, #4294967295
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43d9      	mvns	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	4313      	orrs	r3, r2
         );
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3724      	adds	r7, #36	; 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bbc:	d301      	bcc.n	8002bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00f      	b.n	8002be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <SysTick_Config+0x40>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bca:	210f      	movs	r1, #15
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd0:	f7ff ff90 	bl	8002af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <SysTick_Config+0x40>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bda:	4b04      	ldr	r3, [pc, #16]	; (8002bec <SysTick_Config+0x40>)
 8002bdc:	2207      	movs	r2, #7
 8002bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	e000e010 	.word	0xe000e010

08002bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ff2d 	bl	8002a58 <__NVIC_SetPriorityGrouping>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c18:	f7ff ff42 	bl	8002aa0 <__NVIC_GetPriorityGrouping>
 8002c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f7ff ff90 	bl	8002b48 <NVIC_EncodePriority>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff5f 	bl	8002af4 <__NVIC_SetPriority>
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff35 	bl	8002abc <__NVIC_EnableIRQ>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ffa2 	bl	8002bac <SysTick_Config>
 8002c68:	4603      	mov	r3, r0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c8a:	e154      	b.n	8002f36 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8146 	beq.w	8002f30 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d005      	beq.n	8002cbc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d130      	bne.n	8002d1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 0201 	and.w	r2, r3, #1
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d017      	beq.n	8002d5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	2203      	movs	r2, #3
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d123      	bne.n	8002dae <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	08da      	lsrs	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3208      	adds	r2, #8
 8002da8:	6939      	ldr	r1, [r7, #16]
 8002daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	2203      	movs	r2, #3
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0203 	and.w	r2, r3, #3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80a0 	beq.w	8002f30 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df0:	4b58      	ldr	r3, [pc, #352]	; (8002f54 <HAL_GPIO_Init+0x2e0>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <HAL_GPIO_Init+0x2e0>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6213      	str	r3, [r2, #32]
 8002dfc:	4b55      	ldr	r3, [pc, #340]	; (8002f54 <HAL_GPIO_Init+0x2e0>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e08:	4a53      	ldr	r2, [pc, #332]	; (8002f58 <HAL_GPIO_Init+0x2e4>)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	089b      	lsrs	r3, r3, #2
 8002e0e:	3302      	adds	r3, #2
 8002e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	220f      	movs	r2, #15
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a4b      	ldr	r2, [pc, #300]	; (8002f5c <HAL_GPIO_Init+0x2e8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d019      	beq.n	8002e68 <HAL_GPIO_Init+0x1f4>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a4a      	ldr	r2, [pc, #296]	; (8002f60 <HAL_GPIO_Init+0x2ec>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_GPIO_Init+0x1f0>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a49      	ldr	r2, [pc, #292]	; (8002f64 <HAL_GPIO_Init+0x2f0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00d      	beq.n	8002e60 <HAL_GPIO_Init+0x1ec>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a48      	ldr	r2, [pc, #288]	; (8002f68 <HAL_GPIO_Init+0x2f4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <HAL_GPIO_Init+0x1e8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a47      	ldr	r2, [pc, #284]	; (8002f6c <HAL_GPIO_Init+0x2f8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_GPIO_Init+0x1e4>
 8002e54:	2304      	movs	r3, #4
 8002e56:	e008      	b.n	8002e6a <HAL_GPIO_Init+0x1f6>
 8002e58:	2305      	movs	r3, #5
 8002e5a:	e006      	b.n	8002e6a <HAL_GPIO_Init+0x1f6>
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e004      	b.n	8002e6a <HAL_GPIO_Init+0x1f6>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e002      	b.n	8002e6a <HAL_GPIO_Init+0x1f6>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_GPIO_Init+0x1f6>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	f002 0203 	and.w	r2, r2, #3
 8002e70:	0092      	lsls	r2, r2, #2
 8002e72:	4093      	lsls	r3, r2
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e7a:	4937      	ldr	r1, [pc, #220]	; (8002f58 <HAL_GPIO_Init+0x2e4>)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3302      	adds	r3, #2
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e88:	4b39      	ldr	r3, [pc, #228]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002eac:	4a30      	ldr	r2, [pc, #192]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eb2:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ed6:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f00:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f06:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f2a:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3301      	adds	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f47f aea3 	bne.w	8002c8c <HAL_GPIO_Init+0x18>
  }
}
 8002f46:	bf00      	nop
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40020000 	.word	0x40020000
 8002f60:	40020400 	.word	0x40020400
 8002f64:	40020800 	.word	0x40020800
 8002f68:	40020c00 	.word	0x40020c00
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40010400 	.word	0x40010400

08002f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e001      	b.n	8002f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	807b      	strh	r3, [r7, #2]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fb2:	787b      	ldrb	r3, [r7, #1]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fb8:	887a      	ldrh	r2, [r7, #2]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002fbe:	e003      	b.n	8002fc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	041a      	lsls	r2, r3, #16
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	619a      	str	r2, [r3, #24]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fea:	4a05      	ldr	r2, [pc, #20]	; (8003000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe ff08 	bl	8001e08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40010400 	.word	0x40010400

08003004 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003006:	b08b      	sub	sp, #44	; 0x2c
 8003008:	af06      	add	r7, sp, #24
 800300a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0d0      	b.n	80031b8 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f006 feee 	bl	8009e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2203      	movs	r2, #3
 8003034:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f002 ff51 	bl	8005ee4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
 8003046:	e04c      	b.n	80030e2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	3301      	adds	r3, #1
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	b298      	uxth	r0, r3
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	3336      	adds	r3, #54	; 0x36
 8003086:	4602      	mov	r2, r0
 8003088:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	440b      	add	r3, r1
 800309a:	3303      	adds	r3, #3
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	440b      	add	r3, r1
 80030ae:	3338      	adds	r3, #56	; 0x38
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	333c      	adds	r3, #60	; 0x3c
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3340      	adds	r3, #64	; 0x40
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	3301      	adds	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3ad      	bcc.n	8003048 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e044      	b.n	800317c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	440b      	add	r3, r1
 8003116:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	440b      	add	r3, r1
 800312c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	440b      	add	r3, r1
 8003142:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	3301      	adds	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d3b5      	bcc.n	80030f2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	687e      	ldr	r6, [r7, #4]
 800318e:	466d      	mov	r5, sp
 8003190:	f106 0410 	add.w	r4, r6, #16
 8003194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	602b      	str	r3, [r5, #0]
 800319c:	1d33      	adds	r3, r6, #4
 800319e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a0:	6838      	ldr	r0, [r7, #0]
 80031a2:	f002 feb9 	bl	8005f18 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_PCD_Start+0x16>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e016      	b.n	8003204 <HAL_PCD_Start+0x44>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f002 fe68 	bl	8005eb8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80031e8:	2101      	movs	r1, #1
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f006 fdf0 	bl	8009dd0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f005 f80c 	bl	8008212 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f005 f804 	bl	8008226 <USB_ReadInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003228:	d102      	bne.n	8003230 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 faf5 	bl	800381a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fff6 	bl	8008226 <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003244:	d112      	bne.n	800326c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800324e:	b29a      	uxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003258:	b292      	uxth	r2, r2
 800325a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f006 fe4f 	bl	8009f02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003264:	2100      	movs	r1, #0
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8c7 	bl	80033fa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f004 ffd8 	bl	8008226 <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003280:	d10b      	bne.n	800329a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800328a:	b29a      	uxth	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003294:	b292      	uxth	r2, r2
 8003296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f004 ffc1 	bl	8008226 <USB_ReadInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ae:	d10b      	bne.n	80032c8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c2:	b292      	uxth	r2, r2
 80032c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f004 ffaa 	bl	8008226 <USB_ReadInterrupts>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d126      	bne.n	800332c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0204 	bic.w	r2, r2, #4
 80032f0:	b292      	uxth	r2, r2
 80032f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032fe:	b29a      	uxth	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0208 	bic.w	r2, r2, #8
 8003308:	b292      	uxth	r2, r2
 800330a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f006 fe30 	bl	8009f74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800331c:	b29a      	uxth	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003326:	b292      	uxth	r2, r2
 8003328:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f004 ff78 	bl	8008226 <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003340:	d126      	bne.n	8003390 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0208 	orr.w	r2, r2, #8
 8003354:	b292      	uxth	r2, r2
 8003356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336c:	b292      	uxth	r2, r2
 800336e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800337a:	b29a      	uxth	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0204 	orr.w	r2, r2, #4
 8003384:	b292      	uxth	r2, r2
 8003386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f006 fdd8 	bl	8009f40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f004 ff46 	bl	8008226 <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a4:	d10e      	bne.n	80033c4 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033b8:	b292      	uxth	r2, r2
 80033ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f006 fd91 	bl	8009ee6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f004 ff2c 	bl	8008226 <USB_ReadInterrupts>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d8:	d10b      	bne.n	80033f2 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ec:	b292      	uxth	r2, r2
 80033ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_PCD_SetAddress+0x1a>
 8003410:	2302      	movs	r3, #2
 8003412:	e013      	b.n	800343c <HAL_PCD_SetAddress+0x42>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f004 fedd 	bl	80081ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	461a      	mov	r2, r3
 8003452:	4603      	mov	r3, r0
 8003454:	70fb      	strb	r3, [r7, #3]
 8003456:	460b      	mov	r3, r1
 8003458:	803b      	strh	r3, [r7, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003466:	2b00      	cmp	r3, #0
 8003468:	da0e      	bge.n	8003488 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	705a      	strb	r2, [r3, #1]
 8003486:	e00e      	b.n	80034a6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	f003 0207 	and.w	r2, r3, #7
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034b2:	883a      	ldrh	r2, [r7, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	78ba      	ldrb	r2, [r7, #2]
 80034bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	785b      	ldrb	r3, [r3, #1]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034d0:	78bb      	ldrb	r3, [r7, #2]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d102      	bne.n	80034dc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_PCD_EP_Open+0xa6>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e00e      	b.n	8003508 <HAL_PCD_EP_Open+0xc4>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68f9      	ldr	r1, [r7, #12]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f002 fd2d 	bl	8005f58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003506:	7afb      	ldrb	r3, [r7, #11]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800351c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003520:	2b00      	cmp	r3, #0
 8003522:	da0e      	bge.n	8003542 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	705a      	strb	r2, [r3, #1]
 8003540:	e00e      	b.n	8003560 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 0207 	and.w	r2, r3, #7
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	b2da      	uxtb	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_PCD_EP_Close+0x6a>
 8003576:	2302      	movs	r3, #2
 8003578:	e00e      	b.n	8003598 <HAL_PCD_EP_Close+0x88>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	4618      	mov	r0, r3
 800358a:	f003 f84f 	bl	800662c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	460b      	mov	r3, r1
 80035ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035b0:	7afb      	ldrb	r3, [r7, #11]
 80035b2:	f003 0207 	and.w	r2, r3, #7
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2200      	movs	r2, #0
 80035d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2200      	movs	r2, #0
 80035de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035e0:	7afb      	ldrb	r3, [r7, #11]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6979      	ldr	r1, [r7, #20]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f003 fa01 	bl	8006a04 <USB_EPStartXfer>
 8003602:	e005      	b.n	8003610 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6979      	ldr	r1, [r7, #20]
 800360a:	4618      	mov	r0, r3
 800360c:	f003 f9fa 	bl	8006a04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	f003 0207 	and.w	r2, r3, #7
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	440b      	add	r3, r1
 8003638:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800363c:	681b      	ldr	r3, [r3, #0]
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	460b      	mov	r3, r1
 8003656:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003658:	7afb      	ldrb	r3, [r7, #11]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2200      	movs	r2, #0
 800368c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2201      	movs	r2, #1
 8003692:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003694:	7afb      	ldrb	r3, [r7, #11]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	b2da      	uxtb	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036a0:	7afb      	ldrb	r3, [r7, #11]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6979      	ldr	r1, [r7, #20]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f003 f9a7 	bl	8006a04 <USB_EPStartXfer>
 80036b6:	e005      	b.n	80036c4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6979      	ldr	r1, [r7, #20]
 80036be:	4618      	mov	r0, r3
 80036c0:	f003 f9a0 	bl	8006a04 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	f003 0207 	and.w	r2, r3, #7
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d901      	bls.n	80036ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e03e      	b.n	800376a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	da0e      	bge.n	8003712 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	705a      	strb	r2, [r3, #1]
 8003710:	e00c      	b.n	800372c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_PCD_EP_SetStall+0x7e>
 8003748:	2302      	movs	r3, #2
 800374a:	e00e      	b.n	800376a <HAL_PCD_EP_SetStall+0x9c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68f9      	ldr	r1, [r7, #12]
 800375a:	4618      	mov	r0, r3
 800375c:	f004 fc49 	bl	8007ff2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	f003 020f 	and.w	r2, r3, #15
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	d901      	bls.n	8003790 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e040      	b.n	8003812 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003794:	2b00      	cmp	r3, #0
 8003796:	da0e      	bge.n	80037b6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	705a      	strb	r2, [r3, #1]
 80037b4:	e00e      	b.n	80037d4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b6:	78fb      	ldrb	r3, [r7, #3]
 80037b8:	f003 0207 	and.w	r2, r3, #7
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_PCD_EP_ClrStall+0x82>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e00e      	b.n	8003812 <HAL_PCD_EP_ClrStall+0xa0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68f9      	ldr	r1, [r7, #12]
 8003802:	4618      	mov	r0, r3
 8003804:	f004 fc45 	bl	8008092 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b08e      	sub	sp, #56	; 0x38
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003822:	e2ec      	b.n	8003dfe <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800382c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800382e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800383a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800383e:	2b00      	cmp	r3, #0
 8003840:	f040 8161 	bne.w	8003b06 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003844:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d152      	bne.n	80038f4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	81fb      	strh	r3, [r7, #14]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	89fb      	ldrh	r3, [r7, #14]
 8003866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800386a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800386e:	b29b      	uxth	r3, r3
 8003870:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3328      	adds	r3, #40	; 0x28
 8003876:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003880:	b29b      	uxth	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	3302      	adds	r3, #2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	441a      	add	r2, r3
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80038b2:	2100      	movs	r1, #0
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f006 fafc 	bl	8009eb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 829b 	beq.w	8003dfe <PCD_EP_ISR_Handler+0x5e4>
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f040 8296 	bne.w	8003dfe <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b292      	uxth	r2, r2
 80038e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80038f2:	e284      	b.n	8003dfe <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003904:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800390a:	2b00      	cmp	r3, #0
 800390c:	d034      	beq.n	8003978 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003916:	b29b      	uxth	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	3306      	adds	r3, #6
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800394c:	b29b      	uxth	r3, r3
 800394e:	f004 fcbe 	bl	80082ce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29a      	uxth	r2, r3
 800395a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800395e:	4013      	ands	r3, r2
 8003960:	823b      	strh	r3, [r7, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	8a3a      	ldrh	r2, [r7, #16]
 8003968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800396c:	b292      	uxth	r2, r2
 800396e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f006 fa71 	bl	8009e58 <HAL_PCD_SetupStageCallback>
 8003976:	e242      	b.n	8003dfe <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003978:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800397c:	2b00      	cmp	r3, #0
 800397e:	f280 823e 	bge.w	8003dfe <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29a      	uxth	r2, r3
 800398a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800398e:	4013      	ands	r3, r2
 8003990:	83bb      	strh	r3, [r7, #28]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	8bba      	ldrh	r2, [r7, #28]
 8003998:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800399c:	b292      	uxth	r2, r2
 800399e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	3306      	adds	r3, #6
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d019      	beq.n	8003a08 <PCD_EP_ISR_Handler+0x1ee>
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	6959      	ldr	r1, [r3, #20]
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f004 fc6e 	bl	80082ce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	441a      	add	r2, r3
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a00:	2100      	movs	r1, #0
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f006 fa3a 	bl	8009e7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 81f2 	bne.w	8003dfe <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	4413      	add	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d112      	bne.n	8003a68 <PCD_EP_ISR_Handler+0x24e>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	e02f      	b.n	8003ac8 <PCD_EP_ISR_Handler+0x2ae>
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8003a6e:	d813      	bhi.n	8003a98 <PCD_EP_ISR_Handler+0x27e>
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <PCD_EP_ISR_Handler+0x270>
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	3301      	adds	r3, #1
 8003a88:	633b      	str	r3, [r7, #48]	; 0x30
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	e017      	b.n	8003ac8 <PCD_EP_ISR_Handler+0x2ae>
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <PCD_EP_ISR_Handler+0x298>
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	029b      	lsls	r3, r3, #10
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad8:	827b      	strh	r3, [r7, #18]
 8003ada:	8a7b      	ldrh	r3, [r7, #18]
 8003adc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ae0:	827b      	strh	r3, [r7, #18]
 8003ae2:	8a7b      	ldrh	r3, [r7, #18]
 8003ae4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ae8:	827b      	strh	r3, [r7, #18]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	8a7b      	ldrh	r3, [r7, #18]
 8003af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	8013      	strh	r3, [r2, #0]
 8003b04:	e17b      	b.n	8003dfe <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b18:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f280 80ea 	bge.w	8003cf6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b38:	4013      	ands	r3, r2
 8003b3a:	853b      	strh	r3, [r7, #40]	; 0x28
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003b4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b50:	b292      	uxth	r2, r2
 8003b52:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b54:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	4413      	add	r3, r2
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	7b1b      	ldrb	r3, [r3, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d122      	bne.n	8003bb8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	3306      	adds	r3, #6
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b9a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003b9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8087 	beq.w	8003cb2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	6959      	ldr	r1, [r3, #20]
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	88da      	ldrh	r2, [r3, #6]
 8003bb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bb2:	f004 fb8c 	bl	80082ce <USB_ReadPMA>
 8003bb6:	e07c      	b.n	8003cb2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	78db      	ldrb	r3, [r3, #3]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d108      	bne.n	8003bd2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003bc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f927 	bl	8003e1a <HAL_PCD_EP_DB_Receive>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003bd0:	e06f      	b.n	8003cb2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bec:	847b      	strh	r3, [r7, #34]	; 0x22
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	441a      	add	r2, r3
 8003bfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d021      	beq.n	8003c70 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3302      	adds	r3, #2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c54:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003c56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d02a      	beq.n	8003cb2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	6959      	ldr	r1, [r3, #20]
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	891a      	ldrh	r2, [r3, #8]
 8003c68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c6a:	f004 fb30 	bl	80082ce <USB_ReadPMA>
 8003c6e:	e020      	b.n	8003cb2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	3306      	adds	r3, #6
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c98:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003c9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	6959      	ldr	r1, [r3, #20]
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	895a      	ldrh	r2, [r3, #10]
 8003cac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cae:	f004 fb0e 	bl	80082ce <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cb8:	441a      	add	r2, r3
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cc4:	441a      	add	r2, r3
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d004      	beq.n	8003cdc <PCD_EP_ISR_Handler+0x4c2>
 8003cd2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d206      	bcs.n	8003cea <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f006 f8ca 	bl	8009e7c <HAL_PCD_DataOutStageCallback>
 8003ce8:	e005      	b.n	8003cf6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f002 fe87 	bl	8006a04 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003cf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d07e      	beq.n	8003dfe <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	843b      	strh	r3, [r7, #32]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	441a      	add	r2, r3
 8003d3e:	8c3b      	ldrh	r3, [r7, #32]
 8003d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	78db      	ldrb	r3, [r3, #3]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d00c      	beq.n	8003d6e <PCD_EP_ISR_Handler+0x554>
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	78db      	ldrb	r3, [r3, #3]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d146      	bne.n	8003df2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003d64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d141      	bne.n	8003df2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	3302      	adds	r3, #2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d96:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	8bfb      	ldrh	r3, [r7, #30]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d906      	bls.n	8003db0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	8bfb      	ldrh	r3, [r7, #30]
 8003da8:	1ad2      	subs	r2, r2, r3
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	619a      	str	r2, [r3, #24]
 8003dae:	e002      	b.n	8003db6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	2200      	movs	r2, #0
 8003db4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f006 f874 	bl	8009eb2 <HAL_PCD_DataInStageCallback>
 8003dca:	e018      	b.n	8003dfe <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	8bfb      	ldrh	r3, [r7, #30]
 8003dd2:	441a      	add	r2, r3
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	8bfb      	ldrh	r3, [r7, #30]
 8003dde:	441a      	add	r2, r3
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dea:	4618      	mov	r0, r3
 8003dec:	f002 fe0a 	bl	8006a04 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003df0:	e005      	b.n	8003dfe <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003df2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003df4:	461a      	mov	r2, r3
 8003df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f91b 	bl	8004034 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b21b      	sxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f6ff ad0a 	blt.w	8003824 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3738      	adds	r7, #56	; 0x38
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b088      	sub	sp, #32
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	4613      	mov	r3, r2
 8003e26:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d07e      	beq.n	8003f30 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	3302      	adds	r3, #2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e5a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	8b7b      	ldrh	r3, [r7, #26]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d306      	bcc.n	8003e74 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	8b7b      	ldrh	r3, [r7, #26]
 8003e6c:	1ad2      	subs	r2, r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	619a      	str	r2, [r3, #24]
 8003e72:	e002      	b.n	8003e7a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d123      	bne.n	8003eca <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9c:	833b      	strh	r3, [r7, #24]
 8003e9e:	8b3b      	ldrh	r3, [r7, #24]
 8003ea0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ea4:	833b      	strh	r3, [r7, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	441a      	add	r2, r3
 8003eb4:	8b3b      	ldrh	r3, [r7, #24]
 8003eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01f      	beq.n	8003f14 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	82fb      	strh	r3, [r7, #22]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	8afb      	ldrh	r3, [r7, #22]
 8003f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f14:	8b7b      	ldrh	r3, [r7, #26]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8087 	beq.w	800402a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6959      	ldr	r1, [r3, #20]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	891a      	ldrh	r2, [r3, #8]
 8003f28:	8b7b      	ldrh	r3, [r7, #26]
 8003f2a:	f004 f9d0 	bl	80082ce <USB_ReadPMA>
 8003f2e:	e07c      	b.n	800402a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4413      	add	r3, r2
 8003f44:	3306      	adds	r3, #6
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f58:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	8b7b      	ldrh	r3, [r7, #26]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d306      	bcc.n	8003f72 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	8b7b      	ldrh	r3, [r7, #26]
 8003f6a:	1ad2      	subs	r2, r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	619a      	str	r2, [r3, #24]
 8003f70:	e002      	b.n	8003f78 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d123      	bne.n	8003fc8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	83fb      	strh	r3, [r7, #30]
 8003f9c:	8bfb      	ldrh	r3, [r7, #30]
 8003f9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fa2:	83fb      	strh	r3, [r7, #30]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	441a      	add	r2, r3
 8003fb2:	8bfb      	ldrh	r3, [r7, #30]
 8003fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11f      	bne.n	8004012 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fec:	83bb      	strh	r3, [r7, #28]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	441a      	add	r2, r3
 8003ffc:	8bbb      	ldrh	r3, [r7, #28]
 8003ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800400e:	b29b      	uxth	r3, r3
 8004010:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004012:	8b7b      	ldrh	r3, [r7, #26]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	6959      	ldr	r1, [r3, #20]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	895a      	ldrh	r2, [r3, #10]
 8004024:	8b7b      	ldrh	r3, [r7, #26]
 8004026:	f004 f952 	bl	80082ce <USB_ReadPMA>
    }
  }

  return count;
 800402a:	8b7b      	ldrh	r3, [r7, #26]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b0a2      	sub	sp, #136	; 0x88
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 81c7 	beq.w	80043dc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004056:	b29b      	uxth	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	3302      	adds	r3, #2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004076:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004082:	429a      	cmp	r2, r3
 8004084:	d907      	bls.n	8004096 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	619a      	str	r2, [r3, #24]
 8004094:	e002      	b.n	800409c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2200      	movs	r2, #0
 800409a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 80b9 	bne.w	8004218 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	785b      	ldrb	r3, [r3, #1]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d126      	bne.n	80040fc <HAL_PCD_EP_DB_Transmit+0xc8>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040bc:	b29b      	uxth	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	4413      	add	r3, r2
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	011a      	lsls	r2, r3, #4
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	4413      	add	r3, r2
 80040d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	801a      	strh	r2, [r3, #0]
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	e01a      	b.n	8004132 <HAL_PCD_EP_DB_Transmit+0xfe>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d116      	bne.n	8004132 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	633b      	str	r3, [r7, #48]	; 0x30
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004112:	b29b      	uxth	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	4413      	add	r3, r2
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	011a      	lsls	r2, r3, #4
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	4413      	add	r3, r2
 8004126:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	2200      	movs	r2, #0
 8004130:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d126      	bne.n	800418e <HAL_PCD_EP_DB_Transmit+0x15a>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4413      	add	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	011a      	lsls	r2, r3, #4
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4413      	add	r3, r2
 8004162:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004172:	b29a      	uxth	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	801a      	strh	r2, [r3, #0]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004186:	b29a      	uxth	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	801a      	strh	r2, [r3, #0]
 800418c:	e017      	b.n	80041be <HAL_PCD_EP_DB_Transmit+0x18a>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	785b      	ldrb	r3, [r3, #1]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d113      	bne.n	80041be <HAL_PCD_EP_DB_Transmit+0x18a>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800419e:	b29b      	uxth	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	4413      	add	r3, r2
 80041a6:	623b      	str	r3, [r7, #32]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	011a      	lsls	r2, r3, #4
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	4413      	add	r3, r2
 80041b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2200      	movs	r2, #0
 80041bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	4619      	mov	r1, r3
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f005 fe74 	bl	8009eb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 82d4 	beq.w	800477e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f0:	827b      	strh	r3, [r7, #18]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	441a      	add	r2, r3
 8004200:	8a7b      	ldrh	r3, [r7, #18]
 8004202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800420e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004212:	b29b      	uxth	r3, r3
 8004214:	8013      	strh	r3, [r2, #0]
 8004216:	e2b2      	b.n	800477e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d021      	beq.n	8004266 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	441a      	add	r2, r3
 800424e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800425a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800425e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004262:	b29b      	uxth	r3, r3
 8004264:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800426c:	2b01      	cmp	r3, #1
 800426e:	f040 8286 	bne.w	800477e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800427a:	441a      	add	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004288:	441a      	add	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	429a      	cmp	r2, r3
 8004298:	d309      	bcc.n	80042ae <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6a1a      	ldr	r2, [r3, #32]
 80042a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a6:	1ad2      	subs	r2, r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	621a      	str	r2, [r3, #32]
 80042ac:	e015      	b.n	80042da <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d107      	bne.n	80042c6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80042b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80042c4:	e009      	b.n	80042da <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2200      	movs	r2, #0
 80042d8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	785b      	ldrb	r3, [r3, #1]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d155      	bne.n	800438e <HAL_PCD_EP_DB_Transmit+0x35a>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	4413      	add	r3, r2
 80042f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	011a      	lsls	r2, r3, #4
 8004300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004302:	4413      	add	r3, r2
 8004304:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
 800430a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800430c:	2b00      	cmp	r3, #0
 800430e:	d112      	bne.n	8004336 <HAL_PCD_EP_DB_Transmit+0x302>
 8004310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	b29b      	uxth	r3, r3
 8004316:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800431a:	b29a      	uxth	r2, r3
 800431c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800432a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432e:	b29a      	uxth	r2, r3
 8004330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004332:	801a      	strh	r2, [r3, #0]
 8004334:	e047      	b.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x392>
 8004336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004338:	2b3e      	cmp	r3, #62	; 0x3e
 800433a:	d811      	bhi.n	8004360 <HAL_PCD_EP_DB_Transmit+0x32c>
 800433c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	64bb      	str	r3, [r7, #72]	; 0x48
 8004342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_PCD_EP_DB_Transmit+0x31e>
 800434c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434e:	3301      	adds	r3, #1
 8004350:	64bb      	str	r3, [r7, #72]	; 0x48
 8004352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004354:	b29b      	uxth	r3, r3
 8004356:	029b      	lsls	r3, r3, #10
 8004358:	b29a      	uxth	r2, r3
 800435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e032      	b.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x392>
 8004360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	64bb      	str	r3, [r7, #72]	; 0x48
 8004366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <HAL_PCD_EP_DB_Transmit+0x342>
 8004370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004372:	3b01      	subs	r3, #1
 8004374:	64bb      	str	r3, [r7, #72]	; 0x48
 8004376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004378:	b29b      	uxth	r3, r3
 800437a:	029b      	lsls	r3, r3, #10
 800437c:	b29b      	uxth	r3, r3
 800437e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004386:	b29a      	uxth	r2, r3
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	801a      	strh	r2, [r3, #0]
 800438c:	e01b      	b.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x392>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d117      	bne.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x392>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	643b      	str	r3, [r7, #64]	; 0x40
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043aa:	4413      	add	r3, r2
 80043ac:	643b      	str	r3, [r7, #64]	; 0x40
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	011a      	lsls	r2, r3, #4
 80043b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b6:	4413      	add	r3, r2
 80043b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6959      	ldr	r1, [r3, #20]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	891a      	ldrh	r2, [r3, #8]
 80043d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f003 ff35 	bl	8008244 <USB_WritePMA>
 80043da:	e1d0      	b.n	800477e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	3306      	adds	r3, #6
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004404:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	699a      	ldr	r2, [r3, #24]
 800440c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004410:	429a      	cmp	r2, r3
 8004412:	d307      	bcc.n	8004424 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	699a      	ldr	r2, [r3, #24]
 8004418:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800441c:	1ad2      	subs	r2, r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	619a      	str	r2, [r3, #24]
 8004422:	e002      	b.n	800442a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2200      	movs	r2, #0
 8004428:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f040 80c4 	bne.w	80045bc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d126      	bne.n	800448a <HAL_PCD_EP_DB_Transmit+0x456>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444a:	b29b      	uxth	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004450:	4413      	add	r3, r2
 8004452:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	011a      	lsls	r2, r3, #4
 800445a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445c:	4413      	add	r3, r2
 800445e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004462:	66bb      	str	r3, [r7, #104]	; 0x68
 8004464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800446e:	b29a      	uxth	r2, r3
 8004470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004482:	b29a      	uxth	r2, r3
 8004484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	e01a      	b.n	80044c0 <HAL_PCD_EP_DB_Transmit+0x48c>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	785b      	ldrb	r3, [r3, #1]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d116      	bne.n	80044c0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	677b      	str	r3, [r7, #116]	; 0x74
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a6:	4413      	add	r3, r2
 80044a8:	677b      	str	r3, [r7, #116]	; 0x74
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	011a      	lsls	r2, r3, #4
 80044b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b2:	4413      	add	r3, r2
 80044b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044b8:	673b      	str	r3, [r7, #112]	; 0x70
 80044ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044bc:	2200      	movs	r2, #0
 80044be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	785b      	ldrb	r3, [r3, #1]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d12f      	bne.n	800452e <HAL_PCD_EP_DB_Transmit+0x4fa>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044de:	b29b      	uxth	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044e6:	4413      	add	r3, r2
 80044e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	011a      	lsls	r2, r3, #4
 80044f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044f6:	4413      	add	r3, r2
 80044f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800450c:	b29a      	uxth	r2, r3
 800450e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004512:	801a      	strh	r2, [r3, #0]
 8004514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004524:	b29a      	uxth	r2, r3
 8004526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800452a:	801a      	strh	r2, [r3, #0]
 800452c:	e017      	b.n	800455e <HAL_PCD_EP_DB_Transmit+0x52a>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d113      	bne.n	800455e <HAL_PCD_EP_DB_Transmit+0x52a>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453e:	b29b      	uxth	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004544:	4413      	add	r3, r2
 8004546:	67bb      	str	r3, [r7, #120]	; 0x78
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	011a      	lsls	r2, r3, #4
 800454e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004550:	4413      	add	r3, r2
 8004552:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004556:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004558:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800455a:	2200      	movs	r2, #0
 800455c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	4619      	mov	r1, r3
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f005 fca4 	bl	8009eb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004570:	2b00      	cmp	r3, #0
 8004572:	f040 8104 	bne.w	800477e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004590:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	441a      	add	r2, r3
 80045a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	8013      	strh	r3, [r2, #0]
 80045ba:	e0e0      	b.n	800477e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d121      	bne.n	800460a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004610:	2b01      	cmp	r3, #1
 8004612:	f040 80b4 	bne.w	800477e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800461e:	441a      	add	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800462c:	441a      	add	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	429a      	cmp	r2, r3
 800463c:	d309      	bcc.n	8004652 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	6a1a      	ldr	r2, [r3, #32]
 8004648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464a:	1ad2      	subs	r2, r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	621a      	str	r2, [r3, #32]
 8004650:	e015      	b.n	800467e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d107      	bne.n	800466a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800465a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800465e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004668:	e009      	b.n	800467e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2200      	movs	r2, #0
 8004674:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	667b      	str	r3, [r7, #100]	; 0x64
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d155      	bne.n	8004738 <HAL_PCD_EP_DB_Transmit+0x704>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469a:	b29b      	uxth	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a0:	4413      	add	r3, r2
 80046a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	011a      	lsls	r2, r3, #4
 80046aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ac:	4413      	add	r3, r2
 80046ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80046b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d112      	bne.n	80046e0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80046ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c8:	801a      	strh	r2, [r3, #0]
 80046ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046d8:	b29a      	uxth	r2, r3
 80046da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046dc:	801a      	strh	r2, [r3, #0]
 80046de:	e044      	b.n	800476a <HAL_PCD_EP_DB_Transmit+0x736>
 80046e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e2:	2b3e      	cmp	r3, #62	; 0x3e
 80046e4:	d811      	bhi.n	800470a <HAL_PCD_EP_DB_Transmit+0x6d6>
 80046e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	657b      	str	r3, [r7, #84]	; 0x54
 80046ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_PCD_EP_DB_Transmit+0x6c8>
 80046f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f8:	3301      	adds	r3, #1
 80046fa:	657b      	str	r3, [r7, #84]	; 0x54
 80046fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046fe:	b29b      	uxth	r3, r3
 8004700:	029b      	lsls	r3, r3, #10
 8004702:	b29a      	uxth	r2, r3
 8004704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004706:	801a      	strh	r2, [r3, #0]
 8004708:	e02f      	b.n	800476a <HAL_PCD_EP_DB_Transmit+0x736>
 800470a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	657b      	str	r3, [r7, #84]	; 0x54
 8004710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800471a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800471c:	3b01      	subs	r3, #1
 800471e:	657b      	str	r3, [r7, #84]	; 0x54
 8004720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004722:	b29b      	uxth	r3, r3
 8004724:	029b      	lsls	r3, r3, #10
 8004726:	b29b      	uxth	r3, r3
 8004728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004730:	b29a      	uxth	r2, r3
 8004732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	e018      	b.n	800476a <HAL_PCD_EP_DB_Transmit+0x736>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d114      	bne.n	800476a <HAL_PCD_EP_DB_Transmit+0x736>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004748:	b29b      	uxth	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800474e:	4413      	add	r3, r2
 8004750:	667b      	str	r3, [r7, #100]	; 0x64
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	011a      	lsls	r2, r3, #4
 8004758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800475a:	4413      	add	r3, r2
 800475c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004760:	663b      	str	r3, [r7, #96]	; 0x60
 8004762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004764:	b29a      	uxth	r2, r3
 8004766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004768:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6959      	ldr	r1, [r3, #20]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	895a      	ldrh	r2, [r3, #10]
 8004776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004778:	b29b      	uxth	r3, r3
 800477a:	f003 fd63 	bl	8008244 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004798:	823b      	strh	r3, [r7, #16]
 800479a:	8a3b      	ldrh	r3, [r7, #16]
 800479c:	f083 0310 	eor.w	r3, r3, #16
 80047a0:	823b      	strh	r3, [r7, #16]
 80047a2:	8a3b      	ldrh	r3, [r7, #16]
 80047a4:	f083 0320 	eor.w	r3, r3, #32
 80047a8:	823b      	strh	r3, [r7, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	441a      	add	r2, r3
 80047b8:	8a3b      	ldrh	r3, [r7, #16]
 80047ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3788      	adds	r7, #136	; 0x88
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	817b      	strh	r3, [r7, #10]
 80047e6:	4613      	mov	r3, r2
 80047e8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80047ea:	897b      	ldrh	r3, [r7, #10]
 80047ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f6:	897b      	ldrh	r3, [r7, #10]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e009      	b.n	8004822 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800480e:	897a      	ldrh	r2, [r7, #10]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004822:	893b      	ldrh	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d107      	bne.n	8004838 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2200      	movs	r2, #0
 800482c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	b29a      	uxth	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	80da      	strh	r2, [r3, #6]
 8004836:	e00b      	b.n	8004850 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2201      	movs	r2, #1
 800483c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	b29a      	uxth	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	b29a      	uxth	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr

0800485c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e31d      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800486e:	4b94      	ldr	r3, [pc, #592]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004878:	4b91      	ldr	r3, [pc, #580]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004880:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d07b      	beq.n	8004986 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d006      	beq.n	80048a2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b0c      	cmp	r3, #12
 8004898:	d10f      	bne.n	80048ba <HAL_RCC_OscConfig+0x5e>
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a0:	d10b      	bne.n	80048ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a2:	4b87      	ldr	r3, [pc, #540]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d06a      	beq.n	8004984 <HAL_RCC_OscConfig+0x128>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d166      	bne.n	8004984 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e2f7      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d106      	bne.n	80048d0 <HAL_RCC_OscConfig+0x74>
 80048c2:	4b7f      	ldr	r3, [pc, #508]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a7e      	ldr	r2, [pc, #504]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80048c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e02d      	b.n	800492c <HAL_RCC_OscConfig+0xd0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10c      	bne.n	80048f2 <HAL_RCC_OscConfig+0x96>
 80048d8:	4b79      	ldr	r3, [pc, #484]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a78      	ldr	r2, [pc, #480]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80048de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	4b76      	ldr	r3, [pc, #472]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a75      	ldr	r2, [pc, #468]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80048ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	e01c      	b.n	800492c <HAL_RCC_OscConfig+0xd0>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0xb8>
 80048fa:	4b71      	ldr	r3, [pc, #452]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a70      	ldr	r2, [pc, #448]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b6e      	ldr	r3, [pc, #440]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a6d      	ldr	r2, [pc, #436]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0xd0>
 8004914:	4b6a      	ldr	r3, [pc, #424]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a69      	ldr	r2, [pc, #420]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 800491a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b67      	ldr	r3, [pc, #412]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a66      	ldr	r2, [pc, #408]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fe f864 	bl	8002a00 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800493c:	f7fe f860 	bl	8002a00 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e2ad      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800494e:	4b5c      	ldr	r3, [pc, #368]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0xe0>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fe f850 	bl	8002a00 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004964:	f7fe f84c 	bl	8002a00 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	; 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e299      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004976:	4b52      	ldr	r3, [pc, #328]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x108>
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d05a      	beq.n	8004a48 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b04      	cmp	r3, #4
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d119      	bne.n	80049d2 <HAL_RCC_OscConfig+0x176>
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d116      	bne.n	80049d2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a4:	4b46      	ldr	r3, [pc, #280]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_OscConfig+0x160>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e276      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049bc:	4b40      	ldr	r3, [pc, #256]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	493d      	ldr	r1, [pc, #244]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d0:	e03a      	b.n	8004a48 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d020      	beq.n	8004a1c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049da:	4b3a      	ldr	r3, [pc, #232]	; (8004ac4 <HAL_RCC_OscConfig+0x268>)
 80049dc:	2201      	movs	r2, #1
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fe f80e 	bl	8002a00 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e8:	f7fe f80a 	bl	8002a00 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e257      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049fa:	4b31      	ldr	r3, [pc, #196]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	4b2e      	ldr	r3, [pc, #184]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	492a      	ldr	r1, [pc, #168]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	604b      	str	r3, [r1, #4]
 8004a1a:	e015      	b.n	8004a48 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a1c:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <HAL_RCC_OscConfig+0x268>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a22:	f7fd ffed 	bl	8002a00 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2a:	f7fd ffe9 	bl	8002a00 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e236      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a3c:	4b20      	ldr	r3, [pc, #128]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f0      	bne.n	8004a2a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80b8 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d170      	bne.n	8004b3e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a5c:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_OscConfig+0x218>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e21a      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d921      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fc19 	bl	80052c0 <RCC_SetFlashLatencyFromMSIRange>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e208      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	4906      	ldr	r1, [pc, #24]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	061b      	lsls	r3, r3, #24
 8004ab8:	4901      	ldr	r1, [pc, #4]	; (8004ac0 <HAL_RCC_OscConfig+0x264>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]
 8004abe:	e020      	b.n	8004b02 <HAL_RCC_OscConfig+0x2a6>
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ac8:	4ba4      	ldr	r3, [pc, #656]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	49a1      	ldr	r1, [pc, #644]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ada:	4ba0      	ldr	r3, [pc, #640]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	499c      	ldr	r1, [pc, #624]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fbe4 	bl	80052c0 <RCC_SetFlashLatencyFromMSIRange>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e1d3      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	0b5b      	lsrs	r3, r3, #13
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004b12:	4a92      	ldr	r2, [pc, #584]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004b14:	6892      	ldr	r2, [r2, #8]
 8004b16:	0912      	lsrs	r2, r2, #4
 8004b18:	f002 020f 	and.w	r2, r2, #15
 8004b1c:	4990      	ldr	r1, [pc, #576]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004b1e:	5c8a      	ldrb	r2, [r1, r2]
 8004b20:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b22:	4a90      	ldr	r2, [pc, #576]	; (8004d64 <HAL_RCC_OscConfig+0x508>)
 8004b24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b26:	4b90      	ldr	r3, [pc, #576]	; (8004d68 <HAL_RCC_OscConfig+0x50c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fd ff1c 	bl	8002968 <HAL_InitTick>
 8004b30:	4603      	mov	r3, r0
 8004b32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d045      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	e1b5      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d029      	beq.n	8004b9a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b46:	4b89      	ldr	r3, [pc, #548]	; (8004d6c <HAL_RCC_OscConfig+0x510>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fd ff58 	bl	8002a00 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b54:	f7fd ff54 	bl	8002a00 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e1a1      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b66:	4b7d      	ldr	r3, [pc, #500]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b72:	4b7a      	ldr	r3, [pc, #488]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	4977      	ldr	r1, [pc, #476]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b84:	4b75      	ldr	r3, [pc, #468]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	061b      	lsls	r3, r3, #24
 8004b92:	4972      	ldr	r1, [pc, #456]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
 8004b98:	e015      	b.n	8004bc6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b9a:	4b74      	ldr	r3, [pc, #464]	; (8004d6c <HAL_RCC_OscConfig+0x510>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba0:	f7fd ff2e 	bl	8002a00 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ba8:	f7fd ff2a 	bl	8002a00 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e177      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004bba:	4b68      	ldr	r3, [pc, #416]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d030      	beq.n	8004c34 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	4b65      	ldr	r3, [pc, #404]	; (8004d70 <HAL_RCC_OscConfig+0x514>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be0:	f7fd ff0e 	bl	8002a00 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be8:	f7fd ff0a 	bl	8002a00 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e157      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bfa:	4b58      	ldr	r3, [pc, #352]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x38c>
 8004c06:	e015      	b.n	8004c34 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c08:	4b59      	ldr	r3, [pc, #356]	; (8004d70 <HAL_RCC_OscConfig+0x514>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0e:	f7fd fef7 	bl	8002a00 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c16:	f7fd fef3 	bl	8002a00 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e140      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c28:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f0      	bne.n	8004c16 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 80b5 	beq.w	8004dac <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c42:	2300      	movs	r3, #0
 8004c44:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c46:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10d      	bne.n	8004c6e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c52:	4b42      	ldr	r3, [pc, #264]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	4a41      	ldr	r2, [pc, #260]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	6253      	str	r3, [r2, #36]	; 0x24
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6e:	4b41      	ldr	r3, [pc, #260]	; (8004d74 <HAL_RCC_OscConfig+0x518>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d118      	bne.n	8004cac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7a:	4b3e      	ldr	r3, [pc, #248]	; (8004d74 <HAL_RCC_OscConfig+0x518>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a3d      	ldr	r2, [pc, #244]	; (8004d74 <HAL_RCC_OscConfig+0x518>)
 8004c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c86:	f7fd febb 	bl	8002a00 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8e:	f7fd feb7 	bl	8002a00 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b64      	cmp	r3, #100	; 0x64
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e104      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <HAL_RCC_OscConfig+0x518>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d106      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x466>
 8004cb4:	4b29      	ldr	r3, [pc, #164]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb8:	4a28      	ldr	r2, [pc, #160]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbe:	6353      	str	r3, [r2, #52]	; 0x34
 8004cc0:	e02d      	b.n	8004d1e <HAL_RCC_OscConfig+0x4c2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x488>
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cce:	4a23      	ldr	r2, [pc, #140]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd4:	6353      	str	r3, [r2, #52]	; 0x34
 8004cd6:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	4a20      	ldr	r2, [pc, #128]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ce0:	6353      	str	r3, [r2, #52]	; 0x34
 8004ce2:	e01c      	b.n	8004d1e <HAL_RCC_OscConfig+0x4c2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b05      	cmp	r3, #5
 8004cea:	d10c      	bne.n	8004d06 <HAL_RCC_OscConfig+0x4aa>
 8004cec:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf0:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cf6:	6353      	str	r3, [r2, #52]	; 0x34
 8004cf8:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	4a17      	ldr	r2, [pc, #92]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d02:	6353      	str	r3, [r2, #52]	; 0x34
 8004d04:	e00b      	b.n	8004d1e <HAL_RCC_OscConfig+0x4c2>
 8004d06:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d10:	6353      	str	r3, [r2, #52]	; 0x34
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d1c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d015      	beq.n	8004d52 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d26:	f7fd fe6b 	bl	8002a00 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7fd fe67 	bl	8002a00 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e0b2      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <HAL_RCC_OscConfig+0x500>)
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0ee      	beq.n	8004d2e <HAL_RCC_OscConfig+0x4d2>
 8004d50:	e023      	b.n	8004d9a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d52:	f7fd fe55 	bl	8002a00 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d58:	e019      	b.n	8004d8e <HAL_RCC_OscConfig+0x532>
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	0800d3a0 	.word	0x0800d3a0
 8004d64:	20000018 	.word	0x20000018
 8004d68:	2000001c 	.word	0x2000001c
 8004d6c:	42470020 	.word	0x42470020
 8004d70:	42470680 	.word	0x42470680
 8004d74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d78:	f7fd fe42 	bl	8002a00 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e08d      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d8e:	4b49      	ldr	r3, [pc, #292]	; (8004eb4 <HAL_RCC_OscConfig+0x658>)
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1ee      	bne.n	8004d78 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d9a:	7ffb      	ldrb	r3, [r7, #31]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da0:	4b44      	ldr	r3, [pc, #272]	; (8004eb4 <HAL_RCC_OscConfig+0x658>)
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	4a43      	ldr	r2, [pc, #268]	; (8004eb4 <HAL_RCC_OscConfig+0x658>)
 8004da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004daa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d079      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d056      	beq.n	8004e68 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d13b      	bne.n	8004e3a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc2:	4b3d      	ldr	r3, [pc, #244]	; (8004eb8 <HAL_RCC_OscConfig+0x65c>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fd fe1a 	bl	8002a00 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fd fe16 	bl	8002a00 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e063      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004de2:	4b34      	ldr	r3, [pc, #208]	; (8004eb4 <HAL_RCC_OscConfig+0x658>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dee:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <HAL_RCC_OscConfig+0x658>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	4319      	orrs	r1, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	430b      	orrs	r3, r1
 8004e06:	492b      	ldr	r1, [pc, #172]	; (8004eb4 <HAL_RCC_OscConfig+0x658>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e0c:	4b2a      	ldr	r3, [pc, #168]	; (8004eb8 <HAL_RCC_OscConfig+0x65c>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e12:	f7fd fdf5 	bl	8002a00 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fd fdf1 	bl	8002a00 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e03e      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e2c:	4b21      	ldr	r3, [pc, #132]	; (8004eb4 <HAL_RCC_OscConfig+0x658>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x5be>
 8004e38:	e036      	b.n	8004ea8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <HAL_RCC_OscConfig+0x65c>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd fdde 	bl	8002a00 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e48:	f7fd fdda 	bl	8002a00 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e027      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e5a:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <HAL_RCC_OscConfig+0x658>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x5ec>
 8004e66:	e01f      	b.n	8004ea8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e01a      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <HAL_RCC_OscConfig+0x658>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d10d      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d106      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	42470060 	.word	0x42470060

08004ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e11a      	b.n	8005106 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b8f      	ldr	r3, [pc, #572]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d919      	bls.n	8004f12 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d105      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x34>
 8004ee4:	4b8a      	ldr	r3, [pc, #552]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a89      	ldr	r2, [pc, #548]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 8004eea:	f043 0304 	orr.w	r3, r3, #4
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	4b87      	ldr	r3, [pc, #540]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 0201 	bic.w	r2, r3, #1
 8004ef8:	4985      	ldr	r1, [pc, #532]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f00:	4b83      	ldr	r3, [pc, #524]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e0f9      	b.n	8005106 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d008      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f1e:	4b7d      	ldr	r3, [pc, #500]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	497a      	ldr	r1, [pc, #488]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 808e 	beq.w	800505a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d107      	bne.n	8004f56 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f46:	4b73      	ldr	r3, [pc, #460]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d121      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e0d7      	b.n	8005106 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d107      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f5e:	4b6d      	ldr	r3, [pc, #436]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d115      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e0cb      	b.n	8005106 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d107      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f76:	4b67      	ldr	r3, [pc, #412]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e0bf      	b.n	8005106 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004f86:	4b63      	ldr	r3, [pc, #396]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e0b7      	b.n	8005106 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f96:	4b5f      	ldr	r3, [pc, #380]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f023 0203 	bic.w	r2, r3, #3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	495c      	ldr	r1, [pc, #368]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa8:	f7fd fd2a 	bl	8002a00 <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d112      	bne.n	8004fdc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb8:	f7fd fd22 	bl	8002a00 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e09b      	b.n	8005106 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fce:	4b51      	ldr	r3, [pc, #324]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d1ee      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0xfc>
 8004fda:	e03e      	b.n	800505a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d112      	bne.n	800500a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe6:	f7fd fd0b 	bl	8002a00 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e084      	b.n	8005106 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ffc:	4b45      	ldr	r3, [pc, #276]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 030c 	and.w	r3, r3, #12
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d1ee      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0x12a>
 8005008:	e027      	b.n	800505a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d11d      	bne.n	800504e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005012:	e00a      	b.n	800502a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005014:	f7fd fcf4 	bl	8002a00 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e06d      	b.n	8005106 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800502a:	4b3a      	ldr	r3, [pc, #232]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b04      	cmp	r3, #4
 8005034:	d1ee      	bne.n	8005014 <HAL_RCC_ClockConfig+0x158>
 8005036:	e010      	b.n	800505a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005038:	f7fd fce2 	bl	8002a00 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f241 3288 	movw	r2, #5000	; 0x1388
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e05b      	b.n	8005106 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800504e:	4b31      	ldr	r3, [pc, #196]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1ee      	bne.n	8005038 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800505a:	4b2d      	ldr	r3, [pc, #180]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d219      	bcs.n	800509c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d105      	bne.n	800507a <HAL_RCC_ClockConfig+0x1be>
 800506e:	4b28      	ldr	r3, [pc, #160]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a27      	ldr	r2, [pc, #156]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 8005074:	f043 0304 	orr.w	r3, r3, #4
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4b25      	ldr	r3, [pc, #148]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 0201 	bic.w	r2, r3, #1
 8005082:	4923      	ldr	r1, [pc, #140]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	4b21      	ldr	r3, [pc, #132]	; (8005110 <HAL_RCC_ClockConfig+0x254>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e034      	b.n	8005106 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a8:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4917      	ldr	r1, [pc, #92]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050c6:	4b13      	ldr	r3, [pc, #76]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	490f      	ldr	r1, [pc, #60]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050da:	f000 f823 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 80050de:	4602      	mov	r2, r0
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <HAL_RCC_ClockConfig+0x258>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	490b      	ldr	r1, [pc, #44]	; (8005118 <HAL_RCC_ClockConfig+0x25c>)
 80050ec:	5ccb      	ldrb	r3, [r1, r3]
 80050ee:	fa22 f303 	lsr.w	r3, r2, r3
 80050f2:	4a0a      	ldr	r2, [pc, #40]	; (800511c <HAL_RCC_ClockConfig+0x260>)
 80050f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <HAL_RCC_ClockConfig+0x264>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fd fc34 	bl	8002968 <HAL_InitTick>
 8005100:	4603      	mov	r3, r0
 8005102:	72fb      	strb	r3, [r7, #11]

  return status;
 8005104:	7afb      	ldrb	r3, [r7, #11]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40023c00 	.word	0x40023c00
 8005114:	40023800 	.word	0x40023800
 8005118:	0800d3a0 	.word	0x0800d3a0
 800511c:	20000018 	.word	0x20000018
 8005120:	2000001c 	.word	0x2000001c

08005124 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005124:	b5b0      	push	{r4, r5, r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800512a:	4b61      	ldr	r3, [pc, #388]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x18c>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b0c      	cmp	r3, #12
 8005138:	d00d      	beq.n	8005156 <HAL_RCC_GetSysClockFreq+0x32>
 800513a:	2b0c      	cmp	r3, #12
 800513c:	f200 80a4 	bhi.w	8005288 <HAL_RCC_GetSysClockFreq+0x164>
 8005140:	2b04      	cmp	r3, #4
 8005142:	d002      	beq.n	800514a <HAL_RCC_GetSysClockFreq+0x26>
 8005144:	2b08      	cmp	r3, #8
 8005146:	d003      	beq.n	8005150 <HAL_RCC_GetSysClockFreq+0x2c>
 8005148:	e09e      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800514a:	4b5a      	ldr	r3, [pc, #360]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x190>)
 800514c:	613b      	str	r3, [r7, #16]
      break;
 800514e:	e0a9      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005150:	4b59      	ldr	r3, [pc, #356]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x194>)
 8005152:	613b      	str	r3, [r7, #16]
      break;
 8005154:	e0a6      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	0c9b      	lsrs	r3, r3, #18
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	4a57      	ldr	r2, [pc, #348]	; (80052bc <HAL_RCC_GetSysClockFreq+0x198>)
 8005160:	5cd3      	ldrb	r3, [r2, r3]
 8005162:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	0d9b      	lsrs	r3, r3, #22
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	3301      	adds	r3, #1
 800516e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005170:	4b4f      	ldr	r3, [pc, #316]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x18c>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d041      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	461c      	mov	r4, r3
 8005180:	f04f 0500 	mov.w	r5, #0
 8005184:	4620      	mov	r0, r4
 8005186:	4629      	mov	r1, r5
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	014b      	lsls	r3, r1, #5
 8005192:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005196:	0142      	lsls	r2, r0, #5
 8005198:	4610      	mov	r0, r2
 800519a:	4619      	mov	r1, r3
 800519c:	1b00      	subs	r0, r0, r4
 800519e:	eb61 0105 	sbc.w	r1, r1, r5
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	018b      	lsls	r3, r1, #6
 80051ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051b0:	0182      	lsls	r2, r0, #6
 80051b2:	1a12      	subs	r2, r2, r0
 80051b4:	eb63 0301 	sbc.w	r3, r3, r1
 80051b8:	f04f 0000 	mov.w	r0, #0
 80051bc:	f04f 0100 	mov.w	r1, #0
 80051c0:	00d9      	lsls	r1, r3, #3
 80051c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051c6:	00d0      	lsls	r0, r2, #3
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	1912      	adds	r2, r2, r4
 80051ce:	eb45 0303 	adc.w	r3, r5, r3
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f04f 0100 	mov.w	r1, #0
 80051da:	0259      	lsls	r1, r3, #9
 80051dc:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80051e0:	0250      	lsls	r0, r2, #9
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4610      	mov	r0, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	461a      	mov	r2, r3
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	f7fb ff91 	bl	8001118 <__aeabi_uldivmod>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4613      	mov	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e040      	b.n	8005282 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	461c      	mov	r4, r3
 8005204:	f04f 0500 	mov.w	r5, #0
 8005208:	4620      	mov	r0, r4
 800520a:	4629      	mov	r1, r5
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	014b      	lsls	r3, r1, #5
 8005216:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800521a:	0142      	lsls	r2, r0, #5
 800521c:	4610      	mov	r0, r2
 800521e:	4619      	mov	r1, r3
 8005220:	1b00      	subs	r0, r0, r4
 8005222:	eb61 0105 	sbc.w	r1, r1, r5
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	018b      	lsls	r3, r1, #6
 8005230:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005234:	0182      	lsls	r2, r0, #6
 8005236:	1a12      	subs	r2, r2, r0
 8005238:	eb63 0301 	sbc.w	r3, r3, r1
 800523c:	f04f 0000 	mov.w	r0, #0
 8005240:	f04f 0100 	mov.w	r1, #0
 8005244:	00d9      	lsls	r1, r3, #3
 8005246:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800524a:	00d0      	lsls	r0, r2, #3
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	1912      	adds	r2, r2, r4
 8005252:	eb45 0303 	adc.w	r3, r5, r3
 8005256:	f04f 0000 	mov.w	r0, #0
 800525a:	f04f 0100 	mov.w	r1, #0
 800525e:	0299      	lsls	r1, r3, #10
 8005260:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005264:	0290      	lsls	r0, r2, #10
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4610      	mov	r0, r2
 800526c:	4619      	mov	r1, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	461a      	mov	r2, r3
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	f7fb ff4f 	bl	8001118 <__aeabi_uldivmod>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4613      	mov	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	613b      	str	r3, [r7, #16]
      break;
 8005286:	e00d      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x18c>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	0b5b      	lsrs	r3, r3, #13
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	3301      	adds	r3, #1
 8005298:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	613b      	str	r3, [r7, #16]
      break;
 80052a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a4:	693b      	ldr	r3, [r7, #16]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bdb0      	pop	{r4, r5, r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40023800 	.word	0x40023800
 80052b4:	00f42400 	.word	0x00f42400
 80052b8:	007a1200 	.word	0x007a1200
 80052bc:	0800d394 	.word	0x0800d394

080052c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80052cc:	4b29      	ldr	r3, [pc, #164]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d12c      	bne.n	8005332 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052d8:	4b26      	ldr	r3, [pc, #152]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80052e4:	4b24      	ldr	r3, [pc, #144]	; (8005378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	e016      	b.n	800531e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f0:	4b20      	ldr	r3, [pc, #128]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	4a1f      	ldr	r2, [pc, #124]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80052f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fa:	6253      	str	r3, [r2, #36]	; 0x24
 80052fc:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005308:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005310:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005312:	4b18      	ldr	r3, [pc, #96]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	4a17      	ldr	r2, [pc, #92]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005324:	d105      	bne.n	8005332 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800532c:	d101      	bne.n	8005332 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800532e:	2301      	movs	r3, #1
 8005330:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d105      	bne.n	8005344 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005338:	4b10      	ldr	r3, [pc, #64]	; (800537c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a0f      	ldr	r2, [pc, #60]	; (800537c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800533e:	f043 0304 	orr.w	r3, r3, #4
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 0201 	bic.w	r2, r3, #1
 800534c:	490b      	ldr	r1, [pc, #44]	; (800537c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005354:	4b09      	ldr	r3, [pc, #36]	; (800537c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	429a      	cmp	r2, r3
 8005360:	d001      	beq.n	8005366 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800
 8005378:	40007000 	.word	0x40007000
 800537c:	40023c00 	.word	0x40023c00

08005380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e06e      	b.n	8005470 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	d108      	bne.n	80053ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a2:	d009      	beq.n	80053b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	61da      	str	r2, [r3, #28]
 80053aa:	e005      	b.n	80053b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fd f8e0 	bl	8002598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543c:	ea42 0103 	orr.w	r1, r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	0c1a      	lsrs	r2, r3, #16
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f002 0204 	and.w	r2, r2, #4
 800545e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	4613      	mov	r3, r2
 8005486:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_SPI_Transmit+0x22>
 8005496:	2302      	movs	r3, #2
 8005498:	e126      	b.n	80056e8 <HAL_SPI_Transmit+0x270>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054a2:	f7fd faad 	bl	8002a00 <HAL_GetTick>
 80054a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d002      	beq.n	80054be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
 80054ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054bc:	e10b      	b.n	80056d6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_SPI_Transmit+0x52>
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054ce:	e102      	b.n	80056d6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2203      	movs	r2, #3
 80054d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	88fa      	ldrh	r2, [r7, #6]
 80054ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005516:	d10f      	bne.n	8005538 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005526:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005536:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d007      	beq.n	8005556 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005554:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555e:	d14b      	bne.n	80055f8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_SPI_Transmit+0xf6>
 8005568:	8afb      	ldrh	r3, [r7, #22]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d13e      	bne.n	80055ec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	881a      	ldrh	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	1c9a      	adds	r2, r3, #2
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005592:	e02b      	b.n	80055ec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d112      	bne.n	80055c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	1c9a      	adds	r2, r3, #2
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80055c6:	e011      	b.n	80055ec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055c8:	f7fd fa1a 	bl	8002a00 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d803      	bhi.n	80055e0 <HAL_SPI_Transmit+0x168>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d102      	bne.n	80055e6 <HAL_SPI_Transmit+0x16e>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d102      	bne.n	80055ec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055ea:	e074      	b.n	80056d6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1ce      	bne.n	8005594 <HAL_SPI_Transmit+0x11c>
 80055f6:	e04c      	b.n	8005692 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_SPI_Transmit+0x18e>
 8005600:	8afb      	ldrh	r3, [r7, #22]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d140      	bne.n	8005688 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	7812      	ldrb	r2, [r2, #0]
 8005612:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800562c:	e02c      	b.n	8005688 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b02      	cmp	r3, #2
 800563a:	d113      	bne.n	8005664 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	7812      	ldrb	r2, [r2, #0]
 8005648:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	86da      	strh	r2, [r3, #54]	; 0x36
 8005662:	e011      	b.n	8005688 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005664:	f7fd f9cc 	bl	8002a00 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d803      	bhi.n	800567c <HAL_SPI_Transmit+0x204>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d102      	bne.n	8005682 <HAL_SPI_Transmit+0x20a>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005686:	e026      	b.n	80056d6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1cd      	bne.n	800562e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fbcc 	bl	8005e34 <SPI_EndRxTxTransaction>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	613b      	str	r3, [r7, #16]
 80056c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e000      	b.n	80056d6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80056d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3720      	adds	r7, #32
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	4613      	mov	r3, r2
 80056fe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800570c:	d112      	bne.n	8005734 <HAL_SPI_Receive+0x44>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10e      	bne.n	8005734 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2204      	movs	r2, #4
 800571a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800571e:	88fa      	ldrh	r2, [r7, #6]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f8f1 	bl	8005912 <HAL_SPI_TransmitReceive>
 8005730:	4603      	mov	r3, r0
 8005732:	e0ea      	b.n	800590a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_SPI_Receive+0x52>
 800573e:	2302      	movs	r3, #2
 8005740:	e0e3      	b.n	800590a <HAL_SPI_Receive+0x21a>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800574a:	f7fd f959 	bl	8002a00 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d002      	beq.n	8005762 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800575c:	2302      	movs	r3, #2
 800575e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005760:	e0ca      	b.n	80058f8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_SPI_Receive+0x7e>
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005772:	e0c1      	b.n	80058f8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2204      	movs	r2, #4
 8005778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	88fa      	ldrh	r2, [r7, #6]
 800578c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ba:	d10f      	bne.n	80057dc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	d007      	beq.n	80057fa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d162      	bne.n	80058c8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005802:	e02e      	b.n	8005862 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b01      	cmp	r3, #1
 8005810:	d115      	bne.n	800583e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f103 020c 	add.w	r2, r3, #12
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	7812      	ldrb	r2, [r2, #0]
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800583c:	e011      	b.n	8005862 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800583e:	f7fd f8df 	bl	8002a00 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d803      	bhi.n	8005856 <HAL_SPI_Receive+0x166>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d102      	bne.n	800585c <HAL_SPI_Receive+0x16c>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005860:	e04a      	b.n	80058f8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1cb      	bne.n	8005804 <HAL_SPI_Receive+0x114>
 800586c:	e031      	b.n	80058d2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	d113      	bne.n	80058a4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	b292      	uxth	r2, r2
 8005888:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	1c9a      	adds	r2, r3, #2
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058a2:	e011      	b.n	80058c8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058a4:	f7fd f8ac 	bl	8002a00 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d803      	bhi.n	80058bc <HAL_SPI_Receive+0x1cc>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d102      	bne.n	80058c2 <HAL_SPI_Receive+0x1d2>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058c6:	e017      	b.n	80058f8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1cd      	bne.n	800586e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 fa46 	bl	8005d68 <SPI_EndRxTransaction>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2220      	movs	r2, #32
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	75fb      	strb	r3, [r7, #23]
 80058f4:	e000      	b.n	80058f8 <HAL_SPI_Receive+0x208>
  }

error :
 80058f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005908:	7dfb      	ldrb	r3, [r7, #23]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b08c      	sub	sp, #48	; 0x30
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005920:	2301      	movs	r3, #1
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x26>
 8005934:	2302      	movs	r3, #2
 8005936:	e18a      	b.n	8005c4e <HAL_SPI_TransmitReceive+0x33c>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005940:	f7fd f85e 	bl	8002a00 <HAL_GetTick>
 8005944:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800594c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005956:	887b      	ldrh	r3, [r7, #2]
 8005958:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800595a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800595e:	2b01      	cmp	r3, #1
 8005960:	d00f      	beq.n	8005982 <HAL_SPI_TransmitReceive+0x70>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005968:	d107      	bne.n	800597a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <HAL_SPI_TransmitReceive+0x68>
 8005972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005976:	2b04      	cmp	r3, #4
 8005978:	d003      	beq.n	8005982 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800597a:	2302      	movs	r3, #2
 800597c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005980:	e15b      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_SPI_TransmitReceive+0x82>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_SPI_TransmitReceive+0x82>
 800598e:	887b      	ldrh	r3, [r7, #2]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d103      	bne.n	800599c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800599a:	e14e      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d003      	beq.n	80059b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2205      	movs	r2, #5
 80059ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	887a      	ldrh	r2, [r7, #2]
 80059c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	887a      	ldrh	r2, [r7, #2]
 80059c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	887a      	ldrh	r2, [r7, #2]
 80059d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	887a      	ldrh	r2, [r7, #2]
 80059d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b40      	cmp	r3, #64	; 0x40
 80059f2:	d007      	beq.n	8005a04 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0c:	d178      	bne.n	8005b00 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x10a>
 8005a16:	8b7b      	ldrh	r3, [r7, #26]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d166      	bne.n	8005aea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	881a      	ldrh	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	1c9a      	adds	r2, r3, #2
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a40:	e053      	b.n	8005aea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d11b      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x176>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d016      	beq.n	8005a88 <HAL_SPI_TransmitReceive+0x176>
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d113      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	881a      	ldrh	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d119      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x1b8>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d014      	beq.n	8005aca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	b292      	uxth	r2, r2
 8005aac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	1c9a      	adds	r2, r3, #2
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005aca:	f7fc ff99 	bl	8002a00 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d807      	bhi.n	8005aea <HAL_SPI_TransmitReceive+0x1d8>
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d003      	beq.n	8005aea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ae8:	e0a7      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1a6      	bne.n	8005a42 <HAL_SPI_TransmitReceive+0x130>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1a1      	bne.n	8005a42 <HAL_SPI_TransmitReceive+0x130>
 8005afe:	e07c      	b.n	8005bfa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_SPI_TransmitReceive+0x1fc>
 8005b08:	8b7b      	ldrh	r3, [r7, #26]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d16b      	bne.n	8005be6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	330c      	adds	r3, #12
 8005b18:	7812      	ldrb	r2, [r2, #0]
 8005b1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b34:	e057      	b.n	8005be6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d11c      	bne.n	8005b7e <HAL_SPI_TransmitReceive+0x26c>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d017      	beq.n	8005b7e <HAL_SPI_TransmitReceive+0x26c>
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d114      	bne.n	8005b7e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	7812      	ldrb	r2, [r2, #0]
 8005b60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d119      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x2ae>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d014      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bc0:	f7fc ff1e 	bl	8002a00 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d803      	bhi.n	8005bd8 <HAL_SPI_TransmitReceive+0x2c6>
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d102      	bne.n	8005bde <HAL_SPI_TransmitReceive+0x2cc>
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005be4:	e029      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1a2      	bne.n	8005b36 <HAL_SPI_TransmitReceive+0x224>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d19d      	bne.n	8005b36 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f918 	bl	8005e34 <SPI_EndRxTxTransaction>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d006      	beq.n	8005c18 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c16:	e010      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	e000      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3730      	adds	r7, #48	; 0x30
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	4613      	mov	r3, r2
 8005c66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c68:	f7fc feca 	bl	8002a00 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	4413      	add	r3, r2
 8005c76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c78:	f7fc fec2 	bl	8002a00 <HAL_GetTick>
 8005c7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c7e:	4b39      	ldr	r3, [pc, #228]	; (8005d64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	015b      	lsls	r3, r3, #5
 8005c84:	0d1b      	lsrs	r3, r3, #20
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	fb02 f303 	mul.w	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c8e:	e054      	b.n	8005d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d050      	beq.n	8005d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c98:	f7fc feb2 	bl	8002a00 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d902      	bls.n	8005cae <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d13d      	bne.n	8005d2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cc6:	d111      	bne.n	8005cec <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd0:	d004      	beq.n	8005cdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cda:	d107      	bne.n	8005cec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf4:	d10f      	bne.n	8005d16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e017      	b.n	8005d5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4013      	ands	r3, r2
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	bf0c      	ite	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	2300      	movne	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d19b      	bne.n	8005c90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000018 	.word	0x20000018

08005d68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d7c:	d111      	bne.n	8005da2 <SPI_EndRxTransaction+0x3a>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d86:	d004      	beq.n	8005d92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d90:	d107      	bne.n	8005da2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005daa:	d12a      	bne.n	8005e02 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db4:	d012      	beq.n	8005ddc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2180      	movs	r1, #128	; 0x80
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff ff49 	bl	8005c58 <SPI_WaitFlagStateUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d02d      	beq.n	8005e28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd0:	f043 0220 	orr.w	r2, r3, #32
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e026      	b.n	8005e2a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2200      	movs	r2, #0
 8005de4:	2101      	movs	r1, #1
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7ff ff36 	bl	8005c58 <SPI_WaitFlagStateUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01a      	beq.n	8005e28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	f043 0220 	orr.w	r2, r3, #32
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e013      	b.n	8005e2a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff ff23 	bl	8005c58 <SPI_WaitFlagStateUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1c:	f043 0220 	orr.w	r2, r3, #32
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e000      	b.n	8005e2a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e40:	4b1b      	ldr	r3, [pc, #108]	; (8005eb0 <SPI_EndRxTxTransaction+0x7c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <SPI_EndRxTxTransaction+0x80>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	0d5b      	lsrs	r3, r3, #21
 8005e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e50:	fb02 f303 	mul.w	r3, r2, r3
 8005e54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e5e:	d112      	bne.n	8005e86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	2180      	movs	r1, #128	; 0x80
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7ff fef4 	bl	8005c58 <SPI_WaitFlagStateUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d016      	beq.n	8005ea4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	f043 0220 	orr.w	r2, r3, #32
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e00f      	b.n	8005ea6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9c:	2b80      	cmp	r3, #128	; 0x80
 8005e9e:	d0f2      	beq.n	8005e86 <SPI_EndRxTxTransaction+0x52>
 8005ea0:	e000      	b.n	8005ea4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ea2:	bf00      	nop
  }

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000018 	.word	0x20000018
 8005eb4:	165e9f81 	.word	0x165e9f81

08005eb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ec8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005ecc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005eec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005ef0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	43db      	mvns	r3, r3
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	4013      	ands	r3, r2
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr

08005f18 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f18:	b084      	sub	sp, #16
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	f107 0014 	add.w	r0, r7, #20
 8005f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bc80      	pop	{r7}
 8005f54:	b004      	add	sp, #16
 8005f56:	4770      	bx	lr

08005f58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b09b      	sub	sp, #108	; 0x6c
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	78db      	ldrb	r3, [r3, #3]
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d81f      	bhi.n	8005fca <USB_ActivateEndpoint+0x72>
 8005f8a:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <USB_ActivateEndpoint+0x38>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	08005fbd 	.word	0x08005fbd
 8005f98:	08005fd3 	.word	0x08005fd3
 8005f9c:	08005faf 	.word	0x08005faf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005fa0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fa8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005fac:	e012      	b.n	8005fd4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005fae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fb2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005fb6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005fba:	e00b      	b.n	8005fd4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005fbc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fc4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005fc8:	e004      	b.n	8005fd4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005fd0:	e000      	b.n	8005fd4 <USB_ActivateEndpoint+0x7c>
      break;
 8005fd2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600c:	b29a      	uxth	r2, r3
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	4313      	orrs	r3, r2
 8006016:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	441a      	add	r2, r3
 8006024:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006038:	b29b      	uxth	r3, r3
 800603a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	7b1b      	ldrb	r3, [r3, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f040 8149 	bne.w	80062d8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 8084 	beq.w	8006158 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	011a      	lsls	r2, r3, #4
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	88db      	ldrh	r3, [r3, #6]
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	b29b      	uxth	r3, r3
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	81fb      	strh	r3, [r7, #14]
 8006092:	89fb      	ldrh	r3, [r7, #14]
 8006094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01b      	beq.n	80060d4 <USB_ActivateEndpoint+0x17c>
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b2:	81bb      	strh	r3, [r7, #12]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	441a      	add	r2, r3
 80060be:	89bb      	ldrh	r3, [r7, #12]
 80060c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	78db      	ldrb	r3, [r3, #3]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d020      	beq.n	800611e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f2:	813b      	strh	r3, [r7, #8]
 80060f4:	893b      	ldrh	r3, [r7, #8]
 80060f6:	f083 0320 	eor.w	r3, r3, #32
 80060fa:	813b      	strh	r3, [r7, #8]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	441a      	add	r2, r3
 8006106:	893b      	ldrh	r3, [r7, #8]
 8006108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006118:	b29b      	uxth	r3, r3
 800611a:	8013      	strh	r3, [r2, #0]
 800611c:	e27f      	b.n	800661e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006134:	817b      	strh	r3, [r7, #10]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	441a      	add	r2, r3
 8006140:	897b      	ldrh	r3, [r7, #10]
 8006142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006152:	b29b      	uxth	r3, r3
 8006154:	8013      	strh	r3, [r2, #0]
 8006156:	e262      	b.n	800661e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006162:	b29b      	uxth	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	4413      	add	r3, r2
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	011a      	lsls	r2, r3, #4
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006174:	4413      	add	r3, r2
 8006176:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	88db      	ldrh	r3, [r3, #6]
 8006180:	085b      	lsrs	r3, r3, #1
 8006182:	b29b      	uxth	r3, r3
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006196:	b29b      	uxth	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	4413      	add	r3, r2
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	011a      	lsls	r2, r3, #4
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	4413      	add	r3, r2
 80061aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061ae:	623b      	str	r3, [r7, #32]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d112      	bne.n	80061de <USB_ActivateEndpoint+0x286>
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	e02f      	b.n	800623e <USB_ActivateEndpoint+0x2e6>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b3e      	cmp	r3, #62	; 0x3e
 80061e4:	d813      	bhi.n	800620e <USB_ActivateEndpoint+0x2b6>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	663b      	str	r3, [r7, #96]	; 0x60
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <USB_ActivateEndpoint+0x2a8>
 80061fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061fc:	3301      	adds	r3, #1
 80061fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006202:	b29b      	uxth	r3, r3
 8006204:	029b      	lsls	r3, r3, #10
 8006206:	b29a      	uxth	r2, r3
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	801a      	strh	r2, [r3, #0]
 800620c:	e017      	b.n	800623e <USB_ActivateEndpoint+0x2e6>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	663b      	str	r3, [r7, #96]	; 0x60
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	2b00      	cmp	r3, #0
 8006220:	d102      	bne.n	8006228 <USB_ActivateEndpoint+0x2d0>
 8006222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006224:	3b01      	subs	r3, #1
 8006226:	663b      	str	r3, [r7, #96]	; 0x60
 8006228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800622a:	b29b      	uxth	r3, r3
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	b29b      	uxth	r3, r3
 8006230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006238:	b29a      	uxth	r2, r3
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	83fb      	strh	r3, [r7, #30]
 800624c:	8bfb      	ldrh	r3, [r7, #30]
 800624e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01b      	beq.n	800628e <USB_ActivateEndpoint+0x336>
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	83bb      	strh	r3, [r7, #28]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	8bbb      	ldrh	r3, [r7, #28]
 800627a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628a:	b29b      	uxth	r3, r3
 800628c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	837b      	strh	r3, [r7, #26]
 80062a6:	8b7b      	ldrh	r3, [r7, #26]
 80062a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062ac:	837b      	strh	r3, [r7, #26]
 80062ae:	8b7b      	ldrh	r3, [r7, #26]
 80062b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062b4:	837b      	strh	r3, [r7, #26]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	441a      	add	r2, r3
 80062c0:	8b7b      	ldrh	r3, [r7, #26]
 80062c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	8013      	strh	r3, [r2, #0]
 80062d6:	e1a2      	b.n	800661e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ee:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	441a      	add	r2, r3
 80062fc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006308:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800630c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006310:	b29b      	uxth	r3, r3
 8006312:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	65bb      	str	r3, [r7, #88]	; 0x58
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006324:	4413      	add	r3, r2
 8006326:	65bb      	str	r3, [r7, #88]	; 0x58
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	011a      	lsls	r2, r3, #4
 800632e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006330:	4413      	add	r3, r2
 8006332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006336:	657b      	str	r3, [r7, #84]	; 0x54
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	891b      	ldrh	r3, [r3, #8]
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	b29b      	uxth	r3, r3
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	653b      	str	r3, [r7, #80]	; 0x50
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006352:	b29b      	uxth	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006358:	4413      	add	r3, r2
 800635a:	653b      	str	r3, [r7, #80]	; 0x50
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	011a      	lsls	r2, r3, #4
 8006362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006364:	4413      	add	r3, r2
 8006366:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800636a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	895b      	ldrh	r3, [r3, #10]
 8006370:	085b      	lsrs	r3, r3, #1
 8006372:	b29b      	uxth	r3, r3
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 8091 	bne.w	80064a8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006394:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01b      	beq.n	80063d6 <USB_ActivateEndpoint+0x47e>
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	441a      	add	r2, r3
 80063c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80063c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	873b      	strh	r3, [r7, #56]	; 0x38
 80063e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01b      	beq.n	8006426 <USB_ActivateEndpoint+0x4ce>
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006404:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006422:	b29b      	uxth	r3, r3
 8006424:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800643e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006440:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006444:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006446:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006448:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800644c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	441a      	add	r2, r3
 8006458:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800645a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646a:	b29b      	uxth	r3, r3
 800646c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006484:	867b      	strh	r3, [r7, #50]	; 0x32
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	441a      	add	r2, r3
 8006490:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	8013      	strh	r3, [r2, #0]
 80064a6:	e0ba      	b.n	800661e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80064b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80064bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d01d      	beq.n	8006500 <USB_ActivateEndpoint+0x5a8>
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	441a      	add	r2, r3
 80064e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006510:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01d      	beq.n	8006558 <USB_ActivateEndpoint+0x600>
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	b29b      	uxth	r3, r3
 800652a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	441a      	add	r2, r3
 8006540:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006550:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	78db      	ldrb	r3, [r3, #3]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d024      	beq.n	80065aa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006576:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800657a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800657e:	f083 0320 	eor.w	r3, r3, #32
 8006582:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	441a      	add	r2, r3
 8006590:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	8013      	strh	r3, [r2, #0]
 80065a8:	e01d      	b.n	80065e6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	441a      	add	r2, r3
 80065ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80065d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	441a      	add	r2, r3
 8006608:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800660a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	b29b      	uxth	r3, r3
 800661c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800661e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006622:	4618      	mov	r0, r3
 8006624:	376c      	adds	r7, #108	; 0x6c
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800662c:	b480      	push	{r7}
 800662e:	b08d      	sub	sp, #52	; 0x34
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	7b1b      	ldrb	r3, [r3, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 808e 	bne.w	800675c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d044      	beq.n	80066d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	81bb      	strh	r3, [r7, #12]
 8006656:	89bb      	ldrh	r3, [r7, #12]
 8006658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01b      	beq.n	8006698 <USB_DeactivateEndpoint+0x6c>
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	817b      	strh	r3, [r7, #10]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	897b      	ldrh	r3, [r7, #10]
 8006684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006694:	b29b      	uxth	r3, r3
 8006696:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ae:	813b      	strh	r3, [r7, #8]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	441a      	add	r2, r3
 80066ba:	893b      	ldrh	r3, [r7, #8]
 80066bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	8013      	strh	r3, [r2, #0]
 80066d0:	e192      	b.n	80069f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	827b      	strh	r3, [r7, #18]
 80066e0:	8a7b      	ldrh	r3, [r7, #18]
 80066e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01b      	beq.n	8006722 <USB_DeactivateEndpoint+0xf6>
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006700:	823b      	strh	r3, [r7, #16]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	441a      	add	r2, r3
 800670c:	8a3b      	ldrh	r3, [r7, #16]
 800670e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800671a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671e:	b29b      	uxth	r3, r3
 8006720:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006738:	81fb      	strh	r3, [r7, #14]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	89fb      	ldrh	r3, [r7, #14]
 8006746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006756:	b29b      	uxth	r3, r3
 8006758:	8013      	strh	r3, [r2, #0]
 800675a:	e14d      	b.n	80069f8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b00      	cmp	r3, #0
 8006762:	f040 80a5 	bne.w	80068b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	843b      	strh	r3, [r7, #32]
 8006774:	8c3b      	ldrh	r3, [r7, #32]
 8006776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01b      	beq.n	80067b6 <USB_DeactivateEndpoint+0x18a>
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006794:	83fb      	strh	r3, [r7, #30]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	441a      	add	r2, r3
 80067a0:	8bfb      	ldrh	r3, [r7, #30]
 80067a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	83bb      	strh	r3, [r7, #28]
 80067c4:	8bbb      	ldrh	r3, [r7, #28]
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01b      	beq.n	8006806 <USB_DeactivateEndpoint+0x1da>
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e4:	837b      	strh	r3, [r7, #26]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	441a      	add	r2, r3
 80067f0:	8b7b      	ldrh	r3, [r7, #26]
 80067f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006802:	b29b      	uxth	r3, r3
 8006804:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681c:	833b      	strh	r3, [r7, #24]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	441a      	add	r2, r3
 8006828:	8b3b      	ldrh	r3, [r7, #24]
 800682a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006836:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800683a:	b29b      	uxth	r3, r3
 800683c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006854:	82fb      	strh	r3, [r7, #22]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	441a      	add	r2, r3
 8006860:	8afb      	ldrh	r3, [r7, #22]
 8006862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006872:	b29b      	uxth	r3, r3
 8006874:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688c:	82bb      	strh	r3, [r7, #20]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	441a      	add	r2, r3
 8006898:	8abb      	ldrh	r3, [r7, #20]
 800689a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	8013      	strh	r3, [r2, #0]
 80068ae:	e0a3      	b.n	80069f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80068be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01b      	beq.n	8006900 <USB_DeactivateEndpoint+0x2d4>
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800690e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01b      	beq.n	8006950 <USB_DeactivateEndpoint+0x324>
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800693c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006948:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800694c:	b29b      	uxth	r3, r3
 800694e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006966:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	441a      	add	r2, r3
 8006972:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006984:	b29b      	uxth	r3, r3
 8006986:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	b29b      	uxth	r3, r3
 80069be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	441a      	add	r2, r3
 80069e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3734      	adds	r7, #52	; 0x34
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr

08006a04 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b0cc      	sub	sp, #304	; 0x130
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	1d3b      	adds	r3, r7, #4
 8006a0c:	6018      	str	r0, [r3, #0]
 8006a0e:	463b      	mov	r3, r7
 8006a10:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a12:	463b      	mov	r3, r7
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	f040 872e 	bne.w	800787a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a1e:	463b      	mov	r3, r7
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699a      	ldr	r2, [r3, #24]
 8006a24:	463b      	mov	r3, r7
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d905      	bls.n	8006a3a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006a2e:	463b      	mov	r3, r7
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006a38:	e004      	b.n	8006a44 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a44:	463b      	mov	r3, r7
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	7b1b      	ldrb	r3, [r3, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d134      	bne.n	8006ab8 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a4e:	463b      	mov	r3, r7
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6959      	ldr	r1, [r3, #20]
 8006a54:	463b      	mov	r3, r7
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	88da      	ldrh	r2, [r3, #6]
 8006a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	1d38      	adds	r0, r7, #4
 8006a62:	6800      	ldr	r0, [r0, #0]
 8006a64:	f001 fbee 	bl	8008244 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a68:	f107 0310 	add.w	r3, r7, #16
 8006a6c:	1d3a      	adds	r2, r7, #4
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	1d3b      	adds	r3, r7, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	f107 0310 	add.w	r3, r7, #16
 8006a82:	f107 0210 	add.w	r2, r7, #16
 8006a86:	6812      	ldr	r2, [r2, #0]
 8006a88:	440a      	add	r2, r1
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	011a      	lsls	r2, r3, #4
 8006a94:	f107 0310 	add.w	r3, r7, #16
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006aa0:	f107 030c 	add.w	r3, r7, #12
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	f107 030c 	add.w	r3, r7, #12
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	f000 beac 	b.w	8007810 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006ab8:	463b      	mov	r3, r7
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	78db      	ldrb	r3, [r3, #3]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	f040 838c 	bne.w	80071dc <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ac4:	463b      	mov	r3, r7
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6a1a      	ldr	r2, [r3, #32]
 8006aca:	463b      	mov	r3, r7
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	f240 8330 	bls.w	8007136 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006ad6:	1d3b      	adds	r3, r7, #4
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	463b      	mov	r3, r7
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006af4:	1d3b      	adds	r3, r7, #4
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	463b      	mov	r3, r7
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006b1a:	463b      	mov	r3, r7
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6a1a      	ldr	r2, [r3, #32]
 8006b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	463b      	mov	r3, r7
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b2c:	1d3b      	adds	r3, r7, #4
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	463b      	mov	r3, r7
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 819e 	beq.w	8006e84 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b4c:	1d3a      	adds	r2, r7, #4
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	463b      	mov	r3, r7
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d17a      	bne.n	8006c52 <USB_EPStartXfer+0x24e>
 8006b5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b60:	1d3a      	adds	r2, r7, #4
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	1d3b      	adds	r3, r7, #4
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	4619      	mov	r1, r3
 8006b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b7a:	6812      	ldr	r2, [r2, #0]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	463b      	mov	r3, r7
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	011a      	lsls	r2, r3, #4
 8006b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d11a      	bne.n	8006bd8 <USB_EPStartXfer+0x1d4>
 8006ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	801a      	strh	r2, [r3, #0]
 8006bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	e062      	b.n	8006c9e <USB_EPStartXfer+0x29a>
 8006bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bdc:	2b3e      	cmp	r3, #62	; 0x3e
 8006bde:	d819      	bhi.n	8006c14 <USB_EPStartXfer+0x210>
 8006be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be4:	085b      	lsrs	r3, r3, #1
 8006be6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d004      	beq.n	8006c00 <USB_EPStartXfer+0x1fc>
 8006bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	029b      	lsls	r3, r3, #10
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e044      	b.n	8006c9e <USB_EPStartXfer+0x29a>
 8006c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c18:	095b      	lsrs	r3, r3, #5
 8006c1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <USB_EPStartXfer+0x230>
 8006c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	029b      	lsls	r3, r3, #10
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	e025      	b.n	8006c9e <USB_EPStartXfer+0x29a>
 8006c52:	463b      	mov	r3, r7
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d120      	bne.n	8006c9e <USB_EPStartXfer+0x29a>
 8006c5c:	1d3b      	adds	r3, r7, #4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	4619      	mov	r1, r3
 8006c68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	440a      	add	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	463b      	mov	r3, r7
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	011a      	lsls	r2, r3, #4
 8006c7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4413      	add	r3, r2
 8006c86:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	895b      	ldrh	r3, [r3, #10]
 8006ca4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ca8:	463b      	mov	r3, r7
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6959      	ldr	r1, [r3, #20]
 8006cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006cb8:	1d38      	adds	r0, r7, #4
 8006cba:	6800      	ldr	r0, [r0, #0]
 8006cbc:	f001 fac2 	bl	8008244 <USB_WritePMA>
            ep->xfer_buff += len;
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695a      	ldr	r2, [r3, #20]
 8006cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cca:	441a      	add	r2, r3
 8006ccc:	463b      	mov	r3, r7
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6a1a      	ldr	r2, [r3, #32]
 8006cd8:	463b      	mov	r3, r7
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d909      	bls.n	8006cf6 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006ce2:	463b      	mov	r3, r7
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6a1a      	ldr	r2, [r3, #32]
 8006ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cec:	1ad2      	subs	r2, r2, r3
 8006cee:	463b      	mov	r3, r7
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	621a      	str	r2, [r3, #32]
 8006cf4:	e008      	b.n	8006d08 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006d00:	463b      	mov	r3, r7
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2200      	movs	r2, #0
 8006d06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d08:	463b      	mov	r3, r7
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d17a      	bne.n	8006e08 <USB_EPStartXfer+0x404>
 8006d12:	f107 0318 	add.w	r3, r7, #24
 8006d16:	1d3a      	adds	r2, r7, #4
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	1d3b      	adds	r3, r7, #4
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	4619      	mov	r1, r3
 8006d28:	f107 0318 	add.w	r3, r7, #24
 8006d2c:	f107 0218 	add.w	r2, r7, #24
 8006d30:	6812      	ldr	r2, [r2, #0]
 8006d32:	440a      	add	r2, r1
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	463b      	mov	r3, r7
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	011a      	lsls	r2, r3, #4
 8006d3e:	f107 0318 	add.w	r3, r7, #24
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4413      	add	r3, r2
 8006d46:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006d4a:	f107 0314 	add.w	r3, r7, #20
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d11a      	bne.n	8006d8e <USB_EPStartXfer+0x38a>
 8006d58:	f107 0314 	add.w	r3, r7, #20
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	f107 0314 	add.w	r3, r7, #20
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	801a      	strh	r2, [r3, #0]
 8006d70:	f107 0314 	add.w	r3, r7, #20
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	f107 0314 	add.w	r3, r7, #20
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	801a      	strh	r2, [r3, #0]
 8006d8c:	e067      	b.n	8006e5e <USB_EPStartXfer+0x45a>
 8006d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d92:	2b3e      	cmp	r3, #62	; 0x3e
 8006d94:	d819      	bhi.n	8006dca <USB_EPStartXfer+0x3c6>
 8006d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d004      	beq.n	8006db6 <USB_EPStartXfer+0x3b2>
 8006dac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006db0:	3301      	adds	r3, #1
 8006db2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006db6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	029b      	lsls	r3, r3, #10
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f107 0314 	add.w	r3, r7, #20
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	801a      	strh	r2, [r3, #0]
 8006dc8:	e049      	b.n	8006e5e <USB_EPStartXfer+0x45a>
 8006dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <USB_EPStartXfer+0x3e6>
 8006de0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006de4:	3b01      	subs	r3, #1
 8006de6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006dea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	029b      	lsls	r3, r3, #10
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	f107 0314 	add.w	r3, r7, #20
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	801a      	strh	r2, [r3, #0]
 8006e06:	e02a      	b.n	8006e5e <USB_EPStartXfer+0x45a>
 8006e08:	463b      	mov	r3, r7
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d125      	bne.n	8006e5e <USB_EPStartXfer+0x45a>
 8006e12:	f107 0320 	add.w	r3, r7, #32
 8006e16:	1d3a      	adds	r2, r7, #4
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	1d3b      	adds	r3, r7, #4
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	4619      	mov	r1, r3
 8006e28:	f107 0320 	add.w	r3, r7, #32
 8006e2c:	f107 0220 	add.w	r2, r7, #32
 8006e30:	6812      	ldr	r2, [r2, #0]
 8006e32:	440a      	add	r2, r1
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	463b      	mov	r3, r7
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	011a      	lsls	r2, r3, #4
 8006e3e:	f107 0320 	add.w	r3, r7, #32
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4413      	add	r3, r2
 8006e46:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006e4a:	f107 031c 	add.w	r3, r7, #28
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f107 031c 	add.w	r3, r7, #28
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e5e:	463b      	mov	r3, r7
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	891b      	ldrh	r3, [r3, #8]
 8006e64:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e68:	463b      	mov	r3, r7
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6959      	ldr	r1, [r3, #20]
 8006e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e78:	1d38      	adds	r0, r7, #4
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	f001 f9e2 	bl	8008244 <USB_WritePMA>
 8006e80:	f000 bcc6 	b.w	8007810 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e84:	463b      	mov	r3, r7
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d164      	bne.n	8006f58 <USB_EPStartXfer+0x554>
 8006e8e:	1d3b      	adds	r3, r7, #4
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e94:	1d3b      	adds	r3, r7, #4
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea2:	4413      	add	r3, r2
 8006ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	011a      	lsls	r2, r3, #4
 8006eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d112      	bne.n	8006ee6 <USB_EPStartXfer+0x4e2>
 8006ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ece:	801a      	strh	r2, [r3, #0]
 8006ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	e057      	b.n	8006f96 <USB_EPStartXfer+0x592>
 8006ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eea:	2b3e      	cmp	r3, #62	; 0x3e
 8006eec:	d817      	bhi.n	8006f1e <USB_EPStartXfer+0x51a>
 8006eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <USB_EPStartXfer+0x50a>
 8006f04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f08:	3301      	adds	r3, #1
 8006f0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006f0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	029b      	lsls	r3, r3, #10
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e03b      	b.n	8006f96 <USB_EPStartXfer+0x592>
 8006f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2c:	f003 031f 	and.w	r3, r3, #31
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <USB_EPStartXfer+0x53a>
 8006f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006f3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	029b      	lsls	r3, r3, #10
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f54:	801a      	strh	r2, [r3, #0]
 8006f56:	e01e      	b.n	8006f96 <USB_EPStartXfer+0x592>
 8006f58:	463b      	mov	r3, r7
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	785b      	ldrb	r3, [r3, #1]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d119      	bne.n	8006f96 <USB_EPStartXfer+0x592>
 8006f62:	1d3b      	adds	r3, r7, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	653b      	str	r3, [r7, #80]	; 0x50
 8006f68:	1d3b      	adds	r3, r7, #4
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f76:	4413      	add	r3, r2
 8006f78:	653b      	str	r3, [r7, #80]	; 0x50
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	011a      	lsls	r2, r3, #4
 8006f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f84:	4413      	add	r3, r2
 8006f86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f96:	463b      	mov	r3, r7
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	891b      	ldrh	r3, [r3, #8]
 8006f9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6959      	ldr	r1, [r3, #20]
 8006fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006fb0:	1d38      	adds	r0, r7, #4
 8006fb2:	6800      	ldr	r0, [r0, #0]
 8006fb4:	f001 f946 	bl	8008244 <USB_WritePMA>
            ep->xfer_buff += len;
 8006fb8:	463b      	mov	r3, r7
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695a      	ldr	r2, [r3, #20]
 8006fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc2:	441a      	add	r2, r3
 8006fc4:	463b      	mov	r3, r7
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006fca:	463b      	mov	r3, r7
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6a1a      	ldr	r2, [r3, #32]
 8006fd0:	463b      	mov	r3, r7
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d909      	bls.n	8006fee <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8006fda:	463b      	mov	r3, r7
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6a1a      	ldr	r2, [r3, #32]
 8006fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe4:	1ad2      	subs	r2, r2, r3
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	621a      	str	r2, [r3, #32]
 8006fec:	e008      	b.n	8007000 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fee:	463b      	mov	r3, r7
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006ff8:	463b      	mov	r3, r7
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007000:	1d3b      	adds	r3, r7, #4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	643b      	str	r3, [r7, #64]	; 0x40
 8007006:	463b      	mov	r3, r7
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d164      	bne.n	80070da <USB_EPStartXfer+0x6d6>
 8007010:	1d3b      	adds	r3, r7, #4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	63bb      	str	r3, [r7, #56]	; 0x38
 8007016:	1d3b      	adds	r3, r7, #4
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800701e:	b29b      	uxth	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007024:	4413      	add	r3, r2
 8007026:	63bb      	str	r3, [r7, #56]	; 0x38
 8007028:	463b      	mov	r3, r7
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	011a      	lsls	r2, r3, #4
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	4413      	add	r3, r2
 8007034:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
 800703a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d112      	bne.n	8007068 <USB_EPStartXfer+0x664>
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	b29b      	uxth	r3, r3
 8007048:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800704c:	b29a      	uxth	r2, r3
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	801a      	strh	r2, [r3, #0]
 8007052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007060:	b29a      	uxth	r2, r3
 8007062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007064:	801a      	strh	r2, [r3, #0]
 8007066:	e054      	b.n	8007112 <USB_EPStartXfer+0x70e>
 8007068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706c:	2b3e      	cmp	r3, #62	; 0x3e
 800706e:	d817      	bhi.n	80070a0 <USB_EPStartXfer+0x69c>
 8007070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007074:	085b      	lsrs	r3, r3, #1
 8007076:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800707a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <USB_EPStartXfer+0x68c>
 8007086:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800708a:	3301      	adds	r3, #1
 800708c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007090:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007094:	b29b      	uxth	r3, r3
 8007096:	029b      	lsls	r3, r3, #10
 8007098:	b29a      	uxth	r2, r3
 800709a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e038      	b.n	8007112 <USB_EPStartXfer+0x70e>
 80070a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80070aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d104      	bne.n	80070c0 <USB_EPStartXfer+0x6bc>
 80070b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070ba:	3b01      	subs	r3, #1
 80070bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80070c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	029b      	lsls	r3, r3, #10
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	e01b      	b.n	8007112 <USB_EPStartXfer+0x70e>
 80070da:	463b      	mov	r3, r7
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	785b      	ldrb	r3, [r3, #1]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d116      	bne.n	8007112 <USB_EPStartXfer+0x70e>
 80070e4:	1d3b      	adds	r3, r7, #4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f2:	4413      	add	r3, r2
 80070f4:	643b      	str	r3, [r7, #64]	; 0x40
 80070f6:	463b      	mov	r3, r7
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	011a      	lsls	r2, r3, #4
 80070fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007100:	4413      	add	r3, r2
 8007102:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710c:	b29a      	uxth	r2, r3
 800710e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007110:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007112:	463b      	mov	r3, r7
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	895b      	ldrh	r3, [r3, #10]
 8007118:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6959      	ldr	r1, [r3, #20]
 8007122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007126:	b29b      	uxth	r3, r3
 8007128:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800712c:	1d38      	adds	r0, r7, #4
 800712e:	6800      	ldr	r0, [r0, #0]
 8007130:	f001 f888 	bl	8008244 <USB_WritePMA>
 8007134:	e36c      	b.n	8007810 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007136:	463b      	mov	r3, r7
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007140:	1d3b      	adds	r3, r7, #4
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	463b      	mov	r3, r7
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800715e:	1d3b      	adds	r3, r7, #4
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	463b      	mov	r3, r7
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	441a      	add	r2, r3
 800716c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800717c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007180:	b29b      	uxth	r3, r3
 8007182:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007184:	1d3b      	adds	r3, r7, #4
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800718a:	1d3b      	adds	r3, r7, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007192:	b29b      	uxth	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007198:	4413      	add	r3, r2
 800719a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800719c:	463b      	mov	r3, r7
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	011a      	lsls	r2, r3, #4
 80071a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071a6:	4413      	add	r3, r2
 80071a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80071b8:	463b      	mov	r3, r7
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	891b      	ldrh	r3, [r3, #8]
 80071be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071c2:	463b      	mov	r3, r7
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6959      	ldr	r1, [r3, #20]
 80071c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071d2:	1d38      	adds	r0, r7, #4
 80071d4:	6800      	ldr	r0, [r0, #0]
 80071d6:	f001 f835 	bl	8008244 <USB_WritePMA>
 80071da:	e319      	b.n	8007810 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80071dc:	1d3b      	adds	r3, r7, #4
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	463b      	mov	r3, r7
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80071fa:	1d3b      	adds	r3, r7, #4
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	463b      	mov	r3, r7
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	441a      	add	r2, r3
 8007208:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800720c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007214:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721c:	b29b      	uxth	r3, r3
 800721e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007220:	463b      	mov	r3, r7
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6a1a      	ldr	r2, [r3, #32]
 8007226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800722a:	1ad2      	subs	r2, r2, r3
 800722c:	463b      	mov	r3, r7
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007232:	1d3b      	adds	r3, r7, #4
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	463b      	mov	r3, r7
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8162 	beq.w	8007512 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800724e:	1d3b      	adds	r3, r7, #4
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007256:	463b      	mov	r3, r7
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d164      	bne.n	800732a <USB_EPStartXfer+0x926>
 8007260:	1d3b      	adds	r3, r7, #4
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	67bb      	str	r3, [r7, #120]	; 0x78
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726e:	b29b      	uxth	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007274:	4413      	add	r3, r2
 8007276:	67bb      	str	r3, [r7, #120]	; 0x78
 8007278:	463b      	mov	r3, r7
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	011a      	lsls	r2, r3, #4
 8007280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007282:	4413      	add	r3, r2
 8007284:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007288:	677b      	str	r3, [r7, #116]	; 0x74
 800728a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d112      	bne.n	80072b8 <USB_EPStartXfer+0x8b4>
 8007292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800729c:	b29a      	uxth	r2, r3
 800729e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072a0:	801a      	strh	r2, [r3, #0]
 80072a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b4:	801a      	strh	r2, [r3, #0]
 80072b6:	e057      	b.n	8007368 <USB_EPStartXfer+0x964>
 80072b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072bc:	2b3e      	cmp	r3, #62	; 0x3e
 80072be:	d817      	bhi.n	80072f0 <USB_EPStartXfer+0x8ec>
 80072c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c4:	085b      	lsrs	r3, r3, #1
 80072c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80072ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d004      	beq.n	80072e0 <USB_EPStartXfer+0x8dc>
 80072d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072da:	3301      	adds	r3, #1
 80072dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80072e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	029b      	lsls	r3, r3, #10
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ec:	801a      	strh	r2, [r3, #0]
 80072ee:	e03b      	b.n	8007368 <USB_EPStartXfer+0x964>
 80072f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80072fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	2b00      	cmp	r3, #0
 8007304:	d104      	bne.n	8007310 <USB_EPStartXfer+0x90c>
 8007306:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800730a:	3b01      	subs	r3, #1
 800730c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007310:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007314:	b29b      	uxth	r3, r3
 8007316:	029b      	lsls	r3, r3, #10
 8007318:	b29b      	uxth	r3, r3
 800731a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800731e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007322:	b29a      	uxth	r2, r3
 8007324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	e01e      	b.n	8007368 <USB_EPStartXfer+0x964>
 800732a:	463b      	mov	r3, r7
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d119      	bne.n	8007368 <USB_EPStartXfer+0x964>
 8007334:	1d3b      	adds	r3, r7, #4
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733c:	b29b      	uxth	r3, r3
 800733e:	461a      	mov	r2, r3
 8007340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007344:	4413      	add	r3, r2
 8007346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800734a:	463b      	mov	r3, r7
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	011a      	lsls	r2, r3, #4
 8007352:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007356:	4413      	add	r3, r2
 8007358:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800735c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800735e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007362:	b29a      	uxth	r2, r3
 8007364:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007366:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007368:	463b      	mov	r3, r7
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	895b      	ldrh	r3, [r3, #10]
 800736e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007372:	463b      	mov	r3, r7
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6959      	ldr	r1, [r3, #20]
 8007378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800737c:	b29b      	uxth	r3, r3
 800737e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007382:	1d38      	adds	r0, r7, #4
 8007384:	6800      	ldr	r0, [r0, #0]
 8007386:	f000 ff5d 	bl	8008244 <USB_WritePMA>
          ep->xfer_buff += len;
 800738a:	463b      	mov	r3, r7
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	695a      	ldr	r2, [r3, #20]
 8007390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007394:	441a      	add	r2, r3
 8007396:	463b      	mov	r3, r7
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800739c:	463b      	mov	r3, r7
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6a1a      	ldr	r2, [r3, #32]
 80073a2:	463b      	mov	r3, r7
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d909      	bls.n	80073c0 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80073ac:	463b      	mov	r3, r7
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6a1a      	ldr	r2, [r3, #32]
 80073b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b6:	1ad2      	subs	r2, r2, r3
 80073b8:	463b      	mov	r3, r7
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	621a      	str	r2, [r3, #32]
 80073be:	e008      	b.n	80073d2 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80073c0:	463b      	mov	r3, r7
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80073ca:	463b      	mov	r3, r7
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2200      	movs	r2, #0
 80073d0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80073d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 821a 	beq.w	8007810 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073dc:	463b      	mov	r3, r7
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	785b      	ldrb	r3, [r3, #1]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d164      	bne.n	80074b0 <USB_EPStartXfer+0xaac>
 80073e6:	1d3b      	adds	r3, r7, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80073ec:	1d3b      	adds	r3, r7, #4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	461a      	mov	r2, r3
 80073f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073fa:	4413      	add	r3, r2
 80073fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80073fe:	463b      	mov	r3, r7
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	011a      	lsls	r2, r3, #4
 8007406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007408:	4413      	add	r3, r2
 800740a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800740e:	667b      	str	r3, [r7, #100]	; 0x64
 8007410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007414:	2b00      	cmp	r3, #0
 8007416:	d112      	bne.n	800743e <USB_EPStartXfer+0xa3a>
 8007418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007422:	b29a      	uxth	r2, r3
 8007424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29b      	uxth	r3, r3
 800742e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007436:	b29a      	uxth	r2, r3
 8007438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800743a:	801a      	strh	r2, [r3, #0]
 800743c:	e057      	b.n	80074ee <USB_EPStartXfer+0xaea>
 800743e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007442:	2b3e      	cmp	r3, #62	; 0x3e
 8007444:	d817      	bhi.n	8007476 <USB_EPStartXfer+0xa72>
 8007446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <USB_EPStartXfer+0xa62>
 800745c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007460:	3301      	adds	r3, #1
 8007462:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800746a:	b29b      	uxth	r3, r3
 800746c:	029b      	lsls	r3, r3, #10
 800746e:	b29a      	uxth	r2, r3
 8007470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007472:	801a      	strh	r2, [r3, #0]
 8007474:	e03b      	b.n	80074ee <USB_EPStartXfer+0xaea>
 8007476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747a:	095b      	lsrs	r3, r3, #5
 800747c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <USB_EPStartXfer+0xa92>
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007490:	3b01      	subs	r3, #1
 8007492:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749a:	b29b      	uxth	r3, r3
 800749c:	029b      	lsls	r3, r3, #10
 800749e:	b29b      	uxth	r3, r3
 80074a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ac:	801a      	strh	r2, [r3, #0]
 80074ae:	e01e      	b.n	80074ee <USB_EPStartXfer+0xaea>
 80074b0:	463b      	mov	r3, r7
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	785b      	ldrb	r3, [r3, #1]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d119      	bne.n	80074ee <USB_EPStartXfer+0xaea>
 80074ba:	1d3b      	adds	r3, r7, #4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	673b      	str	r3, [r7, #112]	; 0x70
 80074c0:	1d3b      	adds	r3, r7, #4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074ce:	4413      	add	r3, r2
 80074d0:	673b      	str	r3, [r7, #112]	; 0x70
 80074d2:	463b      	mov	r3, r7
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	011a      	lsls	r2, r3, #4
 80074da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074dc:	4413      	add	r3, r2
 80074de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074ee:	463b      	mov	r3, r7
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	891b      	ldrh	r3, [r3, #8]
 80074f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074f8:	463b      	mov	r3, r7
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6959      	ldr	r1, [r3, #20]
 80074fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007502:	b29b      	uxth	r3, r3
 8007504:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007508:	1d38      	adds	r0, r7, #4
 800750a:	6800      	ldr	r0, [r0, #0]
 800750c:	f000 fe9a 	bl	8008244 <USB_WritePMA>
 8007510:	e17e      	b.n	8007810 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007512:	463b      	mov	r3, r7
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d16f      	bne.n	80075fc <USB_EPStartXfer+0xbf8>
 800751c:	1d3b      	adds	r3, r7, #4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007524:	1d3b      	adds	r3, r7, #4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800752c:	b29b      	uxth	r3, r3
 800752e:	461a      	mov	r2, r3
 8007530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007534:	4413      	add	r3, r2
 8007536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800753a:	463b      	mov	r3, r7
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	011a      	lsls	r2, r3, #4
 8007542:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007546:	4413      	add	r3, r2
 8007548:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800754c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d116      	bne.n	8007586 <USB_EPStartXfer+0xb82>
 8007558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007564:	b29a      	uxth	r2, r3
 8007566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800756a:	801a      	strh	r2, [r3, #0]
 800756c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757c:	b29a      	uxth	r2, r3
 800757e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	e05f      	b.n	8007646 <USB_EPStartXfer+0xc42>
 8007586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758a:	2b3e      	cmp	r3, #62	; 0x3e
 800758c:	d818      	bhi.n	80075c0 <USB_EPStartXfer+0xbbc>
 800758e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <USB_EPStartXfer+0xbaa>
 80075a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075a8:	3301      	adds	r3, #1
 80075aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	029b      	lsls	r3, r3, #10
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	e042      	b.n	8007646 <USB_EPStartXfer+0xc42>
 80075c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d104      	bne.n	80075e0 <USB_EPStartXfer+0xbdc>
 80075d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075da:	3b01      	subs	r3, #1
 80075dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	029b      	lsls	r3, r3, #10
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075f8:	801a      	strh	r2, [r3, #0]
 80075fa:	e024      	b.n	8007646 <USB_EPStartXfer+0xc42>
 80075fc:	463b      	mov	r3, r7
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d11f      	bne.n	8007646 <USB_EPStartXfer+0xc42>
 8007606:	1d3b      	adds	r3, r7, #4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800760e:	1d3b      	adds	r3, r7, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007616:	b29b      	uxth	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800761e:	4413      	add	r3, r2
 8007620:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007624:	463b      	mov	r3, r7
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	011a      	lsls	r2, r3, #4
 800762c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007630:	4413      	add	r3, r2
 8007632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800763a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763e:	b29a      	uxth	r2, r3
 8007640:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007644:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007646:	463b      	mov	r3, r7
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	891b      	ldrh	r3, [r3, #8]
 800764c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007650:	463b      	mov	r3, r7
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6959      	ldr	r1, [r3, #20]
 8007656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800765a:	b29b      	uxth	r3, r3
 800765c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007660:	1d38      	adds	r0, r7, #4
 8007662:	6800      	ldr	r0, [r0, #0]
 8007664:	f000 fdee 	bl	8008244 <USB_WritePMA>
          ep->xfer_buff += len;
 8007668:	463b      	mov	r3, r7
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695a      	ldr	r2, [r3, #20]
 800766e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007672:	441a      	add	r2, r3
 8007674:	463b      	mov	r3, r7
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800767a:	463b      	mov	r3, r7
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6a1a      	ldr	r2, [r3, #32]
 8007680:	463b      	mov	r3, r7
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	429a      	cmp	r2, r3
 8007688:	d909      	bls.n	800769e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800768a:	463b      	mov	r3, r7
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6a1a      	ldr	r2, [r3, #32]
 8007690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007694:	1ad2      	subs	r2, r2, r3
 8007696:	463b      	mov	r3, r7
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	621a      	str	r2, [r3, #32]
 800769c:	e008      	b.n	80076b0 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800769e:	463b      	mov	r3, r7
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80076a8:	463b      	mov	r3, r7
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2200      	movs	r2, #0
 80076ae:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80076b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 80ab 	beq.w	8007810 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076ba:	1d3b      	adds	r3, r7, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076c2:	463b      	mov	r3, r7
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d16f      	bne.n	80077ac <USB_EPStartXfer+0xda8>
 80076cc:	1d3b      	adds	r3, r7, #4
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076d4:	1d3b      	adds	r3, r7, #4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076dc:	b29b      	uxth	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076e4:	4413      	add	r3, r2
 80076e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076ea:	463b      	mov	r3, r7
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	011a      	lsls	r2, r3, #4
 80076f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076f6:	4413      	add	r3, r2
 80076f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d116      	bne.n	8007736 <USB_EPStartXfer+0xd32>
 8007708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	b29b      	uxth	r3, r3
 8007710:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007714:	b29a      	uxth	r2, r3
 8007716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800771a:	801a      	strh	r2, [r3, #0]
 800771c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	b29b      	uxth	r3, r3
 8007724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772c:	b29a      	uxth	r2, r3
 800772e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007732:	801a      	strh	r2, [r3, #0]
 8007734:	e05b      	b.n	80077ee <USB_EPStartXfer+0xdea>
 8007736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773a:	2b3e      	cmp	r3, #62	; 0x3e
 800773c:	d818      	bhi.n	8007770 <USB_EPStartXfer+0xd6c>
 800773e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007742:	085b      	lsrs	r3, r3, #1
 8007744:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d004      	beq.n	800775e <USB_EPStartXfer+0xd5a>
 8007754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007758:	3301      	adds	r3, #1
 800775a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800775e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007762:	b29b      	uxth	r3, r3
 8007764:	029b      	lsls	r3, r3, #10
 8007766:	b29a      	uxth	r2, r3
 8007768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	e03e      	b.n	80077ee <USB_EPStartXfer+0xdea>
 8007770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800777a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777e:	f003 031f 	and.w	r3, r3, #31
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <USB_EPStartXfer+0xd8c>
 8007786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800778a:	3b01      	subs	r3, #1
 800778c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007794:	b29b      	uxth	r3, r3
 8007796:	029b      	lsls	r3, r3, #10
 8007798:	b29b      	uxth	r3, r3
 800779a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077a8:	801a      	strh	r2, [r3, #0]
 80077aa:	e020      	b.n	80077ee <USB_EPStartXfer+0xdea>
 80077ac:	463b      	mov	r3, r7
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	785b      	ldrb	r3, [r3, #1]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d11b      	bne.n	80077ee <USB_EPStartXfer+0xdea>
 80077b6:	1d3b      	adds	r3, r7, #4
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077be:	b29b      	uxth	r3, r3
 80077c0:	461a      	mov	r2, r3
 80077c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077c6:	4413      	add	r3, r2
 80077c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077cc:	463b      	mov	r3, r7
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	011a      	lsls	r2, r3, #4
 80077d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077d8:	4413      	add	r3, r2
 80077da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80077e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077ee:	463b      	mov	r3, r7
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	895b      	ldrh	r3, [r3, #10]
 80077f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077f8:	463b      	mov	r3, r7
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6959      	ldr	r1, [r3, #20]
 80077fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007802:	b29b      	uxth	r3, r3
 8007804:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007808:	1d38      	adds	r0, r7, #4
 800780a:	6800      	ldr	r0, [r0, #0]
 800780c:	f000 fd1a 	bl	8008244 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007810:	1d3b      	adds	r3, r7, #4
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	463b      	mov	r3, r7
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	f107 020a 	add.w	r2, r7, #10
 8007826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800782a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800782e:	8013      	strh	r3, [r2, #0]
 8007830:	f107 030a 	add.w	r3, r7, #10
 8007834:	f107 020a 	add.w	r2, r7, #10
 8007838:	8812      	ldrh	r2, [r2, #0]
 800783a:	f082 0210 	eor.w	r2, r2, #16
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	f107 030a 	add.w	r3, r7, #10
 8007844:	f107 020a 	add.w	r2, r7, #10
 8007848:	8812      	ldrh	r2, [r2, #0]
 800784a:	f082 0220 	eor.w	r2, r2, #32
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	1d3b      	adds	r3, r7, #4
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	463b      	mov	r3, r7
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	441a      	add	r2, r3
 800785e:	f107 030a 	add.w	r3, r7, #10
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800786c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007874:	b29b      	uxth	r3, r3
 8007876:	8013      	strh	r3, [r2, #0]
 8007878:	e3b5      	b.n	8007fe6 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800787a:	463b      	mov	r3, r7
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	7b1b      	ldrb	r3, [r3, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f040 8090 	bne.w	80079a6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007886:	463b      	mov	r3, r7
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	699a      	ldr	r2, [r3, #24]
 800788c:	463b      	mov	r3, r7
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	429a      	cmp	r2, r3
 8007894:	d90e      	bls.n	80078b4 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8007896:	463b      	mov	r3, r7
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80078a0:	463b      	mov	r3, r7
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078aa:	1ad2      	subs	r2, r2, r3
 80078ac:	463b      	mov	r3, r7
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	619a      	str	r2, [r3, #24]
 80078b2:	e008      	b.n	80078c6 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80078b4:	463b      	mov	r3, r7
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80078be:	463b      	mov	r3, r7
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2200      	movs	r2, #0
 80078c4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80078c6:	1d3b      	adds	r3, r7, #4
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078ce:	1d3b      	adds	r3, r7, #4
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078de:	4413      	add	r3, r2
 80078e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078e4:	463b      	mov	r3, r7
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	011a      	lsls	r2, r3, #4
 80078ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078f0:	4413      	add	r3, r2
 80078f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d116      	bne.n	8007930 <USB_EPStartXfer+0xf2c>
 8007902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	b29b      	uxth	r3, r3
 800790a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800790e:	b29a      	uxth	r2, r3
 8007910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007914:	801a      	strh	r2, [r3, #0]
 8007916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007926:	b29a      	uxth	r2, r3
 8007928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800792c:	801a      	strh	r2, [r3, #0]
 800792e:	e32c      	b.n	8007f8a <USB_EPStartXfer+0x1586>
 8007930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007934:	2b3e      	cmp	r3, #62	; 0x3e
 8007936:	d818      	bhi.n	800796a <USB_EPStartXfer+0xf66>
 8007938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800793c:	085b      	lsrs	r3, r3, #1
 800793e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <USB_EPStartXfer+0xf54>
 800794e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007952:	3301      	adds	r3, #1
 8007954:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007958:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800795c:	b29b      	uxth	r3, r3
 800795e:	029b      	lsls	r3, r3, #10
 8007960:	b29a      	uxth	r2, r3
 8007962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	e30f      	b.n	8007f8a <USB_EPStartXfer+0x1586>
 800796a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007978:	f003 031f 	and.w	r3, r3, #31
 800797c:	2b00      	cmp	r3, #0
 800797e:	d104      	bne.n	800798a <USB_EPStartXfer+0xf86>
 8007980:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007984:	3b01      	subs	r3, #1
 8007986:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800798a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800798e:	b29b      	uxth	r3, r3
 8007990:	029b      	lsls	r3, r3, #10
 8007992:	b29b      	uxth	r3, r3
 8007994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799c:	b29a      	uxth	r2, r3
 800799e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079a2:	801a      	strh	r2, [r3, #0]
 80079a4:	e2f1      	b.n	8007f8a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80079a6:	463b      	mov	r3, r7
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	78db      	ldrb	r3, [r3, #3]
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	f040 818f 	bne.w	8007cd0 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80079b2:	463b      	mov	r3, r7
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	785b      	ldrb	r3, [r3, #1]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d175      	bne.n	8007aa8 <USB_EPStartXfer+0x10a4>
 80079bc:	1d3b      	adds	r3, r7, #4
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079c4:	1d3b      	adds	r3, r7, #4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079d4:	4413      	add	r3, r2
 80079d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079da:	463b      	mov	r3, r7
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	011a      	lsls	r2, r3, #4
 80079e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079e6:	4413      	add	r3, r2
 80079e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079f0:	463b      	mov	r3, r7
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d116      	bne.n	8007a28 <USB_EPStartXfer+0x1024>
 80079fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a0c:	801a      	strh	r2, [r3, #0]
 8007a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	e065      	b.n	8007af4 <USB_EPStartXfer+0x10f0>
 8007a28:	463b      	mov	r3, r7
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	2b3e      	cmp	r3, #62	; 0x3e
 8007a30:	d81a      	bhi.n	8007a68 <USB_EPStartXfer+0x1064>
 8007a32:	463b      	mov	r3, r7
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	085b      	lsrs	r3, r3, #1
 8007a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a3e:	463b      	mov	r3, r7
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <USB_EPStartXfer+0x1052>
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a50:	3301      	adds	r3, #1
 8007a52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	029b      	lsls	r3, r3, #10
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a64:	801a      	strh	r2, [r3, #0]
 8007a66:	e045      	b.n	8007af4 <USB_EPStartXfer+0x10f0>
 8007a68:	463b      	mov	r3, r7
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a74:	463b      	mov	r3, r7
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f003 031f 	and.w	r3, r3, #31
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <USB_EPStartXfer+0x1088>
 8007a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a86:	3b01      	subs	r3, #1
 8007a88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	029b      	lsls	r3, r3, #10
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007aa4:	801a      	strh	r2, [r3, #0]
 8007aa6:	e025      	b.n	8007af4 <USB_EPStartXfer+0x10f0>
 8007aa8:	463b      	mov	r3, r7
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	785b      	ldrb	r3, [r3, #1]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d120      	bne.n	8007af4 <USB_EPStartXfer+0x10f0>
 8007ab2:	1d3b      	adds	r3, r7, #4
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007aba:	1d3b      	adds	r3, r7, #4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007aca:	4413      	add	r3, r2
 8007acc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	011a      	lsls	r2, r3, #4
 8007ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007adc:	4413      	add	r3, r2
 8007ade:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ae2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	1d3b      	adds	r3, r7, #4
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007afc:	463b      	mov	r3, r7
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d175      	bne.n	8007bf2 <USB_EPStartXfer+0x11ee>
 8007b06:	1d3b      	adds	r3, r7, #4
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b0e:	1d3b      	adds	r3, r7, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b1e:	4413      	add	r3, r2
 8007b20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b24:	463b      	mov	r3, r7
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	011a      	lsls	r2, r3, #4
 8007b2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b30:	4413      	add	r3, r2
 8007b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d116      	bne.n	8007b72 <USB_EPStartXfer+0x116e>
 8007b44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b56:	801a      	strh	r2, [r3, #0]
 8007b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	e061      	b.n	8007c36 <USB_EPStartXfer+0x1232>
 8007b72:	463b      	mov	r3, r7
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	2b3e      	cmp	r3, #62	; 0x3e
 8007b7a:	d81a      	bhi.n	8007bb2 <USB_EPStartXfer+0x11ae>
 8007b7c:	463b      	mov	r3, r7
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b88:	463b      	mov	r3, r7
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <USB_EPStartXfer+0x119c>
 8007b96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ba0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	029b      	lsls	r3, r3, #10
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bae:	801a      	strh	r2, [r3, #0]
 8007bb0:	e041      	b.n	8007c36 <USB_EPStartXfer+0x1232>
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	095b      	lsrs	r3, r3, #5
 8007bba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007bbe:	463b      	mov	r3, r7
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f003 031f 	and.w	r3, r3, #31
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d104      	bne.n	8007bd6 <USB_EPStartXfer+0x11d2>
 8007bcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007bd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	029b      	lsls	r3, r3, #10
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bee:	801a      	strh	r2, [r3, #0]
 8007bf0:	e021      	b.n	8007c36 <USB_EPStartXfer+0x1232>
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d11c      	bne.n	8007c36 <USB_EPStartXfer+0x1232>
 8007bfc:	1d3b      	adds	r3, r7, #4
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	461a      	mov	r2, r3
 8007c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c12:	463b      	mov	r3, r7
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	011a      	lsls	r2, r3, #4
 8007c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c1e:	4413      	add	r3, r2
 8007c20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c28:	463b      	mov	r3, r7
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c34:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007c36:	463b      	mov	r3, r7
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 81a4 	beq.w	8007f8a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c42:	1d3b      	adds	r3, r7, #4
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	463b      	mov	r3, r7
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c56:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <USB_EPStartXfer+0x126a>
 8007c62:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10d      	bne.n	8007c8a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c6e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f040 8187 	bne.w	8007f8a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c7c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f040 8180 	bne.w	8007f8a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007c8a:	1d3b      	adds	r3, r7, #4
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	463b      	mov	r3, r7
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007ca8:	1d3b      	adds	r3, r7, #4
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	463b      	mov	r3, r7
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	441a      	add	r2, r3
 8007cb6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	8013      	strh	r3, [r2, #0]
 8007cce:	e15c      	b.n	8007f8a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	78db      	ldrb	r3, [r3, #3]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	f040 8155 	bne.w	8007f86 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007cdc:	463b      	mov	r3, r7
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	699a      	ldr	r2, [r3, #24]
 8007ce2:	463b      	mov	r3, r7
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d90e      	bls.n	8007d0a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007cec:	463b      	mov	r3, r7
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699a      	ldr	r2, [r3, #24]
 8007cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d00:	1ad2      	subs	r2, r2, r3
 8007d02:	463b      	mov	r3, r7
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	619a      	str	r2, [r3, #24]
 8007d08:	e008      	b.n	8007d1c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007d14:	463b      	mov	r3, r7
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d16f      	bne.n	8007e06 <USB_EPStartXfer+0x1402>
 8007d26:	1d3b      	adds	r3, r7, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d2e:	1d3b      	adds	r3, r7, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d3e:	4413      	add	r3, r2
 8007d40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d44:	463b      	mov	r3, r7
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	011a      	lsls	r2, r3, #4
 8007d4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d50:	4413      	add	r3, r2
 8007d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d116      	bne.n	8007d90 <USB_EPStartXfer+0x138c>
 8007d62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d74:	801a      	strh	r2, [r3, #0]
 8007d76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d8c:	801a      	strh	r2, [r3, #0]
 8007d8e:	e05f      	b.n	8007e50 <USB_EPStartXfer+0x144c>
 8007d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d94:	2b3e      	cmp	r3, #62	; 0x3e
 8007d96:	d818      	bhi.n	8007dca <USB_EPStartXfer+0x13c6>
 8007d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d9c:	085b      	lsrs	r3, r3, #1
 8007d9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d004      	beq.n	8007db8 <USB_EPStartXfer+0x13b4>
 8007dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007db2:	3301      	adds	r3, #1
 8007db4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	029b      	lsls	r3, r3, #10
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dc6:	801a      	strh	r2, [r3, #0]
 8007dc8:	e042      	b.n	8007e50 <USB_EPStartXfer+0x144c>
 8007dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dce:	095b      	lsrs	r3, r3, #5
 8007dd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd8:	f003 031f 	and.w	r3, r3, #31
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d104      	bne.n	8007dea <USB_EPStartXfer+0x13e6>
 8007de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007de4:	3b01      	subs	r3, #1
 8007de6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	029b      	lsls	r3, r3, #10
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e02:	801a      	strh	r2, [r3, #0]
 8007e04:	e024      	b.n	8007e50 <USB_EPStartXfer+0x144c>
 8007e06:	463b      	mov	r3, r7
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	785b      	ldrb	r3, [r3, #1]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d11f      	bne.n	8007e50 <USB_EPStartXfer+0x144c>
 8007e10:	1d3b      	adds	r3, r7, #4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e18:	1d3b      	adds	r3, r7, #4
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	461a      	mov	r2, r3
 8007e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e28:	4413      	add	r3, r2
 8007e2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e2e:	463b      	mov	r3, r7
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	011a      	lsls	r2, r3, #4
 8007e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e4e:	801a      	strh	r2, [r3, #0]
 8007e50:	1d3b      	adds	r3, r7, #4
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e58:	463b      	mov	r3, r7
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d16f      	bne.n	8007f42 <USB_EPStartXfer+0x153e>
 8007e62:	1d3b      	adds	r3, r7, #4
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e6a:	1d3b      	adds	r3, r7, #4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e80:	463b      	mov	r3, r7
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	011a      	lsls	r2, r3, #4
 8007e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d116      	bne.n	8007ecc <USB_EPStartXfer+0x14c8>
 8007e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eb0:	801a      	strh	r2, [r3, #0]
 8007eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ec8:	801a      	strh	r2, [r3, #0]
 8007eca:	e05e      	b.n	8007f8a <USB_EPStartXfer+0x1586>
 8007ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ed2:	d818      	bhi.n	8007f06 <USB_EPStartXfer+0x1502>
 8007ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed8:	085b      	lsrs	r3, r3, #1
 8007eda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <USB_EPStartXfer+0x14f0>
 8007eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007eee:	3301      	adds	r3, #1
 8007ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ef4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	029b      	lsls	r3, r3, #10
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f02:	801a      	strh	r2, [r3, #0]
 8007f04:	e041      	b.n	8007f8a <USB_EPStartXfer+0x1586>
 8007f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f14:	f003 031f 	and.w	r3, r3, #31
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d104      	bne.n	8007f26 <USB_EPStartXfer+0x1522>
 8007f1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f20:	3b01      	subs	r3, #1
 8007f22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	029b      	lsls	r3, r3, #10
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	e023      	b.n	8007f8a <USB_EPStartXfer+0x1586>
 8007f42:	463b      	mov	r3, r7
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	785b      	ldrb	r3, [r3, #1]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d11e      	bne.n	8007f8a <USB_EPStartXfer+0x1586>
 8007f4c:	1d3b      	adds	r3, r7, #4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	461a      	mov	r2, r3
 8007f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f62:	463b      	mov	r3, r7
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	011a      	lsls	r2, r3, #4
 8007f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f6e:	4413      	add	r3, r2
 8007f70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f82:	801a      	strh	r2, [r3, #0]
 8007f84:	e001      	b.n	8007f8a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e02e      	b.n	8007fe8 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f8a:	1d3b      	adds	r3, r7, #4
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	463b      	mov	r3, r7
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007fa8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007fac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fb0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007fb4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007fb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fbc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007fc0:	1d3b      	adds	r3, r7, #4
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	441a      	add	r2, r3
 8007fce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d020      	beq.n	8008046 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b29b      	uxth	r3, r3
 8008012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800801a:	81bb      	strh	r3, [r7, #12]
 800801c:	89bb      	ldrh	r3, [r7, #12]
 800801e:	f083 0310 	eor.w	r3, r3, #16
 8008022:	81bb      	strh	r3, [r7, #12]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	441a      	add	r2, r3
 800802e:	89bb      	ldrh	r3, [r7, #12]
 8008030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800803c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008040:	b29b      	uxth	r3, r3
 8008042:	8013      	strh	r3, [r2, #0]
 8008044:	e01f      	b.n	8008086 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805c:	81fb      	strh	r3, [r7, #14]
 800805e:	89fb      	ldrh	r3, [r7, #14]
 8008060:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008064:	81fb      	strh	r3, [r7, #14]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	441a      	add	r2, r3
 8008070:	89fb      	ldrh	r3, [r7, #14]
 8008072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800807a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800807e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008082:	b29b      	uxth	r3, r3
 8008084:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	bc80      	pop	{r7}
 8008090:	4770      	bx	lr

08008092 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008092:	b480      	push	{r7}
 8008094:	b087      	sub	sp, #28
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	7b1b      	ldrb	r3, [r3, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f040 809d 	bne.w	80081e0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	785b      	ldrb	r3, [r3, #1]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d04c      	beq.n	8008148 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	823b      	strh	r3, [r7, #16]
 80080bc:	8a3b      	ldrh	r3, [r7, #16]
 80080be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d01b      	beq.n	80080fe <USB_EPClearStall+0x6c>
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080dc:	81fb      	strh	r3, [r7, #14]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	441a      	add	r2, r3
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	78db      	ldrb	r3, [r3, #3]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d06c      	beq.n	80081e0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811c:	81bb      	strh	r3, [r7, #12]
 800811e:	89bb      	ldrh	r3, [r7, #12]
 8008120:	f083 0320 	eor.w	r3, r3, #32
 8008124:	81bb      	strh	r3, [r7, #12]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	441a      	add	r2, r3
 8008130:	89bb      	ldrh	r3, [r7, #12]
 8008132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800813a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800813e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008142:	b29b      	uxth	r3, r3
 8008144:	8013      	strh	r3, [r2, #0]
 8008146:	e04b      	b.n	80081e0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	82fb      	strh	r3, [r7, #22]
 8008156:	8afb      	ldrh	r3, [r7, #22]
 8008158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01b      	beq.n	8008198 <USB_EPClearStall+0x106>
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	b29b      	uxth	r3, r3
 800816e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008176:	82bb      	strh	r3, [r7, #20]
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	441a      	add	r2, r3
 8008182:	8abb      	ldrh	r3, [r7, #20]
 8008184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800818c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008194:	b29b      	uxth	r3, r3
 8008196:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ae:	827b      	strh	r3, [r7, #18]
 80081b0:	8a7b      	ldrh	r3, [r7, #18]
 80081b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081b6:	827b      	strh	r3, [r7, #18]
 80081b8:	8a7b      	ldrh	r3, [r7, #18]
 80081ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081be:	827b      	strh	r3, [r7, #18]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	441a      	add	r2, r3
 80081ca:	8a7b      	ldrh	r3, [r7, #18]
 80081cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081dc:	b29b      	uxth	r3, r3
 80081de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bc80      	pop	{r7}
 80081ea:	4770      	bx	lr

080081ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d103      	bne.n	8008206 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2280      	movs	r2, #128	; 0x80
 8008202:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	bc80      	pop	{r7}
 8008210:	4770      	bx	lr

08008212 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	bc80      	pop	{r7}
 8008224:	4770      	bx	lr

08008226 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008234:	b29b      	uxth	r3, r3
 8008236:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008238:	68fb      	ldr	r3, [r7, #12]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	bc80      	pop	{r7}
 8008242:	4770      	bx	lr

08008244 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008244:	b480      	push	{r7}
 8008246:	b08d      	sub	sp, #52	; 0x34
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4611      	mov	r1, r2
 8008250:	461a      	mov	r2, r3
 8008252:	460b      	mov	r3, r1
 8008254:	80fb      	strh	r3, [r7, #6]
 8008256:	4613      	mov	r3, r2
 8008258:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800825a:	88bb      	ldrh	r3, [r7, #4]
 800825c:	3301      	adds	r3, #1
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800826a:	88fb      	ldrh	r3, [r7, #6]
 800826c:	005a      	lsls	r2, r3, #1
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008276:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800827c:	e01e      	b.n	80082bc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	3301      	adds	r3, #1
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	b29b      	uxth	r3, r3
 8008294:	461a      	mov	r2, r3
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	b29a      	uxth	r2, r3
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	3302      	adds	r3, #2
 80082a8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	3302      	adds	r3, #2
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	3301      	adds	r3, #1
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	3b01      	subs	r3, #1
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1dd      	bne.n	800827e <USB_WritePMA+0x3a>
  }
}
 80082c2:	bf00      	nop
 80082c4:	bf00      	nop
 80082c6:	3734      	adds	r7, #52	; 0x34
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr

080082ce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b08b      	sub	sp, #44	; 0x2c
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	4611      	mov	r1, r2
 80082da:	461a      	mov	r2, r3
 80082dc:	460b      	mov	r3, r1
 80082de:	80fb      	strh	r3, [r7, #6]
 80082e0:	4613      	mov	r3, r2
 80082e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80082e4:	88bb      	ldrh	r3, [r7, #4]
 80082e6:	085b      	lsrs	r3, r3, #1
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082f4:	88fb      	ldrh	r3, [r7, #6]
 80082f6:	005a      	lsls	r2, r3, #1
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008300:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
 8008306:	e01b      	b.n	8008340 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	3302      	adds	r3, #2
 8008314:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	b2da      	uxtb	r2, r3
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	3301      	adds	r3, #1
 8008322:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	0a1b      	lsrs	r3, r3, #8
 8008328:	b2da      	uxtb	r2, r3
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	3301      	adds	r3, #1
 8008332:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	3302      	adds	r3, #2
 8008338:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	3b01      	subs	r3, #1
 800833e:	627b      	str	r3, [r7, #36]	; 0x24
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e0      	bne.n	8008308 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008346:	88bb      	ldrh	r3, [r7, #4]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	b29b      	uxth	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	b2da      	uxtb	r2, r3
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	701a      	strb	r2, [r3, #0]
  }
}
 8008362:	bf00      	nop
 8008364:	372c      	adds	r7, #44	; 0x2c
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr

0800836c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7c1b      	ldrb	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d115      	bne.n	80083b0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008388:	2202      	movs	r2, #2
 800838a:	2181      	movs	r1, #129	; 0x81
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 fe74 	bl	800a07a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800839c:	2202      	movs	r2, #2
 800839e:	2101      	movs	r1, #1
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 fe6a 	bl	800a07a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80083ae:	e012      	b.n	80083d6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80083b0:	2340      	movs	r3, #64	; 0x40
 80083b2:	2202      	movs	r2, #2
 80083b4:	2181      	movs	r1, #129	; 0x81
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fe5f 	bl	800a07a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80083c2:	2340      	movs	r3, #64	; 0x40
 80083c4:	2202      	movs	r2, #2
 80083c6:	2101      	movs	r1, #1
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f001 fe56 	bl	800a07a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083d6:	2308      	movs	r3, #8
 80083d8:	2203      	movs	r2, #3
 80083da:	2182      	movs	r1, #130	; 0x82
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 fe4c 	bl	800a07a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80083e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80083ec:	f001 ff6c 	bl	800a2c8 <USBD_static_malloc>
 80083f0:	4602      	mov	r2, r0
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d102      	bne.n	8008408 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008402:	2301      	movs	r3, #1
 8008404:	73fb      	strb	r3, [r7, #15]
 8008406:	e026      	b.n	8008456 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800840e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2200      	movs	r2, #0
 800841e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	7c1b      	ldrb	r3, [r3, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d109      	bne.n	8008446 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800843c:	2101      	movs	r1, #1
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f001 ff0c 	bl	800a25c <USBD_LL_PrepareReceive>
 8008444:	e007      	b.n	8008456 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800844c:	2340      	movs	r3, #64	; 0x40
 800844e:	2101      	movs	r1, #1
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 ff03 	bl	800a25c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008456:	7bfb      	ldrb	r3, [r7, #15]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008470:	2181      	movs	r1, #129	; 0x81
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 fe27 	bl	800a0c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800847e:	2101      	movs	r1, #1
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 fe20 	bl	800a0c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800848e:	2182      	movs	r1, #130	; 0x82
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 fe18 	bl	800a0c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00e      	beq.n	80084c4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 ff12 	bl	800a2e0 <USBD_static_free>
    pdev->pClassData = NULL;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b086      	sub	sp, #24
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084de:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d039      	beq.n	800856c <USBD_CDC_Setup+0x9e>
 80084f8:	2b20      	cmp	r3, #32
 80084fa:	d17f      	bne.n	80085fc <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	88db      	ldrh	r3, [r3, #6]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d029      	beq.n	8008558 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	b25b      	sxtb	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	da11      	bge.n	8008532 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800851a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	88d2      	ldrh	r2, [r2, #6]
 8008520:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008522:	6939      	ldr	r1, [r7, #16]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	88db      	ldrh	r3, [r3, #6]
 8008528:	461a      	mov	r2, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f001 f993 	bl	8009856 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8008530:	e06b      	b.n	800860a <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	785a      	ldrb	r2, [r3, #1]
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	88db      	ldrh	r3, [r3, #6]
 8008540:	b2da      	uxtb	r2, r3
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008548:	6939      	ldr	r1, [r7, #16]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	88db      	ldrh	r3, [r3, #6]
 800854e:	461a      	mov	r2, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 f9ae 	bl	80098b2 <USBD_CtlPrepareRx>
    break;
 8008556:	e058      	b.n	800860a <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	7850      	ldrb	r0, [r2, #1]
 8008564:	2200      	movs	r2, #0
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	4798      	blx	r3
    break;
 800856a:	e04e      	b.n	800860a <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	785b      	ldrb	r3, [r3, #1]
 8008570:	2b0b      	cmp	r3, #11
 8008572:	d02e      	beq.n	80085d2 <USBD_CDC_Setup+0x104>
 8008574:	2b0b      	cmp	r3, #11
 8008576:	dc38      	bgt.n	80085ea <USBD_CDC_Setup+0x11c>
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <USBD_CDC_Setup+0xb4>
 800857c:	2b0a      	cmp	r3, #10
 800857e:	d014      	beq.n	80085aa <USBD_CDC_Setup+0xdc>
 8008580:	e033      	b.n	80085ea <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008588:	2b03      	cmp	r3, #3
 800858a:	d107      	bne.n	800859c <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800858c:	f107 030c 	add.w	r3, r7, #12
 8008590:	2202      	movs	r2, #2
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 f95e 	bl	8009856 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800859a:	e02e      	b.n	80085fa <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f001 f8ef 	bl	8009782 <USBD_CtlError>
			  ret = USBD_FAIL;
 80085a4:	2302      	movs	r3, #2
 80085a6:	75fb      	strb	r3, [r7, #23]
      break;
 80085a8:	e027      	b.n	80085fa <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d107      	bne.n	80085c4 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80085b4:	f107 030f 	add.w	r3, r7, #15
 80085b8:	2201      	movs	r2, #1
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f94a 	bl	8009856 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80085c2:	e01a      	b.n	80085fa <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f001 f8db 	bl	8009782 <USBD_CtlError>
			  ret = USBD_FAIL;
 80085cc:	2302      	movs	r3, #2
 80085ce:	75fb      	strb	r3, [r7, #23]
      break;
 80085d0:	e013      	b.n	80085fa <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d00d      	beq.n	80085f8 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 f8cf 	bl	8009782 <USBD_CtlError>
			  ret = USBD_FAIL;
 80085e4:	2302      	movs	r3, #2
 80085e6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80085e8:	e006      	b.n	80085f8 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 f8c8 	bl	8009782 <USBD_CtlError>
      ret = USBD_FAIL;
 80085f2:	2302      	movs	r3, #2
 80085f4:	75fb      	strb	r3, [r7, #23]
      break;
 80085f6:	e000      	b.n	80085fa <USBD_CDC_Setup+0x12c>
      break;
 80085f8:	bf00      	nop
    }
    break;
 80085fa:	e006      	b.n	800860a <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 f8bf 	bl	8009782 <USBD_CtlError>
    ret = USBD_FAIL;
 8008604:	2302      	movs	r3, #2
 8008606:	75fb      	strb	r3, [r7, #23]
    break;
 8008608:	bf00      	nop
  }

  return ret;
 800860a:	7dfb      	ldrb	r3, [r7, #23]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008626:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800862e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008636:	2b00      	cmp	r3, #0
 8008638:	d03a      	beq.n	80086b0 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800863a:	78fa      	ldrb	r2, [r7, #3]
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	440b      	add	r3, r1
 8008648:	331c      	adds	r3, #28
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d029      	beq.n	80086a4 <USBD_CDC_DataIn+0x90>
 8008650:	78fa      	ldrb	r2, [r7, #3]
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	440b      	add	r3, r1
 800865e:	331c      	adds	r3, #28
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	78f9      	ldrb	r1, [r7, #3]
 8008664:	68b8      	ldr	r0, [r7, #8]
 8008666:	460b      	mov	r3, r1
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	440b      	add	r3, r1
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	4403      	add	r3, r0
 8008670:	3338      	adds	r3, #56	; 0x38
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	fbb2 f1f3 	udiv	r1, r2, r3
 8008678:	fb03 f301 	mul.w	r3, r3, r1
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d110      	bne.n	80086a4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	331c      	adds	r3, #28
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008696:	78f9      	ldrb	r1, [r7, #3]
 8008698:	2300      	movs	r3, #0
 800869a:	2200      	movs	r2, #0
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f001 fdba 	bl	800a216 <USBD_LL_Transmit>
 80086a2:	e003      	b.n	80086ac <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	e000      	b.n	80086b2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80086b0:	2302      	movs	r3, #2
  }
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086cc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f001 fde5 	bl	800a2a2 <USBD_LL_GetRxDataSize>
 80086d8:	4602      	mov	r2, r0
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00d      	beq.n	8008706 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80086fe:	4611      	mov	r1, r2
 8008700:	4798      	blx	r3

    return USBD_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	e000      	b.n	8008708 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008706:	2302      	movs	r3, #2
  }
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800871e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008726:	2b00      	cmp	r3, #0
 8008728:	d015      	beq.n	8008756 <USBD_CDC_EP0_RxReady+0x46>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008730:	2bff      	cmp	r3, #255	; 0xff
 8008732:	d010      	beq.n	8008756 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008742:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800874a:	b292      	uxth	r2, r2
 800874c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	22ff      	movs	r2, #255	; 0xff
 8008752:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2243      	movs	r2, #67	; 0x43
 800876c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800876e:	4b03      	ldr	r3, [pc, #12]	; (800877c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	200000ac 	.word	0x200000ac

08008780 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2243      	movs	r2, #67	; 0x43
 800878c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800878e:	4b03      	ldr	r3, [pc, #12]	; (800879c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	bc80      	pop	{r7}
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	20000068 	.word	0x20000068

080087a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2243      	movs	r2, #67	; 0x43
 80087ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80087ae:	4b03      	ldr	r3, [pc, #12]	; (80087bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	200000f0 	.word	0x200000f0

080087c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	220a      	movs	r2, #10
 80087cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80087ce:	4b03      	ldr	r3, [pc, #12]	; (80087dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bc80      	pop	{r7}
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000024 	.word	0x20000024

080087e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80087ea:	2302      	movs	r3, #2
 80087ec:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr

0800880c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	4613      	mov	r3, r2
 8008818:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008820:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	bc80      	pop	{r7}
 800883c:	4770      	bx	lr

0800883e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800884e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	bc80      	pop	{r7}
 8008862:	4770      	bx	lr

08008864 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008872:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800887a:	2b00      	cmp	r3, #0
 800887c:	d01c      	beq.n	80088b8 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008884:	2b00      	cmp	r3, #0
 8008886:	d115      	bne.n	80088b4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2201      	movs	r2, #1
 800888c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2181      	movs	r1, #129	; 0x81
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f001 fcb3 	bl	800a216 <USBD_LL_Transmit>

      return USBD_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	e002      	b.n	80088ba <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80088b8:	2302      	movs	r3, #2
  }
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d017      	beq.n	800890c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	7c1b      	ldrb	r3, [r3, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d109      	bne.n	80088f8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ee:	2101      	movs	r1, #1
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 fcb3 	bl	800a25c <USBD_LL_PrepareReceive>
 80088f6:	e007      	b.n	8008908 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088fe:	2340      	movs	r3, #64	; 0x40
 8008900:	2101      	movs	r1, #1
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 fcaa 	bl	800a25c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	e000      	b.n	800890e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800890c:	2302      	movs	r3, #2
  }
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	4613      	mov	r3, r2
 8008922:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800892a:	2302      	movs	r3, #2
 800892c:	e01a      	b.n	8008964 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	79fa      	ldrb	r2, [r7, #7]
 800895a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f001 fb17 	bl	8009f90 <USBD_LL_Init>

  return USBD_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d006      	beq.n	800898e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]
 800898c:	e001      	b.n	8008992 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800898e:	2302      	movs	r3, #2
 8008990:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	bc80      	pop	{r7}
 800899c:	4770      	bx	lr

0800899e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b082      	sub	sp, #8
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 fb4c 	bl	800a044 <USBD_LL_Start>

  return USBD_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bc80      	pop	{r7}
 80089c8:	4770      	bx	lr

080089ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80089d6:	2302      	movs	r3, #2
 80089d8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00c      	beq.n	80089fe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	78fa      	ldrb	r2, [r7, #3]
 80089ee:	4611      	mov	r1, r2
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	4798      	blx	r3
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	78fa      	ldrb	r2, [r7, #3]
 8008a1e:	4611      	mov	r1, r2
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	4798      	blx	r3
  return USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fe62 	bl	800970a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008a54:	461a      	mov	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008a62:	f003 031f 	and.w	r3, r3, #31
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d016      	beq.n	8008a98 <USBD_LL_SetupStage+0x6a>
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d81c      	bhi.n	8008aa8 <USBD_LL_SetupStage+0x7a>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <USBD_LL_SetupStage+0x4a>
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d008      	beq.n	8008a88 <USBD_LL_SetupStage+0x5a>
 8008a76:	e017      	b.n	8008aa8 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f9c5 	bl	8008e10 <USBD_StdDevReq>
    break;
 8008a86:	e01a      	b.n	8008abe <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fa27 	bl	8008ee4 <USBD_StdItfReq>
    break;
 8008a96:	e012      	b.n	8008abe <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fa67 	bl	8008f74 <USBD_StdEPReq>
    break;
 8008aa6:	e00a      	b.n	8008abe <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008aae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 fb24 	bl	800a104 <USBD_LL_StallEP>
    break;
 8008abc:	bf00      	nop
  }

  return USBD_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008ad6:	7afb      	ldrb	r3, [r7, #11]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d14b      	bne.n	8008b74 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008ae2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d134      	bne.n	8008b58 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d919      	bls.n	8008b2e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	1ad2      	subs	r2, r2, r3
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d203      	bcs.n	8008b1c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	e002      	b.n	8008b22 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	461a      	mov	r2, r3
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fee1 	bl	80098ee <USBD_CtlContinueRx>
 8008b2c:	e038      	b.n	8008ba0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d105      	bne.n	8008b50 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 fede 	bl	8009912 <USBD_CtlSendStatus>
 8008b56:	e023      	b.n	8008ba0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008b5e:	2b05      	cmp	r3, #5
 8008b60:	d11e      	bne.n	8008ba0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f001 fac9 	bl	800a104 <USBD_LL_StallEP>
 8008b72:	e015      	b.n	8008ba0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00d      	beq.n	8008b9c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d108      	bne.n	8008b9c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	7afa      	ldrb	r2, [r7, #11]
 8008b94:	4611      	mov	r1, r2
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	4798      	blx	r3
 8008b9a:	e001      	b.n	8008ba0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e000      	b.n	8008ba2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b086      	sub	sp, #24
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	607a      	str	r2, [r7, #4]
 8008bb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008bb8:	7afb      	ldrb	r3, [r7, #11]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d17f      	bne.n	8008cbe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3314      	adds	r3, #20
 8008bc2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d15c      	bne.n	8008c88 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	68da      	ldr	r2, [r3, #12]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d915      	bls.n	8008c06 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	1ad2      	subs	r2, r2, r3
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	461a      	mov	r2, r3
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 fe4b 	bl	800988e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f001 fb2c 	bl	800a25c <USBD_LL_PrepareReceive>
 8008c04:	e04e      	b.n	8008ca4 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	6912      	ldr	r2, [r2, #16]
 8008c0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c12:	fb02 f201 	mul.w	r2, r2, r1
 8008c16:	1a9b      	subs	r3, r3, r2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d11c      	bne.n	8008c56 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d316      	bcc.n	8008c56 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d20f      	bcs.n	8008c56 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c36:	2200      	movs	r2, #0
 8008c38:	2100      	movs	r1, #0
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 fe27 	bl	800988e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008c48:	2300      	movs	r3, #0
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f001 fb04 	bl	800a25c <USBD_LL_PrepareReceive>
 8008c54:	e026      	b.n	8008ca4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00a      	beq.n	8008c78 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d105      	bne.n	8008c78 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008c78:	2180      	movs	r1, #128	; 0x80
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f001 fa42 	bl	800a104 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 fe59 	bl	8009938 <USBD_CtlReceiveStatus>
 8008c86:	e00d      	b.n	8008ca4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d004      	beq.n	8008c9c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d103      	bne.n	8008ca4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008c9c:	2180      	movs	r1, #128	; 0x80
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f001 fa30 	bl	800a104 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d11d      	bne.n	8008cea <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f7ff fe81 	bl	80089b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008cbc:	e015      	b.n	8008cea <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00d      	beq.n	8008ce6 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d108      	bne.n	8008ce6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	7afa      	ldrb	r2, [r7, #11]
 8008cde:	4611      	mov	r1, r2
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	4798      	blx	r3
 8008ce4:	e001      	b.n	8008cea <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e000      	b.n	8008cec <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cfc:	2340      	movs	r3, #64	; 0x40
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2100      	movs	r1, #0
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 f9b9 	bl	800a07a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2240      	movs	r2, #64	; 0x40
 8008d14:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d18:	2340      	movs	r3, #64	; 0x40
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2180      	movs	r1, #128	; 0x80
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 f9ab 	bl	800a07a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2240      	movs	r2, #64	; 0x40
 8008d2e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d009      	beq.n	8008d6c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6852      	ldr	r2, [r2, #4]
 8008d64:	b2d2      	uxtb	r2, r2
 8008d66:	4611      	mov	r1, r2
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
  }

  return USBD_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008d76:	b480      	push	{r7}
 8008d78:	b083      	sub	sp, #12
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	460b      	mov	r3, r1
 8008d80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	78fa      	ldrb	r2, [r7, #3]
 8008d86:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bc80      	pop	{r7}
 8008d92:	4770      	bx	lr

08008d94 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2204      	movs	r2, #4
 8008dac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bc80      	pop	{r7}
 8008dba:	4770      	bx	lr

08008dbc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr

08008ddc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d10b      	bne.n	8008e06 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d005      	beq.n	8008e06 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e26:	2b40      	cmp	r3, #64	; 0x40
 8008e28:	d005      	beq.n	8008e36 <USBD_StdDevReq+0x26>
 8008e2a:	2b40      	cmp	r3, #64	; 0x40
 8008e2c:	d84f      	bhi.n	8008ece <USBD_StdDevReq+0xbe>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <USBD_StdDevReq+0x36>
 8008e32:	2b20      	cmp	r3, #32
 8008e34:	d14b      	bne.n	8008ece <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	4798      	blx	r3
    break;
 8008e44:	e048      	b.n	8008ed8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	785b      	ldrb	r3, [r3, #1]
 8008e4a:	2b09      	cmp	r3, #9
 8008e4c:	d839      	bhi.n	8008ec2 <USBD_StdDevReq+0xb2>
 8008e4e:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <USBD_StdDevReq+0x44>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008ea5 	.word	0x08008ea5
 8008e58:	08008eb9 	.word	0x08008eb9
 8008e5c:	08008ec3 	.word	0x08008ec3
 8008e60:	08008eaf 	.word	0x08008eaf
 8008e64:	08008ec3 	.word	0x08008ec3
 8008e68:	08008e87 	.word	0x08008e87
 8008e6c:	08008e7d 	.word	0x08008e7d
 8008e70:	08008ec3 	.word	0x08008ec3
 8008e74:	08008e9b 	.word	0x08008e9b
 8008e78:	08008e91 	.word	0x08008e91
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f9da 	bl	8009238 <USBD_GetDescriptor>
      break;
 8008e84:	e022      	b.n	8008ecc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 facf 	bl	800942c <USBD_SetAddress>
      break;
 8008e8e:	e01d      	b.n	8008ecc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fb0e 	bl	80094b4 <USBD_SetConfig>
      break;
 8008e98:	e018      	b.n	8008ecc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fb97 	bl	80095d0 <USBD_GetConfig>
      break;
 8008ea2:	e013      	b.n	8008ecc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fbc7 	bl	800963a <USBD_GetStatus>
      break;
 8008eac:	e00e      	b.n	8008ecc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fbf5 	bl	80096a0 <USBD_SetFeature>
      break;
 8008eb6:	e009      	b.n	8008ecc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fc04 	bl	80096c8 <USBD_ClrFeature>
      break;
 8008ec0:	e004      	b.n	8008ecc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fc5c 	bl	8009782 <USBD_CtlError>
      break;
 8008eca:	bf00      	nop
    }
    break;
 8008ecc:	e004      	b.n	8008ed8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fc56 	bl	8009782 <USBD_CtlError>
    break;
 8008ed6:	bf00      	nop
  }

  return ret;
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop

08008ee4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008efa:	2b40      	cmp	r3, #64	; 0x40
 8008efc:	d005      	beq.n	8008f0a <USBD_StdItfReq+0x26>
 8008efe:	2b40      	cmp	r3, #64	; 0x40
 8008f00:	d82e      	bhi.n	8008f60 <USBD_StdItfReq+0x7c>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <USBD_StdItfReq+0x26>
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	d12a      	bne.n	8008f60 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f10:	3b01      	subs	r3, #1
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d81d      	bhi.n	8008f52 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	889b      	ldrh	r3, [r3, #4]
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d813      	bhi.n	8008f48 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	4798      	blx	r3
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	88db      	ldrh	r3, [r3, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d110      	bne.n	8008f5c <USBD_StdItfReq+0x78>
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10d      	bne.n	8008f5c <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fce6 	bl	8009912 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008f46:	e009      	b.n	8008f5c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fc19 	bl	8009782 <USBD_CtlError>
      break;
 8008f50:	e004      	b.n	8008f5c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fc14 	bl	8009782 <USBD_CtlError>
      break;
 8008f5a:	e000      	b.n	8008f5e <USBD_StdItfReq+0x7a>
      break;
 8008f5c:	bf00      	nop
    }
    break;
 8008f5e:	e004      	b.n	8008f6a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fc0d 	bl	8009782 <USBD_CtlError>
    break;
 8008f68:	bf00      	nop
  }

  return USBD_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	889b      	ldrh	r3, [r3, #4]
 8008f86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f90:	2b40      	cmp	r3, #64	; 0x40
 8008f92:	d007      	beq.n	8008fa4 <USBD_StdEPReq+0x30>
 8008f94:	2b40      	cmp	r3, #64	; 0x40
 8008f96:	f200 8144 	bhi.w	8009222 <USBD_StdEPReq+0x2ae>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00a      	beq.n	8008fb4 <USBD_StdEPReq+0x40>
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	f040 813f 	bne.w	8009222 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	4798      	blx	r3
    break;
 8008fb2:	e13b      	b.n	800922c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fbc:	2b20      	cmp	r3, #32
 8008fbe:	d10a      	bne.n	8008fd6 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	4798      	blx	r3
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
 8008fd4:	e12b      	b.n	800922e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	785b      	ldrb	r3, [r3, #1]
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d007      	beq.n	8008fee <USBD_StdEPReq+0x7a>
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	f300 8119 	bgt.w	8009216 <USBD_StdEPReq+0x2a2>
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d072      	beq.n	80090ce <USBD_StdEPReq+0x15a>
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d03a      	beq.n	8009062 <USBD_StdEPReq+0xee>
 8008fec:	e113      	b.n	8009216 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d002      	beq.n	8008ffe <USBD_StdEPReq+0x8a>
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d015      	beq.n	8009028 <USBD_StdEPReq+0xb4>
 8008ffc:	e02b      	b.n	8009056 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00c      	beq.n	800901e <USBD_StdEPReq+0xaa>
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	2b80      	cmp	r3, #128	; 0x80
 8009008:	d009      	beq.n	800901e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f001 f878 	bl	800a104 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009014:	2180      	movs	r1, #128	; 0x80
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 f874 	bl	800a104 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800901c:	e020      	b.n	8009060 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fbae 	bl	8009782 <USBD_CtlError>
        break;
 8009026:	e01b      	b.n	8009060 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	885b      	ldrh	r3, [r3, #2]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10e      	bne.n	800904e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <USBD_StdEPReq+0xda>
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	2b80      	cmp	r3, #128	; 0x80
 800903a:	d008      	beq.n	800904e <USBD_StdEPReq+0xda>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	88db      	ldrh	r3, [r3, #6]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d104      	bne.n	800904e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 f85b 	bl	800a104 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fc5f 	bl	8009912 <USBD_CtlSendStatus>

        break;
 8009054:	e004      	b.n	8009060 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fb92 	bl	8009782 <USBD_CtlError>
        break;
 800905e:	bf00      	nop
      }
      break;
 8009060:	e0de      	b.n	8009220 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009068:	2b02      	cmp	r3, #2
 800906a:	d002      	beq.n	8009072 <USBD_StdEPReq+0xfe>
 800906c:	2b03      	cmp	r3, #3
 800906e:	d015      	beq.n	800909c <USBD_StdEPReq+0x128>
 8009070:	e026      	b.n	80090c0 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00c      	beq.n	8009092 <USBD_StdEPReq+0x11e>
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	2b80      	cmp	r3, #128	; 0x80
 800907c:	d009      	beq.n	8009092 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f001 f83e 	bl	800a104 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009088:	2180      	movs	r1, #128	; 0x80
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f001 f83a 	bl	800a104 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009090:	e01c      	b.n	80090cc <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fb74 	bl	8009782 <USBD_CtlError>
        break;
 800909a:	e017      	b.n	80090cc <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	885b      	ldrh	r3, [r3, #2]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d112      	bne.n	80090ca <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d004      	beq.n	80090b8 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 f845 	bl	800a142 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fc2a 	bl	8009912 <USBD_CtlSendStatus>
        }
        break;
 80090be:	e004      	b.n	80090ca <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fb5d 	bl	8009782 <USBD_CtlError>
        break;
 80090c8:	e000      	b.n	80090cc <USBD_StdEPReq+0x158>
        break;
 80090ca:	bf00      	nop
      }
      break;
 80090cc:	e0a8      	b.n	8009220 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d002      	beq.n	80090de <USBD_StdEPReq+0x16a>
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d031      	beq.n	8009140 <USBD_StdEPReq+0x1cc>
 80090dc:	e095      	b.n	800920a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090de:	7bbb      	ldrb	r3, [r7, #14]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d007      	beq.n	80090f4 <USBD_StdEPReq+0x180>
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	2b80      	cmp	r3, #128	; 0x80
 80090e8:	d004      	beq.n	80090f4 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fb48 	bl	8009782 <USBD_CtlError>
          break;
 80090f2:	e08f      	b.n	8009214 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80090f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	da0b      	bge.n	8009114 <USBD_StdEPReq+0x1a0>
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	3310      	adds	r3, #16
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	4413      	add	r3, r2
 8009110:	3304      	adds	r3, #4
 8009112:	e00a      	b.n	800912a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800911a:	4613      	mov	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	4413      	add	r3, r2
 800912a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2202      	movs	r2, #2
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fb8c 	bl	8009856 <USBD_CtlSendData>
          break;
 800913e:	e069      	b.n	8009214 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8009140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009144:	2b00      	cmp	r3, #0
 8009146:	da11      	bge.n	800916c <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	f003 020f 	and.w	r2, r3, #15
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	3318      	adds	r3, #24
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d117      	bne.n	8009192 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fb0c 	bl	8009782 <USBD_CtlError>
            break;
 800916a:	e053      	b.n	8009214 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	f003 020f 	and.w	r2, r3, #15
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	440b      	add	r3, r1
 800917e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d104      	bne.n	8009192 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 faf9 	bl	8009782 <USBD_CtlError>
            break;
 8009190:	e040      	b.n	8009214 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009196:	2b00      	cmp	r3, #0
 8009198:	da0b      	bge.n	80091b2 <USBD_StdEPReq+0x23e>
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091a0:	4613      	mov	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	3310      	adds	r3, #16
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	4413      	add	r3, r2
 80091ae:	3304      	adds	r3, #4
 80091b0:	e00a      	b.n	80091c8 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80091b2:	7bbb      	ldrb	r3, [r7, #14]
 80091b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	4413      	add	r3, r2
 80091c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <USBD_StdEPReq+0x262>
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	2b80      	cmp	r3, #128	; 0x80
 80091d4:	d103      	bne.n	80091de <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	e00e      	b.n	80091fc <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80091de:	7bbb      	ldrb	r3, [r7, #14]
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 ffcc 	bl	800a180 <USBD_LL_IsStallEP>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2201      	movs	r2, #1
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	e002      	b.n	80091fc <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2202      	movs	r2, #2
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fb27 	bl	8009856 <USBD_CtlSendData>
          break;
 8009208:	e004      	b.n	8009214 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fab8 	bl	8009782 <USBD_CtlError>
        break;
 8009212:	bf00      	nop
      }
      break;
 8009214:	e004      	b.n	8009220 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fab2 	bl	8009782 <USBD_CtlError>
      break;
 800921e:	bf00      	nop
    }
    break;
 8009220:	e004      	b.n	800922c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 faac 	bl	8009782 <USBD_CtlError>
    break;
 800922a:	bf00      	nop
  }

  return ret;
 800922c:	7bfb      	ldrb	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	885b      	ldrh	r3, [r3, #2]
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	2b06      	cmp	r3, #6
 800924e:	f200 80c9 	bhi.w	80093e4 <USBD_GetDescriptor+0x1ac>
 8009252:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <USBD_GetDescriptor+0x20>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	08009275 	.word	0x08009275
 800925c:	0800928d 	.word	0x0800928d
 8009260:	080092cd 	.word	0x080092cd
 8009264:	080093e5 	.word	0x080093e5
 8009268:	080093e5 	.word	0x080093e5
 800926c:	08009391 	.word	0x08009391
 8009270:	080093b7 	.word	0x080093b7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	7c12      	ldrb	r2, [r2, #16]
 8009280:	f107 010a 	add.w	r1, r7, #10
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	60f8      	str	r0, [r7, #12]
    break;
 800928a:	e0b0      	b.n	80093ee <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7c1b      	ldrb	r3, [r3, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10d      	bne.n	80092b0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800929a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929c:	f107 020a 	add.w	r2, r7, #10
 80092a0:	4610      	mov	r0, r2
 80092a2:	4798      	blx	r3
 80092a4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3301      	adds	r3, #1
 80092aa:	2202      	movs	r2, #2
 80092ac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80092ae:	e09e      	b.n	80093ee <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	f107 020a 	add.w	r2, r7, #10
 80092bc:	4610      	mov	r0, r2
 80092be:	4798      	blx	r3
 80092c0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3301      	adds	r3, #1
 80092c6:	2202      	movs	r2, #2
 80092c8:	701a      	strb	r2, [r3, #0]
    break;
 80092ca:	e090      	b.n	80093ee <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	885b      	ldrh	r3, [r3, #2]
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	d856      	bhi.n	8009384 <USBD_GetDescriptor+0x14c>
 80092d6:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <USBD_GetDescriptor+0xa4>)
 80092d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092dc:	080092f5 	.word	0x080092f5
 80092e0:	0800930d 	.word	0x0800930d
 80092e4:	08009325 	.word	0x08009325
 80092e8:	0800933d 	.word	0x0800933d
 80092ec:	08009355 	.word	0x08009355
 80092f0:	0800936d 	.word	0x0800936d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	7c12      	ldrb	r2, [r2, #16]
 8009300:	f107 010a 	add.w	r1, r7, #10
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
 8009308:	60f8      	str	r0, [r7, #12]
      break;
 800930a:	e040      	b.n	800938e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	7c12      	ldrb	r2, [r2, #16]
 8009318:	f107 010a 	add.w	r1, r7, #10
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	60f8      	str	r0, [r7, #12]
      break;
 8009322:	e034      	b.n	800938e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	7c12      	ldrb	r2, [r2, #16]
 8009330:	f107 010a 	add.w	r1, r7, #10
 8009334:	4610      	mov	r0, r2
 8009336:	4798      	blx	r3
 8009338:	60f8      	str	r0, [r7, #12]
      break;
 800933a:	e028      	b.n	800938e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	7c12      	ldrb	r2, [r2, #16]
 8009348:	f107 010a 	add.w	r1, r7, #10
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
 8009350:	60f8      	str	r0, [r7, #12]
      break;
 8009352:	e01c      	b.n	800938e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	7c12      	ldrb	r2, [r2, #16]
 8009360:	f107 010a 	add.w	r1, r7, #10
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
 8009368:	60f8      	str	r0, [r7, #12]
      break;
 800936a:	e010      	b.n	800938e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	7c12      	ldrb	r2, [r2, #16]
 8009378:	f107 010a 	add.w	r1, r7, #10
 800937c:	4610      	mov	r0, r2
 800937e:	4798      	blx	r3
 8009380:	60f8      	str	r0, [r7, #12]
      break;
 8009382:	e004      	b.n	800938e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f9fb 	bl	8009782 <USBD_CtlError>
      return;
 800938c:	e04b      	b.n	8009426 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800938e:	e02e      	b.n	80093ee <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	7c1b      	ldrb	r3, [r3, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d109      	bne.n	80093ac <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800939e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a0:	f107 020a 	add.w	r2, r7, #10
 80093a4:	4610      	mov	r0, r2
 80093a6:	4798      	blx	r3
 80093a8:	60f8      	str	r0, [r7, #12]
      break;
 80093aa:	e020      	b.n	80093ee <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f9e7 	bl	8009782 <USBD_CtlError>
      return;
 80093b4:	e037      	b.n	8009426 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	7c1b      	ldrb	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10d      	bne.n	80093da <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c6:	f107 020a 	add.w	r2, r7, #10
 80093ca:	4610      	mov	r0, r2
 80093cc:	4798      	blx	r3
 80093ce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3301      	adds	r3, #1
 80093d4:	2207      	movs	r2, #7
 80093d6:	701a      	strb	r2, [r3, #0]
      break;
 80093d8:	e009      	b.n	80093ee <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f9d0 	bl	8009782 <USBD_CtlError>
      return;
 80093e2:	e020      	b.n	8009426 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f9cb 	bl	8009782 <USBD_CtlError>
    return;
 80093ec:	e01b      	b.n	8009426 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80093ee:	897b      	ldrh	r3, [r7, #10]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d011      	beq.n	8009418 <USBD_GetDescriptor+0x1e0>
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	88db      	ldrh	r3, [r3, #6]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00d      	beq.n	8009418 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	88da      	ldrh	r2, [r3, #6]
 8009400:	897b      	ldrh	r3, [r7, #10]
 8009402:	4293      	cmp	r3, r2
 8009404:	bf28      	it	cs
 8009406:	4613      	movcs	r3, r2
 8009408:	b29b      	uxth	r3, r3
 800940a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800940c:	897b      	ldrh	r3, [r7, #10]
 800940e:	461a      	mov	r2, r3
 8009410:	68f9      	ldr	r1, [r7, #12]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fa1f 	bl	8009856 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	88db      	ldrh	r3, [r3, #6]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d102      	bne.n	8009426 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fa76 	bl	8009912 <USBD_CtlSendStatus>
  }
}
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	889b      	ldrh	r3, [r3, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d130      	bne.n	80094a0 <USBD_SetAddress+0x74>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	88db      	ldrh	r3, [r3, #6]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d12c      	bne.n	80094a0 <USBD_SetAddress+0x74>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	885b      	ldrh	r3, [r3, #2]
 800944a:	2b7f      	cmp	r3, #127	; 0x7f
 800944c:	d828      	bhi.n	80094a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	885b      	ldrh	r3, [r3, #2]
 8009452:	b2db      	uxtb	r3, r3
 8009454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009458:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009460:	2b03      	cmp	r3, #3
 8009462:	d104      	bne.n	800946e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f98b 	bl	8009782 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946c:	e01d      	b.n	80094aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	7bfa      	ldrb	r2, [r7, #15]
 8009472:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009476:	7bfb      	ldrb	r3, [r7, #15]
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 feac 	bl	800a1d8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fa46 	bl	8009912 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d004      	beq.n	8009496 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009494:	e009      	b.n	80094aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800949e:	e004      	b.n	80094aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f96d 	bl	8009782 <USBD_CtlError>
  }
}
 80094a8:	bf00      	nop
 80094aa:	bf00      	nop
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	885b      	ldrh	r3, [r3, #2]
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	4b41      	ldr	r3, [pc, #260]	; (80095cc <USBD_SetConfig+0x118>)
 80094c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094c8:	4b40      	ldr	r3, [pc, #256]	; (80095cc <USBD_SetConfig+0x118>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d904      	bls.n	80094da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f955 	bl	8009782 <USBD_CtlError>
 80094d8:	e075      	b.n	80095c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d002      	beq.n	80094ea <USBD_SetConfig+0x36>
 80094e4:	2b03      	cmp	r3, #3
 80094e6:	d023      	beq.n	8009530 <USBD_SetConfig+0x7c>
 80094e8:	e062      	b.n	80095b0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80094ea:	4b38      	ldr	r3, [pc, #224]	; (80095cc <USBD_SetConfig+0x118>)
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d01a      	beq.n	8009528 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80094f2:	4b36      	ldr	r3, [pc, #216]	; (80095cc <USBD_SetConfig+0x118>)
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2203      	movs	r2, #3
 8009500:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009504:	4b31      	ldr	r3, [pc, #196]	; (80095cc <USBD_SetConfig+0x118>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7ff fa5d 	bl	80089ca <USBD_SetClassConfig>
 8009510:	4603      	mov	r3, r0
 8009512:	2b02      	cmp	r3, #2
 8009514:	d104      	bne.n	8009520 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f932 	bl	8009782 <USBD_CtlError>
          return;
 800951e:	e052      	b.n	80095c6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f9f6 	bl	8009912 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009526:	e04e      	b.n	80095c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f9f2 	bl	8009912 <USBD_CtlSendStatus>
      break;
 800952e:	e04a      	b.n	80095c6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009530:	4b26      	ldr	r3, [pc, #152]	; (80095cc <USBD_SetConfig+0x118>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d112      	bne.n	800955e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009540:	4b22      	ldr	r3, [pc, #136]	; (80095cc <USBD_SetConfig+0x118>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	461a      	mov	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800954a:	4b20      	ldr	r3, [pc, #128]	; (80095cc <USBD_SetConfig+0x118>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff fa59 	bl	8008a08 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f9db 	bl	8009912 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800955c:	e033      	b.n	80095c6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800955e:	4b1b      	ldr	r3, [pc, #108]	; (80095cc <USBD_SetConfig+0x118>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	429a      	cmp	r2, r3
 800956a:	d01d      	beq.n	80095a8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	b2db      	uxtb	r3, r3
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff fa47 	bl	8008a08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800957a:	4b14      	ldr	r3, [pc, #80]	; (80095cc <USBD_SetConfig+0x118>)
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009584:	4b11      	ldr	r3, [pc, #68]	; (80095cc <USBD_SetConfig+0x118>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff fa1d 	bl	80089ca <USBD_SetClassConfig>
 8009590:	4603      	mov	r3, r0
 8009592:	2b02      	cmp	r3, #2
 8009594:	d104      	bne.n	80095a0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f8f2 	bl	8009782 <USBD_CtlError>
          return;
 800959e:	e012      	b.n	80095c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f9b6 	bl	8009912 <USBD_CtlSendStatus>
      break;
 80095a6:	e00e      	b.n	80095c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f9b2 	bl	8009912 <USBD_CtlSendStatus>
      break;
 80095ae:	e00a      	b.n	80095c6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f8e5 	bl	8009782 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80095b8:	4b04      	ldr	r3, [pc, #16]	; (80095cc <USBD_SetConfig+0x118>)
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	4619      	mov	r1, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7ff fa22 	bl	8008a08 <USBD_ClrClassConfig>
      break;
 80095c4:	bf00      	nop
    }
  }
}
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	2000038c 	.word	0x2000038c

080095d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	88db      	ldrh	r3, [r3, #6]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d004      	beq.n	80095ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f8cc 	bl	8009782 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80095ea:	e022      	b.n	8009632 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	dc02      	bgt.n	80095fc <USBD_GetConfig+0x2c>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	dc03      	bgt.n	8009602 <USBD_GetConfig+0x32>
 80095fa:	e015      	b.n	8009628 <USBD_GetConfig+0x58>
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d00b      	beq.n	8009618 <USBD_GetConfig+0x48>
 8009600:	e012      	b.n	8009628 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	3308      	adds	r3, #8
 800960c:	2201      	movs	r2, #1
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f920 	bl	8009856 <USBD_CtlSendData>
      break;
 8009616:	e00c      	b.n	8009632 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3304      	adds	r3, #4
 800961c:	2201      	movs	r2, #1
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f918 	bl	8009856 <USBD_CtlSendData>
      break;
 8009626:	e004      	b.n	8009632 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f8a9 	bl	8009782 <USBD_CtlError>
      break;
 8009630:	bf00      	nop
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800964a:	3b01      	subs	r3, #1
 800964c:	2b02      	cmp	r3, #2
 800964e:	d81e      	bhi.n	800968e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	88db      	ldrh	r3, [r3, #6]
 8009654:	2b02      	cmp	r3, #2
 8009656:	d004      	beq.n	8009662 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f891 	bl	8009782 <USBD_CtlError>
      break;
 8009660:	e01a      	b.n	8009698 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800966e:	2b00      	cmp	r3, #0
 8009670:	d005      	beq.n	800967e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f043 0202 	orr.w	r2, r3, #2
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	330c      	adds	r3, #12
 8009682:	2202      	movs	r2, #2
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f8e5 	bl	8009856 <USBD_CtlSendData>
    break;
 800968c:	e004      	b.n	8009698 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f876 	bl	8009782 <USBD_CtlError>
    break;
 8009696:	bf00      	nop
  }
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	885b      	ldrh	r3, [r3, #2]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d106      	bne.n	80096c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f929 	bl	8009912 <USBD_CtlSendStatus>
  }

}
 80096c0:	bf00      	nop
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80096d8:	3b01      	subs	r3, #1
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d80b      	bhi.n	80096f6 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	885b      	ldrh	r3, [r3, #2]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d10c      	bne.n	8009700 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f90f 	bl	8009912 <USBD_CtlSendStatus>
    }
    break;
 80096f4:	e004      	b.n	8009700 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 f842 	bl	8009782 <USBD_CtlError>
    break;
 80096fe:	e000      	b.n	8009702 <USBD_ClrFeature+0x3a>
    break;
 8009700:	bf00      	nop
  }
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781a      	ldrb	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	785a      	ldrb	r2, [r3, #1]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	3302      	adds	r3, #2
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	b29a      	uxth	r2, r3
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	3303      	adds	r3, #3
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	b29b      	uxth	r3, r3
 8009734:	021b      	lsls	r3, r3, #8
 8009736:	b29b      	uxth	r3, r3
 8009738:	4413      	add	r3, r2
 800973a:	b29a      	uxth	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	3304      	adds	r3, #4
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b29a      	uxth	r2, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	3305      	adds	r3, #5
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	021b      	lsls	r3, r3, #8
 8009752:	b29b      	uxth	r3, r3
 8009754:	4413      	add	r3, r2
 8009756:	b29a      	uxth	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	3306      	adds	r3, #6
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	b29a      	uxth	r2, r3
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	3307      	adds	r3, #7
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	b29b      	uxth	r3, r3
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	b29b      	uxth	r3, r3
 8009770:	4413      	add	r3, r2
 8009772:	b29a      	uxth	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	80da      	strh	r2, [r3, #6]

}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	bc80      	pop	{r7}
 8009780:	4770      	bx	lr

08009782 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800978c:	2180      	movs	r1, #128	; 0x80
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fcb8 	bl	800a104 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009794:	2100      	movs	r1, #0
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fcb4 	bl	800a104 <USBD_LL_StallEP>
}
 800979c:	bf00      	nop
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d032      	beq.n	8009820 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f000 f834 	bl	8009828 <USBD_GetLen>
 80097c0:	4603      	mov	r3, r0
 80097c2:	3301      	adds	r3, #1
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	1c5a      	adds	r2, r3, #1
 80097d2:	75fa      	strb	r2, [r7, #23]
 80097d4:	461a      	mov	r2, r3
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	4413      	add	r3, r2
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	7812      	ldrb	r2, [r2, #0]
 80097de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	75fa      	strb	r2, [r7, #23]
 80097e6:	461a      	mov	r2, r3
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	4413      	add	r3, r2
 80097ec:	2203      	movs	r2, #3
 80097ee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80097f0:	e012      	b.n	8009818 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	60fa      	str	r2, [r7, #12]
 80097f8:	7dfa      	ldrb	r2, [r7, #23]
 80097fa:	1c51      	adds	r1, r2, #1
 80097fc:	75f9      	strb	r1, [r7, #23]
 80097fe:	4611      	mov	r1, r2
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	440a      	add	r2, r1
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	75fa      	strb	r2, [r7, #23]
 800980e:	461a      	mov	r2, r3
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4413      	add	r3, r2
 8009814:	2200      	movs	r2, #0
 8009816:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e8      	bne.n	80097f2 <USBD_GetString+0x4e>
    }
  }
}
 8009820:	bf00      	nop
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009834:	e005      	b.n	8009842 <USBD_GetLen+0x1a>
    {
        len++;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	3301      	adds	r3, #1
 800983a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	3301      	adds	r3, #1
 8009840:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1f5      	bne.n	8009836 <USBD_GetLen+0xe>
    }

    return len;
 800984a:	7bfb      	ldrb	r3, [r7, #15]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	bc80      	pop	{r7}
 8009854:	4770      	bx	lr

08009856 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	60f8      	str	r0, [r7, #12]
 800985e:	60b9      	str	r1, [r7, #8]
 8009860:	4613      	mov	r3, r2
 8009862:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2202      	movs	r2, #2
 8009868:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800986c:	88fa      	ldrh	r2, [r7, #6]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009872:	88fa      	ldrh	r2, [r7, #6]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	2100      	movs	r1, #0
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 fcc9 	bl	800a216 <USBD_LL_Transmit>

  return USBD_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	4613      	mov	r3, r2
 800989a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800989c:	88fb      	ldrh	r3, [r7, #6]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	2100      	movs	r1, #0
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 fcb7 	bl	800a216 <USBD_LL_Transmit>

  return USBD_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	4613      	mov	r3, r2
 80098be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2203      	movs	r2, #3
 80098c4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80098c8:	88fa      	ldrh	r2, [r7, #6]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80098d0:	88fa      	ldrh	r2, [r7, #6]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80098d8:	88fb      	ldrh	r3, [r7, #6]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	2100      	movs	r1, #0
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 fcbc 	bl	800a25c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	4613      	mov	r3, r2
 80098fa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098fc:	88fb      	ldrh	r3, [r7, #6]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	2100      	movs	r1, #0
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 fcaa 	bl	800a25c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2204      	movs	r2, #4
 800991e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009922:	2300      	movs	r3, #0
 8009924:	2200      	movs	r2, #0
 8009926:	2100      	movs	r1, #0
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fc74 	bl	800a216 <USBD_LL_Transmit>

  return USBD_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2205      	movs	r2, #5
 8009944:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009948:	2300      	movs	r3, #0
 800994a:	2200      	movs	r2, #0
 800994c:	2100      	movs	r1, #0
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fc84 	bl	800a25c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009964:	2200      	movs	r2, #0
 8009966:	4912      	ldr	r1, [pc, #72]	; (80099b0 <MX_USB_DEVICE_Init+0x50>)
 8009968:	4812      	ldr	r0, [pc, #72]	; (80099b4 <MX_USB_DEVICE_Init+0x54>)
 800996a:	f7fe ffd4 	bl	8008916 <USBD_Init>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009974:	f7f8 fd9c 	bl	80024b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009978:	490f      	ldr	r1, [pc, #60]	; (80099b8 <MX_USB_DEVICE_Init+0x58>)
 800997a:	480e      	ldr	r0, [pc, #56]	; (80099b4 <MX_USB_DEVICE_Init+0x54>)
 800997c:	f7fe fff6 	bl	800896c <USBD_RegisterClass>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009986:	f7f8 fd93 	bl	80024b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800998a:	490c      	ldr	r1, [pc, #48]	; (80099bc <MX_USB_DEVICE_Init+0x5c>)
 800998c:	4809      	ldr	r0, [pc, #36]	; (80099b4 <MX_USB_DEVICE_Init+0x54>)
 800998e:	f7fe ff27 	bl	80087e0 <USBD_CDC_RegisterInterface>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009998:	f7f8 fd8a 	bl	80024b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800999c:	4805      	ldr	r0, [pc, #20]	; (80099b4 <MX_USB_DEVICE_Init+0x54>)
 800999e:	f7fe fffe 	bl	800899e <USBD_Start>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099a8:	f7f8 fd82 	bl	80024b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099ac:	bf00      	nop
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20000144 	.word	0x20000144
 80099b4:	200006d8 	.word	0x200006d8
 80099b8:	20000030 	.word	0x20000030
 80099bc:	20000134 	.word	0x20000134

080099c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099c4:	2200      	movs	r2, #0
 80099c6:	4905      	ldr	r1, [pc, #20]	; (80099dc <CDC_Init_FS+0x1c>)
 80099c8:	4805      	ldr	r0, [pc, #20]	; (80099e0 <CDC_Init_FS+0x20>)
 80099ca:	f7fe ff1f 	bl	800880c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099ce:	4905      	ldr	r1, [pc, #20]	; (80099e4 <CDC_Init_FS+0x24>)
 80099d0:	4803      	ldr	r0, [pc, #12]	; (80099e0 <CDC_Init_FS+0x20>)
 80099d2:	f7fe ff34 	bl	800883e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80099d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80099d8:	4618      	mov	r0, r3
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000d5c 	.word	0x20000d5c
 80099e0:	200006d8 	.word	0x200006d8
 80099e4:	20000974 	.word	0x20000974

080099e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80099ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bc80      	pop	{r7}
 80099f4:	4770      	bx	lr
	...

080099f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
 8009a04:	4613      	mov	r3, r2
 8009a06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	2b23      	cmp	r3, #35	; 0x23
 8009a0c:	d866      	bhi.n	8009adc <CDC_Control_FS+0xe4>
 8009a0e:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <CDC_Control_FS+0x1c>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009add 	.word	0x08009add
 8009a18:	08009add 	.word	0x08009add
 8009a1c:	08009add 	.word	0x08009add
 8009a20:	08009add 	.word	0x08009add
 8009a24:	08009add 	.word	0x08009add
 8009a28:	08009add 	.word	0x08009add
 8009a2c:	08009add 	.word	0x08009add
 8009a30:	08009add 	.word	0x08009add
 8009a34:	08009add 	.word	0x08009add
 8009a38:	08009add 	.word	0x08009add
 8009a3c:	08009add 	.word	0x08009add
 8009a40:	08009add 	.word	0x08009add
 8009a44:	08009add 	.word	0x08009add
 8009a48:	08009add 	.word	0x08009add
 8009a4c:	08009add 	.word	0x08009add
 8009a50:	08009add 	.word	0x08009add
 8009a54:	08009add 	.word	0x08009add
 8009a58:	08009add 	.word	0x08009add
 8009a5c:	08009add 	.word	0x08009add
 8009a60:	08009add 	.word	0x08009add
 8009a64:	08009add 	.word	0x08009add
 8009a68:	08009add 	.word	0x08009add
 8009a6c:	08009add 	.word	0x08009add
 8009a70:	08009add 	.word	0x08009add
 8009a74:	08009add 	.word	0x08009add
 8009a78:	08009add 	.word	0x08009add
 8009a7c:	08009add 	.word	0x08009add
 8009a80:	08009add 	.word	0x08009add
 8009a84:	08009add 	.word	0x08009add
 8009a88:	08009add 	.word	0x08009add
 8009a8c:	08009add 	.word	0x08009add
 8009a90:	08009add 	.word	0x08009add
 8009a94:	08009add 	.word	0x08009add
 8009a98:	08009aa5 	.word	0x08009aa5
 8009a9c:	08009add 	.word	0x08009add
 8009aa0:	08009add 	.word	0x08009add
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2220      	movs	r2, #32
 8009aa8:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	3301      	adds	r3, #1
 8009aae:	22c2      	movs	r2, #194	; 0xc2
 8009ab0:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	3302      	adds	r3, #2
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	3303      	adds	r3, #3
 8009abe:	2200      	movs	r2, #0
 8009ac0:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	3305      	adds	r3, #5
 8009ace:	2200      	movs	r2, #0
 8009ad0:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	3306      	adds	r3, #6
 8009ad6:	2208      	movs	r2, #8
 8009ad8:	701a      	strb	r2, [r3, #0]
    break;
 8009ada:	e000      	b.n	8009ade <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009adc:	bf00      	nop
  }

  return (USBD_OK);
 8009ade:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bc80      	pop	{r7}
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop

08009aec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 8009afa:	e018      	b.n	8009b2e <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4413      	add	r3, r2
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2b0a      	cmp	r3, #10
 8009b06:	d005      	beq.n	8009b14 <CDC_Receive_FS+0x28>
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	2b0d      	cmp	r3, #13
 8009b12:	d102      	bne.n	8009b1a <CDC_Receive_FS+0x2e>
 8009b14:	4b12      	ldr	r3, [pc, #72]	; (8009b60 <CDC_Receive_FS+0x74>)
 8009b16:	2201      	movs	r2, #1
 8009b18:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4413      	add	r3, r2
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7f8 f9e6 	bl	8001ef4 <Write_to_circ_buffer>
	  i++;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d3e1      	bcc.n	8009afc <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f811 	bl	8009b68 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	4806      	ldr	r0, [pc, #24]	; (8009b64 <CDC_Receive_FS+0x78>)
 8009b4a:	f7fe fe78 	bl	800883e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b4e:	4805      	ldr	r0, [pc, #20]	; (8009b64 <CDC_Receive_FS+0x78>)
 8009b50:	f7fe feb7 	bl	80088c2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	2000061b 	.word	0x2000061b
 8009b64:	200006d8 	.word	0x200006d8

08009b68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	460b      	mov	r3, r1
 8009b72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b78:	4b0d      	ldr	r3, [pc, #52]	; (8009bb0 <CDC_Transmit_FS+0x48>)
 8009b7a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009b7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e00b      	b.n	8009ba6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b8e:	887b      	ldrh	r3, [r7, #2]
 8009b90:	461a      	mov	r2, r3
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	4806      	ldr	r0, [pc, #24]	; (8009bb0 <CDC_Transmit_FS+0x48>)
 8009b96:	f7fe fe39 	bl	800880c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b9a:	4805      	ldr	r0, [pc, #20]	; (8009bb0 <CDC_Transmit_FS+0x48>)
 8009b9c:	f7fe fe62 	bl	8008864 <USBD_CDC_TransmitPacket>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	200006d8 	.word	0x200006d8

08009bb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6039      	str	r1, [r7, #0]
 8009bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2212      	movs	r2, #18
 8009bc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009bc6:	4b03      	ldr	r3, [pc, #12]	; (8009bd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bc80      	pop	{r7}
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	20000160 	.word	0x20000160

08009bd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	6039      	str	r1, [r7, #0]
 8009be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2204      	movs	r2, #4
 8009be8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bea:	4b03      	ldr	r3, [pc, #12]	; (8009bf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bc80      	pop	{r7}
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20000174 	.word	0x20000174

08009bfc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	6039      	str	r1, [r7, #0]
 8009c06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c08:	79fb      	ldrb	r3, [r7, #7]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d105      	bne.n	8009c1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4907      	ldr	r1, [pc, #28]	; (8009c30 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c12:	4808      	ldr	r0, [pc, #32]	; (8009c34 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c14:	f7ff fdc6 	bl	80097a4 <USBD_GetString>
 8009c18:	e004      	b.n	8009c24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	4904      	ldr	r1, [pc, #16]	; (8009c30 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c1e:	4805      	ldr	r0, [pc, #20]	; (8009c34 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c20:	f7ff fdc0 	bl	80097a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c24:	4b02      	ldr	r3, [pc, #8]	; (8009c30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	20001144 	.word	0x20001144
 8009c34:	0800d35c 	.word	0x0800d35c

08009c38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	6039      	str	r1, [r7, #0]
 8009c42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	4904      	ldr	r1, [pc, #16]	; (8009c58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c48:	4804      	ldr	r0, [pc, #16]	; (8009c5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c4a:	f7ff fdab 	bl	80097a4 <USBD_GetString>
  return USBD_StrDesc;
 8009c4e:	4b02      	ldr	r3, [pc, #8]	; (8009c58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	20001144 	.word	0x20001144
 8009c5c:	0800d368 	.word	0x0800d368

08009c60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	4603      	mov	r3, r0
 8009c68:	6039      	str	r1, [r7, #0]
 8009c6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	221a      	movs	r2, #26
 8009c70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c72:	f000 f843 	bl	8009cfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c76:	4b02      	ldr	r3, [pc, #8]	; (8009c80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20000178 	.word	0x20000178

08009c84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	6039      	str	r1, [r7, #0]
 8009c8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d105      	bne.n	8009ca2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	4907      	ldr	r1, [pc, #28]	; (8009cb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c9a:	4808      	ldr	r0, [pc, #32]	; (8009cbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c9c:	f7ff fd82 	bl	80097a4 <USBD_GetString>
 8009ca0:	e004      	b.n	8009cac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	4904      	ldr	r1, [pc, #16]	; (8009cb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ca6:	4805      	ldr	r0, [pc, #20]	; (8009cbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ca8:	f7ff fd7c 	bl	80097a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cac:	4b02      	ldr	r3, [pc, #8]	; (8009cb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20001144 	.word	0x20001144
 8009cbc:	0800d378 	.word	0x0800d378

08009cc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	6039      	str	r1, [r7, #0]
 8009cca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ccc:	79fb      	ldrb	r3, [r7, #7]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d105      	bne.n	8009cde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	4907      	ldr	r1, [pc, #28]	; (8009cf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cd6:	4808      	ldr	r0, [pc, #32]	; (8009cf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cd8:	f7ff fd64 	bl	80097a4 <USBD_GetString>
 8009cdc:	e004      	b.n	8009ce8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	4904      	ldr	r1, [pc, #16]	; (8009cf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ce2:	4805      	ldr	r0, [pc, #20]	; (8009cf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ce4:	f7ff fd5e 	bl	80097a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ce8:	4b02      	ldr	r3, [pc, #8]	; (8009cf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20001144 	.word	0x20001144
 8009cf8:	0800d384 	.word	0x0800d384

08009cfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d02:	4b0f      	ldr	r3, [pc, #60]	; (8009d40 <Get_SerialNum+0x44>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d08:	4b0e      	ldr	r3, [pc, #56]	; (8009d44 <Get_SerialNum+0x48>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d0e:	4b0e      	ldr	r3, [pc, #56]	; (8009d48 <Get_SerialNum+0x4c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4413      	add	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d009      	beq.n	8009d36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d22:	2208      	movs	r2, #8
 8009d24:	4909      	ldr	r1, [pc, #36]	; (8009d4c <Get_SerialNum+0x50>)
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 f814 	bl	8009d54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d2c:	2204      	movs	r2, #4
 8009d2e:	4908      	ldr	r1, [pc, #32]	; (8009d50 <Get_SerialNum+0x54>)
 8009d30:	68b8      	ldr	r0, [r7, #8]
 8009d32:	f000 f80f 	bl	8009d54 <IntToUnicode>
  }
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	1ff80050 	.word	0x1ff80050
 8009d44:	1ff80054 	.word	0x1ff80054
 8009d48:	1ff80058 	.word	0x1ff80058
 8009d4c:	2000017a 	.word	0x2000017a
 8009d50:	2000018a 	.word	0x2000018a

08009d54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d66:	2300      	movs	r3, #0
 8009d68:	75fb      	strb	r3, [r7, #23]
 8009d6a:	e027      	b.n	8009dbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	0f1b      	lsrs	r3, r3, #28
 8009d70:	2b09      	cmp	r3, #9
 8009d72:	d80b      	bhi.n	8009d8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	0f1b      	lsrs	r3, r3, #28
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	4619      	mov	r1, r3
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	440b      	add	r3, r1
 8009d84:	3230      	adds	r2, #48	; 0x30
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]
 8009d8a:	e00a      	b.n	8009da2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	0f1b      	lsrs	r3, r3, #28
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	4619      	mov	r1, r3
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	440b      	add	r3, r1
 8009d9c:	3237      	adds	r2, #55	; 0x37
 8009d9e:	b2d2      	uxtb	r2, r2
 8009da0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	011b      	lsls	r3, r3, #4
 8009da6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	3301      	adds	r3, #1
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	4413      	add	r3, r2
 8009db2:	2200      	movs	r2, #0
 8009db4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
 8009db8:	3301      	adds	r3, #1
 8009dba:	75fb      	strb	r3, [r7, #23]
 8009dbc:	7dfa      	ldrb	r2, [r7, #23]
 8009dbe:	79fb      	ldrb	r3, [r7, #7]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d3d3      	bcc.n	8009d6c <IntToUnicode+0x18>
  }
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bc80      	pop	{r7}
 8009dce:	4770      	bx	lr

08009dd0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009ddc:	78fb      	ldrb	r3, [r7, #3]
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d106      	bne.n	8009df0 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009de2:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <HAL_PCDEx_SetConnectionState+0x38>)
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	4a08      	ldr	r2, [pc, #32]	; (8009e08 <HAL_PCDEx_SetConnectionState+0x38>)
 8009de8:	f043 0301 	orr.w	r3, r3, #1
 8009dec:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009dee:	e005      	b.n	8009dfc <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009df0:	4b05      	ldr	r3, [pc, #20]	; (8009e08 <HAL_PCDEx_SetConnectionState+0x38>)
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	4a04      	ldr	r2, [pc, #16]	; (8009e08 <HAL_PCDEx_SetConnectionState+0x38>)
 8009df6:	f023 0301 	bic.w	r3, r3, #1
 8009dfa:	6053      	str	r3, [r2, #4]
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bc80      	pop	{r7}
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	40010000 	.word	0x40010000

08009e0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a0d      	ldr	r2, [pc, #52]	; (8009e50 <HAL_PCD_MspInit+0x44>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d113      	bne.n	8009e46 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009e1e:	4b0d      	ldr	r3, [pc, #52]	; (8009e54 <HAL_PCD_MspInit+0x48>)
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	4a0c      	ldr	r2, [pc, #48]	; (8009e54 <HAL_PCD_MspInit+0x48>)
 8009e24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e28:	6253      	str	r3, [r2, #36]	; 0x24
 8009e2a:	4b0a      	ldr	r3, [pc, #40]	; (8009e54 <HAL_PCD_MspInit+0x48>)
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e32:	60fb      	str	r3, [r7, #12]
 8009e34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009e36:	2200      	movs	r2, #0
 8009e38:	2100      	movs	r1, #0
 8009e3a:	2014      	movs	r0, #20
 8009e3c:	f7f8 fee3 	bl	8002c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009e40:	2014      	movs	r0, #20
 8009e42:	f7f8 fefc 	bl	8002c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e46:	bf00      	nop
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	40005c00 	.word	0x40005c00
 8009e54:	40023800 	.word	0x40023800

08009e58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	f7fe fddd 	bl	8008a2e <USBD_LL_SetupStage>
}
 8009e74:	bf00      	nop
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	460b      	mov	r3, r1
 8009e86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e8e:	78fa      	ldrb	r2, [r7, #3]
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	00db      	lsls	r3, r3, #3
 8009e9a:	440b      	add	r3, r1
 8009e9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	f7fe fe0f 	bl	8008ac8 <USBD_LL_DataOutStage>
}
 8009eaa:	bf00      	nop
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ec4:	78fa      	ldrb	r2, [r7, #3]
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	440b      	add	r3, r1
 8009ed2:	333c      	adds	r3, #60	; 0x3c
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	78fb      	ldrb	r3, [r7, #3]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	f7fe fe66 	bl	8008baa <USBD_LL_DataInStage>
}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fe ff71 	bl	8008ddc <USBD_LL_SOF>
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d001      	beq.n	8009f1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f16:	f7f8 facb 	bl	80024b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f20:	7bfa      	ldrb	r2, [r7, #15]
 8009f22:	4611      	mov	r1, r2
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fe ff26 	bl	8008d76 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fe fedf 	bl	8008cf4 <USBD_LL_Reset>
}
 8009f36:	bf00      	nop
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
	...

08009f40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe ff20 	bl	8008d94 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d005      	beq.n	8009f68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f5c:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <HAL_PCD_SuspendCallback+0x30>)
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	4a03      	ldr	r2, [pc, #12]	; (8009f70 <HAL_PCD_SuspendCallback+0x30>)
 8009f62:	f043 0306 	orr.w	r3, r3, #6
 8009f66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	e000ed00 	.word	0xe000ed00

08009f74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe ff1a 	bl	8008dbc <USBD_LL_Resume>
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f98:	4a28      	ldr	r2, [pc, #160]	; (800a03c <USBD_LL_Init+0xac>)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a26      	ldr	r2, [pc, #152]	; (800a03c <USBD_LL_Init+0xac>)
 8009fa4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009fa8:	4b24      	ldr	r3, [pc, #144]	; (800a03c <USBD_LL_Init+0xac>)
 8009faa:	4a25      	ldr	r2, [pc, #148]	; (800a040 <USBD_LL_Init+0xb0>)
 8009fac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009fae:	4b23      	ldr	r3, [pc, #140]	; (800a03c <USBD_LL_Init+0xac>)
 8009fb0:	2208      	movs	r2, #8
 8009fb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009fb4:	4b21      	ldr	r3, [pc, #132]	; (800a03c <USBD_LL_Init+0xac>)
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fba:	4b20      	ldr	r3, [pc, #128]	; (800a03c <USBD_LL_Init+0xac>)
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009fc0:	4b1e      	ldr	r3, [pc, #120]	; (800a03c <USBD_LL_Init+0xac>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009fc6:	4b1d      	ldr	r3, [pc, #116]	; (800a03c <USBD_LL_Init+0xac>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009fcc:	481b      	ldr	r0, [pc, #108]	; (800a03c <USBD_LL_Init+0xac>)
 8009fce:	f7f9 f819 	bl	8003004 <HAL_PCD_Init>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009fd8:	f7f8 fa6a 	bl	80024b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fe2:	2318      	movs	r3, #24
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	f7fa fbf6 	bl	80047d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009ff2:	2358      	movs	r3, #88	; 0x58
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2180      	movs	r1, #128	; 0x80
 8009ff8:	f7fa fbee 	bl	80047d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a002:	23c0      	movs	r3, #192	; 0xc0
 800a004:	2200      	movs	r2, #0
 800a006:	2181      	movs	r1, #129	; 0x81
 800a008:	f7fa fbe6 	bl	80047d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a012:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a016:	2200      	movs	r2, #0
 800a018:	2101      	movs	r1, #1
 800a01a:	f7fa fbdd 	bl	80047d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a024:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a028:	2200      	movs	r2, #0
 800a02a:	2182      	movs	r1, #130	; 0x82
 800a02c:	f7fa fbd4 	bl	80047d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	20001344 	.word	0x20001344
 800a040:	40005c00 	.word	0x40005c00

0800a044 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7f9 f8b0 	bl	80031c0 <HAL_PCD_Start>
 800a060:	4603      	mov	r3, r0
 800a062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a064:	7bfb      	ldrb	r3, [r7, #15]
 800a066:	4618      	mov	r0, r3
 800a068:	f000 f944 	bl	800a2f4 <USBD_Get_USB_Status>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a070:	7bbb      	ldrb	r3, [r7, #14]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	4608      	mov	r0, r1
 800a084:	4611      	mov	r1, r2
 800a086:	461a      	mov	r2, r3
 800a088:	4603      	mov	r3, r0
 800a08a:	70fb      	strb	r3, [r7, #3]
 800a08c:	460b      	mov	r3, r1
 800a08e:	70bb      	strb	r3, [r7, #2]
 800a090:	4613      	mov	r3, r2
 800a092:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a0a2:	78bb      	ldrb	r3, [r7, #2]
 800a0a4:	883a      	ldrh	r2, [r7, #0]
 800a0a6:	78f9      	ldrb	r1, [r7, #3]
 800a0a8:	f7f9 f9cc 	bl	8003444 <HAL_PCD_EP_Open>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 f91e 	bl	800a2f4 <USBD_Get_USB_Status>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a0e0:	78fa      	ldrb	r2, [r7, #3]
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7f9 fa13 	bl	8003510 <HAL_PCD_EP_Close>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 f8ff 	bl	800a2f4 <USBD_Get_USB_Status>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a11e:	78fa      	ldrb	r2, [r7, #3]
 800a120:	4611      	mov	r1, r2
 800a122:	4618      	mov	r0, r3
 800a124:	f7f9 fad3 	bl	80036ce <HAL_PCD_EP_SetStall>
 800a128:	4603      	mov	r3, r0
 800a12a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 f8e0 	bl	800a2f4 <USBD_Get_USB_Status>
 800a134:	4603      	mov	r3, r0
 800a136:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a138:	7bbb      	ldrb	r3, [r7, #14]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	460b      	mov	r3, r1
 800a14c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a15c:	78fa      	ldrb	r2, [r7, #3]
 800a15e:	4611      	mov	r1, r2
 800a160:	4618      	mov	r0, r3
 800a162:	f7f9 fb06 	bl	8003772 <HAL_PCD_EP_ClrStall>
 800a166:	4603      	mov	r3, r0
 800a168:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 f8c1 	bl	800a2f4 <USBD_Get_USB_Status>
 800a172:	4603      	mov	r3, r0
 800a174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a176:	7bbb      	ldrb	r3, [r7, #14]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	460b      	mov	r3, r1
 800a18a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a192:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	da0c      	bge.n	800a1b6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1a2:	68f9      	ldr	r1, [r7, #12]
 800a1a4:	1c5a      	adds	r2, r3, #1
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	4413      	add	r3, r2
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	440b      	add	r3, r1
 800a1b0:	3302      	adds	r3, #2
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	e00b      	b.n	800a1ce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1b6:	78fb      	ldrb	r3, [r7, #3]
 800a1b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1bc:	68f9      	ldr	r1, [r7, #12]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	00db      	lsls	r3, r3, #3
 800a1c6:	440b      	add	r3, r1
 800a1c8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a1cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bc80      	pop	{r7}
 800a1d6:	4770      	bx	lr

0800a1d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a1f2:	78fa      	ldrb	r2, [r7, #3]
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7f9 f8ff 	bl	80033fa <HAL_PCD_SetAddress>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a200:	7bfb      	ldrb	r3, [r7, #15]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 f876 	bl	800a2f4 <USBD_Get_USB_Status>
 800a208:	4603      	mov	r3, r0
 800a20a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a20c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b086      	sub	sp, #24
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	607a      	str	r2, [r7, #4]
 800a220:	461a      	mov	r2, r3
 800a222:	460b      	mov	r3, r1
 800a224:	72fb      	strb	r3, [r7, #11]
 800a226:	4613      	mov	r3, r2
 800a228:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a238:	893b      	ldrh	r3, [r7, #8]
 800a23a:	7af9      	ldrb	r1, [r7, #11]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	f7f9 fa03 	bl	8003648 <HAL_PCD_EP_Transmit>
 800a242:	4603      	mov	r3, r0
 800a244:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a246:	7dfb      	ldrb	r3, [r7, #23]
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 f853 	bl	800a2f4 <USBD_Get_USB_Status>
 800a24e:	4603      	mov	r3, r0
 800a250:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a252:	7dbb      	ldrb	r3, [r7, #22]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	607a      	str	r2, [r7, #4]
 800a266:	461a      	mov	r2, r3
 800a268:	460b      	mov	r3, r1
 800a26a:	72fb      	strb	r3, [r7, #11]
 800a26c:	4613      	mov	r3, r2
 800a26e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a27e:	893b      	ldrh	r3, [r7, #8]
 800a280:	7af9      	ldrb	r1, [r7, #11]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	f7f9 f98c 	bl	80035a0 <HAL_PCD_EP_Receive>
 800a288:	4603      	mov	r3, r0
 800a28a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 f830 	bl	800a2f4 <USBD_Get_USB_Status>
 800a294:	4603      	mov	r3, r0
 800a296:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a298:	7dbb      	ldrb	r3, [r7, #22]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a2b4:	78fa      	ldrb	r2, [r7, #3]
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7f9 f9ae 	bl	800361a <HAL_PCD_EP_GetRxCount>
 800a2be:	4603      	mov	r3, r0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a2d0:	4b02      	ldr	r3, [pc, #8]	; (800a2dc <USBD_static_malloc+0x14>)
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bc80      	pop	{r7}
 800a2da:	4770      	bx	lr
 800a2dc:	20000390 	.word	0x20000390

0800a2e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]

}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bc80      	pop	{r7}
 800a2f0:	4770      	bx	lr
	...

0800a2f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a302:	79fb      	ldrb	r3, [r7, #7]
 800a304:	2b03      	cmp	r3, #3
 800a306:	d817      	bhi.n	800a338 <USBD_Get_USB_Status+0x44>
 800a308:	a201      	add	r2, pc, #4	; (adr r2, 800a310 <USBD_Get_USB_Status+0x1c>)
 800a30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30e:	bf00      	nop
 800a310:	0800a321 	.word	0x0800a321
 800a314:	0800a327 	.word	0x0800a327
 800a318:	0800a32d 	.word	0x0800a32d
 800a31c:	0800a333 	.word	0x0800a333
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]
    break;
 800a324:	e00b      	b.n	800a33e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a326:	2302      	movs	r3, #2
 800a328:	73fb      	strb	r3, [r7, #15]
    break;
 800a32a:	e008      	b.n	800a33e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a32c:	2301      	movs	r3, #1
 800a32e:	73fb      	strb	r3, [r7, #15]
    break;
 800a330:	e005      	b.n	800a33e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a332:	2302      	movs	r3, #2
 800a334:	73fb      	strb	r3, [r7, #15]
    break;
 800a336:	e002      	b.n	800a33e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a338:	2302      	movs	r3, #2
 800a33a:	73fb      	strb	r3, [r7, #15]
    break;
 800a33c:	bf00      	nop
  }
  return usb_status;
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	bc80      	pop	{r7}
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop

0800a34c <atof>:
 800a34c:	2100      	movs	r1, #0
 800a34e:	f000 be5f 	b.w	800b010 <strtod>
	...

0800a354 <__errno>:
 800a354:	4b01      	ldr	r3, [pc, #4]	; (800a35c <__errno+0x8>)
 800a356:	6818      	ldr	r0, [r3, #0]
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	20000194 	.word	0x20000194

0800a360 <__libc_init_array>:
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	2600      	movs	r6, #0
 800a364:	4d0c      	ldr	r5, [pc, #48]	; (800a398 <__libc_init_array+0x38>)
 800a366:	4c0d      	ldr	r4, [pc, #52]	; (800a39c <__libc_init_array+0x3c>)
 800a368:	1b64      	subs	r4, r4, r5
 800a36a:	10a4      	asrs	r4, r4, #2
 800a36c:	42a6      	cmp	r6, r4
 800a36e:	d109      	bne.n	800a384 <__libc_init_array+0x24>
 800a370:	f002 fee6 	bl	800d140 <_init>
 800a374:	2600      	movs	r6, #0
 800a376:	4d0a      	ldr	r5, [pc, #40]	; (800a3a0 <__libc_init_array+0x40>)
 800a378:	4c0a      	ldr	r4, [pc, #40]	; (800a3a4 <__libc_init_array+0x44>)
 800a37a:	1b64      	subs	r4, r4, r5
 800a37c:	10a4      	asrs	r4, r4, #2
 800a37e:	42a6      	cmp	r6, r4
 800a380:	d105      	bne.n	800a38e <__libc_init_array+0x2e>
 800a382:	bd70      	pop	{r4, r5, r6, pc}
 800a384:	f855 3b04 	ldr.w	r3, [r5], #4
 800a388:	4798      	blx	r3
 800a38a:	3601      	adds	r6, #1
 800a38c:	e7ee      	b.n	800a36c <__libc_init_array+0xc>
 800a38e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a392:	4798      	blx	r3
 800a394:	3601      	adds	r6, #1
 800a396:	e7f2      	b.n	800a37e <__libc_init_array+0x1e>
 800a398:	0800d850 	.word	0x0800d850
 800a39c:	0800d850 	.word	0x0800d850
 800a3a0:	0800d850 	.word	0x0800d850
 800a3a4:	0800d854 	.word	0x0800d854

0800a3a8 <memcpy>:
 800a3a8:	440a      	add	r2, r1
 800a3aa:	4291      	cmp	r1, r2
 800a3ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3b0:	d100      	bne.n	800a3b4 <memcpy+0xc>
 800a3b2:	4770      	bx	lr
 800a3b4:	b510      	push	{r4, lr}
 800a3b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ba:	4291      	cmp	r1, r2
 800a3bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3c0:	d1f9      	bne.n	800a3b6 <memcpy+0xe>
 800a3c2:	bd10      	pop	{r4, pc}

0800a3c4 <memset>:
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	4402      	add	r2, r0
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d100      	bne.n	800a3ce <memset+0xa>
 800a3cc:	4770      	bx	lr
 800a3ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a3d2:	e7f9      	b.n	800a3c8 <memset+0x4>

0800a3d4 <strcpy>:
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3da:	f803 2b01 	strb.w	r2, [r3], #1
 800a3de:	2a00      	cmp	r2, #0
 800a3e0:	d1f9      	bne.n	800a3d6 <strcpy+0x2>
 800a3e2:	4770      	bx	lr

0800a3e4 <sulp>:
 800a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e8:	460f      	mov	r7, r1
 800a3ea:	4690      	mov	r8, r2
 800a3ec:	f001 fd98 	bl	800bf20 <__ulp>
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	f1b8 0f00 	cmp.w	r8, #0
 800a3f8:	d011      	beq.n	800a41e <sulp+0x3a>
 800a3fa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a3fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a402:	2b00      	cmp	r3, #0
 800a404:	dd0b      	ble.n	800a41e <sulp+0x3a>
 800a406:	2400      	movs	r4, #0
 800a408:	051b      	lsls	r3, r3, #20
 800a40a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a40e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a412:	4622      	mov	r2, r4
 800a414:	462b      	mov	r3, r5
 800a416:	f7f6 f881 	bl	800051c <__aeabi_dmul>
 800a41a:	4604      	mov	r4, r0
 800a41c:	460d      	mov	r5, r1
 800a41e:	4620      	mov	r0, r4
 800a420:	4629      	mov	r1, r5
 800a422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a428 <_strtod_l>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	469b      	mov	fp, r3
 800a42e:	2300      	movs	r3, #0
 800a430:	b0a1      	sub	sp, #132	; 0x84
 800a432:	931c      	str	r3, [sp, #112]	; 0x70
 800a434:	4ba1      	ldr	r3, [pc, #644]	; (800a6bc <_strtod_l+0x294>)
 800a436:	4682      	mov	sl, r0
 800a438:	681f      	ldr	r7, [r3, #0]
 800a43a:	460e      	mov	r6, r1
 800a43c:	4638      	mov	r0, r7
 800a43e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a440:	f7f5 fea8 	bl	8000194 <strlen>
 800a444:	f04f 0800 	mov.w	r8, #0
 800a448:	4604      	mov	r4, r0
 800a44a:	f04f 0900 	mov.w	r9, #0
 800a44e:	961b      	str	r6, [sp, #108]	; 0x6c
 800a450:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a452:	781a      	ldrb	r2, [r3, #0]
 800a454:	2a2b      	cmp	r2, #43	; 0x2b
 800a456:	d04c      	beq.n	800a4f2 <_strtod_l+0xca>
 800a458:	d83a      	bhi.n	800a4d0 <_strtod_l+0xa8>
 800a45a:	2a0d      	cmp	r2, #13
 800a45c:	d833      	bhi.n	800a4c6 <_strtod_l+0x9e>
 800a45e:	2a08      	cmp	r2, #8
 800a460:	d833      	bhi.n	800a4ca <_strtod_l+0xa2>
 800a462:	2a00      	cmp	r2, #0
 800a464:	d03d      	beq.n	800a4e2 <_strtod_l+0xba>
 800a466:	2300      	movs	r3, #0
 800a468:	930c      	str	r3, [sp, #48]	; 0x30
 800a46a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a46c:	782b      	ldrb	r3, [r5, #0]
 800a46e:	2b30      	cmp	r3, #48	; 0x30
 800a470:	f040 80af 	bne.w	800a5d2 <_strtod_l+0x1aa>
 800a474:	786b      	ldrb	r3, [r5, #1]
 800a476:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a47a:	2b58      	cmp	r3, #88	; 0x58
 800a47c:	d16c      	bne.n	800a558 <_strtod_l+0x130>
 800a47e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a480:	4650      	mov	r0, sl
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	ab1c      	add	r3, sp, #112	; 0x70
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	4a8d      	ldr	r2, [pc, #564]	; (800a6c0 <_strtod_l+0x298>)
 800a48a:	f8cd b008 	str.w	fp, [sp, #8]
 800a48e:	ab1d      	add	r3, sp, #116	; 0x74
 800a490:	a91b      	add	r1, sp, #108	; 0x6c
 800a492:	f000 febd 	bl	800b210 <__gethex>
 800a496:	f010 0607 	ands.w	r6, r0, #7
 800a49a:	4604      	mov	r4, r0
 800a49c:	d005      	beq.n	800a4aa <_strtod_l+0x82>
 800a49e:	2e06      	cmp	r6, #6
 800a4a0:	d129      	bne.n	800a4f6 <_strtod_l+0xce>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	3501      	adds	r5, #1
 800a4a6:	951b      	str	r5, [sp, #108]	; 0x6c
 800a4a8:	930c      	str	r3, [sp, #48]	; 0x30
 800a4aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f040 8596 	bne.w	800afde <_strtod_l+0xbb6>
 800a4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4b4:	b1d3      	cbz	r3, 800a4ec <_strtod_l+0xc4>
 800a4b6:	4642      	mov	r2, r8
 800a4b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a4bc:	4610      	mov	r0, r2
 800a4be:	4619      	mov	r1, r3
 800a4c0:	b021      	add	sp, #132	; 0x84
 800a4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c6:	2a20      	cmp	r2, #32
 800a4c8:	d1cd      	bne.n	800a466 <_strtod_l+0x3e>
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	931b      	str	r3, [sp, #108]	; 0x6c
 800a4ce:	e7bf      	b.n	800a450 <_strtod_l+0x28>
 800a4d0:	2a2d      	cmp	r2, #45	; 0x2d
 800a4d2:	d1c8      	bne.n	800a466 <_strtod_l+0x3e>
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	920c      	str	r2, [sp, #48]	; 0x30
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	921b      	str	r2, [sp, #108]	; 0x6c
 800a4dc:	785b      	ldrb	r3, [r3, #1]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1c3      	bne.n	800a46a <_strtod_l+0x42>
 800a4e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4e4:	961b      	str	r6, [sp, #108]	; 0x6c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f040 8577 	bne.w	800afda <_strtod_l+0xbb2>
 800a4ec:	4642      	mov	r2, r8
 800a4ee:	464b      	mov	r3, r9
 800a4f0:	e7e4      	b.n	800a4bc <_strtod_l+0x94>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	e7ef      	b.n	800a4d6 <_strtod_l+0xae>
 800a4f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a4f8:	b13a      	cbz	r2, 800a50a <_strtod_l+0xe2>
 800a4fa:	2135      	movs	r1, #53	; 0x35
 800a4fc:	a81e      	add	r0, sp, #120	; 0x78
 800a4fe:	f001 fe13 	bl	800c128 <__copybits>
 800a502:	4650      	mov	r0, sl
 800a504:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a506:	f001 f9db 	bl	800b8c0 <_Bfree>
 800a50a:	3e01      	subs	r6, #1
 800a50c:	2e05      	cmp	r6, #5
 800a50e:	d807      	bhi.n	800a520 <_strtod_l+0xf8>
 800a510:	e8df f006 	tbb	[pc, r6]
 800a514:	1d180b0e 	.word	0x1d180b0e
 800a518:	030e      	.short	0x030e
 800a51a:	f04f 0900 	mov.w	r9, #0
 800a51e:	46c8      	mov	r8, r9
 800a520:	0721      	lsls	r1, r4, #28
 800a522:	d5c2      	bpl.n	800a4aa <_strtod_l+0x82>
 800a524:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a528:	e7bf      	b.n	800a4aa <_strtod_l+0x82>
 800a52a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800a52e:	e7f7      	b.n	800a520 <_strtod_l+0xf8>
 800a530:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a532:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800a536:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a53a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a53e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a542:	e7ed      	b.n	800a520 <_strtod_l+0xf8>
 800a544:	f04f 0800 	mov.w	r8, #0
 800a548:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a6c4 <_strtod_l+0x29c>
 800a54c:	e7e8      	b.n	800a520 <_strtod_l+0xf8>
 800a54e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a552:	f04f 38ff 	mov.w	r8, #4294967295
 800a556:	e7e3      	b.n	800a520 <_strtod_l+0xf8>
 800a558:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a55a:	1c5a      	adds	r2, r3, #1
 800a55c:	921b      	str	r2, [sp, #108]	; 0x6c
 800a55e:	785b      	ldrb	r3, [r3, #1]
 800a560:	2b30      	cmp	r3, #48	; 0x30
 800a562:	d0f9      	beq.n	800a558 <_strtod_l+0x130>
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0a0      	beq.n	800a4aa <_strtod_l+0x82>
 800a568:	2301      	movs	r3, #1
 800a56a:	9307      	str	r3, [sp, #28]
 800a56c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a56e:	220a      	movs	r2, #10
 800a570:	9308      	str	r3, [sp, #32]
 800a572:	2300      	movs	r3, #0
 800a574:	469b      	mov	fp, r3
 800a576:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a57a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a57c:	7805      	ldrb	r5, [r0, #0]
 800a57e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a582:	b2d9      	uxtb	r1, r3
 800a584:	2909      	cmp	r1, #9
 800a586:	d926      	bls.n	800a5d6 <_strtod_l+0x1ae>
 800a588:	4622      	mov	r2, r4
 800a58a:	4639      	mov	r1, r7
 800a58c:	f002 f9c8 	bl	800c920 <strncmp>
 800a590:	2800      	cmp	r0, #0
 800a592:	d032      	beq.n	800a5fa <_strtod_l+0x1d2>
 800a594:	2000      	movs	r0, #0
 800a596:	462b      	mov	r3, r5
 800a598:	465c      	mov	r4, fp
 800a59a:	4602      	mov	r2, r0
 800a59c:	9004      	str	r0, [sp, #16]
 800a59e:	2b65      	cmp	r3, #101	; 0x65
 800a5a0:	d001      	beq.n	800a5a6 <_strtod_l+0x17e>
 800a5a2:	2b45      	cmp	r3, #69	; 0x45
 800a5a4:	d113      	bne.n	800a5ce <_strtod_l+0x1a6>
 800a5a6:	b91c      	cbnz	r4, 800a5b0 <_strtod_l+0x188>
 800a5a8:	9b07      	ldr	r3, [sp, #28]
 800a5aa:	4303      	orrs	r3, r0
 800a5ac:	d099      	beq.n	800a4e2 <_strtod_l+0xba>
 800a5ae:	2400      	movs	r4, #0
 800a5b0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a5b2:	1c73      	adds	r3, r6, #1
 800a5b4:	931b      	str	r3, [sp, #108]	; 0x6c
 800a5b6:	7873      	ldrb	r3, [r6, #1]
 800a5b8:	2b2b      	cmp	r3, #43	; 0x2b
 800a5ba:	d078      	beq.n	800a6ae <_strtod_l+0x286>
 800a5bc:	2b2d      	cmp	r3, #45	; 0x2d
 800a5be:	d07b      	beq.n	800a6b8 <_strtod_l+0x290>
 800a5c0:	2700      	movs	r7, #0
 800a5c2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a5c6:	2909      	cmp	r1, #9
 800a5c8:	f240 8082 	bls.w	800a6d0 <_strtod_l+0x2a8>
 800a5cc:	961b      	str	r6, [sp, #108]	; 0x6c
 800a5ce:	2500      	movs	r5, #0
 800a5d0:	e09e      	b.n	800a710 <_strtod_l+0x2e8>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e7c9      	b.n	800a56a <_strtod_l+0x142>
 800a5d6:	f1bb 0f08 	cmp.w	fp, #8
 800a5da:	bfd5      	itete	le
 800a5dc:	9906      	ldrle	r1, [sp, #24]
 800a5de:	9905      	ldrgt	r1, [sp, #20]
 800a5e0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a5e8:	f100 0001 	add.w	r0, r0, #1
 800a5ec:	bfd4      	ite	le
 800a5ee:	9306      	strle	r3, [sp, #24]
 800a5f0:	9305      	strgt	r3, [sp, #20]
 800a5f2:	f10b 0b01 	add.w	fp, fp, #1
 800a5f6:	901b      	str	r0, [sp, #108]	; 0x6c
 800a5f8:	e7bf      	b.n	800a57a <_strtod_l+0x152>
 800a5fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5fc:	191a      	adds	r2, r3, r4
 800a5fe:	921b      	str	r2, [sp, #108]	; 0x6c
 800a600:	5d1b      	ldrb	r3, [r3, r4]
 800a602:	f1bb 0f00 	cmp.w	fp, #0
 800a606:	d036      	beq.n	800a676 <_strtod_l+0x24e>
 800a608:	465c      	mov	r4, fp
 800a60a:	9004      	str	r0, [sp, #16]
 800a60c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a610:	2a09      	cmp	r2, #9
 800a612:	d912      	bls.n	800a63a <_strtod_l+0x212>
 800a614:	2201      	movs	r2, #1
 800a616:	e7c2      	b.n	800a59e <_strtod_l+0x176>
 800a618:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a61a:	3001      	adds	r0, #1
 800a61c:	1c5a      	adds	r2, r3, #1
 800a61e:	921b      	str	r2, [sp, #108]	; 0x6c
 800a620:	785b      	ldrb	r3, [r3, #1]
 800a622:	2b30      	cmp	r3, #48	; 0x30
 800a624:	d0f8      	beq.n	800a618 <_strtod_l+0x1f0>
 800a626:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a62a:	2a08      	cmp	r2, #8
 800a62c:	f200 84dc 	bhi.w	800afe8 <_strtod_l+0xbc0>
 800a630:	9004      	str	r0, [sp, #16]
 800a632:	2000      	movs	r0, #0
 800a634:	4604      	mov	r4, r0
 800a636:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a638:	9208      	str	r2, [sp, #32]
 800a63a:	3b30      	subs	r3, #48	; 0x30
 800a63c:	f100 0201 	add.w	r2, r0, #1
 800a640:	d013      	beq.n	800a66a <_strtod_l+0x242>
 800a642:	9904      	ldr	r1, [sp, #16]
 800a644:	1905      	adds	r5, r0, r4
 800a646:	4411      	add	r1, r2
 800a648:	9104      	str	r1, [sp, #16]
 800a64a:	4622      	mov	r2, r4
 800a64c:	210a      	movs	r1, #10
 800a64e:	42aa      	cmp	r2, r5
 800a650:	d113      	bne.n	800a67a <_strtod_l+0x252>
 800a652:	1822      	adds	r2, r4, r0
 800a654:	2a08      	cmp	r2, #8
 800a656:	f104 0401 	add.w	r4, r4, #1
 800a65a:	4404      	add	r4, r0
 800a65c:	dc1b      	bgt.n	800a696 <_strtod_l+0x26e>
 800a65e:	220a      	movs	r2, #10
 800a660:	9906      	ldr	r1, [sp, #24]
 800a662:	fb02 3301 	mla	r3, r2, r1, r3
 800a666:	9306      	str	r3, [sp, #24]
 800a668:	2200      	movs	r2, #0
 800a66a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a66c:	4610      	mov	r0, r2
 800a66e:	1c59      	adds	r1, r3, #1
 800a670:	911b      	str	r1, [sp, #108]	; 0x6c
 800a672:	785b      	ldrb	r3, [r3, #1]
 800a674:	e7ca      	b.n	800a60c <_strtod_l+0x1e4>
 800a676:	4658      	mov	r0, fp
 800a678:	e7d3      	b.n	800a622 <_strtod_l+0x1fa>
 800a67a:	2a08      	cmp	r2, #8
 800a67c:	dc04      	bgt.n	800a688 <_strtod_l+0x260>
 800a67e:	9f06      	ldr	r7, [sp, #24]
 800a680:	434f      	muls	r7, r1
 800a682:	9706      	str	r7, [sp, #24]
 800a684:	3201      	adds	r2, #1
 800a686:	e7e2      	b.n	800a64e <_strtod_l+0x226>
 800a688:	1c57      	adds	r7, r2, #1
 800a68a:	2f10      	cmp	r7, #16
 800a68c:	bfde      	ittt	le
 800a68e:	9f05      	ldrle	r7, [sp, #20]
 800a690:	434f      	mulle	r7, r1
 800a692:	9705      	strle	r7, [sp, #20]
 800a694:	e7f6      	b.n	800a684 <_strtod_l+0x25c>
 800a696:	2c10      	cmp	r4, #16
 800a698:	bfdf      	itttt	le
 800a69a:	220a      	movle	r2, #10
 800a69c:	9905      	ldrle	r1, [sp, #20]
 800a69e:	fb02 3301 	mlale	r3, r2, r1, r3
 800a6a2:	9305      	strle	r3, [sp, #20]
 800a6a4:	e7e0      	b.n	800a668 <_strtod_l+0x240>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	9304      	str	r3, [sp, #16]
 800a6ac:	e77c      	b.n	800a5a8 <_strtod_l+0x180>
 800a6ae:	2700      	movs	r7, #0
 800a6b0:	1cb3      	adds	r3, r6, #2
 800a6b2:	931b      	str	r3, [sp, #108]	; 0x6c
 800a6b4:	78b3      	ldrb	r3, [r6, #2]
 800a6b6:	e784      	b.n	800a5c2 <_strtod_l+0x19a>
 800a6b8:	2701      	movs	r7, #1
 800a6ba:	e7f9      	b.n	800a6b0 <_strtod_l+0x288>
 800a6bc:	0800d540 	.word	0x0800d540
 800a6c0:	0800d3c0 	.word	0x0800d3c0
 800a6c4:	7ff00000 	.word	0x7ff00000
 800a6c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6ca:	1c59      	adds	r1, r3, #1
 800a6cc:	911b      	str	r1, [sp, #108]	; 0x6c
 800a6ce:	785b      	ldrb	r3, [r3, #1]
 800a6d0:	2b30      	cmp	r3, #48	; 0x30
 800a6d2:	d0f9      	beq.n	800a6c8 <_strtod_l+0x2a0>
 800a6d4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a6d8:	2908      	cmp	r1, #8
 800a6da:	f63f af78 	bhi.w	800a5ce <_strtod_l+0x1a6>
 800a6de:	f04f 0e0a 	mov.w	lr, #10
 800a6e2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800a6e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6ec:	1c59      	adds	r1, r3, #1
 800a6ee:	911b      	str	r1, [sp, #108]	; 0x6c
 800a6f0:	785b      	ldrb	r3, [r3, #1]
 800a6f2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800a6f6:	2d09      	cmp	r5, #9
 800a6f8:	d935      	bls.n	800a766 <_strtod_l+0x33e>
 800a6fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a6fc:	1b49      	subs	r1, r1, r5
 800a6fe:	2908      	cmp	r1, #8
 800a700:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a704:	dc02      	bgt.n	800a70c <_strtod_l+0x2e4>
 800a706:	4565      	cmp	r5, ip
 800a708:	bfa8      	it	ge
 800a70a:	4665      	movge	r5, ip
 800a70c:	b107      	cbz	r7, 800a710 <_strtod_l+0x2e8>
 800a70e:	426d      	negs	r5, r5
 800a710:	2c00      	cmp	r4, #0
 800a712:	d14c      	bne.n	800a7ae <_strtod_l+0x386>
 800a714:	9907      	ldr	r1, [sp, #28]
 800a716:	4301      	orrs	r1, r0
 800a718:	f47f aec7 	bne.w	800a4aa <_strtod_l+0x82>
 800a71c:	2a00      	cmp	r2, #0
 800a71e:	f47f aee0 	bne.w	800a4e2 <_strtod_l+0xba>
 800a722:	2b69      	cmp	r3, #105	; 0x69
 800a724:	d026      	beq.n	800a774 <_strtod_l+0x34c>
 800a726:	dc23      	bgt.n	800a770 <_strtod_l+0x348>
 800a728:	2b49      	cmp	r3, #73	; 0x49
 800a72a:	d023      	beq.n	800a774 <_strtod_l+0x34c>
 800a72c:	2b4e      	cmp	r3, #78	; 0x4e
 800a72e:	f47f aed8 	bne.w	800a4e2 <_strtod_l+0xba>
 800a732:	499c      	ldr	r1, [pc, #624]	; (800a9a4 <_strtod_l+0x57c>)
 800a734:	a81b      	add	r0, sp, #108	; 0x6c
 800a736:	f000 ffb9 	bl	800b6ac <__match>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	f43f aed1 	beq.w	800a4e2 <_strtod_l+0xba>
 800a740:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b28      	cmp	r3, #40	; 0x28
 800a746:	d12c      	bne.n	800a7a2 <_strtod_l+0x37a>
 800a748:	4997      	ldr	r1, [pc, #604]	; (800a9a8 <_strtod_l+0x580>)
 800a74a:	aa1e      	add	r2, sp, #120	; 0x78
 800a74c:	a81b      	add	r0, sp, #108	; 0x6c
 800a74e:	f000 ffc1 	bl	800b6d4 <__hexnan>
 800a752:	2805      	cmp	r0, #5
 800a754:	d125      	bne.n	800a7a2 <_strtod_l+0x37a>
 800a756:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a758:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a75c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a760:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a764:	e6a1      	b.n	800a4aa <_strtod_l+0x82>
 800a766:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800a76a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a76e:	e7bc      	b.n	800a6ea <_strtod_l+0x2c2>
 800a770:	2b6e      	cmp	r3, #110	; 0x6e
 800a772:	e7dc      	b.n	800a72e <_strtod_l+0x306>
 800a774:	498d      	ldr	r1, [pc, #564]	; (800a9ac <_strtod_l+0x584>)
 800a776:	a81b      	add	r0, sp, #108	; 0x6c
 800a778:	f000 ff98 	bl	800b6ac <__match>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	f43f aeb0 	beq.w	800a4e2 <_strtod_l+0xba>
 800a782:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a784:	498a      	ldr	r1, [pc, #552]	; (800a9b0 <_strtod_l+0x588>)
 800a786:	3b01      	subs	r3, #1
 800a788:	a81b      	add	r0, sp, #108	; 0x6c
 800a78a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a78c:	f000 ff8e 	bl	800b6ac <__match>
 800a790:	b910      	cbnz	r0, 800a798 <_strtod_l+0x370>
 800a792:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a794:	3301      	adds	r3, #1
 800a796:	931b      	str	r3, [sp, #108]	; 0x6c
 800a798:	f04f 0800 	mov.w	r8, #0
 800a79c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800a9c0 <_strtod_l+0x598>
 800a7a0:	e683      	b.n	800a4aa <_strtod_l+0x82>
 800a7a2:	4884      	ldr	r0, [pc, #528]	; (800a9b4 <_strtod_l+0x58c>)
 800a7a4:	f002 f8a6 	bl	800c8f4 <nan>
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	4689      	mov	r9, r1
 800a7ac:	e67d      	b.n	800a4aa <_strtod_l+0x82>
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	f1bb 0f00 	cmp.w	fp, #0
 800a7b4:	bf08      	it	eq
 800a7b6:	46a3      	moveq	fp, r4
 800a7b8:	1aeb      	subs	r3, r5, r3
 800a7ba:	2c10      	cmp	r4, #16
 800a7bc:	9806      	ldr	r0, [sp, #24]
 800a7be:	4626      	mov	r6, r4
 800a7c0:	9307      	str	r3, [sp, #28]
 800a7c2:	bfa8      	it	ge
 800a7c4:	2610      	movge	r6, #16
 800a7c6:	f7f5 fe2f 	bl	8000428 <__aeabi_ui2d>
 800a7ca:	2c09      	cmp	r4, #9
 800a7cc:	4680      	mov	r8, r0
 800a7ce:	4689      	mov	r9, r1
 800a7d0:	dd13      	ble.n	800a7fa <_strtod_l+0x3d2>
 800a7d2:	4b79      	ldr	r3, [pc, #484]	; (800a9b8 <_strtod_l+0x590>)
 800a7d4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a7d8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a7dc:	f7f5 fe9e 	bl	800051c <__aeabi_dmul>
 800a7e0:	4680      	mov	r8, r0
 800a7e2:	9805      	ldr	r0, [sp, #20]
 800a7e4:	4689      	mov	r9, r1
 800a7e6:	f7f5 fe1f 	bl	8000428 <__aeabi_ui2d>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	f7f5 fcdd 	bl	80001b0 <__adddf3>
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	4689      	mov	r9, r1
 800a7fa:	2c0f      	cmp	r4, #15
 800a7fc:	dc36      	bgt.n	800a86c <_strtod_l+0x444>
 800a7fe:	9b07      	ldr	r3, [sp, #28]
 800a800:	2b00      	cmp	r3, #0
 800a802:	f43f ae52 	beq.w	800a4aa <_strtod_l+0x82>
 800a806:	dd22      	ble.n	800a84e <_strtod_l+0x426>
 800a808:	2b16      	cmp	r3, #22
 800a80a:	dc09      	bgt.n	800a820 <_strtod_l+0x3f8>
 800a80c:	4c6a      	ldr	r4, [pc, #424]	; (800a9b8 <_strtod_l+0x590>)
 800a80e:	4642      	mov	r2, r8
 800a810:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800a814:	464b      	mov	r3, r9
 800a816:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a81a:	f7f5 fe7f 	bl	800051c <__aeabi_dmul>
 800a81e:	e7c3      	b.n	800a7a8 <_strtod_l+0x380>
 800a820:	9a07      	ldr	r2, [sp, #28]
 800a822:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a826:	4293      	cmp	r3, r2
 800a828:	db20      	blt.n	800a86c <_strtod_l+0x444>
 800a82a:	4d63      	ldr	r5, [pc, #396]	; (800a9b8 <_strtod_l+0x590>)
 800a82c:	f1c4 040f 	rsb	r4, r4, #15
 800a830:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a834:	4642      	mov	r2, r8
 800a836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a83a:	464b      	mov	r3, r9
 800a83c:	f7f5 fe6e 	bl	800051c <__aeabi_dmul>
 800a840:	9b07      	ldr	r3, [sp, #28]
 800a842:	1b1c      	subs	r4, r3, r4
 800a844:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a848:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a84c:	e7e5      	b.n	800a81a <_strtod_l+0x3f2>
 800a84e:	9b07      	ldr	r3, [sp, #28]
 800a850:	3316      	adds	r3, #22
 800a852:	db0b      	blt.n	800a86c <_strtod_l+0x444>
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	4a58      	ldr	r2, [pc, #352]	; (800a9b8 <_strtod_l+0x590>)
 800a858:	1b5d      	subs	r5, r3, r5
 800a85a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a85e:	4640      	mov	r0, r8
 800a860:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a864:	4649      	mov	r1, r9
 800a866:	f7f5 ff83 	bl	8000770 <__aeabi_ddiv>
 800a86a:	e79d      	b.n	800a7a8 <_strtod_l+0x380>
 800a86c:	9b07      	ldr	r3, [sp, #28]
 800a86e:	1ba6      	subs	r6, r4, r6
 800a870:	441e      	add	r6, r3
 800a872:	2e00      	cmp	r6, #0
 800a874:	dd71      	ble.n	800a95a <_strtod_l+0x532>
 800a876:	f016 030f 	ands.w	r3, r6, #15
 800a87a:	d00a      	beq.n	800a892 <_strtod_l+0x46a>
 800a87c:	494e      	ldr	r1, [pc, #312]	; (800a9b8 <_strtod_l+0x590>)
 800a87e:	4642      	mov	r2, r8
 800a880:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a884:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a888:	464b      	mov	r3, r9
 800a88a:	f7f5 fe47 	bl	800051c <__aeabi_dmul>
 800a88e:	4680      	mov	r8, r0
 800a890:	4689      	mov	r9, r1
 800a892:	f036 060f 	bics.w	r6, r6, #15
 800a896:	d050      	beq.n	800a93a <_strtod_l+0x512>
 800a898:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a89c:	dd27      	ble.n	800a8ee <_strtod_l+0x4c6>
 800a89e:	f04f 0b00 	mov.w	fp, #0
 800a8a2:	f8cd b010 	str.w	fp, [sp, #16]
 800a8a6:	f8cd b020 	str.w	fp, [sp, #32]
 800a8aa:	f8cd b018 	str.w	fp, [sp, #24]
 800a8ae:	2322      	movs	r3, #34	; 0x22
 800a8b0:	f04f 0800 	mov.w	r8, #0
 800a8b4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a9c0 <_strtod_l+0x598>
 800a8b8:	f8ca 3000 	str.w	r3, [sl]
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f43f adf3 	beq.w	800a4aa <_strtod_l+0x82>
 800a8c4:	4650      	mov	r0, sl
 800a8c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a8c8:	f000 fffa 	bl	800b8c0 <_Bfree>
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	9906      	ldr	r1, [sp, #24]
 800a8d0:	f000 fff6 	bl	800b8c0 <_Bfree>
 800a8d4:	4650      	mov	r0, sl
 800a8d6:	9904      	ldr	r1, [sp, #16]
 800a8d8:	f000 fff2 	bl	800b8c0 <_Bfree>
 800a8dc:	4650      	mov	r0, sl
 800a8de:	9908      	ldr	r1, [sp, #32]
 800a8e0:	f000 ffee 	bl	800b8c0 <_Bfree>
 800a8e4:	4659      	mov	r1, fp
 800a8e6:	4650      	mov	r0, sl
 800a8e8:	f000 ffea 	bl	800b8c0 <_Bfree>
 800a8ec:	e5dd      	b.n	800a4aa <_strtod_l+0x82>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	4640      	mov	r0, r8
 800a8f2:	4649      	mov	r1, r9
 800a8f4:	461f      	mov	r7, r3
 800a8f6:	1136      	asrs	r6, r6, #4
 800a8f8:	2e01      	cmp	r6, #1
 800a8fa:	dc21      	bgt.n	800a940 <_strtod_l+0x518>
 800a8fc:	b10b      	cbz	r3, 800a902 <_strtod_l+0x4da>
 800a8fe:	4680      	mov	r8, r0
 800a900:	4689      	mov	r9, r1
 800a902:	4b2e      	ldr	r3, [pc, #184]	; (800a9bc <_strtod_l+0x594>)
 800a904:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a908:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a90c:	4642      	mov	r2, r8
 800a90e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a912:	464b      	mov	r3, r9
 800a914:	f7f5 fe02 	bl	800051c <__aeabi_dmul>
 800a918:	4b29      	ldr	r3, [pc, #164]	; (800a9c0 <_strtod_l+0x598>)
 800a91a:	460a      	mov	r2, r1
 800a91c:	400b      	ands	r3, r1
 800a91e:	4929      	ldr	r1, [pc, #164]	; (800a9c4 <_strtod_l+0x59c>)
 800a920:	4680      	mov	r8, r0
 800a922:	428b      	cmp	r3, r1
 800a924:	d8bb      	bhi.n	800a89e <_strtod_l+0x476>
 800a926:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a92a:	428b      	cmp	r3, r1
 800a92c:	bf86      	itte	hi
 800a92e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a932:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a9c8 <_strtod_l+0x5a0>
 800a936:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a93a:	2300      	movs	r3, #0
 800a93c:	9305      	str	r3, [sp, #20]
 800a93e:	e07e      	b.n	800aa3e <_strtod_l+0x616>
 800a940:	07f2      	lsls	r2, r6, #31
 800a942:	d507      	bpl.n	800a954 <_strtod_l+0x52c>
 800a944:	4b1d      	ldr	r3, [pc, #116]	; (800a9bc <_strtod_l+0x594>)
 800a946:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	f7f5 fde5 	bl	800051c <__aeabi_dmul>
 800a952:	2301      	movs	r3, #1
 800a954:	3701      	adds	r7, #1
 800a956:	1076      	asrs	r6, r6, #1
 800a958:	e7ce      	b.n	800a8f8 <_strtod_l+0x4d0>
 800a95a:	d0ee      	beq.n	800a93a <_strtod_l+0x512>
 800a95c:	4276      	negs	r6, r6
 800a95e:	f016 020f 	ands.w	r2, r6, #15
 800a962:	d00a      	beq.n	800a97a <_strtod_l+0x552>
 800a964:	4b14      	ldr	r3, [pc, #80]	; (800a9b8 <_strtod_l+0x590>)
 800a966:	4640      	mov	r0, r8
 800a968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a96c:	4649      	mov	r1, r9
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fefd 	bl	8000770 <__aeabi_ddiv>
 800a976:	4680      	mov	r8, r0
 800a978:	4689      	mov	r9, r1
 800a97a:	1136      	asrs	r6, r6, #4
 800a97c:	d0dd      	beq.n	800a93a <_strtod_l+0x512>
 800a97e:	2e1f      	cmp	r6, #31
 800a980:	dd24      	ble.n	800a9cc <_strtod_l+0x5a4>
 800a982:	f04f 0b00 	mov.w	fp, #0
 800a986:	f8cd b010 	str.w	fp, [sp, #16]
 800a98a:	f8cd b020 	str.w	fp, [sp, #32]
 800a98e:	f8cd b018 	str.w	fp, [sp, #24]
 800a992:	2322      	movs	r3, #34	; 0x22
 800a994:	f04f 0800 	mov.w	r8, #0
 800a998:	f04f 0900 	mov.w	r9, #0
 800a99c:	f8ca 3000 	str.w	r3, [sl]
 800a9a0:	e78c      	b.n	800a8bc <_strtod_l+0x494>
 800a9a2:	bf00      	nop
 800a9a4:	0800d3bd 	.word	0x0800d3bd
 800a9a8:	0800d3d4 	.word	0x0800d3d4
 800a9ac:	0800d3b4 	.word	0x0800d3b4
 800a9b0:	0800d3b7 	.word	0x0800d3b7
 800a9b4:	0800d4c3 	.word	0x0800d4c3
 800a9b8:	0800d5e0 	.word	0x0800d5e0
 800a9bc:	0800d5b8 	.word	0x0800d5b8
 800a9c0:	7ff00000 	.word	0x7ff00000
 800a9c4:	7ca00000 	.word	0x7ca00000
 800a9c8:	7fefffff 	.word	0x7fefffff
 800a9cc:	f016 0310 	ands.w	r3, r6, #16
 800a9d0:	bf18      	it	ne
 800a9d2:	236a      	movne	r3, #106	; 0x6a
 800a9d4:	4640      	mov	r0, r8
 800a9d6:	9305      	str	r3, [sp, #20]
 800a9d8:	4649      	mov	r1, r9
 800a9da:	2300      	movs	r3, #0
 800a9dc:	4fb2      	ldr	r7, [pc, #712]	; (800aca8 <_strtod_l+0x880>)
 800a9de:	07f2      	lsls	r2, r6, #31
 800a9e0:	d504      	bpl.n	800a9ec <_strtod_l+0x5c4>
 800a9e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9e6:	f7f5 fd99 	bl	800051c <__aeabi_dmul>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	1076      	asrs	r6, r6, #1
 800a9ee:	f107 0708 	add.w	r7, r7, #8
 800a9f2:	d1f4      	bne.n	800a9de <_strtod_l+0x5b6>
 800a9f4:	b10b      	cbz	r3, 800a9fa <_strtod_l+0x5d2>
 800a9f6:	4680      	mov	r8, r0
 800a9f8:	4689      	mov	r9, r1
 800a9fa:	9b05      	ldr	r3, [sp, #20]
 800a9fc:	b1bb      	cbz	r3, 800aa2e <_strtod_l+0x606>
 800a9fe:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800aa02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	4649      	mov	r1, r9
 800aa0a:	dd10      	ble.n	800aa2e <_strtod_l+0x606>
 800aa0c:	2b1f      	cmp	r3, #31
 800aa0e:	f340 812b 	ble.w	800ac68 <_strtod_l+0x840>
 800aa12:	2b34      	cmp	r3, #52	; 0x34
 800aa14:	bfd8      	it	le
 800aa16:	f04f 32ff 	movle.w	r2, #4294967295
 800aa1a:	f04f 0800 	mov.w	r8, #0
 800aa1e:	bfcf      	iteee	gt
 800aa20:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800aa24:	3b20      	suble	r3, #32
 800aa26:	fa02 f303 	lslle.w	r3, r2, r3
 800aa2a:	ea03 0901 	andle.w	r9, r3, r1
 800aa2e:	2200      	movs	r2, #0
 800aa30:	2300      	movs	r3, #0
 800aa32:	4640      	mov	r0, r8
 800aa34:	4649      	mov	r1, r9
 800aa36:	f7f5 ffd9 	bl	80009ec <__aeabi_dcmpeq>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d1a1      	bne.n	800a982 <_strtod_l+0x55a>
 800aa3e:	9b06      	ldr	r3, [sp, #24]
 800aa40:	465a      	mov	r2, fp
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	4650      	mov	r0, sl
 800aa46:	4623      	mov	r3, r4
 800aa48:	9908      	ldr	r1, [sp, #32]
 800aa4a:	f000 ffa5 	bl	800b998 <__s2b>
 800aa4e:	9008      	str	r0, [sp, #32]
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f43f af24 	beq.w	800a89e <_strtod_l+0x476>
 800aa56:	9b04      	ldr	r3, [sp, #16]
 800aa58:	f04f 0b00 	mov.w	fp, #0
 800aa5c:	1b5d      	subs	r5, r3, r5
 800aa5e:	9b07      	ldr	r3, [sp, #28]
 800aa60:	f8cd b010 	str.w	fp, [sp, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	bfb4      	ite	lt
 800aa68:	462b      	movlt	r3, r5
 800aa6a:	2300      	movge	r3, #0
 800aa6c:	930e      	str	r3, [sp, #56]	; 0x38
 800aa6e:	9b07      	ldr	r3, [sp, #28]
 800aa70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aa74:	9316      	str	r3, [sp, #88]	; 0x58
 800aa76:	9b08      	ldr	r3, [sp, #32]
 800aa78:	4650      	mov	r0, sl
 800aa7a:	6859      	ldr	r1, [r3, #4]
 800aa7c:	f000 fee0 	bl	800b840 <_Balloc>
 800aa80:	9006      	str	r0, [sp, #24]
 800aa82:	2800      	cmp	r0, #0
 800aa84:	f43f af13 	beq.w	800a8ae <_strtod_l+0x486>
 800aa88:	9b08      	ldr	r3, [sp, #32]
 800aa8a:	300c      	adds	r0, #12
 800aa8c:	691a      	ldr	r2, [r3, #16]
 800aa8e:	f103 010c 	add.w	r1, r3, #12
 800aa92:	3202      	adds	r2, #2
 800aa94:	0092      	lsls	r2, r2, #2
 800aa96:	f7ff fc87 	bl	800a3a8 <memcpy>
 800aa9a:	ab1e      	add	r3, sp, #120	; 0x78
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	ab1d      	add	r3, sp, #116	; 0x74
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	4642      	mov	r2, r8
 800aaa4:	464b      	mov	r3, r9
 800aaa6:	4650      	mov	r0, sl
 800aaa8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800aaac:	f001 fab2 	bl	800c014 <__d2b>
 800aab0:	901c      	str	r0, [sp, #112]	; 0x70
 800aab2:	2800      	cmp	r0, #0
 800aab4:	f43f aefb 	beq.w	800a8ae <_strtod_l+0x486>
 800aab8:	2101      	movs	r1, #1
 800aaba:	4650      	mov	r0, sl
 800aabc:	f001 f804 	bl	800bac8 <__i2b>
 800aac0:	4603      	mov	r3, r0
 800aac2:	9004      	str	r0, [sp, #16]
 800aac4:	2800      	cmp	r0, #0
 800aac6:	f43f aef2 	beq.w	800a8ae <_strtod_l+0x486>
 800aaca:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800aacc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aace:	2d00      	cmp	r5, #0
 800aad0:	bfab      	itete	ge
 800aad2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800aad4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800aad6:	18ee      	addge	r6, r5, r3
 800aad8:	1b5c      	sublt	r4, r3, r5
 800aada:	9b05      	ldr	r3, [sp, #20]
 800aadc:	bfa8      	it	ge
 800aade:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800aae0:	eba5 0503 	sub.w	r5, r5, r3
 800aae4:	4415      	add	r5, r2
 800aae6:	4b71      	ldr	r3, [pc, #452]	; (800acac <_strtod_l+0x884>)
 800aae8:	f105 35ff 	add.w	r5, r5, #4294967295
 800aaec:	bfb8      	it	lt
 800aaee:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800aaf0:	429d      	cmp	r5, r3
 800aaf2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aaf6:	f280 80c9 	bge.w	800ac8c <_strtod_l+0x864>
 800aafa:	1b5b      	subs	r3, r3, r5
 800aafc:	2b1f      	cmp	r3, #31
 800aafe:	f04f 0701 	mov.w	r7, #1
 800ab02:	eba2 0203 	sub.w	r2, r2, r3
 800ab06:	f300 80b6 	bgt.w	800ac76 <_strtod_l+0x84e>
 800ab0a:	2500      	movs	r5, #0
 800ab0c:	fa07 f303 	lsl.w	r3, r7, r3
 800ab10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab12:	18b7      	adds	r7, r6, r2
 800ab14:	9b05      	ldr	r3, [sp, #20]
 800ab16:	42be      	cmp	r6, r7
 800ab18:	4414      	add	r4, r2
 800ab1a:	441c      	add	r4, r3
 800ab1c:	4633      	mov	r3, r6
 800ab1e:	bfa8      	it	ge
 800ab20:	463b      	movge	r3, r7
 800ab22:	42a3      	cmp	r3, r4
 800ab24:	bfa8      	it	ge
 800ab26:	4623      	movge	r3, r4
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	bfc2      	ittt	gt
 800ab2c:	1aff      	subgt	r7, r7, r3
 800ab2e:	1ae4      	subgt	r4, r4, r3
 800ab30:	1af6      	subgt	r6, r6, r3
 800ab32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	dd17      	ble.n	800ab68 <_strtod_l+0x740>
 800ab38:	461a      	mov	r2, r3
 800ab3a:	4650      	mov	r0, sl
 800ab3c:	9904      	ldr	r1, [sp, #16]
 800ab3e:	f001 f87d 	bl	800bc3c <__pow5mult>
 800ab42:	9004      	str	r0, [sp, #16]
 800ab44:	2800      	cmp	r0, #0
 800ab46:	f43f aeb2 	beq.w	800a8ae <_strtod_l+0x486>
 800ab4a:	4601      	mov	r1, r0
 800ab4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ab4e:	4650      	mov	r0, sl
 800ab50:	f000 ffd0 	bl	800baf4 <__multiply>
 800ab54:	9009      	str	r0, [sp, #36]	; 0x24
 800ab56:	2800      	cmp	r0, #0
 800ab58:	f43f aea9 	beq.w	800a8ae <_strtod_l+0x486>
 800ab5c:	4650      	mov	r0, sl
 800ab5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab60:	f000 feae 	bl	800b8c0 <_Bfree>
 800ab64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab66:	931c      	str	r3, [sp, #112]	; 0x70
 800ab68:	2f00      	cmp	r7, #0
 800ab6a:	f300 8093 	bgt.w	800ac94 <_strtod_l+0x86c>
 800ab6e:	9b07      	ldr	r3, [sp, #28]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	dd08      	ble.n	800ab86 <_strtod_l+0x75e>
 800ab74:	4650      	mov	r0, sl
 800ab76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab78:	9906      	ldr	r1, [sp, #24]
 800ab7a:	f001 f85f 	bl	800bc3c <__pow5mult>
 800ab7e:	9006      	str	r0, [sp, #24]
 800ab80:	2800      	cmp	r0, #0
 800ab82:	f43f ae94 	beq.w	800a8ae <_strtod_l+0x486>
 800ab86:	2c00      	cmp	r4, #0
 800ab88:	dd08      	ble.n	800ab9c <_strtod_l+0x774>
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	4650      	mov	r0, sl
 800ab8e:	9906      	ldr	r1, [sp, #24]
 800ab90:	f001 f8ae 	bl	800bcf0 <__lshift>
 800ab94:	9006      	str	r0, [sp, #24]
 800ab96:	2800      	cmp	r0, #0
 800ab98:	f43f ae89 	beq.w	800a8ae <_strtod_l+0x486>
 800ab9c:	2e00      	cmp	r6, #0
 800ab9e:	dd08      	ble.n	800abb2 <_strtod_l+0x78a>
 800aba0:	4632      	mov	r2, r6
 800aba2:	4650      	mov	r0, sl
 800aba4:	9904      	ldr	r1, [sp, #16]
 800aba6:	f001 f8a3 	bl	800bcf0 <__lshift>
 800abaa:	9004      	str	r0, [sp, #16]
 800abac:	2800      	cmp	r0, #0
 800abae:	f43f ae7e 	beq.w	800a8ae <_strtod_l+0x486>
 800abb2:	4650      	mov	r0, sl
 800abb4:	9a06      	ldr	r2, [sp, #24]
 800abb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800abb8:	f001 f922 	bl	800be00 <__mdiff>
 800abbc:	4683      	mov	fp, r0
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f43f ae75 	beq.w	800a8ae <_strtod_l+0x486>
 800abc4:	2400      	movs	r4, #0
 800abc6:	68c3      	ldr	r3, [r0, #12]
 800abc8:	9904      	ldr	r1, [sp, #16]
 800abca:	60c4      	str	r4, [r0, #12]
 800abcc:	930d      	str	r3, [sp, #52]	; 0x34
 800abce:	f001 f8fb 	bl	800bdc8 <__mcmp>
 800abd2:	42a0      	cmp	r0, r4
 800abd4:	da70      	bge.n	800acb8 <_strtod_l+0x890>
 800abd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abd8:	ea53 0308 	orrs.w	r3, r3, r8
 800abdc:	f040 8096 	bne.w	800ad0c <_strtod_l+0x8e4>
 800abe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f040 8091 	bne.w	800ad0c <_strtod_l+0x8e4>
 800abea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abee:	0d1b      	lsrs	r3, r3, #20
 800abf0:	051b      	lsls	r3, r3, #20
 800abf2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800abf6:	f240 8089 	bls.w	800ad0c <_strtod_l+0x8e4>
 800abfa:	f8db 3014 	ldr.w	r3, [fp, #20]
 800abfe:	b923      	cbnz	r3, 800ac0a <_strtod_l+0x7e2>
 800ac00:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	f340 8081 	ble.w	800ad0c <_strtod_l+0x8e4>
 800ac0a:	4659      	mov	r1, fp
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	4650      	mov	r0, sl
 800ac10:	f001 f86e 	bl	800bcf0 <__lshift>
 800ac14:	9904      	ldr	r1, [sp, #16]
 800ac16:	4683      	mov	fp, r0
 800ac18:	f001 f8d6 	bl	800bdc8 <__mcmp>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	dd75      	ble.n	800ad0c <_strtod_l+0x8e4>
 800ac20:	9905      	ldr	r1, [sp, #20]
 800ac22:	464b      	mov	r3, r9
 800ac24:	4a22      	ldr	r2, [pc, #136]	; (800acb0 <_strtod_l+0x888>)
 800ac26:	2900      	cmp	r1, #0
 800ac28:	f000 8091 	beq.w	800ad4e <_strtod_l+0x926>
 800ac2c:	ea02 0109 	and.w	r1, r2, r9
 800ac30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ac34:	f300 808b 	bgt.w	800ad4e <_strtod_l+0x926>
 800ac38:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ac3c:	f77f aea9 	ble.w	800a992 <_strtod_l+0x56a>
 800ac40:	2300      	movs	r3, #0
 800ac42:	4a1c      	ldr	r2, [pc, #112]	; (800acb4 <_strtod_l+0x88c>)
 800ac44:	4640      	mov	r0, r8
 800ac46:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ac50:	f7f5 fc64 	bl	800051c <__aeabi_dmul>
 800ac54:	460b      	mov	r3, r1
 800ac56:	4303      	orrs	r3, r0
 800ac58:	bf08      	it	eq
 800ac5a:	2322      	moveq	r3, #34	; 0x22
 800ac5c:	4680      	mov	r8, r0
 800ac5e:	4689      	mov	r9, r1
 800ac60:	bf08      	it	eq
 800ac62:	f8ca 3000 	streq.w	r3, [sl]
 800ac66:	e62d      	b.n	800a8c4 <_strtod_l+0x49c>
 800ac68:	f04f 32ff 	mov.w	r2, #4294967295
 800ac6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac70:	ea03 0808 	and.w	r8, r3, r8
 800ac74:	e6db      	b.n	800aa2e <_strtod_l+0x606>
 800ac76:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ac7a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ac7e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ac82:	35e2      	adds	r5, #226	; 0xe2
 800ac84:	fa07 f505 	lsl.w	r5, r7, r5
 800ac88:	970f      	str	r7, [sp, #60]	; 0x3c
 800ac8a:	e742      	b.n	800ab12 <_strtod_l+0x6ea>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	2500      	movs	r5, #0
 800ac90:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac92:	e73e      	b.n	800ab12 <_strtod_l+0x6ea>
 800ac94:	463a      	mov	r2, r7
 800ac96:	4650      	mov	r0, sl
 800ac98:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac9a:	f001 f829 	bl	800bcf0 <__lshift>
 800ac9e:	901c      	str	r0, [sp, #112]	; 0x70
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f47f af64 	bne.w	800ab6e <_strtod_l+0x746>
 800aca6:	e602      	b.n	800a8ae <_strtod_l+0x486>
 800aca8:	0800d3e8 	.word	0x0800d3e8
 800acac:	fffffc02 	.word	0xfffffc02
 800acb0:	7ff00000 	.word	0x7ff00000
 800acb4:	39500000 	.word	0x39500000
 800acb8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800acbc:	d166      	bne.n	800ad8c <_strtod_l+0x964>
 800acbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acc4:	b35a      	cbz	r2, 800ad1e <_strtod_l+0x8f6>
 800acc6:	4a9c      	ldr	r2, [pc, #624]	; (800af38 <_strtod_l+0xb10>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d12c      	bne.n	800ad26 <_strtod_l+0x8fe>
 800accc:	9b05      	ldr	r3, [sp, #20]
 800acce:	4640      	mov	r0, r8
 800acd0:	b303      	cbz	r3, 800ad14 <_strtod_l+0x8ec>
 800acd2:	464b      	mov	r3, r9
 800acd4:	4a99      	ldr	r2, [pc, #612]	; (800af3c <_strtod_l+0xb14>)
 800acd6:	f04f 31ff 	mov.w	r1, #4294967295
 800acda:	401a      	ands	r2, r3
 800acdc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ace0:	d81b      	bhi.n	800ad1a <_strtod_l+0x8f2>
 800ace2:	0d12      	lsrs	r2, r2, #20
 800ace4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ace8:	fa01 f303 	lsl.w	r3, r1, r3
 800acec:	4298      	cmp	r0, r3
 800acee:	d11a      	bne.n	800ad26 <_strtod_l+0x8fe>
 800acf0:	4b93      	ldr	r3, [pc, #588]	; (800af40 <_strtod_l+0xb18>)
 800acf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d102      	bne.n	800acfe <_strtod_l+0x8d6>
 800acf8:	3001      	adds	r0, #1
 800acfa:	f43f add8 	beq.w	800a8ae <_strtod_l+0x486>
 800acfe:	f04f 0800 	mov.w	r8, #0
 800ad02:	4b8e      	ldr	r3, [pc, #568]	; (800af3c <_strtod_l+0xb14>)
 800ad04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad06:	401a      	ands	r2, r3
 800ad08:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800ad0c:	9b05      	ldr	r3, [sp, #20]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d196      	bne.n	800ac40 <_strtod_l+0x818>
 800ad12:	e5d7      	b.n	800a8c4 <_strtod_l+0x49c>
 800ad14:	f04f 33ff 	mov.w	r3, #4294967295
 800ad18:	e7e8      	b.n	800acec <_strtod_l+0x8c4>
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	e7e6      	b.n	800acec <_strtod_l+0x8c4>
 800ad1e:	ea53 0308 	orrs.w	r3, r3, r8
 800ad22:	f43f af7d 	beq.w	800ac20 <_strtod_l+0x7f8>
 800ad26:	b1e5      	cbz	r5, 800ad62 <_strtod_l+0x93a>
 800ad28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2a:	421d      	tst	r5, r3
 800ad2c:	d0ee      	beq.n	800ad0c <_strtod_l+0x8e4>
 800ad2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad30:	4640      	mov	r0, r8
 800ad32:	4649      	mov	r1, r9
 800ad34:	9a05      	ldr	r2, [sp, #20]
 800ad36:	b1c3      	cbz	r3, 800ad6a <_strtod_l+0x942>
 800ad38:	f7ff fb54 	bl	800a3e4 <sulp>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad44:	f7f5 fa34 	bl	80001b0 <__adddf3>
 800ad48:	4680      	mov	r8, r0
 800ad4a:	4689      	mov	r9, r1
 800ad4c:	e7de      	b.n	800ad0c <_strtod_l+0x8e4>
 800ad4e:	4013      	ands	r3, r2
 800ad50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ad54:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ad58:	f04f 38ff 	mov.w	r8, #4294967295
 800ad5c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ad60:	e7d4      	b.n	800ad0c <_strtod_l+0x8e4>
 800ad62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad64:	ea13 0f08 	tst.w	r3, r8
 800ad68:	e7e0      	b.n	800ad2c <_strtod_l+0x904>
 800ad6a:	f7ff fb3b 	bl	800a3e4 <sulp>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad76:	f7f5 fa19 	bl	80001ac <__aeabi_dsub>
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4680      	mov	r8, r0
 800ad80:	4689      	mov	r9, r1
 800ad82:	f7f5 fe33 	bl	80009ec <__aeabi_dcmpeq>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d0c0      	beq.n	800ad0c <_strtod_l+0x8e4>
 800ad8a:	e602      	b.n	800a992 <_strtod_l+0x56a>
 800ad8c:	4658      	mov	r0, fp
 800ad8e:	9904      	ldr	r1, [sp, #16]
 800ad90:	f001 f99c 	bl	800c0cc <__ratio>
 800ad94:	2200      	movs	r2, #0
 800ad96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	f7f5 fe39 	bl	8000a14 <__aeabi_dcmple>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d075      	beq.n	800ae92 <_strtod_l+0xa6a>
 800ada6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d047      	beq.n	800ae3c <_strtod_l+0xa14>
 800adac:	2600      	movs	r6, #0
 800adae:	4f65      	ldr	r7, [pc, #404]	; (800af44 <_strtod_l+0xb1c>)
 800adb0:	4d64      	ldr	r5, [pc, #400]	; (800af44 <_strtod_l+0xb1c>)
 800adb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adb8:	0d1b      	lsrs	r3, r3, #20
 800adba:	051b      	lsls	r3, r3, #20
 800adbc:	930f      	str	r3, [sp, #60]	; 0x3c
 800adbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adc0:	4b61      	ldr	r3, [pc, #388]	; (800af48 <_strtod_l+0xb20>)
 800adc2:	429a      	cmp	r2, r3
 800adc4:	f040 80c8 	bne.w	800af58 <_strtod_l+0xb30>
 800adc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800adcc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800add0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800add2:	4640      	mov	r0, r8
 800add4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800add8:	4649      	mov	r1, r9
 800adda:	f001 f8a1 	bl	800bf20 <__ulp>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4630      	mov	r0, r6
 800ade4:	4639      	mov	r1, r7
 800ade6:	f7f5 fb99 	bl	800051c <__aeabi_dmul>
 800adea:	4642      	mov	r2, r8
 800adec:	464b      	mov	r3, r9
 800adee:	f7f5 f9df 	bl	80001b0 <__adddf3>
 800adf2:	460b      	mov	r3, r1
 800adf4:	4951      	ldr	r1, [pc, #324]	; (800af3c <_strtod_l+0xb14>)
 800adf6:	4a55      	ldr	r2, [pc, #340]	; (800af4c <_strtod_l+0xb24>)
 800adf8:	4019      	ands	r1, r3
 800adfa:	4291      	cmp	r1, r2
 800adfc:	4680      	mov	r8, r0
 800adfe:	d95e      	bls.n	800aebe <_strtod_l+0xa96>
 800ae00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae02:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d103      	bne.n	800ae12 <_strtod_l+0x9ea>
 800ae0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	f43f ad4e 	beq.w	800a8ae <_strtod_l+0x486>
 800ae12:	f04f 38ff 	mov.w	r8, #4294967295
 800ae16:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800af40 <_strtod_l+0xb18>
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae1e:	f000 fd4f 	bl	800b8c0 <_Bfree>
 800ae22:	4650      	mov	r0, sl
 800ae24:	9906      	ldr	r1, [sp, #24]
 800ae26:	f000 fd4b 	bl	800b8c0 <_Bfree>
 800ae2a:	4650      	mov	r0, sl
 800ae2c:	9904      	ldr	r1, [sp, #16]
 800ae2e:	f000 fd47 	bl	800b8c0 <_Bfree>
 800ae32:	4659      	mov	r1, fp
 800ae34:	4650      	mov	r0, sl
 800ae36:	f000 fd43 	bl	800b8c0 <_Bfree>
 800ae3a:	e61c      	b.n	800aa76 <_strtod_l+0x64e>
 800ae3c:	f1b8 0f00 	cmp.w	r8, #0
 800ae40:	d119      	bne.n	800ae76 <_strtod_l+0xa4e>
 800ae42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae48:	b9e3      	cbnz	r3, 800ae84 <_strtod_l+0xa5c>
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	4639      	mov	r1, r7
 800ae50:	4b3c      	ldr	r3, [pc, #240]	; (800af44 <_strtod_l+0xb1c>)
 800ae52:	f7f5 fdd5 	bl	8000a00 <__aeabi_dcmplt>
 800ae56:	b9c8      	cbnz	r0, 800ae8c <_strtod_l+0xa64>
 800ae58:	2200      	movs	r2, #0
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	4b3c      	ldr	r3, [pc, #240]	; (800af50 <_strtod_l+0xb28>)
 800ae60:	f7f5 fb5c 	bl	800051c <__aeabi_dmul>
 800ae64:	4604      	mov	r4, r0
 800ae66:	460d      	mov	r5, r1
 800ae68:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ae6c:	9418      	str	r4, [sp, #96]	; 0x60
 800ae6e:	9319      	str	r3, [sp, #100]	; 0x64
 800ae70:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ae74:	e79d      	b.n	800adb2 <_strtod_l+0x98a>
 800ae76:	f1b8 0f01 	cmp.w	r8, #1
 800ae7a:	d103      	bne.n	800ae84 <_strtod_l+0xa5c>
 800ae7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f43f ad87 	beq.w	800a992 <_strtod_l+0x56a>
 800ae84:	2600      	movs	r6, #0
 800ae86:	2400      	movs	r4, #0
 800ae88:	4f32      	ldr	r7, [pc, #200]	; (800af54 <_strtod_l+0xb2c>)
 800ae8a:	e791      	b.n	800adb0 <_strtod_l+0x988>
 800ae8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ae8e:	4d30      	ldr	r5, [pc, #192]	; (800af50 <_strtod_l+0xb28>)
 800ae90:	e7ea      	b.n	800ae68 <_strtod_l+0xa40>
 800ae92:	4b2f      	ldr	r3, [pc, #188]	; (800af50 <_strtod_l+0xb28>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	4630      	mov	r0, r6
 800ae98:	4639      	mov	r1, r7
 800ae9a:	f7f5 fb3f 	bl	800051c <__aeabi_dmul>
 800ae9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aea0:	4604      	mov	r4, r0
 800aea2:	460d      	mov	r5, r1
 800aea4:	b933      	cbnz	r3, 800aeb4 <_strtod_l+0xa8c>
 800aea6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aeaa:	9010      	str	r0, [sp, #64]	; 0x40
 800aeac:	9311      	str	r3, [sp, #68]	; 0x44
 800aeae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aeb2:	e77e      	b.n	800adb2 <_strtod_l+0x98a>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800aebc:	e7f7      	b.n	800aeae <_strtod_l+0xa86>
 800aebe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800aec2:	9b05      	ldr	r3, [sp, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1a8      	bne.n	800ae1a <_strtod_l+0x9f2>
 800aec8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aecc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aece:	0d1b      	lsrs	r3, r3, #20
 800aed0:	051b      	lsls	r3, r3, #20
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d1a1      	bne.n	800ae1a <_strtod_l+0x9f2>
 800aed6:	4620      	mov	r0, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f6 f935 	bl	8001148 <__aeabi_d2lz>
 800aede:	f7f5 faef 	bl	80004c0 <__aeabi_l2d>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4620      	mov	r0, r4
 800aee8:	4629      	mov	r1, r5
 800aeea:	f7f5 f95f 	bl	80001ac <__aeabi_dsub>
 800aeee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aef4:	ea43 0308 	orr.w	r3, r3, r8
 800aef8:	4313      	orrs	r3, r2
 800aefa:	4604      	mov	r4, r0
 800aefc:	460d      	mov	r5, r1
 800aefe:	d066      	beq.n	800afce <_strtod_l+0xba6>
 800af00:	a309      	add	r3, pc, #36	; (adr r3, 800af28 <_strtod_l+0xb00>)
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	f7f5 fd7b 	bl	8000a00 <__aeabi_dcmplt>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	f47f acda 	bne.w	800a8c4 <_strtod_l+0x49c>
 800af10:	a307      	add	r3, pc, #28	; (adr r3, 800af30 <_strtod_l+0xb08>)
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	4620      	mov	r0, r4
 800af18:	4629      	mov	r1, r5
 800af1a:	f7f5 fd8f 	bl	8000a3c <__aeabi_dcmpgt>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f43f af7b 	beq.w	800ae1a <_strtod_l+0x9f2>
 800af24:	e4ce      	b.n	800a8c4 <_strtod_l+0x49c>
 800af26:	bf00      	nop
 800af28:	94a03595 	.word	0x94a03595
 800af2c:	3fdfffff 	.word	0x3fdfffff
 800af30:	35afe535 	.word	0x35afe535
 800af34:	3fe00000 	.word	0x3fe00000
 800af38:	000fffff 	.word	0x000fffff
 800af3c:	7ff00000 	.word	0x7ff00000
 800af40:	7fefffff 	.word	0x7fefffff
 800af44:	3ff00000 	.word	0x3ff00000
 800af48:	7fe00000 	.word	0x7fe00000
 800af4c:	7c9fffff 	.word	0x7c9fffff
 800af50:	3fe00000 	.word	0x3fe00000
 800af54:	bff00000 	.word	0xbff00000
 800af58:	9b05      	ldr	r3, [sp, #20]
 800af5a:	b313      	cbz	r3, 800afa2 <_strtod_l+0xb7a>
 800af5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af62:	d81e      	bhi.n	800afa2 <_strtod_l+0xb7a>
 800af64:	a326      	add	r3, pc, #152	; (adr r3, 800b000 <_strtod_l+0xbd8>)
 800af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6a:	4620      	mov	r0, r4
 800af6c:	4629      	mov	r1, r5
 800af6e:	f7f5 fd51 	bl	8000a14 <__aeabi_dcmple>
 800af72:	b190      	cbz	r0, 800af9a <_strtod_l+0xb72>
 800af74:	4629      	mov	r1, r5
 800af76:	4620      	mov	r0, r4
 800af78:	f7f5 fd6a 	bl	8000a50 <__aeabi_d2uiz>
 800af7c:	2801      	cmp	r0, #1
 800af7e:	bf38      	it	cc
 800af80:	2001      	movcc	r0, #1
 800af82:	f7f5 fa51 	bl	8000428 <__aeabi_ui2d>
 800af86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af88:	4604      	mov	r4, r0
 800af8a:	460d      	mov	r5, r1
 800af8c:	b9d3      	cbnz	r3, 800afc4 <_strtod_l+0xb9c>
 800af8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af92:	9012      	str	r0, [sp, #72]	; 0x48
 800af94:	9313      	str	r3, [sp, #76]	; 0x4c
 800af96:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800af9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af9c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800afa0:	1a9f      	subs	r7, r3, r2
 800afa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800afa6:	f000 ffbb 	bl	800bf20 <__ulp>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4630      	mov	r0, r6
 800afb0:	4639      	mov	r1, r7
 800afb2:	f7f5 fab3 	bl	800051c <__aeabi_dmul>
 800afb6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800afba:	f7f5 f8f9 	bl	80001b0 <__adddf3>
 800afbe:	4680      	mov	r8, r0
 800afc0:	4689      	mov	r9, r1
 800afc2:	e77e      	b.n	800aec2 <_strtod_l+0xa9a>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800afcc:	e7e3      	b.n	800af96 <_strtod_l+0xb6e>
 800afce:	a30e      	add	r3, pc, #56	; (adr r3, 800b008 <_strtod_l+0xbe0>)
 800afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd4:	f7f5 fd14 	bl	8000a00 <__aeabi_dcmplt>
 800afd8:	e7a1      	b.n	800af1e <_strtod_l+0xaf6>
 800afda:	2300      	movs	r3, #0
 800afdc:	930c      	str	r3, [sp, #48]	; 0x30
 800afde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afe0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afe2:	6013      	str	r3, [r2, #0]
 800afe4:	f7ff ba65 	b.w	800a4b2 <_strtod_l+0x8a>
 800afe8:	2b65      	cmp	r3, #101	; 0x65
 800afea:	f43f ab5c 	beq.w	800a6a6 <_strtod_l+0x27e>
 800afee:	2b45      	cmp	r3, #69	; 0x45
 800aff0:	f43f ab59 	beq.w	800a6a6 <_strtod_l+0x27e>
 800aff4:	2201      	movs	r2, #1
 800aff6:	f7ff bb8d 	b.w	800a714 <_strtod_l+0x2ec>
 800affa:	bf00      	nop
 800affc:	f3af 8000 	nop.w
 800b000:	ffc00000 	.word	0xffc00000
 800b004:	41dfffff 	.word	0x41dfffff
 800b008:	94a03595 	.word	0x94a03595
 800b00c:	3fcfffff 	.word	0x3fcfffff

0800b010 <strtod>:
 800b010:	460a      	mov	r2, r1
 800b012:	4601      	mov	r1, r0
 800b014:	4802      	ldr	r0, [pc, #8]	; (800b020 <strtod+0x10>)
 800b016:	4b03      	ldr	r3, [pc, #12]	; (800b024 <strtod+0x14>)
 800b018:	6800      	ldr	r0, [r0, #0]
 800b01a:	f7ff ba05 	b.w	800a428 <_strtod_l>
 800b01e:	bf00      	nop
 800b020:	20000194 	.word	0x20000194
 800b024:	200001fc 	.word	0x200001fc

0800b028 <strtok>:
 800b028:	4b16      	ldr	r3, [pc, #88]	; (800b084 <strtok+0x5c>)
 800b02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b02e:	681f      	ldr	r7, [r3, #0]
 800b030:	4605      	mov	r5, r0
 800b032:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800b034:	460e      	mov	r6, r1
 800b036:	b9ec      	cbnz	r4, 800b074 <strtok+0x4c>
 800b038:	2050      	movs	r0, #80	; 0x50
 800b03a:	f000 fbe7 	bl	800b80c <malloc>
 800b03e:	4602      	mov	r2, r0
 800b040:	65b8      	str	r0, [r7, #88]	; 0x58
 800b042:	b920      	cbnz	r0, 800b04e <strtok+0x26>
 800b044:	2157      	movs	r1, #87	; 0x57
 800b046:	4b10      	ldr	r3, [pc, #64]	; (800b088 <strtok+0x60>)
 800b048:	4810      	ldr	r0, [pc, #64]	; (800b08c <strtok+0x64>)
 800b04a:	f000 f849 	bl	800b0e0 <__assert_func>
 800b04e:	e9c0 4400 	strd	r4, r4, [r0]
 800b052:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b056:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b05a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b05e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b062:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b066:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b06a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b06e:	6184      	str	r4, [r0, #24]
 800b070:	7704      	strb	r4, [r0, #28]
 800b072:	6244      	str	r4, [r0, #36]	; 0x24
 800b074:	4631      	mov	r1, r6
 800b076:	4628      	mov	r0, r5
 800b078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b07a:	2301      	movs	r3, #1
 800b07c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b080:	f000 b806 	b.w	800b090 <__strtok_r>
 800b084:	20000194 	.word	0x20000194
 800b088:	0800d410 	.word	0x0800d410
 800b08c:	0800d427 	.word	0x0800d427

0800b090 <__strtok_r>:
 800b090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b092:	b908      	cbnz	r0, 800b098 <__strtok_r+0x8>
 800b094:	6810      	ldr	r0, [r2, #0]
 800b096:	b188      	cbz	r0, 800b0bc <__strtok_r+0x2c>
 800b098:	4604      	mov	r4, r0
 800b09a:	460f      	mov	r7, r1
 800b09c:	4620      	mov	r0, r4
 800b09e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b0a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b0a6:	b91e      	cbnz	r6, 800b0b0 <__strtok_r+0x20>
 800b0a8:	b965      	cbnz	r5, 800b0c4 <__strtok_r+0x34>
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	6015      	str	r5, [r2, #0]
 800b0ae:	e005      	b.n	800b0bc <__strtok_r+0x2c>
 800b0b0:	42b5      	cmp	r5, r6
 800b0b2:	d1f6      	bne.n	800b0a2 <__strtok_r+0x12>
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1f0      	bne.n	800b09a <__strtok_r+0xa>
 800b0b8:	6014      	str	r4, [r2, #0]
 800b0ba:	7003      	strb	r3, [r0, #0]
 800b0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0be:	461c      	mov	r4, r3
 800b0c0:	e00c      	b.n	800b0dc <__strtok_r+0x4c>
 800b0c2:	b915      	cbnz	r5, 800b0ca <__strtok_r+0x3a>
 800b0c4:	460e      	mov	r6, r1
 800b0c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b0ca:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b0ce:	42ab      	cmp	r3, r5
 800b0d0:	d1f7      	bne.n	800b0c2 <__strtok_r+0x32>
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0f3      	beq.n	800b0be <__strtok_r+0x2e>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b0dc:	6014      	str	r4, [r2, #0]
 800b0de:	e7ed      	b.n	800b0bc <__strtok_r+0x2c>

0800b0e0 <__assert_func>:
 800b0e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0e2:	4614      	mov	r4, r2
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	4b09      	ldr	r3, [pc, #36]	; (800b10c <__assert_func+0x2c>)
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68d8      	ldr	r0, [r3, #12]
 800b0ee:	b14c      	cbz	r4, 800b104 <__assert_func+0x24>
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <__assert_func+0x30>)
 800b0f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0f6:	9100      	str	r1, [sp, #0]
 800b0f8:	462b      	mov	r3, r5
 800b0fa:	4906      	ldr	r1, [pc, #24]	; (800b114 <__assert_func+0x34>)
 800b0fc:	f000 f80e 	bl	800b11c <fiprintf>
 800b100:	f001 fcee 	bl	800cae0 <abort>
 800b104:	4b04      	ldr	r3, [pc, #16]	; (800b118 <__assert_func+0x38>)
 800b106:	461c      	mov	r4, r3
 800b108:	e7f3      	b.n	800b0f2 <__assert_func+0x12>
 800b10a:	bf00      	nop
 800b10c:	20000194 	.word	0x20000194
 800b110:	0800d488 	.word	0x0800d488
 800b114:	0800d495 	.word	0x0800d495
 800b118:	0800d4c3 	.word	0x0800d4c3

0800b11c <fiprintf>:
 800b11c:	b40e      	push	{r1, r2, r3}
 800b11e:	b503      	push	{r0, r1, lr}
 800b120:	4601      	mov	r1, r0
 800b122:	ab03      	add	r3, sp, #12
 800b124:	4805      	ldr	r0, [pc, #20]	; (800b13c <fiprintf+0x20>)
 800b126:	f853 2b04 	ldr.w	r2, [r3], #4
 800b12a:	6800      	ldr	r0, [r0, #0]
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	f001 f91b 	bl	800c368 <_vfiprintf_r>
 800b132:	b002      	add	sp, #8
 800b134:	f85d eb04 	ldr.w	lr, [sp], #4
 800b138:	b003      	add	sp, #12
 800b13a:	4770      	bx	lr
 800b13c:	20000194 	.word	0x20000194

0800b140 <rshift>:
 800b140:	6903      	ldr	r3, [r0, #16]
 800b142:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b146:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b14a:	f100 0414 	add.w	r4, r0, #20
 800b14e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b152:	dd46      	ble.n	800b1e2 <rshift+0xa2>
 800b154:	f011 011f 	ands.w	r1, r1, #31
 800b158:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b15c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b160:	d10c      	bne.n	800b17c <rshift+0x3c>
 800b162:	4629      	mov	r1, r5
 800b164:	f100 0710 	add.w	r7, r0, #16
 800b168:	42b1      	cmp	r1, r6
 800b16a:	d335      	bcc.n	800b1d8 <rshift+0x98>
 800b16c:	1a9b      	subs	r3, r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	1eea      	subs	r2, r5, #3
 800b172:	4296      	cmp	r6, r2
 800b174:	bf38      	it	cc
 800b176:	2300      	movcc	r3, #0
 800b178:	4423      	add	r3, r4
 800b17a:	e015      	b.n	800b1a8 <rshift+0x68>
 800b17c:	46a1      	mov	r9, r4
 800b17e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b182:	f1c1 0820 	rsb	r8, r1, #32
 800b186:	40cf      	lsrs	r7, r1
 800b188:	f105 0e04 	add.w	lr, r5, #4
 800b18c:	4576      	cmp	r6, lr
 800b18e:	46f4      	mov	ip, lr
 800b190:	d816      	bhi.n	800b1c0 <rshift+0x80>
 800b192:	1a9b      	subs	r3, r3, r2
 800b194:	009a      	lsls	r2, r3, #2
 800b196:	3a04      	subs	r2, #4
 800b198:	3501      	adds	r5, #1
 800b19a:	42ae      	cmp	r6, r5
 800b19c:	bf38      	it	cc
 800b19e:	2200      	movcc	r2, #0
 800b1a0:	18a3      	adds	r3, r4, r2
 800b1a2:	50a7      	str	r7, [r4, r2]
 800b1a4:	b107      	cbz	r7, 800b1a8 <rshift+0x68>
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	42a3      	cmp	r3, r4
 800b1aa:	eba3 0204 	sub.w	r2, r3, r4
 800b1ae:	bf08      	it	eq
 800b1b0:	2300      	moveq	r3, #0
 800b1b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1b6:	6102      	str	r2, [r0, #16]
 800b1b8:	bf08      	it	eq
 800b1ba:	6143      	streq	r3, [r0, #20]
 800b1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1c0:	f8dc c000 	ldr.w	ip, [ip]
 800b1c4:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1c8:	ea4c 0707 	orr.w	r7, ip, r7
 800b1cc:	f849 7b04 	str.w	r7, [r9], #4
 800b1d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1d4:	40cf      	lsrs	r7, r1
 800b1d6:	e7d9      	b.n	800b18c <rshift+0x4c>
 800b1d8:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1dc:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1e0:	e7c2      	b.n	800b168 <rshift+0x28>
 800b1e2:	4623      	mov	r3, r4
 800b1e4:	e7e0      	b.n	800b1a8 <rshift+0x68>

0800b1e6 <__hexdig_fun>:
 800b1e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b1ea:	2b09      	cmp	r3, #9
 800b1ec:	d802      	bhi.n	800b1f4 <__hexdig_fun+0xe>
 800b1ee:	3820      	subs	r0, #32
 800b1f0:	b2c0      	uxtb	r0, r0
 800b1f2:	4770      	bx	lr
 800b1f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b1f8:	2b05      	cmp	r3, #5
 800b1fa:	d801      	bhi.n	800b200 <__hexdig_fun+0x1a>
 800b1fc:	3847      	subs	r0, #71	; 0x47
 800b1fe:	e7f7      	b.n	800b1f0 <__hexdig_fun+0xa>
 800b200:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b204:	2b05      	cmp	r3, #5
 800b206:	d801      	bhi.n	800b20c <__hexdig_fun+0x26>
 800b208:	3827      	subs	r0, #39	; 0x27
 800b20a:	e7f1      	b.n	800b1f0 <__hexdig_fun+0xa>
 800b20c:	2000      	movs	r0, #0
 800b20e:	4770      	bx	lr

0800b210 <__gethex>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	b08b      	sub	sp, #44	; 0x2c
 800b216:	9306      	str	r3, [sp, #24]
 800b218:	4bb9      	ldr	r3, [pc, #740]	; (800b500 <__gethex+0x2f0>)
 800b21a:	9002      	str	r0, [sp, #8]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	468b      	mov	fp, r1
 800b220:	4618      	mov	r0, r3
 800b222:	4690      	mov	r8, r2
 800b224:	9303      	str	r3, [sp, #12]
 800b226:	f7f4 ffb5 	bl	8000194 <strlen>
 800b22a:	4682      	mov	sl, r0
 800b22c:	9b03      	ldr	r3, [sp, #12]
 800b22e:	f8db 2000 	ldr.w	r2, [fp]
 800b232:	4403      	add	r3, r0
 800b234:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b238:	9307      	str	r3, [sp, #28]
 800b23a:	1c93      	adds	r3, r2, #2
 800b23c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b240:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b244:	32fe      	adds	r2, #254	; 0xfe
 800b246:	18d1      	adds	r1, r2, r3
 800b248:	461f      	mov	r7, r3
 800b24a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b24e:	9101      	str	r1, [sp, #4]
 800b250:	2830      	cmp	r0, #48	; 0x30
 800b252:	d0f8      	beq.n	800b246 <__gethex+0x36>
 800b254:	f7ff ffc7 	bl	800b1e6 <__hexdig_fun>
 800b258:	4604      	mov	r4, r0
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d13a      	bne.n	800b2d4 <__gethex+0xc4>
 800b25e:	4652      	mov	r2, sl
 800b260:	4638      	mov	r0, r7
 800b262:	9903      	ldr	r1, [sp, #12]
 800b264:	f001 fb5c 	bl	800c920 <strncmp>
 800b268:	4605      	mov	r5, r0
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d166      	bne.n	800b33c <__gethex+0x12c>
 800b26e:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b272:	eb07 060a 	add.w	r6, r7, sl
 800b276:	f7ff ffb6 	bl	800b1e6 <__hexdig_fun>
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d060      	beq.n	800b340 <__gethex+0x130>
 800b27e:	4633      	mov	r3, r6
 800b280:	7818      	ldrb	r0, [r3, #0]
 800b282:	461f      	mov	r7, r3
 800b284:	2830      	cmp	r0, #48	; 0x30
 800b286:	f103 0301 	add.w	r3, r3, #1
 800b28a:	d0f9      	beq.n	800b280 <__gethex+0x70>
 800b28c:	f7ff ffab 	bl	800b1e6 <__hexdig_fun>
 800b290:	2301      	movs	r3, #1
 800b292:	fab0 f480 	clz	r4, r0
 800b296:	4635      	mov	r5, r6
 800b298:	0964      	lsrs	r4, r4, #5
 800b29a:	9301      	str	r3, [sp, #4]
 800b29c:	463a      	mov	r2, r7
 800b29e:	4616      	mov	r6, r2
 800b2a0:	7830      	ldrb	r0, [r6, #0]
 800b2a2:	3201      	adds	r2, #1
 800b2a4:	f7ff ff9f 	bl	800b1e6 <__hexdig_fun>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d1f8      	bne.n	800b29e <__gethex+0x8e>
 800b2ac:	4652      	mov	r2, sl
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	9903      	ldr	r1, [sp, #12]
 800b2b2:	f001 fb35 	bl	800c920 <strncmp>
 800b2b6:	b980      	cbnz	r0, 800b2da <__gethex+0xca>
 800b2b8:	b94d      	cbnz	r5, 800b2ce <__gethex+0xbe>
 800b2ba:	eb06 050a 	add.w	r5, r6, sl
 800b2be:	462a      	mov	r2, r5
 800b2c0:	4616      	mov	r6, r2
 800b2c2:	7830      	ldrb	r0, [r6, #0]
 800b2c4:	3201      	adds	r2, #1
 800b2c6:	f7ff ff8e 	bl	800b1e6 <__hexdig_fun>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d1f8      	bne.n	800b2c0 <__gethex+0xb0>
 800b2ce:	1bad      	subs	r5, r5, r6
 800b2d0:	00ad      	lsls	r5, r5, #2
 800b2d2:	e004      	b.n	800b2de <__gethex+0xce>
 800b2d4:	2400      	movs	r4, #0
 800b2d6:	4625      	mov	r5, r4
 800b2d8:	e7e0      	b.n	800b29c <__gethex+0x8c>
 800b2da:	2d00      	cmp	r5, #0
 800b2dc:	d1f7      	bne.n	800b2ce <__gethex+0xbe>
 800b2de:	7833      	ldrb	r3, [r6, #0]
 800b2e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2e4:	2b50      	cmp	r3, #80	; 0x50
 800b2e6:	d139      	bne.n	800b35c <__gethex+0x14c>
 800b2e8:	7873      	ldrb	r3, [r6, #1]
 800b2ea:	2b2b      	cmp	r3, #43	; 0x2b
 800b2ec:	d02a      	beq.n	800b344 <__gethex+0x134>
 800b2ee:	2b2d      	cmp	r3, #45	; 0x2d
 800b2f0:	d02c      	beq.n	800b34c <__gethex+0x13c>
 800b2f2:	f04f 0900 	mov.w	r9, #0
 800b2f6:	1c71      	adds	r1, r6, #1
 800b2f8:	7808      	ldrb	r0, [r1, #0]
 800b2fa:	f7ff ff74 	bl	800b1e6 <__hexdig_fun>
 800b2fe:	1e43      	subs	r3, r0, #1
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b18      	cmp	r3, #24
 800b304:	d82a      	bhi.n	800b35c <__gethex+0x14c>
 800b306:	f1a0 0210 	sub.w	r2, r0, #16
 800b30a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b30e:	f7ff ff6a 	bl	800b1e6 <__hexdig_fun>
 800b312:	1e43      	subs	r3, r0, #1
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b18      	cmp	r3, #24
 800b318:	d91b      	bls.n	800b352 <__gethex+0x142>
 800b31a:	f1b9 0f00 	cmp.w	r9, #0
 800b31e:	d000      	beq.n	800b322 <__gethex+0x112>
 800b320:	4252      	negs	r2, r2
 800b322:	4415      	add	r5, r2
 800b324:	f8cb 1000 	str.w	r1, [fp]
 800b328:	b1d4      	cbz	r4, 800b360 <__gethex+0x150>
 800b32a:	9b01      	ldr	r3, [sp, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	bf14      	ite	ne
 800b330:	2700      	movne	r7, #0
 800b332:	2706      	moveq	r7, #6
 800b334:	4638      	mov	r0, r7
 800b336:	b00b      	add	sp, #44	; 0x2c
 800b338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33c:	463e      	mov	r6, r7
 800b33e:	4625      	mov	r5, r4
 800b340:	2401      	movs	r4, #1
 800b342:	e7cc      	b.n	800b2de <__gethex+0xce>
 800b344:	f04f 0900 	mov.w	r9, #0
 800b348:	1cb1      	adds	r1, r6, #2
 800b34a:	e7d5      	b.n	800b2f8 <__gethex+0xe8>
 800b34c:	f04f 0901 	mov.w	r9, #1
 800b350:	e7fa      	b.n	800b348 <__gethex+0x138>
 800b352:	230a      	movs	r3, #10
 800b354:	fb03 0202 	mla	r2, r3, r2, r0
 800b358:	3a10      	subs	r2, #16
 800b35a:	e7d6      	b.n	800b30a <__gethex+0xfa>
 800b35c:	4631      	mov	r1, r6
 800b35e:	e7e1      	b.n	800b324 <__gethex+0x114>
 800b360:	4621      	mov	r1, r4
 800b362:	1bf3      	subs	r3, r6, r7
 800b364:	3b01      	subs	r3, #1
 800b366:	2b07      	cmp	r3, #7
 800b368:	dc0a      	bgt.n	800b380 <__gethex+0x170>
 800b36a:	9802      	ldr	r0, [sp, #8]
 800b36c:	f000 fa68 	bl	800b840 <_Balloc>
 800b370:	4604      	mov	r4, r0
 800b372:	b940      	cbnz	r0, 800b386 <__gethex+0x176>
 800b374:	4602      	mov	r2, r0
 800b376:	21de      	movs	r1, #222	; 0xde
 800b378:	4b62      	ldr	r3, [pc, #392]	; (800b504 <__gethex+0x2f4>)
 800b37a:	4863      	ldr	r0, [pc, #396]	; (800b508 <__gethex+0x2f8>)
 800b37c:	f7ff feb0 	bl	800b0e0 <__assert_func>
 800b380:	3101      	adds	r1, #1
 800b382:	105b      	asrs	r3, r3, #1
 800b384:	e7ef      	b.n	800b366 <__gethex+0x156>
 800b386:	f04f 0b00 	mov.w	fp, #0
 800b38a:	f100 0914 	add.w	r9, r0, #20
 800b38e:	f1ca 0301 	rsb	r3, sl, #1
 800b392:	f8cd 9010 	str.w	r9, [sp, #16]
 800b396:	f8cd b004 	str.w	fp, [sp, #4]
 800b39a:	9308      	str	r3, [sp, #32]
 800b39c:	42b7      	cmp	r7, r6
 800b39e:	d33f      	bcc.n	800b420 <__gethex+0x210>
 800b3a0:	9f04      	ldr	r7, [sp, #16]
 800b3a2:	9b01      	ldr	r3, [sp, #4]
 800b3a4:	f847 3b04 	str.w	r3, [r7], #4
 800b3a8:	eba7 0709 	sub.w	r7, r7, r9
 800b3ac:	10bf      	asrs	r7, r7, #2
 800b3ae:	6127      	str	r7, [r4, #16]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 fb3b 	bl	800ba2c <__hi0bits>
 800b3b6:	017f      	lsls	r7, r7, #5
 800b3b8:	f8d8 6000 	ldr.w	r6, [r8]
 800b3bc:	1a3f      	subs	r7, r7, r0
 800b3be:	42b7      	cmp	r7, r6
 800b3c0:	dd62      	ble.n	800b488 <__gethex+0x278>
 800b3c2:	1bbf      	subs	r7, r7, r6
 800b3c4:	4639      	mov	r1, r7
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 fed1 	bl	800c16e <__any_on>
 800b3cc:	4682      	mov	sl, r0
 800b3ce:	b1a8      	cbz	r0, 800b3fc <__gethex+0x1ec>
 800b3d0:	f04f 0a01 	mov.w	sl, #1
 800b3d4:	1e7b      	subs	r3, r7, #1
 800b3d6:	1159      	asrs	r1, r3, #5
 800b3d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b3dc:	f003 021f 	and.w	r2, r3, #31
 800b3e0:	fa0a f202 	lsl.w	r2, sl, r2
 800b3e4:	420a      	tst	r2, r1
 800b3e6:	d009      	beq.n	800b3fc <__gethex+0x1ec>
 800b3e8:	4553      	cmp	r3, sl
 800b3ea:	dd05      	ble.n	800b3f8 <__gethex+0x1e8>
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	1eb9      	subs	r1, r7, #2
 800b3f0:	f000 febd 	bl	800c16e <__any_on>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d144      	bne.n	800b482 <__gethex+0x272>
 800b3f8:	f04f 0a02 	mov.w	sl, #2
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	4620      	mov	r0, r4
 800b400:	f7ff fe9e 	bl	800b140 <rshift>
 800b404:	443d      	add	r5, r7
 800b406:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b40a:	42ab      	cmp	r3, r5
 800b40c:	da4a      	bge.n	800b4a4 <__gethex+0x294>
 800b40e:	4621      	mov	r1, r4
 800b410:	9802      	ldr	r0, [sp, #8]
 800b412:	f000 fa55 	bl	800b8c0 <_Bfree>
 800b416:	2300      	movs	r3, #0
 800b418:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b41a:	27a3      	movs	r7, #163	; 0xa3
 800b41c:	6013      	str	r3, [r2, #0]
 800b41e:	e789      	b.n	800b334 <__gethex+0x124>
 800b420:	1e73      	subs	r3, r6, #1
 800b422:	9a07      	ldr	r2, [sp, #28]
 800b424:	9305      	str	r3, [sp, #20]
 800b426:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d019      	beq.n	800b462 <__gethex+0x252>
 800b42e:	f1bb 0f20 	cmp.w	fp, #32
 800b432:	d107      	bne.n	800b444 <__gethex+0x234>
 800b434:	9b04      	ldr	r3, [sp, #16]
 800b436:	9a01      	ldr	r2, [sp, #4]
 800b438:	f843 2b04 	str.w	r2, [r3], #4
 800b43c:	9304      	str	r3, [sp, #16]
 800b43e:	2300      	movs	r3, #0
 800b440:	469b      	mov	fp, r3
 800b442:	9301      	str	r3, [sp, #4]
 800b444:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b448:	f7ff fecd 	bl	800b1e6 <__hexdig_fun>
 800b44c:	9b01      	ldr	r3, [sp, #4]
 800b44e:	f000 000f 	and.w	r0, r0, #15
 800b452:	fa00 f00b 	lsl.w	r0, r0, fp
 800b456:	4303      	orrs	r3, r0
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	f10b 0b04 	add.w	fp, fp, #4
 800b45e:	9b05      	ldr	r3, [sp, #20]
 800b460:	e00d      	b.n	800b47e <__gethex+0x26e>
 800b462:	9b05      	ldr	r3, [sp, #20]
 800b464:	9a08      	ldr	r2, [sp, #32]
 800b466:	4413      	add	r3, r2
 800b468:	42bb      	cmp	r3, r7
 800b46a:	d3e0      	bcc.n	800b42e <__gethex+0x21e>
 800b46c:	4618      	mov	r0, r3
 800b46e:	4652      	mov	r2, sl
 800b470:	9903      	ldr	r1, [sp, #12]
 800b472:	9309      	str	r3, [sp, #36]	; 0x24
 800b474:	f001 fa54 	bl	800c920 <strncmp>
 800b478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d1d7      	bne.n	800b42e <__gethex+0x21e>
 800b47e:	461e      	mov	r6, r3
 800b480:	e78c      	b.n	800b39c <__gethex+0x18c>
 800b482:	f04f 0a03 	mov.w	sl, #3
 800b486:	e7b9      	b.n	800b3fc <__gethex+0x1ec>
 800b488:	da09      	bge.n	800b49e <__gethex+0x28e>
 800b48a:	1bf7      	subs	r7, r6, r7
 800b48c:	4621      	mov	r1, r4
 800b48e:	463a      	mov	r2, r7
 800b490:	9802      	ldr	r0, [sp, #8]
 800b492:	f000 fc2d 	bl	800bcf0 <__lshift>
 800b496:	4604      	mov	r4, r0
 800b498:	1bed      	subs	r5, r5, r7
 800b49a:	f100 0914 	add.w	r9, r0, #20
 800b49e:	f04f 0a00 	mov.w	sl, #0
 800b4a2:	e7b0      	b.n	800b406 <__gethex+0x1f6>
 800b4a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4a8:	42a8      	cmp	r0, r5
 800b4aa:	dd71      	ble.n	800b590 <__gethex+0x380>
 800b4ac:	1b45      	subs	r5, r0, r5
 800b4ae:	42ae      	cmp	r6, r5
 800b4b0:	dc34      	bgt.n	800b51c <__gethex+0x30c>
 800b4b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d028      	beq.n	800b50c <__gethex+0x2fc>
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d02a      	beq.n	800b514 <__gethex+0x304>
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d115      	bne.n	800b4ee <__gethex+0x2de>
 800b4c2:	42ae      	cmp	r6, r5
 800b4c4:	d113      	bne.n	800b4ee <__gethex+0x2de>
 800b4c6:	2e01      	cmp	r6, #1
 800b4c8:	d10b      	bne.n	800b4e2 <__gethex+0x2d2>
 800b4ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b4ce:	9a06      	ldr	r2, [sp, #24]
 800b4d0:	2762      	movs	r7, #98	; 0x62
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	6123      	str	r3, [r4, #16]
 800b4d8:	f8c9 3000 	str.w	r3, [r9]
 800b4dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4de:	601c      	str	r4, [r3, #0]
 800b4e0:	e728      	b.n	800b334 <__gethex+0x124>
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	1e71      	subs	r1, r6, #1
 800b4e6:	f000 fe42 	bl	800c16e <__any_on>
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	d1ed      	bne.n	800b4ca <__gethex+0x2ba>
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	9802      	ldr	r0, [sp, #8]
 800b4f2:	f000 f9e5 	bl	800b8c0 <_Bfree>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4fa:	2750      	movs	r7, #80	; 0x50
 800b4fc:	6013      	str	r3, [r2, #0]
 800b4fe:	e719      	b.n	800b334 <__gethex+0x124>
 800b500:	0800d540 	.word	0x0800d540
 800b504:	0800d4c4 	.word	0x0800d4c4
 800b508:	0800d4d5 	.word	0x0800d4d5
 800b50c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1ed      	bne.n	800b4ee <__gethex+0x2de>
 800b512:	e7da      	b.n	800b4ca <__gethex+0x2ba>
 800b514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b516:	2b00      	cmp	r3, #0
 800b518:	d1d7      	bne.n	800b4ca <__gethex+0x2ba>
 800b51a:	e7e8      	b.n	800b4ee <__gethex+0x2de>
 800b51c:	1e6f      	subs	r7, r5, #1
 800b51e:	f1ba 0f00 	cmp.w	sl, #0
 800b522:	d132      	bne.n	800b58a <__gethex+0x37a>
 800b524:	b127      	cbz	r7, 800b530 <__gethex+0x320>
 800b526:	4639      	mov	r1, r7
 800b528:	4620      	mov	r0, r4
 800b52a:	f000 fe20 	bl	800c16e <__any_on>
 800b52e:	4682      	mov	sl, r0
 800b530:	2101      	movs	r1, #1
 800b532:	117b      	asrs	r3, r7, #5
 800b534:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b538:	f007 071f 	and.w	r7, r7, #31
 800b53c:	fa01 f707 	lsl.w	r7, r1, r7
 800b540:	421f      	tst	r7, r3
 800b542:	f04f 0702 	mov.w	r7, #2
 800b546:	4629      	mov	r1, r5
 800b548:	4620      	mov	r0, r4
 800b54a:	bf18      	it	ne
 800b54c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b550:	1b76      	subs	r6, r6, r5
 800b552:	f7ff fdf5 	bl	800b140 <rshift>
 800b556:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b55a:	f1ba 0f00 	cmp.w	sl, #0
 800b55e:	d048      	beq.n	800b5f2 <__gethex+0x3e2>
 800b560:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b564:	2b02      	cmp	r3, #2
 800b566:	d015      	beq.n	800b594 <__gethex+0x384>
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d017      	beq.n	800b59c <__gethex+0x38c>
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d109      	bne.n	800b584 <__gethex+0x374>
 800b570:	f01a 0f02 	tst.w	sl, #2
 800b574:	d006      	beq.n	800b584 <__gethex+0x374>
 800b576:	f8d9 0000 	ldr.w	r0, [r9]
 800b57a:	ea4a 0a00 	orr.w	sl, sl, r0
 800b57e:	f01a 0f01 	tst.w	sl, #1
 800b582:	d10e      	bne.n	800b5a2 <__gethex+0x392>
 800b584:	f047 0710 	orr.w	r7, r7, #16
 800b588:	e033      	b.n	800b5f2 <__gethex+0x3e2>
 800b58a:	f04f 0a01 	mov.w	sl, #1
 800b58e:	e7cf      	b.n	800b530 <__gethex+0x320>
 800b590:	2701      	movs	r7, #1
 800b592:	e7e2      	b.n	800b55a <__gethex+0x34a>
 800b594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b596:	f1c3 0301 	rsb	r3, r3, #1
 800b59a:	9315      	str	r3, [sp, #84]	; 0x54
 800b59c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d0f0      	beq.n	800b584 <__gethex+0x374>
 800b5a2:	f04f 0c00 	mov.w	ip, #0
 800b5a6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5aa:	f104 0314 	add.w	r3, r4, #20
 800b5ae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b5b2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b5c0:	d01c      	beq.n	800b5fc <__gethex+0x3ec>
 800b5c2:	3201      	adds	r2, #1
 800b5c4:	6002      	str	r2, [r0, #0]
 800b5c6:	2f02      	cmp	r7, #2
 800b5c8:	f104 0314 	add.w	r3, r4, #20
 800b5cc:	d13d      	bne.n	800b64a <__gethex+0x43a>
 800b5ce:	f8d8 2000 	ldr.w	r2, [r8]
 800b5d2:	3a01      	subs	r2, #1
 800b5d4:	42b2      	cmp	r2, r6
 800b5d6:	d10a      	bne.n	800b5ee <__gethex+0x3de>
 800b5d8:	2201      	movs	r2, #1
 800b5da:	1171      	asrs	r1, r6, #5
 800b5dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5e0:	f006 061f 	and.w	r6, r6, #31
 800b5e4:	fa02 f606 	lsl.w	r6, r2, r6
 800b5e8:	421e      	tst	r6, r3
 800b5ea:	bf18      	it	ne
 800b5ec:	4617      	movne	r7, r2
 800b5ee:	f047 0720 	orr.w	r7, r7, #32
 800b5f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5f4:	601c      	str	r4, [r3, #0]
 800b5f6:	9b06      	ldr	r3, [sp, #24]
 800b5f8:	601d      	str	r5, [r3, #0]
 800b5fa:	e69b      	b.n	800b334 <__gethex+0x124>
 800b5fc:	4299      	cmp	r1, r3
 800b5fe:	f843 cc04 	str.w	ip, [r3, #-4]
 800b602:	d8d8      	bhi.n	800b5b6 <__gethex+0x3a6>
 800b604:	68a3      	ldr	r3, [r4, #8]
 800b606:	459b      	cmp	fp, r3
 800b608:	db17      	blt.n	800b63a <__gethex+0x42a>
 800b60a:	6861      	ldr	r1, [r4, #4]
 800b60c:	9802      	ldr	r0, [sp, #8]
 800b60e:	3101      	adds	r1, #1
 800b610:	f000 f916 	bl	800b840 <_Balloc>
 800b614:	4681      	mov	r9, r0
 800b616:	b918      	cbnz	r0, 800b620 <__gethex+0x410>
 800b618:	4602      	mov	r2, r0
 800b61a:	2184      	movs	r1, #132	; 0x84
 800b61c:	4b19      	ldr	r3, [pc, #100]	; (800b684 <__gethex+0x474>)
 800b61e:	e6ac      	b.n	800b37a <__gethex+0x16a>
 800b620:	6922      	ldr	r2, [r4, #16]
 800b622:	f104 010c 	add.w	r1, r4, #12
 800b626:	3202      	adds	r2, #2
 800b628:	0092      	lsls	r2, r2, #2
 800b62a:	300c      	adds	r0, #12
 800b62c:	f7fe febc 	bl	800a3a8 <memcpy>
 800b630:	4621      	mov	r1, r4
 800b632:	9802      	ldr	r0, [sp, #8]
 800b634:	f000 f944 	bl	800b8c0 <_Bfree>
 800b638:	464c      	mov	r4, r9
 800b63a:	6923      	ldr	r3, [r4, #16]
 800b63c:	1c5a      	adds	r2, r3, #1
 800b63e:	6122      	str	r2, [r4, #16]
 800b640:	2201      	movs	r2, #1
 800b642:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b646:	615a      	str	r2, [r3, #20]
 800b648:	e7bd      	b.n	800b5c6 <__gethex+0x3b6>
 800b64a:	6922      	ldr	r2, [r4, #16]
 800b64c:	455a      	cmp	r2, fp
 800b64e:	dd0b      	ble.n	800b668 <__gethex+0x458>
 800b650:	2101      	movs	r1, #1
 800b652:	4620      	mov	r0, r4
 800b654:	f7ff fd74 	bl	800b140 <rshift>
 800b658:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b65c:	3501      	adds	r5, #1
 800b65e:	42ab      	cmp	r3, r5
 800b660:	f6ff aed5 	blt.w	800b40e <__gethex+0x1fe>
 800b664:	2701      	movs	r7, #1
 800b666:	e7c2      	b.n	800b5ee <__gethex+0x3de>
 800b668:	f016 061f 	ands.w	r6, r6, #31
 800b66c:	d0fa      	beq.n	800b664 <__gethex+0x454>
 800b66e:	449a      	add	sl, r3
 800b670:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b674:	f000 f9da 	bl	800ba2c <__hi0bits>
 800b678:	f1c6 0620 	rsb	r6, r6, #32
 800b67c:	42b0      	cmp	r0, r6
 800b67e:	dbe7      	blt.n	800b650 <__gethex+0x440>
 800b680:	e7f0      	b.n	800b664 <__gethex+0x454>
 800b682:	bf00      	nop
 800b684:	0800d4c4 	.word	0x0800d4c4

0800b688 <L_shift>:
 800b688:	f1c2 0208 	rsb	r2, r2, #8
 800b68c:	0092      	lsls	r2, r2, #2
 800b68e:	b570      	push	{r4, r5, r6, lr}
 800b690:	f1c2 0620 	rsb	r6, r2, #32
 800b694:	6843      	ldr	r3, [r0, #4]
 800b696:	6804      	ldr	r4, [r0, #0]
 800b698:	fa03 f506 	lsl.w	r5, r3, r6
 800b69c:	432c      	orrs	r4, r5
 800b69e:	40d3      	lsrs	r3, r2
 800b6a0:	6004      	str	r4, [r0, #0]
 800b6a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6a6:	4288      	cmp	r0, r1
 800b6a8:	d3f4      	bcc.n	800b694 <L_shift+0xc>
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}

0800b6ac <__match>:
 800b6ac:	b530      	push	{r4, r5, lr}
 800b6ae:	6803      	ldr	r3, [r0, #0]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6b6:	b914      	cbnz	r4, 800b6be <__match+0x12>
 800b6b8:	6003      	str	r3, [r0, #0]
 800b6ba:	2001      	movs	r0, #1
 800b6bc:	bd30      	pop	{r4, r5, pc}
 800b6be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6c6:	2d19      	cmp	r5, #25
 800b6c8:	bf98      	it	ls
 800b6ca:	3220      	addls	r2, #32
 800b6cc:	42a2      	cmp	r2, r4
 800b6ce:	d0f0      	beq.n	800b6b2 <__match+0x6>
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e7f3      	b.n	800b6bc <__match+0x10>

0800b6d4 <__hexnan>:
 800b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d8:	2500      	movs	r5, #0
 800b6da:	680b      	ldr	r3, [r1, #0]
 800b6dc:	4682      	mov	sl, r0
 800b6de:	115e      	asrs	r6, r3, #5
 800b6e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6e4:	f013 031f 	ands.w	r3, r3, #31
 800b6e8:	bf18      	it	ne
 800b6ea:	3604      	addne	r6, #4
 800b6ec:	1f37      	subs	r7, r6, #4
 800b6ee:	4690      	mov	r8, r2
 800b6f0:	46b9      	mov	r9, r7
 800b6f2:	463c      	mov	r4, r7
 800b6f4:	46ab      	mov	fp, r5
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	6801      	ldr	r1, [r0, #0]
 800b6fa:	9301      	str	r3, [sp, #4]
 800b6fc:	f846 5c04 	str.w	r5, [r6, #-4]
 800b700:	9502      	str	r5, [sp, #8]
 800b702:	784a      	ldrb	r2, [r1, #1]
 800b704:	1c4b      	adds	r3, r1, #1
 800b706:	9303      	str	r3, [sp, #12]
 800b708:	b342      	cbz	r2, 800b75c <__hexnan+0x88>
 800b70a:	4610      	mov	r0, r2
 800b70c:	9105      	str	r1, [sp, #20]
 800b70e:	9204      	str	r2, [sp, #16]
 800b710:	f7ff fd69 	bl	800b1e6 <__hexdig_fun>
 800b714:	2800      	cmp	r0, #0
 800b716:	d14f      	bne.n	800b7b8 <__hexnan+0xe4>
 800b718:	9a04      	ldr	r2, [sp, #16]
 800b71a:	9905      	ldr	r1, [sp, #20]
 800b71c:	2a20      	cmp	r2, #32
 800b71e:	d818      	bhi.n	800b752 <__hexnan+0x7e>
 800b720:	9b02      	ldr	r3, [sp, #8]
 800b722:	459b      	cmp	fp, r3
 800b724:	dd13      	ble.n	800b74e <__hexnan+0x7a>
 800b726:	454c      	cmp	r4, r9
 800b728:	d206      	bcs.n	800b738 <__hexnan+0x64>
 800b72a:	2d07      	cmp	r5, #7
 800b72c:	dc04      	bgt.n	800b738 <__hexnan+0x64>
 800b72e:	462a      	mov	r2, r5
 800b730:	4649      	mov	r1, r9
 800b732:	4620      	mov	r0, r4
 800b734:	f7ff ffa8 	bl	800b688 <L_shift>
 800b738:	4544      	cmp	r4, r8
 800b73a:	d950      	bls.n	800b7de <__hexnan+0x10a>
 800b73c:	2300      	movs	r3, #0
 800b73e:	f1a4 0904 	sub.w	r9, r4, #4
 800b742:	f844 3c04 	str.w	r3, [r4, #-4]
 800b746:	461d      	mov	r5, r3
 800b748:	464c      	mov	r4, r9
 800b74a:	f8cd b008 	str.w	fp, [sp, #8]
 800b74e:	9903      	ldr	r1, [sp, #12]
 800b750:	e7d7      	b.n	800b702 <__hexnan+0x2e>
 800b752:	2a29      	cmp	r2, #41	; 0x29
 800b754:	d156      	bne.n	800b804 <__hexnan+0x130>
 800b756:	3102      	adds	r1, #2
 800b758:	f8ca 1000 	str.w	r1, [sl]
 800b75c:	f1bb 0f00 	cmp.w	fp, #0
 800b760:	d050      	beq.n	800b804 <__hexnan+0x130>
 800b762:	454c      	cmp	r4, r9
 800b764:	d206      	bcs.n	800b774 <__hexnan+0xa0>
 800b766:	2d07      	cmp	r5, #7
 800b768:	dc04      	bgt.n	800b774 <__hexnan+0xa0>
 800b76a:	462a      	mov	r2, r5
 800b76c:	4649      	mov	r1, r9
 800b76e:	4620      	mov	r0, r4
 800b770:	f7ff ff8a 	bl	800b688 <L_shift>
 800b774:	4544      	cmp	r4, r8
 800b776:	d934      	bls.n	800b7e2 <__hexnan+0x10e>
 800b778:	4623      	mov	r3, r4
 800b77a:	f1a8 0204 	sub.w	r2, r8, #4
 800b77e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b782:	429f      	cmp	r7, r3
 800b784:	f842 1f04 	str.w	r1, [r2, #4]!
 800b788:	d2f9      	bcs.n	800b77e <__hexnan+0xaa>
 800b78a:	1b3b      	subs	r3, r7, r4
 800b78c:	f023 0303 	bic.w	r3, r3, #3
 800b790:	3304      	adds	r3, #4
 800b792:	3401      	adds	r4, #1
 800b794:	3e03      	subs	r6, #3
 800b796:	42b4      	cmp	r4, r6
 800b798:	bf88      	it	hi
 800b79a:	2304      	movhi	r3, #4
 800b79c:	2200      	movs	r2, #0
 800b79e:	4443      	add	r3, r8
 800b7a0:	f843 2b04 	str.w	r2, [r3], #4
 800b7a4:	429f      	cmp	r7, r3
 800b7a6:	d2fb      	bcs.n	800b7a0 <__hexnan+0xcc>
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	b91b      	cbnz	r3, 800b7b4 <__hexnan+0xe0>
 800b7ac:	4547      	cmp	r7, r8
 800b7ae:	d127      	bne.n	800b800 <__hexnan+0x12c>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	603b      	str	r3, [r7, #0]
 800b7b4:	2005      	movs	r0, #5
 800b7b6:	e026      	b.n	800b806 <__hexnan+0x132>
 800b7b8:	3501      	adds	r5, #1
 800b7ba:	2d08      	cmp	r5, #8
 800b7bc:	f10b 0b01 	add.w	fp, fp, #1
 800b7c0:	dd06      	ble.n	800b7d0 <__hexnan+0xfc>
 800b7c2:	4544      	cmp	r4, r8
 800b7c4:	d9c3      	bls.n	800b74e <__hexnan+0x7a>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	2501      	movs	r5, #1
 800b7ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7ce:	3c04      	subs	r4, #4
 800b7d0:	6822      	ldr	r2, [r4, #0]
 800b7d2:	f000 000f 	and.w	r0, r0, #15
 800b7d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b7da:	6022      	str	r2, [r4, #0]
 800b7dc:	e7b7      	b.n	800b74e <__hexnan+0x7a>
 800b7de:	2508      	movs	r5, #8
 800b7e0:	e7b5      	b.n	800b74e <__hexnan+0x7a>
 800b7e2:	9b01      	ldr	r3, [sp, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d0df      	beq.n	800b7a8 <__hexnan+0xd4>
 800b7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ec:	f1c3 0320 	rsb	r3, r3, #32
 800b7f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b7f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7f8:	401a      	ands	r2, r3
 800b7fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800b7fe:	e7d3      	b.n	800b7a8 <__hexnan+0xd4>
 800b800:	3f04      	subs	r7, #4
 800b802:	e7d1      	b.n	800b7a8 <__hexnan+0xd4>
 800b804:	2004      	movs	r0, #4
 800b806:	b007      	add	sp, #28
 800b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b80c <malloc>:
 800b80c:	4b02      	ldr	r3, [pc, #8]	; (800b818 <malloc+0xc>)
 800b80e:	4601      	mov	r1, r0
 800b810:	6818      	ldr	r0, [r3, #0]
 800b812:	f000 bd27 	b.w	800c264 <_malloc_r>
 800b816:	bf00      	nop
 800b818:	20000194 	.word	0x20000194

0800b81c <__ascii_mbtowc>:
 800b81c:	b082      	sub	sp, #8
 800b81e:	b901      	cbnz	r1, 800b822 <__ascii_mbtowc+0x6>
 800b820:	a901      	add	r1, sp, #4
 800b822:	b142      	cbz	r2, 800b836 <__ascii_mbtowc+0x1a>
 800b824:	b14b      	cbz	r3, 800b83a <__ascii_mbtowc+0x1e>
 800b826:	7813      	ldrb	r3, [r2, #0]
 800b828:	600b      	str	r3, [r1, #0]
 800b82a:	7812      	ldrb	r2, [r2, #0]
 800b82c:	1e10      	subs	r0, r2, #0
 800b82e:	bf18      	it	ne
 800b830:	2001      	movne	r0, #1
 800b832:	b002      	add	sp, #8
 800b834:	4770      	bx	lr
 800b836:	4610      	mov	r0, r2
 800b838:	e7fb      	b.n	800b832 <__ascii_mbtowc+0x16>
 800b83a:	f06f 0001 	mvn.w	r0, #1
 800b83e:	e7f8      	b.n	800b832 <__ascii_mbtowc+0x16>

0800b840 <_Balloc>:
 800b840:	b570      	push	{r4, r5, r6, lr}
 800b842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b844:	4604      	mov	r4, r0
 800b846:	460d      	mov	r5, r1
 800b848:	b976      	cbnz	r6, 800b868 <_Balloc+0x28>
 800b84a:	2010      	movs	r0, #16
 800b84c:	f7ff ffde 	bl	800b80c <malloc>
 800b850:	4602      	mov	r2, r0
 800b852:	6260      	str	r0, [r4, #36]	; 0x24
 800b854:	b920      	cbnz	r0, 800b860 <_Balloc+0x20>
 800b856:	2166      	movs	r1, #102	; 0x66
 800b858:	4b17      	ldr	r3, [pc, #92]	; (800b8b8 <_Balloc+0x78>)
 800b85a:	4818      	ldr	r0, [pc, #96]	; (800b8bc <_Balloc+0x7c>)
 800b85c:	f7ff fc40 	bl	800b0e0 <__assert_func>
 800b860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b864:	6006      	str	r6, [r0, #0]
 800b866:	60c6      	str	r6, [r0, #12]
 800b868:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b86a:	68f3      	ldr	r3, [r6, #12]
 800b86c:	b183      	cbz	r3, 800b890 <_Balloc+0x50>
 800b86e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b876:	b9b8      	cbnz	r0, 800b8a8 <_Balloc+0x68>
 800b878:	2101      	movs	r1, #1
 800b87a:	fa01 f605 	lsl.w	r6, r1, r5
 800b87e:	1d72      	adds	r2, r6, #5
 800b880:	4620      	mov	r0, r4
 800b882:	0092      	lsls	r2, r2, #2
 800b884:	f000 fc94 	bl	800c1b0 <_calloc_r>
 800b888:	b160      	cbz	r0, 800b8a4 <_Balloc+0x64>
 800b88a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b88e:	e00e      	b.n	800b8ae <_Balloc+0x6e>
 800b890:	2221      	movs	r2, #33	; 0x21
 800b892:	2104      	movs	r1, #4
 800b894:	4620      	mov	r0, r4
 800b896:	f000 fc8b 	bl	800c1b0 <_calloc_r>
 800b89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b89c:	60f0      	str	r0, [r6, #12]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1e4      	bne.n	800b86e <_Balloc+0x2e>
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	bd70      	pop	{r4, r5, r6, pc}
 800b8a8:	6802      	ldr	r2, [r0, #0]
 800b8aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8b4:	e7f7      	b.n	800b8a6 <_Balloc+0x66>
 800b8b6:	bf00      	nop
 800b8b8:	0800d410 	.word	0x0800d410
 800b8bc:	0800d554 	.word	0x0800d554

0800b8c0 <_Bfree>:
 800b8c0:	b570      	push	{r4, r5, r6, lr}
 800b8c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	b976      	cbnz	r6, 800b8e8 <_Bfree+0x28>
 800b8ca:	2010      	movs	r0, #16
 800b8cc:	f7ff ff9e 	bl	800b80c <malloc>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	6268      	str	r0, [r5, #36]	; 0x24
 800b8d4:	b920      	cbnz	r0, 800b8e0 <_Bfree+0x20>
 800b8d6:	218a      	movs	r1, #138	; 0x8a
 800b8d8:	4b08      	ldr	r3, [pc, #32]	; (800b8fc <_Bfree+0x3c>)
 800b8da:	4809      	ldr	r0, [pc, #36]	; (800b900 <_Bfree+0x40>)
 800b8dc:	f7ff fc00 	bl	800b0e0 <__assert_func>
 800b8e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8e4:	6006      	str	r6, [r0, #0]
 800b8e6:	60c6      	str	r6, [r0, #12]
 800b8e8:	b13c      	cbz	r4, 800b8fa <_Bfree+0x3a>
 800b8ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8ec:	6862      	ldr	r2, [r4, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8f4:	6021      	str	r1, [r4, #0]
 800b8f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8fa:	bd70      	pop	{r4, r5, r6, pc}
 800b8fc:	0800d410 	.word	0x0800d410
 800b900:	0800d554 	.word	0x0800d554

0800b904 <__multadd>:
 800b904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b908:	4698      	mov	r8, r3
 800b90a:	460c      	mov	r4, r1
 800b90c:	2300      	movs	r3, #0
 800b90e:	690e      	ldr	r6, [r1, #16]
 800b910:	4607      	mov	r7, r0
 800b912:	f101 0014 	add.w	r0, r1, #20
 800b916:	6805      	ldr	r5, [r0, #0]
 800b918:	3301      	adds	r3, #1
 800b91a:	b2a9      	uxth	r1, r5
 800b91c:	fb02 8101 	mla	r1, r2, r1, r8
 800b920:	0c2d      	lsrs	r5, r5, #16
 800b922:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b926:	fb02 c505 	mla	r5, r2, r5, ip
 800b92a:	b289      	uxth	r1, r1
 800b92c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b930:	429e      	cmp	r6, r3
 800b932:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b936:	f840 1b04 	str.w	r1, [r0], #4
 800b93a:	dcec      	bgt.n	800b916 <__multadd+0x12>
 800b93c:	f1b8 0f00 	cmp.w	r8, #0
 800b940:	d022      	beq.n	800b988 <__multadd+0x84>
 800b942:	68a3      	ldr	r3, [r4, #8]
 800b944:	42b3      	cmp	r3, r6
 800b946:	dc19      	bgt.n	800b97c <__multadd+0x78>
 800b948:	6861      	ldr	r1, [r4, #4]
 800b94a:	4638      	mov	r0, r7
 800b94c:	3101      	adds	r1, #1
 800b94e:	f7ff ff77 	bl	800b840 <_Balloc>
 800b952:	4605      	mov	r5, r0
 800b954:	b928      	cbnz	r0, 800b962 <__multadd+0x5e>
 800b956:	4602      	mov	r2, r0
 800b958:	21b5      	movs	r1, #181	; 0xb5
 800b95a:	4b0d      	ldr	r3, [pc, #52]	; (800b990 <__multadd+0x8c>)
 800b95c:	480d      	ldr	r0, [pc, #52]	; (800b994 <__multadd+0x90>)
 800b95e:	f7ff fbbf 	bl	800b0e0 <__assert_func>
 800b962:	6922      	ldr	r2, [r4, #16]
 800b964:	f104 010c 	add.w	r1, r4, #12
 800b968:	3202      	adds	r2, #2
 800b96a:	0092      	lsls	r2, r2, #2
 800b96c:	300c      	adds	r0, #12
 800b96e:	f7fe fd1b 	bl	800a3a8 <memcpy>
 800b972:	4621      	mov	r1, r4
 800b974:	4638      	mov	r0, r7
 800b976:	f7ff ffa3 	bl	800b8c0 <_Bfree>
 800b97a:	462c      	mov	r4, r5
 800b97c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b980:	3601      	adds	r6, #1
 800b982:	f8c3 8014 	str.w	r8, [r3, #20]
 800b986:	6126      	str	r6, [r4, #16]
 800b988:	4620      	mov	r0, r4
 800b98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b98e:	bf00      	nop
 800b990:	0800d4c4 	.word	0x0800d4c4
 800b994:	0800d554 	.word	0x0800d554

0800b998 <__s2b>:
 800b998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b99c:	4615      	mov	r5, r2
 800b99e:	2209      	movs	r2, #9
 800b9a0:	461f      	mov	r7, r3
 800b9a2:	3308      	adds	r3, #8
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	db09      	blt.n	800b9c8 <__s2b+0x30>
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7ff ff43 	bl	800b840 <_Balloc>
 800b9ba:	b940      	cbnz	r0, 800b9ce <__s2b+0x36>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	21ce      	movs	r1, #206	; 0xce
 800b9c0:	4b18      	ldr	r3, [pc, #96]	; (800ba24 <__s2b+0x8c>)
 800b9c2:	4819      	ldr	r0, [pc, #100]	; (800ba28 <__s2b+0x90>)
 800b9c4:	f7ff fb8c 	bl	800b0e0 <__assert_func>
 800b9c8:	0052      	lsls	r2, r2, #1
 800b9ca:	3101      	adds	r1, #1
 800b9cc:	e7f0      	b.n	800b9b0 <__s2b+0x18>
 800b9ce:	9b08      	ldr	r3, [sp, #32]
 800b9d0:	2d09      	cmp	r5, #9
 800b9d2:	6143      	str	r3, [r0, #20]
 800b9d4:	f04f 0301 	mov.w	r3, #1
 800b9d8:	6103      	str	r3, [r0, #16]
 800b9da:	dd16      	ble.n	800ba0a <__s2b+0x72>
 800b9dc:	f104 0909 	add.w	r9, r4, #9
 800b9e0:	46c8      	mov	r8, r9
 800b9e2:	442c      	add	r4, r5
 800b9e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b9e8:	4601      	mov	r1, r0
 800b9ea:	220a      	movs	r2, #10
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	3b30      	subs	r3, #48	; 0x30
 800b9f0:	f7ff ff88 	bl	800b904 <__multadd>
 800b9f4:	45a0      	cmp	r8, r4
 800b9f6:	d1f5      	bne.n	800b9e4 <__s2b+0x4c>
 800b9f8:	f1a5 0408 	sub.w	r4, r5, #8
 800b9fc:	444c      	add	r4, r9
 800b9fe:	1b2d      	subs	r5, r5, r4
 800ba00:	1963      	adds	r3, r4, r5
 800ba02:	42bb      	cmp	r3, r7
 800ba04:	db04      	blt.n	800ba10 <__s2b+0x78>
 800ba06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba0a:	2509      	movs	r5, #9
 800ba0c:	340a      	adds	r4, #10
 800ba0e:	e7f6      	b.n	800b9fe <__s2b+0x66>
 800ba10:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba14:	4601      	mov	r1, r0
 800ba16:	220a      	movs	r2, #10
 800ba18:	4630      	mov	r0, r6
 800ba1a:	3b30      	subs	r3, #48	; 0x30
 800ba1c:	f7ff ff72 	bl	800b904 <__multadd>
 800ba20:	e7ee      	b.n	800ba00 <__s2b+0x68>
 800ba22:	bf00      	nop
 800ba24:	0800d4c4 	.word	0x0800d4c4
 800ba28:	0800d554 	.word	0x0800d554

0800ba2c <__hi0bits>:
 800ba2c:	0c02      	lsrs	r2, r0, #16
 800ba2e:	0412      	lsls	r2, r2, #16
 800ba30:	4603      	mov	r3, r0
 800ba32:	b9ca      	cbnz	r2, 800ba68 <__hi0bits+0x3c>
 800ba34:	0403      	lsls	r3, r0, #16
 800ba36:	2010      	movs	r0, #16
 800ba38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ba3c:	bf04      	itt	eq
 800ba3e:	021b      	lsleq	r3, r3, #8
 800ba40:	3008      	addeq	r0, #8
 800ba42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ba46:	bf04      	itt	eq
 800ba48:	011b      	lsleq	r3, r3, #4
 800ba4a:	3004      	addeq	r0, #4
 800ba4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ba50:	bf04      	itt	eq
 800ba52:	009b      	lsleq	r3, r3, #2
 800ba54:	3002      	addeq	r0, #2
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	db05      	blt.n	800ba66 <__hi0bits+0x3a>
 800ba5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ba5e:	f100 0001 	add.w	r0, r0, #1
 800ba62:	bf08      	it	eq
 800ba64:	2020      	moveq	r0, #32
 800ba66:	4770      	bx	lr
 800ba68:	2000      	movs	r0, #0
 800ba6a:	e7e5      	b.n	800ba38 <__hi0bits+0xc>

0800ba6c <__lo0bits>:
 800ba6c:	6803      	ldr	r3, [r0, #0]
 800ba6e:	4602      	mov	r2, r0
 800ba70:	f013 0007 	ands.w	r0, r3, #7
 800ba74:	d00b      	beq.n	800ba8e <__lo0bits+0x22>
 800ba76:	07d9      	lsls	r1, r3, #31
 800ba78:	d422      	bmi.n	800bac0 <__lo0bits+0x54>
 800ba7a:	0798      	lsls	r0, r3, #30
 800ba7c:	bf49      	itett	mi
 800ba7e:	085b      	lsrmi	r3, r3, #1
 800ba80:	089b      	lsrpl	r3, r3, #2
 800ba82:	2001      	movmi	r0, #1
 800ba84:	6013      	strmi	r3, [r2, #0]
 800ba86:	bf5c      	itt	pl
 800ba88:	2002      	movpl	r0, #2
 800ba8a:	6013      	strpl	r3, [r2, #0]
 800ba8c:	4770      	bx	lr
 800ba8e:	b299      	uxth	r1, r3
 800ba90:	b909      	cbnz	r1, 800ba96 <__lo0bits+0x2a>
 800ba92:	2010      	movs	r0, #16
 800ba94:	0c1b      	lsrs	r3, r3, #16
 800ba96:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ba9a:	bf04      	itt	eq
 800ba9c:	0a1b      	lsreq	r3, r3, #8
 800ba9e:	3008      	addeq	r0, #8
 800baa0:	0719      	lsls	r1, r3, #28
 800baa2:	bf04      	itt	eq
 800baa4:	091b      	lsreq	r3, r3, #4
 800baa6:	3004      	addeq	r0, #4
 800baa8:	0799      	lsls	r1, r3, #30
 800baaa:	bf04      	itt	eq
 800baac:	089b      	lsreq	r3, r3, #2
 800baae:	3002      	addeq	r0, #2
 800bab0:	07d9      	lsls	r1, r3, #31
 800bab2:	d403      	bmi.n	800babc <__lo0bits+0x50>
 800bab4:	085b      	lsrs	r3, r3, #1
 800bab6:	f100 0001 	add.w	r0, r0, #1
 800baba:	d003      	beq.n	800bac4 <__lo0bits+0x58>
 800babc:	6013      	str	r3, [r2, #0]
 800babe:	4770      	bx	lr
 800bac0:	2000      	movs	r0, #0
 800bac2:	4770      	bx	lr
 800bac4:	2020      	movs	r0, #32
 800bac6:	4770      	bx	lr

0800bac8 <__i2b>:
 800bac8:	b510      	push	{r4, lr}
 800baca:	460c      	mov	r4, r1
 800bacc:	2101      	movs	r1, #1
 800bace:	f7ff feb7 	bl	800b840 <_Balloc>
 800bad2:	4602      	mov	r2, r0
 800bad4:	b928      	cbnz	r0, 800bae2 <__i2b+0x1a>
 800bad6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bada:	4b04      	ldr	r3, [pc, #16]	; (800baec <__i2b+0x24>)
 800badc:	4804      	ldr	r0, [pc, #16]	; (800baf0 <__i2b+0x28>)
 800bade:	f7ff faff 	bl	800b0e0 <__assert_func>
 800bae2:	2301      	movs	r3, #1
 800bae4:	6144      	str	r4, [r0, #20]
 800bae6:	6103      	str	r3, [r0, #16]
 800bae8:	bd10      	pop	{r4, pc}
 800baea:	bf00      	nop
 800baec:	0800d4c4 	.word	0x0800d4c4
 800baf0:	0800d554 	.word	0x0800d554

0800baf4 <__multiply>:
 800baf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf8:	4614      	mov	r4, r2
 800bafa:	690a      	ldr	r2, [r1, #16]
 800bafc:	6923      	ldr	r3, [r4, #16]
 800bafe:	460d      	mov	r5, r1
 800bb00:	429a      	cmp	r2, r3
 800bb02:	bfbe      	ittt	lt
 800bb04:	460b      	movlt	r3, r1
 800bb06:	4625      	movlt	r5, r4
 800bb08:	461c      	movlt	r4, r3
 800bb0a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bb0e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bb12:	68ab      	ldr	r3, [r5, #8]
 800bb14:	6869      	ldr	r1, [r5, #4]
 800bb16:	eb0a 0709 	add.w	r7, sl, r9
 800bb1a:	42bb      	cmp	r3, r7
 800bb1c:	b085      	sub	sp, #20
 800bb1e:	bfb8      	it	lt
 800bb20:	3101      	addlt	r1, #1
 800bb22:	f7ff fe8d 	bl	800b840 <_Balloc>
 800bb26:	b930      	cbnz	r0, 800bb36 <__multiply+0x42>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	f240 115d 	movw	r1, #349	; 0x15d
 800bb2e:	4b41      	ldr	r3, [pc, #260]	; (800bc34 <__multiply+0x140>)
 800bb30:	4841      	ldr	r0, [pc, #260]	; (800bc38 <__multiply+0x144>)
 800bb32:	f7ff fad5 	bl	800b0e0 <__assert_func>
 800bb36:	f100 0614 	add.w	r6, r0, #20
 800bb3a:	4633      	mov	r3, r6
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bb42:	4543      	cmp	r3, r8
 800bb44:	d31e      	bcc.n	800bb84 <__multiply+0x90>
 800bb46:	f105 0c14 	add.w	ip, r5, #20
 800bb4a:	f104 0314 	add.w	r3, r4, #20
 800bb4e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bb52:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bb56:	9202      	str	r2, [sp, #8]
 800bb58:	ebac 0205 	sub.w	r2, ip, r5
 800bb5c:	3a15      	subs	r2, #21
 800bb5e:	f022 0203 	bic.w	r2, r2, #3
 800bb62:	3204      	adds	r2, #4
 800bb64:	f105 0115 	add.w	r1, r5, #21
 800bb68:	458c      	cmp	ip, r1
 800bb6a:	bf38      	it	cc
 800bb6c:	2204      	movcc	r2, #4
 800bb6e:	9201      	str	r2, [sp, #4]
 800bb70:	9a02      	ldr	r2, [sp, #8]
 800bb72:	9303      	str	r3, [sp, #12]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d808      	bhi.n	800bb8a <__multiply+0x96>
 800bb78:	2f00      	cmp	r7, #0
 800bb7a:	dc55      	bgt.n	800bc28 <__multiply+0x134>
 800bb7c:	6107      	str	r7, [r0, #16]
 800bb7e:	b005      	add	sp, #20
 800bb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb84:	f843 2b04 	str.w	r2, [r3], #4
 800bb88:	e7db      	b.n	800bb42 <__multiply+0x4e>
 800bb8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb8e:	f1ba 0f00 	cmp.w	sl, #0
 800bb92:	d020      	beq.n	800bbd6 <__multiply+0xe2>
 800bb94:	46b1      	mov	r9, r6
 800bb96:	2200      	movs	r2, #0
 800bb98:	f105 0e14 	add.w	lr, r5, #20
 800bb9c:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bba0:	f8d9 b000 	ldr.w	fp, [r9]
 800bba4:	b2a1      	uxth	r1, r4
 800bba6:	fa1f fb8b 	uxth.w	fp, fp
 800bbaa:	fb0a b101 	mla	r1, sl, r1, fp
 800bbae:	4411      	add	r1, r2
 800bbb0:	f8d9 2000 	ldr.w	r2, [r9]
 800bbb4:	0c24      	lsrs	r4, r4, #16
 800bbb6:	0c12      	lsrs	r2, r2, #16
 800bbb8:	fb0a 2404 	mla	r4, sl, r4, r2
 800bbbc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bbc0:	b289      	uxth	r1, r1
 800bbc2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bbc6:	45f4      	cmp	ip, lr
 800bbc8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bbcc:	f849 1b04 	str.w	r1, [r9], #4
 800bbd0:	d8e4      	bhi.n	800bb9c <__multiply+0xa8>
 800bbd2:	9901      	ldr	r1, [sp, #4]
 800bbd4:	5072      	str	r2, [r6, r1]
 800bbd6:	9a03      	ldr	r2, [sp, #12]
 800bbd8:	3304      	adds	r3, #4
 800bbda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bbde:	f1b9 0f00 	cmp.w	r9, #0
 800bbe2:	d01f      	beq.n	800bc24 <__multiply+0x130>
 800bbe4:	46b6      	mov	lr, r6
 800bbe6:	f04f 0a00 	mov.w	sl, #0
 800bbea:	6834      	ldr	r4, [r6, #0]
 800bbec:	f105 0114 	add.w	r1, r5, #20
 800bbf0:	880a      	ldrh	r2, [r1, #0]
 800bbf2:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bbf6:	b2a4      	uxth	r4, r4
 800bbf8:	fb09 b202 	mla	r2, r9, r2, fp
 800bbfc:	4492      	add	sl, r2
 800bbfe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bc02:	f84e 4b04 	str.w	r4, [lr], #4
 800bc06:	f851 4b04 	ldr.w	r4, [r1], #4
 800bc0a:	f8be 2000 	ldrh.w	r2, [lr]
 800bc0e:	0c24      	lsrs	r4, r4, #16
 800bc10:	fb09 2404 	mla	r4, r9, r4, r2
 800bc14:	458c      	cmp	ip, r1
 800bc16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bc1a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bc1e:	d8e7      	bhi.n	800bbf0 <__multiply+0xfc>
 800bc20:	9a01      	ldr	r2, [sp, #4]
 800bc22:	50b4      	str	r4, [r6, r2]
 800bc24:	3604      	adds	r6, #4
 800bc26:	e7a3      	b.n	800bb70 <__multiply+0x7c>
 800bc28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1a5      	bne.n	800bb7c <__multiply+0x88>
 800bc30:	3f01      	subs	r7, #1
 800bc32:	e7a1      	b.n	800bb78 <__multiply+0x84>
 800bc34:	0800d4c4 	.word	0x0800d4c4
 800bc38:	0800d554 	.word	0x0800d554

0800bc3c <__pow5mult>:
 800bc3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc40:	4615      	mov	r5, r2
 800bc42:	f012 0203 	ands.w	r2, r2, #3
 800bc46:	4606      	mov	r6, r0
 800bc48:	460f      	mov	r7, r1
 800bc4a:	d007      	beq.n	800bc5c <__pow5mult+0x20>
 800bc4c:	4c25      	ldr	r4, [pc, #148]	; (800bce4 <__pow5mult+0xa8>)
 800bc4e:	3a01      	subs	r2, #1
 800bc50:	2300      	movs	r3, #0
 800bc52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc56:	f7ff fe55 	bl	800b904 <__multadd>
 800bc5a:	4607      	mov	r7, r0
 800bc5c:	10ad      	asrs	r5, r5, #2
 800bc5e:	d03d      	beq.n	800bcdc <__pow5mult+0xa0>
 800bc60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc62:	b97c      	cbnz	r4, 800bc84 <__pow5mult+0x48>
 800bc64:	2010      	movs	r0, #16
 800bc66:	f7ff fdd1 	bl	800b80c <malloc>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	6270      	str	r0, [r6, #36]	; 0x24
 800bc6e:	b928      	cbnz	r0, 800bc7c <__pow5mult+0x40>
 800bc70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc74:	4b1c      	ldr	r3, [pc, #112]	; (800bce8 <__pow5mult+0xac>)
 800bc76:	481d      	ldr	r0, [pc, #116]	; (800bcec <__pow5mult+0xb0>)
 800bc78:	f7ff fa32 	bl	800b0e0 <__assert_func>
 800bc7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc80:	6004      	str	r4, [r0, #0]
 800bc82:	60c4      	str	r4, [r0, #12]
 800bc84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc8c:	b94c      	cbnz	r4, 800bca2 <__pow5mult+0x66>
 800bc8e:	f240 2171 	movw	r1, #625	; 0x271
 800bc92:	4630      	mov	r0, r6
 800bc94:	f7ff ff18 	bl	800bac8 <__i2b>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	f8c8 0008 	str.w	r0, [r8, #8]
 800bca0:	6003      	str	r3, [r0, #0]
 800bca2:	f04f 0900 	mov.w	r9, #0
 800bca6:	07eb      	lsls	r3, r5, #31
 800bca8:	d50a      	bpl.n	800bcc0 <__pow5mult+0x84>
 800bcaa:	4639      	mov	r1, r7
 800bcac:	4622      	mov	r2, r4
 800bcae:	4630      	mov	r0, r6
 800bcb0:	f7ff ff20 	bl	800baf4 <__multiply>
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	4639      	mov	r1, r7
 800bcb8:	4630      	mov	r0, r6
 800bcba:	f7ff fe01 	bl	800b8c0 <_Bfree>
 800bcbe:	4647      	mov	r7, r8
 800bcc0:	106d      	asrs	r5, r5, #1
 800bcc2:	d00b      	beq.n	800bcdc <__pow5mult+0xa0>
 800bcc4:	6820      	ldr	r0, [r4, #0]
 800bcc6:	b938      	cbnz	r0, 800bcd8 <__pow5mult+0x9c>
 800bcc8:	4622      	mov	r2, r4
 800bcca:	4621      	mov	r1, r4
 800bccc:	4630      	mov	r0, r6
 800bcce:	f7ff ff11 	bl	800baf4 <__multiply>
 800bcd2:	6020      	str	r0, [r4, #0]
 800bcd4:	f8c0 9000 	str.w	r9, [r0]
 800bcd8:	4604      	mov	r4, r0
 800bcda:	e7e4      	b.n	800bca6 <__pow5mult+0x6a>
 800bcdc:	4638      	mov	r0, r7
 800bcde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bce2:	bf00      	nop
 800bce4:	0800d6a8 	.word	0x0800d6a8
 800bce8:	0800d410 	.word	0x0800d410
 800bcec:	0800d554 	.word	0x0800d554

0800bcf0 <__lshift>:
 800bcf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcf4:	460c      	mov	r4, r1
 800bcf6:	4607      	mov	r7, r0
 800bcf8:	4691      	mov	r9, r2
 800bcfa:	6923      	ldr	r3, [r4, #16]
 800bcfc:	6849      	ldr	r1, [r1, #4]
 800bcfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd02:	68a3      	ldr	r3, [r4, #8]
 800bd04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd08:	f108 0601 	add.w	r6, r8, #1
 800bd0c:	42b3      	cmp	r3, r6
 800bd0e:	db0b      	blt.n	800bd28 <__lshift+0x38>
 800bd10:	4638      	mov	r0, r7
 800bd12:	f7ff fd95 	bl	800b840 <_Balloc>
 800bd16:	4605      	mov	r5, r0
 800bd18:	b948      	cbnz	r0, 800bd2e <__lshift+0x3e>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bd20:	4b27      	ldr	r3, [pc, #156]	; (800bdc0 <__lshift+0xd0>)
 800bd22:	4828      	ldr	r0, [pc, #160]	; (800bdc4 <__lshift+0xd4>)
 800bd24:	f7ff f9dc 	bl	800b0e0 <__assert_func>
 800bd28:	3101      	adds	r1, #1
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	e7ee      	b.n	800bd0c <__lshift+0x1c>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	f100 0114 	add.w	r1, r0, #20
 800bd34:	f100 0210 	add.w	r2, r0, #16
 800bd38:	4618      	mov	r0, r3
 800bd3a:	4553      	cmp	r3, sl
 800bd3c:	db33      	blt.n	800bda6 <__lshift+0xb6>
 800bd3e:	6920      	ldr	r0, [r4, #16]
 800bd40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd44:	f104 0314 	add.w	r3, r4, #20
 800bd48:	f019 091f 	ands.w	r9, r9, #31
 800bd4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd54:	d02b      	beq.n	800bdae <__lshift+0xbe>
 800bd56:	468a      	mov	sl, r1
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f1c9 0e20 	rsb	lr, r9, #32
 800bd5e:	6818      	ldr	r0, [r3, #0]
 800bd60:	fa00 f009 	lsl.w	r0, r0, r9
 800bd64:	4302      	orrs	r2, r0
 800bd66:	f84a 2b04 	str.w	r2, [sl], #4
 800bd6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd6e:	459c      	cmp	ip, r3
 800bd70:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd74:	d8f3      	bhi.n	800bd5e <__lshift+0x6e>
 800bd76:	ebac 0304 	sub.w	r3, ip, r4
 800bd7a:	3b15      	subs	r3, #21
 800bd7c:	f023 0303 	bic.w	r3, r3, #3
 800bd80:	3304      	adds	r3, #4
 800bd82:	f104 0015 	add.w	r0, r4, #21
 800bd86:	4584      	cmp	ip, r0
 800bd88:	bf38      	it	cc
 800bd8a:	2304      	movcc	r3, #4
 800bd8c:	50ca      	str	r2, [r1, r3]
 800bd8e:	b10a      	cbz	r2, 800bd94 <__lshift+0xa4>
 800bd90:	f108 0602 	add.w	r6, r8, #2
 800bd94:	3e01      	subs	r6, #1
 800bd96:	4638      	mov	r0, r7
 800bd98:	4621      	mov	r1, r4
 800bd9a:	612e      	str	r6, [r5, #16]
 800bd9c:	f7ff fd90 	bl	800b8c0 <_Bfree>
 800bda0:	4628      	mov	r0, r5
 800bda2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdaa:	3301      	adds	r3, #1
 800bdac:	e7c5      	b.n	800bd3a <__lshift+0x4a>
 800bdae:	3904      	subs	r1, #4
 800bdb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb4:	459c      	cmp	ip, r3
 800bdb6:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdba:	d8f9      	bhi.n	800bdb0 <__lshift+0xc0>
 800bdbc:	e7ea      	b.n	800bd94 <__lshift+0xa4>
 800bdbe:	bf00      	nop
 800bdc0:	0800d4c4 	.word	0x0800d4c4
 800bdc4:	0800d554 	.word	0x0800d554

0800bdc8 <__mcmp>:
 800bdc8:	4603      	mov	r3, r0
 800bdca:	690a      	ldr	r2, [r1, #16]
 800bdcc:	6900      	ldr	r0, [r0, #16]
 800bdce:	b530      	push	{r4, r5, lr}
 800bdd0:	1a80      	subs	r0, r0, r2
 800bdd2:	d10d      	bne.n	800bdf0 <__mcmp+0x28>
 800bdd4:	3314      	adds	r3, #20
 800bdd6:	3114      	adds	r1, #20
 800bdd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bddc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bde0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bde4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bde8:	4295      	cmp	r5, r2
 800bdea:	d002      	beq.n	800bdf2 <__mcmp+0x2a>
 800bdec:	d304      	bcc.n	800bdf8 <__mcmp+0x30>
 800bdee:	2001      	movs	r0, #1
 800bdf0:	bd30      	pop	{r4, r5, pc}
 800bdf2:	42a3      	cmp	r3, r4
 800bdf4:	d3f4      	bcc.n	800bde0 <__mcmp+0x18>
 800bdf6:	e7fb      	b.n	800bdf0 <__mcmp+0x28>
 800bdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdfc:	e7f8      	b.n	800bdf0 <__mcmp+0x28>
	...

0800be00 <__mdiff>:
 800be00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be04:	460c      	mov	r4, r1
 800be06:	4606      	mov	r6, r0
 800be08:	4611      	mov	r1, r2
 800be0a:	4620      	mov	r0, r4
 800be0c:	4692      	mov	sl, r2
 800be0e:	f7ff ffdb 	bl	800bdc8 <__mcmp>
 800be12:	1e05      	subs	r5, r0, #0
 800be14:	d111      	bne.n	800be3a <__mdiff+0x3a>
 800be16:	4629      	mov	r1, r5
 800be18:	4630      	mov	r0, r6
 800be1a:	f7ff fd11 	bl	800b840 <_Balloc>
 800be1e:	4602      	mov	r2, r0
 800be20:	b928      	cbnz	r0, 800be2e <__mdiff+0x2e>
 800be22:	f240 2132 	movw	r1, #562	; 0x232
 800be26:	4b3c      	ldr	r3, [pc, #240]	; (800bf18 <__mdiff+0x118>)
 800be28:	483c      	ldr	r0, [pc, #240]	; (800bf1c <__mdiff+0x11c>)
 800be2a:	f7ff f959 	bl	800b0e0 <__assert_func>
 800be2e:	2301      	movs	r3, #1
 800be30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be34:	4610      	mov	r0, r2
 800be36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be3a:	bfa4      	itt	ge
 800be3c:	4653      	movge	r3, sl
 800be3e:	46a2      	movge	sl, r4
 800be40:	4630      	mov	r0, r6
 800be42:	f8da 1004 	ldr.w	r1, [sl, #4]
 800be46:	bfa6      	itte	ge
 800be48:	461c      	movge	r4, r3
 800be4a:	2500      	movge	r5, #0
 800be4c:	2501      	movlt	r5, #1
 800be4e:	f7ff fcf7 	bl	800b840 <_Balloc>
 800be52:	4602      	mov	r2, r0
 800be54:	b918      	cbnz	r0, 800be5e <__mdiff+0x5e>
 800be56:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be5a:	4b2f      	ldr	r3, [pc, #188]	; (800bf18 <__mdiff+0x118>)
 800be5c:	e7e4      	b.n	800be28 <__mdiff+0x28>
 800be5e:	f100 0814 	add.w	r8, r0, #20
 800be62:	f8da 7010 	ldr.w	r7, [sl, #16]
 800be66:	60c5      	str	r5, [r0, #12]
 800be68:	f04f 0c00 	mov.w	ip, #0
 800be6c:	f10a 0514 	add.w	r5, sl, #20
 800be70:	f10a 0010 	add.w	r0, sl, #16
 800be74:	46c2      	mov	sl, r8
 800be76:	6926      	ldr	r6, [r4, #16]
 800be78:	f104 0914 	add.w	r9, r4, #20
 800be7c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800be80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800be84:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800be88:	f859 3b04 	ldr.w	r3, [r9], #4
 800be8c:	fa1f f18b 	uxth.w	r1, fp
 800be90:	4461      	add	r1, ip
 800be92:	fa1f fc83 	uxth.w	ip, r3
 800be96:	0c1b      	lsrs	r3, r3, #16
 800be98:	eba1 010c 	sub.w	r1, r1, ip
 800be9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bea0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bea4:	b289      	uxth	r1, r1
 800bea6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800beaa:	454e      	cmp	r6, r9
 800beac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800beb0:	f84a 3b04 	str.w	r3, [sl], #4
 800beb4:	d8e6      	bhi.n	800be84 <__mdiff+0x84>
 800beb6:	1b33      	subs	r3, r6, r4
 800beb8:	3b15      	subs	r3, #21
 800beba:	f023 0303 	bic.w	r3, r3, #3
 800bebe:	3415      	adds	r4, #21
 800bec0:	3304      	adds	r3, #4
 800bec2:	42a6      	cmp	r6, r4
 800bec4:	bf38      	it	cc
 800bec6:	2304      	movcc	r3, #4
 800bec8:	441d      	add	r5, r3
 800beca:	4443      	add	r3, r8
 800becc:	461e      	mov	r6, r3
 800bece:	462c      	mov	r4, r5
 800bed0:	4574      	cmp	r4, lr
 800bed2:	d30e      	bcc.n	800bef2 <__mdiff+0xf2>
 800bed4:	f10e 0103 	add.w	r1, lr, #3
 800bed8:	1b49      	subs	r1, r1, r5
 800beda:	f021 0103 	bic.w	r1, r1, #3
 800bede:	3d03      	subs	r5, #3
 800bee0:	45ae      	cmp	lr, r5
 800bee2:	bf38      	it	cc
 800bee4:	2100      	movcc	r1, #0
 800bee6:	4419      	add	r1, r3
 800bee8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800beec:	b18b      	cbz	r3, 800bf12 <__mdiff+0x112>
 800beee:	6117      	str	r7, [r2, #16]
 800bef0:	e7a0      	b.n	800be34 <__mdiff+0x34>
 800bef2:	f854 8b04 	ldr.w	r8, [r4], #4
 800bef6:	fa1f f188 	uxth.w	r1, r8
 800befa:	4461      	add	r1, ip
 800befc:	1408      	asrs	r0, r1, #16
 800befe:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bf02:	b289      	uxth	r1, r1
 800bf04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf0c:	f846 1b04 	str.w	r1, [r6], #4
 800bf10:	e7de      	b.n	800bed0 <__mdiff+0xd0>
 800bf12:	3f01      	subs	r7, #1
 800bf14:	e7e8      	b.n	800bee8 <__mdiff+0xe8>
 800bf16:	bf00      	nop
 800bf18:	0800d4c4 	.word	0x0800d4c4
 800bf1c:	0800d554 	.word	0x0800d554

0800bf20 <__ulp>:
 800bf20:	4b11      	ldr	r3, [pc, #68]	; (800bf68 <__ulp+0x48>)
 800bf22:	400b      	ands	r3, r1
 800bf24:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	dd02      	ble.n	800bf32 <__ulp+0x12>
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4770      	bx	lr
 800bf32:	425b      	negs	r3, r3
 800bf34:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bf38:	f04f 0000 	mov.w	r0, #0
 800bf3c:	f04f 0100 	mov.w	r1, #0
 800bf40:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf44:	da04      	bge.n	800bf50 <__ulp+0x30>
 800bf46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf4a:	fa43 f102 	asr.w	r1, r3, r2
 800bf4e:	4770      	bx	lr
 800bf50:	f1a2 0314 	sub.w	r3, r2, #20
 800bf54:	2b1e      	cmp	r3, #30
 800bf56:	bfd6      	itet	le
 800bf58:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bf5c:	2301      	movgt	r3, #1
 800bf5e:	fa22 f303 	lsrle.w	r3, r2, r3
 800bf62:	4618      	mov	r0, r3
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	7ff00000 	.word	0x7ff00000

0800bf6c <__b2d>:
 800bf6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf70:	6907      	ldr	r7, [r0, #16]
 800bf72:	f100 0914 	add.w	r9, r0, #20
 800bf76:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bf7a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bf7e:	f1a7 0804 	sub.w	r8, r7, #4
 800bf82:	4630      	mov	r0, r6
 800bf84:	f7ff fd52 	bl	800ba2c <__hi0bits>
 800bf88:	f1c0 0320 	rsb	r3, r0, #32
 800bf8c:	280a      	cmp	r0, #10
 800bf8e:	600b      	str	r3, [r1, #0]
 800bf90:	491f      	ldr	r1, [pc, #124]	; (800c010 <__b2d+0xa4>)
 800bf92:	dc17      	bgt.n	800bfc4 <__b2d+0x58>
 800bf94:	45c1      	cmp	r9, r8
 800bf96:	bf28      	it	cs
 800bf98:	2200      	movcs	r2, #0
 800bf9a:	f1c0 0c0b 	rsb	ip, r0, #11
 800bf9e:	fa26 f30c 	lsr.w	r3, r6, ip
 800bfa2:	bf38      	it	cc
 800bfa4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bfa8:	ea43 0501 	orr.w	r5, r3, r1
 800bfac:	f100 0315 	add.w	r3, r0, #21
 800bfb0:	fa06 f303 	lsl.w	r3, r6, r3
 800bfb4:	fa22 f20c 	lsr.w	r2, r2, ip
 800bfb8:	ea43 0402 	orr.w	r4, r3, r2
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfc4:	45c1      	cmp	r9, r8
 800bfc6:	bf2e      	itee	cs
 800bfc8:	2200      	movcs	r2, #0
 800bfca:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bfce:	f1a7 0808 	subcc.w	r8, r7, #8
 800bfd2:	f1b0 030b 	subs.w	r3, r0, #11
 800bfd6:	d016      	beq.n	800c006 <__b2d+0x9a>
 800bfd8:	f1c3 0720 	rsb	r7, r3, #32
 800bfdc:	fa22 f107 	lsr.w	r1, r2, r7
 800bfe0:	45c8      	cmp	r8, r9
 800bfe2:	fa06 f603 	lsl.w	r6, r6, r3
 800bfe6:	ea46 0601 	orr.w	r6, r6, r1
 800bfea:	bf94      	ite	ls
 800bfec:	2100      	movls	r1, #0
 800bfee:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bff2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800bff6:	fa02 f003 	lsl.w	r0, r2, r3
 800bffa:	40f9      	lsrs	r1, r7
 800bffc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c000:	ea40 0401 	orr.w	r4, r0, r1
 800c004:	e7da      	b.n	800bfbc <__b2d+0x50>
 800c006:	4614      	mov	r4, r2
 800c008:	ea46 0501 	orr.w	r5, r6, r1
 800c00c:	e7d6      	b.n	800bfbc <__b2d+0x50>
 800c00e:	bf00      	nop
 800c010:	3ff00000 	.word	0x3ff00000

0800c014 <__d2b>:
 800c014:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c018:	2101      	movs	r1, #1
 800c01a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c01e:	4690      	mov	r8, r2
 800c020:	461d      	mov	r5, r3
 800c022:	f7ff fc0d 	bl	800b840 <_Balloc>
 800c026:	4604      	mov	r4, r0
 800c028:	b930      	cbnz	r0, 800c038 <__d2b+0x24>
 800c02a:	4602      	mov	r2, r0
 800c02c:	f240 310a 	movw	r1, #778	; 0x30a
 800c030:	4b24      	ldr	r3, [pc, #144]	; (800c0c4 <__d2b+0xb0>)
 800c032:	4825      	ldr	r0, [pc, #148]	; (800c0c8 <__d2b+0xb4>)
 800c034:	f7ff f854 	bl	800b0e0 <__assert_func>
 800c038:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c03c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c040:	bb2d      	cbnz	r5, 800c08e <__d2b+0x7a>
 800c042:	9301      	str	r3, [sp, #4]
 800c044:	f1b8 0300 	subs.w	r3, r8, #0
 800c048:	d026      	beq.n	800c098 <__d2b+0x84>
 800c04a:	4668      	mov	r0, sp
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	f7ff fd0d 	bl	800ba6c <__lo0bits>
 800c052:	9900      	ldr	r1, [sp, #0]
 800c054:	b1f0      	cbz	r0, 800c094 <__d2b+0x80>
 800c056:	9a01      	ldr	r2, [sp, #4]
 800c058:	f1c0 0320 	rsb	r3, r0, #32
 800c05c:	fa02 f303 	lsl.w	r3, r2, r3
 800c060:	430b      	orrs	r3, r1
 800c062:	40c2      	lsrs	r2, r0
 800c064:	6163      	str	r3, [r4, #20]
 800c066:	9201      	str	r2, [sp, #4]
 800c068:	9b01      	ldr	r3, [sp, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	bf14      	ite	ne
 800c06e:	2102      	movne	r1, #2
 800c070:	2101      	moveq	r1, #1
 800c072:	61a3      	str	r3, [r4, #24]
 800c074:	6121      	str	r1, [r4, #16]
 800c076:	b1c5      	cbz	r5, 800c0aa <__d2b+0x96>
 800c078:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c07c:	4405      	add	r5, r0
 800c07e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c082:	603d      	str	r5, [r7, #0]
 800c084:	6030      	str	r0, [r6, #0]
 800c086:	4620      	mov	r0, r4
 800c088:	b002      	add	sp, #8
 800c08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c08e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c092:	e7d6      	b.n	800c042 <__d2b+0x2e>
 800c094:	6161      	str	r1, [r4, #20]
 800c096:	e7e7      	b.n	800c068 <__d2b+0x54>
 800c098:	a801      	add	r0, sp, #4
 800c09a:	f7ff fce7 	bl	800ba6c <__lo0bits>
 800c09e:	2101      	movs	r1, #1
 800c0a0:	9b01      	ldr	r3, [sp, #4]
 800c0a2:	6121      	str	r1, [r4, #16]
 800c0a4:	6163      	str	r3, [r4, #20]
 800c0a6:	3020      	adds	r0, #32
 800c0a8:	e7e5      	b.n	800c076 <__d2b+0x62>
 800c0aa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c0ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0b2:	6038      	str	r0, [r7, #0]
 800c0b4:	6918      	ldr	r0, [r3, #16]
 800c0b6:	f7ff fcb9 	bl	800ba2c <__hi0bits>
 800c0ba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c0be:	6031      	str	r1, [r6, #0]
 800c0c0:	e7e1      	b.n	800c086 <__d2b+0x72>
 800c0c2:	bf00      	nop
 800c0c4:	0800d4c4 	.word	0x0800d4c4
 800c0c8:	0800d554 	.word	0x0800d554

0800c0cc <__ratio>:
 800c0cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	4688      	mov	r8, r1
 800c0d2:	4669      	mov	r1, sp
 800c0d4:	4681      	mov	r9, r0
 800c0d6:	f7ff ff49 	bl	800bf6c <__b2d>
 800c0da:	460f      	mov	r7, r1
 800c0dc:	4604      	mov	r4, r0
 800c0de:	460d      	mov	r5, r1
 800c0e0:	4640      	mov	r0, r8
 800c0e2:	a901      	add	r1, sp, #4
 800c0e4:	f7ff ff42 	bl	800bf6c <__b2d>
 800c0e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c0f0:	468b      	mov	fp, r1
 800c0f2:	eba3 0c02 	sub.w	ip, r3, r2
 800c0f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c0fa:	1a9b      	subs	r3, r3, r2
 800c0fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c100:	2b00      	cmp	r3, #0
 800c102:	bfd5      	itete	le
 800c104:	460a      	movle	r2, r1
 800c106:	462a      	movgt	r2, r5
 800c108:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c10c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c110:	bfd8      	it	le
 800c112:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c116:	465b      	mov	r3, fp
 800c118:	4602      	mov	r2, r0
 800c11a:	4639      	mov	r1, r7
 800c11c:	4620      	mov	r0, r4
 800c11e:	f7f4 fb27 	bl	8000770 <__aeabi_ddiv>
 800c122:	b003      	add	sp, #12
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c128 <__copybits>:
 800c128:	3901      	subs	r1, #1
 800c12a:	b570      	push	{r4, r5, r6, lr}
 800c12c:	1149      	asrs	r1, r1, #5
 800c12e:	6914      	ldr	r4, [r2, #16]
 800c130:	3101      	adds	r1, #1
 800c132:	f102 0314 	add.w	r3, r2, #20
 800c136:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c13a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c13e:	1f05      	subs	r5, r0, #4
 800c140:	42a3      	cmp	r3, r4
 800c142:	d30c      	bcc.n	800c15e <__copybits+0x36>
 800c144:	1aa3      	subs	r3, r4, r2
 800c146:	3b11      	subs	r3, #17
 800c148:	f023 0303 	bic.w	r3, r3, #3
 800c14c:	3211      	adds	r2, #17
 800c14e:	42a2      	cmp	r2, r4
 800c150:	bf88      	it	hi
 800c152:	2300      	movhi	r3, #0
 800c154:	4418      	add	r0, r3
 800c156:	2300      	movs	r3, #0
 800c158:	4288      	cmp	r0, r1
 800c15a:	d305      	bcc.n	800c168 <__copybits+0x40>
 800c15c:	bd70      	pop	{r4, r5, r6, pc}
 800c15e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c162:	f845 6f04 	str.w	r6, [r5, #4]!
 800c166:	e7eb      	b.n	800c140 <__copybits+0x18>
 800c168:	f840 3b04 	str.w	r3, [r0], #4
 800c16c:	e7f4      	b.n	800c158 <__copybits+0x30>

0800c16e <__any_on>:
 800c16e:	f100 0214 	add.w	r2, r0, #20
 800c172:	6900      	ldr	r0, [r0, #16]
 800c174:	114b      	asrs	r3, r1, #5
 800c176:	4298      	cmp	r0, r3
 800c178:	b510      	push	{r4, lr}
 800c17a:	db11      	blt.n	800c1a0 <__any_on+0x32>
 800c17c:	dd0a      	ble.n	800c194 <__any_on+0x26>
 800c17e:	f011 011f 	ands.w	r1, r1, #31
 800c182:	d007      	beq.n	800c194 <__any_on+0x26>
 800c184:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c188:	fa24 f001 	lsr.w	r0, r4, r1
 800c18c:	fa00 f101 	lsl.w	r1, r0, r1
 800c190:	428c      	cmp	r4, r1
 800c192:	d10b      	bne.n	800c1ac <__any_on+0x3e>
 800c194:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c198:	4293      	cmp	r3, r2
 800c19a:	d803      	bhi.n	800c1a4 <__any_on+0x36>
 800c19c:	2000      	movs	r0, #0
 800c19e:	bd10      	pop	{r4, pc}
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	e7f7      	b.n	800c194 <__any_on+0x26>
 800c1a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1a8:	2900      	cmp	r1, #0
 800c1aa:	d0f5      	beq.n	800c198 <__any_on+0x2a>
 800c1ac:	2001      	movs	r0, #1
 800c1ae:	e7f6      	b.n	800c19e <__any_on+0x30>

0800c1b0 <_calloc_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	fb02 f501 	mul.w	r5, r2, r1
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	f000 f854 	bl	800c264 <_malloc_r>
 800c1bc:	4604      	mov	r4, r0
 800c1be:	b118      	cbz	r0, 800c1c8 <_calloc_r+0x18>
 800c1c0:	462a      	mov	r2, r5
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	f7fe f8fe 	bl	800a3c4 <memset>
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	bd38      	pop	{r3, r4, r5, pc}

0800c1cc <_free_r>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	2900      	cmp	r1, #0
 800c1d2:	d043      	beq.n	800c25c <_free_r+0x90>
 800c1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1d8:	1f0c      	subs	r4, r1, #4
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	bfb8      	it	lt
 800c1de:	18e4      	addlt	r4, r4, r3
 800c1e0:	f000 feb2 	bl	800cf48 <__malloc_lock>
 800c1e4:	4a1e      	ldr	r2, [pc, #120]	; (800c260 <_free_r+0x94>)
 800c1e6:	6813      	ldr	r3, [r2, #0]
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	b933      	cbnz	r3, 800c1fa <_free_r+0x2e>
 800c1ec:	6063      	str	r3, [r4, #4]
 800c1ee:	6014      	str	r4, [r2, #0]
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1f6:	f000 bead 	b.w	800cf54 <__malloc_unlock>
 800c1fa:	42a3      	cmp	r3, r4
 800c1fc:	d90a      	bls.n	800c214 <_free_r+0x48>
 800c1fe:	6821      	ldr	r1, [r4, #0]
 800c200:	1862      	adds	r2, r4, r1
 800c202:	4293      	cmp	r3, r2
 800c204:	bf01      	itttt	eq
 800c206:	681a      	ldreq	r2, [r3, #0]
 800c208:	685b      	ldreq	r3, [r3, #4]
 800c20a:	1852      	addeq	r2, r2, r1
 800c20c:	6022      	streq	r2, [r4, #0]
 800c20e:	6063      	str	r3, [r4, #4]
 800c210:	6004      	str	r4, [r0, #0]
 800c212:	e7ed      	b.n	800c1f0 <_free_r+0x24>
 800c214:	461a      	mov	r2, r3
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	b10b      	cbz	r3, 800c21e <_free_r+0x52>
 800c21a:	42a3      	cmp	r3, r4
 800c21c:	d9fa      	bls.n	800c214 <_free_r+0x48>
 800c21e:	6811      	ldr	r1, [r2, #0]
 800c220:	1850      	adds	r0, r2, r1
 800c222:	42a0      	cmp	r0, r4
 800c224:	d10b      	bne.n	800c23e <_free_r+0x72>
 800c226:	6820      	ldr	r0, [r4, #0]
 800c228:	4401      	add	r1, r0
 800c22a:	1850      	adds	r0, r2, r1
 800c22c:	4283      	cmp	r3, r0
 800c22e:	6011      	str	r1, [r2, #0]
 800c230:	d1de      	bne.n	800c1f0 <_free_r+0x24>
 800c232:	6818      	ldr	r0, [r3, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	4401      	add	r1, r0
 800c238:	6011      	str	r1, [r2, #0]
 800c23a:	6053      	str	r3, [r2, #4]
 800c23c:	e7d8      	b.n	800c1f0 <_free_r+0x24>
 800c23e:	d902      	bls.n	800c246 <_free_r+0x7a>
 800c240:	230c      	movs	r3, #12
 800c242:	602b      	str	r3, [r5, #0]
 800c244:	e7d4      	b.n	800c1f0 <_free_r+0x24>
 800c246:	6820      	ldr	r0, [r4, #0]
 800c248:	1821      	adds	r1, r4, r0
 800c24a:	428b      	cmp	r3, r1
 800c24c:	bf01      	itttt	eq
 800c24e:	6819      	ldreq	r1, [r3, #0]
 800c250:	685b      	ldreq	r3, [r3, #4]
 800c252:	1809      	addeq	r1, r1, r0
 800c254:	6021      	streq	r1, [r4, #0]
 800c256:	6063      	str	r3, [r4, #4]
 800c258:	6054      	str	r4, [r2, #4]
 800c25a:	e7c9      	b.n	800c1f0 <_free_r+0x24>
 800c25c:	bd38      	pop	{r3, r4, r5, pc}
 800c25e:	bf00      	nop
 800c260:	200005b0 	.word	0x200005b0

0800c264 <_malloc_r>:
 800c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c266:	1ccd      	adds	r5, r1, #3
 800c268:	f025 0503 	bic.w	r5, r5, #3
 800c26c:	3508      	adds	r5, #8
 800c26e:	2d0c      	cmp	r5, #12
 800c270:	bf38      	it	cc
 800c272:	250c      	movcc	r5, #12
 800c274:	2d00      	cmp	r5, #0
 800c276:	4606      	mov	r6, r0
 800c278:	db01      	blt.n	800c27e <_malloc_r+0x1a>
 800c27a:	42a9      	cmp	r1, r5
 800c27c:	d903      	bls.n	800c286 <_malloc_r+0x22>
 800c27e:	230c      	movs	r3, #12
 800c280:	6033      	str	r3, [r6, #0]
 800c282:	2000      	movs	r0, #0
 800c284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c286:	f000 fe5f 	bl	800cf48 <__malloc_lock>
 800c28a:	4921      	ldr	r1, [pc, #132]	; (800c310 <_malloc_r+0xac>)
 800c28c:	680a      	ldr	r2, [r1, #0]
 800c28e:	4614      	mov	r4, r2
 800c290:	b99c      	cbnz	r4, 800c2ba <_malloc_r+0x56>
 800c292:	4f20      	ldr	r7, [pc, #128]	; (800c314 <_malloc_r+0xb0>)
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	b923      	cbnz	r3, 800c2a2 <_malloc_r+0x3e>
 800c298:	4621      	mov	r1, r4
 800c29a:	4630      	mov	r0, r6
 800c29c:	f000 fb30 	bl	800c900 <_sbrk_r>
 800c2a0:	6038      	str	r0, [r7, #0]
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f000 fb2b 	bl	800c900 <_sbrk_r>
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	d123      	bne.n	800c2f6 <_malloc_r+0x92>
 800c2ae:	230c      	movs	r3, #12
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	6033      	str	r3, [r6, #0]
 800c2b4:	f000 fe4e 	bl	800cf54 <__malloc_unlock>
 800c2b8:	e7e3      	b.n	800c282 <_malloc_r+0x1e>
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	1b5b      	subs	r3, r3, r5
 800c2be:	d417      	bmi.n	800c2f0 <_malloc_r+0x8c>
 800c2c0:	2b0b      	cmp	r3, #11
 800c2c2:	d903      	bls.n	800c2cc <_malloc_r+0x68>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	441c      	add	r4, r3
 800c2c8:	6025      	str	r5, [r4, #0]
 800c2ca:	e004      	b.n	800c2d6 <_malloc_r+0x72>
 800c2cc:	6863      	ldr	r3, [r4, #4]
 800c2ce:	42a2      	cmp	r2, r4
 800c2d0:	bf0c      	ite	eq
 800c2d2:	600b      	streq	r3, [r1, #0]
 800c2d4:	6053      	strne	r3, [r2, #4]
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	f000 fe3c 	bl	800cf54 <__malloc_unlock>
 800c2dc:	f104 000b 	add.w	r0, r4, #11
 800c2e0:	1d23      	adds	r3, r4, #4
 800c2e2:	f020 0007 	bic.w	r0, r0, #7
 800c2e6:	1ac2      	subs	r2, r0, r3
 800c2e8:	d0cc      	beq.n	800c284 <_malloc_r+0x20>
 800c2ea:	1a1b      	subs	r3, r3, r0
 800c2ec:	50a3      	str	r3, [r4, r2]
 800c2ee:	e7c9      	b.n	800c284 <_malloc_r+0x20>
 800c2f0:	4622      	mov	r2, r4
 800c2f2:	6864      	ldr	r4, [r4, #4]
 800c2f4:	e7cc      	b.n	800c290 <_malloc_r+0x2c>
 800c2f6:	1cc4      	adds	r4, r0, #3
 800c2f8:	f024 0403 	bic.w	r4, r4, #3
 800c2fc:	42a0      	cmp	r0, r4
 800c2fe:	d0e3      	beq.n	800c2c8 <_malloc_r+0x64>
 800c300:	1a21      	subs	r1, r4, r0
 800c302:	4630      	mov	r0, r6
 800c304:	f000 fafc 	bl	800c900 <_sbrk_r>
 800c308:	3001      	adds	r0, #1
 800c30a:	d1dd      	bne.n	800c2c8 <_malloc_r+0x64>
 800c30c:	e7cf      	b.n	800c2ae <_malloc_r+0x4a>
 800c30e:	bf00      	nop
 800c310:	200005b0 	.word	0x200005b0
 800c314:	200005b4 	.word	0x200005b4

0800c318 <__sfputc_r>:
 800c318:	6893      	ldr	r3, [r2, #8]
 800c31a:	b410      	push	{r4}
 800c31c:	3b01      	subs	r3, #1
 800c31e:	2b00      	cmp	r3, #0
 800c320:	6093      	str	r3, [r2, #8]
 800c322:	da07      	bge.n	800c334 <__sfputc_r+0x1c>
 800c324:	6994      	ldr	r4, [r2, #24]
 800c326:	42a3      	cmp	r3, r4
 800c328:	db01      	blt.n	800c32e <__sfputc_r+0x16>
 800c32a:	290a      	cmp	r1, #10
 800c32c:	d102      	bne.n	800c334 <__sfputc_r+0x1c>
 800c32e:	bc10      	pop	{r4}
 800c330:	f000 bb08 	b.w	800c944 <__swbuf_r>
 800c334:	6813      	ldr	r3, [r2, #0]
 800c336:	1c58      	adds	r0, r3, #1
 800c338:	6010      	str	r0, [r2, #0]
 800c33a:	7019      	strb	r1, [r3, #0]
 800c33c:	4608      	mov	r0, r1
 800c33e:	bc10      	pop	{r4}
 800c340:	4770      	bx	lr

0800c342 <__sfputs_r>:
 800c342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c344:	4606      	mov	r6, r0
 800c346:	460f      	mov	r7, r1
 800c348:	4614      	mov	r4, r2
 800c34a:	18d5      	adds	r5, r2, r3
 800c34c:	42ac      	cmp	r4, r5
 800c34e:	d101      	bne.n	800c354 <__sfputs_r+0x12>
 800c350:	2000      	movs	r0, #0
 800c352:	e007      	b.n	800c364 <__sfputs_r+0x22>
 800c354:	463a      	mov	r2, r7
 800c356:	4630      	mov	r0, r6
 800c358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c35c:	f7ff ffdc 	bl	800c318 <__sfputc_r>
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	d1f3      	bne.n	800c34c <__sfputs_r+0xa>
 800c364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c368 <_vfiprintf_r>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	460d      	mov	r5, r1
 800c36e:	4614      	mov	r4, r2
 800c370:	4698      	mov	r8, r3
 800c372:	4606      	mov	r6, r0
 800c374:	b09d      	sub	sp, #116	; 0x74
 800c376:	b118      	cbz	r0, 800c380 <_vfiprintf_r+0x18>
 800c378:	6983      	ldr	r3, [r0, #24]
 800c37a:	b90b      	cbnz	r3, 800c380 <_vfiprintf_r+0x18>
 800c37c:	f000 fcd2 	bl	800cd24 <__sinit>
 800c380:	4b89      	ldr	r3, [pc, #548]	; (800c5a8 <_vfiprintf_r+0x240>)
 800c382:	429d      	cmp	r5, r3
 800c384:	d11b      	bne.n	800c3be <_vfiprintf_r+0x56>
 800c386:	6875      	ldr	r5, [r6, #4]
 800c388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c38a:	07d9      	lsls	r1, r3, #31
 800c38c:	d405      	bmi.n	800c39a <_vfiprintf_r+0x32>
 800c38e:	89ab      	ldrh	r3, [r5, #12]
 800c390:	059a      	lsls	r2, r3, #22
 800c392:	d402      	bmi.n	800c39a <_vfiprintf_r+0x32>
 800c394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c396:	f000 fd63 	bl	800ce60 <__retarget_lock_acquire_recursive>
 800c39a:	89ab      	ldrh	r3, [r5, #12]
 800c39c:	071b      	lsls	r3, r3, #28
 800c39e:	d501      	bpl.n	800c3a4 <_vfiprintf_r+0x3c>
 800c3a0:	692b      	ldr	r3, [r5, #16]
 800c3a2:	b9eb      	cbnz	r3, 800c3e0 <_vfiprintf_r+0x78>
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f000 fb2c 	bl	800ca04 <__swsetup_r>
 800c3ac:	b1c0      	cbz	r0, 800c3e0 <_vfiprintf_r+0x78>
 800c3ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3b0:	07dc      	lsls	r4, r3, #31
 800c3b2:	d50e      	bpl.n	800c3d2 <_vfiprintf_r+0x6a>
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b8:	b01d      	add	sp, #116	; 0x74
 800c3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3be:	4b7b      	ldr	r3, [pc, #492]	; (800c5ac <_vfiprintf_r+0x244>)
 800c3c0:	429d      	cmp	r5, r3
 800c3c2:	d101      	bne.n	800c3c8 <_vfiprintf_r+0x60>
 800c3c4:	68b5      	ldr	r5, [r6, #8]
 800c3c6:	e7df      	b.n	800c388 <_vfiprintf_r+0x20>
 800c3c8:	4b79      	ldr	r3, [pc, #484]	; (800c5b0 <_vfiprintf_r+0x248>)
 800c3ca:	429d      	cmp	r5, r3
 800c3cc:	bf08      	it	eq
 800c3ce:	68f5      	ldreq	r5, [r6, #12]
 800c3d0:	e7da      	b.n	800c388 <_vfiprintf_r+0x20>
 800c3d2:	89ab      	ldrh	r3, [r5, #12]
 800c3d4:	0598      	lsls	r0, r3, #22
 800c3d6:	d4ed      	bmi.n	800c3b4 <_vfiprintf_r+0x4c>
 800c3d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3da:	f000 fd42 	bl	800ce62 <__retarget_lock_release_recursive>
 800c3de:	e7e9      	b.n	800c3b4 <_vfiprintf_r+0x4c>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e4:	2320      	movs	r3, #32
 800c3e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3ea:	2330      	movs	r3, #48	; 0x30
 800c3ec:	f04f 0901 	mov.w	r9, #1
 800c3f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c5b4 <_vfiprintf_r+0x24c>
 800c3f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3fc:	4623      	mov	r3, r4
 800c3fe:	469a      	mov	sl, r3
 800c400:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c404:	b10a      	cbz	r2, 800c40a <_vfiprintf_r+0xa2>
 800c406:	2a25      	cmp	r2, #37	; 0x25
 800c408:	d1f9      	bne.n	800c3fe <_vfiprintf_r+0x96>
 800c40a:	ebba 0b04 	subs.w	fp, sl, r4
 800c40e:	d00b      	beq.n	800c428 <_vfiprintf_r+0xc0>
 800c410:	465b      	mov	r3, fp
 800c412:	4622      	mov	r2, r4
 800c414:	4629      	mov	r1, r5
 800c416:	4630      	mov	r0, r6
 800c418:	f7ff ff93 	bl	800c342 <__sfputs_r>
 800c41c:	3001      	adds	r0, #1
 800c41e:	f000 80aa 	beq.w	800c576 <_vfiprintf_r+0x20e>
 800c422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c424:	445a      	add	r2, fp
 800c426:	9209      	str	r2, [sp, #36]	; 0x24
 800c428:	f89a 3000 	ldrb.w	r3, [sl]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f000 80a2 	beq.w	800c576 <_vfiprintf_r+0x20e>
 800c432:	2300      	movs	r3, #0
 800c434:	f04f 32ff 	mov.w	r2, #4294967295
 800c438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c43c:	f10a 0a01 	add.w	sl, sl, #1
 800c440:	9304      	str	r3, [sp, #16]
 800c442:	9307      	str	r3, [sp, #28]
 800c444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c448:	931a      	str	r3, [sp, #104]	; 0x68
 800c44a:	4654      	mov	r4, sl
 800c44c:	2205      	movs	r2, #5
 800c44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c452:	4858      	ldr	r0, [pc, #352]	; (800c5b4 <_vfiprintf_r+0x24c>)
 800c454:	f000 fd6a 	bl	800cf2c <memchr>
 800c458:	9a04      	ldr	r2, [sp, #16]
 800c45a:	b9d8      	cbnz	r0, 800c494 <_vfiprintf_r+0x12c>
 800c45c:	06d1      	lsls	r1, r2, #27
 800c45e:	bf44      	itt	mi
 800c460:	2320      	movmi	r3, #32
 800c462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c466:	0713      	lsls	r3, r2, #28
 800c468:	bf44      	itt	mi
 800c46a:	232b      	movmi	r3, #43	; 0x2b
 800c46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c470:	f89a 3000 	ldrb.w	r3, [sl]
 800c474:	2b2a      	cmp	r3, #42	; 0x2a
 800c476:	d015      	beq.n	800c4a4 <_vfiprintf_r+0x13c>
 800c478:	4654      	mov	r4, sl
 800c47a:	2000      	movs	r0, #0
 800c47c:	f04f 0c0a 	mov.w	ip, #10
 800c480:	9a07      	ldr	r2, [sp, #28]
 800c482:	4621      	mov	r1, r4
 800c484:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c488:	3b30      	subs	r3, #48	; 0x30
 800c48a:	2b09      	cmp	r3, #9
 800c48c:	d94e      	bls.n	800c52c <_vfiprintf_r+0x1c4>
 800c48e:	b1b0      	cbz	r0, 800c4be <_vfiprintf_r+0x156>
 800c490:	9207      	str	r2, [sp, #28]
 800c492:	e014      	b.n	800c4be <_vfiprintf_r+0x156>
 800c494:	eba0 0308 	sub.w	r3, r0, r8
 800c498:	fa09 f303 	lsl.w	r3, r9, r3
 800c49c:	4313      	orrs	r3, r2
 800c49e:	46a2      	mov	sl, r4
 800c4a0:	9304      	str	r3, [sp, #16]
 800c4a2:	e7d2      	b.n	800c44a <_vfiprintf_r+0xe2>
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	1d19      	adds	r1, r3, #4
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	9103      	str	r1, [sp, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	bfbb      	ittet	lt
 800c4b0:	425b      	neglt	r3, r3
 800c4b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c4b6:	9307      	strge	r3, [sp, #28]
 800c4b8:	9307      	strlt	r3, [sp, #28]
 800c4ba:	bfb8      	it	lt
 800c4bc:	9204      	strlt	r2, [sp, #16]
 800c4be:	7823      	ldrb	r3, [r4, #0]
 800c4c0:	2b2e      	cmp	r3, #46	; 0x2e
 800c4c2:	d10c      	bne.n	800c4de <_vfiprintf_r+0x176>
 800c4c4:	7863      	ldrb	r3, [r4, #1]
 800c4c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4c8:	d135      	bne.n	800c536 <_vfiprintf_r+0x1ce>
 800c4ca:	9b03      	ldr	r3, [sp, #12]
 800c4cc:	3402      	adds	r4, #2
 800c4ce:	1d1a      	adds	r2, r3, #4
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	9203      	str	r2, [sp, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	bfb8      	it	lt
 800c4d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4dc:	9305      	str	r3, [sp, #20]
 800c4de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c5c4 <_vfiprintf_r+0x25c>
 800c4e2:	2203      	movs	r2, #3
 800c4e4:	4650      	mov	r0, sl
 800c4e6:	7821      	ldrb	r1, [r4, #0]
 800c4e8:	f000 fd20 	bl	800cf2c <memchr>
 800c4ec:	b140      	cbz	r0, 800c500 <_vfiprintf_r+0x198>
 800c4ee:	2340      	movs	r3, #64	; 0x40
 800c4f0:	eba0 000a 	sub.w	r0, r0, sl
 800c4f4:	fa03 f000 	lsl.w	r0, r3, r0
 800c4f8:	9b04      	ldr	r3, [sp, #16]
 800c4fa:	3401      	adds	r4, #1
 800c4fc:	4303      	orrs	r3, r0
 800c4fe:	9304      	str	r3, [sp, #16]
 800c500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c504:	2206      	movs	r2, #6
 800c506:	482c      	ldr	r0, [pc, #176]	; (800c5b8 <_vfiprintf_r+0x250>)
 800c508:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c50c:	f000 fd0e 	bl	800cf2c <memchr>
 800c510:	2800      	cmp	r0, #0
 800c512:	d03f      	beq.n	800c594 <_vfiprintf_r+0x22c>
 800c514:	4b29      	ldr	r3, [pc, #164]	; (800c5bc <_vfiprintf_r+0x254>)
 800c516:	bb1b      	cbnz	r3, 800c560 <_vfiprintf_r+0x1f8>
 800c518:	9b03      	ldr	r3, [sp, #12]
 800c51a:	3307      	adds	r3, #7
 800c51c:	f023 0307 	bic.w	r3, r3, #7
 800c520:	3308      	adds	r3, #8
 800c522:	9303      	str	r3, [sp, #12]
 800c524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c526:	443b      	add	r3, r7
 800c528:	9309      	str	r3, [sp, #36]	; 0x24
 800c52a:	e767      	b.n	800c3fc <_vfiprintf_r+0x94>
 800c52c:	460c      	mov	r4, r1
 800c52e:	2001      	movs	r0, #1
 800c530:	fb0c 3202 	mla	r2, ip, r2, r3
 800c534:	e7a5      	b.n	800c482 <_vfiprintf_r+0x11a>
 800c536:	2300      	movs	r3, #0
 800c538:	f04f 0c0a 	mov.w	ip, #10
 800c53c:	4619      	mov	r1, r3
 800c53e:	3401      	adds	r4, #1
 800c540:	9305      	str	r3, [sp, #20]
 800c542:	4620      	mov	r0, r4
 800c544:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c548:	3a30      	subs	r2, #48	; 0x30
 800c54a:	2a09      	cmp	r2, #9
 800c54c:	d903      	bls.n	800c556 <_vfiprintf_r+0x1ee>
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d0c5      	beq.n	800c4de <_vfiprintf_r+0x176>
 800c552:	9105      	str	r1, [sp, #20]
 800c554:	e7c3      	b.n	800c4de <_vfiprintf_r+0x176>
 800c556:	4604      	mov	r4, r0
 800c558:	2301      	movs	r3, #1
 800c55a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c55e:	e7f0      	b.n	800c542 <_vfiprintf_r+0x1da>
 800c560:	ab03      	add	r3, sp, #12
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	462a      	mov	r2, r5
 800c566:	4630      	mov	r0, r6
 800c568:	4b15      	ldr	r3, [pc, #84]	; (800c5c0 <_vfiprintf_r+0x258>)
 800c56a:	a904      	add	r1, sp, #16
 800c56c:	f3af 8000 	nop.w
 800c570:	4607      	mov	r7, r0
 800c572:	1c78      	adds	r0, r7, #1
 800c574:	d1d6      	bne.n	800c524 <_vfiprintf_r+0x1bc>
 800c576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c578:	07d9      	lsls	r1, r3, #31
 800c57a:	d405      	bmi.n	800c588 <_vfiprintf_r+0x220>
 800c57c:	89ab      	ldrh	r3, [r5, #12]
 800c57e:	059a      	lsls	r2, r3, #22
 800c580:	d402      	bmi.n	800c588 <_vfiprintf_r+0x220>
 800c582:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c584:	f000 fc6d 	bl	800ce62 <__retarget_lock_release_recursive>
 800c588:	89ab      	ldrh	r3, [r5, #12]
 800c58a:	065b      	lsls	r3, r3, #25
 800c58c:	f53f af12 	bmi.w	800c3b4 <_vfiprintf_r+0x4c>
 800c590:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c592:	e711      	b.n	800c3b8 <_vfiprintf_r+0x50>
 800c594:	ab03      	add	r3, sp, #12
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	462a      	mov	r2, r5
 800c59a:	4630      	mov	r0, r6
 800c59c:	4b08      	ldr	r3, [pc, #32]	; (800c5c0 <_vfiprintf_r+0x258>)
 800c59e:	a904      	add	r1, sp, #16
 800c5a0:	f000 f882 	bl	800c6a8 <_printf_i>
 800c5a4:	e7e4      	b.n	800c570 <_vfiprintf_r+0x208>
 800c5a6:	bf00      	nop
 800c5a8:	0800d808 	.word	0x0800d808
 800c5ac:	0800d828 	.word	0x0800d828
 800c5b0:	0800d7e8 	.word	0x0800d7e8
 800c5b4:	0800d6b4 	.word	0x0800d6b4
 800c5b8:	0800d6be 	.word	0x0800d6be
 800c5bc:	00000000 	.word	0x00000000
 800c5c0:	0800c343 	.word	0x0800c343
 800c5c4:	0800d6ba 	.word	0x0800d6ba

0800c5c8 <_printf_common>:
 800c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5cc:	4616      	mov	r6, r2
 800c5ce:	4699      	mov	r9, r3
 800c5d0:	688a      	ldr	r2, [r1, #8]
 800c5d2:	690b      	ldr	r3, [r1, #16]
 800c5d4:	4607      	mov	r7, r0
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	bfb8      	it	lt
 800c5da:	4613      	movlt	r3, r2
 800c5dc:	6033      	str	r3, [r6, #0]
 800c5de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5e8:	b10a      	cbz	r2, 800c5ee <_printf_common+0x26>
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	6033      	str	r3, [r6, #0]
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	0699      	lsls	r1, r3, #26
 800c5f2:	bf42      	ittt	mi
 800c5f4:	6833      	ldrmi	r3, [r6, #0]
 800c5f6:	3302      	addmi	r3, #2
 800c5f8:	6033      	strmi	r3, [r6, #0]
 800c5fa:	6825      	ldr	r5, [r4, #0]
 800c5fc:	f015 0506 	ands.w	r5, r5, #6
 800c600:	d106      	bne.n	800c610 <_printf_common+0x48>
 800c602:	f104 0a19 	add.w	sl, r4, #25
 800c606:	68e3      	ldr	r3, [r4, #12]
 800c608:	6832      	ldr	r2, [r6, #0]
 800c60a:	1a9b      	subs	r3, r3, r2
 800c60c:	42ab      	cmp	r3, r5
 800c60e:	dc28      	bgt.n	800c662 <_printf_common+0x9a>
 800c610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c614:	1e13      	subs	r3, r2, #0
 800c616:	6822      	ldr	r2, [r4, #0]
 800c618:	bf18      	it	ne
 800c61a:	2301      	movne	r3, #1
 800c61c:	0692      	lsls	r2, r2, #26
 800c61e:	d42d      	bmi.n	800c67c <_printf_common+0xb4>
 800c620:	4649      	mov	r1, r9
 800c622:	4638      	mov	r0, r7
 800c624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c628:	47c0      	blx	r8
 800c62a:	3001      	adds	r0, #1
 800c62c:	d020      	beq.n	800c670 <_printf_common+0xa8>
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	68e5      	ldr	r5, [r4, #12]
 800c632:	f003 0306 	and.w	r3, r3, #6
 800c636:	2b04      	cmp	r3, #4
 800c638:	bf18      	it	ne
 800c63a:	2500      	movne	r5, #0
 800c63c:	6832      	ldr	r2, [r6, #0]
 800c63e:	f04f 0600 	mov.w	r6, #0
 800c642:	68a3      	ldr	r3, [r4, #8]
 800c644:	bf08      	it	eq
 800c646:	1aad      	subeq	r5, r5, r2
 800c648:	6922      	ldr	r2, [r4, #16]
 800c64a:	bf08      	it	eq
 800c64c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c650:	4293      	cmp	r3, r2
 800c652:	bfc4      	itt	gt
 800c654:	1a9b      	subgt	r3, r3, r2
 800c656:	18ed      	addgt	r5, r5, r3
 800c658:	341a      	adds	r4, #26
 800c65a:	42b5      	cmp	r5, r6
 800c65c:	d11a      	bne.n	800c694 <_printf_common+0xcc>
 800c65e:	2000      	movs	r0, #0
 800c660:	e008      	b.n	800c674 <_printf_common+0xac>
 800c662:	2301      	movs	r3, #1
 800c664:	4652      	mov	r2, sl
 800c666:	4649      	mov	r1, r9
 800c668:	4638      	mov	r0, r7
 800c66a:	47c0      	blx	r8
 800c66c:	3001      	adds	r0, #1
 800c66e:	d103      	bne.n	800c678 <_printf_common+0xb0>
 800c670:	f04f 30ff 	mov.w	r0, #4294967295
 800c674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c678:	3501      	adds	r5, #1
 800c67a:	e7c4      	b.n	800c606 <_printf_common+0x3e>
 800c67c:	2030      	movs	r0, #48	; 0x30
 800c67e:	18e1      	adds	r1, r4, r3
 800c680:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c68a:	4422      	add	r2, r4
 800c68c:	3302      	adds	r3, #2
 800c68e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c692:	e7c5      	b.n	800c620 <_printf_common+0x58>
 800c694:	2301      	movs	r3, #1
 800c696:	4622      	mov	r2, r4
 800c698:	4649      	mov	r1, r9
 800c69a:	4638      	mov	r0, r7
 800c69c:	47c0      	blx	r8
 800c69e:	3001      	adds	r0, #1
 800c6a0:	d0e6      	beq.n	800c670 <_printf_common+0xa8>
 800c6a2:	3601      	adds	r6, #1
 800c6a4:	e7d9      	b.n	800c65a <_printf_common+0x92>
	...

0800c6a8 <_printf_i>:
 800c6a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	7e27      	ldrb	r7, [r4, #24]
 800c6b0:	4691      	mov	r9, r2
 800c6b2:	2f78      	cmp	r7, #120	; 0x78
 800c6b4:	4680      	mov	r8, r0
 800c6b6:	469a      	mov	sl, r3
 800c6b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c6ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6be:	d807      	bhi.n	800c6d0 <_printf_i+0x28>
 800c6c0:	2f62      	cmp	r7, #98	; 0x62
 800c6c2:	d80a      	bhi.n	800c6da <_printf_i+0x32>
 800c6c4:	2f00      	cmp	r7, #0
 800c6c6:	f000 80d9 	beq.w	800c87c <_printf_i+0x1d4>
 800c6ca:	2f58      	cmp	r7, #88	; 0x58
 800c6cc:	f000 80a4 	beq.w	800c818 <_printf_i+0x170>
 800c6d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c6d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6d8:	e03a      	b.n	800c750 <_printf_i+0xa8>
 800c6da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c6de:	2b15      	cmp	r3, #21
 800c6e0:	d8f6      	bhi.n	800c6d0 <_printf_i+0x28>
 800c6e2:	a001      	add	r0, pc, #4	; (adr r0, 800c6e8 <_printf_i+0x40>)
 800c6e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c6e8:	0800c741 	.word	0x0800c741
 800c6ec:	0800c755 	.word	0x0800c755
 800c6f0:	0800c6d1 	.word	0x0800c6d1
 800c6f4:	0800c6d1 	.word	0x0800c6d1
 800c6f8:	0800c6d1 	.word	0x0800c6d1
 800c6fc:	0800c6d1 	.word	0x0800c6d1
 800c700:	0800c755 	.word	0x0800c755
 800c704:	0800c6d1 	.word	0x0800c6d1
 800c708:	0800c6d1 	.word	0x0800c6d1
 800c70c:	0800c6d1 	.word	0x0800c6d1
 800c710:	0800c6d1 	.word	0x0800c6d1
 800c714:	0800c863 	.word	0x0800c863
 800c718:	0800c785 	.word	0x0800c785
 800c71c:	0800c845 	.word	0x0800c845
 800c720:	0800c6d1 	.word	0x0800c6d1
 800c724:	0800c6d1 	.word	0x0800c6d1
 800c728:	0800c885 	.word	0x0800c885
 800c72c:	0800c6d1 	.word	0x0800c6d1
 800c730:	0800c785 	.word	0x0800c785
 800c734:	0800c6d1 	.word	0x0800c6d1
 800c738:	0800c6d1 	.word	0x0800c6d1
 800c73c:	0800c84d 	.word	0x0800c84d
 800c740:	680b      	ldr	r3, [r1, #0]
 800c742:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c746:	1d1a      	adds	r2, r3, #4
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	600a      	str	r2, [r1, #0]
 800c74c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c750:	2301      	movs	r3, #1
 800c752:	e0a4      	b.n	800c89e <_printf_i+0x1f6>
 800c754:	6825      	ldr	r5, [r4, #0]
 800c756:	6808      	ldr	r0, [r1, #0]
 800c758:	062e      	lsls	r6, r5, #24
 800c75a:	f100 0304 	add.w	r3, r0, #4
 800c75e:	d50a      	bpl.n	800c776 <_printf_i+0xce>
 800c760:	6805      	ldr	r5, [r0, #0]
 800c762:	600b      	str	r3, [r1, #0]
 800c764:	2d00      	cmp	r5, #0
 800c766:	da03      	bge.n	800c770 <_printf_i+0xc8>
 800c768:	232d      	movs	r3, #45	; 0x2d
 800c76a:	426d      	negs	r5, r5
 800c76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c770:	230a      	movs	r3, #10
 800c772:	485e      	ldr	r0, [pc, #376]	; (800c8ec <_printf_i+0x244>)
 800c774:	e019      	b.n	800c7aa <_printf_i+0x102>
 800c776:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c77a:	6805      	ldr	r5, [r0, #0]
 800c77c:	600b      	str	r3, [r1, #0]
 800c77e:	bf18      	it	ne
 800c780:	b22d      	sxthne	r5, r5
 800c782:	e7ef      	b.n	800c764 <_printf_i+0xbc>
 800c784:	680b      	ldr	r3, [r1, #0]
 800c786:	6825      	ldr	r5, [r4, #0]
 800c788:	1d18      	adds	r0, r3, #4
 800c78a:	6008      	str	r0, [r1, #0]
 800c78c:	0628      	lsls	r0, r5, #24
 800c78e:	d501      	bpl.n	800c794 <_printf_i+0xec>
 800c790:	681d      	ldr	r5, [r3, #0]
 800c792:	e002      	b.n	800c79a <_printf_i+0xf2>
 800c794:	0669      	lsls	r1, r5, #25
 800c796:	d5fb      	bpl.n	800c790 <_printf_i+0xe8>
 800c798:	881d      	ldrh	r5, [r3, #0]
 800c79a:	2f6f      	cmp	r7, #111	; 0x6f
 800c79c:	bf0c      	ite	eq
 800c79e:	2308      	moveq	r3, #8
 800c7a0:	230a      	movne	r3, #10
 800c7a2:	4852      	ldr	r0, [pc, #328]	; (800c8ec <_printf_i+0x244>)
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7aa:	6866      	ldr	r6, [r4, #4]
 800c7ac:	2e00      	cmp	r6, #0
 800c7ae:	bfa8      	it	ge
 800c7b0:	6821      	ldrge	r1, [r4, #0]
 800c7b2:	60a6      	str	r6, [r4, #8]
 800c7b4:	bfa4      	itt	ge
 800c7b6:	f021 0104 	bicge.w	r1, r1, #4
 800c7ba:	6021      	strge	r1, [r4, #0]
 800c7bc:	b90d      	cbnz	r5, 800c7c2 <_printf_i+0x11a>
 800c7be:	2e00      	cmp	r6, #0
 800c7c0:	d04d      	beq.n	800c85e <_printf_i+0x1b6>
 800c7c2:	4616      	mov	r6, r2
 800c7c4:	fbb5 f1f3 	udiv	r1, r5, r3
 800c7c8:	fb03 5711 	mls	r7, r3, r1, r5
 800c7cc:	5dc7      	ldrb	r7, [r0, r7]
 800c7ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c7d2:	462f      	mov	r7, r5
 800c7d4:	42bb      	cmp	r3, r7
 800c7d6:	460d      	mov	r5, r1
 800c7d8:	d9f4      	bls.n	800c7c4 <_printf_i+0x11c>
 800c7da:	2b08      	cmp	r3, #8
 800c7dc:	d10b      	bne.n	800c7f6 <_printf_i+0x14e>
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	07df      	lsls	r7, r3, #31
 800c7e2:	d508      	bpl.n	800c7f6 <_printf_i+0x14e>
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	6861      	ldr	r1, [r4, #4]
 800c7e8:	4299      	cmp	r1, r3
 800c7ea:	bfde      	ittt	le
 800c7ec:	2330      	movle	r3, #48	; 0x30
 800c7ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c7f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c7f6:	1b92      	subs	r2, r2, r6
 800c7f8:	6122      	str	r2, [r4, #16]
 800c7fa:	464b      	mov	r3, r9
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	4640      	mov	r0, r8
 800c800:	f8cd a000 	str.w	sl, [sp]
 800c804:	aa03      	add	r2, sp, #12
 800c806:	f7ff fedf 	bl	800c5c8 <_printf_common>
 800c80a:	3001      	adds	r0, #1
 800c80c:	d14c      	bne.n	800c8a8 <_printf_i+0x200>
 800c80e:	f04f 30ff 	mov.w	r0, #4294967295
 800c812:	b004      	add	sp, #16
 800c814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c818:	4834      	ldr	r0, [pc, #208]	; (800c8ec <_printf_i+0x244>)
 800c81a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c81e:	680e      	ldr	r6, [r1, #0]
 800c820:	6823      	ldr	r3, [r4, #0]
 800c822:	f856 5b04 	ldr.w	r5, [r6], #4
 800c826:	061f      	lsls	r7, r3, #24
 800c828:	600e      	str	r6, [r1, #0]
 800c82a:	d514      	bpl.n	800c856 <_printf_i+0x1ae>
 800c82c:	07d9      	lsls	r1, r3, #31
 800c82e:	bf44      	itt	mi
 800c830:	f043 0320 	orrmi.w	r3, r3, #32
 800c834:	6023      	strmi	r3, [r4, #0]
 800c836:	b91d      	cbnz	r5, 800c840 <_printf_i+0x198>
 800c838:	6823      	ldr	r3, [r4, #0]
 800c83a:	f023 0320 	bic.w	r3, r3, #32
 800c83e:	6023      	str	r3, [r4, #0]
 800c840:	2310      	movs	r3, #16
 800c842:	e7af      	b.n	800c7a4 <_printf_i+0xfc>
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	f043 0320 	orr.w	r3, r3, #32
 800c84a:	6023      	str	r3, [r4, #0]
 800c84c:	2378      	movs	r3, #120	; 0x78
 800c84e:	4828      	ldr	r0, [pc, #160]	; (800c8f0 <_printf_i+0x248>)
 800c850:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c854:	e7e3      	b.n	800c81e <_printf_i+0x176>
 800c856:	065e      	lsls	r6, r3, #25
 800c858:	bf48      	it	mi
 800c85a:	b2ad      	uxthmi	r5, r5
 800c85c:	e7e6      	b.n	800c82c <_printf_i+0x184>
 800c85e:	4616      	mov	r6, r2
 800c860:	e7bb      	b.n	800c7da <_printf_i+0x132>
 800c862:	680b      	ldr	r3, [r1, #0]
 800c864:	6826      	ldr	r6, [r4, #0]
 800c866:	1d1d      	adds	r5, r3, #4
 800c868:	6960      	ldr	r0, [r4, #20]
 800c86a:	600d      	str	r5, [r1, #0]
 800c86c:	0635      	lsls	r5, r6, #24
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	d501      	bpl.n	800c876 <_printf_i+0x1ce>
 800c872:	6018      	str	r0, [r3, #0]
 800c874:	e002      	b.n	800c87c <_printf_i+0x1d4>
 800c876:	0671      	lsls	r1, r6, #25
 800c878:	d5fb      	bpl.n	800c872 <_printf_i+0x1ca>
 800c87a:	8018      	strh	r0, [r3, #0]
 800c87c:	2300      	movs	r3, #0
 800c87e:	4616      	mov	r6, r2
 800c880:	6123      	str	r3, [r4, #16]
 800c882:	e7ba      	b.n	800c7fa <_printf_i+0x152>
 800c884:	680b      	ldr	r3, [r1, #0]
 800c886:	1d1a      	adds	r2, r3, #4
 800c888:	600a      	str	r2, [r1, #0]
 800c88a:	681e      	ldr	r6, [r3, #0]
 800c88c:	2100      	movs	r1, #0
 800c88e:	4630      	mov	r0, r6
 800c890:	6862      	ldr	r2, [r4, #4]
 800c892:	f000 fb4b 	bl	800cf2c <memchr>
 800c896:	b108      	cbz	r0, 800c89c <_printf_i+0x1f4>
 800c898:	1b80      	subs	r0, r0, r6
 800c89a:	6060      	str	r0, [r4, #4]
 800c89c:	6863      	ldr	r3, [r4, #4]
 800c89e:	6123      	str	r3, [r4, #16]
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8a6:	e7a8      	b.n	800c7fa <_printf_i+0x152>
 800c8a8:	4632      	mov	r2, r6
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	4640      	mov	r0, r8
 800c8ae:	6923      	ldr	r3, [r4, #16]
 800c8b0:	47d0      	blx	sl
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	d0ab      	beq.n	800c80e <_printf_i+0x166>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	079b      	lsls	r3, r3, #30
 800c8ba:	d413      	bmi.n	800c8e4 <_printf_i+0x23c>
 800c8bc:	68e0      	ldr	r0, [r4, #12]
 800c8be:	9b03      	ldr	r3, [sp, #12]
 800c8c0:	4298      	cmp	r0, r3
 800c8c2:	bfb8      	it	lt
 800c8c4:	4618      	movlt	r0, r3
 800c8c6:	e7a4      	b.n	800c812 <_printf_i+0x16a>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	4632      	mov	r2, r6
 800c8cc:	4649      	mov	r1, r9
 800c8ce:	4640      	mov	r0, r8
 800c8d0:	47d0      	blx	sl
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	d09b      	beq.n	800c80e <_printf_i+0x166>
 800c8d6:	3501      	adds	r5, #1
 800c8d8:	68e3      	ldr	r3, [r4, #12]
 800c8da:	9903      	ldr	r1, [sp, #12]
 800c8dc:	1a5b      	subs	r3, r3, r1
 800c8de:	42ab      	cmp	r3, r5
 800c8e0:	dcf2      	bgt.n	800c8c8 <_printf_i+0x220>
 800c8e2:	e7eb      	b.n	800c8bc <_printf_i+0x214>
 800c8e4:	2500      	movs	r5, #0
 800c8e6:	f104 0619 	add.w	r6, r4, #25
 800c8ea:	e7f5      	b.n	800c8d8 <_printf_i+0x230>
 800c8ec:	0800d6c5 	.word	0x0800d6c5
 800c8f0:	0800d6d6 	.word	0x0800d6d6

0800c8f4 <nan>:
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	4901      	ldr	r1, [pc, #4]	; (800c8fc <nan+0x8>)
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	7ff80000 	.word	0x7ff80000

0800c900 <_sbrk_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	2300      	movs	r3, #0
 800c904:	4d05      	ldr	r5, [pc, #20]	; (800c91c <_sbrk_r+0x1c>)
 800c906:	4604      	mov	r4, r0
 800c908:	4608      	mov	r0, r1
 800c90a:	602b      	str	r3, [r5, #0]
 800c90c:	f7f5 ffb2 	bl	8002874 <_sbrk>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	d102      	bne.n	800c91a <_sbrk_r+0x1a>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	b103      	cbz	r3, 800c91a <_sbrk_r+0x1a>
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	2000163c 	.word	0x2000163c

0800c920 <strncmp>:
 800c920:	b510      	push	{r4, lr}
 800c922:	b16a      	cbz	r2, 800c940 <strncmp+0x20>
 800c924:	3901      	subs	r1, #1
 800c926:	1884      	adds	r4, r0, r2
 800c928:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c92c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c930:	4293      	cmp	r3, r2
 800c932:	d103      	bne.n	800c93c <strncmp+0x1c>
 800c934:	42a0      	cmp	r0, r4
 800c936:	d001      	beq.n	800c93c <strncmp+0x1c>
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1f5      	bne.n	800c928 <strncmp+0x8>
 800c93c:	1a98      	subs	r0, r3, r2
 800c93e:	bd10      	pop	{r4, pc}
 800c940:	4610      	mov	r0, r2
 800c942:	e7fc      	b.n	800c93e <strncmp+0x1e>

0800c944 <__swbuf_r>:
 800c944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c946:	460e      	mov	r6, r1
 800c948:	4614      	mov	r4, r2
 800c94a:	4605      	mov	r5, r0
 800c94c:	b118      	cbz	r0, 800c956 <__swbuf_r+0x12>
 800c94e:	6983      	ldr	r3, [r0, #24]
 800c950:	b90b      	cbnz	r3, 800c956 <__swbuf_r+0x12>
 800c952:	f000 f9e7 	bl	800cd24 <__sinit>
 800c956:	4b21      	ldr	r3, [pc, #132]	; (800c9dc <__swbuf_r+0x98>)
 800c958:	429c      	cmp	r4, r3
 800c95a:	d12b      	bne.n	800c9b4 <__swbuf_r+0x70>
 800c95c:	686c      	ldr	r4, [r5, #4]
 800c95e:	69a3      	ldr	r3, [r4, #24]
 800c960:	60a3      	str	r3, [r4, #8]
 800c962:	89a3      	ldrh	r3, [r4, #12]
 800c964:	071a      	lsls	r2, r3, #28
 800c966:	d52f      	bpl.n	800c9c8 <__swbuf_r+0x84>
 800c968:	6923      	ldr	r3, [r4, #16]
 800c96a:	b36b      	cbz	r3, 800c9c8 <__swbuf_r+0x84>
 800c96c:	6923      	ldr	r3, [r4, #16]
 800c96e:	6820      	ldr	r0, [r4, #0]
 800c970:	b2f6      	uxtb	r6, r6
 800c972:	1ac0      	subs	r0, r0, r3
 800c974:	6963      	ldr	r3, [r4, #20]
 800c976:	4637      	mov	r7, r6
 800c978:	4283      	cmp	r3, r0
 800c97a:	dc04      	bgt.n	800c986 <__swbuf_r+0x42>
 800c97c:	4621      	mov	r1, r4
 800c97e:	4628      	mov	r0, r5
 800c980:	f000 f93c 	bl	800cbfc <_fflush_r>
 800c984:	bb30      	cbnz	r0, 800c9d4 <__swbuf_r+0x90>
 800c986:	68a3      	ldr	r3, [r4, #8]
 800c988:	3001      	adds	r0, #1
 800c98a:	3b01      	subs	r3, #1
 800c98c:	60a3      	str	r3, [r4, #8]
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	1c5a      	adds	r2, r3, #1
 800c992:	6022      	str	r2, [r4, #0]
 800c994:	701e      	strb	r6, [r3, #0]
 800c996:	6963      	ldr	r3, [r4, #20]
 800c998:	4283      	cmp	r3, r0
 800c99a:	d004      	beq.n	800c9a6 <__swbuf_r+0x62>
 800c99c:	89a3      	ldrh	r3, [r4, #12]
 800c99e:	07db      	lsls	r3, r3, #31
 800c9a0:	d506      	bpl.n	800c9b0 <__swbuf_r+0x6c>
 800c9a2:	2e0a      	cmp	r6, #10
 800c9a4:	d104      	bne.n	800c9b0 <__swbuf_r+0x6c>
 800c9a6:	4621      	mov	r1, r4
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	f000 f927 	bl	800cbfc <_fflush_r>
 800c9ae:	b988      	cbnz	r0, 800c9d4 <__swbuf_r+0x90>
 800c9b0:	4638      	mov	r0, r7
 800c9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9b4:	4b0a      	ldr	r3, [pc, #40]	; (800c9e0 <__swbuf_r+0x9c>)
 800c9b6:	429c      	cmp	r4, r3
 800c9b8:	d101      	bne.n	800c9be <__swbuf_r+0x7a>
 800c9ba:	68ac      	ldr	r4, [r5, #8]
 800c9bc:	e7cf      	b.n	800c95e <__swbuf_r+0x1a>
 800c9be:	4b09      	ldr	r3, [pc, #36]	; (800c9e4 <__swbuf_r+0xa0>)
 800c9c0:	429c      	cmp	r4, r3
 800c9c2:	bf08      	it	eq
 800c9c4:	68ec      	ldreq	r4, [r5, #12]
 800c9c6:	e7ca      	b.n	800c95e <__swbuf_r+0x1a>
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f000 f81a 	bl	800ca04 <__swsetup_r>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d0cb      	beq.n	800c96c <__swbuf_r+0x28>
 800c9d4:	f04f 37ff 	mov.w	r7, #4294967295
 800c9d8:	e7ea      	b.n	800c9b0 <__swbuf_r+0x6c>
 800c9da:	bf00      	nop
 800c9dc:	0800d808 	.word	0x0800d808
 800c9e0:	0800d828 	.word	0x0800d828
 800c9e4:	0800d7e8 	.word	0x0800d7e8

0800c9e8 <__ascii_wctomb>:
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	4608      	mov	r0, r1
 800c9ec:	b141      	cbz	r1, 800ca00 <__ascii_wctomb+0x18>
 800c9ee:	2aff      	cmp	r2, #255	; 0xff
 800c9f0:	d904      	bls.n	800c9fc <__ascii_wctomb+0x14>
 800c9f2:	228a      	movs	r2, #138	; 0x8a
 800c9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f8:	601a      	str	r2, [r3, #0]
 800c9fa:	4770      	bx	lr
 800c9fc:	2001      	movs	r0, #1
 800c9fe:	700a      	strb	r2, [r1, #0]
 800ca00:	4770      	bx	lr
	...

0800ca04 <__swsetup_r>:
 800ca04:	4b32      	ldr	r3, [pc, #200]	; (800cad0 <__swsetup_r+0xcc>)
 800ca06:	b570      	push	{r4, r5, r6, lr}
 800ca08:	681d      	ldr	r5, [r3, #0]
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	460c      	mov	r4, r1
 800ca0e:	b125      	cbz	r5, 800ca1a <__swsetup_r+0x16>
 800ca10:	69ab      	ldr	r3, [r5, #24]
 800ca12:	b913      	cbnz	r3, 800ca1a <__swsetup_r+0x16>
 800ca14:	4628      	mov	r0, r5
 800ca16:	f000 f985 	bl	800cd24 <__sinit>
 800ca1a:	4b2e      	ldr	r3, [pc, #184]	; (800cad4 <__swsetup_r+0xd0>)
 800ca1c:	429c      	cmp	r4, r3
 800ca1e:	d10f      	bne.n	800ca40 <__swsetup_r+0x3c>
 800ca20:	686c      	ldr	r4, [r5, #4]
 800ca22:	89a3      	ldrh	r3, [r4, #12]
 800ca24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca28:	0719      	lsls	r1, r3, #28
 800ca2a:	d42c      	bmi.n	800ca86 <__swsetup_r+0x82>
 800ca2c:	06dd      	lsls	r5, r3, #27
 800ca2e:	d411      	bmi.n	800ca54 <__swsetup_r+0x50>
 800ca30:	2309      	movs	r3, #9
 800ca32:	6033      	str	r3, [r6, #0]
 800ca34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca38:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3c:	81a3      	strh	r3, [r4, #12]
 800ca3e:	e03e      	b.n	800cabe <__swsetup_r+0xba>
 800ca40:	4b25      	ldr	r3, [pc, #148]	; (800cad8 <__swsetup_r+0xd4>)
 800ca42:	429c      	cmp	r4, r3
 800ca44:	d101      	bne.n	800ca4a <__swsetup_r+0x46>
 800ca46:	68ac      	ldr	r4, [r5, #8]
 800ca48:	e7eb      	b.n	800ca22 <__swsetup_r+0x1e>
 800ca4a:	4b24      	ldr	r3, [pc, #144]	; (800cadc <__swsetup_r+0xd8>)
 800ca4c:	429c      	cmp	r4, r3
 800ca4e:	bf08      	it	eq
 800ca50:	68ec      	ldreq	r4, [r5, #12]
 800ca52:	e7e6      	b.n	800ca22 <__swsetup_r+0x1e>
 800ca54:	0758      	lsls	r0, r3, #29
 800ca56:	d512      	bpl.n	800ca7e <__swsetup_r+0x7a>
 800ca58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca5a:	b141      	cbz	r1, 800ca6e <__swsetup_r+0x6a>
 800ca5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca60:	4299      	cmp	r1, r3
 800ca62:	d002      	beq.n	800ca6a <__swsetup_r+0x66>
 800ca64:	4630      	mov	r0, r6
 800ca66:	f7ff fbb1 	bl	800c1cc <_free_r>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	6363      	str	r3, [r4, #52]	; 0x34
 800ca6e:	89a3      	ldrh	r3, [r4, #12]
 800ca70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca74:	81a3      	strh	r3, [r4, #12]
 800ca76:	2300      	movs	r3, #0
 800ca78:	6063      	str	r3, [r4, #4]
 800ca7a:	6923      	ldr	r3, [r4, #16]
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	89a3      	ldrh	r3, [r4, #12]
 800ca80:	f043 0308 	orr.w	r3, r3, #8
 800ca84:	81a3      	strh	r3, [r4, #12]
 800ca86:	6923      	ldr	r3, [r4, #16]
 800ca88:	b94b      	cbnz	r3, 800ca9e <__swsetup_r+0x9a>
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca94:	d003      	beq.n	800ca9e <__swsetup_r+0x9a>
 800ca96:	4621      	mov	r1, r4
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f000 fa07 	bl	800ceac <__smakebuf_r>
 800ca9e:	89a0      	ldrh	r0, [r4, #12]
 800caa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caa4:	f010 0301 	ands.w	r3, r0, #1
 800caa8:	d00a      	beq.n	800cac0 <__swsetup_r+0xbc>
 800caaa:	2300      	movs	r3, #0
 800caac:	60a3      	str	r3, [r4, #8]
 800caae:	6963      	ldr	r3, [r4, #20]
 800cab0:	425b      	negs	r3, r3
 800cab2:	61a3      	str	r3, [r4, #24]
 800cab4:	6923      	ldr	r3, [r4, #16]
 800cab6:	b943      	cbnz	r3, 800caca <__swsetup_r+0xc6>
 800cab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cabc:	d1ba      	bne.n	800ca34 <__swsetup_r+0x30>
 800cabe:	bd70      	pop	{r4, r5, r6, pc}
 800cac0:	0781      	lsls	r1, r0, #30
 800cac2:	bf58      	it	pl
 800cac4:	6963      	ldrpl	r3, [r4, #20]
 800cac6:	60a3      	str	r3, [r4, #8]
 800cac8:	e7f4      	b.n	800cab4 <__swsetup_r+0xb0>
 800caca:	2000      	movs	r0, #0
 800cacc:	e7f7      	b.n	800cabe <__swsetup_r+0xba>
 800cace:	bf00      	nop
 800cad0:	20000194 	.word	0x20000194
 800cad4:	0800d808 	.word	0x0800d808
 800cad8:	0800d828 	.word	0x0800d828
 800cadc:	0800d7e8 	.word	0x0800d7e8

0800cae0 <abort>:
 800cae0:	2006      	movs	r0, #6
 800cae2:	b508      	push	{r3, lr}
 800cae4:	f000 fa64 	bl	800cfb0 <raise>
 800cae8:	2001      	movs	r0, #1
 800caea:	f7f5 fe50 	bl	800278e <_exit>
	...

0800caf0 <__sflush_r>:
 800caf0:	898a      	ldrh	r2, [r1, #12]
 800caf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf6:	4605      	mov	r5, r0
 800caf8:	0710      	lsls	r0, r2, #28
 800cafa:	460c      	mov	r4, r1
 800cafc:	d458      	bmi.n	800cbb0 <__sflush_r+0xc0>
 800cafe:	684b      	ldr	r3, [r1, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	dc05      	bgt.n	800cb10 <__sflush_r+0x20>
 800cb04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	dc02      	bgt.n	800cb10 <__sflush_r+0x20>
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb12:	2e00      	cmp	r6, #0
 800cb14:	d0f9      	beq.n	800cb0a <__sflush_r+0x1a>
 800cb16:	2300      	movs	r3, #0
 800cb18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb1c:	682f      	ldr	r7, [r5, #0]
 800cb1e:	602b      	str	r3, [r5, #0]
 800cb20:	d032      	beq.n	800cb88 <__sflush_r+0x98>
 800cb22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb24:	89a3      	ldrh	r3, [r4, #12]
 800cb26:	075a      	lsls	r2, r3, #29
 800cb28:	d505      	bpl.n	800cb36 <__sflush_r+0x46>
 800cb2a:	6863      	ldr	r3, [r4, #4]
 800cb2c:	1ac0      	subs	r0, r0, r3
 800cb2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb30:	b10b      	cbz	r3, 800cb36 <__sflush_r+0x46>
 800cb32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb34:	1ac0      	subs	r0, r0, r3
 800cb36:	2300      	movs	r3, #0
 800cb38:	4602      	mov	r2, r0
 800cb3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	6a21      	ldr	r1, [r4, #32]
 800cb40:	47b0      	blx	r6
 800cb42:	1c43      	adds	r3, r0, #1
 800cb44:	89a3      	ldrh	r3, [r4, #12]
 800cb46:	d106      	bne.n	800cb56 <__sflush_r+0x66>
 800cb48:	6829      	ldr	r1, [r5, #0]
 800cb4a:	291d      	cmp	r1, #29
 800cb4c:	d82c      	bhi.n	800cba8 <__sflush_r+0xb8>
 800cb4e:	4a2a      	ldr	r2, [pc, #168]	; (800cbf8 <__sflush_r+0x108>)
 800cb50:	40ca      	lsrs	r2, r1
 800cb52:	07d6      	lsls	r6, r2, #31
 800cb54:	d528      	bpl.n	800cba8 <__sflush_r+0xb8>
 800cb56:	2200      	movs	r2, #0
 800cb58:	6062      	str	r2, [r4, #4]
 800cb5a:	6922      	ldr	r2, [r4, #16]
 800cb5c:	04d9      	lsls	r1, r3, #19
 800cb5e:	6022      	str	r2, [r4, #0]
 800cb60:	d504      	bpl.n	800cb6c <__sflush_r+0x7c>
 800cb62:	1c42      	adds	r2, r0, #1
 800cb64:	d101      	bne.n	800cb6a <__sflush_r+0x7a>
 800cb66:	682b      	ldr	r3, [r5, #0]
 800cb68:	b903      	cbnz	r3, 800cb6c <__sflush_r+0x7c>
 800cb6a:	6560      	str	r0, [r4, #84]	; 0x54
 800cb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb6e:	602f      	str	r7, [r5, #0]
 800cb70:	2900      	cmp	r1, #0
 800cb72:	d0ca      	beq.n	800cb0a <__sflush_r+0x1a>
 800cb74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb78:	4299      	cmp	r1, r3
 800cb7a:	d002      	beq.n	800cb82 <__sflush_r+0x92>
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	f7ff fb25 	bl	800c1cc <_free_r>
 800cb82:	2000      	movs	r0, #0
 800cb84:	6360      	str	r0, [r4, #52]	; 0x34
 800cb86:	e7c1      	b.n	800cb0c <__sflush_r+0x1c>
 800cb88:	6a21      	ldr	r1, [r4, #32]
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	47b0      	blx	r6
 800cb90:	1c41      	adds	r1, r0, #1
 800cb92:	d1c7      	bne.n	800cb24 <__sflush_r+0x34>
 800cb94:	682b      	ldr	r3, [r5, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d0c4      	beq.n	800cb24 <__sflush_r+0x34>
 800cb9a:	2b1d      	cmp	r3, #29
 800cb9c:	d001      	beq.n	800cba2 <__sflush_r+0xb2>
 800cb9e:	2b16      	cmp	r3, #22
 800cba0:	d101      	bne.n	800cba6 <__sflush_r+0xb6>
 800cba2:	602f      	str	r7, [r5, #0]
 800cba4:	e7b1      	b.n	800cb0a <__sflush_r+0x1a>
 800cba6:	89a3      	ldrh	r3, [r4, #12]
 800cba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbac:	81a3      	strh	r3, [r4, #12]
 800cbae:	e7ad      	b.n	800cb0c <__sflush_r+0x1c>
 800cbb0:	690f      	ldr	r7, [r1, #16]
 800cbb2:	2f00      	cmp	r7, #0
 800cbb4:	d0a9      	beq.n	800cb0a <__sflush_r+0x1a>
 800cbb6:	0793      	lsls	r3, r2, #30
 800cbb8:	bf18      	it	ne
 800cbba:	2300      	movne	r3, #0
 800cbbc:	680e      	ldr	r6, [r1, #0]
 800cbbe:	bf08      	it	eq
 800cbc0:	694b      	ldreq	r3, [r1, #20]
 800cbc2:	eba6 0807 	sub.w	r8, r6, r7
 800cbc6:	600f      	str	r7, [r1, #0]
 800cbc8:	608b      	str	r3, [r1, #8]
 800cbca:	f1b8 0f00 	cmp.w	r8, #0
 800cbce:	dd9c      	ble.n	800cb0a <__sflush_r+0x1a>
 800cbd0:	4643      	mov	r3, r8
 800cbd2:	463a      	mov	r2, r7
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	6a21      	ldr	r1, [r4, #32]
 800cbd8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbda:	47b0      	blx	r6
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	dc06      	bgt.n	800cbee <__sflush_r+0xfe>
 800cbe0:	89a3      	ldrh	r3, [r4, #12]
 800cbe2:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbea:	81a3      	strh	r3, [r4, #12]
 800cbec:	e78e      	b.n	800cb0c <__sflush_r+0x1c>
 800cbee:	4407      	add	r7, r0
 800cbf0:	eba8 0800 	sub.w	r8, r8, r0
 800cbf4:	e7e9      	b.n	800cbca <__sflush_r+0xda>
 800cbf6:	bf00      	nop
 800cbf8:	20400001 	.word	0x20400001

0800cbfc <_fflush_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	690b      	ldr	r3, [r1, #16]
 800cc00:	4605      	mov	r5, r0
 800cc02:	460c      	mov	r4, r1
 800cc04:	b913      	cbnz	r3, 800cc0c <_fflush_r+0x10>
 800cc06:	2500      	movs	r5, #0
 800cc08:	4628      	mov	r0, r5
 800cc0a:	bd38      	pop	{r3, r4, r5, pc}
 800cc0c:	b118      	cbz	r0, 800cc16 <_fflush_r+0x1a>
 800cc0e:	6983      	ldr	r3, [r0, #24]
 800cc10:	b90b      	cbnz	r3, 800cc16 <_fflush_r+0x1a>
 800cc12:	f000 f887 	bl	800cd24 <__sinit>
 800cc16:	4b14      	ldr	r3, [pc, #80]	; (800cc68 <_fflush_r+0x6c>)
 800cc18:	429c      	cmp	r4, r3
 800cc1a:	d11b      	bne.n	800cc54 <_fflush_r+0x58>
 800cc1c:	686c      	ldr	r4, [r5, #4]
 800cc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d0ef      	beq.n	800cc06 <_fflush_r+0xa>
 800cc26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc28:	07d0      	lsls	r0, r2, #31
 800cc2a:	d404      	bmi.n	800cc36 <_fflush_r+0x3a>
 800cc2c:	0599      	lsls	r1, r3, #22
 800cc2e:	d402      	bmi.n	800cc36 <_fflush_r+0x3a>
 800cc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc32:	f000 f915 	bl	800ce60 <__retarget_lock_acquire_recursive>
 800cc36:	4628      	mov	r0, r5
 800cc38:	4621      	mov	r1, r4
 800cc3a:	f7ff ff59 	bl	800caf0 <__sflush_r>
 800cc3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc40:	4605      	mov	r5, r0
 800cc42:	07da      	lsls	r2, r3, #31
 800cc44:	d4e0      	bmi.n	800cc08 <_fflush_r+0xc>
 800cc46:	89a3      	ldrh	r3, [r4, #12]
 800cc48:	059b      	lsls	r3, r3, #22
 800cc4a:	d4dd      	bmi.n	800cc08 <_fflush_r+0xc>
 800cc4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc4e:	f000 f908 	bl	800ce62 <__retarget_lock_release_recursive>
 800cc52:	e7d9      	b.n	800cc08 <_fflush_r+0xc>
 800cc54:	4b05      	ldr	r3, [pc, #20]	; (800cc6c <_fflush_r+0x70>)
 800cc56:	429c      	cmp	r4, r3
 800cc58:	d101      	bne.n	800cc5e <_fflush_r+0x62>
 800cc5a:	68ac      	ldr	r4, [r5, #8]
 800cc5c:	e7df      	b.n	800cc1e <_fflush_r+0x22>
 800cc5e:	4b04      	ldr	r3, [pc, #16]	; (800cc70 <_fflush_r+0x74>)
 800cc60:	429c      	cmp	r4, r3
 800cc62:	bf08      	it	eq
 800cc64:	68ec      	ldreq	r4, [r5, #12]
 800cc66:	e7da      	b.n	800cc1e <_fflush_r+0x22>
 800cc68:	0800d808 	.word	0x0800d808
 800cc6c:	0800d828 	.word	0x0800d828
 800cc70:	0800d7e8 	.word	0x0800d7e8

0800cc74 <std>:
 800cc74:	2300      	movs	r3, #0
 800cc76:	b510      	push	{r4, lr}
 800cc78:	4604      	mov	r4, r0
 800cc7a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc82:	6083      	str	r3, [r0, #8]
 800cc84:	8181      	strh	r1, [r0, #12]
 800cc86:	6643      	str	r3, [r0, #100]	; 0x64
 800cc88:	81c2      	strh	r2, [r0, #14]
 800cc8a:	6183      	str	r3, [r0, #24]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	2208      	movs	r2, #8
 800cc90:	305c      	adds	r0, #92	; 0x5c
 800cc92:	f7fd fb97 	bl	800a3c4 <memset>
 800cc96:	4b05      	ldr	r3, [pc, #20]	; (800ccac <std+0x38>)
 800cc98:	6224      	str	r4, [r4, #32]
 800cc9a:	6263      	str	r3, [r4, #36]	; 0x24
 800cc9c:	4b04      	ldr	r3, [pc, #16]	; (800ccb0 <std+0x3c>)
 800cc9e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cca0:	4b04      	ldr	r3, [pc, #16]	; (800ccb4 <std+0x40>)
 800cca2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cca4:	4b04      	ldr	r3, [pc, #16]	; (800ccb8 <std+0x44>)
 800cca6:	6323      	str	r3, [r4, #48]	; 0x30
 800cca8:	bd10      	pop	{r4, pc}
 800ccaa:	bf00      	nop
 800ccac:	0800cfe9 	.word	0x0800cfe9
 800ccb0:	0800d00b 	.word	0x0800d00b
 800ccb4:	0800d043 	.word	0x0800d043
 800ccb8:	0800d067 	.word	0x0800d067

0800ccbc <_cleanup_r>:
 800ccbc:	4901      	ldr	r1, [pc, #4]	; (800ccc4 <_cleanup_r+0x8>)
 800ccbe:	f000 b8af 	b.w	800ce20 <_fwalk_reent>
 800ccc2:	bf00      	nop
 800ccc4:	0800cbfd 	.word	0x0800cbfd

0800ccc8 <__sfmoreglue>:
 800ccc8:	b570      	push	{r4, r5, r6, lr}
 800ccca:	2568      	movs	r5, #104	; 0x68
 800cccc:	1e4a      	subs	r2, r1, #1
 800ccce:	4355      	muls	r5, r2
 800ccd0:	460e      	mov	r6, r1
 800ccd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccd6:	f7ff fac5 	bl	800c264 <_malloc_r>
 800ccda:	4604      	mov	r4, r0
 800ccdc:	b140      	cbz	r0, 800ccf0 <__sfmoreglue+0x28>
 800ccde:	2100      	movs	r1, #0
 800cce0:	e9c0 1600 	strd	r1, r6, [r0]
 800cce4:	300c      	adds	r0, #12
 800cce6:	60a0      	str	r0, [r4, #8]
 800cce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ccec:	f7fd fb6a 	bl	800a3c4 <memset>
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	bd70      	pop	{r4, r5, r6, pc}

0800ccf4 <__sfp_lock_acquire>:
 800ccf4:	4801      	ldr	r0, [pc, #4]	; (800ccfc <__sfp_lock_acquire+0x8>)
 800ccf6:	f000 b8b3 	b.w	800ce60 <__retarget_lock_acquire_recursive>
 800ccfa:	bf00      	nop
 800ccfc:	20001638 	.word	0x20001638

0800cd00 <__sfp_lock_release>:
 800cd00:	4801      	ldr	r0, [pc, #4]	; (800cd08 <__sfp_lock_release+0x8>)
 800cd02:	f000 b8ae 	b.w	800ce62 <__retarget_lock_release_recursive>
 800cd06:	bf00      	nop
 800cd08:	20001638 	.word	0x20001638

0800cd0c <__sinit_lock_acquire>:
 800cd0c:	4801      	ldr	r0, [pc, #4]	; (800cd14 <__sinit_lock_acquire+0x8>)
 800cd0e:	f000 b8a7 	b.w	800ce60 <__retarget_lock_acquire_recursive>
 800cd12:	bf00      	nop
 800cd14:	20001633 	.word	0x20001633

0800cd18 <__sinit_lock_release>:
 800cd18:	4801      	ldr	r0, [pc, #4]	; (800cd20 <__sinit_lock_release+0x8>)
 800cd1a:	f000 b8a2 	b.w	800ce62 <__retarget_lock_release_recursive>
 800cd1e:	bf00      	nop
 800cd20:	20001633 	.word	0x20001633

0800cd24 <__sinit>:
 800cd24:	b510      	push	{r4, lr}
 800cd26:	4604      	mov	r4, r0
 800cd28:	f7ff fff0 	bl	800cd0c <__sinit_lock_acquire>
 800cd2c:	69a3      	ldr	r3, [r4, #24]
 800cd2e:	b11b      	cbz	r3, 800cd38 <__sinit+0x14>
 800cd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd34:	f7ff bff0 	b.w	800cd18 <__sinit_lock_release>
 800cd38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd3c:	6523      	str	r3, [r4, #80]	; 0x50
 800cd3e:	4b13      	ldr	r3, [pc, #76]	; (800cd8c <__sinit+0x68>)
 800cd40:	4a13      	ldr	r2, [pc, #76]	; (800cd90 <__sinit+0x6c>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd46:	42a3      	cmp	r3, r4
 800cd48:	bf08      	it	eq
 800cd4a:	2301      	moveq	r3, #1
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	bf08      	it	eq
 800cd50:	61a3      	streq	r3, [r4, #24]
 800cd52:	f000 f81f 	bl	800cd94 <__sfp>
 800cd56:	6060      	str	r0, [r4, #4]
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 f81b 	bl	800cd94 <__sfp>
 800cd5e:	60a0      	str	r0, [r4, #8]
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 f817 	bl	800cd94 <__sfp>
 800cd66:	2200      	movs	r2, #0
 800cd68:	2104      	movs	r1, #4
 800cd6a:	60e0      	str	r0, [r4, #12]
 800cd6c:	6860      	ldr	r0, [r4, #4]
 800cd6e:	f7ff ff81 	bl	800cc74 <std>
 800cd72:	2201      	movs	r2, #1
 800cd74:	2109      	movs	r1, #9
 800cd76:	68a0      	ldr	r0, [r4, #8]
 800cd78:	f7ff ff7c 	bl	800cc74 <std>
 800cd7c:	2202      	movs	r2, #2
 800cd7e:	2112      	movs	r1, #18
 800cd80:	68e0      	ldr	r0, [r4, #12]
 800cd82:	f7ff ff77 	bl	800cc74 <std>
 800cd86:	2301      	movs	r3, #1
 800cd88:	61a3      	str	r3, [r4, #24]
 800cd8a:	e7d1      	b.n	800cd30 <__sinit+0xc>
 800cd8c:	0800d3b0 	.word	0x0800d3b0
 800cd90:	0800ccbd 	.word	0x0800ccbd

0800cd94 <__sfp>:
 800cd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd96:	4607      	mov	r7, r0
 800cd98:	f7ff ffac 	bl	800ccf4 <__sfp_lock_acquire>
 800cd9c:	4b1e      	ldr	r3, [pc, #120]	; (800ce18 <__sfp+0x84>)
 800cd9e:	681e      	ldr	r6, [r3, #0]
 800cda0:	69b3      	ldr	r3, [r6, #24]
 800cda2:	b913      	cbnz	r3, 800cdaa <__sfp+0x16>
 800cda4:	4630      	mov	r0, r6
 800cda6:	f7ff ffbd 	bl	800cd24 <__sinit>
 800cdaa:	3648      	adds	r6, #72	; 0x48
 800cdac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	d503      	bpl.n	800cdbc <__sfp+0x28>
 800cdb4:	6833      	ldr	r3, [r6, #0]
 800cdb6:	b30b      	cbz	r3, 800cdfc <__sfp+0x68>
 800cdb8:	6836      	ldr	r6, [r6, #0]
 800cdba:	e7f7      	b.n	800cdac <__sfp+0x18>
 800cdbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cdc0:	b9d5      	cbnz	r5, 800cdf8 <__sfp+0x64>
 800cdc2:	4b16      	ldr	r3, [pc, #88]	; (800ce1c <__sfp+0x88>)
 800cdc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cdc8:	60e3      	str	r3, [r4, #12]
 800cdca:	6665      	str	r5, [r4, #100]	; 0x64
 800cdcc:	f000 f847 	bl	800ce5e <__retarget_lock_init_recursive>
 800cdd0:	f7ff ff96 	bl	800cd00 <__sfp_lock_release>
 800cdd4:	2208      	movs	r2, #8
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cddc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cde0:	6025      	str	r5, [r4, #0]
 800cde2:	61a5      	str	r5, [r4, #24]
 800cde4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cde8:	f7fd faec 	bl	800a3c4 <memset>
 800cdec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cdf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdf8:	3468      	adds	r4, #104	; 0x68
 800cdfa:	e7d9      	b.n	800cdb0 <__sfp+0x1c>
 800cdfc:	2104      	movs	r1, #4
 800cdfe:	4638      	mov	r0, r7
 800ce00:	f7ff ff62 	bl	800ccc8 <__sfmoreglue>
 800ce04:	4604      	mov	r4, r0
 800ce06:	6030      	str	r0, [r6, #0]
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d1d5      	bne.n	800cdb8 <__sfp+0x24>
 800ce0c:	f7ff ff78 	bl	800cd00 <__sfp_lock_release>
 800ce10:	230c      	movs	r3, #12
 800ce12:	603b      	str	r3, [r7, #0]
 800ce14:	e7ee      	b.n	800cdf4 <__sfp+0x60>
 800ce16:	bf00      	nop
 800ce18:	0800d3b0 	.word	0x0800d3b0
 800ce1c:	ffff0001 	.word	0xffff0001

0800ce20 <_fwalk_reent>:
 800ce20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce24:	4606      	mov	r6, r0
 800ce26:	4688      	mov	r8, r1
 800ce28:	2700      	movs	r7, #0
 800ce2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce32:	f1b9 0901 	subs.w	r9, r9, #1
 800ce36:	d505      	bpl.n	800ce44 <_fwalk_reent+0x24>
 800ce38:	6824      	ldr	r4, [r4, #0]
 800ce3a:	2c00      	cmp	r4, #0
 800ce3c:	d1f7      	bne.n	800ce2e <_fwalk_reent+0xe>
 800ce3e:	4638      	mov	r0, r7
 800ce40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce44:	89ab      	ldrh	r3, [r5, #12]
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d907      	bls.n	800ce5a <_fwalk_reent+0x3a>
 800ce4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	d003      	beq.n	800ce5a <_fwalk_reent+0x3a>
 800ce52:	4629      	mov	r1, r5
 800ce54:	4630      	mov	r0, r6
 800ce56:	47c0      	blx	r8
 800ce58:	4307      	orrs	r7, r0
 800ce5a:	3568      	adds	r5, #104	; 0x68
 800ce5c:	e7e9      	b.n	800ce32 <_fwalk_reent+0x12>

0800ce5e <__retarget_lock_init_recursive>:
 800ce5e:	4770      	bx	lr

0800ce60 <__retarget_lock_acquire_recursive>:
 800ce60:	4770      	bx	lr

0800ce62 <__retarget_lock_release_recursive>:
 800ce62:	4770      	bx	lr

0800ce64 <__swhatbuf_r>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	460e      	mov	r6, r1
 800ce68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce6c:	4614      	mov	r4, r2
 800ce6e:	2900      	cmp	r1, #0
 800ce70:	461d      	mov	r5, r3
 800ce72:	b096      	sub	sp, #88	; 0x58
 800ce74:	da07      	bge.n	800ce86 <__swhatbuf_r+0x22>
 800ce76:	2300      	movs	r3, #0
 800ce78:	602b      	str	r3, [r5, #0]
 800ce7a:	89b3      	ldrh	r3, [r6, #12]
 800ce7c:	061a      	lsls	r2, r3, #24
 800ce7e:	d410      	bmi.n	800cea2 <__swhatbuf_r+0x3e>
 800ce80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce84:	e00e      	b.n	800cea4 <__swhatbuf_r+0x40>
 800ce86:	466a      	mov	r2, sp
 800ce88:	f000 f914 	bl	800d0b4 <_fstat_r>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	dbf2      	blt.n	800ce76 <__swhatbuf_r+0x12>
 800ce90:	9a01      	ldr	r2, [sp, #4]
 800ce92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce9a:	425a      	negs	r2, r3
 800ce9c:	415a      	adcs	r2, r3
 800ce9e:	602a      	str	r2, [r5, #0]
 800cea0:	e7ee      	b.n	800ce80 <__swhatbuf_r+0x1c>
 800cea2:	2340      	movs	r3, #64	; 0x40
 800cea4:	2000      	movs	r0, #0
 800cea6:	6023      	str	r3, [r4, #0]
 800cea8:	b016      	add	sp, #88	; 0x58
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}

0800ceac <__smakebuf_r>:
 800ceac:	898b      	ldrh	r3, [r1, #12]
 800ceae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ceb0:	079d      	lsls	r5, r3, #30
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	460c      	mov	r4, r1
 800ceb6:	d507      	bpl.n	800cec8 <__smakebuf_r+0x1c>
 800ceb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	6123      	str	r3, [r4, #16]
 800cec0:	2301      	movs	r3, #1
 800cec2:	6163      	str	r3, [r4, #20]
 800cec4:	b002      	add	sp, #8
 800cec6:	bd70      	pop	{r4, r5, r6, pc}
 800cec8:	466a      	mov	r2, sp
 800ceca:	ab01      	add	r3, sp, #4
 800cecc:	f7ff ffca 	bl	800ce64 <__swhatbuf_r>
 800ced0:	9900      	ldr	r1, [sp, #0]
 800ced2:	4605      	mov	r5, r0
 800ced4:	4630      	mov	r0, r6
 800ced6:	f7ff f9c5 	bl	800c264 <_malloc_r>
 800ceda:	b948      	cbnz	r0, 800cef0 <__smakebuf_r+0x44>
 800cedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cee0:	059a      	lsls	r2, r3, #22
 800cee2:	d4ef      	bmi.n	800cec4 <__smakebuf_r+0x18>
 800cee4:	f023 0303 	bic.w	r3, r3, #3
 800cee8:	f043 0302 	orr.w	r3, r3, #2
 800ceec:	81a3      	strh	r3, [r4, #12]
 800ceee:	e7e3      	b.n	800ceb8 <__smakebuf_r+0xc>
 800cef0:	4b0d      	ldr	r3, [pc, #52]	; (800cf28 <__smakebuf_r+0x7c>)
 800cef2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cef4:	89a3      	ldrh	r3, [r4, #12]
 800cef6:	6020      	str	r0, [r4, #0]
 800cef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cefc:	81a3      	strh	r3, [r4, #12]
 800cefe:	9b00      	ldr	r3, [sp, #0]
 800cf00:	6120      	str	r0, [r4, #16]
 800cf02:	6163      	str	r3, [r4, #20]
 800cf04:	9b01      	ldr	r3, [sp, #4]
 800cf06:	b15b      	cbz	r3, 800cf20 <__smakebuf_r+0x74>
 800cf08:	4630      	mov	r0, r6
 800cf0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf0e:	f000 f8e3 	bl	800d0d8 <_isatty_r>
 800cf12:	b128      	cbz	r0, 800cf20 <__smakebuf_r+0x74>
 800cf14:	89a3      	ldrh	r3, [r4, #12]
 800cf16:	f023 0303 	bic.w	r3, r3, #3
 800cf1a:	f043 0301 	orr.w	r3, r3, #1
 800cf1e:	81a3      	strh	r3, [r4, #12]
 800cf20:	89a0      	ldrh	r0, [r4, #12]
 800cf22:	4305      	orrs	r5, r0
 800cf24:	81a5      	strh	r5, [r4, #12]
 800cf26:	e7cd      	b.n	800cec4 <__smakebuf_r+0x18>
 800cf28:	0800ccbd 	.word	0x0800ccbd

0800cf2c <memchr>:
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	b510      	push	{r4, lr}
 800cf30:	b2c9      	uxtb	r1, r1
 800cf32:	4402      	add	r2, r0
 800cf34:	4293      	cmp	r3, r2
 800cf36:	4618      	mov	r0, r3
 800cf38:	d101      	bne.n	800cf3e <memchr+0x12>
 800cf3a:	2000      	movs	r0, #0
 800cf3c:	e003      	b.n	800cf46 <memchr+0x1a>
 800cf3e:	7804      	ldrb	r4, [r0, #0]
 800cf40:	3301      	adds	r3, #1
 800cf42:	428c      	cmp	r4, r1
 800cf44:	d1f6      	bne.n	800cf34 <memchr+0x8>
 800cf46:	bd10      	pop	{r4, pc}

0800cf48 <__malloc_lock>:
 800cf48:	4801      	ldr	r0, [pc, #4]	; (800cf50 <__malloc_lock+0x8>)
 800cf4a:	f7ff bf89 	b.w	800ce60 <__retarget_lock_acquire_recursive>
 800cf4e:	bf00      	nop
 800cf50:	20001634 	.word	0x20001634

0800cf54 <__malloc_unlock>:
 800cf54:	4801      	ldr	r0, [pc, #4]	; (800cf5c <__malloc_unlock+0x8>)
 800cf56:	f7ff bf84 	b.w	800ce62 <__retarget_lock_release_recursive>
 800cf5a:	bf00      	nop
 800cf5c:	20001634 	.word	0x20001634

0800cf60 <_raise_r>:
 800cf60:	291f      	cmp	r1, #31
 800cf62:	b538      	push	{r3, r4, r5, lr}
 800cf64:	4604      	mov	r4, r0
 800cf66:	460d      	mov	r5, r1
 800cf68:	d904      	bls.n	800cf74 <_raise_r+0x14>
 800cf6a:	2316      	movs	r3, #22
 800cf6c:	6003      	str	r3, [r0, #0]
 800cf6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf72:	bd38      	pop	{r3, r4, r5, pc}
 800cf74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf76:	b112      	cbz	r2, 800cf7e <_raise_r+0x1e>
 800cf78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf7c:	b94b      	cbnz	r3, 800cf92 <_raise_r+0x32>
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f000 f830 	bl	800cfe4 <_getpid_r>
 800cf84:	462a      	mov	r2, r5
 800cf86:	4601      	mov	r1, r0
 800cf88:	4620      	mov	r0, r4
 800cf8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf8e:	f000 b817 	b.w	800cfc0 <_kill_r>
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d00a      	beq.n	800cfac <_raise_r+0x4c>
 800cf96:	1c59      	adds	r1, r3, #1
 800cf98:	d103      	bne.n	800cfa2 <_raise_r+0x42>
 800cf9a:	2316      	movs	r3, #22
 800cf9c:	6003      	str	r3, [r0, #0]
 800cf9e:	2001      	movs	r0, #1
 800cfa0:	e7e7      	b.n	800cf72 <_raise_r+0x12>
 800cfa2:	2400      	movs	r4, #0
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfaa:	4798      	blx	r3
 800cfac:	2000      	movs	r0, #0
 800cfae:	e7e0      	b.n	800cf72 <_raise_r+0x12>

0800cfb0 <raise>:
 800cfb0:	4b02      	ldr	r3, [pc, #8]	; (800cfbc <raise+0xc>)
 800cfb2:	4601      	mov	r1, r0
 800cfb4:	6818      	ldr	r0, [r3, #0]
 800cfb6:	f7ff bfd3 	b.w	800cf60 <_raise_r>
 800cfba:	bf00      	nop
 800cfbc:	20000194 	.word	0x20000194

0800cfc0 <_kill_r>:
 800cfc0:	b538      	push	{r3, r4, r5, lr}
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	4d06      	ldr	r5, [pc, #24]	; (800cfe0 <_kill_r+0x20>)
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	4608      	mov	r0, r1
 800cfca:	4611      	mov	r1, r2
 800cfcc:	602b      	str	r3, [r5, #0]
 800cfce:	f7f5 fbce 	bl	800276e <_kill>
 800cfd2:	1c43      	adds	r3, r0, #1
 800cfd4:	d102      	bne.n	800cfdc <_kill_r+0x1c>
 800cfd6:	682b      	ldr	r3, [r5, #0]
 800cfd8:	b103      	cbz	r3, 800cfdc <_kill_r+0x1c>
 800cfda:	6023      	str	r3, [r4, #0]
 800cfdc:	bd38      	pop	{r3, r4, r5, pc}
 800cfde:	bf00      	nop
 800cfe0:	2000163c 	.word	0x2000163c

0800cfe4 <_getpid_r>:
 800cfe4:	f7f5 bbbc 	b.w	8002760 <_getpid>

0800cfe8 <__sread>:
 800cfe8:	b510      	push	{r4, lr}
 800cfea:	460c      	mov	r4, r1
 800cfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cff0:	f000 f894 	bl	800d11c <_read_r>
 800cff4:	2800      	cmp	r0, #0
 800cff6:	bfab      	itete	ge
 800cff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cffa:	89a3      	ldrhlt	r3, [r4, #12]
 800cffc:	181b      	addge	r3, r3, r0
 800cffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d002:	bfac      	ite	ge
 800d004:	6563      	strge	r3, [r4, #84]	; 0x54
 800d006:	81a3      	strhlt	r3, [r4, #12]
 800d008:	bd10      	pop	{r4, pc}

0800d00a <__swrite>:
 800d00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d00e:	461f      	mov	r7, r3
 800d010:	898b      	ldrh	r3, [r1, #12]
 800d012:	4605      	mov	r5, r0
 800d014:	05db      	lsls	r3, r3, #23
 800d016:	460c      	mov	r4, r1
 800d018:	4616      	mov	r6, r2
 800d01a:	d505      	bpl.n	800d028 <__swrite+0x1e>
 800d01c:	2302      	movs	r3, #2
 800d01e:	2200      	movs	r2, #0
 800d020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d024:	f000 f868 	bl	800d0f8 <_lseek_r>
 800d028:	89a3      	ldrh	r3, [r4, #12]
 800d02a:	4632      	mov	r2, r6
 800d02c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d030:	81a3      	strh	r3, [r4, #12]
 800d032:	4628      	mov	r0, r5
 800d034:	463b      	mov	r3, r7
 800d036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d03e:	f000 b817 	b.w	800d070 <_write_r>

0800d042 <__sseek>:
 800d042:	b510      	push	{r4, lr}
 800d044:	460c      	mov	r4, r1
 800d046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d04a:	f000 f855 	bl	800d0f8 <_lseek_r>
 800d04e:	1c43      	adds	r3, r0, #1
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	bf15      	itete	ne
 800d054:	6560      	strne	r0, [r4, #84]	; 0x54
 800d056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d05a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d05e:	81a3      	strheq	r3, [r4, #12]
 800d060:	bf18      	it	ne
 800d062:	81a3      	strhne	r3, [r4, #12]
 800d064:	bd10      	pop	{r4, pc}

0800d066 <__sclose>:
 800d066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d06a:	f000 b813 	b.w	800d094 <_close_r>
	...

0800d070 <_write_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	4604      	mov	r4, r0
 800d074:	4608      	mov	r0, r1
 800d076:	4611      	mov	r1, r2
 800d078:	2200      	movs	r2, #0
 800d07a:	4d05      	ldr	r5, [pc, #20]	; (800d090 <_write_r+0x20>)
 800d07c:	602a      	str	r2, [r5, #0]
 800d07e:	461a      	mov	r2, r3
 800d080:	f7f5 fbac 	bl	80027dc <_write>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d102      	bne.n	800d08e <_write_r+0x1e>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	b103      	cbz	r3, 800d08e <_write_r+0x1e>
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	2000163c 	.word	0x2000163c

0800d094 <_close_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	2300      	movs	r3, #0
 800d098:	4d05      	ldr	r5, [pc, #20]	; (800d0b0 <_close_r+0x1c>)
 800d09a:	4604      	mov	r4, r0
 800d09c:	4608      	mov	r0, r1
 800d09e:	602b      	str	r3, [r5, #0]
 800d0a0:	f7f5 fbb8 	bl	8002814 <_close>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d102      	bne.n	800d0ae <_close_r+0x1a>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	b103      	cbz	r3, 800d0ae <_close_r+0x1a>
 800d0ac:	6023      	str	r3, [r4, #0]
 800d0ae:	bd38      	pop	{r3, r4, r5, pc}
 800d0b0:	2000163c 	.word	0x2000163c

0800d0b4 <_fstat_r>:
 800d0b4:	b538      	push	{r3, r4, r5, lr}
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	4d06      	ldr	r5, [pc, #24]	; (800d0d4 <_fstat_r+0x20>)
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	4608      	mov	r0, r1
 800d0be:	4611      	mov	r1, r2
 800d0c0:	602b      	str	r3, [r5, #0]
 800d0c2:	f7f5 fbb2 	bl	800282a <_fstat>
 800d0c6:	1c43      	adds	r3, r0, #1
 800d0c8:	d102      	bne.n	800d0d0 <_fstat_r+0x1c>
 800d0ca:	682b      	ldr	r3, [r5, #0]
 800d0cc:	b103      	cbz	r3, 800d0d0 <_fstat_r+0x1c>
 800d0ce:	6023      	str	r3, [r4, #0]
 800d0d0:	bd38      	pop	{r3, r4, r5, pc}
 800d0d2:	bf00      	nop
 800d0d4:	2000163c 	.word	0x2000163c

0800d0d8 <_isatty_r>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	2300      	movs	r3, #0
 800d0dc:	4d05      	ldr	r5, [pc, #20]	; (800d0f4 <_isatty_r+0x1c>)
 800d0de:	4604      	mov	r4, r0
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	602b      	str	r3, [r5, #0]
 800d0e4:	f7f5 fbb0 	bl	8002848 <_isatty>
 800d0e8:	1c43      	adds	r3, r0, #1
 800d0ea:	d102      	bne.n	800d0f2 <_isatty_r+0x1a>
 800d0ec:	682b      	ldr	r3, [r5, #0]
 800d0ee:	b103      	cbz	r3, 800d0f2 <_isatty_r+0x1a>
 800d0f0:	6023      	str	r3, [r4, #0]
 800d0f2:	bd38      	pop	{r3, r4, r5, pc}
 800d0f4:	2000163c 	.word	0x2000163c

0800d0f8 <_lseek_r>:
 800d0f8:	b538      	push	{r3, r4, r5, lr}
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	4608      	mov	r0, r1
 800d0fe:	4611      	mov	r1, r2
 800d100:	2200      	movs	r2, #0
 800d102:	4d05      	ldr	r5, [pc, #20]	; (800d118 <_lseek_r+0x20>)
 800d104:	602a      	str	r2, [r5, #0]
 800d106:	461a      	mov	r2, r3
 800d108:	f7f5 fba8 	bl	800285c <_lseek>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d102      	bne.n	800d116 <_lseek_r+0x1e>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	b103      	cbz	r3, 800d116 <_lseek_r+0x1e>
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	bd38      	pop	{r3, r4, r5, pc}
 800d118:	2000163c 	.word	0x2000163c

0800d11c <_read_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	4604      	mov	r4, r0
 800d120:	4608      	mov	r0, r1
 800d122:	4611      	mov	r1, r2
 800d124:	2200      	movs	r2, #0
 800d126:	4d05      	ldr	r5, [pc, #20]	; (800d13c <_read_r+0x20>)
 800d128:	602a      	str	r2, [r5, #0]
 800d12a:	461a      	mov	r2, r3
 800d12c:	f7f5 fb39 	bl	80027a2 <_read>
 800d130:	1c43      	adds	r3, r0, #1
 800d132:	d102      	bne.n	800d13a <_read_r+0x1e>
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	b103      	cbz	r3, 800d13a <_read_r+0x1e>
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	bd38      	pop	{r3, r4, r5, pc}
 800d13c:	2000163c 	.word	0x2000163c

0800d140 <_init>:
 800d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d142:	bf00      	nop
 800d144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d146:	bc08      	pop	{r3}
 800d148:	469e      	mov	lr, r3
 800d14a:	4770      	bx	lr

0800d14c <_fini>:
 800d14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14e:	bf00      	nop
 800d150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d152:	bc08      	pop	{r3}
 800d154:	469e      	mov	lr, r3
 800d156:	4770      	bx	lr
