
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000996c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08009aa8  08009aa8  00019aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d28  08009d28  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009d28  08009d28  00019d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d30  08009d30  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d30  08009d30  00019d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d34  08009d34  00019d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000139c  200001f4  08009f2c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001590  08009f2c  00021590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163e3  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003818  00000000  00000000  00036600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00039e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  0003ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178c7  00000000  00000000  0003b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e60  00000000  00000000  00053027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c9bb  00000000  00000000  00064e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1842  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef0  00000000  00000000  000e1898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001f4 	.word	0x200001f4
 8000158:	00000000 	.word	0x00000000
 800015c:	08009a90 	.word	0x08009a90

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001f8 	.word	0x200001f8
 8000178:	08009a90 	.word	0x08009a90

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_fmul>:
 80001a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80001a8:	bf1e      	ittt	ne
 80001aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80001ae:	ea92 0f0c 	teqne	r2, ip
 80001b2:	ea93 0f0c 	teqne	r3, ip
 80001b6:	d06f      	beq.n	8000298 <__aeabi_fmul+0xf8>
 80001b8:	441a      	add	r2, r3
 80001ba:	ea80 0c01 	eor.w	ip, r0, r1
 80001be:	0240      	lsls	r0, r0, #9
 80001c0:	bf18      	it	ne
 80001c2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001c6:	d01e      	beq.n	8000206 <__aeabi_fmul+0x66>
 80001c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001cc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001d0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001d4:	fba0 3101 	umull	r3, r1, r0, r1
 80001d8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001dc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001e0:	bf3e      	ittt	cc
 80001e2:	0049      	lslcc	r1, r1, #1
 80001e4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001e8:	005b      	lslcc	r3, r3, #1
 80001ea:	ea40 0001 	orr.w	r0, r0, r1
 80001ee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001f2:	2afd      	cmp	r2, #253	; 0xfd
 80001f4:	d81d      	bhi.n	8000232 <__aeabi_fmul+0x92>
 80001f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001fe:	bf08      	it	eq
 8000200:	f020 0001 	biceq.w	r0, r0, #1
 8000204:	4770      	bx	lr
 8000206:	f090 0f00 	teq	r0, #0
 800020a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800020e:	bf08      	it	eq
 8000210:	0249      	lsleq	r1, r1, #9
 8000212:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000216:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800021a:	3a7f      	subs	r2, #127	; 0x7f
 800021c:	bfc2      	ittt	gt
 800021e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000222:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000226:	4770      	bxgt	lr
 8000228:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800022c:	f04f 0300 	mov.w	r3, #0
 8000230:	3a01      	subs	r2, #1
 8000232:	dc5d      	bgt.n	80002f0 <__aeabi_fmul+0x150>
 8000234:	f112 0f19 	cmn.w	r2, #25
 8000238:	bfdc      	itt	le
 800023a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800023e:	4770      	bxle	lr
 8000240:	f1c2 0200 	rsb	r2, r2, #0
 8000244:	0041      	lsls	r1, r0, #1
 8000246:	fa21 f102 	lsr.w	r1, r1, r2
 800024a:	f1c2 0220 	rsb	r2, r2, #32
 800024e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000252:	ea5f 0031 	movs.w	r0, r1, rrx
 8000256:	f140 0000 	adc.w	r0, r0, #0
 800025a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800025e:	bf08      	it	eq
 8000260:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000264:	4770      	bx	lr
 8000266:	f092 0f00 	teq	r2, #0
 800026a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800026e:	bf02      	ittt	eq
 8000270:	0040      	lsleq	r0, r0, #1
 8000272:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000276:	3a01      	subeq	r2, #1
 8000278:	d0f9      	beq.n	800026e <__aeabi_fmul+0xce>
 800027a:	ea40 000c 	orr.w	r0, r0, ip
 800027e:	f093 0f00 	teq	r3, #0
 8000282:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000286:	bf02      	ittt	eq
 8000288:	0049      	lsleq	r1, r1, #1
 800028a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800028e:	3b01      	subeq	r3, #1
 8000290:	d0f9      	beq.n	8000286 <__aeabi_fmul+0xe6>
 8000292:	ea41 010c 	orr.w	r1, r1, ip
 8000296:	e78f      	b.n	80001b8 <__aeabi_fmul+0x18>
 8000298:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800029c:	ea92 0f0c 	teq	r2, ip
 80002a0:	bf18      	it	ne
 80002a2:	ea93 0f0c 	teqne	r3, ip
 80002a6:	d00a      	beq.n	80002be <__aeabi_fmul+0x11e>
 80002a8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80002ac:	bf18      	it	ne
 80002ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80002b2:	d1d8      	bne.n	8000266 <__aeabi_fmul+0xc6>
 80002b4:	ea80 0001 	eor.w	r0, r0, r1
 80002b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002bc:	4770      	bx	lr
 80002be:	f090 0f00 	teq	r0, #0
 80002c2:	bf17      	itett	ne
 80002c4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002c8:	4608      	moveq	r0, r1
 80002ca:	f091 0f00 	teqne	r1, #0
 80002ce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002d2:	d014      	beq.n	80002fe <__aeabi_fmul+0x15e>
 80002d4:	ea92 0f0c 	teq	r2, ip
 80002d8:	d101      	bne.n	80002de <__aeabi_fmul+0x13e>
 80002da:	0242      	lsls	r2, r0, #9
 80002dc:	d10f      	bne.n	80002fe <__aeabi_fmul+0x15e>
 80002de:	ea93 0f0c 	teq	r3, ip
 80002e2:	d103      	bne.n	80002ec <__aeabi_fmul+0x14c>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	bf18      	it	ne
 80002e8:	4608      	movne	r0, r1
 80002ea:	d108      	bne.n	80002fe <__aeabi_fmul+0x15e>
 80002ec:	ea80 0001 	eor.w	r0, r0, r1
 80002f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fc:	4770      	bx	lr
 80002fe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000302:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000306:	4770      	bx	lr

08000308 <__aeabi_fdiv>:
 8000308:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800030c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000310:	bf1e      	ittt	ne
 8000312:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000316:	ea92 0f0c 	teqne	r2, ip
 800031a:	ea93 0f0c 	teqne	r3, ip
 800031e:	d069      	beq.n	80003f4 <__aeabi_fdiv+0xec>
 8000320:	eba2 0203 	sub.w	r2, r2, r3
 8000324:	ea80 0c01 	eor.w	ip, r0, r1
 8000328:	0249      	lsls	r1, r1, #9
 800032a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800032e:	d037      	beq.n	80003a0 <__aeabi_fdiv+0x98>
 8000330:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000334:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000338:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800033c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000340:	428b      	cmp	r3, r1
 8000342:	bf38      	it	cc
 8000344:	005b      	lslcc	r3, r3, #1
 8000346:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800034a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800034e:	428b      	cmp	r3, r1
 8000350:	bf24      	itt	cs
 8000352:	1a5b      	subcs	r3, r3, r1
 8000354:	ea40 000c 	orrcs.w	r0, r0, ip
 8000358:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800035c:	bf24      	itt	cs
 800035e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000362:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000366:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800036a:	bf24      	itt	cs
 800036c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000370:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000374:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000378:	bf24      	itt	cs
 800037a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800037e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000382:	011b      	lsls	r3, r3, #4
 8000384:	bf18      	it	ne
 8000386:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800038a:	d1e0      	bne.n	800034e <__aeabi_fdiv+0x46>
 800038c:	2afd      	cmp	r2, #253	; 0xfd
 800038e:	f63f af50 	bhi.w	8000232 <__aeabi_fmul+0x92>
 8000392:	428b      	cmp	r3, r1
 8000394:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000398:	bf08      	it	eq
 800039a:	f020 0001 	biceq.w	r0, r0, #1
 800039e:	4770      	bx	lr
 80003a0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003a4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003a8:	327f      	adds	r2, #127	; 0x7f
 80003aa:	bfc2      	ittt	gt
 80003ac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003b0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003b4:	4770      	bxgt	lr
 80003b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ba:	f04f 0300 	mov.w	r3, #0
 80003be:	3a01      	subs	r2, #1
 80003c0:	e737      	b.n	8000232 <__aeabi_fmul+0x92>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80003ca:	bf02      	ittt	eq
 80003cc:	0040      	lsleq	r0, r0, #1
 80003ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80003d2:	3a01      	subeq	r2, #1
 80003d4:	d0f9      	beq.n	80003ca <__aeabi_fdiv+0xc2>
 80003d6:	ea40 000c 	orr.w	r0, r0, ip
 80003da:	f093 0f00 	teq	r3, #0
 80003de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80003e2:	bf02      	ittt	eq
 80003e4:	0049      	lsleq	r1, r1, #1
 80003e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80003ea:	3b01      	subeq	r3, #1
 80003ec:	d0f9      	beq.n	80003e2 <__aeabi_fdiv+0xda>
 80003ee:	ea41 010c 	orr.w	r1, r1, ip
 80003f2:	e795      	b.n	8000320 <__aeabi_fdiv+0x18>
 80003f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80003f8:	ea92 0f0c 	teq	r2, ip
 80003fc:	d108      	bne.n	8000410 <__aeabi_fdiv+0x108>
 80003fe:	0242      	lsls	r2, r0, #9
 8000400:	f47f af7d 	bne.w	80002fe <__aeabi_fmul+0x15e>
 8000404:	ea93 0f0c 	teq	r3, ip
 8000408:	f47f af70 	bne.w	80002ec <__aeabi_fmul+0x14c>
 800040c:	4608      	mov	r0, r1
 800040e:	e776      	b.n	80002fe <__aeabi_fmul+0x15e>
 8000410:	ea93 0f0c 	teq	r3, ip
 8000414:	d104      	bne.n	8000420 <__aeabi_fdiv+0x118>
 8000416:	024b      	lsls	r3, r1, #9
 8000418:	f43f af4c 	beq.w	80002b4 <__aeabi_fmul+0x114>
 800041c:	4608      	mov	r0, r1
 800041e:	e76e      	b.n	80002fe <__aeabi_fmul+0x15e>
 8000420:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000424:	bf18      	it	ne
 8000426:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800042a:	d1ca      	bne.n	80003c2 <__aeabi_fdiv+0xba>
 800042c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000430:	f47f af5c 	bne.w	80002ec <__aeabi_fmul+0x14c>
 8000434:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000438:	f47f af3c 	bne.w	80002b4 <__aeabi_fmul+0x114>
 800043c:	e75f      	b.n	80002fe <__aeabi_fmul+0x15e>
 800043e:	bf00      	nop

08000440 <__aeabi_f2uiz>:
 8000440:	0042      	lsls	r2, r0, #1
 8000442:	d20e      	bcs.n	8000462 <__aeabi_f2uiz+0x22>
 8000444:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000448:	d30b      	bcc.n	8000462 <__aeabi_f2uiz+0x22>
 800044a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800044e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000452:	d409      	bmi.n	8000468 <__aeabi_f2uiz+0x28>
 8000454:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800045c:	fa23 f002 	lsr.w	r0, r3, r2
 8000460:	4770      	bx	lr
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	4770      	bx	lr
 8000468:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800046c:	d101      	bne.n	8000472 <__aeabi_f2uiz+0x32>
 800046e:	0242      	lsls	r2, r0, #9
 8000470:	d102      	bne.n	8000478 <__aeabi_f2uiz+0x38>
 8000472:	f04f 30ff 	mov.w	r0, #4294967295
 8000476:	4770      	bx	lr
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <__aeabi_uldivmod>:
 8000480:	b953      	cbnz	r3, 8000498 <__aeabi_uldivmod+0x18>
 8000482:	b94a      	cbnz	r2, 8000498 <__aeabi_uldivmod+0x18>
 8000484:	2900      	cmp	r1, #0
 8000486:	bf08      	it	eq
 8000488:	2800      	cmpeq	r0, #0
 800048a:	bf1c      	itt	ne
 800048c:	f04f 31ff 	movne.w	r1, #4294967295
 8000490:	f04f 30ff 	movne.w	r0, #4294967295
 8000494:	f000 b96e 	b.w	8000774 <__aeabi_idiv0>
 8000498:	f1ad 0c08 	sub.w	ip, sp, #8
 800049c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a0:	f000 f806 	bl	80004b0 <__udivmoddi4>
 80004a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ac:	b004      	add	sp, #16
 80004ae:	4770      	bx	lr

080004b0 <__udivmoddi4>:
 80004b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004b4:	9e08      	ldr	r6, [sp, #32]
 80004b6:	460d      	mov	r5, r1
 80004b8:	4604      	mov	r4, r0
 80004ba:	468e      	mov	lr, r1
 80004bc:	2b00      	cmp	r3, #0
 80004be:	f040 8083 	bne.w	80005c8 <__udivmoddi4+0x118>
 80004c2:	428a      	cmp	r2, r1
 80004c4:	4617      	mov	r7, r2
 80004c6:	d947      	bls.n	8000558 <__udivmoddi4+0xa8>
 80004c8:	fab2 f382 	clz	r3, r2
 80004cc:	b14b      	cbz	r3, 80004e2 <__udivmoddi4+0x32>
 80004ce:	f1c3 0120 	rsb	r1, r3, #32
 80004d2:	fa05 fe03 	lsl.w	lr, r5, r3
 80004d6:	fa20 f101 	lsr.w	r1, r0, r1
 80004da:	409f      	lsls	r7, r3
 80004dc:	ea41 0e0e 	orr.w	lr, r1, lr
 80004e0:	409c      	lsls	r4, r3
 80004e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004e6:	fbbe fcf8 	udiv	ip, lr, r8
 80004ea:	fa1f f987 	uxth.w	r9, r7
 80004ee:	fb08 e21c 	mls	r2, r8, ip, lr
 80004f2:	fb0c f009 	mul.w	r0, ip, r9
 80004f6:	0c21      	lsrs	r1, r4, #16
 80004f8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80004fc:	4290      	cmp	r0, r2
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x66>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000506:	f080 8118 	bcs.w	800073a <__udivmoddi4+0x28a>
 800050a:	4290      	cmp	r0, r2
 800050c:	f240 8115 	bls.w	800073a <__udivmoddi4+0x28a>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443a      	add	r2, r7
 8000516:	1a12      	subs	r2, r2, r0
 8000518:	fbb2 f0f8 	udiv	r0, r2, r8
 800051c:	fb08 2210 	mls	r2, r8, r0, r2
 8000520:	fb00 f109 	mul.w	r1, r0, r9
 8000524:	b2a4      	uxth	r4, r4
 8000526:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800052a:	42a1      	cmp	r1, r4
 800052c:	d909      	bls.n	8000542 <__udivmoddi4+0x92>
 800052e:	193c      	adds	r4, r7, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	f080 8103 	bcs.w	800073e <__udivmoddi4+0x28e>
 8000538:	42a1      	cmp	r1, r4
 800053a:	f240 8100 	bls.w	800073e <__udivmoddi4+0x28e>
 800053e:	3802      	subs	r0, #2
 8000540:	443c      	add	r4, r7
 8000542:	1a64      	subs	r4, r4, r1
 8000544:	2100      	movs	r1, #0
 8000546:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800054a:	b11e      	cbz	r6, 8000554 <__udivmoddi4+0xa4>
 800054c:	2200      	movs	r2, #0
 800054e:	40dc      	lsrs	r4, r3
 8000550:	e9c6 4200 	strd	r4, r2, [r6]
 8000554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000558:	b902      	cbnz	r2, 800055c <__udivmoddi4+0xac>
 800055a:	deff      	udf	#255	; 0xff
 800055c:	fab2 f382 	clz	r3, r2
 8000560:	2b00      	cmp	r3, #0
 8000562:	d14f      	bne.n	8000604 <__udivmoddi4+0x154>
 8000564:	1a8d      	subs	r5, r1, r2
 8000566:	2101      	movs	r1, #1
 8000568:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800056c:	fa1f f882 	uxth.w	r8, r2
 8000570:	fbb5 fcfe 	udiv	ip, r5, lr
 8000574:	fb0e 551c 	mls	r5, lr, ip, r5
 8000578:	fb08 f00c 	mul.w	r0, r8, ip
 800057c:	0c22      	lsrs	r2, r4, #16
 800057e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000582:	42a8      	cmp	r0, r5
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0xe6>
 8000586:	197d      	adds	r5, r7, r5
 8000588:	f10c 32ff 	add.w	r2, ip, #4294967295
 800058c:	d202      	bcs.n	8000594 <__udivmoddi4+0xe4>
 800058e:	42a8      	cmp	r0, r5
 8000590:	f200 80e9 	bhi.w	8000766 <__udivmoddi4+0x2b6>
 8000594:	4694      	mov	ip, r2
 8000596:	1a2d      	subs	r5, r5, r0
 8000598:	fbb5 f0fe 	udiv	r0, r5, lr
 800059c:	fb0e 5510 	mls	r5, lr, r0, r5
 80005a0:	fb08 f800 	mul.w	r8, r8, r0
 80005a4:	b2a4      	uxth	r4, r4
 80005a6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80005aa:	45a0      	cmp	r8, r4
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x10e>
 80005ae:	193c      	adds	r4, r7, r4
 80005b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005b4:	d202      	bcs.n	80005bc <__udivmoddi4+0x10c>
 80005b6:	45a0      	cmp	r8, r4
 80005b8:	f200 80d9 	bhi.w	800076e <__udivmoddi4+0x2be>
 80005bc:	4610      	mov	r0, r2
 80005be:	eba4 0408 	sub.w	r4, r4, r8
 80005c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005c6:	e7c0      	b.n	800054a <__udivmoddi4+0x9a>
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x12e>
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	f000 80b1 	beq.w	8000734 <__udivmoddi4+0x284>
 80005d2:	2100      	movs	r1, #0
 80005d4:	e9c6 0500 	strd	r0, r5, [r6]
 80005d8:	4608      	mov	r0, r1
 80005da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005de:	fab3 f183 	clz	r1, r3
 80005e2:	2900      	cmp	r1, #0
 80005e4:	d14b      	bne.n	800067e <__udivmoddi4+0x1ce>
 80005e6:	42ab      	cmp	r3, r5
 80005e8:	d302      	bcc.n	80005f0 <__udivmoddi4+0x140>
 80005ea:	4282      	cmp	r2, r0
 80005ec:	f200 80b9 	bhi.w	8000762 <__udivmoddi4+0x2b2>
 80005f0:	1a84      	subs	r4, r0, r2
 80005f2:	eb65 0303 	sbc.w	r3, r5, r3
 80005f6:	2001      	movs	r0, #1
 80005f8:	469e      	mov	lr, r3
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d0aa      	beq.n	8000554 <__udivmoddi4+0xa4>
 80005fe:	e9c6 4e00 	strd	r4, lr, [r6]
 8000602:	e7a7      	b.n	8000554 <__udivmoddi4+0xa4>
 8000604:	409f      	lsls	r7, r3
 8000606:	f1c3 0220 	rsb	r2, r3, #32
 800060a:	40d1      	lsrs	r1, r2
 800060c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000610:	fbb1 f0fe 	udiv	r0, r1, lr
 8000614:	fa1f f887 	uxth.w	r8, r7
 8000618:	fb0e 1110 	mls	r1, lr, r0, r1
 800061c:	fa24 f202 	lsr.w	r2, r4, r2
 8000620:	409d      	lsls	r5, r3
 8000622:	fb00 fc08 	mul.w	ip, r0, r8
 8000626:	432a      	orrs	r2, r5
 8000628:	0c15      	lsrs	r5, r2, #16
 800062a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800062e:	45ac      	cmp	ip, r5
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d909      	bls.n	800064a <__udivmoddi4+0x19a>
 8000636:	197d      	adds	r5, r7, r5
 8000638:	f100 31ff 	add.w	r1, r0, #4294967295
 800063c:	f080 808f 	bcs.w	800075e <__udivmoddi4+0x2ae>
 8000640:	45ac      	cmp	ip, r5
 8000642:	f240 808c 	bls.w	800075e <__udivmoddi4+0x2ae>
 8000646:	3802      	subs	r0, #2
 8000648:	443d      	add	r5, r7
 800064a:	eba5 050c 	sub.w	r5, r5, ip
 800064e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000652:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000656:	fb01 f908 	mul.w	r9, r1, r8
 800065a:	b295      	uxth	r5, r2
 800065c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000660:	45a9      	cmp	r9, r5
 8000662:	d907      	bls.n	8000674 <__udivmoddi4+0x1c4>
 8000664:	197d      	adds	r5, r7, r5
 8000666:	f101 32ff 	add.w	r2, r1, #4294967295
 800066a:	d274      	bcs.n	8000756 <__udivmoddi4+0x2a6>
 800066c:	45a9      	cmp	r9, r5
 800066e:	d972      	bls.n	8000756 <__udivmoddi4+0x2a6>
 8000670:	3902      	subs	r1, #2
 8000672:	443d      	add	r5, r7
 8000674:	eba5 0509 	sub.w	r5, r5, r9
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e778      	b.n	8000570 <__udivmoddi4+0xc0>
 800067e:	f1c1 0720 	rsb	r7, r1, #32
 8000682:	408b      	lsls	r3, r1
 8000684:	fa22 fc07 	lsr.w	ip, r2, r7
 8000688:	ea4c 0c03 	orr.w	ip, ip, r3
 800068c:	fa25 f407 	lsr.w	r4, r5, r7
 8000690:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000694:	fbb4 f9fe 	udiv	r9, r4, lr
 8000698:	fa1f f88c 	uxth.w	r8, ip
 800069c:	fb0e 4419 	mls	r4, lr, r9, r4
 80006a0:	fa20 f307 	lsr.w	r3, r0, r7
 80006a4:	fb09 fa08 	mul.w	sl, r9, r8
 80006a8:	408d      	lsls	r5, r1
 80006aa:	431d      	orrs	r5, r3
 80006ac:	0c2b      	lsrs	r3, r5, #16
 80006ae:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80006b2:	45a2      	cmp	sl, r4
 80006b4:	fa02 f201 	lsl.w	r2, r2, r1
 80006b8:	fa00 f301 	lsl.w	r3, r0, r1
 80006bc:	d909      	bls.n	80006d2 <__udivmoddi4+0x222>
 80006be:	eb1c 0404 	adds.w	r4, ip, r4
 80006c2:	f109 30ff 	add.w	r0, r9, #4294967295
 80006c6:	d248      	bcs.n	800075a <__udivmoddi4+0x2aa>
 80006c8:	45a2      	cmp	sl, r4
 80006ca:	d946      	bls.n	800075a <__udivmoddi4+0x2aa>
 80006cc:	f1a9 0902 	sub.w	r9, r9, #2
 80006d0:	4464      	add	r4, ip
 80006d2:	eba4 040a 	sub.w	r4, r4, sl
 80006d6:	fbb4 f0fe 	udiv	r0, r4, lr
 80006da:	fb0e 4410 	mls	r4, lr, r0, r4
 80006de:	fb00 fa08 	mul.w	sl, r0, r8
 80006e2:	b2ad      	uxth	r5, r5
 80006e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80006e8:	45a2      	cmp	sl, r4
 80006ea:	d908      	bls.n	80006fe <__udivmoddi4+0x24e>
 80006ec:	eb1c 0404 	adds.w	r4, ip, r4
 80006f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80006f4:	d22d      	bcs.n	8000752 <__udivmoddi4+0x2a2>
 80006f6:	45a2      	cmp	sl, r4
 80006f8:	d92b      	bls.n	8000752 <__udivmoddi4+0x2a2>
 80006fa:	3802      	subs	r0, #2
 80006fc:	4464      	add	r4, ip
 80006fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000702:	fba0 8902 	umull	r8, r9, r0, r2
 8000706:	eba4 040a 	sub.w	r4, r4, sl
 800070a:	454c      	cmp	r4, r9
 800070c:	46c6      	mov	lr, r8
 800070e:	464d      	mov	r5, r9
 8000710:	d319      	bcc.n	8000746 <__udivmoddi4+0x296>
 8000712:	d016      	beq.n	8000742 <__udivmoddi4+0x292>
 8000714:	b15e      	cbz	r6, 800072e <__udivmoddi4+0x27e>
 8000716:	ebb3 020e 	subs.w	r2, r3, lr
 800071a:	eb64 0405 	sbc.w	r4, r4, r5
 800071e:	fa04 f707 	lsl.w	r7, r4, r7
 8000722:	fa22 f301 	lsr.w	r3, r2, r1
 8000726:	431f      	orrs	r7, r3
 8000728:	40cc      	lsrs	r4, r1
 800072a:	e9c6 7400 	strd	r7, r4, [r6]
 800072e:	2100      	movs	r1, #0
 8000730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000734:	4631      	mov	r1, r6
 8000736:	4630      	mov	r0, r6
 8000738:	e70c      	b.n	8000554 <__udivmoddi4+0xa4>
 800073a:	468c      	mov	ip, r1
 800073c:	e6eb      	b.n	8000516 <__udivmoddi4+0x66>
 800073e:	4610      	mov	r0, r2
 8000740:	e6ff      	b.n	8000542 <__udivmoddi4+0x92>
 8000742:	4543      	cmp	r3, r8
 8000744:	d2e6      	bcs.n	8000714 <__udivmoddi4+0x264>
 8000746:	ebb8 0e02 	subs.w	lr, r8, r2
 800074a:	eb69 050c 	sbc.w	r5, r9, ip
 800074e:	3801      	subs	r0, #1
 8000750:	e7e0      	b.n	8000714 <__udivmoddi4+0x264>
 8000752:	4628      	mov	r0, r5
 8000754:	e7d3      	b.n	80006fe <__udivmoddi4+0x24e>
 8000756:	4611      	mov	r1, r2
 8000758:	e78c      	b.n	8000674 <__udivmoddi4+0x1c4>
 800075a:	4681      	mov	r9, r0
 800075c:	e7b9      	b.n	80006d2 <__udivmoddi4+0x222>
 800075e:	4608      	mov	r0, r1
 8000760:	e773      	b.n	800064a <__udivmoddi4+0x19a>
 8000762:	4608      	mov	r0, r1
 8000764:	e749      	b.n	80005fa <__udivmoddi4+0x14a>
 8000766:	f1ac 0c02 	sub.w	ip, ip, #2
 800076a:	443d      	add	r5, r7
 800076c:	e713      	b.n	8000596 <__udivmoddi4+0xe6>
 800076e:	3802      	subs	r0, #2
 8000770:	443c      	add	r4, r7
 8000772:	e724      	b.n	80005be <__udivmoddi4+0x10e>

08000774 <__aeabi_idiv0>:
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop

08000778 <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	889b      	ldrh	r3, [r3, #4]
 8000788:	461a      	mov	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	88db      	ldrh	r3, [r3, #6]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	617b      	str	r3, [r7, #20]
	if (total < 0)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	2b00      	cmp	r3, #0
 8000796:	da05      	bge.n	80007a4 <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	891b      	ldrh	r3, [r3, #8]
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	4413      	add	r3, r2
 80007a2:	617b      	str	r3, [r7, #20]

	if (total == 0)
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d102      	bne.n	80007b0 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	e031      	b.n	8000814 <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	6819      	ldr	r1, [r3, #0]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	88db      	ldrh	r3, [r3, #6]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	8912      	ldrh	r2, [r2, #8]
 80007bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80007c0:	fb02 f200 	mul.w	r2, r2, r0
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	461a      	mov	r2, r3
			* circ_buf->element_size);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	895b      	ldrh	r3, [r3, #10]
 80007ce:	fb03 f302 	mul.w	r3, r3, r2
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 80007d2:	440b      	add	r3, r1
 80007d4:	613b      	str	r3, [r7, #16]

	if (elem)
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d006      	beq.n	80007ea <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	895b      	ldrh	r3, [r3, #10]
 80007e0:	461a      	mov	r2, r3
 80007e2:	6939      	ldr	r1, [r7, #16]
 80007e4:	68b8      	ldr	r0, [r7, #8]
 80007e6:	f008 f90d 	bl	8008a04 <memcpy>

	if (!read_only) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d110      	bne.n	8000812 <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	88db      	ldrh	r3, [r3, #6]
 80007f4:	3301      	adds	r3, #1
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	88db      	ldrh	r3, [r3, #6]
 8000800:	461a      	mov	r2, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	891b      	ldrh	r3, [r3, #8]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	429a      	cmp	r2, r3
 800080a:	db02      	blt.n	8000812 <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2200      	movs	r2, #0
 8000810:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	889b      	ldrh	r3, [r3, #4]
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	88db      	ldrh	r3, [r3, #6]
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	da05      	bge.n	8000846 <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	891b      	ldrh	r3, [r3, #8]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	68fa      	ldr	r2, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	891b      	ldrh	r3, [r3, #8]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4293      	cmp	r3, r2
 8000850:	db02      	blt.n	8000858 <__circ_gbuf_push+0x3c>
		return -1; // Full
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	e02b      	b.n	80008b0 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6819      	ldr	r1, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	889b      	ldrh	r3, [r3, #4]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	8912      	ldrh	r2, [r2, #8]
 8000864:	fbb3 f0f2 	udiv	r0, r3, r2
 8000868:	fb02 f200 	mul.w	r2, r2, r0
 800086c:	1a9b      	subs	r3, r3, r2
 800086e:	b29b      	uxth	r3, r3
 8000870:	461a      	mov	r2, r3
			* circ_buf->element_size );
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	895b      	ldrh	r3, [r3, #10]
 8000876:	fb03 f302 	mul.w	r3, r3, r2
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 800087a:	440b      	add	r3, r1
 800087c:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	895b      	ldrh	r3, [r3, #10]
 8000882:	461a      	mov	r2, r3
 8000884:	6839      	ldr	r1, [r7, #0]
 8000886:	68b8      	ldr	r0, [r7, #8]
 8000888:	f008 f8bc 	bl	8008a04 <memcpy>
	circ_buf->push_count++;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	889b      	ldrh	r3, [r3, #4]
 8000890:	3301      	adds	r3, #1
 8000892:	b29a      	uxth	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	889b      	ldrh	r3, [r3, #4]
 800089c:	461a      	mov	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	891b      	ldrh	r3, [r3, #8]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	429a      	cmp	r2, r3
 80008a6:	db02      	blt.n	80008ae <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	809a      	strh	r2, [r3, #4]
	return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <MX_GPIO_Init+0x110>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a3d      	ldr	r2, [pc, #244]	; (80009c8 <MX_GPIO_Init+0x110>)
 80008d4:	f043 0320 	orr.w	r3, r3, #32
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MX_GPIO_Init+0x110>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 0320 	and.w	r3, r3, #32
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <MX_GPIO_Init+0x110>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a37      	ldr	r2, [pc, #220]	; (80009c8 <MX_GPIO_Init+0x110>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	61d3      	str	r3, [r2, #28]
 80008f2:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <MX_GPIO_Init+0x110>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <MX_GPIO_Init+0x110>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <MX_GPIO_Init+0x110>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <MX_GPIO_Init+0x110>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2111      	movs	r1, #17
 800091a:	482c      	ldr	r0, [pc, #176]	; (80009cc <MX_GPIO_Init+0x114>)
 800091c:	f001 f98e 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2108      	movs	r1, #8
 8000924:	482a      	ldr	r0, [pc, #168]	; (80009d0 <MX_GPIO_Init+0x118>)
 8000926:	f001 f989 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_CLR_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800092e:	2311      	movs	r3, #17
 8000930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000932:	2301      	movs	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_CLR_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	4822      	ldr	r0, [pc, #136]	; (80009cc <MX_GPIO_Init+0x114>)
 8000942:	f000 fffb 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 8000946:	2302      	movs	r3, #2
 8000948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094e:	2301      	movs	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_GPIO_Init+0x114>)
 800095a:	f000 ffef 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CPU_LDAC_Pin;
 800095e:	2304      	movs	r3, #4
 8000960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CPU_LDAC_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	4816      	ldr	r0, [pc, #88]	; (80009cc <MX_GPIO_Init+0x114>)
 8000974:	f000 ffe2 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8000978:	2310      	movs	r3, #16
 800097a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4619      	mov	r1, r3
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <MX_GPIO_Init+0x114>)
 8000990:	f000 ffd4 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COUNT_EN_Pin;
 8000994:	2308      	movs	r3, #8
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(COUNT_EN_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4809      	ldr	r0, [pc, #36]	; (80009d0 <MX_GPIO_Init+0x118>)
 80009ac:	f000 ffc6 	bl	800193c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2008      	movs	r0, #8
 80009b6:	f000 ff8a 	bl	80018ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009ba:	2008      	movs	r0, #8
 80009bc:	f000 ffa3 	bl	8001906 <HAL_NVIC_EnableIRQ>

}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <USB_rx_command_buffer_push_refd>:

uint32_t DAC_tx_buffer;
uint8_t DAC_tx_tmp_buffer[4];

// #define CRICBUF_CLEAN_ON_POP
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 128);
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <USB_rx_command_buffer_push_refd+0x1c>)
 80009e0:	f7ff ff1c 	bl	800081c <__circ_gbuf_push>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008

080009f4 <USB_rx_command_buffer_pop_refd>:
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <USB_rx_command_buffer_pop_refd+0x1c>)
 8000a02:	f7ff feb9 	bl	8000778 <__circ_gbuf_pop>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000008 	.word	0x20000008

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 8000a1a:	4b37      	ldr	r3, [pc, #220]	; (8000af8 <main+0xe4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 8000a20:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <main+0xe4>)
 8000a22:	2208      	movs	r2, #8
 8000a24:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8000a26:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <main+0xe4>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 8000a2c:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <main+0xe4>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=1; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <main+0xe4>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8000a38:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <main+0xe4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=1; // DAC updated on LDAC !!!!falling edge!!!!
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <main+0xe4>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <main+0xe4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=1; // Temperature calibration feature enabled
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <main+0xe4>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f000 fdf7 	bl	8001642 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 f866 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a58:	f7ff ff2e 	bl	80008b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a5c:	f000 fbbc 	bl	80011d8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a60:	f000 fbf0 	bl	8001244 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000a64:	f007 faae 	bl	8007fc4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  DAC_target_speed=0.001; //  V/s
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <main+0xe8>)
 8000a6a:	4a25      	ldr	r2, [pc, #148]	; (8000b00 <main+0xec>)
 8000a6c:	601a      	str	r2, [r3, #0]
  DAC_code=0xFFFFF;
 8000a6e:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <main+0xf0>)
 8000a70:	4a25      	ldr	r2, [pc, #148]	; (8000b08 <main+0xf4>)
 8000a72:	601a      	str	r2, [r3, #0]
  DAC_code_direction=0;
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <main+0xf8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]

  DDS_target_frequecny=0xFFFFF/(DAC_fullrange_voltage/DAC_target_speed);
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <main+0xfc>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <main+0xe8>)
 8000a80:	6812      	ldr	r2, [r2, #0]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fc3f 	bl	8000308 <__aeabi_fdiv>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4821      	ldr	r0, [pc, #132]	; (8000b14 <main+0x100>)
 8000a90:	f7ff fc3a 	bl	8000308 <__aeabi_fdiv>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <main+0x104>)
 8000a9a:	601a      	str	r2, [r3, #0]

  DDS_Init();
 8000a9c:	f000 f88e 	bl	8000bbc <DDS_Init>
  cfg.LDACMODE=0;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <main+0xe4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	709a      	strb	r2, [r3, #2]
  DAC_SendInit();
 8000aa6:	f000 f903 	bl	8000cb0 <DAC_SendInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(USB_CDC_End_Line_Received)
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <main+0x108>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d0fb      	beq.n	8000aaa <main+0x96>
	  {	  uint8_t i=0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]
		  USB_CDC_End_Line_Received=0;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <main+0x108>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
		  while (1) {
			  if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <main+0x10c>)
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff96 	bl	80009f4 <USB_rx_command_buffer_pop_refd>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <main+0xc2>
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <main+0x10c>)
 8000ad2:	210a      	movs	r1, #10
 8000ad4:	54d1      	strb	r1, [r2, r3]
			  if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4a11      	ldr	r2, [pc, #68]	; (8000b20 <main+0x10c>)
 8000ada:	5cd3      	ldrb	r3, [r2, r3]
 8000adc:	2b0a      	cmp	r3, #10
 8000ade:	d008      	beq.n	8000af2 <main+0xde>
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <main+0x10c>)
 8000ae4:	5cd3      	ldrb	r3, [r2, r3]
 8000ae6:	2b0d      	cmp	r3, #13
 8000ae8:	d003      	beq.n	8000af2 <main+0xde>
			  i++;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	3301      	adds	r3, #1
 8000aee:	71fb      	strb	r3, [r7, #7]
			  if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8000af0:	e7e4      	b.n	8000abc <main+0xa8>
		  }
		  Parsing_command();
 8000af2:	f000 fa21 	bl	8000f38 <Parsing_command>
	  if(USB_CDC_End_Line_Received)
 8000af6:	e7d8      	b.n	8000aaa <main+0x96>
 8000af8:	20000454 	.word	0x20000454
 8000afc:	2000056c 	.word	0x2000056c
 8000b00:	3a83126f 	.word	0x3a83126f
 8000b04:	20000210 	.word	0x20000210
 8000b08:	000fffff 	.word	0x000fffff
 8000b0c:	20000570 	.word	0x20000570
 8000b10:	20000004 	.word	0x20000004
 8000b14:	497ffff0 	.word	0x497ffff0
 8000b18:	20000450 	.word	0x20000450
 8000b1c:	20000569 	.word	0x20000569
 8000b20:	200004e8 	.word	0x200004e8

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b092      	sub	sp, #72	; 0x48
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2234      	movs	r2, #52	; 0x34
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f007 ff74 	bl	8008a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <SystemClock_Config+0x94>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b4e:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <SystemClock_Config+0x94>)
 8000b50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b54:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000b6e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fcbb 	bl	80034f4 <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000b84:	f000 fb22 	bl	80011cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	230f      	movs	r3, #15
 8000b8a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f002 ffd7 	bl	8003b54 <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000bac:	f000 fb0e 	bl	80011cc <Error_Handler>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3748      	adds	r7, #72	; 0x48
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40007000 	.word	0x40007000

08000bbc <DDS_Init>:

/* USER CODE BEGIN 4 */
//==============================================================================================
void DDS_Init(void)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
  float DDS_FTW=((DDS_target_frequecny*256)/DDS_clock_frequecny)*0xFFFFFFFF;
 8000bc2:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <DDS_Init+0xe4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fae8 	bl	80001a0 <__aeabi_fmul>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <DDS_Init+0xe8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4610      	mov	r0, r2
 8000bdc:	f7ff fb94 	bl	8000308 <__aeabi_fdiv>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fada 	bl	80001a0 <__aeabi_fmul>
 8000bec:	4603      	mov	r3, r0
 8000bee:	607b      	str	r3, [r7, #4]

  DDS_tx_buffer[0]=0xF800; // Enter DAC to Sleep+Reset mode
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <DDS_Init+0xec>)
 8000bf2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000bf6:	801a      	strh	r2, [r3, #0]

  DDS_tx_buffer[1]=0x3300; // Write to Frequency 0 Reg, H MSB
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <DDS_Init+0xec>)
 8000bfa:	f44f 524c 	mov.w	r2, #13056	; 0x3300
 8000bfe:	805a      	strh	r2, [r3, #2]
  DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <DDS_Init+0xec>)
 8000c02:	885c      	ldrh	r4, [r3, #2]
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff fc1b 	bl	8000440 <__aeabi_f2uiz>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	0e1b      	lsrs	r3, r3, #24
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4423      	add	r3, r4
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <DDS_Init+0xec>)
 8000c16:	805a      	strh	r2, [r3, #2]

  DDS_tx_buffer[2]=0x2200; // Write to Frequency 0 Reg, L MSBs
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <DDS_Init+0xec>)
 8000c1a:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8000c1e:	809a      	strh	r2, [r3, #4]
  DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8000c20:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <DDS_Init+0xec>)
 8000c22:	889c      	ldrh	r4, [r3, #4]
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fc0b 	bl	8000440 <__aeabi_f2uiz>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	0c1b      	lsrs	r3, r3, #16
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4423      	add	r3, r4
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <DDS_Init+0xec>)
 8000c3a:	809a      	strh	r2, [r3, #4]

  DDS_tx_buffer[3]=0x3100; // Write to Frequency 0 Reg, H LSBs
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <DDS_Init+0xec>)
 8000c3e:	f44f 5244 	mov.w	r2, #12544	; 0x3100
 8000c42:	80da      	strh	r2, [r3, #6]
  DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <DDS_Init+0xec>)
 8000c46:	88dc      	ldrh	r4, [r3, #6]
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fbf9 	bl	8000440 <__aeabi_f2uiz>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	4423      	add	r3, r4
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <DDS_Init+0xec>)
 8000c5e:	80da      	strh	r2, [r3, #6]

  DDS_tx_buffer[4]=0x2000; // Write to Frequency 0 Reg, L LSBs
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <DDS_Init+0xec>)
 8000c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c66:	811a      	strh	r2, [r3, #8]
  DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <DDS_Init+0xec>)
 8000c6a:	891c      	ldrh	r4, [r3, #8]
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fbe7 	bl	8000440 <__aeabi_f2uiz>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	4423      	add	r3, r4
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <DDS_Init+0xec>)
 8000c80:	811a      	strh	r2, [r3, #8]

  DDS_tx_buffer[5]=0xC000; // Exit DAC from Sleep+Reset mode
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <DDS_Init+0xec>)
 8000c84:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000c88:	815a      	strh	r2, [r3, #10]

  HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	2206      	movs	r2, #6
 8000c8e:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <DDS_Init+0xec>)
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <DDS_Init+0xf0>)
 8000c92:	f003 fa3d 	bl	8004110 <HAL_SPI_Transmit>

}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000450 	.word	0x20000450
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000444 	.word	0x20000444
 8000cac:	20000574 	.word	0x20000574

08000cb0 <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	DAC_tx_buffer=0;
 8000cb4:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <DAC_SendInit+0x154>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 8000cba:	4b53      	ldr	r3, [pc, #332]	; (8000e08 <DAC_SendInit+0x158>)
 8000cbc:	7a1b      	ldrb	r3, [r3, #8]
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	f003 0210 	and.w	r2, r3, #16
 8000cc4:	4b4f      	ldr	r3, [pc, #316]	; (8000e04 <DAC_SendInit+0x154>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a4e      	ldr	r2, [pc, #312]	; (8000e04 <DAC_SendInit+0x154>)
 8000ccc:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x0F)<<6;
 8000cce:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <DAC_SendInit+0x158>)
 8000cd0:	79db      	ldrb	r3, [r3, #7]
 8000cd2:	019b      	lsls	r3, r3, #6
 8000cd4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
 8000cd8:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <DAC_SendInit+0x154>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a49      	ldr	r2, [pc, #292]	; (8000e04 <DAC_SendInit+0x154>)
 8000ce0:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 8000ce2:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <DAC_SendInit+0x158>)
 8000ce4:	799b      	ldrb	r3, [r3, #6]
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000cec:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <DAC_SendInit+0x154>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <DAC_SendInit+0x154>)
 8000cf4:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 8000cf6:	4b44      	ldr	r3, [pc, #272]	; (8000e08 <DAC_SendInit+0x158>)
 8000cf8:	795b      	ldrb	r3, [r3, #5]
 8000cfa:	02db      	lsls	r3, r3, #11
 8000cfc:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8000d00:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <DAC_SendInit+0x154>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a3f      	ldr	r2, [pc, #252]	; (8000e04 <DAC_SendInit+0x154>)
 8000d08:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 8000d0a:	4b3f      	ldr	r3, [pc, #252]	; (8000e08 <DAC_SendInit+0x158>)
 8000d0c:	791b      	ldrb	r3, [r3, #4]
 8000d0e:	031b      	lsls	r3, r3, #12
 8000d10:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <DAC_SendInit+0x154>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a3a      	ldr	r2, [pc, #232]	; (8000e04 <DAC_SendInit+0x154>)
 8000d1c:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 8000d1e:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <DAC_SendInit+0x158>)
 8000d20:	78db      	ldrb	r3, [r3, #3]
 8000d22:	035b      	lsls	r3, r3, #13
 8000d24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <DAC_SendInit+0x154>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a35      	ldr	r2, [pc, #212]	; (8000e04 <DAC_SendInit+0x154>)
 8000d30:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 8000d32:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <DAC_SendInit+0x158>)
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	039b      	lsls	r3, r3, #14
 8000d38:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8000d3c:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <DAC_SendInit+0x154>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a30      	ldr	r2, [pc, #192]	; (8000e04 <DAC_SendInit+0x154>)
 8000d44:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8000d46:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <DAC_SendInit+0x158>)
 8000d48:	785b      	ldrb	r3, [r3, #1]
 8000d4a:	049b      	lsls	r3, r3, #18
 8000d4c:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8000d50:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <DAC_SendInit+0x154>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a2b      	ldr	r2, [pc, #172]	; (8000e04 <DAC_SendInit+0x154>)
 8000d58:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <DAC_SendInit+0x158>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <DAC_SendInit+0x154>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <DAC_SendInit+0x154>)
 8000d6c:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=0x02<<24; // CONFIG1
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <DAC_SendInit+0x154>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000d76:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <DAC_SendInit+0x154>)
 8000d78:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=0x00<<31; // Write
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <DAC_SendInit+0x154>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <DAC_SendInit+0x154>)
 8000d80:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <DAC_SendInit+0x154>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	0e1b      	lsrs	r3, r3, #24
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <DAC_SendInit+0x15c>)
 8000d8c:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <DAC_SendInit+0x154>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	0c1b      	lsrs	r3, r3, #16
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <DAC_SendInit+0x15c>)
 8000d98:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <DAC_SendInit+0x154>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	0a1b      	lsrs	r3, r3, #8
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <DAC_SendInit+0x15c>)
 8000da4:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <DAC_SendInit+0x154>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <DAC_SendInit+0x15c>)
 8000dae:	70da      	strb	r2, [r3, #3]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <DAC_SendInit+0x154>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	0e1b      	lsrs	r3, r3, #24
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <DAC_SendInit+0x15c>)
 8000dba:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <DAC_SendInit+0x154>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	0c1b      	lsrs	r3, r3, #16
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <DAC_SendInit+0x15c>)
 8000dc6:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <DAC_SendInit+0x154>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <DAC_SendInit+0x15c>)
 8000dd2:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <DAC_SendInit+0x154>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <DAC_SendInit+0x15c>)
 8000ddc:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2110      	movs	r1, #16
 8000de2:	480b      	ldr	r0, [pc, #44]	; (8000e10 <DAC_SendInit+0x160>)
 8000de4:	f000 ff2a 	bl	8001c3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,4,100);
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	2204      	movs	r2, #4
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <DAC_SendInit+0x15c>)
 8000dee:	4809      	ldr	r0, [pc, #36]	; (8000e14 <DAC_SendInit+0x164>)
 8000df0:	f003 f98e 	bl	8004110 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, DAC_SYNC_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2110      	movs	r1, #16
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <DAC_SendInit+0x160>)
 8000dfa:	f000 ff1f 	bl	8001c3c <HAL_GPIO_WritePin>

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200004e4 	.word	0x200004e4
 8000e08:	20000454 	.word	0x20000454
 8000e0c:	200004e0 	.word	0x200004e0
 8000e10:	40020000 	.word	0x40020000
 8000e14:	200005cc 	.word	0x200005cc

08000e18 <DAC_Write>:

//==============================================================================================
void DAC_Write(uint32_t value)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2110      	movs	r1, #16
 8000e24:	481b      	ldr	r0, [pc, #108]	; (8000e94 <DAC_Write+0x7c>)
 8000e26:	f000 ff09 	bl	8001c3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,4,100);
 8000e2a:	2364      	movs	r3, #100	; 0x64
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	491a      	ldr	r1, [pc, #104]	; (8000e98 <DAC_Write+0x80>)
 8000e30:	481a      	ldr	r0, [pc, #104]	; (8000e9c <DAC_Write+0x84>)
 8000e32:	f003 f96d 	bl	8004110 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, DAC_SYNC_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4816      	ldr	r0, [pc, #88]	; (8000e94 <DAC_Write+0x7c>)
 8000e3c:	f000 fefe 	bl	8001c3c <HAL_GPIO_WritePin>

	// Speedup hint: Calculate data AFTER send.
	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <DAC_Write+0x88>)
 8000e42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e46:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e50:	f023 030f 	bic.w	r3, r3, #15
 8000e54:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <DAC_Write+0x88>)
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <DAC_Write+0x88>)
 8000e5c:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <DAC_Write+0x88>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	0e1b      	lsrs	r3, r3, #24
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <DAC_Write+0x80>)
 8000e68:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <DAC_Write+0x88>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	0c1b      	lsrs	r3, r3, #16
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <DAC_Write+0x80>)
 8000e74:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <DAC_Write+0x88>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	0a1b      	lsrs	r3, r3, #8
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <DAC_Write+0x80>)
 8000e80:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <DAC_Write+0x88>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <DAC_Write+0x80>)
 8000e8a:	70da      	strb	r2, [r3, #3]
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40020000 	.word	0x40020000
 8000e98:	200004e0 	.word	0x200004e0
 8000e9c:	200005cc 	.word	0x200005cc
 8000ea0:	200004e4 	.word	0x200004e4

08000ea4 <HAL_GPIO_EXTI_Callback>:
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_2)
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d11e      	bne.n	8000ef2 <HAL_GPIO_EXTI_Callback+0x4e>
  {
	  if(DAC_code_direction)
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_GPIO_EXTI_Callback+0x58>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d010      	beq.n	8000ede <HAL_GPIO_EXTI_Callback+0x3a>
	  {
		  if(DAC_code<=0xFFFFF)
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000ec4:	d205      	bcs.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x2e>
		  {
			  DAC_code++;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	e00a      	b.n	8000ee8 <HAL_GPIO_EXTI_Callback+0x44>
		  } else  HAL_GPIO_WritePin(GPIOB, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	480b      	ldr	r0, [pc, #44]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ed8:	f000 feb0 	bl	8001c3c <HAL_GPIO_WritePin>
 8000edc:	e004      	b.n	8000ee8 <HAL_GPIO_EXTI_Callback+0x44>
	  }
	  else
	  {
		  if(DAC_code>=0x0)
		  {
			  DAC_code--;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ee6:	6013      	str	r3, [r2, #0]
		  } else  HAL_GPIO_WritePin(GPIOB, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
	  }
	  DAC_Write(DAC_code);
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff93 	bl	8000e18 <DAC_Write>
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000570 	.word	0x20000570
 8000f00:	20000210 	.word	0x20000210
 8000f04:	40020400 	.word	0x40020400

08000f08 <Write_to_circ_buffer>:

//==============================================================================================
void Write_to_circ_buffer(uint8_t Buf)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fd5d 	bl	80009d4 <USB_rx_command_buffer_push_refd>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d005      	beq.n	8000f2c <Write_to_circ_buffer+0x24>
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <Write_to_circ_buffer+0x2c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	809a      	strh	r2, [r3, #4]
 8000f26:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <Write_to_circ_buffer+0x2c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	80da      	strh	r2, [r3, #6]
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000008 	.word	0x20000008

08000f38 <Parsing_command>:

//==============================================================================================
void Parsing_command(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b0ee      	sub	sp, #440	; 0x1b8
 8000f3c:	af00      	add	r7, sp, #0
	char *found;
	char decoded_string_1[129];
	char decoded_string_2[129];
	uint8_t Clear[]="\033c \rEnter command:";
 8000f3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f42:	4a91      	ldr	r2, [pc, #580]	; (8001188 <Parsing_command+0x250>)
 8000f44:	461c      	mov	r4, r3
 8000f46:	4615      	mov	r5, r2
 8000f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	8022      	strh	r2, [r4, #0]
 8000f52:	3402      	adds	r4, #2
 8000f54:	0c1b      	lsrs	r3, r3, #16
 8000f56:	7023      	strb	r3, [r4, #0]
	uint8_t Error[]="\r\n ERROR\n\r\n\r"
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4a8b      	ldr	r2, [pc, #556]	; (800118c <Parsing_command+0x254>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	4611      	mov	r1, r2
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	461a      	mov	r2, r3
 8000f66:	f007 fd4d 	bl	8008a04 <memcpy>
			"Usage:\n\r"
			"SWEEP START/STOP to control sweep cycle\n\r"
			"DAC_SET TOP/DOWN to set DAC to 0xFFFFF or 0x0\n\r"
			"\n\r"
			"\n\rEnter command: ";
	uint8_t OK[]="\r\n OK \n\rEnter command: ";
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4a88      	ldr	r2, [pc, #544]	; (8001190 <Parsing_command+0x258>)
 8000f6e:	461c      	mov	r4, r3
 8000f70:	4615      	mov	r5, r2
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f7a:	e884 0003 	stmia.w	r4, {r0, r1}

	found = strtok((char *)command_buffer," ");
 8000f7e:	4985      	ldr	r1, [pc, #532]	; (8001194 <Parsing_command+0x25c>)
 8000f80:	4885      	ldr	r0, [pc, #532]	; (8001198 <Parsing_command+0x260>)
 8000f82:	f007 fd5d 	bl	8008a40 <strtok>
 8000f86:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
	if(found!=NULL)
 8000f8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d011      	beq.n	8000fb6 <Parsing_command+0x7e>
	{
		strcpy(decoded_string_1,found);
 8000f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f96:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 fd48 	bl	8008a30 <strcpy>
	{
		CDC_Transmit_FS(Error, strlen((const char *)Error));  // SEND ERROR TO CDC!!!
	   return;
	}

	found = strtok(NULL,"\r");
 8000fa0:	497e      	ldr	r1, [pc, #504]	; (800119c <Parsing_command+0x264>)
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f007 fd4c 	bl	8008a40 <strtok>
 8000fa8:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
	if(found!=NULL)
 8000fac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d01f      	beq.n	8000ff4 <Parsing_command+0xbc>
 8000fb4:	e00d      	b.n	8000fd2 <Parsing_command+0x9a>
		CDC_Transmit_FS(Error, strlen((const char *)Error));  // SEND ERROR TO CDC!!!
 8000fb6:	f107 0318 	add.w	r3, r7, #24
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f8e8 	bl	8000190 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f007 f8fe 	bl	80081cc <CDC_Transmit_FS>
	   return;
 8000fd0:	e0d5      	b.n	800117e <Parsing_command+0x246>
	{
		strcpy(decoded_string_2,found);
 8000fd2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fd6:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f007 fd28 	bl	8008a30 <strcpy>
	{
		CDC_Transmit_FS(Error, strlen((const char *)Error));  // SEND ERROR TO CDC!!!
	   return;
	}
// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8000fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fe4:	496e      	ldr	r1, [pc, #440]	; (80011a0 <Parsing_command+0x268>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f8c8 	bl	800017c <strcmp>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d15a      	bne.n	80010a8 <Parsing_command+0x170>
 8000ff2:	e00d      	b.n	8001010 <Parsing_command+0xd8>
		CDC_Transmit_FS(Error, strlen((const char *)Error));  // SEND ERROR TO CDC!!!
 8000ff4:	f107 0318 	add.w	r3, r7, #24
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f8c9 	bl	8000190 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f007 f8df 	bl	80081cc <CDC_Transmit_FS>
	   return;
 800100e:	e0b6      	b.n	800117e <Parsing_command+0x246>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8001010:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001014:	4963      	ldr	r1, [pc, #396]	; (80011a4 <Parsing_command+0x26c>)
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff f8b0 	bl	800017c <strcmp>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d115      	bne.n	800104e <Parsing_command+0x116>
			HAL_GPIO_WritePin(GPIOB, COUNT_EN_Pin, GPIO_PIN_RESET); // Enable LDAC signal
 8001022:	2200      	movs	r2, #0
 8001024:	2108      	movs	r1, #8
 8001026:	4860      	ldr	r0, [pc, #384]	; (80011a8 <Parsing_command+0x270>)
 8001028:	f000 fe08 	bl	8001c3c <HAL_GPIO_WritePin>
			cfg.LDACMODE=1;
 800102c:	4b5f      	ldr	r3, [pc, #380]	; (80011ac <Parsing_command+0x274>)
 800102e:	2201      	movs	r2, #1
 8001030:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 8001032:	f7ff fe3d 	bl	8000cb0 <DAC_SendInit>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001036:	463b      	mov	r3, r7
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f8a9 	bl	8000190 <strlen>
 800103e:	4603      	mov	r3, r0
 8001040:	b29a      	uxth	r2, r3
 8001042:	463b      	mov	r3, r7
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f007 f8c0 	bl	80081cc <CDC_Transmit_FS>
 800104c:	e02c      	b.n	80010a8 <Parsing_command+0x170>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP"))){
 800104e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001052:	4957      	ldr	r1, [pc, #348]	; (80011b0 <Parsing_command+0x278>)
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff f891 	bl	800017c <strcmp>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d115      	bne.n	800108c <Parsing_command+0x154>
						HAL_GPIO_WritePin(GPIOB, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001060:	2201      	movs	r2, #1
 8001062:	2108      	movs	r1, #8
 8001064:	4850      	ldr	r0, [pc, #320]	; (80011a8 <Parsing_command+0x270>)
 8001066:	f000 fde9 	bl	8001c3c <HAL_GPIO_WritePin>
						cfg.LDACMODE=0;
 800106a:	4b50      	ldr	r3, [pc, #320]	; (80011ac <Parsing_command+0x274>)
 800106c:	2200      	movs	r2, #0
 800106e:	709a      	strb	r2, [r3, #2]
						DAC_SendInit();
 8001070:	f7ff fe1e 	bl	8000cb0 <DAC_SendInit>
						CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001074:	463b      	mov	r3, r7
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f88a 	bl	8000190 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	b29a      	uxth	r2, r3
 8001080:	463b      	mov	r3, r7
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f007 f8a1 	bl	80081cc <CDC_Transmit_FS>
 800108a:	e00d      	b.n	80010a8 <Parsing_command+0x170>
			}
			else
			{
				CDC_Transmit_FS(Error, strlen((const char *)Error));  // SEND ERROR TO CDC!!!
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f87d 	bl	8000190 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	b29a      	uxth	r2, r3
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f007 f893 	bl	80081cc <CDC_Transmit_FS>
				return;
 80010a6:	e06a      	b.n	800117e <Parsing_command+0x246>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 80010a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010ac:	4941      	ldr	r1, [pc, #260]	; (80011b4 <Parsing_command+0x27c>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f864 	bl	800017c <strcmp>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d161      	bne.n	800117e <Parsing_command+0x246>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 80010ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010be:	493e      	ldr	r1, [pc, #248]	; (80011b8 <Parsing_command+0x280>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f85b 	bl	800017c <strcmp>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d120      	bne.n	800110e <Parsing_command+0x1d6>
			  DAC_code=0xFFFFF;
 80010cc:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <Parsing_command+0x284>)
 80010ce:	4a3c      	ldr	r2, [pc, #240]	; (80011c0 <Parsing_command+0x288>)
 80010d0:	601a      	str	r2, [r3, #0]
			  DAC_code_direction=0;
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <Parsing_command+0x28c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
			  cfg.LDACMODE=0;
 80010d8:	4b34      	ldr	r3, [pc, #208]	; (80011ac <Parsing_command+0x274>)
 80010da:	2200      	movs	r2, #0
 80010dc:	709a      	strb	r2, [r3, #2]
			  DAC_SendInit();
 80010de:	f7ff fde7 	bl	8000cb0 <DAC_SendInit>
			  DAC_Write(DAC_code);
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <Parsing_command+0x284>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe96 	bl	8000e18 <DAC_Write>
			  DAC_Write(DAC_code);
 80010ec:	4b33      	ldr	r3, [pc, #204]	; (80011bc <Parsing_command+0x284>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fe91 	bl	8000e18 <DAC_Write>
			  CDC_Transmit_FS(OK, strlen((const char *)OK));
 80010f6:	463b      	mov	r3, r7
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f849 	bl	8000190 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	463b      	mov	r3, r7
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f007 f860 	bl	80081cc <CDC_Transmit_FS>
 800110c:	e037      	b.n	800117e <Parsing_command+0x246>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 800110e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001112:	492d      	ldr	r1, [pc, #180]	; (80011c8 <Parsing_command+0x290>)
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f831 	bl	800017c <strcmp>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d120      	bne.n	8001162 <Parsing_command+0x22a>
				  DAC_code=0x0;
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <Parsing_command+0x284>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
				  DAC_code_direction=1;
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <Parsing_command+0x28c>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
				  cfg.LDACMODE=0;
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <Parsing_command+0x274>)
 800112e:	2200      	movs	r2, #0
 8001130:	709a      	strb	r2, [r3, #2]
				  DAC_SendInit();
 8001132:	f7ff fdbd 	bl	8000cb0 <DAC_SendInit>
				  DAC_Write(DAC_code);
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <Parsing_command+0x284>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fe6c 	bl	8000e18 <DAC_Write>
				  DAC_Write(DAC_code);
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <Parsing_command+0x284>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fe67 	bl	8000e18 <DAC_Write>
				  CDC_Transmit_FS(OK, strlen((const char *)OK));
 800114a:	463b      	mov	r3, r7
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f81f 	bl	8000190 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	463b      	mov	r3, r7
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f007 f836 	bl	80081cc <CDC_Transmit_FS>
 8001160:	e00d      	b.n	800117e <Parsing_command+0x246>
			}
			else
			{
				CDC_Transmit_FS(Error, strlen((const char *)Error));  // SEND ERROR TO CDC!!!
 8001162:	f107 0318 	add.w	r3, r7, #24
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f812 	bl	8000190 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f007 f828 	bl	80081cc <CDC_Transmit_FS>
				return;
 800117c:	bf00      	nop
		}
	}



}
 800117e:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
 8001186:	bf00      	nop
 8001188:	08009adc 	.word	0x08009adc
 800118c:	08009af0 	.word	0x08009af0
 8001190:	08009b70 	.word	0x08009b70
 8001194:	08009aa8 	.word	0x08009aa8
 8001198:	200004e8 	.word	0x200004e8
 800119c:	08009aac 	.word	0x08009aac
 80011a0:	08009ab0 	.word	0x08009ab0
 80011a4:	08009ab8 	.word	0x08009ab8
 80011a8:	40020400 	.word	0x40020400
 80011ac:	20000454 	.word	0x20000454
 80011b0:	08009ac0 	.word	0x08009ac0
 80011b4:	08009ac8 	.word	0x08009ac8
 80011b8:	08009ad0 	.word	0x08009ad0
 80011bc:	20000210 	.word	0x20000210
 80011c0:	000fffff 	.word	0x000fffff
 80011c4:	20000570 	.word	0x20000570
 80011c8:	08009ad4 	.word	0x08009ad4

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI1_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_SPI1_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_SPI1_Init+0x64>)
 80011e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI1_Init+0x64>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI1_Init+0x64>)
 8001224:	220a      	movs	r2, #10
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI1_Init+0x64>)
 800122a:	f002 fef5 	bl	8004018 <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001234:	f7ff ffca 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200005cc 	.word	0x200005cc
 8001240:	40013000 	.word	0x40013000

08001244 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_SPI2_Init+0x68>)
 800124a:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <MX_SPI2_Init+0x6c>)
 800124c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_SPI2_Init+0x68>)
 8001250:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001254:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_SPI2_Init+0x68>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <MX_SPI2_Init+0x68>)
 800125e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001262:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_SPI2_Init+0x68>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_SPI2_Init+0x68>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_SPI2_Init+0x68>)
 8001272:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001276:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_SPI2_Init+0x68>)
 800127a:	2230      	movs	r2, #48	; 0x30
 800127c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_SPI2_Init+0x68>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_SPI2_Init+0x68>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_SPI2_Init+0x68>)
 800128c:	2200      	movs	r2, #0
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_SPI2_Init+0x68>)
 8001292:	220a      	movs	r2, #10
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_SPI2_Init+0x68>)
 8001298:	f002 febe 	bl	8004018 <HAL_SPI_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80012a2:	f7ff ff93 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000574 	.word	0x20000574
 80012b0:	40003800 	.word	0x40003800

080012b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a2e      	ldr	r2, [pc, #184]	; (800138c <HAL_SPI_MspInit+0xd8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d128      	bne.n	8001328 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d6:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 80012dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e0:	6213      	str	r3, [r2, #32]
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a27      	ldr	r2, [pc, #156]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001306:	23e0      	movs	r3, #224	; 0xe0
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001316:	2305      	movs	r3, #5
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	481c      	ldr	r0, [pc, #112]	; (8001394 <HAL_SPI_MspInit+0xe0>)
 8001322:	f000 fb0b 	bl	800193c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001326:	e02d      	b.n	8001384 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a1a      	ldr	r2, [pc, #104]	; (8001398 <HAL_SPI_MspInit+0xe4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d128      	bne.n	8001384 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	4a16      	ldr	r2, [pc, #88]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	6253      	str	r3, [r2, #36]	; 0x24
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001362:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001374:	2305      	movs	r3, #5
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <HAL_SPI_MspInit+0xe8>)
 8001380:	f000 fadc 	bl	800193c <HAL_GPIO_Init>
}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	; 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40013000 	.word	0x40013000
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000
 8001398:	40003800 	.word	0x40003800
 800139c:	40020400 	.word	0x40020400

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_MspInit+0x58>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <HAL_MspInit+0x58>)
 80013ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013b0:	6253      	str	r3, [r2, #36]	; 0x24
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_MspInit+0x58>)
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_MspInit+0x58>)
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <HAL_MspInit+0x58>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6213      	str	r3, [r2, #32]
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_MspInit+0x58>)
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_MspInit+0x58>)
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_MspInit+0x58>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6253      	str	r3, [r2, #36]	; 0x24
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_MspInit+0x58>)
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	40023800 	.word	0x40023800

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001442:	f000 f951 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}

0800144a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CPU_LDAC_Pin);
 800144e:	2004      	movs	r0, #4
 8001450:	f000 fc0c 	bl	8001c6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <USB_LP_IRQHandler+0x10>)
 800145e:	f000 fd21 	bl	8001ea4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20001294 	.word	0x20001294

0800146c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	return 1;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <_kill>:

int _kill(int pid, int sig)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001484:	f007 fa94 	bl	80089b0 <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	2216      	movs	r2, #22
 800148c:	601a      	str	r2, [r3, #0]
	return -1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_exit>:

void _exit (int status)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014a2:	f04f 31ff 	mov.w	r1, #4294967295
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffe7 	bl	800147a <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ac:	e7fe      	b.n	80014ac <_exit+0x12>

080014ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e00a      	b.n	80014d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c0:	f3af 8000 	nop.w
 80014c4:	4601      	mov	r1, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	60ba      	str	r2, [r7, #8]
 80014cc:	b2ca      	uxtb	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	dbf0      	blt.n	80014c0 <_read+0x12>
	}

return len;
 80014de:	687b      	ldr	r3, [r7, #4]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e009      	b.n	800150e <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	60ba      	str	r2, [r7, #8]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	429a      	cmp	r2, r3
 8001514:	dbf1      	blt.n	80014fa <_write+0x12>
	}
	return len;
 8001516:	687b      	ldr	r3, [r7, #4]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <_close>:

int _close(int file)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	return -1;
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001546:	605a      	str	r2, [r3, #4]
	return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <_isatty>:

int _isatty(int file)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001588:	4a14      	ldr	r2, [pc, #80]	; (80015dc <_sbrk+0x5c>)
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <_sbrk+0x60>)
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <_sbrk+0x64>)
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <_sbrk+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d207      	bcs.n	80015c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b0:	f007 f9fe 	bl	80089b0 <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	220c      	movs	r2, #12
 80015b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	e009      	b.n	80015d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <_sbrk+0x64>)
 80015d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20004000 	.word	0x20004000
 80015e0:	00000400 	.word	0x00000400
 80015e4:	20000214 	.word	0x20000214
 80015e8:	20001590 	.word	0x20001590

080015ec <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fa:	490d      	ldr	r1, [pc, #52]	; (8001630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001610:	4c0a      	ldr	r4, [pc, #40]	; (800163c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800161e:	f7ff ffe5 	bl	80015ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001622:	f007 f9cb 	bl	80089bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001626:	f7ff f9f5 	bl	8000a14 <main>
  bx lr
 800162a:	4770      	bx	lr
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001634:	08009d38 	.word	0x08009d38
  ldr r2, =_sbss
 8001638:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800163c:	20001590 	.word	0x20001590

08001640 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC1_IRQHandler>

08001642 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 f933 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001652:	200f      	movs	r0, #15
 8001654:	f000 f80e 	bl	8001674 <HAL_InitTick>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	71fb      	strb	r3, [r7, #7]
 8001662:	e001      	b.n	8001668 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001664:	f7ff fe9c 	bl	80013a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001668:	79fb      	ldrb	r3, [r7, #7]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_InitTick+0x68>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d022      	beq.n	80016ce <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_InitTick+0x6c>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_InitTick+0x68>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001694:	fbb1 f3f3 	udiv	r3, r1, r3
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f940 	bl	8001922 <HAL_SYSTICK_Config>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10f      	bne.n	80016c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	d809      	bhi.n	80016c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ae:	2200      	movs	r2, #0
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	f04f 30ff 	mov.w	r0, #4294967295
 80016b6:	f000 f90a 	bl	80018ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_InitTick+0x70>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e007      	b.n	80016d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	e004      	b.n	80016d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e001      	b.n	80016d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000001c 	.word	0x2000001c
 80016e0:	20000014 	.word	0x20000014
 80016e4:	20000018 	.word	0x20000018

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_IncTick+0x1c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x20>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a03      	ldr	r2, [pc, #12]	; (8001704 <HAL_IncTick+0x1c>)
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000624 	.word	0x20000624
 8001708:	2000001c 	.word	0x2000001c

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_GetTick+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000624 	.word	0x20000624

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4906      	ldr	r1, [pc, #24]	; (80017b8 <__NVIC_EnableIRQ+0x34>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff90 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff2d 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff42 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff90 	bl	8001810 <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5f 	bl	80017bc <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff35 	bl	8001784 <__NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffa2 	bl	8001874 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001952:	e154      	b.n	8001bfe <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8146 	beq.w	8001bf8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d005      	beq.n	8001984 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001980:	2b02      	cmp	r3, #2
 8001982:	d130      	bne.n	80019e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80019ba:	2201      	movs	r2, #1
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	f003 0201 	and.w	r2, r3, #1
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d017      	beq.n	8001a22 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d123      	bne.n	8001a76 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	691a      	ldr	r2, [r3, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	6939      	ldr	r1, [r7, #16]
 8001a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0203 	and.w	r2, r3, #3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 80a0 	beq.w	8001bf8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab8:	4b58      	ldr	r3, [pc, #352]	; (8001c1c <HAL_GPIO_Init+0x2e0>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4a57      	ldr	r2, [pc, #348]	; (8001c1c <HAL_GPIO_Init+0x2e0>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6213      	str	r3, [r2, #32]
 8001ac4:	4b55      	ldr	r3, [pc, #340]	; (8001c1c <HAL_GPIO_Init+0x2e0>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ad0:	4a53      	ldr	r2, [pc, #332]	; (8001c20 <HAL_GPIO_Init+0x2e4>)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <HAL_GPIO_Init+0x2e8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d019      	beq.n	8001b30 <HAL_GPIO_Init+0x1f4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a4a      	ldr	r2, [pc, #296]	; (8001c28 <HAL_GPIO_Init+0x2ec>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d013      	beq.n	8001b2c <HAL_GPIO_Init+0x1f0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a49      	ldr	r2, [pc, #292]	; (8001c2c <HAL_GPIO_Init+0x2f0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_Init+0x1ec>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <HAL_GPIO_Init+0x2f4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0x1e8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <HAL_GPIO_Init+0x2f8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_Init+0x1e4>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e008      	b.n	8001b32 <HAL_GPIO_Init+0x1f6>
 8001b20:	2305      	movs	r3, #5
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x1f6>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e004      	b.n	8001b32 <HAL_GPIO_Init+0x1f6>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x1f6>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_GPIO_Init+0x1f6>
 8001b30:	2300      	movs	r3, #0
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	f002 0203 	and.w	r2, r2, #3
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b42:	4937      	ldr	r1, [pc, #220]	; (8001c20 <HAL_GPIO_Init+0x2e4>)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b50:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_GPIO_Init+0x2fc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b74:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <HAL_GPIO_Init+0x2fc>)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_GPIO_Init+0x2fc>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b9e:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <HAL_GPIO_Init+0x2fc>)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba4:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_GPIO_Init+0x2fc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_GPIO_Init+0x2fc>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_GPIO_Init+0x2fc>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bf2:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <HAL_GPIO_Init+0x2fc>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f47f aea3 	bne.w	8001954 <HAL_GPIO_Init+0x18>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001c58:	e003      	b.n	8001c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	041a      	lsls	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	619a      	str	r2, [r3, #24]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f90a 	bl	8000ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40010400 	.word	0x40010400

08001c9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	b08b      	sub	sp, #44	; 0x2c
 8001ca0:	af06      	add	r7, sp, #24
 8001ca2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0d0      	b.n	8001e50 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f006 fbd4 	bl	8008470 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fc37 	bl	8004548 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e04c      	b.n	8001d7a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	b298      	uxth	r0, r3
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3336      	adds	r3, #54	; 0x36
 8001d1e:	4602      	mov	r2, r0
 8001d20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	3303      	adds	r3, #3
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	3338      	adds	r3, #56	; 0x38
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	440b      	add	r3, r1
 8001d5a:	333c      	adds	r3, #60	; 0x3c
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3340      	adds	r3, #64	; 0x40
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	3301      	adds	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d3ad      	bcc.n	8001ce0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e044      	b.n	8001e14 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	440b      	add	r3, r1
 8001d98:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	3301      	adds	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d3b5      	bcc.n	8001d8a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	687e      	ldr	r6, [r7, #4]
 8001e26:	466d      	mov	r5, sp
 8001e28:	f106 0410 	add.w	r4, r6, #16
 8001e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	602b      	str	r3, [r5, #0]
 8001e34:	1d33      	adds	r3, r6, #4
 8001e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e38:	6838      	ldr	r0, [r7, #0]
 8001e3a:	f002 fb9f 	bl	800457c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_PCD_Start+0x16>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e016      	b.n	8001e9c <HAL_PCD_Start+0x44>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f002 fb4e 	bl	800451c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e80:	2101      	movs	r1, #1
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f006 fad6 	bl	8008434 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 fcf2 	bl	8006876 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 fcea 	bl	800688a <USB_ReadInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec0:	d102      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 faf5 	bl	80024b2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f004 fcdc 	bl	800688a <USB_ReadInterrupts>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001edc:	d112      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef0:	b292      	uxth	r2, r2
 8001ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f006 fb35 	bl	8008566 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001efc:	2100      	movs	r1, #0
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8c7 	bl	8002092 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 fcbe 	bl	800688a <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f18:	d10b      	bne.n	8001f32 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fca7 	bl	800688a <USB_ReadInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f46:	d10b      	bne.n	8001f60 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 fc90 	bl	800688a <USB_ReadInterrupts>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f74:	d126      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0204 	bic.w	r2, r2, #4
 8001f88:	b292      	uxth	r2, r2
 8001f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0208 	bic.w	r2, r2, #8
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f006 fb16 	bl	80085d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 fc5e 	bl	800688a <USB_ReadInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fd8:	d126      	bne.n	8002028 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0208 	orr.w	r2, r2, #8
 8001fec:	b292      	uxth	r2, r2
 8001fee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002004:	b292      	uxth	r2, r2
 8002006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002012:	b29a      	uxth	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0204 	orr.w	r2, r2, #4
 800201c:	b292      	uxth	r2, r2
 800201e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f006 fabe 	bl	80085a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f004 fc2c 	bl	800688a <USB_ReadInterrupts>
 8002032:	4603      	mov	r3, r0
 8002034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203c:	d10e      	bne.n	800205c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002046:	b29a      	uxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002050:	b292      	uxth	r2, r2
 8002052:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f006 fa77 	bl	800854a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f004 fc12 	bl	800688a <USB_ReadInterrupts>
 8002066:	4603      	mov	r3, r0
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002070:	d10b      	bne.n	800208a <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207a:	b29a      	uxth	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002084:	b292      	uxth	r2, r2
 8002086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_PCD_SetAddress+0x1a>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e013      	b.n	80020d4 <HAL_PCD_SetAddress+0x42>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 fbc3 	bl	8006850 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	70fb      	strb	r3, [r7, #3]
 80020ee:	460b      	mov	r3, r1
 80020f0:	803b      	strh	r3, [r7, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da0e      	bge.n	8002120 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	705a      	strb	r2, [r3, #1]
 800211e:	e00e      	b.n	800213e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0207 	and.w	r2, r3, #7
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	b2da      	uxtb	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800214a:	883a      	ldrh	r2, [r7, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	78ba      	ldrb	r2, [r7, #2]
 8002154:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	785b      	ldrb	r3, [r3, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d004      	beq.n	8002168 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002168:	78bb      	ldrb	r3, [r7, #2]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d102      	bne.n	8002174 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_PCD_EP_Open+0xa6>
 800217e:	2302      	movs	r3, #2
 8002180:	e00e      	b.n	80021a0 <HAL_PCD_EP_Open+0xc4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68f9      	ldr	r1, [r7, #12]
 8002190:	4618      	mov	r0, r3
 8002192:	f002 fa13 	bl	80045bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800219e:	7afb      	ldrb	r3, [r7, #11]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da0e      	bge.n	80021da <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	705a      	strb	r2, [r3, #1]
 80021d8:	e00e      	b.n	80021f8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 0207 	and.w	r2, r3, #7
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_PCD_EP_Close+0x6a>
 800220e:	2302      	movs	r3, #2
 8002210:	e00e      	b.n	8002230 <HAL_PCD_EP_Close+0x88>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	4618      	mov	r0, r3
 8002222:	f002 fd35 	bl	8004c90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	460b      	mov	r3, r1
 8002246:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002248:	7afb      	ldrb	r3, [r7, #11]
 800224a:	f003 0207 	and.w	r2, r3, #7
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4413      	add	r3, r2
 800225e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2200      	movs	r2, #0
 8002270:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2200      	movs	r2, #0
 8002276:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002278:	7afb      	ldrb	r3, [r7, #11]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	b2da      	uxtb	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002284:	7afb      	ldrb	r3, [r7, #11]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6979      	ldr	r1, [r7, #20]
 8002294:	4618      	mov	r0, r3
 8002296:	f002 fee7 	bl	8005068 <USB_EPStartXfer>
 800229a:	e005      	b.n	80022a8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6979      	ldr	r1, [r7, #20]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fee0 	bl	8005068 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	f003 0207 	and.w	r2, r3, #7
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022d4:	681b      	ldr	r3, [r3, #0]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	460b      	mov	r3, r1
 80022ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2201      	movs	r2, #1
 800232a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800232c:	7afb      	ldrb	r3, [r7, #11]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	b2da      	uxtb	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002338:	7afb      	ldrb	r3, [r7, #11]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6979      	ldr	r1, [r7, #20]
 8002348:	4618      	mov	r0, r3
 800234a:	f002 fe8d 	bl	8005068 <USB_EPStartXfer>
 800234e:	e005      	b.n	800235c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6979      	ldr	r1, [r7, #20]
 8002356:	4618      	mov	r0, r3
 8002358:	f002 fe86 	bl	8005068 <USB_EPStartXfer>
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 0207 	and.w	r2, r3, #7
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d901      	bls.n	8002384 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e03e      	b.n	8002402 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da0e      	bge.n	80023aa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	705a      	strb	r2, [r3, #1]
 80023a8:	e00c      	b.n	80023c4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_PCD_EP_SetStall+0x7e>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e00e      	b.n	8002402 <HAL_PCD_EP_SetStall+0x9c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68f9      	ldr	r1, [r7, #12]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 f92f 	bl	8006656 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	f003 020f 	and.w	r2, r3, #15
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	d901      	bls.n	8002428 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e040      	b.n	80024aa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800242c:	2b00      	cmp	r3, #0
 800242e:	da0e      	bge.n	800244e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	705a      	strb	r2, [r3, #1]
 800244c:	e00e      	b.n	800246c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	f003 0207 	and.w	r2, r3, #7
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	b2da      	uxtb	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_PCD_EP_ClrStall+0x82>
 8002488:	2302      	movs	r3, #2
 800248a:	e00e      	b.n	80024aa <HAL_PCD_EP_ClrStall+0xa0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	4618      	mov	r0, r3
 800249c:	f004 f92b 	bl	80066f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b08e      	sub	sp, #56	; 0x38
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024ba:	e2ec      	b.n	8002a96 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024c4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80024d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 8161 	bne.w	800279e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d152      	bne.n	800258c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f6:	81fb      	strh	r3, [r7, #14]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	89fb      	ldrh	r3, [r7, #14]
 80024fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002506:	b29b      	uxth	r3, r3
 8002508:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3328      	adds	r3, #40	; 0x28
 800250e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	3302      	adds	r3, #2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	441a      	add	r2, r3
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800254a:	2100      	movs	r1, #0
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f005 ffe2 	bl	8008516 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 829b 	beq.w	8002a96 <PCD_EP_ISR_Handler+0x5e4>
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f040 8296 	bne.w	8002a96 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002576:	b2da      	uxtb	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b292      	uxth	r2, r2
 800257e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800258a:	e284      	b.n	8002a96 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800259c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d034      	beq.n	8002610 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	3306      	adds	r3, #6
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f004 f9a4 	bl	8006932 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025f6:	4013      	ands	r3, r2
 80025f8:	823b      	strh	r3, [r7, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	8a3a      	ldrh	r2, [r7, #16]
 8002600:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002604:	b292      	uxth	r2, r2
 8002606:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f005 ff57 	bl	80084bc <HAL_PCD_SetupStageCallback>
 800260e:	e242      	b.n	8002a96 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002610:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002614:	2b00      	cmp	r3, #0
 8002616:	f280 823e 	bge.w	8002a96 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29a      	uxth	r2, r3
 8002622:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002626:	4013      	ands	r3, r2
 8002628:	83bb      	strh	r3, [r7, #28]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	8bba      	ldrh	r2, [r7, #28]
 8002630:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002634:	b292      	uxth	r2, r2
 8002636:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002640:	b29b      	uxth	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	3306      	adds	r3, #6
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d019      	beq.n	80026a0 <PCD_EP_ISR_Handler+0x1ee>
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d015      	beq.n	80026a0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	6959      	ldr	r1, [r3, #20]
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002684:	b29b      	uxth	r3, r3
 8002686:	f004 f954 	bl	8006932 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	441a      	add	r2, r3
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002698:	2100      	movs	r1, #0
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f005 ff20 	bl	80084e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f040 81f2 	bne.w	8002a96 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d112      	bne.n	8002700 <PCD_EP_ISR_Handler+0x24e>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	801a      	strh	r2, [r3, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	801a      	strh	r2, [r3, #0]
 80026fe:	e02f      	b.n	8002760 <PCD_EP_ISR_Handler+0x2ae>
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b3e      	cmp	r3, #62	; 0x3e
 8002706:	d813      	bhi.n	8002730 <PCD_EP_ISR_Handler+0x27e>
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <PCD_EP_ISR_Handler+0x270>
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	3301      	adds	r3, #1
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	b29b      	uxth	r3, r3
 8002726:	029b      	lsls	r3, r3, #10
 8002728:	b29a      	uxth	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	e017      	b.n	8002760 <PCD_EP_ISR_Handler+0x2ae>
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <PCD_EP_ISR_Handler+0x298>
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	3b01      	subs	r3, #1
 8002748:	633b      	str	r3, [r7, #48]	; 0x30
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	b29b      	uxth	r3, r3
 800274e:	029b      	lsls	r3, r3, #10
 8002750:	b29b      	uxth	r3, r3
 8002752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275a:	b29a      	uxth	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800276c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002770:	827b      	strh	r3, [r7, #18]
 8002772:	8a7b      	ldrh	r3, [r7, #18]
 8002774:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002778:	827b      	strh	r3, [r7, #18]
 800277a:	8a7b      	ldrh	r3, [r7, #18]
 800277c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002780:	827b      	strh	r3, [r7, #18]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	8a7b      	ldrh	r3, [r7, #18]
 8002788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800278c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002798:	b29b      	uxth	r3, r3
 800279a:	8013      	strh	r3, [r2, #0]
 800279c:	e17b      	b.n	8002a96 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f280 80ea 	bge.w	800298e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027d0:	4013      	ands	r3, r2
 80027d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80027e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027e8:	b292      	uxth	r2, r2
 80027ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027ec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	7b1b      	ldrb	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d122      	bne.n	8002850 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002812:	b29b      	uxth	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	3306      	adds	r3, #6
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002832:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002834:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8087 	beq.w	800294a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	6959      	ldr	r1, [r3, #20]
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	88da      	ldrh	r2, [r3, #6]
 8002848:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800284a:	f004 f872 	bl	8006932 <USB_ReadPMA>
 800284e:	e07c      	b.n	800294a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	78db      	ldrb	r3, [r3, #3]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d108      	bne.n	800286a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002858:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800285a:	461a      	mov	r2, r3
 800285c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f927 	bl	8002ab2 <HAL_PCD_EP_DB_Receive>
 8002864:	4603      	mov	r3, r0
 8002866:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002868:	e06f      	b.n	800294a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002884:	847b      	strh	r3, [r7, #34]	; 0x22
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	441a      	add	r2, r3
 8002894:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800289a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800289e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d021      	beq.n	8002908 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	3302      	adds	r3, #2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d02a      	beq.n	800294a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	6959      	ldr	r1, [r3, #20]
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	891a      	ldrh	r2, [r3, #8]
 8002900:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002902:	f004 f816 	bl	8006932 <USB_ReadPMA>
 8002906:	e020      	b.n	800294a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002910:	b29b      	uxth	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	3306      	adds	r3, #6
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	4413      	add	r3, r2
 8002926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002930:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002932:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	6959      	ldr	r1, [r3, #20]
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	895a      	ldrh	r2, [r3, #10]
 8002944:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002946:	f003 fff4 	bl	8006932 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002950:	441a      	add	r2, r3
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800295c:	441a      	add	r2, r3
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <PCD_EP_ISR_Handler+0x4c2>
 800296a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	429a      	cmp	r2, r3
 8002972:	d206      	bcs.n	8002982 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f005 fdb0 	bl	80084e0 <HAL_PCD_DataOutStageCallback>
 8002980:	e005      	b.n	800298e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002988:	4618      	mov	r0, r3
 800298a:	f002 fb6d 	bl	8005068 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800298e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002994:	2b00      	cmp	r3, #0
 8002996:	d07e      	beq.n	8002a96 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002998:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	843b      	strh	r3, [r7, #32]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	441a      	add	r2, r3
 80029d6:	8c3b      	ldrh	r3, [r7, #32]
 80029d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	78db      	ldrb	r3, [r3, #3]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d00c      	beq.n	8002a06 <PCD_EP_ISR_Handler+0x554>
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	78db      	ldrb	r3, [r3, #3]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d146      	bne.n	8002a8a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d141      	bne.n	8002a8a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	8bfb      	ldrh	r3, [r7, #30]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d906      	bls.n	8002a48 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	8bfb      	ldrh	r3, [r7, #30]
 8002a40:	1ad2      	subs	r2, r2, r3
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	619a      	str	r2, [r3, #24]
 8002a46:	e002      	b.n	8002a4e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f005 fd5a 	bl	8008516 <HAL_PCD_DataInStageCallback>
 8002a62:	e018      	b.n	8002a96 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	8bfb      	ldrh	r3, [r7, #30]
 8002a6a:	441a      	add	r2, r3
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	8bfb      	ldrh	r3, [r7, #30]
 8002a76:	441a      	add	r2, r3
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 faf0 	bl	8005068 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a88:	e005      	b.n	8002a96 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f91b 	bl	8002ccc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	b21b      	sxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f6ff ad0a 	blt.w	80024bc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3738      	adds	r7, #56	; 0x38
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b088      	sub	sp, #32
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	4613      	mov	r3, r2
 8002abe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d07e      	beq.n	8002bc8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	3302      	adds	r3, #2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	8b7b      	ldrh	r3, [r7, #26]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d306      	bcc.n	8002b0c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	8b7b      	ldrh	r3, [r7, #26]
 8002b04:	1ad2      	subs	r2, r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	619a      	str	r2, [r3, #24]
 8002b0a:	e002      	b.n	8002b12 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d123      	bne.n	8002b62 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b34:	833b      	strh	r3, [r7, #24]
 8002b36:	8b3b      	ldrh	r3, [r7, #24]
 8002b38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b3c:	833b      	strh	r3, [r7, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	441a      	add	r2, r3
 8002b4c:	8b3b      	ldrh	r3, [r7, #24]
 8002b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01f      	beq.n	8002bac <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b86:	82fb      	strh	r3, [r7, #22]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	441a      	add	r2, r3
 8002b96:	8afb      	ldrh	r3, [r7, #22]
 8002b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bac:	8b7b      	ldrh	r3, [r7, #26]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8087 	beq.w	8002cc2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6959      	ldr	r1, [r3, #20]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	891a      	ldrh	r2, [r3, #8]
 8002bc0:	8b7b      	ldrh	r3, [r7, #26]
 8002bc2:	f003 feb6 	bl	8006932 <USB_ReadPMA>
 8002bc6:	e07c      	b.n	8002cc2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3306      	adds	r3, #6
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	8b7b      	ldrh	r3, [r7, #26]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d306      	bcc.n	8002c0a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	8b7b      	ldrh	r3, [r7, #26]
 8002c02:	1ad2      	subs	r2, r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	619a      	str	r2, [r3, #24]
 8002c08:	e002      	b.n	8002c10 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d123      	bne.n	8002c60 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	83fb      	strh	r3, [r7, #30]
 8002c34:	8bfb      	ldrh	r3, [r7, #30]
 8002c36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c3a:	83fb      	strh	r3, [r7, #30]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	441a      	add	r2, r3
 8002c4a:	8bfb      	ldrh	r3, [r7, #30]
 8002c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d11f      	bne.n	8002caa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c84:	83bb      	strh	r3, [r7, #28]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	441a      	add	r2, r3
 8002c94:	8bbb      	ldrh	r3, [r7, #28]
 8002c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002caa:	8b7b      	ldrh	r3, [r7, #26]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6959      	ldr	r1, [r3, #20]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	895a      	ldrh	r2, [r3, #10]
 8002cbc:	8b7b      	ldrh	r3, [r7, #26]
 8002cbe:	f003 fe38 	bl	8006932 <USB_ReadPMA>
    }
  }

  return count;
 8002cc2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b0a2      	sub	sp, #136	; 0x88
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 81c7 	beq.w	8003074 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d907      	bls.n	8002d2e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d26:	1ad2      	subs	r2, r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	619a      	str	r2, [r3, #24]
 8002d2c:	e002      	b.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f040 80b9 	bne.w	8002eb0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	785b      	ldrb	r3, [r3, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d126      	bne.n	8002d94 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	4413      	add	r3, r2
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	011a      	lsls	r2, r3, #4
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	4413      	add	r3, r2
 8002d68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	801a      	strh	r2, [r3, #0]
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	801a      	strh	r2, [r3, #0]
 8002d92:	e01a      	b.n	8002dca <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	785b      	ldrb	r3, [r3, #1]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d116      	bne.n	8002dca <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	4413      	add	r3, r2
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	011a      	lsls	r2, r3, #4
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	623b      	str	r3, [r7, #32]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	785b      	ldrb	r3, [r3, #1]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d126      	bne.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4413      	add	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	011a      	lsls	r2, r3, #4
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	801a      	strh	r2, [r3, #0]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	801a      	strh	r2, [r3, #0]
 8002e24:	e017      	b.n	8002e56 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	785b      	ldrb	r3, [r3, #1]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d113      	bne.n	8002e56 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	623b      	str	r3, [r7, #32]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	011a      	lsls	r2, r3, #4
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2200      	movs	r2, #0
 8002e54:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f005 fb5a 	bl	8008516 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 82d4 	beq.w	8003416 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e88:	827b      	strh	r3, [r7, #18]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	441a      	add	r2, r3
 8002e98:	8a7b      	ldrh	r3, [r7, #18]
 8002e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	8013      	strh	r3, [r2, #0]
 8002eae:	e2b2      	b.n	8003416 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d021      	beq.n	8002efe <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	441a      	add	r2, r3
 8002ee6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	f040 8286 	bne.w	8003416 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f12:	441a      	add	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f20:	441a      	add	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d309      	bcc.n	8002f46 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	6a1a      	ldr	r2, [r3, #32]
 8002f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f3e:	1ad2      	subs	r2, r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	621a      	str	r2, [r3, #32]
 8002f44:	e015      	b.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d107      	bne.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002f4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f5c:	e009      	b.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d155      	bne.n	8003026 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	4413      	add	r3, r2
 8002f90:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	011a      	lsls	r2, r3, #4
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d112      	bne.n	8002fce <HAL_PCD_EP_DB_Transmit+0x302>
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	801a      	strh	r2, [r3, #0]
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fca:	801a      	strh	r2, [r3, #0]
 8002fcc:	e047      	b.n	800305e <HAL_PCD_EP_DB_Transmit+0x392>
 8002fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd0:	2b3e      	cmp	r3, #62	; 0x3e
 8002fd2:	d811      	bhi.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_PCD_EP_DB_Transmit+0x31e>
 8002fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	029b      	lsls	r3, r3, #10
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff4:	801a      	strh	r2, [r3, #0]
 8002ff6:	e032      	b.n	800305e <HAL_PCD_EP_DB_Transmit+0x392>
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <HAL_PCD_EP_DB_Transmit+0x342>
 8003008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300a:	3b01      	subs	r3, #1
 800300c:	64bb      	str	r3, [r7, #72]	; 0x48
 800300e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003010:	b29b      	uxth	r3, r3
 8003012:	029b      	lsls	r3, r3, #10
 8003014:	b29b      	uxth	r3, r3
 8003016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800301a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301e:	b29a      	uxth	r2, r3
 8003020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003022:	801a      	strh	r2, [r3, #0]
 8003024:	e01b      	b.n	800305e <HAL_PCD_EP_DB_Transmit+0x392>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	785b      	ldrb	r3, [r3, #1]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d117      	bne.n	800305e <HAL_PCD_EP_DB_Transmit+0x392>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	643b      	str	r3, [r7, #64]	; 0x40
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800303c:	b29b      	uxth	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003042:	4413      	add	r3, r2
 8003044:	643b      	str	r3, [r7, #64]	; 0x40
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	011a      	lsls	r2, r3, #4
 800304c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304e:	4413      	add	r3, r2
 8003050:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003058:	b29a      	uxth	r2, r3
 800305a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800305c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	6959      	ldr	r1, [r3, #20]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	891a      	ldrh	r2, [r3, #8]
 800306a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306c:	b29b      	uxth	r3, r3
 800306e:	f003 fc1b 	bl	80068a8 <USB_WritePMA>
 8003072:	e1d0      	b.n	8003416 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800307c:	b29b      	uxth	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	3306      	adds	r3, #6
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800309c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d307      	bcc.n	80030bc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	699a      	ldr	r2, [r3, #24]
 80030b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030b4:	1ad2      	subs	r2, r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	619a      	str	r2, [r3, #24]
 80030ba:	e002      	b.n	80030c2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2200      	movs	r2, #0
 80030c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 80c4 	bne.w	8003254 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d126      	bne.n	8003122 <HAL_PCD_EP_DB_Transmit+0x456>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e8:	4413      	add	r3, r2
 80030ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	011a      	lsls	r2, r3, #4
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f4:	4413      	add	r3, r2
 80030f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80030fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003106:	b29a      	uxth	r2, r3
 8003108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800310a:	801a      	strh	r2, [r3, #0]
 800310c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311a:	b29a      	uxth	r2, r3
 800311c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800311e:	801a      	strh	r2, [r3, #0]
 8003120:	e01a      	b.n	8003158 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d116      	bne.n	8003158 <HAL_PCD_EP_DB_Transmit+0x48c>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	677b      	str	r3, [r7, #116]	; 0x74
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313e:	4413      	add	r3, r2
 8003140:	677b      	str	r3, [r7, #116]	; 0x74
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	011a      	lsls	r2, r3, #4
 8003148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800314a:	4413      	add	r3, r2
 800314c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003150:	673b      	str	r3, [r7, #112]	; 0x70
 8003152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003154:	2200      	movs	r2, #0
 8003156:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	67bb      	str	r3, [r7, #120]	; 0x78
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d12f      	bne.n	80031c6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800317e:	4413      	add	r3, r2
 8003180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	011a      	lsls	r2, r3, #4
 800318a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800318e:	4413      	add	r3, r2
 8003190:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031bc:	b29a      	uxth	r2, r3
 80031be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c2:	801a      	strh	r2, [r3, #0]
 80031c4:	e017      	b.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	785b      	ldrb	r3, [r3, #1]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d113      	bne.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031dc:	4413      	add	r3, r2
 80031de:	67bb      	str	r3, [r7, #120]	; 0x78
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	011a      	lsls	r2, r3, #4
 80031e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031e8:	4413      	add	r3, r2
 80031ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031f2:	2200      	movs	r2, #0
 80031f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	4619      	mov	r1, r3
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f005 f98a 	bl	8008516 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003208:	2b00      	cmp	r3, #0
 800320a:	f040 8104 	bne.w	8003416 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003228:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800323e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800324a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324e:	b29b      	uxth	r3, r3
 8003250:	8013      	strh	r3, [r2, #0]
 8003252:	e0e0      	b.n	8003416 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d121      	bne.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003278:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	441a      	add	r2, r3
 800328a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800328e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003296:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800329a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329e:	b29b      	uxth	r3, r3
 80032a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	f040 80b4 	bne.w	8003416 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032b6:	441a      	add	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032c4:	441a      	add	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	6a1a      	ldr	r2, [r3, #32]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d309      	bcc.n	80032ea <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e2:	1ad2      	subs	r2, r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	621a      	str	r2, [r3, #32]
 80032e8:	e015      	b.n	8003316 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80032f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003300:	e009      	b.n	8003316 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2200      	movs	r2, #0
 800330c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	667b      	str	r3, [r7, #100]	; 0x64
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	785b      	ldrb	r3, [r3, #1]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d155      	bne.n	80033d0 <HAL_PCD_EP_DB_Transmit+0x704>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003332:	b29b      	uxth	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003338:	4413      	add	r3, r2
 800333a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	011a      	lsls	r2, r3, #4
 8003342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003344:	4413      	add	r3, r2
 8003346:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800334a:	65bb      	str	r3, [r7, #88]	; 0x58
 800334c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334e:	2b00      	cmp	r3, #0
 8003350:	d112      	bne.n	8003378 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800335c:	b29a      	uxth	r2, r3
 800335e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003360:	801a      	strh	r2, [r3, #0]
 8003362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800336c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003370:	b29a      	uxth	r2, r3
 8003372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003374:	801a      	strh	r2, [r3, #0]
 8003376:	e044      	b.n	8003402 <HAL_PCD_EP_DB_Transmit+0x736>
 8003378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800337a:	2b3e      	cmp	r3, #62	; 0x3e
 800337c:	d811      	bhi.n	80033a2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800337e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	657b      	str	r3, [r7, #84]	; 0x54
 8003384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800338e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003390:	3301      	adds	r3, #1
 8003392:	657b      	str	r3, [r7, #84]	; 0x54
 8003394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003396:	b29b      	uxth	r3, r3
 8003398:	029b      	lsls	r3, r3, #10
 800339a:	b29a      	uxth	r2, r3
 800339c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339e:	801a      	strh	r2, [r3, #0]
 80033a0:	e02f      	b.n	8003402 <HAL_PCD_EP_DB_Transmit+0x736>
 80033a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	657b      	str	r3, [r7, #84]	; 0x54
 80033a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80033b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b4:	3b01      	subs	r3, #1
 80033b6:	657b      	str	r3, [r7, #84]	; 0x54
 80033b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	029b      	lsls	r3, r3, #10
 80033be:	b29b      	uxth	r3, r3
 80033c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	e018      	b.n	8003402 <HAL_PCD_EP_DB_Transmit+0x736>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	785b      	ldrb	r3, [r3, #1]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d114      	bne.n	8003402 <HAL_PCD_EP_DB_Transmit+0x736>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e6:	4413      	add	r3, r2
 80033e8:	667b      	str	r3, [r7, #100]	; 0x64
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	011a      	lsls	r2, r3, #4
 80033f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033f2:	4413      	add	r3, r2
 80033f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033f8:	663b      	str	r3, [r7, #96]	; 0x60
 80033fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003400:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	6959      	ldr	r1, [r3, #20]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	895a      	ldrh	r2, [r3, #10]
 800340e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003410:	b29b      	uxth	r3, r3
 8003412:	f003 fa49 	bl	80068a8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003430:	823b      	strh	r3, [r7, #16]
 8003432:	8a3b      	ldrh	r3, [r7, #16]
 8003434:	f083 0310 	eor.w	r3, r3, #16
 8003438:	823b      	strh	r3, [r7, #16]
 800343a:	8a3b      	ldrh	r3, [r7, #16]
 800343c:	f083 0320 	eor.w	r3, r3, #32
 8003440:	823b      	strh	r3, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	441a      	add	r2, r3
 8003450:	8a3b      	ldrh	r3, [r7, #16]
 8003452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800345a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003462:	b29b      	uxth	r3, r3
 8003464:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3788      	adds	r7, #136	; 0x88
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	817b      	strh	r3, [r7, #10]
 800347e:	4613      	mov	r3, r2
 8003480:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348e:	897b      	ldrh	r3, [r7, #10]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4413      	add	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	e009      	b.n	80034ba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034a6:	897a      	ldrh	r2, [r7, #10]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034ba:	893b      	ldrh	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2200      	movs	r2, #0
 80034c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	80da      	strh	r2, [r3, #6]
 80034ce:	e00b      	b.n	80034e8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2201      	movs	r2, #1
 80034d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	b29a      	uxth	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e31d      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003506:	4b94      	ldr	r3, [pc, #592]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003510:	4b91      	ldr	r3, [pc, #580]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003518:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d07b      	beq.n	800361e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d006      	beq.n	800353a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d10f      	bne.n	8003552 <HAL_RCC_OscConfig+0x5e>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003538:	d10b      	bne.n	8003552 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353a:	4b87      	ldr	r3, [pc, #540]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d06a      	beq.n	800361c <HAL_RCC_OscConfig+0x128>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d166      	bne.n	800361c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e2f7      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d106      	bne.n	8003568 <HAL_RCC_OscConfig+0x74>
 800355a:	4b7f      	ldr	r3, [pc, #508]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a7e      	ldr	r2, [pc, #504]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e02d      	b.n	80035c4 <HAL_RCC_OscConfig+0xd0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10c      	bne.n	800358a <HAL_RCC_OscConfig+0x96>
 8003570:	4b79      	ldr	r3, [pc, #484]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a78      	ldr	r2, [pc, #480]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a75      	ldr	r2, [pc, #468]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e01c      	b.n	80035c4 <HAL_RCC_OscConfig+0xd0>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b05      	cmp	r3, #5
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0xb8>
 8003592:	4b71      	ldr	r3, [pc, #452]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a70      	ldr	r2, [pc, #448]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b6e      	ldr	r3, [pc, #440]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a6d      	ldr	r2, [pc, #436]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0xd0>
 80035ac:	4b6a      	ldr	r3, [pc, #424]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a69      	ldr	r2, [pc, #420]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b67      	ldr	r3, [pc, #412]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a66      	ldr	r2, [pc, #408]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe f89e 	bl	800170c <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe f89a 	bl	800170c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e2ad      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035e6:	4b5c      	ldr	r3, [pc, #368]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0xe0>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe f88a 	bl	800170c <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe f886 	bl	800170c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e299      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800360e:	4b52      	ldr	r3, [pc, #328]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x108>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d05a      	beq.n	80036e0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b04      	cmp	r3, #4
 800362e:	d005      	beq.n	800363c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d119      	bne.n	800366a <HAL_RCC_OscConfig+0x176>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d116      	bne.n	800366a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363c:	4b46      	ldr	r3, [pc, #280]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_OscConfig+0x160>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d001      	beq.n	8003654 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e276      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b40      	ldr	r3, [pc, #256]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	493d      	ldr	r1, [pc, #244]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003668:	e03a      	b.n	80036e0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d020      	beq.n	80036b4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003672:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCC_OscConfig+0x268>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fe f848 	bl	800170c <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003680:	f7fe f844 	bl	800170c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e257      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003692:	4b31      	ldr	r3, [pc, #196]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	492a      	ldr	r1, [pc, #168]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
 80036b2:	e015      	b.n	80036e0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b4:	4b29      	ldr	r3, [pc, #164]	; (800375c <HAL_RCC_OscConfig+0x268>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fe f827 	bl	800170c <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c2:	f7fe f823 	bl	800170c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e236      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036d4:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f0      	bne.n	80036c2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80b8 	beq.w	800385e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d170      	bne.n	80037d6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036f4:	4b18      	ldr	r3, [pc, #96]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_OscConfig+0x218>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e21a      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003718:	429a      	cmp	r2, r3
 800371a:	d921      	bls.n	8003760 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fc19 	bl	8003f58 <RCC_SetFlashLatencyFromMSIRange>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e208      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4906      	ldr	r1, [pc, #24]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	4901      	ldr	r1, [pc, #4]	; (8003758 <HAL_RCC_OscConfig+0x264>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
 8003756:	e020      	b.n	800379a <HAL_RCC_OscConfig+0x2a6>
 8003758:	40023800 	.word	0x40023800
 800375c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003760:	4ba4      	ldr	r3, [pc, #656]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	49a1      	ldr	r1, [pc, #644]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003772:	4ba0      	ldr	r3, [pc, #640]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	061b      	lsls	r3, r3, #24
 8003780:	499c      	ldr	r1, [pc, #624]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003782:	4313      	orrs	r3, r2
 8003784:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fbe4 	bl	8003f58 <RCC_SetFlashLatencyFromMSIRange>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e1d3      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	0b5b      	lsrs	r3, r3, #13
 80037a0:	3301      	adds	r3, #1
 80037a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037aa:	4a92      	ldr	r2, [pc, #584]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 80037ac:	6892      	ldr	r2, [r2, #8]
 80037ae:	0912      	lsrs	r2, r2, #4
 80037b0:	f002 020f 	and.w	r2, r2, #15
 80037b4:	4990      	ldr	r1, [pc, #576]	; (80039f8 <HAL_RCC_OscConfig+0x504>)
 80037b6:	5c8a      	ldrb	r2, [r1, r2]
 80037b8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037ba:	4a90      	ldr	r2, [pc, #576]	; (80039fc <HAL_RCC_OscConfig+0x508>)
 80037bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037be:	4b90      	ldr	r3, [pc, #576]	; (8003a00 <HAL_RCC_OscConfig+0x50c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd ff56 	bl	8001674 <HAL_InitTick>
 80037c8:	4603      	mov	r3, r0
 80037ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d045      	beq.n	800385e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	e1b5      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d029      	beq.n	8003832 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037de:	4b89      	ldr	r3, [pc, #548]	; (8003a04 <HAL_RCC_OscConfig+0x510>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd ff92 	bl	800170c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037ec:	f7fd ff8e 	bl	800170c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e1a1      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037fe:	4b7d      	ldr	r3, [pc, #500]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800380a:	4b7a      	ldr	r3, [pc, #488]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4977      	ldr	r1, [pc, #476]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800381c:	4b75      	ldr	r3, [pc, #468]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	061b      	lsls	r3, r3, #24
 800382a:	4972      	ldr	r1, [pc, #456]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003832:	4b74      	ldr	r3, [pc, #464]	; (8003a04 <HAL_RCC_OscConfig+0x510>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fd ff68 	bl	800170c <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003840:	f7fd ff64 	bl	800170c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e177      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003852:	4b68      	ldr	r3, [pc, #416]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d030      	beq.n	80038cc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d016      	beq.n	80038a0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003872:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <HAL_RCC_OscConfig+0x514>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003878:	f7fd ff48 	bl	800170c <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003880:	f7fd ff44 	bl	800170c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e157      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003892:	4b58      	ldr	r3, [pc, #352]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x38c>
 800389e:	e015      	b.n	80038cc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a0:	4b59      	ldr	r3, [pc, #356]	; (8003a08 <HAL_RCC_OscConfig+0x514>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a6:	f7fd ff31 	bl	800170c <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ae:	f7fd ff2d 	bl	800170c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e140      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038c0:	4b4c      	ldr	r3, [pc, #304]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80b5 	beq.w	8003a44 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038de:	4b45      	ldr	r3, [pc, #276]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ea:	4b42      	ldr	r3, [pc, #264]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	4a41      	ldr	r2, [pc, #260]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6253      	str	r3, [r2, #36]	; 0x24
 80038f6:	4b3f      	ldr	r3, [pc, #252]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003902:	2301      	movs	r3, #1
 8003904:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <HAL_RCC_OscConfig+0x518>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d118      	bne.n	8003944 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003912:	4b3e      	ldr	r3, [pc, #248]	; (8003a0c <HAL_RCC_OscConfig+0x518>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a3d      	ldr	r2, [pc, #244]	; (8003a0c <HAL_RCC_OscConfig+0x518>)
 8003918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391e:	f7fd fef5 	bl	800170c <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003926:	f7fd fef1 	bl	800170c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b64      	cmp	r3, #100	; 0x64
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e104      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	4b34      	ldr	r3, [pc, #208]	; (8003a0c <HAL_RCC_OscConfig+0x518>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x466>
 800394c:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 800394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003950:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003956:	6353      	str	r3, [r2, #52]	; 0x34
 8003958:	e02d      	b.n	80039b6 <HAL_RCC_OscConfig+0x4c2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0x488>
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003966:	4a23      	ldr	r2, [pc, #140]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800396c:	6353      	str	r3, [r2, #52]	; 0x34
 800396e:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	4a20      	ldr	r2, [pc, #128]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003974:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003978:	6353      	str	r3, [r2, #52]	; 0x34
 800397a:	e01c      	b.n	80039b6 <HAL_RCC_OscConfig+0x4c2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b05      	cmp	r3, #5
 8003982:	d10c      	bne.n	800399e <HAL_RCC_OscConfig+0x4aa>
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003988:	4a1a      	ldr	r2, [pc, #104]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 800398a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398e:	6353      	str	r3, [r2, #52]	; 0x34
 8003990:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 8003996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399a:	6353      	str	r3, [r2, #52]	; 0x34
 800399c:	e00b      	b.n	80039b6 <HAL_RCC_OscConfig+0x4c2>
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 80039a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a2:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 80039a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a8:	6353      	str	r3, [r2, #52]	; 0x34
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 80039ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ae:	4a11      	ldr	r2, [pc, #68]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 80039b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039b4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d015      	beq.n	80039ea <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fd fea5 	bl	800170c <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c6:	f7fd fea1 	bl	800170c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0b2      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_OscConfig+0x500>)
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ee      	beq.n	80039c6 <HAL_RCC_OscConfig+0x4d2>
 80039e8:	e023      	b.n	8003a32 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ea:	f7fd fe8f 	bl	800170c <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039f0:	e019      	b.n	8003a26 <HAL_RCC_OscConfig+0x532>
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	08009bcc 	.word	0x08009bcc
 80039fc:	20000014 	.word	0x20000014
 8003a00:	20000018 	.word	0x20000018
 8003a04:	42470020 	.word	0x42470020
 8003a08:	42470680 	.word	0x42470680
 8003a0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fd fe7c 	bl	800170c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e08d      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a26:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_RCC_OscConfig+0x658>)
 8003a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ee      	bne.n	8003a10 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a32:	7ffb      	ldrb	r3, [r7, #31]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a38:	4b44      	ldr	r3, [pc, #272]	; (8003b4c <HAL_RCC_OscConfig+0x658>)
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	4a43      	ldr	r2, [pc, #268]	; (8003b4c <HAL_RCC_OscConfig+0x658>)
 8003a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a42:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d079      	beq.n	8003b40 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	d056      	beq.n	8003b00 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d13b      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5a:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <HAL_RCC_OscConfig+0x65c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fd fe54 	bl	800170c <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fd fe50 	bl	800170c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e063      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a7a:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_RCC_OscConfig+0x658>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a86:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <HAL_RCC_OscConfig+0x658>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	4319      	orrs	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	492b      	ldr	r1, [pc, #172]	; (8003b4c <HAL_RCC_OscConfig+0x658>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa4:	4b2a      	ldr	r3, [pc, #168]	; (8003b50 <HAL_RCC_OscConfig+0x65c>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fd fe2f 	bl	800170c <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fd fe2b 	bl	800170c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e03e      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ac4:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <HAL_RCC_OscConfig+0x658>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x5be>
 8003ad0:	e036      	b.n	8003b40 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad2:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <HAL_RCC_OscConfig+0x65c>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fd fe18 	bl	800170c <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fd fe14 	bl	800170c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e027      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_RCC_OscConfig+0x658>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x5ec>
 8003afe:	e01f      	b.n	8003b40 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e01a      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_RCC_OscConfig+0x658>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d10d      	bne.n	8003b3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d106      	bne.n	8003b3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	42470060 	.word	0x42470060

08003b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e11a      	b.n	8003d9e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b68:	4b8f      	ldr	r3, [pc, #572]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d919      	bls.n	8003baa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d105      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x34>
 8003b7c:	4b8a      	ldr	r3, [pc, #552]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a89      	ldr	r2, [pc, #548]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003b82:	f043 0304 	orr.w	r3, r3, #4
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b87      	ldr	r3, [pc, #540]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 0201 	bic.w	r2, r3, #1
 8003b90:	4985      	ldr	r1, [pc, #532]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b98:	4b83      	ldr	r3, [pc, #524]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d001      	beq.n	8003baa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0f9      	b.n	8003d9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb6:	4b7d      	ldr	r3, [pc, #500]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	497a      	ldr	r1, [pc, #488]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 808e 	beq.w	8003cf2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bde:	4b73      	ldr	r3, [pc, #460]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d121      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0d7      	b.n	8003d9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d115      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0cb      	b.n	8003d9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0e:	4b67      	ldr	r3, [pc, #412]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e0bf      	b.n	8003d9e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c1e:	4b63      	ldr	r3, [pc, #396]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0b7      	b.n	8003d9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2e:	4b5f      	ldr	r3, [pc, #380]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	495c      	ldr	r1, [pc, #368]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c40:	f7fd fd64 	bl	800170c <HAL_GetTick>
 8003c44:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d112      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c50:	f7fd fd5c 	bl	800170c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e09b      	b.n	8003d9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c66:	4b51      	ldr	r3, [pc, #324]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d1ee      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xfc>
 8003c72:	e03e      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d112      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7e:	f7fd fd45 	bl	800170c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e084      	b.n	8003d9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c94:	4b45      	ldr	r3, [pc, #276]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 030c 	and.w	r3, r3, #12
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	d1ee      	bne.n	8003c7e <HAL_RCC_ClockConfig+0x12a>
 8003ca0:	e027      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d11d      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cac:	f7fd fd2e 	bl	800170c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e06d      	b.n	8003d9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cc2:	4b3a      	ldr	r3, [pc, #232]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d1ee      	bne.n	8003cac <HAL_RCC_ClockConfig+0x158>
 8003cce:	e010      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fd fd1c 	bl	800170c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e05b      	b.n	8003d9e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ce6:	4b31      	ldr	r3, [pc, #196]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1ee      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf2:	4b2d      	ldr	r3, [pc, #180]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d219      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d105      	bne.n	8003d12 <HAL_RCC_ClockConfig+0x1be>
 8003d06:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a27      	ldr	r2, [pc, #156]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 0201 	bic.w	r2, r3, #1
 8003d1a:	4923      	ldr	r1, [pc, #140]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <HAL_RCC_ClockConfig+0x254>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e034      	b.n	8003d9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d40:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4917      	ldr	r1, [pc, #92]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5e:	4b13      	ldr	r3, [pc, #76]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	490f      	ldr	r1, [pc, #60]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d72:	f000 f823 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <HAL_RCC_ClockConfig+0x258>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	490b      	ldr	r1, [pc, #44]	; (8003db0 <HAL_RCC_ClockConfig+0x25c>)
 8003d84:	5ccb      	ldrb	r3, [r1, r3]
 8003d86:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <HAL_RCC_ClockConfig+0x264>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd fc6e 	bl	8001674 <HAL_InitTick>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023c00 	.word	0x40023c00
 8003dac:	40023800 	.word	0x40023800
 8003db0:	08009bcc 	.word	0x08009bcc
 8003db4:	20000014 	.word	0x20000014
 8003db8:	20000018 	.word	0x20000018

08003dbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dbc:	b5b0      	push	{r4, r5, r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003dc2:	4b61      	ldr	r3, [pc, #388]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d00d      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0x32>
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	f200 80a4 	bhi.w	8003f20 <HAL_RCC_GetSysClockFreq+0x164>
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d002      	beq.n	8003de2 <HAL_RCC_GetSysClockFreq+0x26>
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d003      	beq.n	8003de8 <HAL_RCC_GetSysClockFreq+0x2c>
 8003de0:	e09e      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003de2:	4b5a      	ldr	r3, [pc, #360]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x190>)
 8003de4:	613b      	str	r3, [r7, #16]
      break;
 8003de6:	e0a9      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003de8:	4b59      	ldr	r3, [pc, #356]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x194>)
 8003dea:	613b      	str	r3, [r7, #16]
      break;
 8003dec:	e0a6      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	0c9b      	lsrs	r3, r3, #18
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	4a57      	ldr	r2, [pc, #348]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x198>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
 8003dfa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	0d9b      	lsrs	r3, r3, #22
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	3301      	adds	r3, #1
 8003e06:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e08:	4b4f      	ldr	r3, [pc, #316]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d041      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	461c      	mov	r4, r3
 8003e18:	f04f 0500 	mov.w	r5, #0
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4629      	mov	r1, r5
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	014b      	lsls	r3, r1, #5
 8003e2a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e2e:	0142      	lsls	r2, r0, #5
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	1b00      	subs	r0, r0, r4
 8003e36:	eb61 0105 	sbc.w	r1, r1, r5
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	018b      	lsls	r3, r1, #6
 8003e44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e48:	0182      	lsls	r2, r0, #6
 8003e4a:	1a12      	subs	r2, r2, r0
 8003e4c:	eb63 0301 	sbc.w	r3, r3, r1
 8003e50:	f04f 0000 	mov.w	r0, #0
 8003e54:	f04f 0100 	mov.w	r1, #0
 8003e58:	00d9      	lsls	r1, r3, #3
 8003e5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e5e:	00d0      	lsls	r0, r2, #3
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	1912      	adds	r2, r2, r4
 8003e66:	eb45 0303 	adc.w	r3, r5, r3
 8003e6a:	f04f 0000 	mov.w	r0, #0
 8003e6e:	f04f 0100 	mov.w	r1, #0
 8003e72:	0259      	lsls	r1, r3, #9
 8003e74:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003e78:	0250      	lsls	r0, r2, #9
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	f7fc faf9 	bl	8000480 <__aeabi_uldivmod>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4613      	mov	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e040      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	461c      	mov	r4, r3
 8003e9c:	f04f 0500 	mov.w	r5, #0
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	014b      	lsls	r3, r1, #5
 8003eae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eb2:	0142      	lsls	r2, r0, #5
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	1b00      	subs	r0, r0, r4
 8003eba:	eb61 0105 	sbc.w	r1, r1, r5
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	018b      	lsls	r3, r1, #6
 8003ec8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ecc:	0182      	lsls	r2, r0, #6
 8003ece:	1a12      	subs	r2, r2, r0
 8003ed0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed4:	f04f 0000 	mov.w	r0, #0
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	00d9      	lsls	r1, r3, #3
 8003ede:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ee2:	00d0      	lsls	r0, r2, #3
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	1912      	adds	r2, r2, r4
 8003eea:	eb45 0303 	adc.w	r3, r5, r3
 8003eee:	f04f 0000 	mov.w	r0, #0
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	0299      	lsls	r1, r3, #10
 8003ef8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003efc:	0290      	lsls	r0, r2, #10
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4610      	mov	r0, r2
 8003f04:	4619      	mov	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	f7fc fab7 	bl	8000480 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4613      	mov	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	613b      	str	r3, [r7, #16]
      break;
 8003f1e:	e00d      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	0b5b      	lsrs	r3, r3, #13
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	613b      	str	r3, [r7, #16]
      break;
 8003f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3c:	693b      	ldr	r3, [r7, #16]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bdb0      	pop	{r4, r5, r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	007a1200 	.word	0x007a1200
 8003f54:	08009bc0 	.word	0x08009bc0

08003f58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f64:	4b29      	ldr	r3, [pc, #164]	; (800400c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d12c      	bne.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f70:	4b26      	ldr	r3, [pc, #152]	; (800400c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003f7c:	4b24      	ldr	r3, [pc, #144]	; (8004010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e016      	b.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f88:	4b20      	ldr	r3, [pc, #128]	; (800400c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f92:	6253      	str	r3, [r2, #36]	; 0x24
 8003f94:	4b1d      	ldr	r3, [pc, #116]	; (800400c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003fa8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003faa:	4b18      	ldr	r3, [pc, #96]	; (800400c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	4a17      	ldr	r2, [pc, #92]	; (800400c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003fbc:	d105      	bne.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fc4:	d101      	bne.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003fd0:	4b10      	ldr	r3, [pc, #64]	; (8004014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0f      	ldr	r2, [pc, #60]	; (8004014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fd6:	f043 0304 	orr.w	r3, r3, #4
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 0201 	bic.w	r2, r3, #1
 8003fe4:	490b      	ldr	r1, [pc, #44]	; (8004014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d001      	beq.n	8003ffe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40007000 	.word	0x40007000
 8004014:	40023c00 	.word	0x40023c00

08004018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e06e      	b.n	8004108 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d108      	bne.n	8004044 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403a:	d009      	beq.n	8004050 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	61da      	str	r2, [r3, #28]
 8004042:	e005      	b.n	8004050 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd f922 	bl	80012b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	ea42 0103 	orr.w	r1, r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	0c1a      	lsrs	r2, r3, #16
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f002 0204 	and.w	r2, r2, #4
 80040f6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_SPI_Transmit+0x22>
 800412e:	2302      	movs	r3, #2
 8004130:	e126      	b.n	8004380 <HAL_SPI_Transmit+0x270>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800413a:	f7fd fae7 	bl	800170c <HAL_GetTick>
 800413e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d002      	beq.n	8004156 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004150:	2302      	movs	r3, #2
 8004152:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004154:	e10b      	b.n	800436e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_SPI_Transmit+0x52>
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004166:	e102      	b.n	800436e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2203      	movs	r2, #3
 800416c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	88fa      	ldrh	r2, [r7, #6]
 8004186:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ae:	d10f      	bne.n	80041d0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041da:	2b40      	cmp	r3, #64	; 0x40
 80041dc:	d007      	beq.n	80041ee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f6:	d14b      	bne.n	8004290 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_SPI_Transmit+0xf6>
 8004200:	8afb      	ldrh	r3, [r7, #22]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d13e      	bne.n	8004284 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	881a      	ldrh	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	1c9a      	adds	r2, r3, #2
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800422a:	e02b      	b.n	8004284 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d112      	bne.n	8004260 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	881a      	ldrh	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	1c9a      	adds	r2, r3, #2
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	86da      	strh	r2, [r3, #54]	; 0x36
 800425e:	e011      	b.n	8004284 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004260:	f7fd fa54 	bl	800170c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d803      	bhi.n	8004278 <HAL_SPI_Transmit+0x168>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d102      	bne.n	800427e <HAL_SPI_Transmit+0x16e>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d102      	bne.n	8004284 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004282:	e074      	b.n	800436e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1ce      	bne.n	800422c <HAL_SPI_Transmit+0x11c>
 800428e:	e04c      	b.n	800432a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_SPI_Transmit+0x18e>
 8004298:	8afb      	ldrh	r3, [r7, #22]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d140      	bne.n	8004320 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	7812      	ldrb	r2, [r2, #0]
 80042aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042c4:	e02c      	b.n	8004320 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d113      	bne.n	80042fc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	7812      	ldrb	r2, [r2, #0]
 80042e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80042fa:	e011      	b.n	8004320 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042fc:	f7fd fa06 	bl	800170c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d803      	bhi.n	8004314 <HAL_SPI_Transmit+0x204>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d102      	bne.n	800431a <HAL_SPI_Transmit+0x20a>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d102      	bne.n	8004320 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800431e:	e026      	b.n	800436e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1cd      	bne.n	80042c6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	6839      	ldr	r1, [r7, #0]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f8b2 	bl	8004498 <SPI_EndRxTxTransaction>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	77fb      	strb	r3, [r7, #31]
 800436a:	e000      	b.n	800436e <HAL_SPI_Transmit+0x25e>
  }

error:
 800436c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800437e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004398:	f7fd f9b8 	bl	800170c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043a8:	f7fd f9b0 	bl	800170c <HAL_GetTick>
 80043ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043ae:	4b39      	ldr	r3, [pc, #228]	; (8004494 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	015b      	lsls	r3, r3, #5
 80043b4:	0d1b      	lsrs	r3, r3, #20
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	fb02 f303 	mul.w	r3, r2, r3
 80043bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043be:	e054      	b.n	800446a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d050      	beq.n	800446a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043c8:	f7fd f9a0 	bl	800170c <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d902      	bls.n	80043de <SPI_WaitFlagStateUntilTimeout+0x56>
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d13d      	bne.n	800445a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f6:	d111      	bne.n	800441c <SPI_WaitFlagStateUntilTimeout+0x94>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004400:	d004      	beq.n	800440c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440a:	d107      	bne.n	800441c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004424:	d10f      	bne.n	8004446 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004444:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e017      	b.n	800448a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	3b01      	subs	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	429a      	cmp	r2, r3
 8004486:	d19b      	bne.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000014 	.word	0x20000014

08004498 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <SPI_EndRxTxTransaction+0x7c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <SPI_EndRxTxTransaction+0x80>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	0d5b      	lsrs	r3, r3, #21
 80044b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c2:	d112      	bne.n	80044ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2200      	movs	r2, #0
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff ff5a 	bl	8004388 <SPI_WaitFlagStateUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	f043 0220 	orr.w	r2, r3, #32
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e00f      	b.n	800450a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d0f2      	beq.n	80044ea <SPI_EndRxTxTransaction+0x52>
 8004504:	e000      	b.n	8004508 <SPI_EndRxTxTransaction+0x70>
        break;
 8004506:	bf00      	nop
  }

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000014 	.word	0x20000014
 8004518:	165e9f81 	.word	0x165e9f81

0800451c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800452c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004530:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	b29a      	uxth	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004550:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004554:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	b29b      	uxth	r3, r3
 8004562:	43db      	mvns	r3, r3
 8004564:	b29b      	uxth	r3, r3
 8004566:	4013      	ands	r3, r2
 8004568:	b29a      	uxth	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800457c:	b084      	sub	sp, #16
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	f107 0014 	add.w	r0, r7, #20
 800458a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	b004      	add	sp, #16
 80045ba:	4770      	bx	lr

080045bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045bc:	b480      	push	{r7}
 80045be:	b09b      	sub	sp, #108	; 0x6c
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	78db      	ldrb	r3, [r3, #3]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d81f      	bhi.n	800462e <USB_ActivateEndpoint+0x72>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <USB_ActivateEndpoint+0x38>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004621 	.word	0x08004621
 80045fc:	08004637 	.word	0x08004637
 8004600:	08004613 	.word	0x08004613
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004604:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004608:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800460c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004610:	e012      	b.n	8004638 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004612:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004616:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800461a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800461e:	e00b      	b.n	8004638 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004620:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004628:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800462c:	e004      	b.n	8004638 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004634:	e000      	b.n	8004638 <USB_ActivateEndpoint+0x7c>
      break;
 8004636:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004656:	b29b      	uxth	r3, r3
 8004658:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004670:	b29a      	uxth	r2, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	4313      	orrs	r3, r2
 800467a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800468c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	b29b      	uxth	r3, r3
 800469e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	7b1b      	ldrb	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f040 8149 	bne.w	800493c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	785b      	ldrb	r3, [r3, #1]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8084 	beq.w	80047bc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046be:	b29b      	uxth	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	4413      	add	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	011a      	lsls	r2, r3, #4
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	88db      	ldrh	r3, [r3, #6]
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	b29b      	uxth	r3, r3
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	81fb      	strh	r3, [r7, #14]
 80046f6:	89fb      	ldrh	r3, [r7, #14]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <USB_ActivateEndpoint+0x17c>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	81bb      	strh	r3, [r7, #12]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	89bb      	ldrh	r3, [r7, #12]
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	78db      	ldrb	r3, [r3, #3]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d020      	beq.n	8004782 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004756:	813b      	strh	r3, [r7, #8]
 8004758:	893b      	ldrh	r3, [r7, #8]
 800475a:	f083 0320 	eor.w	r3, r3, #32
 800475e:	813b      	strh	r3, [r7, #8]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	893b      	ldrh	r3, [r7, #8]
 800476c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477c:	b29b      	uxth	r3, r3
 800477e:	8013      	strh	r3, [r2, #0]
 8004780:	e27f      	b.n	8004c82 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004798:	817b      	strh	r3, [r7, #10]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	897b      	ldrh	r3, [r7, #10]
 80047a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8013      	strh	r3, [r2, #0]
 80047ba:	e262      	b.n	8004c82 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	4413      	add	r3, r2
 80047ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	011a      	lsls	r2, r3, #4
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	88db      	ldrh	r3, [r3, #6]
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	4413      	add	r3, r2
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	011a      	lsls	r2, r3, #4
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	4413      	add	r3, r2
 800480e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004812:	623b      	str	r3, [r7, #32]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d112      	bne.n	8004842 <USB_ActivateEndpoint+0x286>
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004826:	b29a      	uxth	r2, r3
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483a:	b29a      	uxth	r2, r3
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	e02f      	b.n	80048a2 <USB_ActivateEndpoint+0x2e6>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b3e      	cmp	r3, #62	; 0x3e
 8004848:	d813      	bhi.n	8004872 <USB_ActivateEndpoint+0x2b6>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	663b      	str	r3, [r7, #96]	; 0x60
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <USB_ActivateEndpoint+0x2a8>
 800485e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004860:	3301      	adds	r3, #1
 8004862:	663b      	str	r3, [r7, #96]	; 0x60
 8004864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004866:	b29b      	uxth	r3, r3
 8004868:	029b      	lsls	r3, r3, #10
 800486a:	b29a      	uxth	r2, r3
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	e017      	b.n	80048a2 <USB_ActivateEndpoint+0x2e6>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	663b      	str	r3, [r7, #96]	; 0x60
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <USB_ActivateEndpoint+0x2d0>
 8004886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004888:	3b01      	subs	r3, #1
 800488a:	663b      	str	r3, [r7, #96]	; 0x60
 800488c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800488e:	b29b      	uxth	r3, r3
 8004890:	029b      	lsls	r3, r3, #10
 8004892:	b29b      	uxth	r3, r3
 8004894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489c:	b29a      	uxth	r2, r3
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	83fb      	strh	r3, [r7, #30]
 80048b0:	8bfb      	ldrh	r3, [r7, #30]
 80048b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01b      	beq.n	80048f2 <USB_ActivateEndpoint+0x336>
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d0:	83bb      	strh	r3, [r7, #28]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	8bbb      	ldrh	r3, [r7, #28]
 80048de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004908:	837b      	strh	r3, [r7, #26]
 800490a:	8b7b      	ldrh	r3, [r7, #26]
 800490c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004910:	837b      	strh	r3, [r7, #26]
 8004912:	8b7b      	ldrh	r3, [r7, #26]
 8004914:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004918:	837b      	strh	r3, [r7, #26]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	441a      	add	r2, r3
 8004924:	8b7b      	ldrh	r3, [r7, #26]
 8004926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800492a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004936:	b29b      	uxth	r3, r3
 8004938:	8013      	strh	r3, [r2, #0]
 800493a:	e1a2      	b.n	8004c82 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	441a      	add	r2, r3
 8004960:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004974:	b29b      	uxth	r3, r3
 8004976:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	65bb      	str	r3, [r7, #88]	; 0x58
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004982:	b29b      	uxth	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004988:	4413      	add	r3, r2
 800498a:	65bb      	str	r3, [r7, #88]	; 0x58
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	011a      	lsls	r2, r3, #4
 8004992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004994:	4413      	add	r3, r2
 8004996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800499a:	657b      	str	r3, [r7, #84]	; 0x54
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	891b      	ldrh	r3, [r3, #8]
 80049a0:	085b      	lsrs	r3, r3, #1
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049aa:	801a      	strh	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	653b      	str	r3, [r7, #80]	; 0x50
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049bc:	4413      	add	r3, r2
 80049be:	653b      	str	r3, [r7, #80]	; 0x50
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	011a      	lsls	r2, r3, #4
 80049c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	895b      	ldrh	r3, [r3, #10]
 80049d4:	085b      	lsrs	r3, r3, #1
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f040 8091 	bne.w	8004b0c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80049f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80049fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01b      	beq.n	8004a3a <USB_ActivateEndpoint+0x47e>
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01b      	beq.n	8004a8a <USB_ActivateEndpoint+0x4ce>
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a68:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004aa2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004aa4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004aa8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004aaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004aac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ab0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae8:	867b      	strh	r3, [r7, #50]	; 0x32
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	441a      	add	r2, r3
 8004af4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8013      	strh	r3, [r2, #0]
 8004b0a:	e0ba      	b.n	8004c82 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01d      	beq.n	8004b64 <USB_ActivateEndpoint+0x5a8>
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	441a      	add	r2, r3
 8004b4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004b74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01d      	beq.n	8004bbc <USB_ActivateEndpoint+0x600>
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	78db      	ldrb	r3, [r3, #3]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d024      	beq.n	8004c0e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004bde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004be2:	f083 0320 	eor.w	r3, r3, #32
 8004be6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	8013      	strh	r3, [r2, #0]
 8004c0c:	e01d      	b.n	8004c4a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	441a      	add	r2, r3
 8004c32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	441a      	add	r2, r3
 8004c6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004c82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	376c      	adds	r7, #108	; 0x6c
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b08d      	sub	sp, #52	; 0x34
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	7b1b      	ldrb	r3, [r3, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 808e 	bne.w	8004dc0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	785b      	ldrb	r3, [r3, #1]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d044      	beq.n	8004d36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	81bb      	strh	r3, [r7, #12]
 8004cba:	89bb      	ldrh	r3, [r7, #12]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01b      	beq.n	8004cfc <USB_DeactivateEndpoint+0x6c>
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	817b      	strh	r3, [r7, #10]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	897b      	ldrh	r3, [r7, #10]
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d12:	813b      	strh	r3, [r7, #8]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	893b      	ldrh	r3, [r7, #8]
 8004d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	8013      	strh	r3, [r2, #0]
 8004d34:	e192      	b.n	800505c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	827b      	strh	r3, [r7, #18]
 8004d44:	8a7b      	ldrh	r3, [r7, #18]
 8004d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01b      	beq.n	8004d86 <USB_DeactivateEndpoint+0xf6>
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d64:	823b      	strh	r3, [r7, #16]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	8a3b      	ldrh	r3, [r7, #16]
 8004d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9c:	81fb      	strh	r3, [r7, #14]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	89fb      	ldrh	r3, [r7, #14]
 8004daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	8013      	strh	r3, [r2, #0]
 8004dbe:	e14d      	b.n	800505c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 80a5 	bne.w	8004f14 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	843b      	strh	r3, [r7, #32]
 8004dd8:	8c3b      	ldrh	r3, [r7, #32]
 8004dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01b      	beq.n	8004e1a <USB_DeactivateEndpoint+0x18a>
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df8:	83fb      	strh	r3, [r7, #30]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	8bfb      	ldrh	r3, [r7, #30]
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	83bb      	strh	r3, [r7, #28]
 8004e28:	8bbb      	ldrh	r3, [r7, #28]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01b      	beq.n	8004e6a <USB_DeactivateEndpoint+0x1da>
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	837b      	strh	r3, [r7, #26]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	8b7b      	ldrh	r3, [r7, #26]
 8004e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e80:	833b      	strh	r3, [r7, #24]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	8b3b      	ldrh	r3, [r7, #24]
 8004e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	82fb      	strh	r3, [r7, #22]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	8afb      	ldrh	r3, [r7, #22]
 8004ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef0:	82bb      	strh	r3, [r7, #20]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	441a      	add	r2, r3
 8004efc:	8abb      	ldrh	r3, [r7, #20]
 8004efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	8013      	strh	r3, [r2, #0]
 8004f12:	e0a3      	b.n	800505c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <USB_DeactivateEndpoint+0x2d4>
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01b      	beq.n	8004fb4 <USB_DeactivateEndpoint+0x324>
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	441a      	add	r2, r3
 8004fd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005002:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	441a      	add	r2, r3
 800500e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005020:	b29b      	uxth	r3, r3
 8005022:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	847b      	strh	r3, [r7, #34]	; 0x22
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005058:	b29b      	uxth	r3, r3
 800505a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3734      	adds	r7, #52	; 0x34
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b0cc      	sub	sp, #304	; 0x130
 800506c:	af00      	add	r7, sp, #0
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	6018      	str	r0, [r3, #0]
 8005072:	463b      	mov	r3, r7
 8005074:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	2b01      	cmp	r3, #1
 800507e:	f040 872e 	bne.w	8005ede <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005082:	463b      	mov	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699a      	ldr	r2, [r3, #24]
 8005088:	463b      	mov	r3, r7
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	429a      	cmp	r2, r3
 8005090:	d905      	bls.n	800509e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005092:	463b      	mov	r3, r7
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800509c:	e004      	b.n	80050a8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	7b1b      	ldrb	r3, [r3, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d134      	bne.n	800511c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050b2:	463b      	mov	r3, r7
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6959      	ldr	r1, [r3, #20]
 80050b8:	463b      	mov	r3, r7
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	88da      	ldrh	r2, [r3, #6]
 80050be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	1d38      	adds	r0, r7, #4
 80050c6:	6800      	ldr	r0, [r0, #0]
 80050c8:	f001 fbee 	bl	80068a8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050cc:	f107 0310 	add.w	r3, r7, #16
 80050d0:	1d3a      	adds	r2, r7, #4
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050de:	b29b      	uxth	r3, r3
 80050e0:	4619      	mov	r1, r3
 80050e2:	f107 0310 	add.w	r3, r7, #16
 80050e6:	f107 0210 	add.w	r2, r7, #16
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	440a      	add	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	463b      	mov	r3, r7
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	011a      	lsls	r2, r3, #4
 80050f8:	f107 0310 	add.w	r3, r7, #16
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4413      	add	r3, r2
 8005100:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005104:	f107 030c 	add.w	r3, r7, #12
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510e:	b29a      	uxth	r2, r3
 8005110:	f107 030c 	add.w	r3, r7, #12
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	801a      	strh	r2, [r3, #0]
 8005118:	f000 beac 	b.w	8005e74 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800511c:	463b      	mov	r3, r7
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	78db      	ldrb	r3, [r3, #3]
 8005122:	2b02      	cmp	r3, #2
 8005124:	f040 838c 	bne.w	8005840 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005128:	463b      	mov	r3, r7
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6a1a      	ldr	r2, [r3, #32]
 800512e:	463b      	mov	r3, r7
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	429a      	cmp	r2, r3
 8005136:	f240 8330 	bls.w	800579a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800513a:	1d3b      	adds	r3, r7, #4
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	463b      	mov	r3, r7
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005154:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	441a      	add	r2, r3
 8005166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800516a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005172:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517a:	b29b      	uxth	r3, r3
 800517c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800517e:	463b      	mov	r3, r7
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6a1a      	ldr	r2, [r3, #32]
 8005184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005188:	1ad2      	subs	r2, r2, r3
 800518a:	463b      	mov	r3, r7
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	463b      	mov	r3, r7
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 819e 	beq.w	80054e8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051b0:	1d3a      	adds	r2, r7, #4
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	463b      	mov	r3, r7
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d17a      	bne.n	80052b6 <USB_EPStartXfer+0x24e>
 80051c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051c4:	1d3a      	adds	r2, r7, #4
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	1d3b      	adds	r3, r7, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	4619      	mov	r1, r3
 80051d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	440a      	add	r2, r1
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	463b      	mov	r3, r7
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	011a      	lsls	r2, r3, #4
 80051ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4413      	add	r3, r2
 80051f4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80051f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d11a      	bne.n	800523c <USB_EPStartXfer+0x1d4>
 8005206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005214:	b29a      	uxth	r2, r3
 8005216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005230:	b29a      	uxth	r2, r3
 8005232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e062      	b.n	8005302 <USB_EPStartXfer+0x29a>
 800523c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005240:	2b3e      	cmp	r3, #62	; 0x3e
 8005242:	d819      	bhi.n	8005278 <USB_EPStartXfer+0x210>
 8005244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800524e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <USB_EPStartXfer+0x1fc>
 800525a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800525e:	3301      	adds	r3, #1
 8005260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005264:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005268:	b29b      	uxth	r3, r3
 800526a:	029b      	lsls	r3, r3, #10
 800526c:	b29a      	uxth	r2, r3
 800526e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	e044      	b.n	8005302 <USB_EPStartXfer+0x29a>
 8005278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <USB_EPStartXfer+0x230>
 800528e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005292:	3b01      	subs	r3, #1
 8005294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005298:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800529c:	b29b      	uxth	r3, r3
 800529e:	029b      	lsls	r3, r3, #10
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	801a      	strh	r2, [r3, #0]
 80052b4:	e025      	b.n	8005302 <USB_EPStartXfer+0x29a>
 80052b6:	463b      	mov	r3, r7
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d120      	bne.n	8005302 <USB_EPStartXfer+0x29a>
 80052c0:	1d3b      	adds	r3, r7, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	4619      	mov	r1, r3
 80052cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	440a      	add	r2, r1
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	463b      	mov	r3, r7
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	011a      	lsls	r2, r3, #4
 80052e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4413      	add	r3, r2
 80052ea:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80052ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005302:	463b      	mov	r3, r7
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	895b      	ldrh	r3, [r3, #10]
 8005308:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800530c:	463b      	mov	r3, r7
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6959      	ldr	r1, [r3, #20]
 8005312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005316:	b29b      	uxth	r3, r3
 8005318:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800531c:	1d38      	adds	r0, r7, #4
 800531e:	6800      	ldr	r0, [r0, #0]
 8005320:	f001 fac2 	bl	80068a8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005324:	463b      	mov	r3, r7
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695a      	ldr	r2, [r3, #20]
 800532a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532e:	441a      	add	r2, r3
 8005330:	463b      	mov	r3, r7
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005336:	463b      	mov	r3, r7
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	463b      	mov	r3, r7
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	429a      	cmp	r2, r3
 8005344:	d909      	bls.n	800535a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005346:	463b      	mov	r3, r7
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005350:	1ad2      	subs	r2, r2, r3
 8005352:	463b      	mov	r3, r7
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	621a      	str	r2, [r3, #32]
 8005358:	e008      	b.n	800536c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800535a:	463b      	mov	r3, r7
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005364:	463b      	mov	r3, r7
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2200      	movs	r2, #0
 800536a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800536c:	463b      	mov	r3, r7
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	785b      	ldrb	r3, [r3, #1]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d17a      	bne.n	800546c <USB_EPStartXfer+0x404>
 8005376:	f107 0318 	add.w	r3, r7, #24
 800537a:	1d3a      	adds	r2, r7, #4
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	1d3b      	adds	r3, r7, #4
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005388:	b29b      	uxth	r3, r3
 800538a:	4619      	mov	r1, r3
 800538c:	f107 0318 	add.w	r3, r7, #24
 8005390:	f107 0218 	add.w	r2, r7, #24
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	440a      	add	r2, r1
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	463b      	mov	r3, r7
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	011a      	lsls	r2, r3, #4
 80053a2:	f107 0318 	add.w	r3, r7, #24
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4413      	add	r3, r2
 80053aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80053ae:	f107 0314 	add.w	r3, r7, #20
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11a      	bne.n	80053f2 <USB_EPStartXfer+0x38a>
 80053bc:	f107 0314 	add.w	r3, r7, #20
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	f107 0314 	add.w	r3, r7, #20
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	801a      	strh	r2, [r3, #0]
 80053d4:	f107 0314 	add.w	r3, r7, #20
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	f107 0314 	add.w	r3, r7, #20
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	e067      	b.n	80054c2 <USB_EPStartXfer+0x45a>
 80053f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f6:	2b3e      	cmp	r3, #62	; 0x3e
 80053f8:	d819      	bhi.n	800542e <USB_EPStartXfer+0x3c6>
 80053fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <USB_EPStartXfer+0x3b2>
 8005410:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005414:	3301      	adds	r3, #1
 8005416:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800541a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800541e:	b29b      	uxth	r3, r3
 8005420:	029b      	lsls	r3, r3, #10
 8005422:	b29a      	uxth	r2, r3
 8005424:	f107 0314 	add.w	r3, r7, #20
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	e049      	b.n	80054c2 <USB_EPStartXfer+0x45a>
 800542e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	2b00      	cmp	r3, #0
 8005442:	d104      	bne.n	800544e <USB_EPStartXfer+0x3e6>
 8005444:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005448:	3b01      	subs	r3, #1
 800544a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800544e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005452:	b29b      	uxth	r3, r3
 8005454:	029b      	lsls	r3, r3, #10
 8005456:	b29b      	uxth	r3, r3
 8005458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005460:	b29a      	uxth	r2, r3
 8005462:	f107 0314 	add.w	r3, r7, #20
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	e02a      	b.n	80054c2 <USB_EPStartXfer+0x45a>
 800546c:	463b      	mov	r3, r7
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	785b      	ldrb	r3, [r3, #1]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d125      	bne.n	80054c2 <USB_EPStartXfer+0x45a>
 8005476:	f107 0320 	add.w	r3, r7, #32
 800547a:	1d3a      	adds	r2, r7, #4
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	1d3b      	adds	r3, r7, #4
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005488:	b29b      	uxth	r3, r3
 800548a:	4619      	mov	r1, r3
 800548c:	f107 0320 	add.w	r3, r7, #32
 8005490:	f107 0220 	add.w	r2, r7, #32
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	440a      	add	r2, r1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	011a      	lsls	r2, r3, #4
 80054a2:	f107 0320 	add.w	r3, r7, #32
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4413      	add	r3, r2
 80054aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054ae:	f107 031c 	add.w	r3, r7, #28
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	f107 031c 	add.w	r3, r7, #28
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054c2:	463b      	mov	r3, r7
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	891b      	ldrh	r3, [r3, #8]
 80054c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054cc:	463b      	mov	r3, r7
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6959      	ldr	r1, [r3, #20]
 80054d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054dc:	1d38      	adds	r0, r7, #4
 80054de:	6800      	ldr	r0, [r0, #0]
 80054e0:	f001 f9e2 	bl	80068a8 <USB_WritePMA>
 80054e4:	f000 bcc6 	b.w	8005e74 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054e8:	463b      	mov	r3, r7
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d164      	bne.n	80055bc <USB_EPStartXfer+0x554>
 80054f2:	1d3b      	adds	r3, r7, #4
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f8:	1d3b      	adds	r3, r7, #4
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005500:	b29b      	uxth	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005506:	4413      	add	r3, r2
 8005508:	64bb      	str	r3, [r7, #72]	; 0x48
 800550a:	463b      	mov	r3, r7
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	011a      	lsls	r2, r3, #4
 8005512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005514:	4413      	add	r3, r2
 8005516:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800551a:	647b      	str	r3, [r7, #68]	; 0x44
 800551c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d112      	bne.n	800554a <USB_EPStartXfer+0x4e2>
 8005524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800552e:	b29a      	uxth	r2, r3
 8005530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005532:	801a      	strh	r2, [r3, #0]
 8005534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800553e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005542:	b29a      	uxth	r2, r3
 8005544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	e057      	b.n	80055fa <USB_EPStartXfer+0x592>
 800554a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554e:	2b3e      	cmp	r3, #62	; 0x3e
 8005550:	d817      	bhi.n	8005582 <USB_EPStartXfer+0x51a>
 8005552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005556:	085b      	lsrs	r3, r3, #1
 8005558:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800555c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <USB_EPStartXfer+0x50a>
 8005568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800556c:	3301      	adds	r3, #1
 800556e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005572:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005576:	b29b      	uxth	r3, r3
 8005578:	029b      	lsls	r3, r3, #10
 800557a:	b29a      	uxth	r2, r3
 800557c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	e03b      	b.n	80055fa <USB_EPStartXfer+0x592>
 8005582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800558c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005590:	f003 031f 	and.w	r3, r3, #31
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <USB_EPStartXfer+0x53a>
 8005598:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800559c:	3b01      	subs	r3, #1
 800559e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80055a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	029b      	lsls	r3, r3, #10
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b8:	801a      	strh	r2, [r3, #0]
 80055ba:	e01e      	b.n	80055fa <USB_EPStartXfer+0x592>
 80055bc:	463b      	mov	r3, r7
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	785b      	ldrb	r3, [r3, #1]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d119      	bne.n	80055fa <USB_EPStartXfer+0x592>
 80055c6:	1d3b      	adds	r3, r7, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	653b      	str	r3, [r7, #80]	; 0x50
 80055cc:	1d3b      	adds	r3, r7, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055da:	4413      	add	r3, r2
 80055dc:	653b      	str	r3, [r7, #80]	; 0x50
 80055de:	463b      	mov	r3, r7
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	011a      	lsls	r2, r3, #4
 80055e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e8:	4413      	add	r3, r2
 80055ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055fa:	463b      	mov	r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	891b      	ldrh	r3, [r3, #8]
 8005600:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6959      	ldr	r1, [r3, #20]
 800560a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560e:	b29b      	uxth	r3, r3
 8005610:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005614:	1d38      	adds	r0, r7, #4
 8005616:	6800      	ldr	r0, [r0, #0]
 8005618:	f001 f946 	bl	80068a8 <USB_WritePMA>
            ep->xfer_buff += len;
 800561c:	463b      	mov	r3, r7
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005626:	441a      	add	r2, r3
 8005628:	463b      	mov	r3, r7
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800562e:	463b      	mov	r3, r7
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a1a      	ldr	r2, [r3, #32]
 8005634:	463b      	mov	r3, r7
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	429a      	cmp	r2, r3
 800563c:	d909      	bls.n	8005652 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a1a      	ldr	r2, [r3, #32]
 8005644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005648:	1ad2      	subs	r2, r2, r3
 800564a:	463b      	mov	r3, r7
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	621a      	str	r2, [r3, #32]
 8005650:	e008      	b.n	8005664 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005652:	463b      	mov	r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800565c:	463b      	mov	r3, r7
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2200      	movs	r2, #0
 8005662:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005664:	1d3b      	adds	r3, r7, #4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	643b      	str	r3, [r7, #64]	; 0x40
 800566a:	463b      	mov	r3, r7
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d164      	bne.n	800573e <USB_EPStartXfer+0x6d6>
 8005674:	1d3b      	adds	r3, r7, #4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	63bb      	str	r3, [r7, #56]	; 0x38
 800567a:	1d3b      	adds	r3, r7, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005682:	b29b      	uxth	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	4413      	add	r3, r2
 800568a:	63bb      	str	r3, [r7, #56]	; 0x38
 800568c:	463b      	mov	r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	011a      	lsls	r2, r3, #4
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	4413      	add	r3, r2
 8005698:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
 800569e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d112      	bne.n	80056cc <USB_EPStartXfer+0x664>
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c8:	801a      	strh	r2, [r3, #0]
 80056ca:	e054      	b.n	8005776 <USB_EPStartXfer+0x70e>
 80056cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d0:	2b3e      	cmp	r3, #62	; 0x3e
 80056d2:	d817      	bhi.n	8005704 <USB_EPStartXfer+0x69c>
 80056d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80056de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <USB_EPStartXfer+0x68c>
 80056ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056ee:	3301      	adds	r3, #1
 80056f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80056f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	029b      	lsls	r3, r3, #10
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e038      	b.n	8005776 <USB_EPStartXfer+0x70e>
 8005704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800570e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	2b00      	cmp	r3, #0
 8005718:	d104      	bne.n	8005724 <USB_EPStartXfer+0x6bc>
 800571a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800571e:	3b01      	subs	r3, #1
 8005720:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005724:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005728:	b29b      	uxth	r3, r3
 800572a:	029b      	lsls	r3, r3, #10
 800572c:	b29b      	uxth	r3, r3
 800572e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005736:	b29a      	uxth	r2, r3
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	e01b      	b.n	8005776 <USB_EPStartXfer+0x70e>
 800573e:	463b      	mov	r3, r7
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	785b      	ldrb	r3, [r3, #1]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d116      	bne.n	8005776 <USB_EPStartXfer+0x70e>
 8005748:	1d3b      	adds	r3, r7, #4
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005750:	b29b      	uxth	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005756:	4413      	add	r3, r2
 8005758:	643b      	str	r3, [r7, #64]	; 0x40
 800575a:	463b      	mov	r3, r7
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	011a      	lsls	r2, r3, #4
 8005762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005764:	4413      	add	r3, r2
 8005766:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800576a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800576c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005770:	b29a      	uxth	r2, r3
 8005772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005774:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005776:	463b      	mov	r3, r7
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	895b      	ldrh	r3, [r3, #10]
 800577c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005780:	463b      	mov	r3, r7
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6959      	ldr	r1, [r3, #20]
 8005786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800578a:	b29b      	uxth	r3, r3
 800578c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005790:	1d38      	adds	r0, r7, #4
 8005792:	6800      	ldr	r0, [r0, #0]
 8005794:	f001 f888 	bl	80068a8 <USB_WritePMA>
 8005798:	e36c      	b.n	8005e74 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800579a:	463b      	mov	r3, r7
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80057a4:	1d3b      	adds	r3, r7, #4
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	463b      	mov	r3, r7
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	463b      	mov	r3, r7
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	441a      	add	r2, r3
 80057d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80057d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057e8:	1d3b      	adds	r3, r7, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057ee:	1d3b      	adds	r3, r7, #4
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057fc:	4413      	add	r3, r2
 80057fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005800:	463b      	mov	r3, r7
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	011a      	lsls	r2, r3, #4
 8005808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800580a:	4413      	add	r3, r2
 800580c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005810:	65bb      	str	r3, [r7, #88]	; 0x58
 8005812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005816:	b29a      	uxth	r2, r3
 8005818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800581a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800581c:	463b      	mov	r3, r7
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	891b      	ldrh	r3, [r3, #8]
 8005822:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005826:	463b      	mov	r3, r7
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6959      	ldr	r1, [r3, #20]
 800582c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005830:	b29b      	uxth	r3, r3
 8005832:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005836:	1d38      	adds	r0, r7, #4
 8005838:	6800      	ldr	r0, [r0, #0]
 800583a:	f001 f835 	bl	80068a8 <USB_WritePMA>
 800583e:	e319      	b.n	8005e74 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	463b      	mov	r3, r7
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	441a      	add	r2, r3
 800586c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005878:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800587c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005880:	b29b      	uxth	r3, r3
 8005882:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6a1a      	ldr	r2, [r3, #32]
 800588a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	463b      	mov	r3, r7
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005896:	1d3b      	adds	r3, r7, #4
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	463b      	mov	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8162 	beq.w	8005b76 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058b2:	1d3b      	adds	r3, r7, #4
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d164      	bne.n	800598e <USB_EPStartXfer+0x926>
 80058c4:	1d3b      	adds	r3, r7, #4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80058ca:	1d3b      	adds	r3, r7, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d8:	4413      	add	r3, r2
 80058da:	67bb      	str	r3, [r7, #120]	; 0x78
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	011a      	lsls	r2, r3, #4
 80058e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e6:	4413      	add	r3, r2
 80058e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ec:	677b      	str	r3, [r7, #116]	; 0x74
 80058ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d112      	bne.n	800591c <USB_EPStartXfer+0x8b4>
 80058f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005900:	b29a      	uxth	r2, r3
 8005902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005904:	801a      	strh	r2, [r3, #0]
 8005906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29b      	uxth	r3, r3
 800590c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005914:	b29a      	uxth	r2, r3
 8005916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005918:	801a      	strh	r2, [r3, #0]
 800591a:	e057      	b.n	80059cc <USB_EPStartXfer+0x964>
 800591c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005920:	2b3e      	cmp	r3, #62	; 0x3e
 8005922:	d817      	bhi.n	8005954 <USB_EPStartXfer+0x8ec>
 8005924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800592e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <USB_EPStartXfer+0x8dc>
 800593a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800593e:	3301      	adds	r3, #1
 8005940:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005944:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005948:	b29b      	uxth	r3, r3
 800594a:	029b      	lsls	r3, r3, #10
 800594c:	b29a      	uxth	r2, r3
 800594e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005950:	801a      	strh	r2, [r3, #0]
 8005952:	e03b      	b.n	80059cc <USB_EPStartXfer+0x964>
 8005954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800595e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <USB_EPStartXfer+0x90c>
 800596a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800596e:	3b01      	subs	r3, #1
 8005970:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005974:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005978:	b29b      	uxth	r3, r3
 800597a:	029b      	lsls	r3, r3, #10
 800597c:	b29b      	uxth	r3, r3
 800597e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005986:	b29a      	uxth	r2, r3
 8005988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	e01e      	b.n	80059cc <USB_EPStartXfer+0x964>
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d119      	bne.n	80059cc <USB_EPStartXfer+0x964>
 8005998:	1d3b      	adds	r3, r7, #4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059a8:	4413      	add	r3, r2
 80059aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059ae:	463b      	mov	r3, r7
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	011a      	lsls	r2, r3, #4
 80059b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059ba:	4413      	add	r3, r2
 80059bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80059cc:	463b      	mov	r3, r7
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	895b      	ldrh	r3, [r3, #10]
 80059d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6959      	ldr	r1, [r3, #20]
 80059dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059e6:	1d38      	adds	r0, r7, #4
 80059e8:	6800      	ldr	r0, [r0, #0]
 80059ea:	f000 ff5d 	bl	80068a8 <USB_WritePMA>
          ep->xfer_buff += len;
 80059ee:	463b      	mov	r3, r7
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f8:	441a      	add	r2, r3
 80059fa:	463b      	mov	r3, r7
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6a1a      	ldr	r2, [r3, #32]
 8005a06:	463b      	mov	r3, r7
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d909      	bls.n	8005a24 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005a10:	463b      	mov	r3, r7
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6a1a      	ldr	r2, [r3, #32]
 8005a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1a:	1ad2      	subs	r2, r2, r3
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	621a      	str	r2, [r3, #32]
 8005a22:	e008      	b.n	8005a36 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005a24:	463b      	mov	r3, r7
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005a2e:	463b      	mov	r3, r7
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2200      	movs	r2, #0
 8005a34:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 821a 	beq.w	8005e74 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a40:	463b      	mov	r3, r7
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	785b      	ldrb	r3, [r3, #1]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d164      	bne.n	8005b14 <USB_EPStartXfer+0xaac>
 8005a4a:	1d3b      	adds	r3, r7, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a50:	1d3b      	adds	r3, r7, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a5e:	4413      	add	r3, r2
 8005a60:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a62:	463b      	mov	r3, r7
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	011a      	lsls	r2, r3, #4
 8005a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a72:	667b      	str	r3, [r7, #100]	; 0x64
 8005a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d112      	bne.n	8005aa2 <USB_EPStartXfer+0xa3a>
 8005a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a9e:	801a      	strh	r2, [r3, #0]
 8005aa0:	e057      	b.n	8005b52 <USB_EPStartXfer+0xaea>
 8005aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa8:	d817      	bhi.n	8005ada <USB_EPStartXfer+0xa72>
 8005aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <USB_EPStartXfer+0xa62>
 8005ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e03b      	b.n	8005b52 <USB_EPStartXfer+0xaea>
 8005ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d104      	bne.n	8005afa <USB_EPStartXfer+0xa92>
 8005af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af4:	3b01      	subs	r3, #1
 8005af6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	029b      	lsls	r3, r3, #10
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	e01e      	b.n	8005b52 <USB_EPStartXfer+0xaea>
 8005b14:	463b      	mov	r3, r7
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d119      	bne.n	8005b52 <USB_EPStartXfer+0xaea>
 8005b1e:	1d3b      	adds	r3, r7, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	673b      	str	r3, [r7, #112]	; 0x70
 8005b24:	1d3b      	adds	r3, r7, #4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b32:	4413      	add	r3, r2
 8005b34:	673b      	str	r3, [r7, #112]	; 0x70
 8005b36:	463b      	mov	r3, r7
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	011a      	lsls	r2, r3, #4
 8005b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b40:	4413      	add	r3, r2
 8005b42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b52:	463b      	mov	r3, r7
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	891b      	ldrh	r3, [r3, #8]
 8005b58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6959      	ldr	r1, [r3, #20]
 8005b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b6c:	1d38      	adds	r0, r7, #4
 8005b6e:	6800      	ldr	r0, [r0, #0]
 8005b70:	f000 fe9a 	bl	80068a8 <USB_WritePMA>
 8005b74:	e17e      	b.n	8005e74 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b76:	463b      	mov	r3, r7
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	785b      	ldrb	r3, [r3, #1]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d16f      	bne.n	8005c60 <USB_EPStartXfer+0xbf8>
 8005b80:	1d3b      	adds	r3, r7, #4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b88:	1d3b      	adds	r3, r7, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	461a      	mov	r2, r3
 8005b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b98:	4413      	add	r3, r2
 8005b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	011a      	lsls	r2, r3, #4
 8005ba6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005baa:	4413      	add	r3, r2
 8005bac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d116      	bne.n	8005bea <USB_EPStartXfer+0xb82>
 8005bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005be6:	801a      	strh	r2, [r3, #0]
 8005be8:	e05f      	b.n	8005caa <USB_EPStartXfer+0xc42>
 8005bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bee:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf0:	d818      	bhi.n	8005c24 <USB_EPStartXfer+0xbbc>
 8005bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <USB_EPStartXfer+0xbaa>
 8005c08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	029b      	lsls	r3, r3, #10
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c20:	801a      	strh	r2, [r3, #0]
 8005c22:	e042      	b.n	8005caa <USB_EPStartXfer+0xc42>
 8005c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <USB_EPStartXfer+0xbdc>
 8005c3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	029b      	lsls	r3, r3, #10
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c5c:	801a      	strh	r2, [r3, #0]
 8005c5e:	e024      	b.n	8005caa <USB_EPStartXfer+0xc42>
 8005c60:	463b      	mov	r3, r7
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d11f      	bne.n	8005caa <USB_EPStartXfer+0xc42>
 8005c6a:	1d3b      	adds	r3, r7, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c72:	1d3b      	adds	r3, r7, #4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c82:	4413      	add	r3, r2
 8005c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c88:	463b      	mov	r3, r7
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	011a      	lsls	r2, r3, #4
 8005c90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c94:	4413      	add	r3, r2
 8005c96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ca8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	891b      	ldrh	r3, [r3, #8]
 8005cb0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6959      	ldr	r1, [r3, #20]
 8005cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cc4:	1d38      	adds	r0, r7, #4
 8005cc6:	6800      	ldr	r0, [r0, #0]
 8005cc8:	f000 fdee 	bl	80068a8 <USB_WritePMA>
          ep->xfer_buff += len;
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695a      	ldr	r2, [r3, #20]
 8005cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd6:	441a      	add	r2, r3
 8005cd8:	463b      	mov	r3, r7
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005cde:	463b      	mov	r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d909      	bls.n	8005d02 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005cee:	463b      	mov	r3, r7
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	621a      	str	r2, [r3, #32]
 8005d00:	e008      	b.n	8005d14 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005d02:	463b      	mov	r3, r7
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2200      	movs	r2, #0
 8005d12:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80ab 	beq.w	8005e74 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d1e:	1d3b      	adds	r3, r7, #4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d26:	463b      	mov	r3, r7
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d16f      	bne.n	8005e10 <USB_EPStartXfer+0xda8>
 8005d30:	1d3b      	adds	r3, r7, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d38:	1d3b      	adds	r3, r7, #4
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d48:	4413      	add	r3, r2
 8005d4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d4e:	463b      	mov	r3, r7
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	011a      	lsls	r2, r3, #4
 8005d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d116      	bne.n	8005d9a <USB_EPStartXfer+0xd32>
 8005d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	e05b      	b.n	8005e52 <USB_EPStartXfer+0xdea>
 8005d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005da0:	d818      	bhi.n	8005dd4 <USB_EPStartXfer+0xd6c>
 8005da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <USB_EPStartXfer+0xd5a>
 8005db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	029b      	lsls	r3, r3, #10
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dd0:	801a      	strh	r2, [r3, #0]
 8005dd2:	e03e      	b.n	8005e52 <USB_EPStartXfer+0xdea>
 8005dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <USB_EPStartXfer+0xd8c>
 8005dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dee:	3b01      	subs	r3, #1
 8005df0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	029b      	lsls	r3, r3, #10
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	e020      	b.n	8005e52 <USB_EPStartXfer+0xdea>
 8005e10:	463b      	mov	r3, r7
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d11b      	bne.n	8005e52 <USB_EPStartXfer+0xdea>
 8005e1a:	1d3b      	adds	r3, r7, #4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e30:	463b      	mov	r3, r7
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	011a      	lsls	r2, r3, #4
 8005e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e52:	463b      	mov	r3, r7
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	895b      	ldrh	r3, [r3, #10]
 8005e58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6959      	ldr	r1, [r3, #20]
 8005e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e6c:	1d38      	adds	r0, r7, #4
 8005e6e:	6800      	ldr	r0, [r0, #0]
 8005e70:	f000 fd1a 	bl	80068a8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	463b      	mov	r3, r7
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f107 020a 	add.w	r2, r7, #10
 8005e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e92:	8013      	strh	r3, [r2, #0]
 8005e94:	f107 030a 	add.w	r3, r7, #10
 8005e98:	f107 020a 	add.w	r2, r7, #10
 8005e9c:	8812      	ldrh	r2, [r2, #0]
 8005e9e:	f082 0210 	eor.w	r2, r2, #16
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	f107 030a 	add.w	r3, r7, #10
 8005ea8:	f107 020a 	add.w	r2, r7, #10
 8005eac:	8812      	ldrh	r2, [r2, #0]
 8005eae:	f082 0220 	eor.w	r2, r2, #32
 8005eb2:	801a      	strh	r2, [r3, #0]
 8005eb4:	1d3b      	adds	r3, r7, #4
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	463b      	mov	r3, r7
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	f107 030a 	add.w	r3, r7, #10
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	8013      	strh	r3, [r2, #0]
 8005edc:	e3b5      	b.n	800664a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005ede:	463b      	mov	r3, r7
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	7b1b      	ldrb	r3, [r3, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f040 8090 	bne.w	800600a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005eea:	463b      	mov	r3, r7
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699a      	ldr	r2, [r3, #24]
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d90e      	bls.n	8005f18 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005efa:	463b      	mov	r3, r7
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005f04:	463b      	mov	r3, r7
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	463b      	mov	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	619a      	str	r2, [r3, #24]
 8005f16:	e008      	b.n	8005f2a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005f18:	463b      	mov	r3, r7
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005f22:	463b      	mov	r3, r7
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2200      	movs	r2, #0
 8005f28:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f2a:	1d3b      	adds	r3, r7, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f32:	1d3b      	adds	r3, r7, #4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f42:	4413      	add	r3, r2
 8005f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f48:	463b      	mov	r3, r7
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	011a      	lsls	r2, r3, #4
 8005f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d116      	bne.n	8005f94 <USB_EPStartXfer+0xf2c>
 8005f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f78:	801a      	strh	r2, [r3, #0]
 8005f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	e32c      	b.n	80065ee <USB_EPStartXfer+0x1586>
 8005f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f98:	2b3e      	cmp	r3, #62	; 0x3e
 8005f9a:	d818      	bhi.n	8005fce <USB_EPStartXfer+0xf66>
 8005f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa0:	085b      	lsrs	r3, r3, #1
 8005fa2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d004      	beq.n	8005fbc <USB_EPStartXfer+0xf54>
 8005fb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005fbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	029b      	lsls	r3, r3, #10
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	e30f      	b.n	80065ee <USB_EPStartXfer+0x1586>
 8005fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fdc:	f003 031f 	and.w	r3, r3, #31
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d104      	bne.n	8005fee <USB_EPStartXfer+0xf86>
 8005fe4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005fee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	029b      	lsls	r3, r3, #10
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006000:	b29a      	uxth	r2, r3
 8006002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	e2f1      	b.n	80065ee <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800600a:	463b      	mov	r3, r7
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	78db      	ldrb	r3, [r3, #3]
 8006010:	2b02      	cmp	r3, #2
 8006012:	f040 818f 	bne.w	8006334 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006016:	463b      	mov	r3, r7
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d175      	bne.n	800610c <USB_EPStartXfer+0x10a4>
 8006020:	1d3b      	adds	r3, r7, #4
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006028:	1d3b      	adds	r3, r7, #4
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006030:	b29b      	uxth	r3, r3
 8006032:	461a      	mov	r2, r3
 8006034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006038:	4413      	add	r3, r2
 800603a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800603e:	463b      	mov	r3, r7
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	011a      	lsls	r2, r3, #4
 8006046:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800604a:	4413      	add	r3, r2
 800604c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006054:	463b      	mov	r3, r7
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d116      	bne.n	800608c <USB_EPStartXfer+0x1024>
 800605e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800606a:	b29a      	uxth	r2, r3
 800606c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800607e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006082:	b29a      	uxth	r2, r3
 8006084:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	e065      	b.n	8006158 <USB_EPStartXfer+0x10f0>
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b3e      	cmp	r3, #62	; 0x3e
 8006094:	d81a      	bhi.n	80060cc <USB_EPStartXfer+0x1064>
 8006096:	463b      	mov	r3, r7
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060a2:	463b      	mov	r3, r7
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <USB_EPStartXfer+0x1052>
 80060b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b4:	3301      	adds	r3, #1
 80060b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060be:	b29b      	uxth	r3, r3
 80060c0:	029b      	lsls	r3, r3, #10
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	e045      	b.n	8006158 <USB_EPStartXfer+0x10f0>
 80060cc:	463b      	mov	r3, r7
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060d8:	463b      	mov	r3, r7
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <USB_EPStartXfer+0x1088>
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ea:	3b01      	subs	r3, #1
 80060ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	029b      	lsls	r3, r3, #10
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006102:	b29a      	uxth	r2, r3
 8006104:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	e025      	b.n	8006158 <USB_EPStartXfer+0x10f0>
 800610c:	463b      	mov	r3, r7
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d120      	bne.n	8006158 <USB_EPStartXfer+0x10f0>
 8006116:	1d3b      	adds	r3, r7, #4
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800611e:	1d3b      	adds	r3, r7, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006126:	b29b      	uxth	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800612e:	4413      	add	r3, r2
 8006130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006134:	463b      	mov	r3, r7
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	011a      	lsls	r2, r3, #4
 800613c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006140:	4413      	add	r3, r2
 8006142:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006146:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800614a:	463b      	mov	r3, r7
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	b29a      	uxth	r2, r3
 8006152:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006156:	801a      	strh	r2, [r3, #0]
 8006158:	1d3b      	adds	r3, r7, #4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006160:	463b      	mov	r3, r7
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d175      	bne.n	8006256 <USB_EPStartXfer+0x11ee>
 800616a:	1d3b      	adds	r3, r7, #4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006172:	1d3b      	adds	r3, r7, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617a:	b29b      	uxth	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006182:	4413      	add	r3, r2
 8006184:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006188:	463b      	mov	r3, r7
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	011a      	lsls	r2, r3, #4
 8006190:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006194:	4413      	add	r3, r2
 8006196:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800619a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800619e:	463b      	mov	r3, r7
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d116      	bne.n	80061d6 <USB_EPStartXfer+0x116e>
 80061a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061d2:	801a      	strh	r2, [r3, #0]
 80061d4:	e061      	b.n	800629a <USB_EPStartXfer+0x1232>
 80061d6:	463b      	mov	r3, r7
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	2b3e      	cmp	r3, #62	; 0x3e
 80061de:	d81a      	bhi.n	8006216 <USB_EPStartXfer+0x11ae>
 80061e0:	463b      	mov	r3, r7
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061ec:	463b      	mov	r3, r7
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d004      	beq.n	8006204 <USB_EPStartXfer+0x119c>
 80061fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061fe:	3301      	adds	r3, #1
 8006200:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006204:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006208:	b29b      	uxth	r3, r3
 800620a:	029b      	lsls	r3, r3, #10
 800620c:	b29a      	uxth	r2, r3
 800620e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	e041      	b.n	800629a <USB_EPStartXfer+0x1232>
 8006216:	463b      	mov	r3, r7
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006222:	463b      	mov	r3, r7
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f003 031f 	and.w	r3, r3, #31
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <USB_EPStartXfer+0x11d2>
 8006230:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006234:	3b01      	subs	r3, #1
 8006236:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800623a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800623e:	b29b      	uxth	r3, r3
 8006240:	029b      	lsls	r3, r3, #10
 8006242:	b29b      	uxth	r3, r3
 8006244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624c:	b29a      	uxth	r2, r3
 800624e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	e021      	b.n	800629a <USB_EPStartXfer+0x1232>
 8006256:	463b      	mov	r3, r7
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d11c      	bne.n	800629a <USB_EPStartXfer+0x1232>
 8006260:	1d3b      	adds	r3, r7, #4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006268:	b29b      	uxth	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006270:	4413      	add	r3, r2
 8006272:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006276:	463b      	mov	r3, r7
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	011a      	lsls	r2, r3, #4
 800627e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006282:	4413      	add	r3, r2
 8006284:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006288:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800628c:	463b      	mov	r3, r7
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	b29a      	uxth	r2, r3
 8006294:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006298:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800629a:	463b      	mov	r3, r7
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 81a4 	beq.w	80065ee <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80062a6:	1d3b      	adds	r3, r7, #4
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	463b      	mov	r3, r7
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80062be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <USB_EPStartXfer+0x126a>
 80062c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10d      	bne.n	80062ee <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80062d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f040 8187 	bne.w	80065ee <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80062e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f040 8180 	bne.w	80065ee <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	463b      	mov	r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006308:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800630c:	1d3b      	adds	r3, r7, #4
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	463b      	mov	r3, r7
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800631e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800632e:	b29b      	uxth	r3, r3
 8006330:	8013      	strh	r3, [r2, #0]
 8006332:	e15c      	b.n	80065ee <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006334:	463b      	mov	r3, r7
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	78db      	ldrb	r3, [r3, #3]
 800633a:	2b01      	cmp	r3, #1
 800633c:	f040 8155 	bne.w	80065ea <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006340:	463b      	mov	r3, r7
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	463b      	mov	r3, r7
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	429a      	cmp	r2, r3
 800634e:	d90e      	bls.n	800636e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006350:	463b      	mov	r3, r7
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800635a:	463b      	mov	r3, r7
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006364:	1ad2      	subs	r2, r2, r3
 8006366:	463b      	mov	r3, r7
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	619a      	str	r2, [r3, #24]
 800636c:	e008      	b.n	8006380 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800636e:	463b      	mov	r3, r7
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006378:	463b      	mov	r3, r7
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2200      	movs	r2, #0
 800637e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d16f      	bne.n	800646a <USB_EPStartXfer+0x1402>
 800638a:	1d3b      	adds	r3, r7, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006392:	1d3b      	adds	r3, r7, #4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800639a:	b29b      	uxth	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063a2:	4413      	add	r3, r2
 80063a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063a8:	463b      	mov	r3, r7
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	011a      	lsls	r2, r3, #4
 80063b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063b4:	4413      	add	r3, r2
 80063b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d116      	bne.n	80063f4 <USB_EPStartXfer+0x138c>
 80063c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	e05f      	b.n	80064b4 <USB_EPStartXfer+0x144c>
 80063f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f8:	2b3e      	cmp	r3, #62	; 0x3e
 80063fa:	d818      	bhi.n	800642e <USB_EPStartXfer+0x13c6>
 80063fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006400:	085b      	lsrs	r3, r3, #1
 8006402:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <USB_EPStartXfer+0x13b4>
 8006412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006416:	3301      	adds	r3, #1
 8006418:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800641c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006420:	b29b      	uxth	r3, r3
 8006422:	029b      	lsls	r3, r3, #10
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e042      	b.n	80064b4 <USB_EPStartXfer+0x144c>
 800642e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <USB_EPStartXfer+0x13e6>
 8006444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006448:	3b01      	subs	r3, #1
 800644a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800644e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006452:	b29b      	uxth	r3, r3
 8006454:	029b      	lsls	r3, r3, #10
 8006456:	b29b      	uxth	r3, r3
 8006458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006460:	b29a      	uxth	r2, r3
 8006462:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e024      	b.n	80064b4 <USB_EPStartXfer+0x144c>
 800646a:	463b      	mov	r3, r7
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d11f      	bne.n	80064b4 <USB_EPStartXfer+0x144c>
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800647c:	1d3b      	adds	r3, r7, #4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006484:	b29b      	uxth	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	4413      	add	r3, r2
 800648e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006492:	463b      	mov	r3, r7
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	011a      	lsls	r2, r3, #4
 800649a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649e:	4413      	add	r3, r2
 80064a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064b2:	801a      	strh	r2, [r3, #0]
 80064b4:	1d3b      	adds	r3, r7, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064bc:	463b      	mov	r3, r7
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d16f      	bne.n	80065a6 <USB_EPStartXfer+0x153e>
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064ce:	1d3b      	adds	r3, r7, #4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064de:	4413      	add	r3, r2
 80064e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064e4:	463b      	mov	r3, r7
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	011a      	lsls	r2, r3, #4
 80064ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f0:	4413      	add	r3, r2
 80064f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d116      	bne.n	8006530 <USB_EPStartXfer+0x14c8>
 8006502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800650e:	b29a      	uxth	r2, r3
 8006510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006514:	801a      	strh	r2, [r3, #0]
 8006516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	e05e      	b.n	80065ee <USB_EPStartXfer+0x1586>
 8006530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006534:	2b3e      	cmp	r3, #62	; 0x3e
 8006536:	d818      	bhi.n	800656a <USB_EPStartXfer+0x1502>
 8006538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <USB_EPStartXfer+0x14f0>
 800654e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006552:	3301      	adds	r3, #1
 8006554:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006558:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800655c:	b29b      	uxth	r3, r3
 800655e:	029b      	lsls	r3, r3, #10
 8006560:	b29a      	uxth	r2, r3
 8006562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	e041      	b.n	80065ee <USB_EPStartXfer+0x1586>
 800656a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	2b00      	cmp	r3, #0
 800657e:	d104      	bne.n	800658a <USB_EPStartXfer+0x1522>
 8006580:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006584:	3b01      	subs	r3, #1
 8006586:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800658a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800658e:	b29b      	uxth	r3, r3
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	b29b      	uxth	r3, r3
 8006594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659c:	b29a      	uxth	r2, r3
 800659e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e023      	b.n	80065ee <USB_EPStartXfer+0x1586>
 80065a6:	463b      	mov	r3, r7
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d11e      	bne.n	80065ee <USB_EPStartXfer+0x1586>
 80065b0:	1d3b      	adds	r3, r7, #4
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c0:	4413      	add	r3, r2
 80065c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065c6:	463b      	mov	r3, r7
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	011a      	lsls	r2, r3, #4
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d2:	4413      	add	r3, r2
 80065d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	e001      	b.n	80065ee <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e02e      	b.n	800664c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	463b      	mov	r3, r7
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006608:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800660c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006610:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006614:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006618:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800661c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006620:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006624:	1d3b      	adds	r3, r7, #4
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	463b      	mov	r3, r7
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	441a      	add	r2, r3
 8006632:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006646:	b29b      	uxth	r3, r3
 8006648:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d020      	beq.n	80066aa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800667e:	81bb      	strh	r3, [r7, #12]
 8006680:	89bb      	ldrh	r3, [r7, #12]
 8006682:	f083 0310 	eor.w	r3, r3, #16
 8006686:	81bb      	strh	r3, [r7, #12]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	441a      	add	r2, r3
 8006692:	89bb      	ldrh	r3, [r7, #12]
 8006694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	8013      	strh	r3, [r2, #0]
 80066a8:	e01f      	b.n	80066ea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c0:	81fb      	strh	r3, [r7, #14]
 80066c2:	89fb      	ldrh	r3, [r7, #14]
 80066c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066c8:	81fb      	strh	r3, [r7, #14]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	441a      	add	r2, r3
 80066d4:	89fb      	ldrh	r3, [r7, #14]
 80066d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr

080066f6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b087      	sub	sp, #28
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	7b1b      	ldrb	r3, [r3, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 809d 	bne.w	8006844 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	785b      	ldrb	r3, [r3, #1]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d04c      	beq.n	80067ac <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	823b      	strh	r3, [r7, #16]
 8006720:	8a3b      	ldrh	r3, [r7, #16]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d01b      	beq.n	8006762 <USB_EPClearStall+0x6c>
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006740:	81fb      	strh	r3, [r7, #14]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	441a      	add	r2, r3
 800674c:	89fb      	ldrh	r3, [r7, #14]
 800674e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800675a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800675e:	b29b      	uxth	r3, r3
 8006760:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	78db      	ldrb	r3, [r3, #3]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d06c      	beq.n	8006844 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006780:	81bb      	strh	r3, [r7, #12]
 8006782:	89bb      	ldrh	r3, [r7, #12]
 8006784:	f083 0320 	eor.w	r3, r3, #32
 8006788:	81bb      	strh	r3, [r7, #12]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	441a      	add	r2, r3
 8006794:	89bb      	ldrh	r3, [r7, #12]
 8006796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	8013      	strh	r3, [r2, #0]
 80067aa:	e04b      	b.n	8006844 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	82fb      	strh	r3, [r7, #22]
 80067ba:	8afb      	ldrh	r3, [r7, #22]
 80067bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01b      	beq.n	80067fc <USB_EPClearStall+0x106>
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067da:	82bb      	strh	r3, [r7, #20]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	441a      	add	r2, r3
 80067e6:	8abb      	ldrh	r3, [r7, #20]
 80067e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800680e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006812:	827b      	strh	r3, [r7, #18]
 8006814:	8a7b      	ldrh	r3, [r7, #18]
 8006816:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800681a:	827b      	strh	r3, [r7, #18]
 800681c:	8a7b      	ldrh	r3, [r7, #18]
 800681e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006822:	827b      	strh	r3, [r7, #18]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	441a      	add	r2, r3
 800682e:	8a7b      	ldrh	r3, [r7, #18]
 8006830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006840:	b29b      	uxth	r3, r3
 8006842:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d103      	bne.n	800686a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2280      	movs	r2, #128	; 0x80
 8006866:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr

08006876 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr

0800688a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800688a:	b480      	push	{r7}
 800688c:	b085      	sub	sp, #20
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006898:	b29b      	uxth	r3, r3
 800689a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800689c:	68fb      	ldr	r3, [r7, #12]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr

080068a8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b08d      	sub	sp, #52	; 0x34
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4611      	mov	r1, r2
 80068b4:	461a      	mov	r2, r3
 80068b6:	460b      	mov	r3, r1
 80068b8:	80fb      	strh	r3, [r7, #6]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068be:	88bb      	ldrh	r3, [r7, #4]
 80068c0:	3301      	adds	r3, #1
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	005a      	lsls	r2, r3, #1
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e0:	e01e      	b.n	8006920 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	3301      	adds	r3, #1
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	461a      	mov	r2, r3
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	b29a      	uxth	r2, r3
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	3302      	adds	r3, #2
 800690c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	3302      	adds	r3, #2
 8006912:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	3301      	adds	r3, #1
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	3b01      	subs	r3, #1
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1dd      	bne.n	80068e2 <USB_WritePMA+0x3a>
  }
}
 8006926:	bf00      	nop
 8006928:	bf00      	nop
 800692a:	3734      	adds	r7, #52	; 0x34
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006932:	b480      	push	{r7}
 8006934:	b08b      	sub	sp, #44	; 0x2c
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	4611      	mov	r1, r2
 800693e:	461a      	mov	r2, r3
 8006940:	460b      	mov	r3, r1
 8006942:	80fb      	strh	r3, [r7, #6]
 8006944:	4613      	mov	r3, r2
 8006946:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006948:	88bb      	ldrh	r3, [r7, #4]
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	b29b      	uxth	r3, r3
 800694e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	005a      	lsls	r2, r3, #1
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006964:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
 800696a:	e01b      	b.n	80069a4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	3302      	adds	r3, #2
 8006978:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	b2da      	uxtb	r2, r3
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	3301      	adds	r3, #1
 8006986:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	0a1b      	lsrs	r3, r3, #8
 800698c:	b2da      	uxtb	r2, r3
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	3301      	adds	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	3302      	adds	r3, #2
 800699c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	3b01      	subs	r3, #1
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e0      	bne.n	800696c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80069aa:	88bb      	ldrh	r3, [r7, #4]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	701a      	strb	r2, [r3, #0]
  }
}
 80069c6:	bf00      	nop
 80069c8:	372c      	adds	r7, #44	; 0x2c
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7c1b      	ldrb	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d115      	bne.n	8006a14 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069ec:	2202      	movs	r2, #2
 80069ee:	2181      	movs	r1, #129	; 0x81
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fe74 	bl	80086de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a00:	2202      	movs	r2, #2
 8006a02:	2101      	movs	r1, #1
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fe6a 	bl	80086de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006a12:	e012      	b.n	8006a3a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a14:	2340      	movs	r3, #64	; 0x40
 8006a16:	2202      	movs	r2, #2
 8006a18:	2181      	movs	r1, #129	; 0x81
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 fe5f 	bl	80086de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a26:	2340      	movs	r3, #64	; 0x40
 8006a28:	2202      	movs	r2, #2
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fe56 	bl	80086de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	2182      	movs	r1, #130	; 0x82
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fe4c 	bl	80086de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006a4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a50:	f001 ff6c 	bl	800892c <USBD_static_malloc>
 8006a54:	4602      	mov	r2, r0
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d102      	bne.n	8006a6c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006a66:	2301      	movs	r3, #1
 8006a68:	73fb      	strb	r3, [r7, #15]
 8006a6a:	e026      	b.n	8006aba <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a72:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	7c1b      	ldrb	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 ff0c 	bl	80088c0 <USBD_LL_PrepareReceive>
 8006aa8:	e007      	b.n	8006aba <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ab0:	2340      	movs	r3, #64	; 0x40
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 ff03 	bl	80088c0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ad4:	2181      	movs	r1, #129	; 0x81
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fe27 	bl	800872a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 fe20 	bl	800872a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006af2:	2182      	movs	r1, #130	; 0x82
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 fe18 	bl	800872a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 ff12 	bl	8008944 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b42:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d039      	beq.n	8006bd0 <USBD_CDC_Setup+0x9e>
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d17f      	bne.n	8006c60 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	88db      	ldrh	r3, [r3, #6]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d029      	beq.n	8006bbc <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b25b      	sxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	da11      	bge.n	8006b96 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006b7e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	88d2      	ldrh	r2, [r2, #6]
 8006b84:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b86:	6939      	ldr	r1, [r7, #16]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	88db      	ldrh	r3, [r3, #6]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 f993 	bl	8007eba <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006b94:	e06b      	b.n	8006c6e <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	785a      	ldrb	r2, [r3, #1]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	88db      	ldrh	r3, [r3, #6]
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006bac:	6939      	ldr	r1, [r7, #16]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	88db      	ldrh	r3, [r3, #6]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f9ae 	bl	8007f16 <USBD_CtlPrepareRx>
    break;
 8006bba:	e058      	b.n	8006c6e <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	7850      	ldrb	r0, [r2, #1]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	4798      	blx	r3
    break;
 8006bce:	e04e      	b.n	8006c6e <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b0b      	cmp	r3, #11
 8006bd6:	d02e      	beq.n	8006c36 <USBD_CDC_Setup+0x104>
 8006bd8:	2b0b      	cmp	r3, #11
 8006bda:	dc38      	bgt.n	8006c4e <USBD_CDC_Setup+0x11c>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <USBD_CDC_Setup+0xb4>
 8006be0:	2b0a      	cmp	r3, #10
 8006be2:	d014      	beq.n	8006c0e <USBD_CDC_Setup+0xdc>
 8006be4:	e033      	b.n	8006c4e <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d107      	bne.n	8006c00 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006bf0:	f107 030c 	add.w	r3, r7, #12
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f95e 	bl	8007eba <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006bfe:	e02e      	b.n	8006c5e <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 f8ef 	bl	8007de6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0c:	e027      	b.n	8006c5e <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d107      	bne.n	8006c28 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006c18:	f107 030f 	add.w	r3, r7, #15
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f94a 	bl	8007eba <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006c26:	e01a      	b.n	8006c5e <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 f8db 	bl	8007de6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c30:	2302      	movs	r3, #2
 8006c32:	75fb      	strb	r3, [r7, #23]
      break;
 8006c34:	e013      	b.n	8006c5e <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d00d      	beq.n	8006c5c <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 f8cf 	bl	8007de6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c4c:	e006      	b.n	8006c5c <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 f8c8 	bl	8007de6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c56:	2302      	movs	r3, #2
 8006c58:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5a:	e000      	b.n	8006c5e <USBD_CDC_Setup+0x12c>
      break;
 8006c5c:	bf00      	nop
    }
    break;
 8006c5e:	e006      	b.n	8006c6e <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 f8bf 	bl	8007de6 <USBD_CtlError>
    ret = USBD_FAIL;
 8006c68:	2302      	movs	r3, #2
 8006c6a:	75fb      	strb	r3, [r7, #23]
    break;
 8006c6c:	bf00      	nop
  }

  return ret;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c8a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006c92:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d03a      	beq.n	8006d14 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	331c      	adds	r3, #28
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d029      	beq.n	8006d08 <USBD_CDC_DataIn+0x90>
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	331c      	adds	r3, #28
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	78f9      	ldrb	r1, [r7, #3]
 8006cc8:	68b8      	ldr	r0, [r7, #8]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	4403      	add	r3, r0
 8006cd4:	3338      	adds	r3, #56	; 0x38
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006cdc:	fb03 f301 	mul.w	r3, r3, r1
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d110      	bne.n	8006d08 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ce6:	78fa      	ldrb	r2, [r7, #3]
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	331c      	adds	r3, #28
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006cfa:	78f9      	ldrb	r1, [r7, #3]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2200      	movs	r2, #0
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 fdba 	bl	800887a <USBD_LL_Transmit>
 8006d06:	e003      	b.n	8006d10 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 fde5 	bl	8008906 <USBD_LL_GetRxDataSize>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00d      	beq.n	8006d6a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006d62:	4611      	mov	r1, r2
 8006d64:	4798      	blx	r3

    return USBD_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e000      	b.n	8006d6c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006d6a:	2302      	movs	r3, #2
  }
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d82:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d015      	beq.n	8006dba <USBD_CDC_EP0_RxReady+0x46>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d94:	2bff      	cmp	r3, #255	; 0xff
 8006d96:	d010      	beq.n	8006dba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006da6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006dae:	b292      	uxth	r2, r2
 8006db0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	22ff      	movs	r2, #255	; 0xff
 8006db6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2243      	movs	r2, #67	; 0x43
 8006dd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006dd2:	4b03      	ldr	r3, [pc, #12]	; (8006de0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	200000a8 	.word	0x200000a8

08006de4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2243      	movs	r2, #67	; 0x43
 8006df0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006df2:	4b03      	ldr	r3, [pc, #12]	; (8006e00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20000064 	.word	0x20000064

08006e04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2243      	movs	r2, #67	; 0x43
 8006e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006e12:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	200000ec 	.word	0x200000ec

08006e24 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	220a      	movs	r2, #10
 8006e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006e32:	4b03      	ldr	r3, [pc, #12]	; (8006e40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	20000020 	.word	0x20000020

08006e44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc80      	pop	{r7}
 8006e6e:	4770      	bx	lr

08006e70 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e84:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e8e:	88fa      	ldrh	r2, [r7, #6]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006eb2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ed6:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01c      	beq.n	8006f1c <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d115      	bne.n	8006f18 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2181      	movs	r1, #129	; 0x81
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fcb3 	bl	800887a <USBD_LL_Transmit>

      return USBD_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	e002      	b.n	8006f1e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006f1c:	2302      	movs	r3, #2
  }
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d017      	beq.n	8006f70 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	7c1b      	ldrb	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d109      	bne.n	8006f5c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f52:	2101      	movs	r1, #1
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fcb3 	bl	80088c0 <USBD_LL_PrepareReceive>
 8006f5a:	e007      	b.n	8006f6c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f62:	2340      	movs	r3, #64	; 0x40
 8006f64:	2101      	movs	r1, #1
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 fcaa 	bl	80088c0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e000      	b.n	8006f72 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006f70:	2302      	movs	r3, #2
  }
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	4613      	mov	r3, r2
 8006f86:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e01a      	b.n	8006fc8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	79fa      	ldrb	r2, [r7, #7]
 8006fbe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f001 fb17 	bl	80085f4 <USBD_LL_Init>

  return USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]
 8006ff0:	e001      	b.n	8006ff6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr

08007002 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fb4c 	bl	80086a8 <USBD_LL_Start>

  return USBD_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr

0800702e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800703a:	2302      	movs	r3, #2
 800703c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	4611      	mov	r1, r2
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	4611      	mov	r1, r2
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	4798      	blx	r3
  return USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fe62 	bl	8007d6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80070b8:	461a      	mov	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80070c6:	f003 031f 	and.w	r3, r3, #31
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d016      	beq.n	80070fc <USBD_LL_SetupStage+0x6a>
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d81c      	bhi.n	800710c <USBD_LL_SetupStage+0x7a>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <USBD_LL_SetupStage+0x4a>
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d008      	beq.n	80070ec <USBD_LL_SetupStage+0x5a>
 80070da:	e017      	b.n	800710c <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f9c5 	bl	8007474 <USBD_StdDevReq>
    break;
 80070ea:	e01a      	b.n	8007122 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa27 	bl	8007548 <USBD_StdItfReq>
    break;
 80070fa:	e012      	b.n	8007122 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fa67 	bl	80075d8 <USBD_StdEPReq>
    break;
 800710a:	e00a      	b.n	8007122 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007112:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007116:	b2db      	uxtb	r3, r3
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 fb24 	bl	8008768 <USBD_LL_StallEP>
    break;
 8007120:	bf00      	nop
  }

  return USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	460b      	mov	r3, r1
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800713a:	7afb      	ldrb	r3, [r7, #11]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d14b      	bne.n	80071d8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007146:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800714e:	2b03      	cmp	r3, #3
 8007150:	d134      	bne.n	80071bc <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	d919      	bls.n	8007192 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	1ad2      	subs	r2, r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007174:	429a      	cmp	r2, r3
 8007176:	d203      	bcs.n	8007180 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800717c:	b29b      	uxth	r3, r3
 800717e:	e002      	b.n	8007186 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007184:	b29b      	uxth	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fee1 	bl	8007f52 <USBD_CtlContinueRx>
 8007190:	e038      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d105      	bne.n	80071b4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 fede 	bl	8007f76 <USBD_CtlSendStatus>
 80071ba:	e023      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80071c2:	2b05      	cmp	r3, #5
 80071c4:	d11e      	bne.n	8007204 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80071ce:	2100      	movs	r1, #0
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f001 fac9 	bl	8008768 <USBD_LL_StallEP>
 80071d6:	e015      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00d      	beq.n	8007200 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d108      	bne.n	8007200 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	7afa      	ldrb	r2, [r7, #11]
 80071f8:	4611      	mov	r1, r2
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	4798      	blx	r3
 80071fe:	e001      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007200:	2302      	movs	r3, #2
 8007202:	e000      	b.n	8007206 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	460b      	mov	r3, r1
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d17f      	bne.n	8007322 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3314      	adds	r3, #20
 8007226:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800722e:	2b02      	cmp	r3, #2
 8007230:	d15c      	bne.n	80072ec <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	429a      	cmp	r2, r3
 800723c:	d915      	bls.n	800726a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	b29b      	uxth	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fe4b 	bl	8007ef2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800725c:	2300      	movs	r3, #0
 800725e:	2200      	movs	r2, #0
 8007260:	2100      	movs	r1, #0
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f001 fb2c 	bl	80088c0 <USBD_LL_PrepareReceive>
 8007268:	e04e      	b.n	8007308 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	6912      	ldr	r2, [r2, #16]
 8007272:	fbb3 f1f2 	udiv	r1, r3, r2
 8007276:	fb02 f201 	mul.w	r2, r2, r1
 800727a:	1a9b      	subs	r3, r3, r2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d11c      	bne.n	80072ba <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007288:	429a      	cmp	r2, r3
 800728a:	d316      	bcc.n	80072ba <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007296:	429a      	cmp	r2, r3
 8007298:	d20f      	bcs.n	80072ba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800729a:	2200      	movs	r2, #0
 800729c:	2100      	movs	r1, #0
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fe27 	bl	8007ef2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80072ac:	2300      	movs	r3, #0
 80072ae:	2200      	movs	r2, #0
 80072b0:	2100      	movs	r1, #0
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f001 fb04 	bl	80088c0 <USBD_LL_PrepareReceive>
 80072b8:	e026      	b.n	8007308 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d105      	bne.n	80072dc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072dc:	2180      	movs	r1, #128	; 0x80
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f001 fa42 	bl	8008768 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fe59 	bl	8007f9c <USBD_CtlReceiveStatus>
 80072ea:	e00d      	b.n	8007308 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d004      	beq.n	8007300 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d103      	bne.n	8007308 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007300:	2180      	movs	r1, #128	; 0x80
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 fa30 	bl	8008768 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800730e:	2b01      	cmp	r3, #1
 8007310:	d11d      	bne.n	800734e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7ff fe81 	bl	800701a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007320:	e015      	b.n	800734e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007334:	2b03      	cmp	r3, #3
 8007336:	d108      	bne.n	800734a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	7afa      	ldrb	r2, [r7, #11]
 8007342:	4611      	mov	r1, r2
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	4798      	blx	r3
 8007348:	e001      	b.n	800734e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800734a:	2302      	movs	r3, #2
 800734c:	e000      	b.n	8007350 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	2200      	movs	r2, #0
 8007364:	2100      	movs	r1, #0
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f9b9 	bl	80086de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2240      	movs	r2, #64	; 0x40
 8007378:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800737c:	2340      	movs	r3, #64	; 0x40
 800737e:	2200      	movs	r2, #0
 8007380:	2180      	movs	r1, #128	; 0x80
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 f9ab 	bl	80086de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2240      	movs	r2, #64	; 0x40
 8007392:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d009      	beq.n	80073d0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6852      	ldr	r2, [r2, #4]
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	4611      	mov	r1, r2
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
  }

  return USBD_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	460b      	mov	r3, r1
 80073e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	78fa      	ldrb	r2, [r7, #3]
 80073ea:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr

080073f8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2204      	movs	r2, #4
 8007410:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr

08007420 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	bc80      	pop	{r7}
 800743e:	4770      	bx	lr

08007440 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800744e:	2b03      	cmp	r3, #3
 8007450:	d10b      	bne.n	800746a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d005      	beq.n	800749a <USBD_StdDevReq+0x26>
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d84f      	bhi.n	8007532 <USBD_StdDevReq+0xbe>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <USBD_StdDevReq+0x36>
 8007496:	2b20      	cmp	r3, #32
 8007498:	d14b      	bne.n	8007532 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3
    break;
 80074a8:	e048      	b.n	800753c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	d839      	bhi.n	8007526 <USBD_StdDevReq+0xb2>
 80074b2:	a201      	add	r2, pc, #4	; (adr r2, 80074b8 <USBD_StdDevReq+0x44>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	08007509 	.word	0x08007509
 80074bc:	0800751d 	.word	0x0800751d
 80074c0:	08007527 	.word	0x08007527
 80074c4:	08007513 	.word	0x08007513
 80074c8:	08007527 	.word	0x08007527
 80074cc:	080074eb 	.word	0x080074eb
 80074d0:	080074e1 	.word	0x080074e1
 80074d4:	08007527 	.word	0x08007527
 80074d8:	080074ff 	.word	0x080074ff
 80074dc:	080074f5 	.word	0x080074f5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f9da 	bl	800789c <USBD_GetDescriptor>
      break;
 80074e8:	e022      	b.n	8007530 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 facf 	bl	8007a90 <USBD_SetAddress>
      break;
 80074f2:	e01d      	b.n	8007530 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fb0e 	bl	8007b18 <USBD_SetConfig>
      break;
 80074fc:	e018      	b.n	8007530 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb97 	bl	8007c34 <USBD_GetConfig>
      break;
 8007506:	e013      	b.n	8007530 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fbc7 	bl	8007c9e <USBD_GetStatus>
      break;
 8007510:	e00e      	b.n	8007530 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fbf5 	bl	8007d04 <USBD_SetFeature>
      break;
 800751a:	e009      	b.n	8007530 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fc04 	bl	8007d2c <USBD_ClrFeature>
      break;
 8007524:	e004      	b.n	8007530 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fc5c 	bl	8007de6 <USBD_CtlError>
      break;
 800752e:	bf00      	nop
    }
    break;
 8007530:	e004      	b.n	800753c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fc56 	bl	8007de6 <USBD_CtlError>
    break;
 800753a:	bf00      	nop
  }

  return ret;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop

08007548 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d005      	beq.n	800756e <USBD_StdItfReq+0x26>
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d82e      	bhi.n	80075c4 <USBD_StdItfReq+0x7c>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <USBD_StdItfReq+0x26>
 800756a:	2b20      	cmp	r3, #32
 800756c:	d12a      	bne.n	80075c4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007574:	3b01      	subs	r3, #1
 8007576:	2b02      	cmp	r3, #2
 8007578:	d81d      	bhi.n	80075b6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	889b      	ldrh	r3, [r3, #4]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b01      	cmp	r3, #1
 8007582:	d813      	bhi.n	80075ac <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
 8007592:	4603      	mov	r3, r0
 8007594:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d110      	bne.n	80075c0 <USBD_StdItfReq+0x78>
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10d      	bne.n	80075c0 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fce6 	bl	8007f76 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80075aa:	e009      	b.n	80075c0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fc19 	bl	8007de6 <USBD_CtlError>
      break;
 80075b4:	e004      	b.n	80075c0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fc14 	bl	8007de6 <USBD_CtlError>
      break;
 80075be:	e000      	b.n	80075c2 <USBD_StdItfReq+0x7a>
      break;
 80075c0:	bf00      	nop
    }
    break;
 80075c2:	e004      	b.n	80075ce <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fc0d 	bl	8007de6 <USBD_CtlError>
    break;
 80075cc:	bf00      	nop
  }

  return USBD_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	889b      	ldrh	r3, [r3, #4]
 80075ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d007      	beq.n	8007608 <USBD_StdEPReq+0x30>
 80075f8:	2b40      	cmp	r3, #64	; 0x40
 80075fa:	f200 8144 	bhi.w	8007886 <USBD_StdEPReq+0x2ae>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <USBD_StdEPReq+0x40>
 8007602:	2b20      	cmp	r3, #32
 8007604:	f040 813f 	bne.w	8007886 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
    break;
 8007616:	e13b      	b.n	8007890 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007620:	2b20      	cmp	r3, #32
 8007622:	d10a      	bne.n	800763a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
 8007632:	4603      	mov	r3, r0
 8007634:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	e12b      	b.n	8007892 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b03      	cmp	r3, #3
 8007640:	d007      	beq.n	8007652 <USBD_StdEPReq+0x7a>
 8007642:	2b03      	cmp	r3, #3
 8007644:	f300 8119 	bgt.w	800787a <USBD_StdEPReq+0x2a2>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d072      	beq.n	8007732 <USBD_StdEPReq+0x15a>
 800764c:	2b01      	cmp	r3, #1
 800764e:	d03a      	beq.n	80076c6 <USBD_StdEPReq+0xee>
 8007650:	e113      	b.n	800787a <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007658:	2b02      	cmp	r3, #2
 800765a:	d002      	beq.n	8007662 <USBD_StdEPReq+0x8a>
 800765c:	2b03      	cmp	r3, #3
 800765e:	d015      	beq.n	800768c <USBD_StdEPReq+0xb4>
 8007660:	e02b      	b.n	80076ba <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00c      	beq.n	8007682 <USBD_StdEPReq+0xaa>
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	2b80      	cmp	r3, #128	; 0x80
 800766c:	d009      	beq.n	8007682 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 f878 	bl	8008768 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007678:	2180      	movs	r1, #128	; 0x80
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 f874 	bl	8008768 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007680:	e020      	b.n	80076c4 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fbae 	bl	8007de6 <USBD_CtlError>
        break;
 800768a:	e01b      	b.n	80076c4 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	885b      	ldrh	r3, [r3, #2]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10e      	bne.n	80076b2 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00b      	beq.n	80076b2 <USBD_StdEPReq+0xda>
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	2b80      	cmp	r3, #128	; 0x80
 800769e:	d008      	beq.n	80076b2 <USBD_StdEPReq+0xda>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	88db      	ldrh	r3, [r3, #6]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 f85b 	bl	8008768 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fc5f 	bl	8007f76 <USBD_CtlSendStatus>

        break;
 80076b8:	e004      	b.n	80076c4 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fb92 	bl	8007de6 <USBD_CtlError>
        break;
 80076c2:	bf00      	nop
      }
      break;
 80076c4:	e0de      	b.n	8007884 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d002      	beq.n	80076d6 <USBD_StdEPReq+0xfe>
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d015      	beq.n	8007700 <USBD_StdEPReq+0x128>
 80076d4:	e026      	b.n	8007724 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00c      	beq.n	80076f6 <USBD_StdEPReq+0x11e>
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	2b80      	cmp	r3, #128	; 0x80
 80076e0:	d009      	beq.n	80076f6 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80076e2:	7bbb      	ldrb	r3, [r7, #14]
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f001 f83e 	bl	8008768 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80076ec:	2180      	movs	r1, #128	; 0x80
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f001 f83a 	bl	8008768 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80076f4:	e01c      	b.n	8007730 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fb74 	bl	8007de6 <USBD_CtlError>
        break;
 80076fe:	e017      	b.n	8007730 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	885b      	ldrh	r3, [r3, #2]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d112      	bne.n	800772e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 f845 	bl	80087a6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fc2a 	bl	8007f76 <USBD_CtlSendStatus>
        }
        break;
 8007722:	e004      	b.n	800772e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fb5d 	bl	8007de6 <USBD_CtlError>
        break;
 800772c:	e000      	b.n	8007730 <USBD_StdEPReq+0x158>
        break;
 800772e:	bf00      	nop
      }
      break;
 8007730:	e0a8      	b.n	8007884 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007738:	2b02      	cmp	r3, #2
 800773a:	d002      	beq.n	8007742 <USBD_StdEPReq+0x16a>
 800773c:	2b03      	cmp	r3, #3
 800773e:	d031      	beq.n	80077a4 <USBD_StdEPReq+0x1cc>
 8007740:	e095      	b.n	800786e <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <USBD_StdEPReq+0x180>
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	2b80      	cmp	r3, #128	; 0x80
 800774c:	d004      	beq.n	8007758 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb48 	bl	8007de6 <USBD_CtlError>
          break;
 8007756:	e08f      	b.n	8007878 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da0b      	bge.n	8007778 <USBD_StdEPReq+0x1a0>
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	3310      	adds	r3, #16
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	4413      	add	r3, r2
 8007774:	3304      	adds	r3, #4
 8007776:	e00a      	b.n	800778e <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2202      	movs	r2, #2
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fb8c 	bl	8007eba <USBD_CtlSendData>
          break;
 80077a2:	e069      	b.n	8007878 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80077a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	da11      	bge.n	80077d0 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	f003 020f 	and.w	r2, r3, #15
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	3318      	adds	r3, #24
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d117      	bne.n	80077f6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fb0c 	bl	8007de6 <USBD_CtlError>
            break;
 80077ce:	e053      	b.n	8007878 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	f003 020f 	and.w	r2, r3, #15
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	4613      	mov	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 faf9 	bl	8007de6 <USBD_CtlError>
            break;
 80077f4:	e040      	b.n	8007878 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da0b      	bge.n	8007816 <USBD_StdEPReq+0x23e>
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007804:	4613      	mov	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	3310      	adds	r3, #16
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4413      	add	r3, r2
 8007812:	3304      	adds	r3, #4
 8007814:	e00a      	b.n	800782c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	4413      	add	r3, r2
 800782c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <USBD_StdEPReq+0x262>
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	2b80      	cmp	r3, #128	; 0x80
 8007838:	d103      	bne.n	8007842 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	e00e      	b.n	8007860 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 ffcc 	bl	80087e4 <USBD_LL_IsStallEP>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	e002      	b.n	8007860 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2202      	movs	r2, #2
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fb27 	bl	8007eba <USBD_CtlSendData>
          break;
 800786c:	e004      	b.n	8007878 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fab8 	bl	8007de6 <USBD_CtlError>
        break;
 8007876:	bf00      	nop
      }
      break;
 8007878:	e004      	b.n	8007884 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fab2 	bl	8007de6 <USBD_CtlError>
      break;
 8007882:	bf00      	nop
    }
    break;
 8007884:	e004      	b.n	8007890 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 faac 	bl	8007de6 <USBD_CtlError>
    break;
 800788e:	bf00      	nop
  }

  return ret;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	2b06      	cmp	r3, #6
 80078b2:	f200 80c9 	bhi.w	8007a48 <USBD_GetDescriptor+0x1ac>
 80078b6:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <USBD_GetDescriptor+0x20>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	080078d9 	.word	0x080078d9
 80078c0:	080078f1 	.word	0x080078f1
 80078c4:	08007931 	.word	0x08007931
 80078c8:	08007a49 	.word	0x08007a49
 80078cc:	08007a49 	.word	0x08007a49
 80078d0:	080079f5 	.word	0x080079f5
 80078d4:	08007a1b 	.word	0x08007a1b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	7c12      	ldrb	r2, [r2, #16]
 80078e4:	f107 010a 	add.w	r1, r7, #10
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3
 80078ec:	60f8      	str	r0, [r7, #12]
    break;
 80078ee:	e0b0      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	7c1b      	ldrb	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10d      	bne.n	8007914 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	f107 020a 	add.w	r2, r7, #10
 8007904:	4610      	mov	r0, r2
 8007906:	4798      	blx	r3
 8007908:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3301      	adds	r3, #1
 800790e:	2202      	movs	r2, #2
 8007910:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007912:	e09e      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	f107 020a 	add.w	r2, r7, #10
 8007920:	4610      	mov	r0, r2
 8007922:	4798      	blx	r3
 8007924:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3301      	adds	r3, #1
 800792a:	2202      	movs	r2, #2
 800792c:	701a      	strb	r2, [r3, #0]
    break;
 800792e:	e090      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	885b      	ldrh	r3, [r3, #2]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b05      	cmp	r3, #5
 8007938:	d856      	bhi.n	80079e8 <USBD_GetDescriptor+0x14c>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <USBD_GetDescriptor+0xa4>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007959 	.word	0x08007959
 8007944:	08007971 	.word	0x08007971
 8007948:	08007989 	.word	0x08007989
 800794c:	080079a1 	.word	0x080079a1
 8007950:	080079b9 	.word	0x080079b9
 8007954:	080079d1 	.word	0x080079d1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	7c12      	ldrb	r2, [r2, #16]
 8007964:	f107 010a 	add.w	r1, r7, #10
 8007968:	4610      	mov	r0, r2
 800796a:	4798      	blx	r3
 800796c:	60f8      	str	r0, [r7, #12]
      break;
 800796e:	e040      	b.n	80079f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	7c12      	ldrb	r2, [r2, #16]
 800797c:	f107 010a 	add.w	r1, r7, #10
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	60f8      	str	r0, [r7, #12]
      break;
 8007986:	e034      	b.n	80079f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	7c12      	ldrb	r2, [r2, #16]
 8007994:	f107 010a 	add.w	r1, r7, #10
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
      break;
 800799e:	e028      	b.n	80079f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	7c12      	ldrb	r2, [r2, #16]
 80079ac:	f107 010a 	add.w	r1, r7, #10
 80079b0:	4610      	mov	r0, r2
 80079b2:	4798      	blx	r3
 80079b4:	60f8      	str	r0, [r7, #12]
      break;
 80079b6:	e01c      	b.n	80079f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	7c12      	ldrb	r2, [r2, #16]
 80079c4:	f107 010a 	add.w	r1, r7, #10
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	60f8      	str	r0, [r7, #12]
      break;
 80079ce:	e010      	b.n	80079f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	7c12      	ldrb	r2, [r2, #16]
 80079dc:	f107 010a 	add.w	r1, r7, #10
 80079e0:	4610      	mov	r0, r2
 80079e2:	4798      	blx	r3
 80079e4:	60f8      	str	r0, [r7, #12]
      break;
 80079e6:	e004      	b.n	80079f2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f9fb 	bl	8007de6 <USBD_CtlError>
      return;
 80079f0:	e04b      	b.n	8007a8a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80079f2:	e02e      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7c1b      	ldrb	r3, [r3, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d109      	bne.n	8007a10 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a04:	f107 020a 	add.w	r2, r7, #10
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
 8007a0c:	60f8      	str	r0, [r7, #12]
      break;
 8007a0e:	e020      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f9e7 	bl	8007de6 <USBD_CtlError>
      return;
 8007a18:	e037      	b.n	8007a8a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7c1b      	ldrb	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10d      	bne.n	8007a3e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2a:	f107 020a 	add.w	r2, r7, #10
 8007a2e:	4610      	mov	r0, r2
 8007a30:	4798      	blx	r3
 8007a32:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3301      	adds	r3, #1
 8007a38:	2207      	movs	r2, #7
 8007a3a:	701a      	strb	r2, [r3, #0]
      break;
 8007a3c:	e009      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f9d0 	bl	8007de6 <USBD_CtlError>
      return;
 8007a46:	e020      	b.n	8007a8a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f9cb 	bl	8007de6 <USBD_CtlError>
    return;
 8007a50:	e01b      	b.n	8007a8a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007a52:	897b      	ldrh	r3, [r7, #10]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d011      	beq.n	8007a7c <USBD_GetDescriptor+0x1e0>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	88db      	ldrh	r3, [r3, #6]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00d      	beq.n	8007a7c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	88da      	ldrh	r2, [r3, #6]
 8007a64:	897b      	ldrh	r3, [r7, #10]
 8007a66:	4293      	cmp	r3, r2
 8007a68:	bf28      	it	cs
 8007a6a:	4613      	movcs	r3, r2
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007a70:	897b      	ldrh	r3, [r7, #10]
 8007a72:	461a      	mov	r2, r3
 8007a74:	68f9      	ldr	r1, [r7, #12]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fa1f 	bl	8007eba <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	88db      	ldrh	r3, [r3, #6]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fa76 	bl	8007f76 <USBD_CtlSendStatus>
  }
}
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	889b      	ldrh	r3, [r3, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d130      	bne.n	8007b04 <USBD_SetAddress+0x74>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	88db      	ldrh	r3, [r3, #6]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d12c      	bne.n	8007b04 <USBD_SetAddress+0x74>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	885b      	ldrh	r3, [r3, #2]
 8007aae:	2b7f      	cmp	r3, #127	; 0x7f
 8007ab0:	d828      	bhi.n	8007b04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	885b      	ldrh	r3, [r3, #2]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007abc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d104      	bne.n	8007ad2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f98b 	bl	8007de6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad0:	e01d      	b.n	8007b0e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	7bfa      	ldrb	r2, [r7, #15]
 8007ad6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 feac 	bl	800883c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fa46 	bl	8007f76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	e009      	b.n	8007b0e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b02:	e004      	b.n	8007b0e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f96d 	bl	8007de6 <USBD_CtlError>
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	885b      	ldrh	r3, [r3, #2]
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	4b41      	ldr	r3, [pc, #260]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b2c:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d904      	bls.n	8007b3e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f955 	bl	8007de6 <USBD_CtlError>
 8007b3c:	e075      	b.n	8007c2a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d002      	beq.n	8007b4e <USBD_SetConfig+0x36>
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d023      	beq.n	8007b94 <USBD_SetConfig+0x7c>
 8007b4c:	e062      	b.n	8007c14 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007b4e:	4b38      	ldr	r3, [pc, #224]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d01a      	beq.n	8007b8c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007b56:	4b36      	ldr	r3, [pc, #216]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2203      	movs	r2, #3
 8007b64:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b68:	4b31      	ldr	r3, [pc, #196]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7ff fa5d 	bl	800702e <USBD_SetClassConfig>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d104      	bne.n	8007b84 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f932 	bl	8007de6 <USBD_CtlError>
          return;
 8007b82:	e052      	b.n	8007c2a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f9f6 	bl	8007f76 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007b8a:	e04e      	b.n	8007c2a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f9f2 	bl	8007f76 <USBD_CtlSendStatus>
      break;
 8007b92:	e04a      	b.n	8007c2a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b94:	4b26      	ldr	r3, [pc, #152]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d112      	bne.n	8007bc2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007ba4:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <USBD_SetConfig+0x118>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007bae:	4b20      	ldr	r3, [pc, #128]	; (8007c30 <USBD_SetConfig+0x118>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fa59 	bl	800706c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f9db 	bl	8007f76 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007bc0:	e033      	b.n	8007c2a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007bc2:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <USBD_SetConfig+0x118>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d01d      	beq.n	8007c0c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff fa47 	bl	800706c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007bde:	4b14      	ldr	r3, [pc, #80]	; (8007c30 <USBD_SetConfig+0x118>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007be8:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <USBD_SetConfig+0x118>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff fa1d 	bl	800702e <USBD_SetClassConfig>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d104      	bne.n	8007c04 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f8f2 	bl	8007de6 <USBD_CtlError>
          return;
 8007c02:	e012      	b.n	8007c2a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f9b6 	bl	8007f76 <USBD_CtlSendStatus>
      break;
 8007c0a:	e00e      	b.n	8007c2a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f9b2 	bl	8007f76 <USBD_CtlSendStatus>
      break;
 8007c12:	e00a      	b.n	8007c2a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f8e5 	bl	8007de6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007c1c:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <USBD_SetConfig+0x118>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff fa22 	bl	800706c <USBD_ClrClassConfig>
      break;
 8007c28:	bf00      	nop
    }
  }
}
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20000218 	.word	0x20000218

08007c34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	88db      	ldrh	r3, [r3, #6]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d004      	beq.n	8007c50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f8cc 	bl	8007de6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007c4e:	e022      	b.n	8007c96 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	dc02      	bgt.n	8007c60 <USBD_GetConfig+0x2c>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	dc03      	bgt.n	8007c66 <USBD_GetConfig+0x32>
 8007c5e:	e015      	b.n	8007c8c <USBD_GetConfig+0x58>
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d00b      	beq.n	8007c7c <USBD_GetConfig+0x48>
 8007c64:	e012      	b.n	8007c8c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3308      	adds	r3, #8
 8007c70:	2201      	movs	r2, #1
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f920 	bl	8007eba <USBD_CtlSendData>
      break;
 8007c7a:	e00c      	b.n	8007c96 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	2201      	movs	r2, #1
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f918 	bl	8007eba <USBD_CtlSendData>
      break;
 8007c8a:	e004      	b.n	8007c96 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f8a9 	bl	8007de6 <USBD_CtlError>
      break;
 8007c94:	bf00      	nop
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d81e      	bhi.n	8007cf2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	88db      	ldrh	r3, [r3, #6]
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d004      	beq.n	8007cc6 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f891 	bl	8007de6 <USBD_CtlError>
      break;
 8007cc4:	e01a      	b.n	8007cfc <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f043 0202 	orr.w	r2, r3, #2
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f8e5 	bl	8007eba <USBD_CtlSendData>
    break;
 8007cf0:	e004      	b.n	8007cfc <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f876 	bl	8007de6 <USBD_CtlError>
    break;
 8007cfa:	bf00      	nop
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	885b      	ldrh	r3, [r3, #2]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d106      	bne.n	8007d24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f929 	bl	8007f76 <USBD_CtlSendStatus>
  }

}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d80b      	bhi.n	8007d5a <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	885b      	ldrh	r3, [r3, #2]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d10c      	bne.n	8007d64 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f90f 	bl	8007f76 <USBD_CtlSendStatus>
    }
    break;
 8007d58:	e004      	b.n	8007d64 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f842 	bl	8007de6 <USBD_CtlError>
    break;
 8007d62:	e000      	b.n	8007d66 <USBD_ClrFeature+0x3a>
    break;
 8007d64:	bf00      	nop
  }
}
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781a      	ldrb	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	785a      	ldrb	r2, [r3, #1]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	3302      	adds	r3, #2
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	3303      	adds	r3, #3
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	3304      	adds	r3, #4
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	3305      	adds	r3, #5
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4413      	add	r3, r2
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	3306      	adds	r3, #6
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	3307      	adds	r3, #7
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	4413      	add	r3, r2
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	80da      	strh	r2, [r3, #6]

}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc80      	pop	{r7}
 8007de4:	4770      	bx	lr

08007de6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007df0:	2180      	movs	r1, #128	; 0x80
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fcb8 	bl	8008768 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007df8:	2100      	movs	r1, #0
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fcb4 	bl	8008768 <USBD_LL_StallEP>
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d032      	beq.n	8007e84 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 f834 	bl	8007e8c <USBD_GetLen>
 8007e24:	4603      	mov	r3, r0
 8007e26:	3301      	adds	r3, #1
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	75fa      	strb	r2, [r7, #23]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	7812      	ldrb	r2, [r2, #0]
 8007e42:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	75fa      	strb	r2, [r7, #23]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4413      	add	r3, r2
 8007e50:	2203      	movs	r2, #3
 8007e52:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e54:	e012      	b.n	8007e7c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	60fa      	str	r2, [r7, #12]
 8007e5c:	7dfa      	ldrb	r2, [r7, #23]
 8007e5e:	1c51      	adds	r1, r2, #1
 8007e60:	75f9      	strb	r1, [r7, #23]
 8007e62:	4611      	mov	r1, r2
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	440a      	add	r2, r1
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	75fa      	strb	r2, [r7, #23]
 8007e72:	461a      	mov	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4413      	add	r3, r2
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e8      	bne.n	8007e56 <USBD_GetString+0x4e>
    }
  }
}
 8007e84:	bf00      	nop
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007e98:	e005      	b.n	8007ea6 <USBD_GetLen+0x1a>
    {
        len++;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1f5      	bne.n	8007e9a <USBD_GetLen+0xe>
    }

    return len;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bc80      	pop	{r7}
 8007eb8:	4770      	bx	lr

08007eba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007ed0:	88fa      	ldrh	r2, [r7, #6]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ed6:	88fa      	ldrh	r2, [r7, #6]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 fcc9 	bl	800887a <USBD_LL_Transmit>

  return USBD_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	4613      	mov	r3, r2
 8007efe:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007f00:	88fb      	ldrh	r3, [r7, #6]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	2100      	movs	r1, #0
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 fcb7 	bl	800887a <USBD_LL_Transmit>

  return USBD_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	4613      	mov	r3, r2
 8007f22:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2203      	movs	r2, #3
 8007f28:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007f2c:	88fa      	ldrh	r2, [r7, #6]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007f34:	88fa      	ldrh	r2, [r7, #6]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007f3c:	88fb      	ldrh	r3, [r7, #6]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	2100      	movs	r1, #0
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 fcbc 	bl	80088c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f60:	88fb      	ldrh	r3, [r7, #6]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	2100      	movs	r1, #0
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fcaa 	bl	80088c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2204      	movs	r2, #4
 8007f82:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f86:	2300      	movs	r3, #0
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fc74 	bl	800887a <USBD_LL_Transmit>

  return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2205      	movs	r2, #5
 8007fa8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007fac:	2300      	movs	r3, #0
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fc84 	bl	80088c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4912      	ldr	r1, [pc, #72]	; (8008014 <MX_USB_DEVICE_Init+0x50>)
 8007fcc:	4812      	ldr	r0, [pc, #72]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8007fce:	f7fe ffd4 	bl	8006f7a <USBD_Init>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fd8:	f7f9 f8f8 	bl	80011cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fdc:	490f      	ldr	r1, [pc, #60]	; (800801c <MX_USB_DEVICE_Init+0x58>)
 8007fde:	480e      	ldr	r0, [pc, #56]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8007fe0:	f7fe fff6 	bl	8006fd0 <USBD_RegisterClass>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fea:	f7f9 f8ef 	bl	80011cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fee:	490c      	ldr	r1, [pc, #48]	; (8008020 <MX_USB_DEVICE_Init+0x5c>)
 8007ff0:	4809      	ldr	r0, [pc, #36]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8007ff2:	f7fe ff27 	bl	8006e44 <USBD_CDC_RegisterInterface>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ffc:	f7f9 f8e6 	bl	80011cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008000:	4805      	ldr	r0, [pc, #20]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8008002:	f7fe fffe 	bl	8007002 <USBD_Start>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800800c:	f7f9 f8de 	bl	80011cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008010:	bf00      	nop
 8008012:	bd80      	pop	{r7, pc}
 8008014:	20000140 	.word	0x20000140
 8008018:	20000628 	.word	0x20000628
 800801c:	2000002c 	.word	0x2000002c
 8008020:	20000130 	.word	0x20000130

08008024 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008028:	2200      	movs	r2, #0
 800802a:	4905      	ldr	r1, [pc, #20]	; (8008040 <CDC_Init_FS+0x1c>)
 800802c:	4805      	ldr	r0, [pc, #20]	; (8008044 <CDC_Init_FS+0x20>)
 800802e:	f7fe ff1f 	bl	8006e70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008032:	4905      	ldr	r1, [pc, #20]	; (8008048 <CDC_Init_FS+0x24>)
 8008034:	4803      	ldr	r0, [pc, #12]	; (8008044 <CDC_Init_FS+0x20>)
 8008036:	f7fe ff34 	bl	8006ea2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800803a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800803c:	4618      	mov	r0, r3
 800803e:	bd80      	pop	{r7, pc}
 8008040:	20000cac 	.word	0x20000cac
 8008044:	20000628 	.word	0x20000628
 8008048:	200008c4 	.word	0x200008c4

0800804c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008050:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008052:	4618      	mov	r0, r3
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr
	...

0800805c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
 8008068:	4613      	mov	r3, r2
 800806a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800806c:	79fb      	ldrb	r3, [r7, #7]
 800806e:	2b23      	cmp	r3, #35	; 0x23
 8008070:	d866      	bhi.n	8008140 <CDC_Control_FS+0xe4>
 8008072:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <CDC_Control_FS+0x1c>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	08008141 	.word	0x08008141
 800807c:	08008141 	.word	0x08008141
 8008080:	08008141 	.word	0x08008141
 8008084:	08008141 	.word	0x08008141
 8008088:	08008141 	.word	0x08008141
 800808c:	08008141 	.word	0x08008141
 8008090:	08008141 	.word	0x08008141
 8008094:	08008141 	.word	0x08008141
 8008098:	08008141 	.word	0x08008141
 800809c:	08008141 	.word	0x08008141
 80080a0:	08008141 	.word	0x08008141
 80080a4:	08008141 	.word	0x08008141
 80080a8:	08008141 	.word	0x08008141
 80080ac:	08008141 	.word	0x08008141
 80080b0:	08008141 	.word	0x08008141
 80080b4:	08008141 	.word	0x08008141
 80080b8:	08008141 	.word	0x08008141
 80080bc:	08008141 	.word	0x08008141
 80080c0:	08008141 	.word	0x08008141
 80080c4:	08008141 	.word	0x08008141
 80080c8:	08008141 	.word	0x08008141
 80080cc:	08008141 	.word	0x08008141
 80080d0:	08008141 	.word	0x08008141
 80080d4:	08008141 	.word	0x08008141
 80080d8:	08008141 	.word	0x08008141
 80080dc:	08008141 	.word	0x08008141
 80080e0:	08008141 	.word	0x08008141
 80080e4:	08008141 	.word	0x08008141
 80080e8:	08008141 	.word	0x08008141
 80080ec:	08008141 	.word	0x08008141
 80080f0:	08008141 	.word	0x08008141
 80080f4:	08008141 	.word	0x08008141
 80080f8:	08008141 	.word	0x08008141
 80080fc:	08008109 	.word	0x08008109
 8008100:	08008141 	.word	0x08008141
 8008104:	08008141 	.word	0x08008141
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2220      	movs	r2, #32
 800810c:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	3301      	adds	r3, #1
 8008112:	22c2      	movs	r2, #194	; 0xc2
 8008114:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	3302      	adds	r3, #2
 800811a:	2201      	movs	r2, #1
 800811c:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	3303      	adds	r3, #3
 8008122:	2200      	movs	r2, #0
 8008124:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	3304      	adds	r3, #4
 800812a:	2200      	movs	r2, #0
 800812c:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	3305      	adds	r3, #5
 8008132:	2200      	movs	r2, #0
 8008134:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	3306      	adds	r3, #6
 800813a:	2208      	movs	r2, #8
 800813c:	701a      	strb	r2, [r3, #0]
    break;
 800813e:	e000      	b.n	8008142 <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008140:	bf00      	nop
  }

  return (USBD_OK);
 8008142:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	bc80      	pop	{r7}
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop

08008150 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800815e:	e018      	b.n	8008192 <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4413      	add	r3, r2
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b0a      	cmp	r3, #10
 800816a:	d005      	beq.n	8008178 <CDC_Receive_FS+0x28>
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	4413      	add	r3, r2
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b0d      	cmp	r3, #13
 8008176:	d102      	bne.n	800817e <CDC_Receive_FS+0x2e>
 8008178:	4b12      	ldr	r3, [pc, #72]	; (80081c4 <CDC_Receive_FS+0x74>)
 800817a:	2201      	movs	r2, #1
 800817c:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4413      	add	r3, r2
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	4618      	mov	r0, r3
 8008188:	f7f8 febe 	bl	8000f08 <Write_to_circ_buffer>
	  i++;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	429a      	cmp	r2, r3
 800819a:	d3e1      	bcc.n	8008160 <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f811 	bl	80081cc <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4806      	ldr	r0, [pc, #24]	; (80081c8 <CDC_Receive_FS+0x78>)
 80081ae:	f7fe fe78 	bl	8006ea2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081b2:	4805      	ldr	r0, [pc, #20]	; (80081c8 <CDC_Receive_FS+0x78>)
 80081b4:	f7fe feb7 	bl	8006f26 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000569 	.word	0x20000569
 80081c8:	20000628 	.word	0x20000628

080081cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80081dc:	4b0d      	ldr	r3, [pc, #52]	; (8008214 <CDC_Transmit_FS+0x48>)
 80081de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80081e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e00b      	b.n	800820a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081f2:	887b      	ldrh	r3, [r7, #2]
 80081f4:	461a      	mov	r2, r3
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4806      	ldr	r0, [pc, #24]	; (8008214 <CDC_Transmit_FS+0x48>)
 80081fa:	f7fe fe39 	bl	8006e70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081fe:	4805      	ldr	r0, [pc, #20]	; (8008214 <CDC_Transmit_FS+0x48>)
 8008200:	f7fe fe62 	bl	8006ec8 <USBD_CDC_TransmitPacket>
 8008204:	4603      	mov	r3, r0
 8008206:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20000628 	.word	0x20000628

08008218 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	6039      	str	r1, [r7, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2212      	movs	r2, #18
 8008228:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800822a:	4b03      	ldr	r3, [pc, #12]	; (8008238 <USBD_FS_DeviceDescriptor+0x20>)
}
 800822c:	4618      	mov	r0, r3
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	2000015c 	.word	0x2000015c

0800823c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	6039      	str	r1, [r7, #0]
 8008246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2204      	movs	r2, #4
 800824c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800824e:	4b03      	ldr	r3, [pc, #12]	; (800825c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	bc80      	pop	{r7}
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20000170 	.word	0x20000170

08008260 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	6039      	str	r1, [r7, #0]
 800826a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d105      	bne.n	800827e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	4907      	ldr	r1, [pc, #28]	; (8008294 <USBD_FS_ProductStrDescriptor+0x34>)
 8008276:	4808      	ldr	r0, [pc, #32]	; (8008298 <USBD_FS_ProductStrDescriptor+0x38>)
 8008278:	f7ff fdc6 	bl	8007e08 <USBD_GetString>
 800827c:	e004      	b.n	8008288 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	4904      	ldr	r1, [pc, #16]	; (8008294 <USBD_FS_ProductStrDescriptor+0x34>)
 8008282:	4805      	ldr	r0, [pc, #20]	; (8008298 <USBD_FS_ProductStrDescriptor+0x38>)
 8008284:	f7ff fdc0 	bl	8007e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20001094 	.word	0x20001094
 8008298:	08009b88 	.word	0x08009b88

0800829c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	6039      	str	r1, [r7, #0]
 80082a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	4904      	ldr	r1, [pc, #16]	; (80082bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082ac:	4804      	ldr	r0, [pc, #16]	; (80082c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082ae:	f7ff fdab 	bl	8007e08 <USBD_GetString>
  return USBD_StrDesc;
 80082b2:	4b02      	ldr	r3, [pc, #8]	; (80082bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20001094 	.word	0x20001094
 80082c0:	08009b94 	.word	0x08009b94

080082c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	6039      	str	r1, [r7, #0]
 80082ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	221a      	movs	r2, #26
 80082d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082d6:	f000 f843 	bl	8008360 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082da:	4b02      	ldr	r3, [pc, #8]	; (80082e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	20000174 	.word	0x20000174

080082e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082f4:	79fb      	ldrb	r3, [r7, #7]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4907      	ldr	r1, [pc, #28]	; (800831c <USBD_FS_ConfigStrDescriptor+0x34>)
 80082fe:	4808      	ldr	r0, [pc, #32]	; (8008320 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008300:	f7ff fd82 	bl	8007e08 <USBD_GetString>
 8008304:	e004      	b.n	8008310 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4904      	ldr	r1, [pc, #16]	; (800831c <USBD_FS_ConfigStrDescriptor+0x34>)
 800830a:	4805      	ldr	r0, [pc, #20]	; (8008320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800830c:	f7ff fd7c 	bl	8007e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20001094 	.word	0x20001094
 8008320:	08009ba4 	.word	0x08009ba4

08008324 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	6039      	str	r1, [r7, #0]
 800832e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d105      	bne.n	8008342 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	4907      	ldr	r1, [pc, #28]	; (8008358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800833a:	4808      	ldr	r0, [pc, #32]	; (800835c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800833c:	f7ff fd64 	bl	8007e08 <USBD_GetString>
 8008340:	e004      	b.n	800834c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	4904      	ldr	r1, [pc, #16]	; (8008358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008346:	4805      	ldr	r0, [pc, #20]	; (800835c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008348:	f7ff fd5e 	bl	8007e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800834c:	4b02      	ldr	r3, [pc, #8]	; (8008358 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20001094 	.word	0x20001094
 800835c:	08009bb0 	.word	0x08009bb0

08008360 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008366:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <Get_SerialNum+0x44>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800836c:	4b0e      	ldr	r3, [pc, #56]	; (80083a8 <Get_SerialNum+0x48>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008372:	4b0e      	ldr	r3, [pc, #56]	; (80083ac <Get_SerialNum+0x4c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4413      	add	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d009      	beq.n	800839a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008386:	2208      	movs	r2, #8
 8008388:	4909      	ldr	r1, [pc, #36]	; (80083b0 <Get_SerialNum+0x50>)
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f814 	bl	80083b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008390:	2204      	movs	r2, #4
 8008392:	4908      	ldr	r1, [pc, #32]	; (80083b4 <Get_SerialNum+0x54>)
 8008394:	68b8      	ldr	r0, [r7, #8]
 8008396:	f000 f80f 	bl	80083b8 <IntToUnicode>
  }
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	1ff80050 	.word	0x1ff80050
 80083a8:	1ff80054 	.word	0x1ff80054
 80083ac:	1ff80058 	.word	0x1ff80058
 80083b0:	20000176 	.word	0x20000176
 80083b4:	20000186 	.word	0x20000186

080083b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	4613      	mov	r3, r2
 80083c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083ca:	2300      	movs	r3, #0
 80083cc:	75fb      	strb	r3, [r7, #23]
 80083ce:	e027      	b.n	8008420 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	0f1b      	lsrs	r3, r3, #28
 80083d4:	2b09      	cmp	r3, #9
 80083d6:	d80b      	bhi.n	80083f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	0f1b      	lsrs	r3, r3, #28
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	4619      	mov	r1, r3
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	440b      	add	r3, r1
 80083e8:	3230      	adds	r2, #48	; 0x30
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	e00a      	b.n	8008406 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	0f1b      	lsrs	r3, r3, #28
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	4619      	mov	r1, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	440b      	add	r3, r1
 8008400:	3237      	adds	r2, #55	; 0x37
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	005b      	lsls	r3, r3, #1
 8008410:	3301      	adds	r3, #1
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	4413      	add	r3, r2
 8008416:	2200      	movs	r2, #0
 8008418:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	3301      	adds	r3, #1
 800841e:	75fb      	strb	r3, [r7, #23]
 8008420:	7dfa      	ldrb	r2, [r7, #23]
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	429a      	cmp	r2, r3
 8008426:	d3d3      	bcc.n	80083d0 <IntToUnicode+0x18>
  }
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	bc80      	pop	{r7}
 8008432:	4770      	bx	lr

08008434 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d106      	bne.n	8008454 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8008446:	4b09      	ldr	r3, [pc, #36]	; (800846c <HAL_PCDEx_SetConnectionState+0x38>)
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	4a08      	ldr	r2, [pc, #32]	; (800846c <HAL_PCDEx_SetConnectionState+0x38>)
 800844c:	f043 0301 	orr.w	r3, r3, #1
 8008450:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008452:	e005      	b.n	8008460 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008454:	4b05      	ldr	r3, [pc, #20]	; (800846c <HAL_PCDEx_SetConnectionState+0x38>)
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	4a04      	ldr	r2, [pc, #16]	; (800846c <HAL_PCDEx_SetConnectionState+0x38>)
 800845a:	f023 0301 	bic.w	r3, r3, #1
 800845e:	6053      	str	r3, [r2, #4]
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	40010000 	.word	0x40010000

08008470 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a0d      	ldr	r2, [pc, #52]	; (80084b4 <HAL_PCD_MspInit+0x44>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d113      	bne.n	80084aa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008482:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <HAL_PCD_MspInit+0x48>)
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	4a0c      	ldr	r2, [pc, #48]	; (80084b8 <HAL_PCD_MspInit+0x48>)
 8008488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800848c:	6253      	str	r3, [r2, #36]	; 0x24
 800848e:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <HAL_PCD_MspInit+0x48>)
 8008490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800849a:	2200      	movs	r2, #0
 800849c:	2100      	movs	r1, #0
 800849e:	2014      	movs	r0, #20
 80084a0:	f7f9 fa15 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80084a4:	2014      	movs	r0, #20
 80084a6:	f7f9 fa2e 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	40005c00 	.word	0x40005c00
 80084b8:	40023800 	.word	0x40023800

080084bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80084d0:	4619      	mov	r1, r3
 80084d2:	4610      	mov	r0, r2
 80084d4:	f7fe fddd 	bl	8007092 <USBD_LL_SetupStage>
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80084f2:	78fa      	ldrb	r2, [r7, #3]
 80084f4:	6879      	ldr	r1, [r7, #4]
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	440b      	add	r3, r1
 8008500:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	4619      	mov	r1, r3
 800850a:	f7fe fe0f 	bl	800712c <USBD_LL_DataOutStage>
}
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	460b      	mov	r3, r1
 8008520:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008528:	78fa      	ldrb	r2, [r7, #3]
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	440b      	add	r3, r1
 8008536:	333c      	adds	r3, #60	; 0x3c
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	4619      	mov	r1, r3
 800853e:	f7fe fe66 	bl	800720e <USBD_LL_DataInStage>
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe ff71 	bl	8007440 <USBD_LL_SOF>
}
 800855e:	bf00      	nop
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800856e:	2301      	movs	r3, #1
 8008570:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d001      	beq.n	800857e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800857a:	f7f8 fe27 	bl	80011cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008584:	7bfa      	ldrb	r2, [r7, #15]
 8008586:	4611      	mov	r1, r2
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe ff26 	bl	80073da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe fedf 	bl	8007358 <USBD_LL_Reset>
}
 800859a:	bf00      	nop
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe ff20 	bl	80073f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085c0:	4b04      	ldr	r3, [pc, #16]	; (80085d4 <HAL_PCD_SuspendCallback+0x30>)
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	4a03      	ldr	r2, [pc, #12]	; (80085d4 <HAL_PCD_SuspendCallback+0x30>)
 80085c6:	f043 0306 	orr.w	r3, r3, #6
 80085ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085cc:	bf00      	nop
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	e000ed00 	.word	0xe000ed00

080085d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe ff1a 	bl	8007420 <USBD_LL_Resume>
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80085fc:	4a28      	ldr	r2, [pc, #160]	; (80086a0 <USBD_LL_Init+0xac>)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a26      	ldr	r2, [pc, #152]	; (80086a0 <USBD_LL_Init+0xac>)
 8008608:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800860c:	4b24      	ldr	r3, [pc, #144]	; (80086a0 <USBD_LL_Init+0xac>)
 800860e:	4a25      	ldr	r2, [pc, #148]	; (80086a4 <USBD_LL_Init+0xb0>)
 8008610:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008612:	4b23      	ldr	r3, [pc, #140]	; (80086a0 <USBD_LL_Init+0xac>)
 8008614:	2208      	movs	r2, #8
 8008616:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008618:	4b21      	ldr	r3, [pc, #132]	; (80086a0 <USBD_LL_Init+0xac>)
 800861a:	2202      	movs	r2, #2
 800861c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800861e:	4b20      	ldr	r3, [pc, #128]	; (80086a0 <USBD_LL_Init+0xac>)
 8008620:	2202      	movs	r2, #2
 8008622:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008624:	4b1e      	ldr	r3, [pc, #120]	; (80086a0 <USBD_LL_Init+0xac>)
 8008626:	2200      	movs	r2, #0
 8008628:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800862a:	4b1d      	ldr	r3, [pc, #116]	; (80086a0 <USBD_LL_Init+0xac>)
 800862c:	2200      	movs	r2, #0
 800862e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008630:	481b      	ldr	r0, [pc, #108]	; (80086a0 <USBD_LL_Init+0xac>)
 8008632:	f7f9 fb33 	bl	8001c9c <HAL_PCD_Init>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800863c:	f7f8 fdc6 	bl	80011cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008646:	2318      	movs	r3, #24
 8008648:	2200      	movs	r2, #0
 800864a:	2100      	movs	r1, #0
 800864c:	f7fa ff10 	bl	8003470 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008656:	2358      	movs	r3, #88	; 0x58
 8008658:	2200      	movs	r2, #0
 800865a:	2180      	movs	r1, #128	; 0x80
 800865c:	f7fa ff08 	bl	8003470 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008666:	23c0      	movs	r3, #192	; 0xc0
 8008668:	2200      	movs	r2, #0
 800866a:	2181      	movs	r1, #129	; 0x81
 800866c:	f7fa ff00 	bl	8003470 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008676:	f44f 7388 	mov.w	r3, #272	; 0x110
 800867a:	2200      	movs	r2, #0
 800867c:	2101      	movs	r1, #1
 800867e:	f7fa fef7 	bl	8003470 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800868c:	2200      	movs	r2, #0
 800868e:	2182      	movs	r1, #130	; 0x82
 8008690:	f7fa feee 	bl	8003470 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20001294 	.word	0x20001294
 80086a4:	40005c00 	.word	0x40005c00

080086a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f9 fbca 	bl	8001e58 <HAL_PCD_Start>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 f944 	bl	8008958 <USBD_Get_USB_Status>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	4608      	mov	r0, r1
 80086e8:	4611      	mov	r1, r2
 80086ea:	461a      	mov	r2, r3
 80086ec:	4603      	mov	r3, r0
 80086ee:	70fb      	strb	r3, [r7, #3]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70bb      	strb	r3, [r7, #2]
 80086f4:	4613      	mov	r3, r2
 80086f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008706:	78bb      	ldrb	r3, [r7, #2]
 8008708:	883a      	ldrh	r2, [r7, #0]
 800870a:	78f9      	ldrb	r1, [r7, #3]
 800870c:	f7f9 fce6 	bl	80020dc <HAL_PCD_EP_Open>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f91e 	bl	8008958 <USBD_Get_USB_Status>
 800871c:	4603      	mov	r3, r0
 800871e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008720:	7bbb      	ldrb	r3, [r7, #14]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	460b      	mov	r3, r1
 8008734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008744:	78fa      	ldrb	r2, [r7, #3]
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f7f9 fd2d 	bl	80021a8 <HAL_PCD_EP_Close>
 800874e:	4603      	mov	r3, r0
 8008750:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	4618      	mov	r0, r3
 8008756:	f000 f8ff 	bl	8008958 <USBD_Get_USB_Status>
 800875a:	4603      	mov	r3, r0
 800875c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800875e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008782:	78fa      	ldrb	r2, [r7, #3]
 8008784:	4611      	mov	r1, r2
 8008786:	4618      	mov	r0, r3
 8008788:	f7f9 fded 	bl	8002366 <HAL_PCD_EP_SetStall>
 800878c:	4603      	mov	r3, r0
 800878e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f8e0 	bl	8008958 <USBD_Get_USB_Status>
 8008798:	4603      	mov	r3, r0
 800879a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800879c:	7bbb      	ldrb	r3, [r7, #14]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	460b      	mov	r3, r1
 80087b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80087c0:	78fa      	ldrb	r2, [r7, #3]
 80087c2:	4611      	mov	r1, r2
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7f9 fe20 	bl	800240a <HAL_PCD_EP_ClrStall>
 80087ca:	4603      	mov	r3, r0
 80087cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 f8c1 	bl	8008958 <USBD_Get_USB_Status>
 80087d6:	4603      	mov	r3, r0
 80087d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087da:	7bbb      	ldrb	r3, [r7, #14]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80087f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	da0c      	bge.n	800881a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008806:	68f9      	ldr	r1, [r7, #12]
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	4613      	mov	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	440b      	add	r3, r1
 8008814:	3302      	adds	r3, #2
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	e00b      	b.n	8008832 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008820:	68f9      	ldr	r1, [r7, #12]
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	00db      	lsls	r3, r3, #3
 800882a:	440b      	add	r3, r1
 800882c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008830:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr

0800883c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	4611      	mov	r1, r2
 800885a:	4618      	mov	r0, r3
 800885c:	f7f9 fc19 	bl	8002092 <HAL_PCD_SetAddress>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f876 	bl	8008958 <USBD_Get_USB_Status>
 800886c:	4603      	mov	r3, r0
 800886e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008870:	7bbb      	ldrb	r3, [r7, #14]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b086      	sub	sp, #24
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	461a      	mov	r2, r3
 8008886:	460b      	mov	r3, r1
 8008888:	72fb      	strb	r3, [r7, #11]
 800888a:	4613      	mov	r3, r2
 800888c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800889c:	893b      	ldrh	r3, [r7, #8]
 800889e:	7af9      	ldrb	r1, [r7, #11]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	f7f9 fd1d 	bl	80022e0 <HAL_PCD_EP_Transmit>
 80088a6:	4603      	mov	r3, r0
 80088a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f853 	bl	8008958 <USBD_Get_USB_Status>
 80088b2:	4603      	mov	r3, r0
 80088b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	607a      	str	r2, [r7, #4]
 80088ca:	461a      	mov	r2, r3
 80088cc:	460b      	mov	r3, r1
 80088ce:	72fb      	strb	r3, [r7, #11]
 80088d0:	4613      	mov	r3, r2
 80088d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80088e2:	893b      	ldrh	r3, [r7, #8]
 80088e4:	7af9      	ldrb	r1, [r7, #11]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	f7f9 fca6 	bl	8002238 <HAL_PCD_EP_Receive>
 80088ec:	4603      	mov	r3, r0
 80088ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 f830 	bl	8008958 <USBD_Get_USB_Status>
 80088f8:	4603      	mov	r3, r0
 80088fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	4611      	mov	r1, r2
 800891c:	4618      	mov	r0, r3
 800891e:	f7f9 fcc8 	bl	80022b2 <HAL_PCD_EP_GetRxCount>
 8008922:	4603      	mov	r3, r0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008934:	4b02      	ldr	r3, [pc, #8]	; (8008940 <USBD_static_malloc+0x14>)
}
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	bc80      	pop	{r7}
 800893e:	4770      	bx	lr
 8008940:	2000021c 	.word	0x2000021c

08008944 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]

}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	bc80      	pop	{r7}
 8008954:	4770      	bx	lr
	...

08008958 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	2b03      	cmp	r3, #3
 800896a:	d817      	bhi.n	800899c <USBD_Get_USB_Status+0x44>
 800896c:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <USBD_Get_USB_Status+0x1c>)
 800896e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008972:	bf00      	nop
 8008974:	08008985 	.word	0x08008985
 8008978:	0800898b 	.word	0x0800898b
 800897c:	08008991 	.word	0x08008991
 8008980:	08008997 	.word	0x08008997
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
    break;
 8008988:	e00b      	b.n	80089a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800898a:	2302      	movs	r3, #2
 800898c:	73fb      	strb	r3, [r7, #15]
    break;
 800898e:	e008      	b.n	80089a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008990:	2301      	movs	r3, #1
 8008992:	73fb      	strb	r3, [r7, #15]
    break;
 8008994:	e005      	b.n	80089a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008996:	2302      	movs	r3, #2
 8008998:	73fb      	strb	r3, [r7, #15]
    break;
 800899a:	e002      	b.n	80089a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800899c:	2302      	movs	r3, #2
 800899e:	73fb      	strb	r3, [r7, #15]
    break;
 80089a0:	bf00      	nop
  }
  return usb_status;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bc80      	pop	{r7}
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop

080089b0 <__errno>:
 80089b0:	4b01      	ldr	r3, [pc, #4]	; (80089b8 <__errno+0x8>)
 80089b2:	6818      	ldr	r0, [r3, #0]
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	20000190 	.word	0x20000190

080089bc <__libc_init_array>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	2600      	movs	r6, #0
 80089c0:	4d0c      	ldr	r5, [pc, #48]	; (80089f4 <__libc_init_array+0x38>)
 80089c2:	4c0d      	ldr	r4, [pc, #52]	; (80089f8 <__libc_init_array+0x3c>)
 80089c4:	1b64      	subs	r4, r4, r5
 80089c6:	10a4      	asrs	r4, r4, #2
 80089c8:	42a6      	cmp	r6, r4
 80089ca:	d109      	bne.n	80089e0 <__libc_init_array+0x24>
 80089cc:	f001 f860 	bl	8009a90 <_init>
 80089d0:	2600      	movs	r6, #0
 80089d2:	4d0a      	ldr	r5, [pc, #40]	; (80089fc <__libc_init_array+0x40>)
 80089d4:	4c0a      	ldr	r4, [pc, #40]	; (8008a00 <__libc_init_array+0x44>)
 80089d6:	1b64      	subs	r4, r4, r5
 80089d8:	10a4      	asrs	r4, r4, #2
 80089da:	42a6      	cmp	r6, r4
 80089dc:	d105      	bne.n	80089ea <__libc_init_array+0x2e>
 80089de:	bd70      	pop	{r4, r5, r6, pc}
 80089e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e4:	4798      	blx	r3
 80089e6:	3601      	adds	r6, #1
 80089e8:	e7ee      	b.n	80089c8 <__libc_init_array+0xc>
 80089ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ee:	4798      	blx	r3
 80089f0:	3601      	adds	r6, #1
 80089f2:	e7f2      	b.n	80089da <__libc_init_array+0x1e>
 80089f4:	08009d30 	.word	0x08009d30
 80089f8:	08009d30 	.word	0x08009d30
 80089fc:	08009d30 	.word	0x08009d30
 8008a00:	08009d34 	.word	0x08009d34

08008a04 <memcpy>:
 8008a04:	440a      	add	r2, r1
 8008a06:	4291      	cmp	r1, r2
 8008a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a0c:	d100      	bne.n	8008a10 <memcpy+0xc>
 8008a0e:	4770      	bx	lr
 8008a10:	b510      	push	{r4, lr}
 8008a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a16:	4291      	cmp	r1, r2
 8008a18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a1c:	d1f9      	bne.n	8008a12 <memcpy+0xe>
 8008a1e:	bd10      	pop	{r4, pc}

08008a20 <memset>:
 8008a20:	4603      	mov	r3, r0
 8008a22:	4402      	add	r2, r0
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d100      	bne.n	8008a2a <memset+0xa>
 8008a28:	4770      	bx	lr
 8008a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a2e:	e7f9      	b.n	8008a24 <memset+0x4>

08008a30 <strcpy>:
 8008a30:	4603      	mov	r3, r0
 8008a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a36:	f803 2b01 	strb.w	r2, [r3], #1
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	d1f9      	bne.n	8008a32 <strcpy+0x2>
 8008a3e:	4770      	bx	lr

08008a40 <strtok>:
 8008a40:	4b16      	ldr	r3, [pc, #88]	; (8008a9c <strtok+0x5c>)
 8008a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a46:	681f      	ldr	r7, [r3, #0]
 8008a48:	4605      	mov	r5, r0
 8008a4a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8008a4c:	460e      	mov	r6, r1
 8008a4e:	b9ec      	cbnz	r4, 8008a8c <strtok+0x4c>
 8008a50:	2050      	movs	r0, #80	; 0x50
 8008a52:	f000 f881 	bl	8008b58 <malloc>
 8008a56:	4602      	mov	r2, r0
 8008a58:	65b8      	str	r0, [r7, #88]	; 0x58
 8008a5a:	b920      	cbnz	r0, 8008a66 <strtok+0x26>
 8008a5c:	2157      	movs	r1, #87	; 0x57
 8008a5e:	4b10      	ldr	r3, [pc, #64]	; (8008aa0 <strtok+0x60>)
 8008a60:	4810      	ldr	r0, [pc, #64]	; (8008aa4 <strtok+0x64>)
 8008a62:	f000 f849 	bl	8008af8 <__assert_func>
 8008a66:	e9c0 4400 	strd	r4, r4, [r0]
 8008a6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008a6e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008a72:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008a76:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008a7a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008a7e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008a82:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008a86:	6184      	str	r4, [r0, #24]
 8008a88:	7704      	strb	r4, [r0, #28]
 8008a8a:	6244      	str	r4, [r0, #36]	; 0x24
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4628      	mov	r0, r5
 8008a90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a92:	2301      	movs	r3, #1
 8008a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a98:	f000 b806 	b.w	8008aa8 <__strtok_r>
 8008a9c:	20000190 	.word	0x20000190
 8008aa0:	08009be0 	.word	0x08009be0
 8008aa4:	08009bf7 	.word	0x08009bf7

08008aa8 <__strtok_r>:
 8008aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aaa:	b908      	cbnz	r0, 8008ab0 <__strtok_r+0x8>
 8008aac:	6810      	ldr	r0, [r2, #0]
 8008aae:	b188      	cbz	r0, 8008ad4 <__strtok_r+0x2c>
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	460f      	mov	r7, r1
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008aba:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008abe:	b91e      	cbnz	r6, 8008ac8 <__strtok_r+0x20>
 8008ac0:	b965      	cbnz	r5, 8008adc <__strtok_r+0x34>
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	6015      	str	r5, [r2, #0]
 8008ac6:	e005      	b.n	8008ad4 <__strtok_r+0x2c>
 8008ac8:	42b5      	cmp	r5, r6
 8008aca:	d1f6      	bne.n	8008aba <__strtok_r+0x12>
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1f0      	bne.n	8008ab2 <__strtok_r+0xa>
 8008ad0:	6014      	str	r4, [r2, #0]
 8008ad2:	7003      	strb	r3, [r0, #0]
 8008ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad6:	461c      	mov	r4, r3
 8008ad8:	e00c      	b.n	8008af4 <__strtok_r+0x4c>
 8008ada:	b915      	cbnz	r5, 8008ae2 <__strtok_r+0x3a>
 8008adc:	460e      	mov	r6, r1
 8008ade:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ae2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008ae6:	42ab      	cmp	r3, r5
 8008ae8:	d1f7      	bne.n	8008ada <__strtok_r+0x32>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0f3      	beq.n	8008ad6 <__strtok_r+0x2e>
 8008aee:	2300      	movs	r3, #0
 8008af0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008af4:	6014      	str	r4, [r2, #0]
 8008af6:	e7ed      	b.n	8008ad4 <__strtok_r+0x2c>

08008af8 <__assert_func>:
 8008af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008afa:	4614      	mov	r4, r2
 8008afc:	461a      	mov	r2, r3
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <__assert_func+0x2c>)
 8008b00:	4605      	mov	r5, r0
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68d8      	ldr	r0, [r3, #12]
 8008b06:	b14c      	cbz	r4, 8008b1c <__assert_func+0x24>
 8008b08:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <__assert_func+0x30>)
 8008b0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b0e:	9100      	str	r1, [sp, #0]
 8008b10:	462b      	mov	r3, r5
 8008b12:	4906      	ldr	r1, [pc, #24]	; (8008b2c <__assert_func+0x34>)
 8008b14:	f000 f80e 	bl	8008b34 <fiprintf>
 8008b18:	f000 fc8a 	bl	8009430 <abort>
 8008b1c:	4b04      	ldr	r3, [pc, #16]	; (8008b30 <__assert_func+0x38>)
 8008b1e:	461c      	mov	r4, r3
 8008b20:	e7f3      	b.n	8008b0a <__assert_func+0x12>
 8008b22:	bf00      	nop
 8008b24:	20000190 	.word	0x20000190
 8008b28:	08009c58 	.word	0x08009c58
 8008b2c:	08009c65 	.word	0x08009c65
 8008b30:	08009c93 	.word	0x08009c93

08008b34 <fiprintf>:
 8008b34:	b40e      	push	{r1, r2, r3}
 8008b36:	b503      	push	{r0, r1, lr}
 8008b38:	4601      	mov	r1, r0
 8008b3a:	ab03      	add	r3, sp, #12
 8008b3c:	4805      	ldr	r0, [pc, #20]	; (8008b54 <fiprintf+0x20>)
 8008b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b42:	6800      	ldr	r0, [r0, #0]
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	f000 f8dd 	bl	8008d04 <_vfiprintf_r>
 8008b4a:	b002      	add	sp, #8
 8008b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b50:	b003      	add	sp, #12
 8008b52:	4770      	bx	lr
 8008b54:	20000190 	.word	0x20000190

08008b58 <malloc>:
 8008b58:	4b02      	ldr	r3, [pc, #8]	; (8008b64 <malloc+0xc>)
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	6818      	ldr	r0, [r3, #0]
 8008b5e:	f000 b84f 	b.w	8008c00 <_malloc_r>
 8008b62:	bf00      	nop
 8008b64:	20000190 	.word	0x20000190

08008b68 <_free_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	d043      	beq.n	8008bf8 <_free_r+0x90>
 8008b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b74:	1f0c      	subs	r4, r1, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfb8      	it	lt
 8008b7a:	18e4      	addlt	r4, r4, r3
 8008b7c:	f000 fe8c 	bl	8009898 <__malloc_lock>
 8008b80:	4a1e      	ldr	r2, [pc, #120]	; (8008bfc <_free_r+0x94>)
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	4610      	mov	r0, r2
 8008b86:	b933      	cbnz	r3, 8008b96 <_free_r+0x2e>
 8008b88:	6063      	str	r3, [r4, #4]
 8008b8a:	6014      	str	r4, [r2, #0]
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b92:	f000 be87 	b.w	80098a4 <__malloc_unlock>
 8008b96:	42a3      	cmp	r3, r4
 8008b98:	d90a      	bls.n	8008bb0 <_free_r+0x48>
 8008b9a:	6821      	ldr	r1, [r4, #0]
 8008b9c:	1862      	adds	r2, r4, r1
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	bf01      	itttt	eq
 8008ba2:	681a      	ldreq	r2, [r3, #0]
 8008ba4:	685b      	ldreq	r3, [r3, #4]
 8008ba6:	1852      	addeq	r2, r2, r1
 8008ba8:	6022      	streq	r2, [r4, #0]
 8008baa:	6063      	str	r3, [r4, #4]
 8008bac:	6004      	str	r4, [r0, #0]
 8008bae:	e7ed      	b.n	8008b8c <_free_r+0x24>
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	b10b      	cbz	r3, 8008bba <_free_r+0x52>
 8008bb6:	42a3      	cmp	r3, r4
 8008bb8:	d9fa      	bls.n	8008bb0 <_free_r+0x48>
 8008bba:	6811      	ldr	r1, [r2, #0]
 8008bbc:	1850      	adds	r0, r2, r1
 8008bbe:	42a0      	cmp	r0, r4
 8008bc0:	d10b      	bne.n	8008bda <_free_r+0x72>
 8008bc2:	6820      	ldr	r0, [r4, #0]
 8008bc4:	4401      	add	r1, r0
 8008bc6:	1850      	adds	r0, r2, r1
 8008bc8:	4283      	cmp	r3, r0
 8008bca:	6011      	str	r1, [r2, #0]
 8008bcc:	d1de      	bne.n	8008b8c <_free_r+0x24>
 8008bce:	6818      	ldr	r0, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	4401      	add	r1, r0
 8008bd4:	6011      	str	r1, [r2, #0]
 8008bd6:	6053      	str	r3, [r2, #4]
 8008bd8:	e7d8      	b.n	8008b8c <_free_r+0x24>
 8008bda:	d902      	bls.n	8008be2 <_free_r+0x7a>
 8008bdc:	230c      	movs	r3, #12
 8008bde:	602b      	str	r3, [r5, #0]
 8008be0:	e7d4      	b.n	8008b8c <_free_r+0x24>
 8008be2:	6820      	ldr	r0, [r4, #0]
 8008be4:	1821      	adds	r1, r4, r0
 8008be6:	428b      	cmp	r3, r1
 8008be8:	bf01      	itttt	eq
 8008bea:	6819      	ldreq	r1, [r3, #0]
 8008bec:	685b      	ldreq	r3, [r3, #4]
 8008bee:	1809      	addeq	r1, r1, r0
 8008bf0:	6021      	streq	r1, [r4, #0]
 8008bf2:	6063      	str	r3, [r4, #4]
 8008bf4:	6054      	str	r4, [r2, #4]
 8008bf6:	e7c9      	b.n	8008b8c <_free_r+0x24>
 8008bf8:	bd38      	pop	{r3, r4, r5, pc}
 8008bfa:	bf00      	nop
 8008bfc:	2000043c 	.word	0x2000043c

08008c00 <_malloc_r>:
 8008c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c02:	1ccd      	adds	r5, r1, #3
 8008c04:	f025 0503 	bic.w	r5, r5, #3
 8008c08:	3508      	adds	r5, #8
 8008c0a:	2d0c      	cmp	r5, #12
 8008c0c:	bf38      	it	cc
 8008c0e:	250c      	movcc	r5, #12
 8008c10:	2d00      	cmp	r5, #0
 8008c12:	4606      	mov	r6, r0
 8008c14:	db01      	blt.n	8008c1a <_malloc_r+0x1a>
 8008c16:	42a9      	cmp	r1, r5
 8008c18:	d903      	bls.n	8008c22 <_malloc_r+0x22>
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	6033      	str	r3, [r6, #0]
 8008c1e:	2000      	movs	r0, #0
 8008c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c22:	f000 fe39 	bl	8009898 <__malloc_lock>
 8008c26:	4921      	ldr	r1, [pc, #132]	; (8008cac <_malloc_r+0xac>)
 8008c28:	680a      	ldr	r2, [r1, #0]
 8008c2a:	4614      	mov	r4, r2
 8008c2c:	b99c      	cbnz	r4, 8008c56 <_malloc_r+0x56>
 8008c2e:	4f20      	ldr	r7, [pc, #128]	; (8008cb0 <_malloc_r+0xb0>)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	b923      	cbnz	r3, 8008c3e <_malloc_r+0x3e>
 8008c34:	4621      	mov	r1, r4
 8008c36:	4630      	mov	r0, r6
 8008c38:	f000 fb2a 	bl	8009290 <_sbrk_r>
 8008c3c:	6038      	str	r0, [r7, #0]
 8008c3e:	4629      	mov	r1, r5
 8008c40:	4630      	mov	r0, r6
 8008c42:	f000 fb25 	bl	8009290 <_sbrk_r>
 8008c46:	1c43      	adds	r3, r0, #1
 8008c48:	d123      	bne.n	8008c92 <_malloc_r+0x92>
 8008c4a:	230c      	movs	r3, #12
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	6033      	str	r3, [r6, #0]
 8008c50:	f000 fe28 	bl	80098a4 <__malloc_unlock>
 8008c54:	e7e3      	b.n	8008c1e <_malloc_r+0x1e>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	1b5b      	subs	r3, r3, r5
 8008c5a:	d417      	bmi.n	8008c8c <_malloc_r+0x8c>
 8008c5c:	2b0b      	cmp	r3, #11
 8008c5e:	d903      	bls.n	8008c68 <_malloc_r+0x68>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	441c      	add	r4, r3
 8008c64:	6025      	str	r5, [r4, #0]
 8008c66:	e004      	b.n	8008c72 <_malloc_r+0x72>
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	42a2      	cmp	r2, r4
 8008c6c:	bf0c      	ite	eq
 8008c6e:	600b      	streq	r3, [r1, #0]
 8008c70:	6053      	strne	r3, [r2, #4]
 8008c72:	4630      	mov	r0, r6
 8008c74:	f000 fe16 	bl	80098a4 <__malloc_unlock>
 8008c78:	f104 000b 	add.w	r0, r4, #11
 8008c7c:	1d23      	adds	r3, r4, #4
 8008c7e:	f020 0007 	bic.w	r0, r0, #7
 8008c82:	1ac2      	subs	r2, r0, r3
 8008c84:	d0cc      	beq.n	8008c20 <_malloc_r+0x20>
 8008c86:	1a1b      	subs	r3, r3, r0
 8008c88:	50a3      	str	r3, [r4, r2]
 8008c8a:	e7c9      	b.n	8008c20 <_malloc_r+0x20>
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	6864      	ldr	r4, [r4, #4]
 8008c90:	e7cc      	b.n	8008c2c <_malloc_r+0x2c>
 8008c92:	1cc4      	adds	r4, r0, #3
 8008c94:	f024 0403 	bic.w	r4, r4, #3
 8008c98:	42a0      	cmp	r0, r4
 8008c9a:	d0e3      	beq.n	8008c64 <_malloc_r+0x64>
 8008c9c:	1a21      	subs	r1, r4, r0
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f000 faf6 	bl	8009290 <_sbrk_r>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d1dd      	bne.n	8008c64 <_malloc_r+0x64>
 8008ca8:	e7cf      	b.n	8008c4a <_malloc_r+0x4a>
 8008caa:	bf00      	nop
 8008cac:	2000043c 	.word	0x2000043c
 8008cb0:	20000440 	.word	0x20000440

08008cb4 <__sfputc_r>:
 8008cb4:	6893      	ldr	r3, [r2, #8]
 8008cb6:	b410      	push	{r4}
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	6093      	str	r3, [r2, #8]
 8008cbe:	da07      	bge.n	8008cd0 <__sfputc_r+0x1c>
 8008cc0:	6994      	ldr	r4, [r2, #24]
 8008cc2:	42a3      	cmp	r3, r4
 8008cc4:	db01      	blt.n	8008cca <__sfputc_r+0x16>
 8008cc6:	290a      	cmp	r1, #10
 8008cc8:	d102      	bne.n	8008cd0 <__sfputc_r+0x1c>
 8008cca:	bc10      	pop	{r4}
 8008ccc:	f000 baf0 	b.w	80092b0 <__swbuf_r>
 8008cd0:	6813      	ldr	r3, [r2, #0]
 8008cd2:	1c58      	adds	r0, r3, #1
 8008cd4:	6010      	str	r0, [r2, #0]
 8008cd6:	7019      	strb	r1, [r3, #0]
 8008cd8:	4608      	mov	r0, r1
 8008cda:	bc10      	pop	{r4}
 8008cdc:	4770      	bx	lr

08008cde <__sfputs_r>:
 8008cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	460f      	mov	r7, r1
 8008ce4:	4614      	mov	r4, r2
 8008ce6:	18d5      	adds	r5, r2, r3
 8008ce8:	42ac      	cmp	r4, r5
 8008cea:	d101      	bne.n	8008cf0 <__sfputs_r+0x12>
 8008cec:	2000      	movs	r0, #0
 8008cee:	e007      	b.n	8008d00 <__sfputs_r+0x22>
 8008cf0:	463a      	mov	r2, r7
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf8:	f7ff ffdc 	bl	8008cb4 <__sfputc_r>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d1f3      	bne.n	8008ce8 <__sfputs_r+0xa>
 8008d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d04 <_vfiprintf_r>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	460d      	mov	r5, r1
 8008d0a:	4614      	mov	r4, r2
 8008d0c:	4698      	mov	r8, r3
 8008d0e:	4606      	mov	r6, r0
 8008d10:	b09d      	sub	sp, #116	; 0x74
 8008d12:	b118      	cbz	r0, 8008d1c <_vfiprintf_r+0x18>
 8008d14:	6983      	ldr	r3, [r0, #24]
 8008d16:	b90b      	cbnz	r3, 8008d1c <_vfiprintf_r+0x18>
 8008d18:	f000 fcac 	bl	8009674 <__sinit>
 8008d1c:	4b89      	ldr	r3, [pc, #548]	; (8008f44 <_vfiprintf_r+0x240>)
 8008d1e:	429d      	cmp	r5, r3
 8008d20:	d11b      	bne.n	8008d5a <_vfiprintf_r+0x56>
 8008d22:	6875      	ldr	r5, [r6, #4]
 8008d24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d26:	07d9      	lsls	r1, r3, #31
 8008d28:	d405      	bmi.n	8008d36 <_vfiprintf_r+0x32>
 8008d2a:	89ab      	ldrh	r3, [r5, #12]
 8008d2c:	059a      	lsls	r2, r3, #22
 8008d2e:	d402      	bmi.n	8008d36 <_vfiprintf_r+0x32>
 8008d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d32:	f000 fd3d 	bl	80097b0 <__retarget_lock_acquire_recursive>
 8008d36:	89ab      	ldrh	r3, [r5, #12]
 8008d38:	071b      	lsls	r3, r3, #28
 8008d3a:	d501      	bpl.n	8008d40 <_vfiprintf_r+0x3c>
 8008d3c:	692b      	ldr	r3, [r5, #16]
 8008d3e:	b9eb      	cbnz	r3, 8008d7c <_vfiprintf_r+0x78>
 8008d40:	4629      	mov	r1, r5
 8008d42:	4630      	mov	r0, r6
 8008d44:	f000 fb06 	bl	8009354 <__swsetup_r>
 8008d48:	b1c0      	cbz	r0, 8008d7c <_vfiprintf_r+0x78>
 8008d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d4c:	07dc      	lsls	r4, r3, #31
 8008d4e:	d50e      	bpl.n	8008d6e <_vfiprintf_r+0x6a>
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	b01d      	add	sp, #116	; 0x74
 8008d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5a:	4b7b      	ldr	r3, [pc, #492]	; (8008f48 <_vfiprintf_r+0x244>)
 8008d5c:	429d      	cmp	r5, r3
 8008d5e:	d101      	bne.n	8008d64 <_vfiprintf_r+0x60>
 8008d60:	68b5      	ldr	r5, [r6, #8]
 8008d62:	e7df      	b.n	8008d24 <_vfiprintf_r+0x20>
 8008d64:	4b79      	ldr	r3, [pc, #484]	; (8008f4c <_vfiprintf_r+0x248>)
 8008d66:	429d      	cmp	r5, r3
 8008d68:	bf08      	it	eq
 8008d6a:	68f5      	ldreq	r5, [r6, #12]
 8008d6c:	e7da      	b.n	8008d24 <_vfiprintf_r+0x20>
 8008d6e:	89ab      	ldrh	r3, [r5, #12]
 8008d70:	0598      	lsls	r0, r3, #22
 8008d72:	d4ed      	bmi.n	8008d50 <_vfiprintf_r+0x4c>
 8008d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d76:	f000 fd1c 	bl	80097b2 <__retarget_lock_release_recursive>
 8008d7a:	e7e9      	b.n	8008d50 <_vfiprintf_r+0x4c>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d80:	2320      	movs	r3, #32
 8008d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d86:	2330      	movs	r3, #48	; 0x30
 8008d88:	f04f 0901 	mov.w	r9, #1
 8008d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008f50 <_vfiprintf_r+0x24c>
 8008d94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d98:	4623      	mov	r3, r4
 8008d9a:	469a      	mov	sl, r3
 8008d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008da0:	b10a      	cbz	r2, 8008da6 <_vfiprintf_r+0xa2>
 8008da2:	2a25      	cmp	r2, #37	; 0x25
 8008da4:	d1f9      	bne.n	8008d9a <_vfiprintf_r+0x96>
 8008da6:	ebba 0b04 	subs.w	fp, sl, r4
 8008daa:	d00b      	beq.n	8008dc4 <_vfiprintf_r+0xc0>
 8008dac:	465b      	mov	r3, fp
 8008dae:	4622      	mov	r2, r4
 8008db0:	4629      	mov	r1, r5
 8008db2:	4630      	mov	r0, r6
 8008db4:	f7ff ff93 	bl	8008cde <__sfputs_r>
 8008db8:	3001      	adds	r0, #1
 8008dba:	f000 80aa 	beq.w	8008f12 <_vfiprintf_r+0x20e>
 8008dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dc0:	445a      	add	r2, fp
 8008dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8008dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 80a2 	beq.w	8008f12 <_vfiprintf_r+0x20e>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd8:	f10a 0a01 	add.w	sl, sl, #1
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	9307      	str	r3, [sp, #28]
 8008de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008de4:	931a      	str	r3, [sp, #104]	; 0x68
 8008de6:	4654      	mov	r4, sl
 8008de8:	2205      	movs	r2, #5
 8008dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dee:	4858      	ldr	r0, [pc, #352]	; (8008f50 <_vfiprintf_r+0x24c>)
 8008df0:	f000 fd44 	bl	800987c <memchr>
 8008df4:	9a04      	ldr	r2, [sp, #16]
 8008df6:	b9d8      	cbnz	r0, 8008e30 <_vfiprintf_r+0x12c>
 8008df8:	06d1      	lsls	r1, r2, #27
 8008dfa:	bf44      	itt	mi
 8008dfc:	2320      	movmi	r3, #32
 8008dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e02:	0713      	lsls	r3, r2, #28
 8008e04:	bf44      	itt	mi
 8008e06:	232b      	movmi	r3, #43	; 0x2b
 8008e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e10:	2b2a      	cmp	r3, #42	; 0x2a
 8008e12:	d015      	beq.n	8008e40 <_vfiprintf_r+0x13c>
 8008e14:	4654      	mov	r4, sl
 8008e16:	2000      	movs	r0, #0
 8008e18:	f04f 0c0a 	mov.w	ip, #10
 8008e1c:	9a07      	ldr	r2, [sp, #28]
 8008e1e:	4621      	mov	r1, r4
 8008e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e24:	3b30      	subs	r3, #48	; 0x30
 8008e26:	2b09      	cmp	r3, #9
 8008e28:	d94e      	bls.n	8008ec8 <_vfiprintf_r+0x1c4>
 8008e2a:	b1b0      	cbz	r0, 8008e5a <_vfiprintf_r+0x156>
 8008e2c:	9207      	str	r2, [sp, #28]
 8008e2e:	e014      	b.n	8008e5a <_vfiprintf_r+0x156>
 8008e30:	eba0 0308 	sub.w	r3, r0, r8
 8008e34:	fa09 f303 	lsl.w	r3, r9, r3
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	46a2      	mov	sl, r4
 8008e3c:	9304      	str	r3, [sp, #16]
 8008e3e:	e7d2      	b.n	8008de6 <_vfiprintf_r+0xe2>
 8008e40:	9b03      	ldr	r3, [sp, #12]
 8008e42:	1d19      	adds	r1, r3, #4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	9103      	str	r1, [sp, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	bfbb      	ittet	lt
 8008e4c:	425b      	neglt	r3, r3
 8008e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e52:	9307      	strge	r3, [sp, #28]
 8008e54:	9307      	strlt	r3, [sp, #28]
 8008e56:	bfb8      	it	lt
 8008e58:	9204      	strlt	r2, [sp, #16]
 8008e5a:	7823      	ldrb	r3, [r4, #0]
 8008e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e5e:	d10c      	bne.n	8008e7a <_vfiprintf_r+0x176>
 8008e60:	7863      	ldrb	r3, [r4, #1]
 8008e62:	2b2a      	cmp	r3, #42	; 0x2a
 8008e64:	d135      	bne.n	8008ed2 <_vfiprintf_r+0x1ce>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	3402      	adds	r4, #2
 8008e6a:	1d1a      	adds	r2, r3, #4
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	9203      	str	r2, [sp, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	bfb8      	it	lt
 8008e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e78:	9305      	str	r3, [sp, #20]
 8008e7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f60 <_vfiprintf_r+0x25c>
 8008e7e:	2203      	movs	r2, #3
 8008e80:	4650      	mov	r0, sl
 8008e82:	7821      	ldrb	r1, [r4, #0]
 8008e84:	f000 fcfa 	bl	800987c <memchr>
 8008e88:	b140      	cbz	r0, 8008e9c <_vfiprintf_r+0x198>
 8008e8a:	2340      	movs	r3, #64	; 0x40
 8008e8c:	eba0 000a 	sub.w	r0, r0, sl
 8008e90:	fa03 f000 	lsl.w	r0, r3, r0
 8008e94:	9b04      	ldr	r3, [sp, #16]
 8008e96:	3401      	adds	r4, #1
 8008e98:	4303      	orrs	r3, r0
 8008e9a:	9304      	str	r3, [sp, #16]
 8008e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea0:	2206      	movs	r2, #6
 8008ea2:	482c      	ldr	r0, [pc, #176]	; (8008f54 <_vfiprintf_r+0x250>)
 8008ea4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ea8:	f000 fce8 	bl	800987c <memchr>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d03f      	beq.n	8008f30 <_vfiprintf_r+0x22c>
 8008eb0:	4b29      	ldr	r3, [pc, #164]	; (8008f58 <_vfiprintf_r+0x254>)
 8008eb2:	bb1b      	cbnz	r3, 8008efc <_vfiprintf_r+0x1f8>
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	3307      	adds	r3, #7
 8008eb8:	f023 0307 	bic.w	r3, r3, #7
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	9303      	str	r3, [sp, #12]
 8008ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec2:	443b      	add	r3, r7
 8008ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec6:	e767      	b.n	8008d98 <_vfiprintf_r+0x94>
 8008ec8:	460c      	mov	r4, r1
 8008eca:	2001      	movs	r0, #1
 8008ecc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ed0:	e7a5      	b.n	8008e1e <_vfiprintf_r+0x11a>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f04f 0c0a 	mov.w	ip, #10
 8008ed8:	4619      	mov	r1, r3
 8008eda:	3401      	adds	r4, #1
 8008edc:	9305      	str	r3, [sp, #20]
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ee4:	3a30      	subs	r2, #48	; 0x30
 8008ee6:	2a09      	cmp	r2, #9
 8008ee8:	d903      	bls.n	8008ef2 <_vfiprintf_r+0x1ee>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0c5      	beq.n	8008e7a <_vfiprintf_r+0x176>
 8008eee:	9105      	str	r1, [sp, #20]
 8008ef0:	e7c3      	b.n	8008e7a <_vfiprintf_r+0x176>
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008efa:	e7f0      	b.n	8008ede <_vfiprintf_r+0x1da>
 8008efc:	ab03      	add	r3, sp, #12
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	462a      	mov	r2, r5
 8008f02:	4630      	mov	r0, r6
 8008f04:	4b15      	ldr	r3, [pc, #84]	; (8008f5c <_vfiprintf_r+0x258>)
 8008f06:	a904      	add	r1, sp, #16
 8008f08:	f3af 8000 	nop.w
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	1c78      	adds	r0, r7, #1
 8008f10:	d1d6      	bne.n	8008ec0 <_vfiprintf_r+0x1bc>
 8008f12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f14:	07d9      	lsls	r1, r3, #31
 8008f16:	d405      	bmi.n	8008f24 <_vfiprintf_r+0x220>
 8008f18:	89ab      	ldrh	r3, [r5, #12]
 8008f1a:	059a      	lsls	r2, r3, #22
 8008f1c:	d402      	bmi.n	8008f24 <_vfiprintf_r+0x220>
 8008f1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f20:	f000 fc47 	bl	80097b2 <__retarget_lock_release_recursive>
 8008f24:	89ab      	ldrh	r3, [r5, #12]
 8008f26:	065b      	lsls	r3, r3, #25
 8008f28:	f53f af12 	bmi.w	8008d50 <_vfiprintf_r+0x4c>
 8008f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f2e:	e711      	b.n	8008d54 <_vfiprintf_r+0x50>
 8008f30:	ab03      	add	r3, sp, #12
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	462a      	mov	r2, r5
 8008f36:	4630      	mov	r0, r6
 8008f38:	4b08      	ldr	r3, [pc, #32]	; (8008f5c <_vfiprintf_r+0x258>)
 8008f3a:	a904      	add	r1, sp, #16
 8008f3c:	f000 f882 	bl	8009044 <_printf_i>
 8008f40:	e7e4      	b.n	8008f0c <_vfiprintf_r+0x208>
 8008f42:	bf00      	nop
 8008f44:	08009ce8 	.word	0x08009ce8
 8008f48:	08009d08 	.word	0x08009d08
 8008f4c:	08009cc8 	.word	0x08009cc8
 8008f50:	08009c94 	.word	0x08009c94
 8008f54:	08009c9e 	.word	0x08009c9e
 8008f58:	00000000 	.word	0x00000000
 8008f5c:	08008cdf 	.word	0x08008cdf
 8008f60:	08009c9a 	.word	0x08009c9a

08008f64 <_printf_common>:
 8008f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f68:	4616      	mov	r6, r2
 8008f6a:	4699      	mov	r9, r3
 8008f6c:	688a      	ldr	r2, [r1, #8]
 8008f6e:	690b      	ldr	r3, [r1, #16]
 8008f70:	4607      	mov	r7, r0
 8008f72:	4293      	cmp	r3, r2
 8008f74:	bfb8      	it	lt
 8008f76:	4613      	movlt	r3, r2
 8008f78:	6033      	str	r3, [r6, #0]
 8008f7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f7e:	460c      	mov	r4, r1
 8008f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f84:	b10a      	cbz	r2, 8008f8a <_printf_common+0x26>
 8008f86:	3301      	adds	r3, #1
 8008f88:	6033      	str	r3, [r6, #0]
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	0699      	lsls	r1, r3, #26
 8008f8e:	bf42      	ittt	mi
 8008f90:	6833      	ldrmi	r3, [r6, #0]
 8008f92:	3302      	addmi	r3, #2
 8008f94:	6033      	strmi	r3, [r6, #0]
 8008f96:	6825      	ldr	r5, [r4, #0]
 8008f98:	f015 0506 	ands.w	r5, r5, #6
 8008f9c:	d106      	bne.n	8008fac <_printf_common+0x48>
 8008f9e:	f104 0a19 	add.w	sl, r4, #25
 8008fa2:	68e3      	ldr	r3, [r4, #12]
 8008fa4:	6832      	ldr	r2, [r6, #0]
 8008fa6:	1a9b      	subs	r3, r3, r2
 8008fa8:	42ab      	cmp	r3, r5
 8008faa:	dc28      	bgt.n	8008ffe <_printf_common+0x9a>
 8008fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fb0:	1e13      	subs	r3, r2, #0
 8008fb2:	6822      	ldr	r2, [r4, #0]
 8008fb4:	bf18      	it	ne
 8008fb6:	2301      	movne	r3, #1
 8008fb8:	0692      	lsls	r2, r2, #26
 8008fba:	d42d      	bmi.n	8009018 <_printf_common+0xb4>
 8008fbc:	4649      	mov	r1, r9
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fc4:	47c0      	blx	r8
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	d020      	beq.n	800900c <_printf_common+0xa8>
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	68e5      	ldr	r5, [r4, #12]
 8008fce:	f003 0306 	and.w	r3, r3, #6
 8008fd2:	2b04      	cmp	r3, #4
 8008fd4:	bf18      	it	ne
 8008fd6:	2500      	movne	r5, #0
 8008fd8:	6832      	ldr	r2, [r6, #0]
 8008fda:	f04f 0600 	mov.w	r6, #0
 8008fde:	68a3      	ldr	r3, [r4, #8]
 8008fe0:	bf08      	it	eq
 8008fe2:	1aad      	subeq	r5, r5, r2
 8008fe4:	6922      	ldr	r2, [r4, #16]
 8008fe6:	bf08      	it	eq
 8008fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fec:	4293      	cmp	r3, r2
 8008fee:	bfc4      	itt	gt
 8008ff0:	1a9b      	subgt	r3, r3, r2
 8008ff2:	18ed      	addgt	r5, r5, r3
 8008ff4:	341a      	adds	r4, #26
 8008ff6:	42b5      	cmp	r5, r6
 8008ff8:	d11a      	bne.n	8009030 <_printf_common+0xcc>
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	e008      	b.n	8009010 <_printf_common+0xac>
 8008ffe:	2301      	movs	r3, #1
 8009000:	4652      	mov	r2, sl
 8009002:	4649      	mov	r1, r9
 8009004:	4638      	mov	r0, r7
 8009006:	47c0      	blx	r8
 8009008:	3001      	adds	r0, #1
 800900a:	d103      	bne.n	8009014 <_printf_common+0xb0>
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009014:	3501      	adds	r5, #1
 8009016:	e7c4      	b.n	8008fa2 <_printf_common+0x3e>
 8009018:	2030      	movs	r0, #48	; 0x30
 800901a:	18e1      	adds	r1, r4, r3
 800901c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009026:	4422      	add	r2, r4
 8009028:	3302      	adds	r3, #2
 800902a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800902e:	e7c5      	b.n	8008fbc <_printf_common+0x58>
 8009030:	2301      	movs	r3, #1
 8009032:	4622      	mov	r2, r4
 8009034:	4649      	mov	r1, r9
 8009036:	4638      	mov	r0, r7
 8009038:	47c0      	blx	r8
 800903a:	3001      	adds	r0, #1
 800903c:	d0e6      	beq.n	800900c <_printf_common+0xa8>
 800903e:	3601      	adds	r6, #1
 8009040:	e7d9      	b.n	8008ff6 <_printf_common+0x92>
	...

08009044 <_printf_i>:
 8009044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009048:	460c      	mov	r4, r1
 800904a:	7e27      	ldrb	r7, [r4, #24]
 800904c:	4691      	mov	r9, r2
 800904e:	2f78      	cmp	r7, #120	; 0x78
 8009050:	4680      	mov	r8, r0
 8009052:	469a      	mov	sl, r3
 8009054:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009056:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800905a:	d807      	bhi.n	800906c <_printf_i+0x28>
 800905c:	2f62      	cmp	r7, #98	; 0x62
 800905e:	d80a      	bhi.n	8009076 <_printf_i+0x32>
 8009060:	2f00      	cmp	r7, #0
 8009062:	f000 80d9 	beq.w	8009218 <_printf_i+0x1d4>
 8009066:	2f58      	cmp	r7, #88	; 0x58
 8009068:	f000 80a4 	beq.w	80091b4 <_printf_i+0x170>
 800906c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009074:	e03a      	b.n	80090ec <_printf_i+0xa8>
 8009076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800907a:	2b15      	cmp	r3, #21
 800907c:	d8f6      	bhi.n	800906c <_printf_i+0x28>
 800907e:	a001      	add	r0, pc, #4	; (adr r0, 8009084 <_printf_i+0x40>)
 8009080:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009084:	080090dd 	.word	0x080090dd
 8009088:	080090f1 	.word	0x080090f1
 800908c:	0800906d 	.word	0x0800906d
 8009090:	0800906d 	.word	0x0800906d
 8009094:	0800906d 	.word	0x0800906d
 8009098:	0800906d 	.word	0x0800906d
 800909c:	080090f1 	.word	0x080090f1
 80090a0:	0800906d 	.word	0x0800906d
 80090a4:	0800906d 	.word	0x0800906d
 80090a8:	0800906d 	.word	0x0800906d
 80090ac:	0800906d 	.word	0x0800906d
 80090b0:	080091ff 	.word	0x080091ff
 80090b4:	08009121 	.word	0x08009121
 80090b8:	080091e1 	.word	0x080091e1
 80090bc:	0800906d 	.word	0x0800906d
 80090c0:	0800906d 	.word	0x0800906d
 80090c4:	08009221 	.word	0x08009221
 80090c8:	0800906d 	.word	0x0800906d
 80090cc:	08009121 	.word	0x08009121
 80090d0:	0800906d 	.word	0x0800906d
 80090d4:	0800906d 	.word	0x0800906d
 80090d8:	080091e9 	.word	0x080091e9
 80090dc:	680b      	ldr	r3, [r1, #0]
 80090de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090e2:	1d1a      	adds	r2, r3, #4
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	600a      	str	r2, [r1, #0]
 80090e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090ec:	2301      	movs	r3, #1
 80090ee:	e0a4      	b.n	800923a <_printf_i+0x1f6>
 80090f0:	6825      	ldr	r5, [r4, #0]
 80090f2:	6808      	ldr	r0, [r1, #0]
 80090f4:	062e      	lsls	r6, r5, #24
 80090f6:	f100 0304 	add.w	r3, r0, #4
 80090fa:	d50a      	bpl.n	8009112 <_printf_i+0xce>
 80090fc:	6805      	ldr	r5, [r0, #0]
 80090fe:	600b      	str	r3, [r1, #0]
 8009100:	2d00      	cmp	r5, #0
 8009102:	da03      	bge.n	800910c <_printf_i+0xc8>
 8009104:	232d      	movs	r3, #45	; 0x2d
 8009106:	426d      	negs	r5, r5
 8009108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800910c:	230a      	movs	r3, #10
 800910e:	485e      	ldr	r0, [pc, #376]	; (8009288 <_printf_i+0x244>)
 8009110:	e019      	b.n	8009146 <_printf_i+0x102>
 8009112:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009116:	6805      	ldr	r5, [r0, #0]
 8009118:	600b      	str	r3, [r1, #0]
 800911a:	bf18      	it	ne
 800911c:	b22d      	sxthne	r5, r5
 800911e:	e7ef      	b.n	8009100 <_printf_i+0xbc>
 8009120:	680b      	ldr	r3, [r1, #0]
 8009122:	6825      	ldr	r5, [r4, #0]
 8009124:	1d18      	adds	r0, r3, #4
 8009126:	6008      	str	r0, [r1, #0]
 8009128:	0628      	lsls	r0, r5, #24
 800912a:	d501      	bpl.n	8009130 <_printf_i+0xec>
 800912c:	681d      	ldr	r5, [r3, #0]
 800912e:	e002      	b.n	8009136 <_printf_i+0xf2>
 8009130:	0669      	lsls	r1, r5, #25
 8009132:	d5fb      	bpl.n	800912c <_printf_i+0xe8>
 8009134:	881d      	ldrh	r5, [r3, #0]
 8009136:	2f6f      	cmp	r7, #111	; 0x6f
 8009138:	bf0c      	ite	eq
 800913a:	2308      	moveq	r3, #8
 800913c:	230a      	movne	r3, #10
 800913e:	4852      	ldr	r0, [pc, #328]	; (8009288 <_printf_i+0x244>)
 8009140:	2100      	movs	r1, #0
 8009142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009146:	6866      	ldr	r6, [r4, #4]
 8009148:	2e00      	cmp	r6, #0
 800914a:	bfa8      	it	ge
 800914c:	6821      	ldrge	r1, [r4, #0]
 800914e:	60a6      	str	r6, [r4, #8]
 8009150:	bfa4      	itt	ge
 8009152:	f021 0104 	bicge.w	r1, r1, #4
 8009156:	6021      	strge	r1, [r4, #0]
 8009158:	b90d      	cbnz	r5, 800915e <_printf_i+0x11a>
 800915a:	2e00      	cmp	r6, #0
 800915c:	d04d      	beq.n	80091fa <_printf_i+0x1b6>
 800915e:	4616      	mov	r6, r2
 8009160:	fbb5 f1f3 	udiv	r1, r5, r3
 8009164:	fb03 5711 	mls	r7, r3, r1, r5
 8009168:	5dc7      	ldrb	r7, [r0, r7]
 800916a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800916e:	462f      	mov	r7, r5
 8009170:	42bb      	cmp	r3, r7
 8009172:	460d      	mov	r5, r1
 8009174:	d9f4      	bls.n	8009160 <_printf_i+0x11c>
 8009176:	2b08      	cmp	r3, #8
 8009178:	d10b      	bne.n	8009192 <_printf_i+0x14e>
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	07df      	lsls	r7, r3, #31
 800917e:	d508      	bpl.n	8009192 <_printf_i+0x14e>
 8009180:	6923      	ldr	r3, [r4, #16]
 8009182:	6861      	ldr	r1, [r4, #4]
 8009184:	4299      	cmp	r1, r3
 8009186:	bfde      	ittt	le
 8009188:	2330      	movle	r3, #48	; 0x30
 800918a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800918e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009192:	1b92      	subs	r2, r2, r6
 8009194:	6122      	str	r2, [r4, #16]
 8009196:	464b      	mov	r3, r9
 8009198:	4621      	mov	r1, r4
 800919a:	4640      	mov	r0, r8
 800919c:	f8cd a000 	str.w	sl, [sp]
 80091a0:	aa03      	add	r2, sp, #12
 80091a2:	f7ff fedf 	bl	8008f64 <_printf_common>
 80091a6:	3001      	adds	r0, #1
 80091a8:	d14c      	bne.n	8009244 <_printf_i+0x200>
 80091aa:	f04f 30ff 	mov.w	r0, #4294967295
 80091ae:	b004      	add	sp, #16
 80091b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b4:	4834      	ldr	r0, [pc, #208]	; (8009288 <_printf_i+0x244>)
 80091b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091ba:	680e      	ldr	r6, [r1, #0]
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	f856 5b04 	ldr.w	r5, [r6], #4
 80091c2:	061f      	lsls	r7, r3, #24
 80091c4:	600e      	str	r6, [r1, #0]
 80091c6:	d514      	bpl.n	80091f2 <_printf_i+0x1ae>
 80091c8:	07d9      	lsls	r1, r3, #31
 80091ca:	bf44      	itt	mi
 80091cc:	f043 0320 	orrmi.w	r3, r3, #32
 80091d0:	6023      	strmi	r3, [r4, #0]
 80091d2:	b91d      	cbnz	r5, 80091dc <_printf_i+0x198>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	f023 0320 	bic.w	r3, r3, #32
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	2310      	movs	r3, #16
 80091de:	e7af      	b.n	8009140 <_printf_i+0xfc>
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	f043 0320 	orr.w	r3, r3, #32
 80091e6:	6023      	str	r3, [r4, #0]
 80091e8:	2378      	movs	r3, #120	; 0x78
 80091ea:	4828      	ldr	r0, [pc, #160]	; (800928c <_printf_i+0x248>)
 80091ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091f0:	e7e3      	b.n	80091ba <_printf_i+0x176>
 80091f2:	065e      	lsls	r6, r3, #25
 80091f4:	bf48      	it	mi
 80091f6:	b2ad      	uxthmi	r5, r5
 80091f8:	e7e6      	b.n	80091c8 <_printf_i+0x184>
 80091fa:	4616      	mov	r6, r2
 80091fc:	e7bb      	b.n	8009176 <_printf_i+0x132>
 80091fe:	680b      	ldr	r3, [r1, #0]
 8009200:	6826      	ldr	r6, [r4, #0]
 8009202:	1d1d      	adds	r5, r3, #4
 8009204:	6960      	ldr	r0, [r4, #20]
 8009206:	600d      	str	r5, [r1, #0]
 8009208:	0635      	lsls	r5, r6, #24
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	d501      	bpl.n	8009212 <_printf_i+0x1ce>
 800920e:	6018      	str	r0, [r3, #0]
 8009210:	e002      	b.n	8009218 <_printf_i+0x1d4>
 8009212:	0671      	lsls	r1, r6, #25
 8009214:	d5fb      	bpl.n	800920e <_printf_i+0x1ca>
 8009216:	8018      	strh	r0, [r3, #0]
 8009218:	2300      	movs	r3, #0
 800921a:	4616      	mov	r6, r2
 800921c:	6123      	str	r3, [r4, #16]
 800921e:	e7ba      	b.n	8009196 <_printf_i+0x152>
 8009220:	680b      	ldr	r3, [r1, #0]
 8009222:	1d1a      	adds	r2, r3, #4
 8009224:	600a      	str	r2, [r1, #0]
 8009226:	681e      	ldr	r6, [r3, #0]
 8009228:	2100      	movs	r1, #0
 800922a:	4630      	mov	r0, r6
 800922c:	6862      	ldr	r2, [r4, #4]
 800922e:	f000 fb25 	bl	800987c <memchr>
 8009232:	b108      	cbz	r0, 8009238 <_printf_i+0x1f4>
 8009234:	1b80      	subs	r0, r0, r6
 8009236:	6060      	str	r0, [r4, #4]
 8009238:	6863      	ldr	r3, [r4, #4]
 800923a:	6123      	str	r3, [r4, #16]
 800923c:	2300      	movs	r3, #0
 800923e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009242:	e7a8      	b.n	8009196 <_printf_i+0x152>
 8009244:	4632      	mov	r2, r6
 8009246:	4649      	mov	r1, r9
 8009248:	4640      	mov	r0, r8
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	47d0      	blx	sl
 800924e:	3001      	adds	r0, #1
 8009250:	d0ab      	beq.n	80091aa <_printf_i+0x166>
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	079b      	lsls	r3, r3, #30
 8009256:	d413      	bmi.n	8009280 <_printf_i+0x23c>
 8009258:	68e0      	ldr	r0, [r4, #12]
 800925a:	9b03      	ldr	r3, [sp, #12]
 800925c:	4298      	cmp	r0, r3
 800925e:	bfb8      	it	lt
 8009260:	4618      	movlt	r0, r3
 8009262:	e7a4      	b.n	80091ae <_printf_i+0x16a>
 8009264:	2301      	movs	r3, #1
 8009266:	4632      	mov	r2, r6
 8009268:	4649      	mov	r1, r9
 800926a:	4640      	mov	r0, r8
 800926c:	47d0      	blx	sl
 800926e:	3001      	adds	r0, #1
 8009270:	d09b      	beq.n	80091aa <_printf_i+0x166>
 8009272:	3501      	adds	r5, #1
 8009274:	68e3      	ldr	r3, [r4, #12]
 8009276:	9903      	ldr	r1, [sp, #12]
 8009278:	1a5b      	subs	r3, r3, r1
 800927a:	42ab      	cmp	r3, r5
 800927c:	dcf2      	bgt.n	8009264 <_printf_i+0x220>
 800927e:	e7eb      	b.n	8009258 <_printf_i+0x214>
 8009280:	2500      	movs	r5, #0
 8009282:	f104 0619 	add.w	r6, r4, #25
 8009286:	e7f5      	b.n	8009274 <_printf_i+0x230>
 8009288:	08009ca5 	.word	0x08009ca5
 800928c:	08009cb6 	.word	0x08009cb6

08009290 <_sbrk_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	2300      	movs	r3, #0
 8009294:	4d05      	ldr	r5, [pc, #20]	; (80092ac <_sbrk_r+0x1c>)
 8009296:	4604      	mov	r4, r0
 8009298:	4608      	mov	r0, r1
 800929a:	602b      	str	r3, [r5, #0]
 800929c:	f7f8 f970 	bl	8001580 <_sbrk>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_sbrk_r+0x1a>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_sbrk_r+0x1a>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	2000158c 	.word	0x2000158c

080092b0 <__swbuf_r>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	460e      	mov	r6, r1
 80092b4:	4614      	mov	r4, r2
 80092b6:	4605      	mov	r5, r0
 80092b8:	b118      	cbz	r0, 80092c2 <__swbuf_r+0x12>
 80092ba:	6983      	ldr	r3, [r0, #24]
 80092bc:	b90b      	cbnz	r3, 80092c2 <__swbuf_r+0x12>
 80092be:	f000 f9d9 	bl	8009674 <__sinit>
 80092c2:	4b21      	ldr	r3, [pc, #132]	; (8009348 <__swbuf_r+0x98>)
 80092c4:	429c      	cmp	r4, r3
 80092c6:	d12b      	bne.n	8009320 <__swbuf_r+0x70>
 80092c8:	686c      	ldr	r4, [r5, #4]
 80092ca:	69a3      	ldr	r3, [r4, #24]
 80092cc:	60a3      	str	r3, [r4, #8]
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	071a      	lsls	r2, r3, #28
 80092d2:	d52f      	bpl.n	8009334 <__swbuf_r+0x84>
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	b36b      	cbz	r3, 8009334 <__swbuf_r+0x84>
 80092d8:	6923      	ldr	r3, [r4, #16]
 80092da:	6820      	ldr	r0, [r4, #0]
 80092dc:	b2f6      	uxtb	r6, r6
 80092de:	1ac0      	subs	r0, r0, r3
 80092e0:	6963      	ldr	r3, [r4, #20]
 80092e2:	4637      	mov	r7, r6
 80092e4:	4283      	cmp	r3, r0
 80092e6:	dc04      	bgt.n	80092f2 <__swbuf_r+0x42>
 80092e8:	4621      	mov	r1, r4
 80092ea:	4628      	mov	r0, r5
 80092ec:	f000 f92e 	bl	800954c <_fflush_r>
 80092f0:	bb30      	cbnz	r0, 8009340 <__swbuf_r+0x90>
 80092f2:	68a3      	ldr	r3, [r4, #8]
 80092f4:	3001      	adds	r0, #1
 80092f6:	3b01      	subs	r3, #1
 80092f8:	60a3      	str	r3, [r4, #8]
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	1c5a      	adds	r2, r3, #1
 80092fe:	6022      	str	r2, [r4, #0]
 8009300:	701e      	strb	r6, [r3, #0]
 8009302:	6963      	ldr	r3, [r4, #20]
 8009304:	4283      	cmp	r3, r0
 8009306:	d004      	beq.n	8009312 <__swbuf_r+0x62>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	07db      	lsls	r3, r3, #31
 800930c:	d506      	bpl.n	800931c <__swbuf_r+0x6c>
 800930e:	2e0a      	cmp	r6, #10
 8009310:	d104      	bne.n	800931c <__swbuf_r+0x6c>
 8009312:	4621      	mov	r1, r4
 8009314:	4628      	mov	r0, r5
 8009316:	f000 f919 	bl	800954c <_fflush_r>
 800931a:	b988      	cbnz	r0, 8009340 <__swbuf_r+0x90>
 800931c:	4638      	mov	r0, r7
 800931e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009320:	4b0a      	ldr	r3, [pc, #40]	; (800934c <__swbuf_r+0x9c>)
 8009322:	429c      	cmp	r4, r3
 8009324:	d101      	bne.n	800932a <__swbuf_r+0x7a>
 8009326:	68ac      	ldr	r4, [r5, #8]
 8009328:	e7cf      	b.n	80092ca <__swbuf_r+0x1a>
 800932a:	4b09      	ldr	r3, [pc, #36]	; (8009350 <__swbuf_r+0xa0>)
 800932c:	429c      	cmp	r4, r3
 800932e:	bf08      	it	eq
 8009330:	68ec      	ldreq	r4, [r5, #12]
 8009332:	e7ca      	b.n	80092ca <__swbuf_r+0x1a>
 8009334:	4621      	mov	r1, r4
 8009336:	4628      	mov	r0, r5
 8009338:	f000 f80c 	bl	8009354 <__swsetup_r>
 800933c:	2800      	cmp	r0, #0
 800933e:	d0cb      	beq.n	80092d8 <__swbuf_r+0x28>
 8009340:	f04f 37ff 	mov.w	r7, #4294967295
 8009344:	e7ea      	b.n	800931c <__swbuf_r+0x6c>
 8009346:	bf00      	nop
 8009348:	08009ce8 	.word	0x08009ce8
 800934c:	08009d08 	.word	0x08009d08
 8009350:	08009cc8 	.word	0x08009cc8

08009354 <__swsetup_r>:
 8009354:	4b32      	ldr	r3, [pc, #200]	; (8009420 <__swsetup_r+0xcc>)
 8009356:	b570      	push	{r4, r5, r6, lr}
 8009358:	681d      	ldr	r5, [r3, #0]
 800935a:	4606      	mov	r6, r0
 800935c:	460c      	mov	r4, r1
 800935e:	b125      	cbz	r5, 800936a <__swsetup_r+0x16>
 8009360:	69ab      	ldr	r3, [r5, #24]
 8009362:	b913      	cbnz	r3, 800936a <__swsetup_r+0x16>
 8009364:	4628      	mov	r0, r5
 8009366:	f000 f985 	bl	8009674 <__sinit>
 800936a:	4b2e      	ldr	r3, [pc, #184]	; (8009424 <__swsetup_r+0xd0>)
 800936c:	429c      	cmp	r4, r3
 800936e:	d10f      	bne.n	8009390 <__swsetup_r+0x3c>
 8009370:	686c      	ldr	r4, [r5, #4]
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009378:	0719      	lsls	r1, r3, #28
 800937a:	d42c      	bmi.n	80093d6 <__swsetup_r+0x82>
 800937c:	06dd      	lsls	r5, r3, #27
 800937e:	d411      	bmi.n	80093a4 <__swsetup_r+0x50>
 8009380:	2309      	movs	r3, #9
 8009382:	6033      	str	r3, [r6, #0]
 8009384:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009388:	f04f 30ff 	mov.w	r0, #4294967295
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	e03e      	b.n	800940e <__swsetup_r+0xba>
 8009390:	4b25      	ldr	r3, [pc, #148]	; (8009428 <__swsetup_r+0xd4>)
 8009392:	429c      	cmp	r4, r3
 8009394:	d101      	bne.n	800939a <__swsetup_r+0x46>
 8009396:	68ac      	ldr	r4, [r5, #8]
 8009398:	e7eb      	b.n	8009372 <__swsetup_r+0x1e>
 800939a:	4b24      	ldr	r3, [pc, #144]	; (800942c <__swsetup_r+0xd8>)
 800939c:	429c      	cmp	r4, r3
 800939e:	bf08      	it	eq
 80093a0:	68ec      	ldreq	r4, [r5, #12]
 80093a2:	e7e6      	b.n	8009372 <__swsetup_r+0x1e>
 80093a4:	0758      	lsls	r0, r3, #29
 80093a6:	d512      	bpl.n	80093ce <__swsetup_r+0x7a>
 80093a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093aa:	b141      	cbz	r1, 80093be <__swsetup_r+0x6a>
 80093ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b0:	4299      	cmp	r1, r3
 80093b2:	d002      	beq.n	80093ba <__swsetup_r+0x66>
 80093b4:	4630      	mov	r0, r6
 80093b6:	f7ff fbd7 	bl	8008b68 <_free_r>
 80093ba:	2300      	movs	r3, #0
 80093bc:	6363      	str	r3, [r4, #52]	; 0x34
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	2300      	movs	r3, #0
 80093c8:	6063      	str	r3, [r4, #4]
 80093ca:	6923      	ldr	r3, [r4, #16]
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f043 0308 	orr.w	r3, r3, #8
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	6923      	ldr	r3, [r4, #16]
 80093d8:	b94b      	cbnz	r3, 80093ee <__swsetup_r+0x9a>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e4:	d003      	beq.n	80093ee <__swsetup_r+0x9a>
 80093e6:	4621      	mov	r1, r4
 80093e8:	4630      	mov	r0, r6
 80093ea:	f000 fa07 	bl	80097fc <__smakebuf_r>
 80093ee:	89a0      	ldrh	r0, [r4, #12]
 80093f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093f4:	f010 0301 	ands.w	r3, r0, #1
 80093f8:	d00a      	beq.n	8009410 <__swsetup_r+0xbc>
 80093fa:	2300      	movs	r3, #0
 80093fc:	60a3      	str	r3, [r4, #8]
 80093fe:	6963      	ldr	r3, [r4, #20]
 8009400:	425b      	negs	r3, r3
 8009402:	61a3      	str	r3, [r4, #24]
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	b943      	cbnz	r3, 800941a <__swsetup_r+0xc6>
 8009408:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800940c:	d1ba      	bne.n	8009384 <__swsetup_r+0x30>
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	0781      	lsls	r1, r0, #30
 8009412:	bf58      	it	pl
 8009414:	6963      	ldrpl	r3, [r4, #20]
 8009416:	60a3      	str	r3, [r4, #8]
 8009418:	e7f4      	b.n	8009404 <__swsetup_r+0xb0>
 800941a:	2000      	movs	r0, #0
 800941c:	e7f7      	b.n	800940e <__swsetup_r+0xba>
 800941e:	bf00      	nop
 8009420:	20000190 	.word	0x20000190
 8009424:	08009ce8 	.word	0x08009ce8
 8009428:	08009d08 	.word	0x08009d08
 800942c:	08009cc8 	.word	0x08009cc8

08009430 <abort>:
 8009430:	2006      	movs	r0, #6
 8009432:	b508      	push	{r3, lr}
 8009434:	f000 fa64 	bl	8009900 <raise>
 8009438:	2001      	movs	r0, #1
 800943a:	f7f8 f82e 	bl	800149a <_exit>
	...

08009440 <__sflush_r>:
 8009440:	898a      	ldrh	r2, [r1, #12]
 8009442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009446:	4605      	mov	r5, r0
 8009448:	0710      	lsls	r0, r2, #28
 800944a:	460c      	mov	r4, r1
 800944c:	d458      	bmi.n	8009500 <__sflush_r+0xc0>
 800944e:	684b      	ldr	r3, [r1, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	dc05      	bgt.n	8009460 <__sflush_r+0x20>
 8009454:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009456:	2b00      	cmp	r3, #0
 8009458:	dc02      	bgt.n	8009460 <__sflush_r+0x20>
 800945a:	2000      	movs	r0, #0
 800945c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009462:	2e00      	cmp	r6, #0
 8009464:	d0f9      	beq.n	800945a <__sflush_r+0x1a>
 8009466:	2300      	movs	r3, #0
 8009468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800946c:	682f      	ldr	r7, [r5, #0]
 800946e:	602b      	str	r3, [r5, #0]
 8009470:	d032      	beq.n	80094d8 <__sflush_r+0x98>
 8009472:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	075a      	lsls	r2, r3, #29
 8009478:	d505      	bpl.n	8009486 <__sflush_r+0x46>
 800947a:	6863      	ldr	r3, [r4, #4]
 800947c:	1ac0      	subs	r0, r0, r3
 800947e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009480:	b10b      	cbz	r3, 8009486 <__sflush_r+0x46>
 8009482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009484:	1ac0      	subs	r0, r0, r3
 8009486:	2300      	movs	r3, #0
 8009488:	4602      	mov	r2, r0
 800948a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800948c:	4628      	mov	r0, r5
 800948e:	6a21      	ldr	r1, [r4, #32]
 8009490:	47b0      	blx	r6
 8009492:	1c43      	adds	r3, r0, #1
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	d106      	bne.n	80094a6 <__sflush_r+0x66>
 8009498:	6829      	ldr	r1, [r5, #0]
 800949a:	291d      	cmp	r1, #29
 800949c:	d82c      	bhi.n	80094f8 <__sflush_r+0xb8>
 800949e:	4a2a      	ldr	r2, [pc, #168]	; (8009548 <__sflush_r+0x108>)
 80094a0:	40ca      	lsrs	r2, r1
 80094a2:	07d6      	lsls	r6, r2, #31
 80094a4:	d528      	bpl.n	80094f8 <__sflush_r+0xb8>
 80094a6:	2200      	movs	r2, #0
 80094a8:	6062      	str	r2, [r4, #4]
 80094aa:	6922      	ldr	r2, [r4, #16]
 80094ac:	04d9      	lsls	r1, r3, #19
 80094ae:	6022      	str	r2, [r4, #0]
 80094b0:	d504      	bpl.n	80094bc <__sflush_r+0x7c>
 80094b2:	1c42      	adds	r2, r0, #1
 80094b4:	d101      	bne.n	80094ba <__sflush_r+0x7a>
 80094b6:	682b      	ldr	r3, [r5, #0]
 80094b8:	b903      	cbnz	r3, 80094bc <__sflush_r+0x7c>
 80094ba:	6560      	str	r0, [r4, #84]	; 0x54
 80094bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094be:	602f      	str	r7, [r5, #0]
 80094c0:	2900      	cmp	r1, #0
 80094c2:	d0ca      	beq.n	800945a <__sflush_r+0x1a>
 80094c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094c8:	4299      	cmp	r1, r3
 80094ca:	d002      	beq.n	80094d2 <__sflush_r+0x92>
 80094cc:	4628      	mov	r0, r5
 80094ce:	f7ff fb4b 	bl	8008b68 <_free_r>
 80094d2:	2000      	movs	r0, #0
 80094d4:	6360      	str	r0, [r4, #52]	; 0x34
 80094d6:	e7c1      	b.n	800945c <__sflush_r+0x1c>
 80094d8:	6a21      	ldr	r1, [r4, #32]
 80094da:	2301      	movs	r3, #1
 80094dc:	4628      	mov	r0, r5
 80094de:	47b0      	blx	r6
 80094e0:	1c41      	adds	r1, r0, #1
 80094e2:	d1c7      	bne.n	8009474 <__sflush_r+0x34>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d0c4      	beq.n	8009474 <__sflush_r+0x34>
 80094ea:	2b1d      	cmp	r3, #29
 80094ec:	d001      	beq.n	80094f2 <__sflush_r+0xb2>
 80094ee:	2b16      	cmp	r3, #22
 80094f0:	d101      	bne.n	80094f6 <__sflush_r+0xb6>
 80094f2:	602f      	str	r7, [r5, #0]
 80094f4:	e7b1      	b.n	800945a <__sflush_r+0x1a>
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fc:	81a3      	strh	r3, [r4, #12]
 80094fe:	e7ad      	b.n	800945c <__sflush_r+0x1c>
 8009500:	690f      	ldr	r7, [r1, #16]
 8009502:	2f00      	cmp	r7, #0
 8009504:	d0a9      	beq.n	800945a <__sflush_r+0x1a>
 8009506:	0793      	lsls	r3, r2, #30
 8009508:	bf18      	it	ne
 800950a:	2300      	movne	r3, #0
 800950c:	680e      	ldr	r6, [r1, #0]
 800950e:	bf08      	it	eq
 8009510:	694b      	ldreq	r3, [r1, #20]
 8009512:	eba6 0807 	sub.w	r8, r6, r7
 8009516:	600f      	str	r7, [r1, #0]
 8009518:	608b      	str	r3, [r1, #8]
 800951a:	f1b8 0f00 	cmp.w	r8, #0
 800951e:	dd9c      	ble.n	800945a <__sflush_r+0x1a>
 8009520:	4643      	mov	r3, r8
 8009522:	463a      	mov	r2, r7
 8009524:	4628      	mov	r0, r5
 8009526:	6a21      	ldr	r1, [r4, #32]
 8009528:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800952a:	47b0      	blx	r6
 800952c:	2800      	cmp	r0, #0
 800952e:	dc06      	bgt.n	800953e <__sflush_r+0xfe>
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	f04f 30ff 	mov.w	r0, #4294967295
 8009536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	e78e      	b.n	800945c <__sflush_r+0x1c>
 800953e:	4407      	add	r7, r0
 8009540:	eba8 0800 	sub.w	r8, r8, r0
 8009544:	e7e9      	b.n	800951a <__sflush_r+0xda>
 8009546:	bf00      	nop
 8009548:	20400001 	.word	0x20400001

0800954c <_fflush_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	690b      	ldr	r3, [r1, #16]
 8009550:	4605      	mov	r5, r0
 8009552:	460c      	mov	r4, r1
 8009554:	b913      	cbnz	r3, 800955c <_fflush_r+0x10>
 8009556:	2500      	movs	r5, #0
 8009558:	4628      	mov	r0, r5
 800955a:	bd38      	pop	{r3, r4, r5, pc}
 800955c:	b118      	cbz	r0, 8009566 <_fflush_r+0x1a>
 800955e:	6983      	ldr	r3, [r0, #24]
 8009560:	b90b      	cbnz	r3, 8009566 <_fflush_r+0x1a>
 8009562:	f000 f887 	bl	8009674 <__sinit>
 8009566:	4b14      	ldr	r3, [pc, #80]	; (80095b8 <_fflush_r+0x6c>)
 8009568:	429c      	cmp	r4, r3
 800956a:	d11b      	bne.n	80095a4 <_fflush_r+0x58>
 800956c:	686c      	ldr	r4, [r5, #4]
 800956e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0ef      	beq.n	8009556 <_fflush_r+0xa>
 8009576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009578:	07d0      	lsls	r0, r2, #31
 800957a:	d404      	bmi.n	8009586 <_fflush_r+0x3a>
 800957c:	0599      	lsls	r1, r3, #22
 800957e:	d402      	bmi.n	8009586 <_fflush_r+0x3a>
 8009580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009582:	f000 f915 	bl	80097b0 <__retarget_lock_acquire_recursive>
 8009586:	4628      	mov	r0, r5
 8009588:	4621      	mov	r1, r4
 800958a:	f7ff ff59 	bl	8009440 <__sflush_r>
 800958e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009590:	4605      	mov	r5, r0
 8009592:	07da      	lsls	r2, r3, #31
 8009594:	d4e0      	bmi.n	8009558 <_fflush_r+0xc>
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	059b      	lsls	r3, r3, #22
 800959a:	d4dd      	bmi.n	8009558 <_fflush_r+0xc>
 800959c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800959e:	f000 f908 	bl	80097b2 <__retarget_lock_release_recursive>
 80095a2:	e7d9      	b.n	8009558 <_fflush_r+0xc>
 80095a4:	4b05      	ldr	r3, [pc, #20]	; (80095bc <_fflush_r+0x70>)
 80095a6:	429c      	cmp	r4, r3
 80095a8:	d101      	bne.n	80095ae <_fflush_r+0x62>
 80095aa:	68ac      	ldr	r4, [r5, #8]
 80095ac:	e7df      	b.n	800956e <_fflush_r+0x22>
 80095ae:	4b04      	ldr	r3, [pc, #16]	; (80095c0 <_fflush_r+0x74>)
 80095b0:	429c      	cmp	r4, r3
 80095b2:	bf08      	it	eq
 80095b4:	68ec      	ldreq	r4, [r5, #12]
 80095b6:	e7da      	b.n	800956e <_fflush_r+0x22>
 80095b8:	08009ce8 	.word	0x08009ce8
 80095bc:	08009d08 	.word	0x08009d08
 80095c0:	08009cc8 	.word	0x08009cc8

080095c4 <std>:
 80095c4:	2300      	movs	r3, #0
 80095c6:	b510      	push	{r4, lr}
 80095c8:	4604      	mov	r4, r0
 80095ca:	e9c0 3300 	strd	r3, r3, [r0]
 80095ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095d2:	6083      	str	r3, [r0, #8]
 80095d4:	8181      	strh	r1, [r0, #12]
 80095d6:	6643      	str	r3, [r0, #100]	; 0x64
 80095d8:	81c2      	strh	r2, [r0, #14]
 80095da:	6183      	str	r3, [r0, #24]
 80095dc:	4619      	mov	r1, r3
 80095de:	2208      	movs	r2, #8
 80095e0:	305c      	adds	r0, #92	; 0x5c
 80095e2:	f7ff fa1d 	bl	8008a20 <memset>
 80095e6:	4b05      	ldr	r3, [pc, #20]	; (80095fc <std+0x38>)
 80095e8:	6224      	str	r4, [r4, #32]
 80095ea:	6263      	str	r3, [r4, #36]	; 0x24
 80095ec:	4b04      	ldr	r3, [pc, #16]	; (8009600 <std+0x3c>)
 80095ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80095f0:	4b04      	ldr	r3, [pc, #16]	; (8009604 <std+0x40>)
 80095f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095f4:	4b04      	ldr	r3, [pc, #16]	; (8009608 <std+0x44>)
 80095f6:	6323      	str	r3, [r4, #48]	; 0x30
 80095f8:	bd10      	pop	{r4, pc}
 80095fa:	bf00      	nop
 80095fc:	08009939 	.word	0x08009939
 8009600:	0800995b 	.word	0x0800995b
 8009604:	08009993 	.word	0x08009993
 8009608:	080099b7 	.word	0x080099b7

0800960c <_cleanup_r>:
 800960c:	4901      	ldr	r1, [pc, #4]	; (8009614 <_cleanup_r+0x8>)
 800960e:	f000 b8af 	b.w	8009770 <_fwalk_reent>
 8009612:	bf00      	nop
 8009614:	0800954d 	.word	0x0800954d

08009618 <__sfmoreglue>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	2568      	movs	r5, #104	; 0x68
 800961c:	1e4a      	subs	r2, r1, #1
 800961e:	4355      	muls	r5, r2
 8009620:	460e      	mov	r6, r1
 8009622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009626:	f7ff faeb 	bl	8008c00 <_malloc_r>
 800962a:	4604      	mov	r4, r0
 800962c:	b140      	cbz	r0, 8009640 <__sfmoreglue+0x28>
 800962e:	2100      	movs	r1, #0
 8009630:	e9c0 1600 	strd	r1, r6, [r0]
 8009634:	300c      	adds	r0, #12
 8009636:	60a0      	str	r0, [r4, #8]
 8009638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800963c:	f7ff f9f0 	bl	8008a20 <memset>
 8009640:	4620      	mov	r0, r4
 8009642:	bd70      	pop	{r4, r5, r6, pc}

08009644 <__sfp_lock_acquire>:
 8009644:	4801      	ldr	r0, [pc, #4]	; (800964c <__sfp_lock_acquire+0x8>)
 8009646:	f000 b8b3 	b.w	80097b0 <__retarget_lock_acquire_recursive>
 800964a:	bf00      	nop
 800964c:	20001588 	.word	0x20001588

08009650 <__sfp_lock_release>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__sfp_lock_release+0x8>)
 8009652:	f000 b8ae 	b.w	80097b2 <__retarget_lock_release_recursive>
 8009656:	bf00      	nop
 8009658:	20001588 	.word	0x20001588

0800965c <__sinit_lock_acquire>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__sinit_lock_acquire+0x8>)
 800965e:	f000 b8a7 	b.w	80097b0 <__retarget_lock_acquire_recursive>
 8009662:	bf00      	nop
 8009664:	20001583 	.word	0x20001583

08009668 <__sinit_lock_release>:
 8009668:	4801      	ldr	r0, [pc, #4]	; (8009670 <__sinit_lock_release+0x8>)
 800966a:	f000 b8a2 	b.w	80097b2 <__retarget_lock_release_recursive>
 800966e:	bf00      	nop
 8009670:	20001583 	.word	0x20001583

08009674 <__sinit>:
 8009674:	b510      	push	{r4, lr}
 8009676:	4604      	mov	r4, r0
 8009678:	f7ff fff0 	bl	800965c <__sinit_lock_acquire>
 800967c:	69a3      	ldr	r3, [r4, #24]
 800967e:	b11b      	cbz	r3, 8009688 <__sinit+0x14>
 8009680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009684:	f7ff bff0 	b.w	8009668 <__sinit_lock_release>
 8009688:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800968c:	6523      	str	r3, [r4, #80]	; 0x50
 800968e:	4b13      	ldr	r3, [pc, #76]	; (80096dc <__sinit+0x68>)
 8009690:	4a13      	ldr	r2, [pc, #76]	; (80096e0 <__sinit+0x6c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	62a2      	str	r2, [r4, #40]	; 0x28
 8009696:	42a3      	cmp	r3, r4
 8009698:	bf08      	it	eq
 800969a:	2301      	moveq	r3, #1
 800969c:	4620      	mov	r0, r4
 800969e:	bf08      	it	eq
 80096a0:	61a3      	streq	r3, [r4, #24]
 80096a2:	f000 f81f 	bl	80096e4 <__sfp>
 80096a6:	6060      	str	r0, [r4, #4]
 80096a8:	4620      	mov	r0, r4
 80096aa:	f000 f81b 	bl	80096e4 <__sfp>
 80096ae:	60a0      	str	r0, [r4, #8]
 80096b0:	4620      	mov	r0, r4
 80096b2:	f000 f817 	bl	80096e4 <__sfp>
 80096b6:	2200      	movs	r2, #0
 80096b8:	2104      	movs	r1, #4
 80096ba:	60e0      	str	r0, [r4, #12]
 80096bc:	6860      	ldr	r0, [r4, #4]
 80096be:	f7ff ff81 	bl	80095c4 <std>
 80096c2:	2201      	movs	r2, #1
 80096c4:	2109      	movs	r1, #9
 80096c6:	68a0      	ldr	r0, [r4, #8]
 80096c8:	f7ff ff7c 	bl	80095c4 <std>
 80096cc:	2202      	movs	r2, #2
 80096ce:	2112      	movs	r1, #18
 80096d0:	68e0      	ldr	r0, [r4, #12]
 80096d2:	f7ff ff77 	bl	80095c4 <std>
 80096d6:	2301      	movs	r3, #1
 80096d8:	61a3      	str	r3, [r4, #24]
 80096da:	e7d1      	b.n	8009680 <__sinit+0xc>
 80096dc:	08009bdc 	.word	0x08009bdc
 80096e0:	0800960d 	.word	0x0800960d

080096e4 <__sfp>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	4607      	mov	r7, r0
 80096e8:	f7ff ffac 	bl	8009644 <__sfp_lock_acquire>
 80096ec:	4b1e      	ldr	r3, [pc, #120]	; (8009768 <__sfp+0x84>)
 80096ee:	681e      	ldr	r6, [r3, #0]
 80096f0:	69b3      	ldr	r3, [r6, #24]
 80096f2:	b913      	cbnz	r3, 80096fa <__sfp+0x16>
 80096f4:	4630      	mov	r0, r6
 80096f6:	f7ff ffbd 	bl	8009674 <__sinit>
 80096fa:	3648      	adds	r6, #72	; 0x48
 80096fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009700:	3b01      	subs	r3, #1
 8009702:	d503      	bpl.n	800970c <__sfp+0x28>
 8009704:	6833      	ldr	r3, [r6, #0]
 8009706:	b30b      	cbz	r3, 800974c <__sfp+0x68>
 8009708:	6836      	ldr	r6, [r6, #0]
 800970a:	e7f7      	b.n	80096fc <__sfp+0x18>
 800970c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009710:	b9d5      	cbnz	r5, 8009748 <__sfp+0x64>
 8009712:	4b16      	ldr	r3, [pc, #88]	; (800976c <__sfp+0x88>)
 8009714:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009718:	60e3      	str	r3, [r4, #12]
 800971a:	6665      	str	r5, [r4, #100]	; 0x64
 800971c:	f000 f847 	bl	80097ae <__retarget_lock_init_recursive>
 8009720:	f7ff ff96 	bl	8009650 <__sfp_lock_release>
 8009724:	2208      	movs	r2, #8
 8009726:	4629      	mov	r1, r5
 8009728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800972c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009730:	6025      	str	r5, [r4, #0]
 8009732:	61a5      	str	r5, [r4, #24]
 8009734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009738:	f7ff f972 	bl	8008a20 <memset>
 800973c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009740:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009744:	4620      	mov	r0, r4
 8009746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009748:	3468      	adds	r4, #104	; 0x68
 800974a:	e7d9      	b.n	8009700 <__sfp+0x1c>
 800974c:	2104      	movs	r1, #4
 800974e:	4638      	mov	r0, r7
 8009750:	f7ff ff62 	bl	8009618 <__sfmoreglue>
 8009754:	4604      	mov	r4, r0
 8009756:	6030      	str	r0, [r6, #0]
 8009758:	2800      	cmp	r0, #0
 800975a:	d1d5      	bne.n	8009708 <__sfp+0x24>
 800975c:	f7ff ff78 	bl	8009650 <__sfp_lock_release>
 8009760:	230c      	movs	r3, #12
 8009762:	603b      	str	r3, [r7, #0]
 8009764:	e7ee      	b.n	8009744 <__sfp+0x60>
 8009766:	bf00      	nop
 8009768:	08009bdc 	.word	0x08009bdc
 800976c:	ffff0001 	.word	0xffff0001

08009770 <_fwalk_reent>:
 8009770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009774:	4606      	mov	r6, r0
 8009776:	4688      	mov	r8, r1
 8009778:	2700      	movs	r7, #0
 800977a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800977e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009782:	f1b9 0901 	subs.w	r9, r9, #1
 8009786:	d505      	bpl.n	8009794 <_fwalk_reent+0x24>
 8009788:	6824      	ldr	r4, [r4, #0]
 800978a:	2c00      	cmp	r4, #0
 800978c:	d1f7      	bne.n	800977e <_fwalk_reent+0xe>
 800978e:	4638      	mov	r0, r7
 8009790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009794:	89ab      	ldrh	r3, [r5, #12]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d907      	bls.n	80097aa <_fwalk_reent+0x3a>
 800979a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800979e:	3301      	adds	r3, #1
 80097a0:	d003      	beq.n	80097aa <_fwalk_reent+0x3a>
 80097a2:	4629      	mov	r1, r5
 80097a4:	4630      	mov	r0, r6
 80097a6:	47c0      	blx	r8
 80097a8:	4307      	orrs	r7, r0
 80097aa:	3568      	adds	r5, #104	; 0x68
 80097ac:	e7e9      	b.n	8009782 <_fwalk_reent+0x12>

080097ae <__retarget_lock_init_recursive>:
 80097ae:	4770      	bx	lr

080097b0 <__retarget_lock_acquire_recursive>:
 80097b0:	4770      	bx	lr

080097b2 <__retarget_lock_release_recursive>:
 80097b2:	4770      	bx	lr

080097b4 <__swhatbuf_r>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	460e      	mov	r6, r1
 80097b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097bc:	4614      	mov	r4, r2
 80097be:	2900      	cmp	r1, #0
 80097c0:	461d      	mov	r5, r3
 80097c2:	b096      	sub	sp, #88	; 0x58
 80097c4:	da07      	bge.n	80097d6 <__swhatbuf_r+0x22>
 80097c6:	2300      	movs	r3, #0
 80097c8:	602b      	str	r3, [r5, #0]
 80097ca:	89b3      	ldrh	r3, [r6, #12]
 80097cc:	061a      	lsls	r2, r3, #24
 80097ce:	d410      	bmi.n	80097f2 <__swhatbuf_r+0x3e>
 80097d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097d4:	e00e      	b.n	80097f4 <__swhatbuf_r+0x40>
 80097d6:	466a      	mov	r2, sp
 80097d8:	f000 f914 	bl	8009a04 <_fstat_r>
 80097dc:	2800      	cmp	r0, #0
 80097de:	dbf2      	blt.n	80097c6 <__swhatbuf_r+0x12>
 80097e0:	9a01      	ldr	r2, [sp, #4]
 80097e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097ea:	425a      	negs	r2, r3
 80097ec:	415a      	adcs	r2, r3
 80097ee:	602a      	str	r2, [r5, #0]
 80097f0:	e7ee      	b.n	80097d0 <__swhatbuf_r+0x1c>
 80097f2:	2340      	movs	r3, #64	; 0x40
 80097f4:	2000      	movs	r0, #0
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	b016      	add	sp, #88	; 0x58
 80097fa:	bd70      	pop	{r4, r5, r6, pc}

080097fc <__smakebuf_r>:
 80097fc:	898b      	ldrh	r3, [r1, #12]
 80097fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009800:	079d      	lsls	r5, r3, #30
 8009802:	4606      	mov	r6, r0
 8009804:	460c      	mov	r4, r1
 8009806:	d507      	bpl.n	8009818 <__smakebuf_r+0x1c>
 8009808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	6123      	str	r3, [r4, #16]
 8009810:	2301      	movs	r3, #1
 8009812:	6163      	str	r3, [r4, #20]
 8009814:	b002      	add	sp, #8
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	466a      	mov	r2, sp
 800981a:	ab01      	add	r3, sp, #4
 800981c:	f7ff ffca 	bl	80097b4 <__swhatbuf_r>
 8009820:	9900      	ldr	r1, [sp, #0]
 8009822:	4605      	mov	r5, r0
 8009824:	4630      	mov	r0, r6
 8009826:	f7ff f9eb 	bl	8008c00 <_malloc_r>
 800982a:	b948      	cbnz	r0, 8009840 <__smakebuf_r+0x44>
 800982c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009830:	059a      	lsls	r2, r3, #22
 8009832:	d4ef      	bmi.n	8009814 <__smakebuf_r+0x18>
 8009834:	f023 0303 	bic.w	r3, r3, #3
 8009838:	f043 0302 	orr.w	r3, r3, #2
 800983c:	81a3      	strh	r3, [r4, #12]
 800983e:	e7e3      	b.n	8009808 <__smakebuf_r+0xc>
 8009840:	4b0d      	ldr	r3, [pc, #52]	; (8009878 <__smakebuf_r+0x7c>)
 8009842:	62b3      	str	r3, [r6, #40]	; 0x28
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	6020      	str	r0, [r4, #0]
 8009848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800984c:	81a3      	strh	r3, [r4, #12]
 800984e:	9b00      	ldr	r3, [sp, #0]
 8009850:	6120      	str	r0, [r4, #16]
 8009852:	6163      	str	r3, [r4, #20]
 8009854:	9b01      	ldr	r3, [sp, #4]
 8009856:	b15b      	cbz	r3, 8009870 <__smakebuf_r+0x74>
 8009858:	4630      	mov	r0, r6
 800985a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800985e:	f000 f8e3 	bl	8009a28 <_isatty_r>
 8009862:	b128      	cbz	r0, 8009870 <__smakebuf_r+0x74>
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	f023 0303 	bic.w	r3, r3, #3
 800986a:	f043 0301 	orr.w	r3, r3, #1
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	89a0      	ldrh	r0, [r4, #12]
 8009872:	4305      	orrs	r5, r0
 8009874:	81a5      	strh	r5, [r4, #12]
 8009876:	e7cd      	b.n	8009814 <__smakebuf_r+0x18>
 8009878:	0800960d 	.word	0x0800960d

0800987c <memchr>:
 800987c:	4603      	mov	r3, r0
 800987e:	b510      	push	{r4, lr}
 8009880:	b2c9      	uxtb	r1, r1
 8009882:	4402      	add	r2, r0
 8009884:	4293      	cmp	r3, r2
 8009886:	4618      	mov	r0, r3
 8009888:	d101      	bne.n	800988e <memchr+0x12>
 800988a:	2000      	movs	r0, #0
 800988c:	e003      	b.n	8009896 <memchr+0x1a>
 800988e:	7804      	ldrb	r4, [r0, #0]
 8009890:	3301      	adds	r3, #1
 8009892:	428c      	cmp	r4, r1
 8009894:	d1f6      	bne.n	8009884 <memchr+0x8>
 8009896:	bd10      	pop	{r4, pc}

08009898 <__malloc_lock>:
 8009898:	4801      	ldr	r0, [pc, #4]	; (80098a0 <__malloc_lock+0x8>)
 800989a:	f7ff bf89 	b.w	80097b0 <__retarget_lock_acquire_recursive>
 800989e:	bf00      	nop
 80098a0:	20001584 	.word	0x20001584

080098a4 <__malloc_unlock>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__malloc_unlock+0x8>)
 80098a6:	f7ff bf84 	b.w	80097b2 <__retarget_lock_release_recursive>
 80098aa:	bf00      	nop
 80098ac:	20001584 	.word	0x20001584

080098b0 <_raise_r>:
 80098b0:	291f      	cmp	r1, #31
 80098b2:	b538      	push	{r3, r4, r5, lr}
 80098b4:	4604      	mov	r4, r0
 80098b6:	460d      	mov	r5, r1
 80098b8:	d904      	bls.n	80098c4 <_raise_r+0x14>
 80098ba:	2316      	movs	r3, #22
 80098bc:	6003      	str	r3, [r0, #0]
 80098be:	f04f 30ff 	mov.w	r0, #4294967295
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098c6:	b112      	cbz	r2, 80098ce <_raise_r+0x1e>
 80098c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098cc:	b94b      	cbnz	r3, 80098e2 <_raise_r+0x32>
 80098ce:	4620      	mov	r0, r4
 80098d0:	f000 f830 	bl	8009934 <_getpid_r>
 80098d4:	462a      	mov	r2, r5
 80098d6:	4601      	mov	r1, r0
 80098d8:	4620      	mov	r0, r4
 80098da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098de:	f000 b817 	b.w	8009910 <_kill_r>
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d00a      	beq.n	80098fc <_raise_r+0x4c>
 80098e6:	1c59      	adds	r1, r3, #1
 80098e8:	d103      	bne.n	80098f2 <_raise_r+0x42>
 80098ea:	2316      	movs	r3, #22
 80098ec:	6003      	str	r3, [r0, #0]
 80098ee:	2001      	movs	r0, #1
 80098f0:	e7e7      	b.n	80098c2 <_raise_r+0x12>
 80098f2:	2400      	movs	r4, #0
 80098f4:	4628      	mov	r0, r5
 80098f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098fa:	4798      	blx	r3
 80098fc:	2000      	movs	r0, #0
 80098fe:	e7e0      	b.n	80098c2 <_raise_r+0x12>

08009900 <raise>:
 8009900:	4b02      	ldr	r3, [pc, #8]	; (800990c <raise+0xc>)
 8009902:	4601      	mov	r1, r0
 8009904:	6818      	ldr	r0, [r3, #0]
 8009906:	f7ff bfd3 	b.w	80098b0 <_raise_r>
 800990a:	bf00      	nop
 800990c:	20000190 	.word	0x20000190

08009910 <_kill_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	2300      	movs	r3, #0
 8009914:	4d06      	ldr	r5, [pc, #24]	; (8009930 <_kill_r+0x20>)
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	602b      	str	r3, [r5, #0]
 800991e:	f7f7 fdac 	bl	800147a <_kill>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d102      	bne.n	800992c <_kill_r+0x1c>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	b103      	cbz	r3, 800992c <_kill_r+0x1c>
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	bf00      	nop
 8009930:	2000158c 	.word	0x2000158c

08009934 <_getpid_r>:
 8009934:	f7f7 bd9a 	b.w	800146c <_getpid>

08009938 <__sread>:
 8009938:	b510      	push	{r4, lr}
 800993a:	460c      	mov	r4, r1
 800993c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009940:	f000 f894 	bl	8009a6c <_read_r>
 8009944:	2800      	cmp	r0, #0
 8009946:	bfab      	itete	ge
 8009948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800994a:	89a3      	ldrhlt	r3, [r4, #12]
 800994c:	181b      	addge	r3, r3, r0
 800994e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009952:	bfac      	ite	ge
 8009954:	6563      	strge	r3, [r4, #84]	; 0x54
 8009956:	81a3      	strhlt	r3, [r4, #12]
 8009958:	bd10      	pop	{r4, pc}

0800995a <__swrite>:
 800995a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800995e:	461f      	mov	r7, r3
 8009960:	898b      	ldrh	r3, [r1, #12]
 8009962:	4605      	mov	r5, r0
 8009964:	05db      	lsls	r3, r3, #23
 8009966:	460c      	mov	r4, r1
 8009968:	4616      	mov	r6, r2
 800996a:	d505      	bpl.n	8009978 <__swrite+0x1e>
 800996c:	2302      	movs	r3, #2
 800996e:	2200      	movs	r2, #0
 8009970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009974:	f000 f868 	bl	8009a48 <_lseek_r>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	4632      	mov	r2, r6
 800997c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009980:	81a3      	strh	r3, [r4, #12]
 8009982:	4628      	mov	r0, r5
 8009984:	463b      	mov	r3, r7
 8009986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800998a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800998e:	f000 b817 	b.w	80099c0 <_write_r>

08009992 <__sseek>:
 8009992:	b510      	push	{r4, lr}
 8009994:	460c      	mov	r4, r1
 8009996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999a:	f000 f855 	bl	8009a48 <_lseek_r>
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	bf15      	itete	ne
 80099a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80099a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099ae:	81a3      	strheq	r3, [r4, #12]
 80099b0:	bf18      	it	ne
 80099b2:	81a3      	strhne	r3, [r4, #12]
 80099b4:	bd10      	pop	{r4, pc}

080099b6 <__sclose>:
 80099b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ba:	f000 b813 	b.w	80099e4 <_close_r>
	...

080099c0 <_write_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4604      	mov	r4, r0
 80099c4:	4608      	mov	r0, r1
 80099c6:	4611      	mov	r1, r2
 80099c8:	2200      	movs	r2, #0
 80099ca:	4d05      	ldr	r5, [pc, #20]	; (80099e0 <_write_r+0x20>)
 80099cc:	602a      	str	r2, [r5, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	f7f7 fd8a 	bl	80014e8 <_write>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_write_r+0x1e>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_write_r+0x1e>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	2000158c 	.word	0x2000158c

080099e4 <_close_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	2300      	movs	r3, #0
 80099e8:	4d05      	ldr	r5, [pc, #20]	; (8009a00 <_close_r+0x1c>)
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	602b      	str	r3, [r5, #0]
 80099f0:	f7f7 fd96 	bl	8001520 <_close>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_close_r+0x1a>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_close_r+0x1a>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	2000158c 	.word	0x2000158c

08009a04 <_fstat_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	2300      	movs	r3, #0
 8009a08:	4d06      	ldr	r5, [pc, #24]	; (8009a24 <_fstat_r+0x20>)
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	4611      	mov	r1, r2
 8009a10:	602b      	str	r3, [r5, #0]
 8009a12:	f7f7 fd90 	bl	8001536 <_fstat>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	d102      	bne.n	8009a20 <_fstat_r+0x1c>
 8009a1a:	682b      	ldr	r3, [r5, #0]
 8009a1c:	b103      	cbz	r3, 8009a20 <_fstat_r+0x1c>
 8009a1e:	6023      	str	r3, [r4, #0]
 8009a20:	bd38      	pop	{r3, r4, r5, pc}
 8009a22:	bf00      	nop
 8009a24:	2000158c 	.word	0x2000158c

08009a28 <_isatty_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	4d05      	ldr	r5, [pc, #20]	; (8009a44 <_isatty_r+0x1c>)
 8009a2e:	4604      	mov	r4, r0
 8009a30:	4608      	mov	r0, r1
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	f7f7 fd8e 	bl	8001554 <_isatty>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d102      	bne.n	8009a42 <_isatty_r+0x1a>
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	b103      	cbz	r3, 8009a42 <_isatty_r+0x1a>
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	2000158c 	.word	0x2000158c

08009a48 <_lseek_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	4611      	mov	r1, r2
 8009a50:	2200      	movs	r2, #0
 8009a52:	4d05      	ldr	r5, [pc, #20]	; (8009a68 <_lseek_r+0x20>)
 8009a54:	602a      	str	r2, [r5, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	f7f7 fd86 	bl	8001568 <_lseek>
 8009a5c:	1c43      	adds	r3, r0, #1
 8009a5e:	d102      	bne.n	8009a66 <_lseek_r+0x1e>
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	b103      	cbz	r3, 8009a66 <_lseek_r+0x1e>
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	2000158c 	.word	0x2000158c

08009a6c <_read_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4604      	mov	r4, r0
 8009a70:	4608      	mov	r0, r1
 8009a72:	4611      	mov	r1, r2
 8009a74:	2200      	movs	r2, #0
 8009a76:	4d05      	ldr	r5, [pc, #20]	; (8009a8c <_read_r+0x20>)
 8009a78:	602a      	str	r2, [r5, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f7f7 fd17 	bl	80014ae <_read>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_read_r+0x1e>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_read_r+0x1e>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	2000158c 	.word	0x2000158c

08009a90 <_init>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr

08009a9c <_fini>:
 8009a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9e:	bf00      	nop
 8009aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa2:	bc08      	pop	{r3}
 8009aa4:	469e      	mov	lr, r3
 8009aa6:	4770      	bx	lr
