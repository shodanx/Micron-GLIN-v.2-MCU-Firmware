
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012280  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  080123c0  080123c0  000223c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129e8  080129e8  00030a08  2**0
                  CONTENTS
  4 .ARM          00000008  080129e8  080129e8  000229e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080129f0  080129f0  00030a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129f0  080129f0  000229f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080129f4  080129f4  000229f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a08  20000000  080129f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ea8  20000a08  08013400  00030a08  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018b0  08013400  000318b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030a08  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b289  00000000  00000000  00030a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c85  00000000  00000000  0004bcba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  00050940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  00052218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e2  00000000  00000000  000538c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff42  00000000  00000000  0006dea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ea6  00000000  00000000  0008dde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115c8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cc8  00000000  00000000  00115cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000a08 	.word	0x20000a08
 800015c:	00000000 	.word	0x00000000
 8000160:	080123a8 	.word	0x080123a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000a0c 	.word	0x20000a0c
 800017c:	080123a8 	.word	0x080123a8

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_frsub>:
 8000bac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	e002      	b.n	8000bb8 <__addsf3>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_fsub>:
 8000bb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb8 <__addsf3>:
 8000bb8:	0042      	lsls	r2, r0, #1
 8000bba:	bf1f      	itttt	ne
 8000bbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc0:	ea92 0f03 	teqne	r2, r3
 8000bc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bcc:	d06a      	beq.n	8000ca4 <__addsf3+0xec>
 8000bce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd6:	bfc1      	itttt	gt
 8000bd8:	18d2      	addgt	r2, r2, r3
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	4048      	eorgt	r0, r1
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	bfb8      	it	lt
 8000be2:	425b      	neglt	r3, r3
 8000be4:	2b19      	cmp	r3, #25
 8000be6:	bf88      	it	hi
 8000be8:	4770      	bxhi	lr
 8000bea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c06:	bf18      	it	ne
 8000c08:	4249      	negne	r1, r1
 8000c0a:	ea92 0f03 	teq	r2, r3
 8000c0e:	d03f      	beq.n	8000c90 <__addsf3+0xd8>
 8000c10:	f1a2 0201 	sub.w	r2, r2, #1
 8000c14:	fa41 fc03 	asr.w	ip, r1, r3
 8000c18:	eb10 000c 	adds.w	r0, r0, ip
 8000c1c:	f1c3 0320 	rsb	r3, r3, #32
 8000c20:	fa01 f103 	lsl.w	r1, r1, r3
 8000c24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__addsf3+0x78>
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c34:	d313      	bcc.n	8000c5e <__addsf3+0xa6>
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3a:	d306      	bcc.n	8000c4a <__addsf3+0x92>
 8000c3c:	0840      	lsrs	r0, r0, #1
 8000c3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c42:	f102 0201 	add.w	r2, r2, #1
 8000c46:	2afe      	cmp	r2, #254	; 0xfe
 8000c48:	d251      	bcs.n	8000cee <__addsf3+0x136>
 8000c4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	ea40 0003 	orr.w	r0, r0, r3
 8000c5c:	4770      	bx	lr
 8000c5e:	0049      	lsls	r1, r1, #1
 8000c60:	eb40 0000 	adc.w	r0, r0, r0
 8000c64:	3a01      	subs	r2, #1
 8000c66:	bf28      	it	cs
 8000c68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c6c:	d2ed      	bcs.n	8000c4a <__addsf3+0x92>
 8000c6e:	fab0 fc80 	clz	ip, r0
 8000c72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c76:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7e:	bfaa      	itet	ge
 8000c80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c84:	4252      	neglt	r2, r2
 8000c86:	4318      	orrge	r0, r3
 8000c88:	bfbc      	itt	lt
 8000c8a:	40d0      	lsrlt	r0, r2
 8000c8c:	4318      	orrlt	r0, r3
 8000c8e:	4770      	bx	lr
 8000c90:	f092 0f00 	teq	r2, #0
 8000c94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c98:	bf06      	itte	eq
 8000c9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9e:	3201      	addeq	r2, #1
 8000ca0:	3b01      	subne	r3, #1
 8000ca2:	e7b5      	b.n	8000c10 <__addsf3+0x58>
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d021      	beq.n	8000cf8 <__addsf3+0x140>
 8000cb4:	ea92 0f03 	teq	r2, r3
 8000cb8:	d004      	beq.n	8000cc4 <__addsf3+0x10c>
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	4608      	moveq	r0, r1
 8000cc2:	4770      	bx	lr
 8000cc4:	ea90 0f01 	teq	r0, r1
 8000cc8:	bf1c      	itt	ne
 8000cca:	2000      	movne	r0, #0
 8000ccc:	4770      	bxne	lr
 8000cce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cd2:	d104      	bne.n	8000cde <__addsf3+0x126>
 8000cd4:	0040      	lsls	r0, r0, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ce2:	bf3c      	itt	cc
 8000ce4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bxcc	lr
 8000cea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf6:	4770      	bx	lr
 8000cf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cfc:	bf16      	itet	ne
 8000cfe:	4608      	movne	r0, r1
 8000d00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d04:	4601      	movne	r1, r0
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	bf06      	itte	eq
 8000d0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0e:	ea90 0f01 	teqeq	r0, r1
 8000d12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_ui2f>:
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e004      	b.n	8000d28 <__aeabi_i2f+0x8>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_i2f>:
 8000d20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	bf48      	it	mi
 8000d26:	4240      	negmi	r0, r0
 8000d28:	ea5f 0c00 	movs.w	ip, r0
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d34:	4601      	mov	r1, r0
 8000d36:	f04f 0000 	mov.w	r0, #0
 8000d3a:	e01c      	b.n	8000d76 <__aeabi_l2f+0x2a>

08000d3c <__aeabi_ul2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e00a      	b.n	8000d60 <__aeabi_l2f+0x14>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_l2f>:
 8000d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d58:	d502      	bpl.n	8000d60 <__aeabi_l2f+0x14>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	ea5f 0c01 	movs.w	ip, r1
 8000d64:	bf02      	ittt	eq
 8000d66:	4684      	moveq	ip, r0
 8000d68:	4601      	moveq	r1, r0
 8000d6a:	2000      	moveq	r0, #0
 8000d6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d70:	bf08      	it	eq
 8000d72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d7a:	fabc f28c 	clz	r2, ip
 8000d7e:	3a08      	subs	r2, #8
 8000d80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d84:	db10      	blt.n	8000da8 <__aeabi_l2f+0x5c>
 8000d86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d90:	f1c2 0220 	rsb	r2, r2, #32
 8000d94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d98:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9c:	eb43 0002 	adc.w	r0, r3, r2
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f102 0220 	add.w	r2, r2, #32
 8000dac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_fmul>:
 8000dc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd0:	bf1e      	ittt	ne
 8000dd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd6:	ea92 0f0c 	teqne	r2, ip
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d06f      	beq.n	8000ec0 <__aeabi_fmul+0xf8>
 8000de0:	441a      	add	r2, r3
 8000de2:	ea80 0c01 	eor.w	ip, r0, r1
 8000de6:	0240      	lsls	r0, r0, #9
 8000de8:	bf18      	it	ne
 8000dea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dee:	d01e      	beq.n	8000e2e <__aeabi_fmul+0x66>
 8000df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000e00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e08:	bf3e      	ittt	cc
 8000e0a:	0049      	lslcc	r1, r1, #1
 8000e0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e10:	005b      	lslcc	r3, r3, #1
 8000e12:	ea40 0001 	orr.w	r0, r0, r1
 8000e16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e1a:	2afd      	cmp	r2, #253	; 0xfd
 8000e1c:	d81d      	bhi.n	8000e5a <__aeabi_fmul+0x92>
 8000e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e26:	bf08      	it	eq
 8000e28:	f020 0001 	biceq.w	r0, r0, #1
 8000e2c:	4770      	bx	lr
 8000e2e:	f090 0f00 	teq	r0, #0
 8000e32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e36:	bf08      	it	eq
 8000e38:	0249      	lsleq	r1, r1, #9
 8000e3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e42:	3a7f      	subs	r2, #127	; 0x7f
 8000e44:	bfc2      	ittt	gt
 8000e46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4e:	4770      	bxgt	lr
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	dc5d      	bgt.n	8000f18 <__aeabi_fmul+0x150>
 8000e5c:	f112 0f19 	cmn.w	r2, #25
 8000e60:	bfdc      	itt	le
 8000e62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e66:	4770      	bxle	lr
 8000e68:	f1c2 0200 	rsb	r2, r2, #0
 8000e6c:	0041      	lsls	r1, r0, #1
 8000e6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e72:	f1c2 0220 	rsb	r2, r2, #32
 8000e76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7e:	f140 0000 	adc.w	r0, r0, #0
 8000e82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e86:	bf08      	it	eq
 8000e88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e8c:	4770      	bx	lr
 8000e8e:	f092 0f00 	teq	r2, #0
 8000e92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e96:	bf02      	ittt	eq
 8000e98:	0040      	lsleq	r0, r0, #1
 8000e9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9e:	3a01      	subeq	r2, #1
 8000ea0:	d0f9      	beq.n	8000e96 <__aeabi_fmul+0xce>
 8000ea2:	ea40 000c 	orr.w	r0, r0, ip
 8000ea6:	f093 0f00 	teq	r3, #0
 8000eaa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0049      	lsleq	r1, r1, #1
 8000eb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb6:	3b01      	subeq	r3, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xe6>
 8000eba:	ea41 010c 	orr.w	r1, r1, ip
 8000ebe:	e78f      	b.n	8000de0 <__aeabi_fmul+0x18>
 8000ec0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	bf18      	it	ne
 8000eca:	ea93 0f0c 	teqne	r3, ip
 8000ece:	d00a      	beq.n	8000ee6 <__aeabi_fmul+0x11e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1d8      	bne.n	8000e8e <__aeabi_fmul+0xc6>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	4770      	bx	lr
 8000ee6:	f090 0f00 	teq	r0, #0
 8000eea:	bf17      	itett	ne
 8000eec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ef0:	4608      	moveq	r0, r1
 8000ef2:	f091 0f00 	teqne	r1, #0
 8000ef6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000efa:	d014      	beq.n	8000f26 <__aeabi_fmul+0x15e>
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d101      	bne.n	8000f06 <__aeabi_fmul+0x13e>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d10f      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f06:	ea93 0f0c 	teq	r3, ip
 8000f0a:	d103      	bne.n	8000f14 <__aeabi_fmul+0x14c>
 8000f0c:	024b      	lsls	r3, r1, #9
 8000f0e:	bf18      	it	ne
 8000f10:	4608      	movne	r0, r1
 8000f12:	d108      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f14:	ea80 0001 	eor.w	r0, r0, r1
 8000f18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f24:	4770      	bx	lr
 8000f26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_fdiv>:
 8000f30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f38:	bf1e      	ittt	ne
 8000f3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3e:	ea92 0f0c 	teqne	r2, ip
 8000f42:	ea93 0f0c 	teqne	r3, ip
 8000f46:	d069      	beq.n	800101c <__aeabi_fdiv+0xec>
 8000f48:	eba2 0203 	sub.w	r2, r2, r3
 8000f4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f56:	d037      	beq.n	8000fc8 <__aeabi_fdiv+0x98>
 8000f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	bf38      	it	cc
 8000f6c:	005b      	lslcc	r3, r3, #1
 8000f6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f76:	428b      	cmp	r3, r1
 8000f78:	bf24      	itt	cs
 8000f7a:	1a5b      	subcs	r3, r3, r1
 8000f7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f84:	bf24      	itt	cs
 8000f86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f92:	bf24      	itt	cs
 8000f94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa0:	bf24      	itt	cs
 8000fa2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	bf18      	it	ne
 8000fae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb2:	d1e0      	bne.n	8000f76 <__aeabi_fdiv+0x46>
 8000fb4:	2afd      	cmp	r2, #253	; 0xfd
 8000fb6:	f63f af50 	bhi.w	8000e5a <__aeabi_fmul+0x92>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc0:	bf08      	it	eq
 8000fc2:	f020 0001 	biceq.w	r0, r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd0:	327f      	adds	r2, #127	; 0x7f
 8000fd2:	bfc2      	ittt	gt
 8000fd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fdc:	4770      	bxgt	lr
 8000fde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	e737      	b.n	8000e5a <__aeabi_fmul+0x92>
 8000fea:	f092 0f00 	teq	r2, #0
 8000fee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ff2:	bf02      	ittt	eq
 8000ff4:	0040      	lsleq	r0, r0, #1
 8000ff6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ffa:	3a01      	subeq	r2, #1
 8000ffc:	d0f9      	beq.n	8000ff2 <__aeabi_fdiv+0xc2>
 8000ffe:	ea40 000c 	orr.w	r0, r0, ip
 8001002:	f093 0f00 	teq	r3, #0
 8001006:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0049      	lsleq	r1, r1, #1
 800100e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001012:	3b01      	subeq	r3, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xda>
 8001016:	ea41 010c 	orr.w	r1, r1, ip
 800101a:	e795      	b.n	8000f48 <__aeabi_fdiv+0x18>
 800101c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001020:	ea92 0f0c 	teq	r2, ip
 8001024:	d108      	bne.n	8001038 <__aeabi_fdiv+0x108>
 8001026:	0242      	lsls	r2, r0, #9
 8001028:	f47f af7d 	bne.w	8000f26 <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	f47f af70 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 8001034:	4608      	mov	r0, r1
 8001036:	e776      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001038:	ea93 0f0c 	teq	r3, ip
 800103c:	d104      	bne.n	8001048 <__aeabi_fdiv+0x118>
 800103e:	024b      	lsls	r3, r1, #9
 8001040:	f43f af4c 	beq.w	8000edc <__aeabi_fmul+0x114>
 8001044:	4608      	mov	r0, r1
 8001046:	e76e      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001048:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800104c:	bf18      	it	ne
 800104e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001052:	d1ca      	bne.n	8000fea <__aeabi_fdiv+0xba>
 8001054:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001058:	f47f af5c 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 800105c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001060:	f47f af3c 	bne.w	8000edc <__aeabi_fmul+0x114>
 8001064:	e75f      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001066:	bf00      	nop

08001068 <__gesf2>:
 8001068:	f04f 3cff 	mov.w	ip, #4294967295
 800106c:	e006      	b.n	800107c <__cmpsf2+0x4>
 800106e:	bf00      	nop

08001070 <__lesf2>:
 8001070:	f04f 0c01 	mov.w	ip, #1
 8001074:	e002      	b.n	800107c <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__cmpsf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	bf18      	it	ne
 800108e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001092:	d011      	beq.n	80010b8 <__cmpsf2+0x40>
 8001094:	b001      	add	sp, #4
 8001096:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800109a:	bf18      	it	ne
 800109c:	ea90 0f01 	teqne	r0, r1
 80010a0:	bf58      	it	pl
 80010a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a6:	bf88      	it	hi
 80010a8:	17c8      	asrhi	r0, r1, #31
 80010aa:	bf38      	it	cc
 80010ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b0:	bf18      	it	ne
 80010b2:	f040 0001 	orrne.w	r0, r0, #1
 80010b6:	4770      	bx	lr
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__cmpsf2+0x4c>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d105      	bne.n	80010d0 <__cmpsf2+0x58>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d1e4      	bne.n	8001094 <__cmpsf2+0x1c>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d0e1      	beq.n	8001094 <__cmpsf2+0x1c>
 80010d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <__aeabi_cfrcmple>:
 80010d8:	4684      	mov	ip, r0
 80010da:	4608      	mov	r0, r1
 80010dc:	4661      	mov	r1, ip
 80010de:	e7ff      	b.n	80010e0 <__aeabi_cfcmpeq>

080010e0 <__aeabi_cfcmpeq>:
 80010e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010e2:	f7ff ffc9 	bl	8001078 <__cmpsf2>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	bf48      	it	mi
 80010ea:	f110 0f00 	cmnmi.w	r0, #0
 80010ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f0 <__aeabi_fcmpeq>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff fff4 	bl	80010e0 <__aeabi_cfcmpeq>
 80010f8:	bf0c      	ite	eq
 80010fa:	2001      	moveq	r0, #1
 80010fc:	2000      	movne	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmplt>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffea 	bl	80010e0 <__aeabi_cfcmpeq>
 800110c:	bf34      	ite	cc
 800110e:	2001      	movcc	r0, #1
 8001110:	2000      	movcs	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmple>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffe0 	bl	80010e0 <__aeabi_cfcmpeq>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpge>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffd2 	bl	80010d8 <__aeabi_cfrcmple>
 8001134:	bf94      	ite	ls
 8001136:	2001      	movls	r0, #1
 8001138:	2000      	movhi	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpgt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffc8 	bl	80010d8 <__aeabi_cfrcmple>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_f2uiz>:
 8001154:	0042      	lsls	r2, r0, #1
 8001156:	d20e      	bcs.n	8001176 <__aeabi_f2uiz+0x22>
 8001158:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800115c:	d30b      	bcc.n	8001176 <__aeabi_f2uiz+0x22>
 800115e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001162:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001166:	d409      	bmi.n	800117c <__aeabi_f2uiz+0x28>
 8001168:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	4770      	bx	lr
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	4770      	bx	lr
 800117c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001180:	d101      	bne.n	8001186 <__aeabi_f2uiz+0x32>
 8001182:	0242      	lsls	r2, r0, #9
 8001184:	d102      	bne.n	800118c <__aeabi_f2uiz+0x38>
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	4770      	bx	lr
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <__aeabi_uldivmod>:
 8001194:	b953      	cbnz	r3, 80011ac <__aeabi_uldivmod+0x18>
 8001196:	b94a      	cbnz	r2, 80011ac <__aeabi_uldivmod+0x18>
 8001198:	2900      	cmp	r1, #0
 800119a:	bf08      	it	eq
 800119c:	2800      	cmpeq	r0, #0
 800119e:	bf1c      	itt	ne
 80011a0:	f04f 31ff 	movne.w	r1, #4294967295
 80011a4:	f04f 30ff 	movne.w	r0, #4294967295
 80011a8:	f000 b9ae 	b.w	8001508 <__aeabi_idiv0>
 80011ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b4:	f000 f83e 	bl	8001234 <__udivmoddi4>
 80011b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c0:	b004      	add	sp, #16
 80011c2:	4770      	bx	lr

080011c4 <__aeabi_d2lz>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4605      	mov	r5, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4628      	mov	r0, r5
 80011d0:	4621      	mov	r1, r4
 80011d2:	f7ff fc15 	bl	8000a00 <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x20>
 80011d8:	4628      	mov	r0, r5
 80011da:	4621      	mov	r1, r4
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4628      	mov	r0, r5
 80011e6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f98b 	bl	800051c <__aeabi_dmul>
 8001206:	f7ff fc61 	bl	8000acc <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f90c 	bl	8000428 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f982 	bl	800051c <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffc4 	bl	80001ac <__aeabi_dsub>
 8001224:	f7ff fc52 	bl	8000acc <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000

08001234 <__udivmoddi4>:
 8001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001238:	9e08      	ldr	r6, [sp, #32]
 800123a:	460d      	mov	r5, r1
 800123c:	4604      	mov	r4, r0
 800123e:	4688      	mov	r8, r1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d14d      	bne.n	80012e0 <__udivmoddi4+0xac>
 8001244:	428a      	cmp	r2, r1
 8001246:	4694      	mov	ip, r2
 8001248:	d968      	bls.n	800131c <__udivmoddi4+0xe8>
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b152      	cbz	r2, 8001266 <__udivmoddi4+0x32>
 8001250:	fa01 f302 	lsl.w	r3, r1, r2
 8001254:	f1c2 0120 	rsb	r1, r2, #32
 8001258:	fa20 f101 	lsr.w	r1, r0, r1
 800125c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001260:	ea41 0803 	orr.w	r8, r1, r3
 8001264:	4094      	lsls	r4, r2
 8001266:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800126a:	fbb8 f7f1 	udiv	r7, r8, r1
 800126e:	fa1f fe8c 	uxth.w	lr, ip
 8001272:	fb01 8817 	mls	r8, r1, r7, r8
 8001276:	fb07 f00e 	mul.w	r0, r7, lr
 800127a:	0c23      	lsrs	r3, r4, #16
 800127c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001280:	4298      	cmp	r0, r3
 8001282:	d90a      	bls.n	800129a <__udivmoddi4+0x66>
 8001284:	eb1c 0303 	adds.w	r3, ip, r3
 8001288:	f107 35ff 	add.w	r5, r7, #4294967295
 800128c:	f080 811e 	bcs.w	80014cc <__udivmoddi4+0x298>
 8001290:	4298      	cmp	r0, r3
 8001292:	f240 811b 	bls.w	80014cc <__udivmoddi4+0x298>
 8001296:	3f02      	subs	r7, #2
 8001298:	4463      	add	r3, ip
 800129a:	1a1b      	subs	r3, r3, r0
 800129c:	fbb3 f0f1 	udiv	r0, r3, r1
 80012a0:	fb01 3310 	mls	r3, r1, r0, r3
 80012a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80012a8:	b2a4      	uxth	r4, r4
 80012aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012ae:	45a6      	cmp	lr, r4
 80012b0:	d90a      	bls.n	80012c8 <__udivmoddi4+0x94>
 80012b2:	eb1c 0404 	adds.w	r4, ip, r4
 80012b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80012ba:	f080 8109 	bcs.w	80014d0 <__udivmoddi4+0x29c>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f240 8106 	bls.w	80014d0 <__udivmoddi4+0x29c>
 80012c4:	4464      	add	r4, ip
 80012c6:	3802      	subs	r0, #2
 80012c8:	2100      	movs	r1, #0
 80012ca:	eba4 040e 	sub.w	r4, r4, lr
 80012ce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012d2:	b11e      	cbz	r6, 80012dc <__udivmoddi4+0xa8>
 80012d4:	2300      	movs	r3, #0
 80012d6:	40d4      	lsrs	r4, r2
 80012d8:	e9c6 4300 	strd	r4, r3, [r6]
 80012dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0xc2>
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	f000 80ee 	beq.w	80014c6 <__udivmoddi4+0x292>
 80012ea:	2100      	movs	r1, #0
 80012ec:	e9c6 0500 	strd	r0, r5, [r6]
 80012f0:	4608      	mov	r0, r1
 80012f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f6:	fab3 f183 	clz	r1, r3
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d14a      	bne.n	8001394 <__udivmoddi4+0x160>
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d302      	bcc.n	8001308 <__udivmoddi4+0xd4>
 8001302:	4282      	cmp	r2, r0
 8001304:	f200 80fc 	bhi.w	8001500 <__udivmoddi4+0x2cc>
 8001308:	1a84      	subs	r4, r0, r2
 800130a:	eb65 0303 	sbc.w	r3, r5, r3
 800130e:	2001      	movs	r0, #1
 8001310:	4698      	mov	r8, r3
 8001312:	2e00      	cmp	r6, #0
 8001314:	d0e2      	beq.n	80012dc <__udivmoddi4+0xa8>
 8001316:	e9c6 4800 	strd	r4, r8, [r6]
 800131a:	e7df      	b.n	80012dc <__udivmoddi4+0xa8>
 800131c:	b902      	cbnz	r2, 8001320 <__udivmoddi4+0xec>
 800131e:	deff      	udf	#255	; 0xff
 8001320:	fab2 f282 	clz	r2, r2
 8001324:	2a00      	cmp	r2, #0
 8001326:	f040 8091 	bne.w	800144c <__udivmoddi4+0x218>
 800132a:	eba1 000c 	sub.w	r0, r1, ip
 800132e:	2101      	movs	r1, #1
 8001330:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001334:	fa1f fe8c 	uxth.w	lr, ip
 8001338:	fbb0 f3f7 	udiv	r3, r0, r7
 800133c:	fb07 0013 	mls	r0, r7, r3, r0
 8001340:	0c25      	lsrs	r5, r4, #16
 8001342:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001346:	fb0e f003 	mul.w	r0, lr, r3
 800134a:	42a8      	cmp	r0, r5
 800134c:	d908      	bls.n	8001360 <__udivmoddi4+0x12c>
 800134e:	eb1c 0505 	adds.w	r5, ip, r5
 8001352:	f103 38ff 	add.w	r8, r3, #4294967295
 8001356:	d202      	bcs.n	800135e <__udivmoddi4+0x12a>
 8001358:	42a8      	cmp	r0, r5
 800135a:	f200 80ce 	bhi.w	80014fa <__udivmoddi4+0x2c6>
 800135e:	4643      	mov	r3, r8
 8001360:	1a2d      	subs	r5, r5, r0
 8001362:	fbb5 f0f7 	udiv	r0, r5, r7
 8001366:	fb07 5510 	mls	r5, r7, r0, r5
 800136a:	fb0e fe00 	mul.w	lr, lr, r0
 800136e:	b2a4      	uxth	r4, r4
 8001370:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001374:	45a6      	cmp	lr, r4
 8001376:	d908      	bls.n	800138a <__udivmoddi4+0x156>
 8001378:	eb1c 0404 	adds.w	r4, ip, r4
 800137c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001380:	d202      	bcs.n	8001388 <__udivmoddi4+0x154>
 8001382:	45a6      	cmp	lr, r4
 8001384:	f200 80b6 	bhi.w	80014f4 <__udivmoddi4+0x2c0>
 8001388:	4628      	mov	r0, r5
 800138a:	eba4 040e 	sub.w	r4, r4, lr
 800138e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001392:	e79e      	b.n	80012d2 <__udivmoddi4+0x9e>
 8001394:	f1c1 0720 	rsb	r7, r1, #32
 8001398:	408b      	lsls	r3, r1
 800139a:	fa22 fc07 	lsr.w	ip, r2, r7
 800139e:	ea4c 0c03 	orr.w	ip, ip, r3
 80013a2:	fa25 fa07 	lsr.w	sl, r5, r7
 80013a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013aa:	fbba f8f9 	udiv	r8, sl, r9
 80013ae:	fa20 f307 	lsr.w	r3, r0, r7
 80013b2:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b6:	408d      	lsls	r5, r1
 80013b8:	fa1f fe8c 	uxth.w	lr, ip
 80013bc:	431d      	orrs	r5, r3
 80013be:	fa00 f301 	lsl.w	r3, r0, r1
 80013c2:	fb08 f00e 	mul.w	r0, r8, lr
 80013c6:	0c2c      	lsrs	r4, r5, #16
 80013c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013cc:	42a0      	cmp	r0, r4
 80013ce:	fa02 f201 	lsl.w	r2, r2, r1
 80013d2:	d90b      	bls.n	80013ec <__udivmoddi4+0x1b8>
 80013d4:	eb1c 0404 	adds.w	r4, ip, r4
 80013d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80013dc:	f080 8088 	bcs.w	80014f0 <__udivmoddi4+0x2bc>
 80013e0:	42a0      	cmp	r0, r4
 80013e2:	f240 8085 	bls.w	80014f0 <__udivmoddi4+0x2bc>
 80013e6:	f1a8 0802 	sub.w	r8, r8, #2
 80013ea:	4464      	add	r4, ip
 80013ec:	1a24      	subs	r4, r4, r0
 80013ee:	fbb4 f0f9 	udiv	r0, r4, r9
 80013f2:	fb09 4410 	mls	r4, r9, r0, r4
 80013f6:	fb00 fe0e 	mul.w	lr, r0, lr
 80013fa:	b2ad      	uxth	r5, r5
 80013fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001400:	45a6      	cmp	lr, r4
 8001402:	d908      	bls.n	8001416 <__udivmoddi4+0x1e2>
 8001404:	eb1c 0404 	adds.w	r4, ip, r4
 8001408:	f100 35ff 	add.w	r5, r0, #4294967295
 800140c:	d26c      	bcs.n	80014e8 <__udivmoddi4+0x2b4>
 800140e:	45a6      	cmp	lr, r4
 8001410:	d96a      	bls.n	80014e8 <__udivmoddi4+0x2b4>
 8001412:	3802      	subs	r0, #2
 8001414:	4464      	add	r4, ip
 8001416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800141a:	fba0 9502 	umull	r9, r5, r0, r2
 800141e:	eba4 040e 	sub.w	r4, r4, lr
 8001422:	42ac      	cmp	r4, r5
 8001424:	46c8      	mov	r8, r9
 8001426:	46ae      	mov	lr, r5
 8001428:	d356      	bcc.n	80014d8 <__udivmoddi4+0x2a4>
 800142a:	d053      	beq.n	80014d4 <__udivmoddi4+0x2a0>
 800142c:	2e00      	cmp	r6, #0
 800142e:	d069      	beq.n	8001504 <__udivmoddi4+0x2d0>
 8001430:	ebb3 0208 	subs.w	r2, r3, r8
 8001434:	eb64 040e 	sbc.w	r4, r4, lr
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	fa04 f707 	lsl.w	r7, r4, r7
 8001440:	431f      	orrs	r7, r3
 8001442:	40cc      	lsrs	r4, r1
 8001444:	e9c6 7400 	strd	r7, r4, [r6]
 8001448:	2100      	movs	r1, #0
 800144a:	e747      	b.n	80012dc <__udivmoddi4+0xa8>
 800144c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001450:	f1c2 0120 	rsb	r1, r2, #32
 8001454:	fa25 f301 	lsr.w	r3, r5, r1
 8001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800145c:	fa20 f101 	lsr.w	r1, r0, r1
 8001460:	4095      	lsls	r5, r2
 8001462:	430d      	orrs	r5, r1
 8001464:	fbb3 f1f7 	udiv	r1, r3, r7
 8001468:	fb07 3311 	mls	r3, r7, r1, r3
 800146c:	fa1f fe8c 	uxth.w	lr, ip
 8001470:	0c28      	lsrs	r0, r5, #16
 8001472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001476:	fb01 f30e 	mul.w	r3, r1, lr
 800147a:	4283      	cmp	r3, r0
 800147c:	fa04 f402 	lsl.w	r4, r4, r2
 8001480:	d908      	bls.n	8001494 <__udivmoddi4+0x260>
 8001482:	eb1c 0000 	adds.w	r0, ip, r0
 8001486:	f101 38ff 	add.w	r8, r1, #4294967295
 800148a:	d22f      	bcs.n	80014ec <__udivmoddi4+0x2b8>
 800148c:	4283      	cmp	r3, r0
 800148e:	d92d      	bls.n	80014ec <__udivmoddi4+0x2b8>
 8001490:	3902      	subs	r1, #2
 8001492:	4460      	add	r0, ip
 8001494:	1ac0      	subs	r0, r0, r3
 8001496:	fbb0 f3f7 	udiv	r3, r0, r7
 800149a:	fb07 0013 	mls	r0, r7, r3, r0
 800149e:	b2ad      	uxth	r5, r5
 80014a0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014a4:	fb03 f00e 	mul.w	r0, r3, lr
 80014a8:	42a8      	cmp	r0, r5
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x28a>
 80014ac:	eb1c 0505 	adds.w	r5, ip, r5
 80014b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80014b4:	d216      	bcs.n	80014e4 <__udivmoddi4+0x2b0>
 80014b6:	42a8      	cmp	r0, r5
 80014b8:	d914      	bls.n	80014e4 <__udivmoddi4+0x2b0>
 80014ba:	3b02      	subs	r3, #2
 80014bc:	4465      	add	r5, ip
 80014be:	1a28      	subs	r0, r5, r0
 80014c0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014c4:	e738      	b.n	8001338 <__udivmoddi4+0x104>
 80014c6:	4631      	mov	r1, r6
 80014c8:	4630      	mov	r0, r6
 80014ca:	e707      	b.n	80012dc <__udivmoddi4+0xa8>
 80014cc:	462f      	mov	r7, r5
 80014ce:	e6e4      	b.n	800129a <__udivmoddi4+0x66>
 80014d0:	4618      	mov	r0, r3
 80014d2:	e6f9      	b.n	80012c8 <__udivmoddi4+0x94>
 80014d4:	454b      	cmp	r3, r9
 80014d6:	d2a9      	bcs.n	800142c <__udivmoddi4+0x1f8>
 80014d8:	ebb9 0802 	subs.w	r8, r9, r2
 80014dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80014e0:	3801      	subs	r0, #1
 80014e2:	e7a3      	b.n	800142c <__udivmoddi4+0x1f8>
 80014e4:	4643      	mov	r3, r8
 80014e6:	e7ea      	b.n	80014be <__udivmoddi4+0x28a>
 80014e8:	4628      	mov	r0, r5
 80014ea:	e794      	b.n	8001416 <__udivmoddi4+0x1e2>
 80014ec:	4641      	mov	r1, r8
 80014ee:	e7d1      	b.n	8001494 <__udivmoddi4+0x260>
 80014f0:	46d0      	mov	r8, sl
 80014f2:	e77b      	b.n	80013ec <__udivmoddi4+0x1b8>
 80014f4:	4464      	add	r4, ip
 80014f6:	3802      	subs	r0, #2
 80014f8:	e747      	b.n	800138a <__udivmoddi4+0x156>
 80014fa:	3b02      	subs	r3, #2
 80014fc:	4465      	add	r5, ip
 80014fe:	e72f      	b.n	8001360 <__udivmoddi4+0x12c>
 8001500:	4608      	mov	r0, r1
 8001502:	e706      	b.n	8001312 <__udivmoddi4+0xde>
 8001504:	4631      	mov	r1, r6
 8001506:	e6e9      	b.n	80012dc <__udivmoddi4+0xa8>

08001508 <__aeabi_idiv0>:
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	889b      	ldrh	r3, [r3, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	88db      	ldrh	r3, [r3, #6]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
	if (total < 0)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da05      	bge.n	8001538 <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	891b      	ldrh	r3, [r3, #8]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4413      	add	r3, r2
 8001536:	617b      	str	r3, [r7, #20]

	if (total == 0)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e031      	b.n	80015a8 <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	88db      	ldrh	r3, [r3, #6]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	8912      	ldrh	r2, [r2, #8]
 8001550:	fbb3 f0f2 	udiv	r0, r3, r2
 8001554:	fb00 f202 	mul.w	r2, r0, r2
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
			* circ_buf->element_size);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	895b      	ldrh	r3, [r3, #10]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001566:	440b      	add	r3, r1
 8001568:	613b      	str	r3, [r7, #16]

	if (elem)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	895b      	ldrh	r3, [r3, #10]
 8001574:	461a      	mov	r2, r3
 8001576:	6939      	ldr	r1, [r7, #16]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f00c fcff 	bl	800df7c <memcpy>

	if (!read_only) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d110      	bne.n	80015a6 <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	88db      	ldrh	r3, [r3, #6]
 8001588:	3301      	adds	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	88db      	ldrh	r3, [r3, #6]
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	429a      	cmp	r2, r3
 800159e:	db02      	blt.n	80015a6 <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	889b      	ldrh	r3, [r3, #4]
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	88db      	ldrh	r3, [r3, #6]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	891b      	ldrh	r3, [r3, #8]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	891b      	ldrh	r3, [r3, #8]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	db02      	blt.n	80015ec <__circ_gbuf_push+0x3c>
		return -1; // Full
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e02b      	b.n	8001644 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	889b      	ldrh	r3, [r3, #4]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	8912      	ldrh	r2, [r2, #8]
 80015f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80015fc:	fb00 f202 	mul.w	r2, r0, r2
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
			* circ_buf->element_size );
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	895b      	ldrh	r3, [r3, #10]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 800160e:	440b      	add	r3, r1
 8001610:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	895b      	ldrh	r3, [r3, #10]
 8001616:	461a      	mov	r2, r3
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f00c fcae 	bl	800df7c <memcpy>
	circ_buf->push_count++;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	891b      	ldrh	r3, [r3, #8]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	429a      	cmp	r2, r3
 800163a:	db02      	blt.n	8001642 <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	809a      	strh	r2, [r3, #4]
	return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <Relay_control>:
extern uint16_t DAC_tx_tmp_buffer[2];
extern float DDS_FTW;


//==============================================================================================
void Relay_control(uint8_t relay,uint8_t state){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
	int Relay_address=0;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
	if(relay<1 || relay>3 || state>1) return;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 80c3 	beq.w	80017ee <Relay_control+0x1a2>
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b03      	cmp	r3, #3
 800166c:	f200 80bf 	bhi.w	80017ee <Relay_control+0x1a2>
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	2b01      	cmp	r3, #1
 8001674:	f200 80bb 	bhi.w	80017ee <Relay_control+0x1a2>

	while(Relay_address<=0x5) // Set all OUTx to zero
 8001678:	e03c      	b.n	80016f4 <Relay_control+0xa8>
	{
		HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	2102      	movs	r1, #2
 8001688:	485b      	ldr	r0, [pc, #364]	; (80017f8 <Relay_control+0x1ac>)
 800168a:	f003 fc3c 	bl	8004f06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	105b      	asrs	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	2104      	movs	r1, #4
 800169e:	4856      	ldr	r0, [pc, #344]	; (80017f8 <Relay_control+0x1ac>)
 80016a0:	f003 fc31 	bl	8004f06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	109b      	asrs	r3, r3, #2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	2108      	movs	r1, #8
 80016b4:	4850      	ldr	r0, [pc, #320]	; (80017f8 <Relay_control+0x1ac>)
 80016b6:	f003 fc26 	bl	8004f06 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 80016ba:	2200      	movs	r2, #0
 80016bc:	2101      	movs	r1, #1
 80016be:	484e      	ldr	r0, [pc, #312]	; (80017f8 <Relay_control+0x1ac>)
 80016c0:	f003 fc21 	bl	8004f06 <HAL_GPIO_WritePin>

		HAL_Delay(1); // wait 1ms
 80016c4:	2001      	movs	r0, #1
 80016c6:	f002 fdb9 	bl	800423c <HAL_Delay>
		HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	484a      	ldr	r0, [pc, #296]	; (80017fc <Relay_control+0x1b0>)
 80016d2:	f003 fc18 	bl	8004f06 <HAL_GPIO_WritePin>
		HAL_Delay(1); // wait 1ms
 80016d6:	2001      	movs	r0, #1
 80016d8:	f002 fdb0 	bl	800423c <HAL_Delay>
		HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e2:	4846      	ldr	r0, [pc, #280]	; (80017fc <Relay_control+0x1b0>)
 80016e4:	f003 fc0f 	bl	8004f06 <HAL_GPIO_WritePin>
		HAL_Delay(1); // wait 1ms
 80016e8:	2001      	movs	r0, #1
 80016ea:	f002 fda7 	bl	800423c <HAL_Delay>
		Relay_address++;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
	while(Relay_address<=0x5) // Set all OUTx to zero
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	ddbf      	ble.n	800167a <Relay_control+0x2e>
	}


	switch (relay)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d006      	beq.n	800170e <Relay_control+0xc2>
 8001700:	2b03      	cmp	r3, #3
 8001702:	dc1f      	bgt.n	8001744 <Relay_control+0xf8>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d014      	beq.n	8001732 <Relay_control+0xe6>
 8001708:	2b02      	cmp	r3, #2
 800170a:	d009      	beq.n	8001720 <Relay_control+0xd4>
 800170c:	e01a      	b.n	8001744 <Relay_control+0xf8>
	{
	case 3:
		if (state==1){
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <Relay_control+0xce>
			Relay_address=0x5; //OUT6
 8001714:	2305      	movs	r3, #5
 8001716:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x4; //OUT5
		} break;
 8001718:	e014      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x4; //OUT5
 800171a:	2304      	movs	r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
		} break;
 800171e:	e011      	b.n	8001744 <Relay_control+0xf8>
	case 2:
		if (state==1){
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <Relay_control+0xe0>
			Relay_address=0x3; //OUT4
 8001726:	2303      	movs	r3, #3
 8001728:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x2; //OUT3
		} break;
 800172a:	e00b      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x2; //OUT3
 800172c:	2302      	movs	r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
		} break;
 8001730:	e008      	b.n	8001744 <Relay_control+0xf8>
	case 1:
		if (state==1){
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <Relay_control+0xf2>
			Relay_address=0x1; //OUT2
 8001738:	2301      	movs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x0; //OUT1
		} break;
 800173c:	e001      	b.n	8001742 <Relay_control+0xf6>
			Relay_address=0x0; //OUT1
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
		} break;
 8001742:	bf00      	nop
	}

	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	2102      	movs	r1, #2
 8001752:	4829      	ldr	r0, [pc, #164]	; (80017f8 <Relay_control+0x1ac>)
 8001754:	f003 fbd7 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	105b      	asrs	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	2104      	movs	r1, #4
 8001768:	4823      	ldr	r0, [pc, #140]	; (80017f8 <Relay_control+0x1ac>)
 800176a:	f003 fbcc 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	109b      	asrs	r3, r3, #2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	2108      	movs	r1, #8
 800177e:	481e      	ldr	r0, [pc, #120]	; (80017f8 <Relay_control+0x1ac>)
 8001780:	f003 fbc1 	bl	8004f06 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 1); // LVL 1
 8001784:	2201      	movs	r2, #1
 8001786:	2101      	movs	r1, #1
 8001788:	481b      	ldr	r0, [pc, #108]	; (80017f8 <Relay_control+0x1ac>)
 800178a:	f003 fbbc 	bl	8004f06 <HAL_GPIO_WritePin>

	HAL_Delay(1); // wait 1ms
 800178e:	2001      	movs	r0, #1
 8001790:	f002 fd54 	bl	800423c <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179a:	4818      	ldr	r0, [pc, #96]	; (80017fc <Relay_control+0x1b0>)
 800179c:	f003 fbb3 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 80017a0:	2001      	movs	r0, #1
 80017a2:	f002 fd4b 	bl	800423c <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <Relay_control+0x1b0>)
 80017ae:	f003 fbaa 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_Delay(50); // wait 50ms
 80017b2:	2032      	movs	r0, #50	; 0x32
 80017b4:	f002 fd42 	bl	800423c <HAL_Delay>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 80017b8:	2200      	movs	r2, #0
 80017ba:	2101      	movs	r1, #1
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <Relay_control+0x1ac>)
 80017be:	f003 fba2 	bl	8004f06 <HAL_GPIO_WritePin>

	HAL_Delay(1); // wait 1ms
 80017c2:	2001      	movs	r0, #1
 80017c4:	f002 fd3a 	bl	800423c <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <Relay_control+0x1b0>)
 80017d0:	f003 fb99 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 80017d4:	2001      	movs	r0, #1
 80017d6:	f002 fd31 	bl	800423c <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e0:	4806      	ldr	r0, [pc, #24]	; (80017fc <Relay_control+0x1b0>)
 80017e2:	f003 fb90 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 80017e6:	2001      	movs	r0, #1
 80017e8:	f002 fd28 	bl	800423c <HAL_Delay>
 80017ec:	e000      	b.n	80017f0 <Relay_control+0x1a4>
	if(relay<1 || relay>3 || state>1) return;
 80017ee:	bf00      	nop

}
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020800 	.word	0x40020800

08001800 <CPLD_control>:
//==============================================================================================



//==============================================================================================
void CPLD_control(uint8_t divide_coeff){
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
	if(divide_coeff>0x0F) return;
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d840      	bhi.n	8001892 <CPLD_control+0x92>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin,  divide_coeff & 0x1     );
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	2101      	movs	r1, #1
 800181c:	481f      	ldr	r0, [pc, #124]	; (800189c <CPLD_control+0x9c>)
 800181e:	f003 fb72 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin, (divide_coeff & 0x2) >>1);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	105b      	asrs	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	2102      	movs	r1, #2
 8001832:	481a      	ldr	r0, [pc, #104]	; (800189c <CPLD_control+0x9c>)
 8001834:	f003 fb67 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (divide_coeff & 0x4) >>2);
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	109b      	asrs	r3, r3, #2
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	2104      	movs	r1, #4
 8001848:	4814      	ldr	r0, [pc, #80]	; (800189c <CPLD_control+0x9c>)
 800184a:	f003 fb5c 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (divide_coeff & 0x8) >>3);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	10db      	asrs	r3, r3, #3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	2108      	movs	r1, #8
 800185e:	480f      	ldr	r0, [pc, #60]	; (800189c <CPLD_control+0x9c>)
 8001860:	f003 fb51 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_SET); // Send strobe
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <CPLD_control+0xa0>)
 800186c:	f003 fb4b 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001876:	480a      	ldr	r0, [pc, #40]	; (80018a0 <CPLD_control+0xa0>)
 8001878:	f003 fb45 	bl	8004f06 <HAL_GPIO_WritePin>

	if(divide_coeff==0x00)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <CPLD_control+0x8a>
	{
		cfg.LDACMODE=0;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <CPLD_control+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	709a      	strb	r2, [r3, #2]
 8001888:	e004      	b.n	8001894 <CPLD_control+0x94>
	}
	else
	{
		cfg.LDACMODE=1;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <CPLD_control+0xa4>)
 800188c:	2201      	movs	r2, #1
 800188e:	709a      	strb	r2, [r3, #2]
 8001890:	e000      	b.n	8001894 <CPLD_control+0x94>
	if(divide_coeff>0x0F) return;
 8001892:	bf00      	nop
	}
}
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020800 	.word	0x40020800
 80018a4:	20000bb0 	.word	0x20000bb0

080018a8 <DAC_Write>:



//==============================================================================================
void DAC_Write(uint32_t value)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <DAC_Write+0x6c>)
 80018b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018b6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018c0:	f023 030f 	bic.w	r3, r3, #15
 80018c4:	4a13      	ldr	r2, [pc, #76]	; (8001914 <DAC_Write+0x6c>)
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <DAC_Write+0x6c>)
 80018cc:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <DAC_Write+0x6c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0c1b      	lsrs	r3, r3, #16
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <DAC_Write+0x70>)
 80018d8:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <DAC_Write+0x6c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <DAC_Write+0x70>)
 80018e2:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2110      	movs	r1, #16
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <DAC_Write+0x74>)
 80018ea:	f003 fb0c 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 80018ee:	2302      	movs	r3, #2
 80018f0:	2202      	movs	r2, #2
 80018f2:	4909      	ldr	r1, [pc, #36]	; (8001918 <DAC_Write+0x70>)
 80018f4:	480a      	ldr	r0, [pc, #40]	; (8001920 <DAC_Write+0x78>)
 80018f6:	f006 fa0b 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 80018fa:	2201      	movs	r2, #1
 80018fc:	2110      	movs	r1, #16
 80018fe:	4807      	ldr	r0, [pc, #28]	; (800191c <DAC_Write+0x74>)
 8001900:	f003 fb01 	bl	8004f06 <HAL_GPIO_WritePin>
	DAC_code=value;
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <DAC_Write+0x7c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000ba8 	.word	0x20000ba8
 8001918:	20000bac 	.word	0x20000bac
 800191c:	40020000 	.word	0x40020000
 8001920:	20000be0 	.word	0x20000be0
 8001924:	20000bd8 	.word	0x20000bd8

08001928 <DAC_Write_FAST>:

//==============================================================================================
void DAC_Write_FAST(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	2110      	movs	r1, #16
 8001930:	4807      	ldr	r0, [pc, #28]	; (8001950 <DAC_Write_FAST+0x28>)
 8001932:	f003 fae8 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001936:	2302      	movs	r3, #2
 8001938:	2202      	movs	r2, #2
 800193a:	4906      	ldr	r1, [pc, #24]	; (8001954 <DAC_Write_FAST+0x2c>)
 800193c:	4806      	ldr	r0, [pc, #24]	; (8001958 <DAC_Write_FAST+0x30>)
 800193e:	f006 f9e7 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	2110      	movs	r1, #16
 8001946:	4802      	ldr	r0, [pc, #8]	; (8001950 <DAC_Write_FAST+0x28>)
 8001948:	f003 fadd 	bl	8004f06 <HAL_GPIO_WritePin>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40020000 	.word	0x40020000
 8001954:	20000bac 	.word	0x20000bac
 8001958:	20000be0 	.word	0x20000be0

0800195c <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

	DAC_tx_buffer=0x02000000; // Write CONFIG1
 8001960:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <DAC_SendInit+0xfc>)
 8001962:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001966:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 8001968:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <DAC_SendInit+0x100>)
 800196a:	7a1b      	ldrb	r3, [r3, #8]
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	f003 0210 	and.w	r2, r3, #16
 8001972:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <DAC_SendInit+0xfc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a37      	ldr	r2, [pc, #220]	; (8001a58 <DAC_SendInit+0xfc>)
 800197a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x06)<<6;
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <DAC_SendInit+0x100>)
 800197e:	79db      	ldrb	r3, [r3, #7]
 8001980:	019b      	lsls	r3, r3, #6
 8001982:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8001986:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <DAC_SendInit+0xfc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a32      	ldr	r2, [pc, #200]	; (8001a58 <DAC_SendInit+0xfc>)
 800198e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <DAC_SendInit+0x100>)
 8001992:	799b      	ldrb	r3, [r3, #6]
 8001994:	029b      	lsls	r3, r3, #10
 8001996:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800199a:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <DAC_SendInit+0xfc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a2d      	ldr	r2, [pc, #180]	; (8001a58 <DAC_SendInit+0xfc>)
 80019a2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <DAC_SendInit+0x100>)
 80019a6:	795b      	ldrb	r3, [r3, #5]
 80019a8:	02db      	lsls	r3, r3, #11
 80019aa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <DAC_SendInit+0xfc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a28      	ldr	r2, [pc, #160]	; (8001a58 <DAC_SendInit+0xfc>)
 80019b6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <DAC_SendInit+0x100>)
 80019ba:	791b      	ldrb	r3, [r3, #4]
 80019bc:	031b      	lsls	r3, r3, #12
 80019be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <DAC_SendInit+0xfc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <DAC_SendInit+0xfc>)
 80019ca:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <DAC_SendInit+0x100>)
 80019ce:	78db      	ldrb	r3, [r3, #3]
 80019d0:	035b      	lsls	r3, r3, #13
 80019d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <DAC_SendInit+0xfc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <DAC_SendInit+0xfc>)
 80019de:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <DAC_SendInit+0x100>)
 80019e2:	789b      	ldrb	r3, [r3, #2]
 80019e4:	039b      	lsls	r3, r3, #14
 80019e6:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <DAC_SendInit+0xfc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a19      	ldr	r2, [pc, #100]	; (8001a58 <DAC_SendInit+0xfc>)
 80019f2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <DAC_SendInit+0x100>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	049b      	lsls	r3, r3, #18
 80019fa:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <DAC_SendInit+0xfc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <DAC_SendInit+0xfc>)
 8001a06:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <DAC_SendInit+0x100>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	05db      	lsls	r3, r3, #23
 8001a0e:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <DAC_SendInit+0xfc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <DAC_SendInit+0xfc>)
 8001a1a:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <DAC_SendInit+0xfc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <DAC_SendInit+0x104>)
 8001a26:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <DAC_SendInit+0xfc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <DAC_SendInit+0x104>)
 8001a30:	805a      	strh	r2, [r3, #2]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2110      	movs	r1, #16
 8001a36:	480b      	ldr	r0, [pc, #44]	; (8001a64 <DAC_SendInit+0x108>)
 8001a38:	f003 fa65 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <DAC_SendInit+0x104>)
 8001a42:	4809      	ldr	r0, [pc, #36]	; (8001a68 <DAC_SendInit+0x10c>)
 8001a44:	f006 f964 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <DAC_SendInit+0x108>)
 8001a4e:	f003 fa5a 	bl	8004f06 <HAL_GPIO_WritePin>

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000ba8 	.word	0x20000ba8
 8001a5c:	20000bb0 	.word	0x20000bb0
 8001a60:	20000bac 	.word	0x20000bac
 8001a64:	40020000 	.word	0x40020000
 8001a68:	20000be0 	.word	0x20000be0

08001a6c <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
	uint32_t DAC_tx_buffer;
	uint16_t DAC_tx_tmp_buffer[2];

	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	813b      	strh	r3, [r7, #8]
 8001a76:	2300      	movs	r3, #0
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	82fb      	strh	r3, [r7, #22]

	//CPLD_control(0x0); // Disable LDAC signal

	cfg.EN_TMP_CAL=1;
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <DAC_TEMP_CAL+0xd0>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
	DAC_SendInit();
 8001a84:	f7ff ff6a 	bl	800195c <DAC_SendInit>
	//HAL_Delay(10);

	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <DAC_TEMP_CAL+0xd4>)
 8001a8a:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	0c1b      	lsrs	r3, r3, #16
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	81bb      	strh	r3, [r7, #12]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	81fb      	strh	r3, [r7, #14]

	DAC_tx_buffer=0x85000000; // read status register
 8001a9a:	f04f 4305 	mov.w	r3, #2231369728	; 0x85000000
 8001a9e:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	0c1b      	lsrs	r3, r3, #16
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	80bb      	strh	r3, [r7, #4]
	DAC_tx_tmp_buffer2[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2110      	movs	r1, #16
 8001ab2:	4824      	ldr	r0, [pc, #144]	; (8001b44 <DAC_TEMP_CAL+0xd8>)
 8001ab4:	f003 fa27 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001ab8:	f107 010c 	add.w	r1, r7, #12
 8001abc:	2302      	movs	r3, #2
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4821      	ldr	r0, [pc, #132]	; (8001b48 <DAC_TEMP_CAL+0xdc>)
 8001ac2:	f006 f925 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2110      	movs	r1, #16
 8001aca:	481e      	ldr	r0, [pc, #120]	; (8001b44 <DAC_TEMP_CAL+0xd8>)
 8001acc:	f003 fa1b 	bl	8004f06 <HAL_GPIO_WritePin>

	//HAL_Delay(500); // Wait some time....

	do{ // Check complete flag
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	481b      	ldr	r0, [pc, #108]	; (8001b44 <DAC_TEMP_CAL+0xd8>)
 8001ad6:	f003 fa16 	bl	8004f06 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 8001ada:	1d39      	adds	r1, r7, #4
 8001adc:	2302      	movs	r3, #2
 8001ade:	2202      	movs	r2, #2
 8001ae0:	4819      	ldr	r0, [pc, #100]	; (8001b48 <DAC_TEMP_CAL+0xdc>)
 8001ae2:	f006 f915 	bl	8007d10 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2110      	movs	r1, #16
 8001aea:	4816      	ldr	r0, [pc, #88]	; (8001b44 <DAC_TEMP_CAL+0xd8>)
 8001aec:	f003 fa0b 	bl	8004f06 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2110      	movs	r1, #16
 8001af4:	4813      	ldr	r0, [pc, #76]	; (8001b44 <DAC_TEMP_CAL+0xd8>)
 8001af6:	f003 fa06 	bl	8004f06 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 2, 2);
 8001afa:	f107 0108 	add.w	r1, r7, #8
 8001afe:	2302      	movs	r3, #2
 8001b00:	2202      	movs	r2, #2
 8001b02:	4811      	ldr	r0, [pc, #68]	; (8001b48 <DAC_TEMP_CAL+0xdc>)
 8001b04:	f006 fa40 	bl	8007f88 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <DAC_TEMP_CAL+0xd8>)
 8001b0e:	f003 f9fa 	bl	8004f06 <HAL_GPIO_WritePin>
		ALM=(spi_receive[1] & 0x1000) >> 12;
 8001b12:	897b      	ldrh	r3, [r7, #10]
 8001b14:	131b      	asrs	r3, r3, #12
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	82fb      	strh	r3, [r7, #22]
		if(ALM!=1)HAL_Delay(10);
 8001b1e:	8afb      	ldrh	r3, [r7, #22]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d002      	beq.n	8001b2a <DAC_TEMP_CAL+0xbe>
 8001b24:	200a      	movs	r0, #10
 8001b26:	f002 fb89 	bl	800423c <HAL_Delay>
	}while(ALM!=1);
 8001b2a:	8afb      	ldrh	r3, [r7, #22]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d1cf      	bne.n	8001ad0 <DAC_TEMP_CAL+0x64>
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000bb0 	.word	0x20000bb0
 8001b40:	04000100 	.word	0x04000100
 8001b44:	40020000 	.word	0x40020000
 8001b48:	20000be0 	.word	0x20000be0

08001b4c <DDS_Calculation>:

void DDS_Calculation(void)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
	float hw_limit=1000; // 1(256)kHz hardware optimized limit
 8001b52:	4b7b      	ldr	r3, [pc, #492]	; (8001d40 <DDS_Calculation+0x1f4>)
 8001b54:	613b      	str	r3, [r7, #16]
	float dac_counts=1048576;
 8001b56:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8001b5a:	60fb      	str	r3, [r7, #12]
	float corr_coeff;
	float dac_tmp=DAC_code;
 8001b5c:	4b79      	ldr	r3, [pc, #484]	; (8001d44 <DDS_Calculation+0x1f8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f8d9 	bl	8000d18 <__aeabi_ui2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	60bb      	str	r3, [r7, #8]
	float second_left;
	uint32_t codes_left;

	corr_coeff=corr_coeff_1*dac_tmp*dac_tmp;
 8001b6a:	4b77      	ldr	r3, [pc, #476]	; (8001d48 <DDS_Calculation+0x1fc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff f929 	bl	8000dc8 <__aeabi_fmul>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	68b8      	ldr	r0, [r7, #8]
 8001b7c:	f7ff f924 	bl	8000dc8 <__aeabi_fmul>
 8001b80:	4603      	mov	r3, r0
 8001b82:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_2*dac_tmp;
 8001b84:	4b71      	ldr	r3, [pc, #452]	; (8001d4c <DDS_Calculation+0x200>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f91c 	bl	8000dc8 <__aeabi_fmul>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4619      	mov	r1, r3
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff f80f 	bl	8000bb8 <__addsf3>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_3;
 8001b9e:	4b6c      	ldr	r3, [pc, #432]	; (8001d50 <DDS_Calculation+0x204>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff f807 	bl	8000bb8 <__addsf3>
 8001baa:	4603      	mov	r3, r0
 8001bac:	607b      	str	r3, [r7, #4]

	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001bae:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <DDS_Calculation+0x208>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a69      	ldr	r2, [pc, #420]	; (8001d58 <DDS_Calculation+0x20c>)
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f9b9 	bl	8000f30 <__aeabi_fdiv>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff f9b4 	bl	8000f30 <__aeabi_fdiv>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <DDS_Calculation+0x210>)
 8001bce:	601a      	str	r2, [r3, #0]

	if(DDS_target_frequecny>hw_limit)
 8001bd0:	4b62      	ldr	r3, [pc, #392]	; (8001d5c <DDS_Calculation+0x210>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6938      	ldr	r0, [r7, #16]
 8001bd8:	f7ff fa94 	bl	8001104 <__aeabi_fcmplt>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d02e      	beq.n	8001c40 <DDS_Calculation+0xf4>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 8001be2:	4b5e      	ldr	r3, [pc, #376]	; (8001d5c <DDS_Calculation+0x210>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6939      	ldr	r1, [r7, #16]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f9a1 	bl	8000f30 <__aeabi_fdiv>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff faaf 	bl	8001154 <__aeabi_f2uiz>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a59      	ldr	r2, [pc, #356]	; (8001d60 <DDS_Calculation+0x214>)
 8001bfa:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001bfc:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <DDS_Calculation+0x208>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a55      	ldr	r2, [pc, #340]	; (8001d58 <DDS_Calculation+0x20c>)
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f992 	bl	8000f30 <__aeabi_fdiv>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7ff f98d 	bl	8000f30 <__aeabi_fdiv>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <DDS_Calculation+0x210>)
 8001c1c:	601a      	str	r2, [r3, #0]
		DDS_target_frequecny/=(float)DDS_target_multipiller;
 8001c1e:	4b4f      	ldr	r3, [pc, #316]	; (8001d5c <DDS_Calculation+0x210>)
 8001c20:	681c      	ldr	r4, [r3, #0]
 8001c22:	4b4f      	ldr	r3, [pc, #316]	; (8001d60 <DDS_Calculation+0x214>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f876 	bl	8000d18 <__aeabi_ui2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7ff f97d 	bl	8000f30 <__aeabi_fdiv>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b48      	ldr	r3, [pc, #288]	; (8001d5c <DDS_Calculation+0x210>)
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e002      	b.n	8001c46 <DDS_Calculation+0xfa>
	} else DDS_target_multipiller = 1;
 8001c40:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <DDS_Calculation+0x214>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

	DDS_FTW=(((DDS_target_frequecny/corr_coeff)*((1<<CPLD_WORD)+1))/DDS_clock_frequecny)*(float)0xFFFFFFFF;
 8001c46:	4b45      	ldr	r3, [pc, #276]	; (8001d5c <DDS_Calculation+0x210>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f96f 	bl	8000f30 <__aeabi_fdiv>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461c      	mov	r4, r3
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <DDS_Calculation+0x218>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	3301      	adds	r3, #1
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f85c 	bl	8000d20 <__aeabi_i2f>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff f8ab 	bl	8000dc8 <__aeabi_fmul>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <DDS_Calculation+0x21c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f7ff f957 	bl	8000f30 <__aeabi_fdiv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f89d 	bl	8000dc8 <__aeabi_fmul>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <DDS_Calculation+0x220>)
 8001c94:	601a      	str	r2, [r3, #0]

	if(DAC_code_direction)
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <DDS_Calculation+0x224>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <DDS_Calculation+0x162>
	{
		codes_left=0xFFFFF-DAC_code;
 8001c9e:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <DDS_Calculation+0x1f8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8001ca6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e002      	b.n	8001cb4 <DDS_Calculation+0x168>
	}
	else
	{
		codes_left=DAC_code;
 8001cae:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <DDS_Calculation+0x1f8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	617b      	str	r3, [r7, #20]
	}

	second_left=codes_left/DDS_target_multipiller/DDS_target_frequecny;
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <DDS_Calculation+0x214>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f82a 	bl	8000d18 <__aeabi_ui2f>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <DDS_Calculation+0x210>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f7ff f92f 	bl	8000f30 <__aeabi_fdiv>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	603b      	str	r3, [r7, #0]
	eta_second=(uint32_t)second_left % 60;
 8001cd6:	6838      	ldr	r0, [r7, #0]
 8001cd8:	f7ff fa3c 	bl	8001154 <__aeabi_f2uiz>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <DDS_Calculation+0x228>)
 8001ce0:	fba3 2301 	umull	r2, r3, r3, r1
 8001ce4:	095a      	lsrs	r2, r3, #5
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	1aca      	subs	r2, r1, r3
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <DDS_Calculation+0x22c>)
 8001cf4:	701a      	strb	r2, [r3, #0]
	eta_minute=(uint32_t)(second_left / 60) % 60;
 8001cf6:	4921      	ldr	r1, [pc, #132]	; (8001d7c <DDS_Calculation+0x230>)
 8001cf8:	6838      	ldr	r0, [r7, #0]
 8001cfa:	f7ff f919 	bl	8000f30 <__aeabi_fdiv>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fa27 	bl	8001154 <__aeabi_f2uiz>
 8001d06:	4601      	mov	r1, r0
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <DDS_Calculation+0x228>)
 8001d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d0e:	095a      	lsrs	r2, r3, #5
 8001d10:	4613      	mov	r3, r2
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	1aca      	subs	r2, r1, r3
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <DDS_Calculation+0x234>)
 8001d1e:	701a      	strb	r2, [r3, #0]
	eta_hours=(uint32_t) second_left / 3600;
 8001d20:	6838      	ldr	r0, [r7, #0]
 8001d22:	f7ff fa17 	bl	8001154 <__aeabi_f2uiz>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <DDS_Calculation+0x238>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0adb      	lsrs	r3, r3, #11
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <DDS_Calculation+0x23c>)
 8001d34:	701a      	strb	r2, [r3, #0]
}
 8001d36:	bf00      	nop
 8001d38:	371c      	adds	r7, #28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd90      	pop	{r4, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	447a0000 	.word	0x447a0000
 8001d44:	20000bd8 	.word	0x20000bd8
 8001d48:	20000a24 	.word	0x20000a24
 8001d4c:	20000a28 	.word	0x20000a28
 8001d50:	20000a2c 	.word	0x20000a2c
 8001d54:	20000bcc 	.word	0x20000bcc
 8001d58:	20000bc8 	.word	0x20000bc8
 8001d5c:	20000bc4 	.word	0x20000bc4
 8001d60:	200006ac 	.word	0x200006ac
 8001d64:	200006a8 	.word	0x200006a8
 8001d68:	200006b0 	.word	0x200006b0
 8001d6c:	20000bc0 	.word	0x20000bc0
 8001d70:	20000bdc 	.word	0x20000bdc
 8001d74:	88888889 	.word	0x88888889
 8001d78:	20000bbc 	.word	0x20000bbc
 8001d7c:	42700000 	.word	0x42700000
 8001d80:	20000bbb 	.word	0x20000bbb
 8001d84:	91a2b3c5 	.word	0x91a2b3c5
 8001d88:	20000bba 	.word	0x20000bba

08001d8c <DDS_Init>:

//==============================================================================================
void DDS_Init(void)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];
	DDS_Calculation();
 8001d92:	f7ff fedb 	bl	8001b4c <DDS_Calculation>

	HAL_Delay(100);
 8001d96:	2064      	movs	r0, #100	; 0x64
 8001d98:	f002 fa50 	bl	800423c <HAL_Delay>

	//CONTROL REGISTER WRITE SLEEP =1 ,	RESET = 1,	CLR = 1
	DDS_tx_buffer[0]=0xC000; // Control DDS (D15=1, D14=1)
 8001d9c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001da0:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=0x7 << 11; //  SLEEP = 1 , RESET = 1,	CLR = 1
 8001da2:	88bb      	ldrh	r3, [r7, #4]
 8001da4:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001db2:	4861      	ldr	r0, [pc, #388]	; (8001f38 <DDS_Init+0x1ac>)
 8001db4:	f003 f8a7 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001db8:	1d39      	adds	r1, r7, #4
 8001dba:	2305      	movs	r3, #5
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	485f      	ldr	r0, [pc, #380]	; (8001f3c <DDS_Init+0x1b0>)
 8001dc0:	f005 ffa6 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dca:	485b      	ldr	r0, [pc, #364]	; (8001f38 <DDS_Init+0x1ac>)
 8001dcc:	f003 f89b 	bl	8004f06 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001dd0:	2064      	movs	r0, #100	; 0x64
 8001dd2:	f002 fa33 	bl	800423c <HAL_Delay>
	//DO NOT !!! SET SYNC AND/OR SELSRC TO 1

	//WRITE INITIAL DATA

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001dd6:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001dda:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001ddc:	88bc      	ldrh	r4, [r7, #4]
 8001dde:	4b58      	ldr	r3, [pc, #352]	; (8001f40 <DDS_Init+0x1b4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f9b6 	bl	8001154 <__aeabi_f2uiz>
 8001de8:	4603      	mov	r3, r0
 8001dea:	0e1b      	lsrs	r3, r3, #24
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	4423      	add	r3, r4
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dfa:	484f      	ldr	r0, [pc, #316]	; (8001f38 <DDS_Init+0x1ac>)
 8001dfc:	f003 f883 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e00:	1d39      	adds	r1, r7, #4
 8001e02:	2305      	movs	r3, #5
 8001e04:	2201      	movs	r2, #1
 8001e06:	484d      	ldr	r0, [pc, #308]	; (8001f3c <DDS_Init+0x1b0>)
 8001e08:	f005 ff82 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e12:	4849      	ldr	r0, [pc, #292]	; (8001f38 <DDS_Init+0x1ac>)
 8001e14:	f003 f877 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001e18:	2032      	movs	r0, #50	; 0x32
 8001e1a:	f002 fa0f 	bl	800423c <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001e1e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001e22:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001e24:	88bc      	ldrh	r4, [r7, #4]
 8001e26:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <DDS_Init+0x1b4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f992 	bl	8001154 <__aeabi_f2uiz>
 8001e30:	4603      	mov	r3, r0
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4423      	add	r3, r4
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e46:	483c      	ldr	r0, [pc, #240]	; (8001f38 <DDS_Init+0x1ac>)
 8001e48:	f003 f85d 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e4c:	1d39      	adds	r1, r7, #4
 8001e4e:	2305      	movs	r3, #5
 8001e50:	2201      	movs	r2, #1
 8001e52:	483a      	ldr	r0, [pc, #232]	; (8001f3c <DDS_Init+0x1b0>)
 8001e54:	f005 ff5c 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e5e:	4836      	ldr	r0, [pc, #216]	; (8001f38 <DDS_Init+0x1ac>)
 8001e60:	f003 f851 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001e64:	2032      	movs	r0, #50	; 0x32
 8001e66:	f002 f9e9 	bl	800423c <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001e6a:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001e6e:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001e70:	88bc      	ldrh	r4, [r7, #4]
 8001e72:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <DDS_Init+0x1b4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f96c 	bl	8001154 <__aeabi_f2uiz>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4423      	add	r3, r4
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e92:	4829      	ldr	r0, [pc, #164]	; (8001f38 <DDS_Init+0x1ac>)
 8001e94:	f003 f837 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e98:	1d39      	adds	r1, r7, #4
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4827      	ldr	r0, [pc, #156]	; (8001f3c <DDS_Init+0x1b0>)
 8001ea0:	f005 ff36 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eaa:	4823      	ldr	r0, [pc, #140]	; (8001f38 <DDS_Init+0x1ac>)
 8001eac:	f003 f82b 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001eb0:	2032      	movs	r0, #50	; 0x32
 8001eb2:	f002 f9c3 	bl	800423c <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eba:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001ebc:	88bc      	ldrh	r4, [r7, #4]
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <DDS_Init+0x1b4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f946 	bl	8001154 <__aeabi_f2uiz>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4423      	add	r3, r4
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001edc:	4816      	ldr	r0, [pc, #88]	; (8001f38 <DDS_Init+0x1ac>)
 8001ede:	f003 f812 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ee2:	1d39      	adds	r1, r7, #4
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4814      	ldr	r0, [pc, #80]	; (8001f3c <DDS_Init+0x1b0>)
 8001eea:	f005 ff11 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef4:	4810      	ldr	r0, [pc, #64]	; (8001f38 <DDS_Init+0x1ac>)
 8001ef6:	f003 f806 	bl	8004f06 <HAL_GPIO_WritePin>


	HAL_Delay(100);
 8001efa:	2064      	movs	r0, #100	; 0x64
 8001efc:	f002 f99e 	bl	800423c <HAL_Delay>

	// CONTROL REGISTER WRITE, 	SLEEP = 0,	RESET = 0, CLR = 0

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Exit DAC from Sleep+Reset mode
 8001f00:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f04:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f0c:	480a      	ldr	r0, [pc, #40]	; (8001f38 <DDS_Init+0x1ac>)
 8001f0e:	f002 fffa 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f12:	1d39      	adds	r1, r7, #4
 8001f14:	2305      	movs	r3, #5
 8001f16:	2201      	movs	r2, #1
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <DDS_Init+0x1b0>)
 8001f1a:	f005 fef9 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <DDS_Init+0x1ac>)
 8001f26:	f002 ffee 	bl	8004f06 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001f2a:	2064      	movs	r0, #100	; 0x64
 8001f2c:	f002 f986 	bl	800423c <HAL_Delay>

}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd90      	pop	{r4, r7, pc}
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	20000c38 	.word	0x20000c38
 8001f40:	20000bc0 	.word	0x20000bc0

08001f44 <DDS_Update>:

//==============================================================================================
void DDS_Update(void)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];

	DDS_Calculation();
 8001f4a:	f7ff fdff 	bl	8001b4c <DDS_Calculation>

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001f4e:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001f52:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001f54:	88bc      	ldrh	r4, [r7, #4]
 8001f56:	4b44      	ldr	r3, [pc, #272]	; (8002068 <DDS_Update+0x124>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f8fa 	bl	8001154 <__aeabi_f2uiz>
 8001f60:	4603      	mov	r3, r0
 8001f62:	0e1b      	lsrs	r3, r3, #24
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	4423      	add	r3, r4
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f72:	483e      	ldr	r0, [pc, #248]	; (800206c <DDS_Update+0x128>)
 8001f74:	f002 ffc7 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f78:	1d39      	adds	r1, r7, #4
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	483c      	ldr	r0, [pc, #240]	; (8002070 <DDS_Update+0x12c>)
 8001f80:	f005 fec6 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f84:	2201      	movs	r2, #1
 8001f86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f8a:	4838      	ldr	r0, [pc, #224]	; (800206c <DDS_Update+0x128>)
 8001f8c:	f002 ffbb 	bl	8004f06 <HAL_GPIO_WritePin>
//	HAL_Delay(1);

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001f90:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001f94:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001f96:	88bc      	ldrh	r4, [r7, #4]
 8001f98:	4b33      	ldr	r3, [pc, #204]	; (8002068 <DDS_Update+0x124>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff f8d9 	bl	8001154 <__aeabi_f2uiz>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4423      	add	r3, r4
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb8:	482c      	ldr	r0, [pc, #176]	; (800206c <DDS_Update+0x128>)
 8001fba:	f002 ffa4 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001fbe:	1d39      	adds	r1, r7, #4
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	482a      	ldr	r0, [pc, #168]	; (8002070 <DDS_Update+0x12c>)
 8001fc6:	f005 fea3 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd0:	4826      	ldr	r0, [pc, #152]	; (800206c <DDS_Update+0x128>)
 8001fd2:	f002 ff98 	bl	8004f06 <HAL_GPIO_WritePin>
//	HAL_Delay(1);

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001fd6:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001fda:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001fdc:	88bc      	ldrh	r4, [r7, #4]
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <DDS_Update+0x124>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f8b6 	bl	8001154 <__aeabi_f2uiz>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4423      	add	r3, r4
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ffe:	481b      	ldr	r0, [pc, #108]	; (800206c <DDS_Update+0x128>)
 8002000:	f002 ff81 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8002004:	1d39      	adds	r1, r7, #4
 8002006:	2305      	movs	r3, #5
 8002008:	2201      	movs	r2, #1
 800200a:	4819      	ldr	r0, [pc, #100]	; (8002070 <DDS_Update+0x12c>)
 800200c:	f005 fe80 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002010:	2201      	movs	r2, #1
 8002012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002016:	4815      	ldr	r0, [pc, #84]	; (800206c <DDS_Update+0x128>)
 8002018:	f002 ff75 	bl	8004f06 <HAL_GPIO_WritePin>
//	HAL_Delay(1);

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 800201c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002020:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8002022:	88bc      	ldrh	r4, [r7, #4]
 8002024:	4b10      	ldr	r3, [pc, #64]	; (8002068 <DDS_Update+0x124>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff f893 	bl	8001154 <__aeabi_f2uiz>
 800202e:	4603      	mov	r3, r0
 8002030:	b29b      	uxth	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	b29b      	uxth	r3, r3
 8002036:	4423      	add	r3, r4
 8002038:	b29b      	uxth	r3, r3
 800203a:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002042:	480a      	ldr	r0, [pc, #40]	; (800206c <DDS_Update+0x128>)
 8002044:	f002 ff5f 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8002048:	1d39      	adds	r1, r7, #4
 800204a:	2305      	movs	r3, #5
 800204c:	2201      	movs	r2, #1
 800204e:	4808      	ldr	r0, [pc, #32]	; (8002070 <DDS_Update+0x12c>)
 8002050:	f005 fe5e 	bl	8007d10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002054:	2201      	movs	r2, #1
 8002056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800205a:	4804      	ldr	r0, [pc, #16]	; (800206c <DDS_Update+0x128>)
 800205c:	f002 ff53 	bl	8004f06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
	HAL_Delay(1);
*/
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	20000bc0 	.word	0x20000bc0
 800206c:	40020400 	.word	0x40020400
 8002070:	20000c38 	.word	0x20000c38

08002074 <LcdSend>:
unsigned char LcdCache[LCD_CACHSIZE];   // Фреймбуфер
unsigned int LcdCacheIdx = 0;   // Текущий адрес во фреймбуфере


void LcdSend(uint8_t data, uint8_t cmd) //Sends data to display controller
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	460a      	mov	r2, r1
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	4613      	mov	r3, r2
 8002082:	71bb      	strb	r3, [r7, #6]
  uint8_t sdata = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]

  lcd44780_RW_0;
 8002088:	2200      	movs	r2, #0
 800208a:	2102      	movs	r1, #2
 800208c:	4811      	ldr	r0, [pc, #68]	; (80020d4 <LcdSend+0x60>)
 800208e:	f002 ff3a 	bl	8004f06 <HAL_GPIO_WritePin>

  sdata = data;
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	73fb      	strb	r3, [r7, #15]
  if(cmd == lcd_CMD)
 8002096:	79bb      	ldrb	r3, [r7, #6]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <LcdSend+0x34>
  {
	  lcd44780_RS_0;
 800209c:	2201      	movs	r2, #1
 800209e:	2101      	movs	r1, #1
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <LcdSend+0x60>)
 80020a2:	f002 ff30 	bl	8004f06 <HAL_GPIO_WritePin>
 80020a6:	e004      	b.n	80020b2 <LcdSend+0x3e>
  }                             //идентефикатор кода
  else
  {
	  lcd44780_RS_1;
 80020a8:	2200      	movs	r2, #0
 80020aa:	2101      	movs	r1, #1
 80020ac:	4809      	ldr	r0, [pc, #36]	; (80020d4 <LcdSend+0x60>)
 80020ae:	f002 ff2a 	bl	8004f06 <HAL_GPIO_WritePin>
  }                             //идентефикатор данных
  send_data(sdata);
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f97d 	bl	80023b4 <send_data>

  if(cmd == lcd_CMD)while(check_busy_flag());
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <LcdSend+0x58>
 80020c0:	bf00      	nop
 80020c2:	f000 f98d 	bl	80023e0 <check_busy_flag>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1fa      	bne.n	80020c2 <LcdSend+0x4e>
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40020400 	.word	0x40020400

080020d8 <LcdUpdate>:

void LcdUpdate(void)            //Copies the LCD cache into the device RAM
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  int i = 0, j = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]

  LcdSend(HD44780_SET_CGRAM_ADD, lcd_CMD);//Позицианируем курсор на начало координат
 80020e6:	2101      	movs	r1, #1
 80020e8:	2040      	movs	r0, #64	; 0x40
 80020ea:	f7ff ffc3 	bl	8002074 <LcdSend>
  LcdSend(HD44780_SET_DDRAM_ADD, lcd_CMD);
 80020ee:	2101      	movs	r1, #1
 80020f0:	2080      	movs	r0, #128	; 0x80
 80020f2:	f7ff ffbf 	bl	8002074 <LcdSend>

  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	e017      	b.n	800212c <LcdUpdate+0x54>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 80020fc:	2300      	movs	r3, #0
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	e00e      	b.n	8002120 <LcdUpdate+0x48>
    {
      LcdSend(LcdCache[((i * LCD_X_RES) + j)], lcd_DATA);       //вычисляем адрес в фрейм буфере, и данные от туда грузим в дисплей.
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2264      	movs	r2, #100	; 0x64
 8002106:	fb03 f202 	mul.w	r2, r3, r2
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	4413      	add	r3, r2
 800210e:	4a0b      	ldr	r2, [pc, #44]	; (800213c <LcdUpdate+0x64>)
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	2102      	movs	r1, #2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ffad 	bl	8002074 <LcdSend>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b63      	cmp	r3, #99	; 0x63
 8002124:	dded      	ble.n	8002102 <LcdUpdate+0x2a>
  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3301      	adds	r3, #1
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b01      	cmp	r3, #1
 8002130:	dde4      	ble.n	80020fc <LcdUpdate+0x24>
    }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000a44 	.word	0x20000a44

08002140 <LcdClear_massive>:
  LcdUpdate();
}


void LcdClear_massive(void)     //Clears the display
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
  int i = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]

  for (i = 0; i < LCD_CACHSIZE; i++)
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	e007      	b.n	8002160 <LcdClear_massive+0x20>
    LcdCache[i] = 0;            //забиваем всю память 0
 8002150:	4a08      	ldr	r2, [pc, #32]	; (8002174 <LcdClear_massive+0x34>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < LCD_CACHSIZE; i++)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3301      	adds	r3, #1
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2bc7      	cmp	r3, #199	; 0xc7
 8002164:	ddf4      	ble.n	8002150 <LcdClear_massive+0x10>
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000a44 	.word	0x20000a44

08002178 <LcdGotoXYFont>:
  }
}


void LcdGotoXYFont(unsigned char x, unsigned char y)    //Sets cursor location to xy location. Range: 1,1 .. 14,6
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	460a      	mov	r2, r1
 8002182:	71fb      	strb	r3, [r7, #7]
 8002184:	4613      	mov	r3, r2
 8002186:	71bb      	strb	r3, [r7, #6]
  LcdCacheIdx = ((int) (y) - 1) * Cntr_X_RES + ((int) (x) - 1) * Cntr_Y_RES;
 8002188:	79bb      	ldrb	r3, [r7, #6]
 800218a:	3b01      	subs	r3, #1
 800218c:	2264      	movs	r2, #100	; 0x64
 800218e:	fb03 f202 	mul.w	r2, r3, r2
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	3b01      	subs	r3, #1
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4413      	add	r3, r2
 800219a:	461a      	mov	r2, r3
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <LcdGotoXYFont+0x34>)
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000b0c 	.word	0x20000b0c

080021b0 <clean_lcd_buf>:

void clean_lcd_buf(void)        //очистка текстового буфера
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	71fb      	strb	r3, [r7, #7]

  for (i = 0; i < 20; i++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	71fb      	strb	r3, [r7, #7]
 80021be:	e006      	b.n	80021ce <clean_lcd_buf+0x1e>
    lcd_buf[i] = 0;
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <clean_lcd_buf+0x30>)
 80021c4:	2100      	movs	r1, #0
 80021c6:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 20; i++)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	3301      	adds	r3, #1
 80021cc:	71fb      	strb	r3, [r7, #7]
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b13      	cmp	r3, #19
 80021d2:	d9f5      	bls.n	80021c0 <clean_lcd_buf+0x10>
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000a30 	.word	0x20000a30

080021e4 <LcdChr>:

void LcdChr(int ch)             //Displays a character at current cursor location and increment cursor location
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  char i = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
  if(ch > 0x7f)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b7f      	cmp	r3, #127	; 0x7f
 80021f4:	dd1a      	ble.n	800222c <LcdChr+0x48>
  {
    for (i = 0; i < 5; i++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
 80021fa:	e013      	b.n	8002224 <LcdChr+0x40>
      LcdCache[LcdCacheIdx++] = lcd_font_table_rus[(ch * 5 + (i) - 0x3C0)];     //выделяем байт-столбик из символа и грузим в массив - 5 раз
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	441a      	add	r2, r3
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	4413      	add	r3, r2
 8002208:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <LcdChr+0x98>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	1c59      	adds	r1, r3, #1
 8002212:	481a      	ldr	r0, [pc, #104]	; (800227c <LcdChr+0x98>)
 8002214:	6001      	str	r1, [r0, #0]
 8002216:	491a      	ldr	r1, [pc, #104]	; (8002280 <LcdChr+0x9c>)
 8002218:	5c89      	ldrb	r1, [r1, r2]
 800221a:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <LcdChr+0xa0>)
 800221c:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	3301      	adds	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b04      	cmp	r3, #4
 8002228:	d9e8      	bls.n	80021fc <LcdChr+0x18>
 800222a:	e019      	b.n	8002260 <LcdChr+0x7c>
  } else
  {
    for (i = 0; i < 5; i++)
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	e013      	b.n	800225a <LcdChr+0x76>
      LcdCache[LcdCacheIdx++] = lcd_font_table[(ch * 5 + (i) - 0xA0)];  //выделяем байт-столбик из символа и грузим в массив - 5 раз
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	441a      	add	r2, r3
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	4413      	add	r3, r2
 800223e:	f1a3 02a0 	sub.w	r2, r3, #160	; 0xa0
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <LcdChr+0x98>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1c59      	adds	r1, r3, #1
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <LcdChr+0x98>)
 800224a:	6001      	str	r1, [r0, #0]
 800224c:	490e      	ldr	r1, [pc, #56]	; (8002288 <LcdChr+0xa4>)
 800224e:	5c89      	ldrb	r1, [r1, r2]
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <LcdChr+0xa0>)
 8002252:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	3301      	adds	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	2b04      	cmp	r3, #4
 800225e:	d9e8      	bls.n	8002232 <LcdChr+0x4e>
  }
  LcdCache[LcdCacheIdx++] = 0x00;       //добавляем пробел между символами
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <LcdChr+0x98>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	4905      	ldr	r1, [pc, #20]	; (800227c <LcdChr+0x98>)
 8002268:	600a      	str	r2, [r1, #0]
 800226a:	4a06      	ldr	r2, [pc, #24]	; (8002284 <LcdChr+0xa0>)
 800226c:	2100      	movs	r1, #0
 800226e:	54d1      	strb	r1, [r2, r3]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000b0c 	.word	0x20000b0c
 8002280:	200001e0 	.word	0x200001e0
 8002284:	20000a44 	.word	0x20000a44
 8002288:	20000000 	.word	0x20000000

0800228c <LcdString>:
  }
  LcdCache[LcdCacheIdx++] = 0xFF;       //добавляем пробел между символами
}

void LcdString(unsigned char x, unsigned char y)        //Displays a string at current cursor location
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	460a      	mov	r2, r1
 8002296:	71fb      	strb	r3, [r7, #7]
 8002298:	4613      	mov	r3, r2
 800229a:	71bb      	strb	r3, [r7, #6]
  unsigned char i = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]

  if(x > 17 || y > 8)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	2b11      	cmp	r3, #17
 80022a4:	d81f      	bhi.n	80022e6 <LcdString+0x5a>
 80022a6:	79bb      	ldrb	r3, [r7, #6]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d81c      	bhi.n	80022e6 <LcdString+0x5a>
    return;
  LcdGotoXYFont(x, y);
 80022ac:	79ba      	ldrb	r2, [r7, #6]
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff60 	bl	8002178 <LcdGotoXYFont>
  for (i = 0; i < 17; i++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	e00d      	b.n	80022da <LcdString+0x4e>
    if(lcd_buf[i])
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <LcdString+0x64>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <LcdString+0x48>
      LcdChr(lcd_buf[i]);
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <LcdString+0x64>)
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff88 	bl	80021e4 <LcdChr>
  for (i = 0; i < 17; i++)
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	3301      	adds	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d9ee      	bls.n	80022be <LcdString+0x32>
  clean_lcd_buf();
 80022e0:	f7ff ff66 	bl	80021b0 <clean_lcd_buf>
 80022e4:	e000      	b.n	80022e8 <LcdString+0x5c>
    return;
 80022e6:	bf00      	nop
}
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000a30 	.word	0x20000a30

080022f4 <pulse_e>:
//////////////////////////////////////////////////////////////////////////////////////



void pulse_e() //импульс на вход Е индикатора
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_SET);//    PIN_ON(PIN_E);
 80022f8:	2201      	movs	r2, #1
 80022fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022fe:	4805      	ldr	r0, [pc, #20]	; (8002314 <pulse_e+0x20>)
 8002300:	f002 fe01 	bl	8004f06 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 8002304:	2200      	movs	r2, #0
 8002306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800230a:	4802      	ldr	r0, [pc, #8]	; (8002314 <pulse_e+0x20>)
 800230c:	f002 fdfb 	bl	8004f06 <HAL_GPIO_WritePin>
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40020400 	.word	0x40020400

08002318 <send_nibble>:

void send_nibble(unsigned char data) //полубайтовый вывод
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  //выводим половину байта на соответствующие контакты
  if(data & 0x01)
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <send_nibble+0x20>
	HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB4);
 800232c:	2201      	movs	r2, #1
 800232e:	2104      	movs	r1, #4
 8002330:	481f      	ldr	r0, [pc, #124]	; (80023b0 <send_nibble+0x98>)
 8002332:	f002 fde8 	bl	8004f06 <HAL_GPIO_WritePin>
 8002336:	e004      	b.n	8002342 <send_nibble+0x2a>
  else
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 8002338:	2200      	movs	r2, #0
 800233a:	2104      	movs	r1, #4
 800233c:	481c      	ldr	r0, [pc, #112]	; (80023b0 <send_nibble+0x98>)
 800233e:	f002 fde2 	bl	8004f06 <HAL_GPIO_WritePin>

  if(data & 0x02)
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <send_nibble+0x40>
		HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB5);
 800234c:	2201      	movs	r2, #1
 800234e:	2108      	movs	r1, #8
 8002350:	4817      	ldr	r0, [pc, #92]	; (80023b0 <send_nibble+0x98>)
 8002352:	f002 fdd8 	bl	8004f06 <HAL_GPIO_WritePin>
 8002356:	e004      	b.n	8002362 <send_nibble+0x4a>
	  else
	    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 8002358:	2200      	movs	r2, #0
 800235a:	2108      	movs	r1, #8
 800235c:	4814      	ldr	r0, [pc, #80]	; (80023b0 <send_nibble+0x98>)
 800235e:	f002 fdd2 	bl	8004f06 <HAL_GPIO_WritePin>

  if(data & 0x04)
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <send_nibble+0x60>
		HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB6);
 800236c:	2201      	movs	r2, #1
 800236e:	2110      	movs	r1, #16
 8002370:	480f      	ldr	r0, [pc, #60]	; (80023b0 <send_nibble+0x98>)
 8002372:	f002 fdc8 	bl	8004f06 <HAL_GPIO_WritePin>
 8002376:	e004      	b.n	8002382 <send_nibble+0x6a>
	  else
	    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 8002378:	2200      	movs	r2, #0
 800237a:	2110      	movs	r1, #16
 800237c:	480c      	ldr	r0, [pc, #48]	; (80023b0 <send_nibble+0x98>)
 800237e:	f002 fdc2 	bl	8004f06 <HAL_GPIO_WritePin>

  if(data & 0x08)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <send_nibble+0x80>
		HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB7);
 800238c:	2201      	movs	r2, #1
 800238e:	2120      	movs	r1, #32
 8002390:	4807      	ldr	r0, [pc, #28]	; (80023b0 <send_nibble+0x98>)
 8002392:	f002 fdb8 	bl	8004f06 <HAL_GPIO_WritePin>
 8002396:	e004      	b.n	80023a2 <send_nibble+0x8a>
	  else
	    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 8002398:	2200      	movs	r2, #0
 800239a:	2120      	movs	r1, #32
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <send_nibble+0x98>)
 800239e:	f002 fdb2 	bl	8004f06 <HAL_GPIO_WritePin>

  pulse_e(); //чтобы индикатор проглотил данные
 80023a2:	f7ff ffa7 	bl	80022f4 <pulse_e>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40020400 	.word	0x40020400

080023b4 <send_data>:

void send_data(unsigned char data) //вывод 2хполбайта на индикатор
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  //Первым шлем старшие полбайта: по инструкции
  //сначала столбец, потом строка таблицы знакогенератора
  send_nibble((data>>4) & 0x0F);
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ffa7 	bl	8002318 <send_nibble>
  send_nibble(data & 0x0F);
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ffa0 	bl	8002318 <send_nibble>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <check_busy_flag>:

int check_busy_flag(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	463b      	mov	r3, r7
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
	GPIO_PinState status;

	lcd44780_RW_1; // Read
 80023f4:	2201      	movs	r2, #1
 80023f6:	2102      	movs	r1, #2
 80023f8:	4822      	ldr	r0, [pc, #136]	; (8002484 <check_busy_flag+0xa4>)
 80023fa:	f002 fd84 	bl	8004f06 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 80023fe:	2320      	movs	r3, #32
 8002400:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800240a:	2302      	movs	r3, #2
 800240c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240e:	463b      	mov	r3, r7
 8002410:	4619      	mov	r1, r3
 8002412:	481c      	ldr	r0, [pc, #112]	; (8002484 <check_busy_flag+0xa4>)
 8002414:	f002 fbe0 	bl	8004bd8 <HAL_GPIO_Init>

	lcd44780_E_1;
 8002418:	2201      	movs	r2, #1
 800241a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800241e:	4819      	ldr	r0, [pc, #100]	; (8002484 <check_busy_flag+0xa4>)
 8002420:	f002 fd71 	bl	8004f06 <HAL_GPIO_WritePin>
	status=HAL_GPIO_ReadPin(Display_DB7_GPIO_Port, Display_DB7_Pin);
 8002424:	2120      	movs	r1, #32
 8002426:	4817      	ldr	r0, [pc, #92]	; (8002484 <check_busy_flag+0xa4>)
 8002428:	f002 fd56 	bl	8004ed8 <HAL_GPIO_ReadPin>
 800242c:	4603      	mov	r3, r0
 800242e:	75fb      	strb	r3, [r7, #23]
	lcd44780_E_0;
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002436:	4813      	ldr	r0, [pc, #76]	; (8002484 <check_busy_flag+0xa4>)
 8002438:	f002 fd65 	bl	8004f06 <HAL_GPIO_WritePin>
	lcd44780_E_1;
 800243c:	2201      	movs	r2, #1
 800243e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002442:	4810      	ldr	r0, [pc, #64]	; (8002484 <check_busy_flag+0xa4>)
 8002444:	f002 fd5f 	bl	8004f06 <HAL_GPIO_WritePin>
	lcd44780_E_0;
 8002448:	2200      	movs	r2, #0
 800244a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800244e:	480d      	ldr	r0, [pc, #52]	; (8002484 <check_busy_flag+0xa4>)
 8002450:	f002 fd59 	bl	8004f06 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 8002454:	2320      	movs	r3, #32
 8002456:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002458:	2311      	movs	r3, #17
 800245a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002460:	2302      	movs	r3, #2
 8002462:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	463b      	mov	r3, r7
 8002466:	4619      	mov	r1, r3
 8002468:	4806      	ldr	r0, [pc, #24]	; (8002484 <check_busy_flag+0xa4>)
 800246a:	f002 fbb5 	bl	8004bd8 <HAL_GPIO_Init>
	lcd44780_RW_0;
 800246e:	2200      	movs	r2, #0
 8002470:	2102      	movs	r1, #2
 8002472:	4804      	ldr	r0, [pc, #16]	; (8002484 <check_busy_flag+0xa4>)
 8002474:	f002 fd47 	bl	8004f06 <HAL_GPIO_WritePin>
	return status;
 8002478:	7dfb      	ldrb	r3, [r7, #23]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40020400 	.word	0x40020400

08002488 <init_LCD>:

void init_LCD() //инициализация ЖК
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_Power_GPIO_Port, Display_Power_Pin, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002492:	4847      	ldr	r0, [pc, #284]	; (80025b0 <init_LCD+0x128>)
 8002494:	f002 fd37 	bl	8004f06 <HAL_GPIO_WritePin>
  //Выводы в 0
    HAL_GPIO_WritePin(Display_RS_GPIO_Port, Display_RS_Pin, GPIO_PIN_SET);//  PIN_OFF(PIN_RS); !!!
 8002498:	2201      	movs	r2, #1
 800249a:	2101      	movs	r1, #1
 800249c:	4844      	ldr	r0, [pc, #272]	; (80025b0 <init_LCD+0x128>)
 800249e:	f002 fd32 	bl	8004f06 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 80024a2:	2200      	movs	r2, #0
 80024a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024a8:	4841      	ldr	r0, [pc, #260]	; (80025b0 <init_LCD+0x128>)
 80024aa:	f002 fd2c 	bl	8004f06 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2104      	movs	r1, #4
 80024b2:	483f      	ldr	r0, [pc, #252]	; (80025b0 <init_LCD+0x128>)
 80024b4:	f002 fd27 	bl	8004f06 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2108      	movs	r1, #8
 80024bc:	483c      	ldr	r0, [pc, #240]	; (80025b0 <init_LCD+0x128>)
 80024be:	f002 fd22 	bl	8004f06 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2110      	movs	r1, #16
 80024c6:	483a      	ldr	r0, [pc, #232]	; (80025b0 <init_LCD+0x128>)
 80024c8:	f002 fd1d 	bl	8004f06 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2120      	movs	r1, #32
 80024d0:	4837      	ldr	r0, [pc, #220]	; (80025b0 <init_LCD+0x128>)
 80024d2:	f002 fd18 	bl	8004f06 <HAL_GPIO_WritePin>

	//Ждем включения ЖКИ
    HAL_Delay(500);
 80024d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024da:	f001 feaf 	bl	800423c <HAL_Delay>
    lcd44780_RS_0;
 80024de:	2201      	movs	r2, #1
 80024e0:	2101      	movs	r1, #1
 80024e2:	4833      	ldr	r0, [pc, #204]	; (80025b0 <init_LCD+0x128>)
 80024e4:	f002 fd0f 	bl	8004f06 <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 80024e8:	2200      	movs	r2, #0
 80024ea:	2102      	movs	r1, #2
 80024ec:	4830      	ldr	r0, [pc, #192]	; (80025b0 <init_LCD+0x128>)
 80024ee:	f002 fd0a 	bl	8004f06 <HAL_GPIO_WritePin>
	send_nibble(0x02);
 80024f2:	2002      	movs	r0, #2
 80024f4:	f7ff ff10 	bl	8002318 <send_nibble>
	send_nibble(0x02);
 80024f8:	2002      	movs	r0, #2
 80024fa:	f7ff ff0d 	bl	8002318 <send_nibble>
	send_nibble(0x08);// N=1 F=0
 80024fe:	2008      	movs	r0, #8
 8002500:	f7ff ff0a 	bl	8002318 <send_nibble>

	while(check_busy_flag());
 8002504:	bf00      	nop
 8002506:	f7ff ff6b 	bl	80023e0 <check_busy_flag>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1fa      	bne.n	8002506 <init_LCD+0x7e>

	send_nibble(0x00);
 8002510:	2000      	movs	r0, #0
 8002512:	f7ff ff01 	bl	8002318 <send_nibble>
	send_nibble(0x0E);// D=1 C=1 B=0
 8002516:	200e      	movs	r0, #14
 8002518:	f7ff fefe 	bl	8002318 <send_nibble>

	while(check_busy_flag());
 800251c:	bf00      	nop
 800251e:	f7ff ff5f 	bl	80023e0 <check_busy_flag>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1fa      	bne.n	800251e <init_LCD+0x96>
	send_nibble(0x00);
 8002528:	2000      	movs	r0, #0
 800252a:	f7ff fef5 	bl	8002318 <send_nibble>
	send_nibble(0x01);
 800252e:	2001      	movs	r0, #1
 8002530:	f7ff fef2 	bl	8002318 <send_nibble>

	while(check_busy_flag());
 8002534:	bf00      	nop
 8002536:	f7ff ff53 	bl	80023e0 <check_busy_flag>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1fa      	bne.n	8002536 <init_LCD+0xae>
	send_nibble(0x00);
 8002540:	2000      	movs	r0, #0
 8002542:	f7ff fee9 	bl	8002318 <send_nibble>
	send_nibble(0x06); // I/D=1  S/H=0
 8002546:	2006      	movs	r0, #6
 8002548:	f7ff fee6 	bl	8002318 <send_nibble>
//	send_nibble(0x04); // I/D=0  S/H=0

	while(check_busy_flag());
 800254c:	bf00      	nop
 800254e:	f7ff ff47 	bl	80023e0 <check_busy_flag>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1fa      	bne.n	800254e <init_LCD+0xc6>

    lcd44780_RS_0;
 8002558:	2201      	movs	r2, #1
 800255a:	2101      	movs	r1, #1
 800255c:	4814      	ldr	r0, [pc, #80]	; (80025b0 <init_LCD+0x128>)
 800255e:	f002 fcd2 	bl	8004f06 <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 8002562:	2200      	movs	r2, #0
 8002564:	2102      	movs	r1, #2
 8002566:	4812      	ldr	r0, [pc, #72]	; (80025b0 <init_LCD+0x128>)
 8002568:	f002 fccd 	bl	8004f06 <HAL_GPIO_WritePin>
	send_nibble(0x02); // DL=0
 800256c:	2002      	movs	r0, #2
 800256e:	f7ff fed3 	bl	8002318 <send_nibble>
	send_nibble(0x0A);// N=1 F=0 FT1=1 FT0=0
 8002572:	200a      	movs	r0, #10
 8002574:	f7ff fed0 	bl	8002318 <send_nibble>
	while(check_busy_flag());
 8002578:	bf00      	nop
 800257a:	f7ff ff31 	bl	80023e0 <check_busy_flag>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1fa      	bne.n	800257a <init_LCD+0xf2>


    send_data(0x1F); //переключение в графику
 8002584:	201f      	movs	r0, #31
 8002586:	f7ff ff15 	bl	80023b4 <send_data>
    while(check_busy_flag());
 800258a:	bf00      	nop
 800258c:	f7ff ff28 	bl	80023e0 <check_busy_flag>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1fa      	bne.n	800258c <init_LCD+0x104>

    send_data(0x01); //очистили от мусора ОЗУ (т.с. что clear())
 8002596:	2001      	movs	r0, #1
 8002598:	f7ff ff0c 	bl	80023b4 <send_data>
    while(check_busy_flag());
 800259c:	bf00      	nop
 800259e:	f7ff ff1f 	bl	80023e0 <check_busy_flag>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1fa      	bne.n	800259e <init_LCD+0x116>

    LcdClear_massive();
 80025a8:	f7ff fdca 	bl	8002140 <LcdClear_massive>

}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40020400 	.word	0x40020400

080025b4 <LcdBarLine>:
while(check_busy_flag());

}

void LcdBarLine(uint32_t fill)    // рисуем прогресс-бар в второй строке
{
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	uint16_t i, full_fill_position;
	float y;

	if(fill>0xFFFFF)return;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c2:	f080 808f 	bcs.w	80026e4 <LcdBarLine+0x130>

	// поиск свободного места в массиве кеша дисплея
//	for (i = LCD_CACHSIZE-1; i > LCD_X_RES; i--) // поиск свободного места в массиве кеша дисплея, в указанной строке
//		if(LcdCache[i]==0x00)
//			found_free_position=i;
	y=LCD_X_RES;
 80025c6:	4b49      	ldr	r3, [pc, #292]	; (80026ec <LcdBarLine+0x138>)
 80025c8:	613b      	str	r3, [r7, #16]
	y*=8; //сколько всего диступно места
 80025ca:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80025ce:	6938      	ldr	r0, [r7, #16]
 80025d0:	f7fe fbfa 	bl	8000dc8 <__aeabi_fmul>
 80025d4:	4603      	mov	r3, r0
 80025d6:	613b      	str	r3, [r7, #16]
	y/=(float)0xFFFFF;
 80025d8:	4945      	ldr	r1, [pc, #276]	; (80026f0 <LcdBarLine+0x13c>)
 80025da:	6938      	ldr	r0, [r7, #16]
 80025dc:	f7fe fca8 	bl	8000f30 <__aeabi_fdiv>
 80025e0:	4603      	mov	r3, r0
 80025e2:	613b      	str	r3, [r7, #16]
	y*=(float)fill;// получаем коэфицент заполнения прогрессбара
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7fe fb97 	bl	8000d18 <__aeabi_ui2f>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4619      	mov	r1, r3
 80025ee:	6938      	ldr	r0, [r7, #16]
 80025f0:	f7fe fbea 	bl	8000dc8 <__aeabi_fmul>
 80025f4:	4603      	mov	r3, r0
 80025f6:	613b      	str	r3, [r7, #16]
	full_fill_position=floor(y/8);
 80025f8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80025fc:	6938      	ldr	r0, [r7, #16]
 80025fe:	f7fe fc97 	bl	8000f30 <__aeabi_fdiv>
 8002602:	4603      	mov	r3, r0
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd ff31 	bl	800046c <__aeabi_f2d>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f00b fc05 	bl	800de20 <floor>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	f7fe fa55 	bl	8000acc <__aeabi_d2uiz>
 8002622:	4603      	mov	r3, r0
 8002624:	81fb      	strh	r3, [r7, #14]
	//need_to_be_filled=(LCD_CACHSIZE-1-found_free_position)*8 - ;
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 8002626:	2364      	movs	r3, #100	; 0x64
 8002628:	82fb      	strh	r3, [r7, #22]
 800262a:	e057      	b.n	80026dc <LcdBarLine+0x128>
		if(y!=0)
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	6938      	ldr	r0, [r7, #16]
 8002632:	f7fe fd5d 	bl	80010f0 <__aeabi_fcmpeq>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d14c      	bne.n	80026d6 <LcdBarLine+0x122>
		{
			if(full_fill_position>(i-LCD_X_RES))
 800263c:	8afb      	ldrh	r3, [r7, #22]
 800263e:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8002642:	89fb      	ldrh	r3, [r7, #14]
 8002644:	429a      	cmp	r2, r3
 8002646:	dc08      	bgt.n	800265a <LcdBarLine+0xa6>
			{
				LcdCache[i]=LcdCache[i]^0xFF;
 8002648:	8afb      	ldrh	r3, [r7, #22]
 800264a:	4a2a      	ldr	r2, [pc, #168]	; (80026f4 <LcdBarLine+0x140>)
 800264c:	5cd2      	ldrb	r2, [r2, r3]
 800264e:	8afb      	ldrh	r3, [r7, #22]
 8002650:	43d2      	mvns	r2, r2
 8002652:	b2d1      	uxtb	r1, r2
 8002654:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <LcdBarLine+0x140>)
 8002656:	54d1      	strb	r1, [r2, r3]
 8002658:	e03d      	b.n	80026d6 <LcdBarLine+0x122>
			} else
			{
				y-=floor(y/8)*8;
 800265a:	6938      	ldr	r0, [r7, #16]
 800265c:	f7fd ff06 	bl	800046c <__aeabi_f2d>
 8002660:	4604      	mov	r4, r0
 8002662:	460d      	mov	r5, r1
 8002664:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002668:	6938      	ldr	r0, [r7, #16]
 800266a:	f7fe fc61 	bl	8000f30 <__aeabi_fdiv>
 800266e:	4603      	mov	r3, r0
 8002670:	4618      	mov	r0, r3
 8002672:	f7fd fefb 	bl	800046c <__aeabi_f2d>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f00b fbcf 	bl	800de20 <floor>
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <LcdBarLine+0x144>)
 8002688:	f7fd ff48 	bl	800051c <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4620      	mov	r0, r4
 8002692:	4629      	mov	r1, r5
 8002694:	f7fd fd8a 	bl	80001ac <__aeabi_dsub>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f7fe fa34 	bl	8000b0c <__aeabi_d2f>
 80026a4:	4603      	mov	r3, r0
 80026a6:	613b      	str	r3, [r7, #16]
				LcdCache[i]=LcdCache[i]^((1<<(uint16_t)y)-1);
 80026a8:	8afb      	ldrh	r3, [r7, #22]
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <LcdBarLine+0x140>)
 80026ac:	5cd3      	ldrb	r3, [r2, r3]
 80026ae:	b25c      	sxtb	r4, r3
 80026b0:	6938      	ldr	r0, [r7, #16]
 80026b2:	f7fe fd4f 	bl	8001154 <__aeabi_f2uiz>
 80026b6:	4603      	mov	r3, r0
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	2301      	movs	r3, #1
 80026be:	4093      	lsls	r3, r2
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	4063      	eors	r3, r4
 80026ca:	b25a      	sxtb	r2, r3
 80026cc:	8afb      	ldrh	r3, [r7, #22]
 80026ce:	b2d1      	uxtb	r1, r2
 80026d0:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <LcdBarLine+0x140>)
 80026d2:	54d1      	strb	r1, [r2, r3]
				break;
 80026d4:	e007      	b.n	80026e6 <LcdBarLine+0x132>
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 80026d6:	8afb      	ldrh	r3, [r7, #22]
 80026d8:	3301      	adds	r3, #1
 80026da:	82fb      	strh	r3, [r7, #22]
 80026dc:	8afb      	ldrh	r3, [r7, #22]
 80026de:	2bc7      	cmp	r3, #199	; 0xc7
 80026e0:	d9a4      	bls.n	800262c <LcdBarLine+0x78>
 80026e2:	e000      	b.n	80026e6 <LcdBarLine+0x132>
	if(fill>0xFFFFF)return;
 80026e4:	bf00      	nop
			}
		}
	}

}
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bdb0      	pop	{r4, r5, r7, pc}
 80026ec:	42c80000 	.word	0x42c80000
 80026f0:	497ffff0 	.word	0x497ffff0
 80026f4:	20000a44 	.word	0x20000a44
 80026f8:	40200000 	.word	0x40200000

080026fc <send_answer_to_CDC>:




void send_answer_to_CDC(uint8_t type)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
	uint8_t cdc_counter=0;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]

	switch(type)
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	2b0d      	cmp	r3, #13
 800270e:	f200 80b1 	bhi.w	8002874 <send_answer_to_CDC+0x178>
 8002712:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <send_answer_to_CDC+0x1c>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	08002757 	.word	0x08002757
 800271c:	0800277d 	.word	0x0800277d
 8002720:	080027a3 	.word	0x080027a3
 8002724:	080027c9 	.word	0x080027c9
 8002728:	080027ef 	.word	0x080027ef
 800272c:	08002815 	.word	0x08002815
 8002730:	08002875 	.word	0x08002875
 8002734:	08002875 	.word	0x08002875
 8002738:	08002875 	.word	0x08002875
 800273c:	08002875 	.word	0x08002875
 8002740:	08002875 	.word	0x08002875
 8002744:	08002875 	.word	0x08002875
 8002748:	08002875 	.word	0x08002875
 800274c:	0800283b 	.word	0x0800283b
	{
	case ERROR_TYPE_1:
		while((CDC_Transmit_FS(Error1, strlen((const char *)Error1))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	3301      	adds	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	4849      	ldr	r0, [pc, #292]	; (800287c <send_answer_to_CDC+0x180>)
 8002758:	f7fd fd1c 	bl	8000194 <strlen>
 800275c:	4603      	mov	r3, r0
 800275e:	b29b      	uxth	r3, r3
 8002760:	4619      	mov	r1, r3
 8002762:	4846      	ldr	r0, [pc, #280]	; (800287c <send_answer_to_CDC+0x180>)
 8002764:	f00a ff6a 	bl	800d63c <CDC_Transmit_FS>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d075      	beq.n	800285a <send_answer_to_CDC+0x15e>
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2bff      	cmp	r3, #255	; 0xff
 8002772:	d1ed      	bne.n	8002750 <send_answer_to_CDC+0x54>
		break;
 8002774:	e071      	b.n	800285a <send_answer_to_CDC+0x15e>
	case ERROR_TYPE_2:
		while((CDC_Transmit_FS(Error2, strlen((const char *)Error2))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3301      	adds	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	4840      	ldr	r0, [pc, #256]	; (8002880 <send_answer_to_CDC+0x184>)
 800277e:	f7fd fd09 	bl	8000194 <strlen>
 8002782:	4603      	mov	r3, r0
 8002784:	b29b      	uxth	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	483d      	ldr	r0, [pc, #244]	; (8002880 <send_answer_to_CDC+0x184>)
 800278a:	f00a ff57 	bl	800d63c <CDC_Transmit_FS>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d064      	beq.n	800285e <send_answer_to_CDC+0x162>
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2bff      	cmp	r3, #255	; 0xff
 8002798:	d1ed      	bne.n	8002776 <send_answer_to_CDC+0x7a>
		break;
 800279a:	e060      	b.n	800285e <send_answer_to_CDC+0x162>
	case OK_TYPE_1:
		while((CDC_Transmit_FS(OK, strlen((const char *)OK))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	3301      	adds	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	4838      	ldr	r0, [pc, #224]	; (8002884 <send_answer_to_CDC+0x188>)
 80027a4:	f7fd fcf6 	bl	8000194 <strlen>
 80027a8:	4603      	mov	r3, r0
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4619      	mov	r1, r3
 80027ae:	4835      	ldr	r0, [pc, #212]	; (8002884 <send_answer_to_CDC+0x188>)
 80027b0:	f00a ff44 	bl	800d63c <CDC_Transmit_FS>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d053      	beq.n	8002862 <send_answer_to_CDC+0x166>
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2bff      	cmp	r3, #255	; 0xff
 80027be:	d1ed      	bne.n	800279c <send_answer_to_CDC+0xa0>
		break;
 80027c0:	e04f      	b.n	8002862 <send_answer_to_CDC+0x166>
	case OK_TYPE_2:
		while((CDC_Transmit_FS(OK_Enter, strlen((const char *)OK_Enter))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	3301      	adds	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	482f      	ldr	r0, [pc, #188]	; (8002888 <send_answer_to_CDC+0x18c>)
 80027ca:	f7fd fce3 	bl	8000194 <strlen>
 80027ce:	4603      	mov	r3, r0
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	4619      	mov	r1, r3
 80027d4:	482c      	ldr	r0, [pc, #176]	; (8002888 <send_answer_to_CDC+0x18c>)
 80027d6:	f00a ff31 	bl	800d63c <CDC_Transmit_FS>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d042      	beq.n	8002866 <send_answer_to_CDC+0x16a>
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	2bff      	cmp	r3, #255	; 0xff
 80027e4:	d1ed      	bne.n	80027c2 <send_answer_to_CDC+0xc6>
		break;
 80027e6:	e03e      	b.n	8002866 <send_answer_to_CDC+0x16a>
	case CLEAR_TYPE_1:
		while((CDC_Transmit_FS(clear, strlen((const char *)clear))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	3301      	adds	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	4827      	ldr	r0, [pc, #156]	; (800288c <send_answer_to_CDC+0x190>)
 80027f0:	f7fd fcd0 	bl	8000194 <strlen>
 80027f4:	4603      	mov	r3, r0
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4619      	mov	r1, r3
 80027fa:	4824      	ldr	r0, [pc, #144]	; (800288c <send_answer_to_CDC+0x190>)
 80027fc:	f00a ff1e 	bl	800d63c <CDC_Transmit_FS>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d031      	beq.n	800286a <send_answer_to_CDC+0x16e>
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2bff      	cmp	r3, #255	; 0xff
 800280a:	d1ed      	bne.n	80027e8 <send_answer_to_CDC+0xec>
		break;
 800280c:	e02d      	b.n	800286a <send_answer_to_CDC+0x16e>
	case DONE_TYPE_1:
		while((CDC_Transmit_FS(Done, strlen((const char *)Done))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	3301      	adds	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	481e      	ldr	r0, [pc, #120]	; (8002890 <send_answer_to_CDC+0x194>)
 8002816:	f7fd fcbd 	bl	8000194 <strlen>
 800281a:	4603      	mov	r3, r0
 800281c:	b29b      	uxth	r3, r3
 800281e:	4619      	mov	r1, r3
 8002820:	481b      	ldr	r0, [pc, #108]	; (8002890 <send_answer_to_CDC+0x194>)
 8002822:	f00a ff0b 	bl	800d63c <CDC_Transmit_FS>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <send_answer_to_CDC+0x172>
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2bff      	cmp	r3, #255	; 0xff
 8002830:	d1ed      	bne.n	800280e <send_answer_to_CDC+0x112>
		break;
 8002832:	e01c      	b.n	800286e <send_answer_to_CDC+0x172>
	case RUN_CAL_TYPE_TEMP:
		while((CDC_Transmit_FS(run_cal, strlen((const char *)run_cal))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	3301      	adds	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	4816      	ldr	r0, [pc, #88]	; (8002894 <send_answer_to_CDC+0x198>)
 800283c:	f7fd fcaa 	bl	8000194 <strlen>
 8002840:	4603      	mov	r3, r0
 8002842:	b29b      	uxth	r3, r3
 8002844:	4619      	mov	r1, r3
 8002846:	4813      	ldr	r0, [pc, #76]	; (8002894 <send_answer_to_CDC+0x198>)
 8002848:	f00a fef8 	bl	800d63c <CDC_Transmit_FS>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00f      	beq.n	8002872 <send_answer_to_CDC+0x176>
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2bff      	cmp	r3, #255	; 0xff
 8002856:	d1ed      	bne.n	8002834 <send_answer_to_CDC+0x138>
		break;
 8002858:	e00b      	b.n	8002872 <send_answer_to_CDC+0x176>
		break;
 800285a:	bf00      	nop
 800285c:	e00a      	b.n	8002874 <send_answer_to_CDC+0x178>
		break;
 800285e:	bf00      	nop
 8002860:	e008      	b.n	8002874 <send_answer_to_CDC+0x178>
		break;
 8002862:	bf00      	nop
 8002864:	e006      	b.n	8002874 <send_answer_to_CDC+0x178>
		break;
 8002866:	bf00      	nop
 8002868:	e004      	b.n	8002874 <send_answer_to_CDC+0x178>
		break;
 800286a:	bf00      	nop
 800286c:	e002      	b.n	8002874 <send_answer_to_CDC+0x178>
		break;
 800286e:	bf00      	nop
 8002870:	e000      	b.n	8002874 <send_answer_to_CDC+0x178>
		break;
 8002872:	bf00      	nop
	}
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	2000034c 	.word	0x2000034c
 8002880:	20000658 	.word	0x20000658
 8002884:	20000320 	.word	0x20000320
 8002888:	20000640 	.word	0x20000640
 800288c:	20000344 	.word	0x20000344
 8002890:	20000684 	.word	0x20000684
 8002894:	20000328 	.word	0x20000328

08002898 <cmd_SWEEP_START>:
void cmd_SWEEP_START()
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	DAC_TEMP_CAL();
 800289c:	f7ff f8e6 	bl	8001a6c <DAC_TEMP_CAL>
	CPLD_control(CPLD_WORD); // Enable LDAC signal
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <cmd_SWEEP_START+0x1c>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe ffab 	bl	8001800 <CPLD_control>
	DAC_SendInit();
 80028aa:	f7ff f857 	bl	800195c <DAC_SendInit>
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200006a8 	.word	0x200006a8

080028b8 <cmd_SWEEP_STOP>:

/////////////////////////////////////////////////////////
void cmd_SWEEP_STOP()
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	CPLD_control(0x0); // Disable LDAC signal
 80028bc:	2000      	movs	r0, #0
 80028be:	f7fe ff9f 	bl	8001800 <CPLD_control>
	DAC_SendInit();
 80028c2:	f7ff f84b 	bl	800195c <DAC_SendInit>
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <cmd_DAC_SET>:

/////////////////////////////////////////////////////////
void cmd_DAC_SET(uint32_t code)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	if (code>0xFFFFF)return;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028da:	d21a      	bcs.n	8002912 <cmd_DAC_SET+0x46>

	switch(code)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d004      	beq.n	80028ec <cmd_DAC_SET+0x20>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <cmd_DAC_SET+0x50>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <cmd_DAC_SET+0x28>
 80028ea:	e007      	b.n	80028fc <cmd_DAC_SET+0x30>
	{
	case DAC_CODE_DOWN:
		DAC_code_direction=1;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <cmd_DAC_SET+0x54>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
		break;
 80028f2:	e003      	b.n	80028fc <cmd_DAC_SET+0x30>
	case DAC_CODE_TOP:
		DAC_code_direction=0;
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <cmd_DAC_SET+0x54>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
		break;
 80028fa:	bf00      	nop
	}

	CPLD_control(0x0); // Disable LDAC signal
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7fe ff7f 	bl	8001800 <CPLD_control>
	DAC_SendInit();
 8002902:	f7ff f82b 	bl	800195c <DAC_SendInit>
	DAC_TEMP_CAL();
 8002906:	f7ff f8b1 	bl	8001a6c <DAC_TEMP_CAL>
	DAC_Write(code);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe ffcc 	bl	80018a8 <DAC_Write>
 8002910:	e000      	b.n	8002914 <cmd_DAC_SET+0x48>
	if (code>0xFFFFF)return;
 8002912:	bf00      	nop
}
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	000fffff 	.word	0x000fffff
 8002920:	20000bdc 	.word	0x20000bdc
 8002924:	00000000 	.word	0x00000000

08002928 <cmd_CAL>:


/////////////////////////////////////////////////////////
FunctionalState cmd_CAL(uint8_t cmd, float coeff)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
	float tmpx;

	tmpx=coeff;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	3b06      	subs	r3, #6
 800293c:	2b05      	cmp	r3, #5
 800293e:	f200 80bf 	bhi.w	8002ac0 <cmd_CAL+0x198>
 8002942:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <cmd_CAL+0x20>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	08002961 	.word	0x08002961
 800294c:	08002973 	.word	0x08002973
 8002950:	08002985 	.word	0x08002985
 8002954:	08002997 	.word	0x08002997
 8002958:	080029a9 	.word	0x080029a9
 800295c:	08002a35 	.word	0x08002a35
	{
	case DAC_CAL_TEMP:
		DAC_Write(DAC_CODE_MIDDLE);
 8002960:	486b      	ldr	r0, [pc, #428]	; (8002b10 <cmd_CAL+0x1e8>)
 8002962:	f7fe ffa1 	bl	80018a8 <DAC_Write>
		DAC_TEMP_CAL();
 8002966:	f7ff f881 	bl	8001a6c <DAC_TEMP_CAL>
		DAC_Write(DAC_CODE_MIDDLE);
 800296a:	4869      	ldr	r0, [pc, #420]	; (8002b10 <cmd_CAL+0x1e8>)
 800296c:	f7fe ff9c 	bl	80018a8 <DAC_Write>
		break;
 8002970:	e0a6      	b.n	8002ac0 <cmd_CAL+0x198>
	case DAC_CAL_POLY_A:
		EEPROM_write(corr_coeff_1_EEPROM_ADDRESS,float_to_binary(tmpx));
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f935 	bl	8002be2 <float_to_binary>
 8002978:	4603      	mov	r3, r0
 800297a:	4619      	mov	r1, r3
 800297c:	2010      	movs	r0, #16
 800297e:	f000 f96f 	bl	8002c60 <EEPROM_write>
		break;
 8002982:	e09d      	b.n	8002ac0 <cmd_CAL+0x198>
	case DAC_CAL_POLY_B:
		EEPROM_write(corr_coeff_2_EEPROM_ADDRESS,float_to_binary(tmpx));
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f92c 	bl	8002be2 <float_to_binary>
 800298a:	4603      	mov	r3, r0
 800298c:	4619      	mov	r1, r3
 800298e:	2018      	movs	r0, #24
 8002990:	f000 f966 	bl	8002c60 <EEPROM_write>
		break;
 8002994:	e094      	b.n	8002ac0 <cmd_CAL+0x198>
	case DAC_CAL_POLY_C:
		EEPROM_write(corr_coeff_3_EEPROM_ADDRESS,float_to_binary(tmpx));
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f923 	bl	8002be2 <float_to_binary>
 800299c:	4603      	mov	r3, r0
 800299e:	4619      	mov	r1, r3
 80029a0:	2020      	movs	r0, #32
 80029a2:	f000 f95d 	bl	8002c60 <EEPROM_write>
		break;
 80029a6:	e08b      	b.n	8002ac0 <cmd_CAL+0x198>
	case DAC_CAL_TOP:
		if((tmpx<10.1 && tmpx>9.9) || (tmpx>6.8 && tmpx<7.1))
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7fd fd5f 	bl	800046c <__aeabi_f2d>
 80029ae:	a348      	add	r3, pc, #288	; (adr r3, 8002ad0 <cmd_CAL+0x1a8>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fe f824 	bl	8000a00 <__aeabi_dcmplt>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <cmd_CAL+0xac>
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7fd fd54 	bl	800046c <__aeabi_f2d>
 80029c4:	a344      	add	r3, pc, #272	; (adr r3, 8002ad8 <cmd_CAL+0x1b0>)
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	f7fe f837 	bl	8000a3c <__aeabi_dcmpgt>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d115      	bne.n	8002a00 <cmd_CAL+0xd8>
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f7fd fd49 	bl	800046c <__aeabi_f2d>
 80029da:	a341      	add	r3, pc, #260	; (adr r3, 8002ae0 <cmd_CAL+0x1b8>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fe f82c 	bl	8000a3c <__aeabi_dcmpgt>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d022      	beq.n	8002a30 <cmd_CAL+0x108>
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7fd fd3e 	bl	800046c <__aeabi_f2d>
 80029f0:	a33d      	add	r3, pc, #244	; (adr r3, 8002ae8 <cmd_CAL+0x1c0>)
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	f7fe f803 	bl	8000a00 <__aeabi_dcmplt>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d017      	beq.n	8002a30 <cmd_CAL+0x108>
		{
			cal_DAC_up_voltage=tmpx;
 8002a00:	4a44      	ldr	r2, [pc, #272]	; (8002b14 <cmd_CAL+0x1ec>)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6013      	str	r3, [r2, #0]
			EEPROM_write(cal_DAC_up_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f8eb 	bl	8002be2 <float_to_binary>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2000      	movs	r0, #0
 8002a12:	f000 f925 	bl	8002c60 <EEPROM_write>
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <cmd_CAL+0x1ec>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a3f      	ldr	r2, [pc, #252]	; (8002b18 <cmd_CAL+0x1f0>)
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe f8c7 	bl	8000bb4 <__aeabi_fsub>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b3c      	ldr	r3, [pc, #240]	; (8002b1c <cmd_CAL+0x1f4>)
 8002a2c:	601a      	str	r2, [r3, #0]
		}
		else return 0;
		break;
 8002a2e:	e047      	b.n	8002ac0 <cmd_CAL+0x198>
		else return 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e046      	b.n	8002ac2 <cmd_CAL+0x19a>
	case DAC_CAL_DOWN:
		if((tmpx>-10.1 && tmpx<-9.9) || (tmpx<-6.8 && tmpx>-7.1))
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7fd fd19 	bl	800046c <__aeabi_f2d>
 8002a3a:	a32d      	add	r3, pc, #180	; (adr r3, 8002af0 <cmd_CAL+0x1c8>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd fffc 	bl	8000a3c <__aeabi_dcmpgt>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <cmd_CAL+0x138>
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7fd fd0e 	bl	800046c <__aeabi_f2d>
 8002a50:	a329      	add	r3, pc, #164	; (adr r3, 8002af8 <cmd_CAL+0x1d0>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fd ffd3 	bl	8000a00 <__aeabi_dcmplt>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d115      	bne.n	8002a8c <cmd_CAL+0x164>
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7fd fd03 	bl	800046c <__aeabi_f2d>
 8002a66:	a326      	add	r3, pc, #152	; (adr r3, 8002b00 <cmd_CAL+0x1d8>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f7fd ffc8 	bl	8000a00 <__aeabi_dcmplt>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d022      	beq.n	8002abc <cmd_CAL+0x194>
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7fd fcf8 	bl	800046c <__aeabi_f2d>
 8002a7c:	a322      	add	r3, pc, #136	; (adr r3, 8002b08 <cmd_CAL+0x1e0>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd ffdb 	bl	8000a3c <__aeabi_dcmpgt>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d017      	beq.n	8002abc <cmd_CAL+0x194>
		{
			cal_DAC_down_voltage=tmpx;
 8002a8c:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <cmd_CAL+0x1f0>)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6013      	str	r3, [r2, #0]
			EEPROM_write(cal_DAC_down_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f8a5 	bl	8002be2 <float_to_binary>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	2008      	movs	r0, #8
 8002a9e:	f000 f8df 	bl	8002c60 <EEPROM_write>
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <cmd_CAL+0x1ec>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <cmd_CAL+0x1f0>)
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe f881 	bl	8000bb4 <__aeabi_fsub>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <cmd_CAL+0x1f4>)
 8002ab8:	601a      	str	r2, [r3, #0]
		}
		else return 0;
		break;
 8002aba:	e001      	b.n	8002ac0 <cmd_CAL+0x198>
		else return 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e000      	b.n	8002ac2 <cmd_CAL+0x19a>
	}
	return 1;
 8002ac0:	2301      	movs	r3, #1

}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	f3af 8000 	nop.w
 8002ad0:	33333333 	.word	0x33333333
 8002ad4:	40243333 	.word	0x40243333
 8002ad8:	cccccccd 	.word	0xcccccccd
 8002adc:	4023cccc 	.word	0x4023cccc
 8002ae0:	33333333 	.word	0x33333333
 8002ae4:	401b3333 	.word	0x401b3333
 8002ae8:	66666666 	.word	0x66666666
 8002aec:	401c6666 	.word	0x401c6666
 8002af0:	33333333 	.word	0x33333333
 8002af4:	c0243333 	.word	0xc0243333
 8002af8:	cccccccd 	.word	0xcccccccd
 8002afc:	c023cccc 	.word	0xc023cccc
 8002b00:	33333333 	.word	0x33333333
 8002b04:	c01b3333 	.word	0xc01b3333
 8002b08:	66666666 	.word	0x66666666
 8002b0c:	c01c6666 	.word	0xc01c6666
 8002b10:	0007ffff 	.word	0x0007ffff
 8002b14:	20000bd0 	.word	0x20000bd0
 8002b18:	20000bd4 	.word	0x20000bd4
 8002b1c:	20000bcc 	.word	0x20000bcc

08002b20 <load_data_from_EEPROM>:
/////////////////////////////////////////////////////////
void load_data_from_EEPROM(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
	cal_DAC_up_voltage=binary_to_float(EEPROM_read(cal_DAC_up_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 8002b24:	2000      	movs	r0, #0
 8002b26:	f000 f881 	bl	8002c2c <EEPROM_read>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f845 	bl	8002bbc <binary_to_float>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <load_data_from_EEPROM+0x84>)
 8002b36:	6013      	str	r3, [r2, #0]
	cal_DAC_down_voltage=binary_to_float(EEPROM_read(cal_DAC_down_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 8002b38:	2008      	movs	r0, #8
 8002b3a:	f000 f877 	bl	8002c2c <EEPROM_read>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f83b 	bl	8002bbc <binary_to_float>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <load_data_from_EEPROM+0x88>)
 8002b4a:	6013      	str	r3, [r2, #0]
	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002b4c:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <load_data_from_EEPROM+0x84>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <load_data_from_EEPROM+0x88>)
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe f82c 	bl	8000bb4 <__aeabi_fsub>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <load_data_from_EEPROM+0x8c>)
 8002b62:	601a      	str	r2, [r3, #0]

	corr_coeff_1=binary_to_float(EEPROM_read(corr_coeff_1_EEPROM_ADDRESS));
 8002b64:	2010      	movs	r0, #16
 8002b66:	f000 f861 	bl	8002c2c <EEPROM_read>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f825 	bl	8002bbc <binary_to_float>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <load_data_from_EEPROM+0x90>)
 8002b76:	6013      	str	r3, [r2, #0]
	corr_coeff_2=binary_to_float(EEPROM_read(corr_coeff_2_EEPROM_ADDRESS));
 8002b78:	2018      	movs	r0, #24
 8002b7a:	f000 f857 	bl	8002c2c <EEPROM_read>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 f81b 	bl	8002bbc <binary_to_float>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <load_data_from_EEPROM+0x94>)
 8002b8a:	6013      	str	r3, [r2, #0]
	corr_coeff_3=binary_to_float(EEPROM_read(corr_coeff_3_EEPROM_ADDRESS));
 8002b8c:	2020      	movs	r0, #32
 8002b8e:	f000 f84d 	bl	8002c2c <EEPROM_read>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f811 	bl	8002bbc <binary_to_float>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <load_data_from_EEPROM+0x98>)
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000bd0 	.word	0x20000bd0
 8002ba8:	20000bd4 	.word	0x20000bd4
 8002bac:	20000bcc 	.word	0x20000bcc
 8002bb0:	20000a24 	.word	0x20000a24
 8002bb4:	20000a28 	.word	0x20000a28
 8002bb8:	20000a2c 	.word	0x20000a2c

08002bbc <binary_to_float>:
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC push_options
#pragma GCC optimize ("O0")

float binary_to_float(uint32_t a)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	    int * p;
	    float out=0;
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]

	    p = &out;
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	60fb      	str	r3, [r7, #12]
	    (*p)=a;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	601a      	str	r2, [r3, #0]
	    return out;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <float_to_binary>:


uint32_t float_to_binary(float a)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b087      	sub	sp, #28
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
	    int i;
	    int * p;
	    uint32_t out=0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]

	    p = &a;
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 8002bf2:	231f      	movs	r3, #31
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e010      	b.n	8002c1a <float_to_binary+0x38>
	    {
	    	out+=((*p) >> i & 1)<<i;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa42 f303 	asr.w	r3, r2, r3
 8002c02:	f003 0201 	and.w	r2, r3, #1
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	daeb      	bge.n	8002bf8 <float_to_binary+0x16>
	    }

	    return out;
 8002c20:	693b      	ldr	r3, [r7, #16]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <EEPROM_read>:
//==============================================================================================


//==============================================================================================
uint32_t EEPROM_read(uint32_t address_of_read)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	uint32_t Address;

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002c3a:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002c3e:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4a06      	ldr	r2, [pc, #24]	; (8002c5c <EEPROM_read+0x30>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d301      	bcc.n	8002c4c <EEPROM_read+0x20>
	{
		return 0x00;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e001      	b.n	8002c50 <EEPROM_read+0x24>
	}
	return *(__IO uint32_t *) Address;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	08082800 	.word	0x08082800

08002c60 <EEPROM_write>:
//==============================================================================================
void EEPROM_write(uint32_t address_of_read, uint32_t data)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
	/* Clear all pending flags */
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR | FLASH_FLAG_OPTVERRUSR);

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
	     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002c70:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002c74:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <EEPROM_write+0x50>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d212      	bcs.n	8002ca4 <EEPROM_write+0x44>
	{
		return;
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 8002c7e:	f001 fcf3 	bl	8004668 <HAL_FLASHEx_DATAEEPROM_Unlock>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	68f9      	ldr	r1, [r7, #12]
 8002c86:	2002      	movs	r0, #2
 8002c88:	f001 fd4c 	bl	8004724 <HAL_FLASHEx_DATAEEPROM_Program>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	72fb      	strb	r3, [r7, #11]
	HAL_FLASHEx_DATAEEPROM_Lock();
 8002c90:	f001 fd06 	bl	80046a0 <HAL_FLASHEx_DATAEEPROM_Lock>

	if(FLASHStatus != HAL_OK)
 8002c94:	7afb      	ldrb	r3, [r7, #11]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <EEPROM_write+0x48>
	{
		return;
	}
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR);

	if(*(__IO uint32_t *) Address != data)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	e002      	b.n	8002caa <EEPROM_write+0x4a>
		return;
 8002ca4:	bf00      	nop
 8002ca6:	e000      	b.n	8002caa <EEPROM_write+0x4a>
		return;
 8002ca8:	bf00      	nop
	{
		return;
	}

}
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	08082800 	.word	0x08082800

08002cb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cba:	f107 0314 	add.w	r3, r7, #20
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]
 8002cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cca:	4b7c      	ldr	r3, [pc, #496]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	4a7b      	ldr	r2, [pc, #492]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	61d3      	str	r3, [r2, #28]
 8002cd6:	4b79      	ldr	r3, [pc, #484]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ce2:	4b76      	ldr	r3, [pc, #472]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a75      	ldr	r2, [pc, #468]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002ce8:	f043 0320 	orr.w	r3, r3, #32
 8002cec:	61d3      	str	r3, [r2, #28]
 8002cee:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	4b70      	ldr	r3, [pc, #448]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4a6f      	ldr	r2, [pc, #444]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	61d3      	str	r3, [r2, #28]
 8002d06:	4b6d      	ldr	r3, [pc, #436]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d12:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4a69      	ldr	r2, [pc, #420]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	61d3      	str	r3, [r2, #28]
 8002d1e:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <MX_GPIO_Init+0x208>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d30:	4863      	ldr	r0, [pc, #396]	; (8002ec0 <MX_GPIO_Init+0x20c>)
 8002d32:	f002 f8e8 	bl	8004f06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, GPIO_PIN_SET);
 8002d36:	2201      	movs	r2, #1
 8002d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d3c:	4860      	ldr	r0, [pc, #384]	; (8002ec0 <MX_GPIO_Init+0x20c>)
 8002d3e:	f002 f8e2 	bl	8004f06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 8002d42:	2201      	movs	r2, #1
 8002d44:	f248 011f 	movw	r1, #32799	; 0x801f
 8002d48:	485e      	ldr	r0, [pc, #376]	; (8002ec4 <MX_GPIO_Init+0x210>)
 8002d4a:	f002 f8dc 	bl	8004f06 <HAL_GPIO_WritePin>
                          |DAC_SYNC_Pin|DAC_CLR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RS_Pin|Display_Power_Pin, GPIO_PIN_RESET);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f640 0101 	movw	r1, #2049	; 0x801
 8002d54:	485c      	ldr	r0, [pc, #368]	; (8002ec8 <MX_GPIO_Init+0x214>)
 8002d56:	f002 f8d6 	bl	8004f06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|SPI2_NSS_Pin
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f241 413e 	movw	r1, #5182	; 0x143e
 8002d60:	4859      	ldr	r0, [pc, #356]	; (8002ec8 <MX_GPIO_Init+0x214>)
 8002d62:	f002 f8d0 	bl	8004f06 <HAL_GPIO_WritePin>
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Start_button_Pin;
 8002d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Start_button_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4850      	ldr	r0, [pc, #320]	; (8002ec0 <MX_GPIO_Init+0x20c>)
 8002d7e:	f001 ff2b 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Count_EN_Pin;
 8002d82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d90:	2302      	movs	r3, #2
 8002d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Count_EN_GPIO_Port, &GPIO_InitStruct);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4849      	ldr	r0, [pc, #292]	; (8002ec0 <MX_GPIO_Init+0x20c>)
 8002d9c:	f001 ff1c 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_cs_Pin;
 8002da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dae:	2303      	movs	r3, #3
 8002db0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_cs_GPIO_Port, &GPIO_InitStruct);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	4841      	ldr	r0, [pc, #260]	; (8002ec0 <MX_GPIO_Init+0x20c>)
 8002dba:	f001 ff0d 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 8002dbe:	f248 030f 	movw	r3, #32783	; 0x800f
 8002dc2:	617b      	str	r3, [r7, #20]
                          |DAC_CLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	483b      	ldr	r0, [pc, #236]	; (8002ec4 <MX_GPIO_Init+0x210>)
 8002dd8:	f001 fefe 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8002ddc:	2310      	movs	r3, #16
 8002dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de0:	2301      	movs	r3, #1
 8002de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4619      	mov	r1, r3
 8002df2:	4834      	ldr	r0, [pc, #208]	; (8002ec4 <MX_GPIO_Init+0x210>)
 8002df4:	f001 fef0 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Display_RS_Pin;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e04:	2302      	movs	r3, #2
 8002e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Display_RS_GPIO_Port, &GPIO_InitStruct);
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	482e      	ldr	r0, [pc, #184]	; (8002ec8 <MX_GPIO_Init+0x214>)
 8002e10:	f001 fee2 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|Display_Power_Pin
 8002e14:	f640 433e 	movw	r3, #3134	; 0xc3e
 8002e18:	617b      	str	r3, [r7, #20]
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002e1a:	2311      	movs	r3, #17
 8002e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e22:	2302      	movs	r3, #2
 8002e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4826      	ldr	r0, [pc, #152]	; (8002ec8 <MX_GPIO_Init+0x214>)
 8002e2e:	f001 fed3 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4619      	mov	r1, r3
 8002e4a:	481f      	ldr	r0, [pc, #124]	; (8002ec8 <MX_GPIO_Init+0x214>)
 8002e4c:	f001 fec4 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encode_Push_Pin;
 8002e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encode_Push_GPIO_Port, &GPIO_InitStruct);
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4619      	mov	r1, r3
 8002e66:	4817      	ldr	r0, [pc, #92]	; (8002ec4 <MX_GPIO_Init+0x210>)
 8002e68:	f001 feb6 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7c:	f107 0314 	add.w	r3, r7, #20
 8002e80:	4619      	mov	r1, r3
 8002e82:	4810      	ldr	r0, [pc, #64]	; (8002ec4 <MX_GPIO_Init+0x210>)
 8002e84:	f001 fea8 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 8002e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e92:	2301      	movs	r3, #1
 8002e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <MX_GPIO_Init+0x210>)
 8002e9e:	f001 fe9b 	bl	8004bd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	2028      	movs	r0, #40	; 0x28
 8002ea8:	f001 fac1 	bl	800442e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002eac:	2028      	movs	r0, #40	; 0x28
 8002eae:	f001 fada 	bl	8004466 <HAL_NVIC_EnableIRQ>

}
 8002eb2:	bf00      	nop
 8002eb4:	3728      	adds	r7, #40	; 0x28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40020800 	.word	0x40020800
 8002ec4:	40020000 	.word	0x40020000
 8002ec8:	40020400 	.word	0x40020400

08002ecc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ed0:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <MX_I2C1_Init+0x50>)
 8002ed2:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <MX_I2C1_Init+0x54>)
 8002ed4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <MX_I2C1_Init+0x50>)
 8002ed8:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <MX_I2C1_Init+0x58>)
 8002eda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <MX_I2C1_Init+0x50>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <MX_I2C1_Init+0x50>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <MX_I2C1_Init+0x50>)
 8002eea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <MX_I2C1_Init+0x50>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <MX_I2C1_Init+0x50>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002efc:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <MX_I2C1_Init+0x50>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <MX_I2C1_Init+0x50>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f08:	4804      	ldr	r0, [pc, #16]	; (8002f1c <MX_I2C1_Init+0x50>)
 8002f0a:	f002 f82d 	bl	8004f68 <HAL_I2C_Init>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f14:	f000 fcc6 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000b34 	.word	0x20000b34
 8002f20:	40005400 	.word	0x40005400
 8002f24:	000186a0 	.word	0x000186a0

08002f28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_I2C_MspInit+0x7c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d128      	bne.n	8002f9c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	61d3      	str	r3, [r2, #28]
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TMP117_SCL_Pin|TMP117_SDA_Pin;
 8002f62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f68:	2312      	movs	r3, #18
 8002f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f70:	2303      	movs	r3, #3
 8002f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f74:	2304      	movs	r3, #4
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	480b      	ldr	r0, [pc, #44]	; (8002fac <HAL_I2C_MspInit+0x84>)
 8002f80:	f001 fe2a 	bl	8004bd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f8e:	6253      	str	r3, [r2, #36]	; 0x24
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40005400 	.word	0x40005400
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40020400 	.word	0x40020400

08002fb0 <USB_rx_command_buffer_push_refd>:

extern uint8_t command_buffer[31];

int16_t Enc_Counter = 0;

CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4804      	ldr	r0, [pc, #16]	; (8002fcc <USB_rx_command_buffer_push_refd+0x1c>)
 8002fbc:	f7fe faf8 	bl	80015b0 <__circ_gbuf_push>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2000069c 	.word	0x2000069c

08002fd0 <USB_rx_command_buffer_pop_refd>:
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4803      	ldr	r0, [pc, #12]	; (8002fec <USB_rx_command_buffer_pop_refd+0x1c>)
 8002fde:	f7fe fa95 	bl	800150c <__circ_gbuf_pop>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	2000069c 	.word	0x2000069c

08002ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b095      	sub	sp, #84	; 0x54
 8002ff4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 8002ff6:	4b6b      	ldr	r3, [pc, #428]	; (80031a4 <main+0x1b4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 8002ffc:	4b69      	ldr	r3, [pc, #420]	; (80031a4 <main+0x1b4>)
 8002ffe:	2208      	movs	r2, #8
 8003000:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8003002:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <main+0x1b4>)
 8003004:	2201      	movs	r2, #1
 8003006:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 8003008:	4b66      	ldr	r3, [pc, #408]	; (80031a4 <main+0x1b4>)
 800300a:	2201      	movs	r2, #1
 800300c:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 800300e:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <main+0x1b4>)
 8003010:	2200      	movs	r2, #0
 8003012:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8003014:	4b63      	ldr	r3, [pc, #396]	; (80031a4 <main+0x1b4>)
 8003016:	2200      	movs	r2, #0
 8003018:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 800301a:	4b62      	ldr	r3, [pc, #392]	; (80031a4 <main+0x1b4>)
 800301c:	2200      	movs	r2, #0
 800301e:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 8003020:	4b60      	ldr	r3, [pc, #384]	; (80031a4 <main+0x1b4>)
 8003022:	2200      	movs	r2, #0
 8003024:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 8003026:	4b5f      	ldr	r3, [pc, #380]	; (80031a4 <main+0x1b4>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]

	DAC_target_speed=0.9; //  V/s
 800302c:	4b5e      	ldr	r3, [pc, #376]	; (80031a8 <main+0x1b8>)
 800302e:	4a5f      	ldr	r2, [pc, #380]	; (80031ac <main+0x1bc>)
 8003030:	601a      	str	r2, [r3, #0]
	DAC_code=DAC_CODE_MIDDLE;
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <main+0x1c0>)
 8003034:	4a5f      	ldr	r2, [pc, #380]	; (80031b4 <main+0x1c4>)
 8003036:	601a      	str	r2, [r3, #0]
	DAC_code_direction=0;
 8003038:	4b5f      	ldr	r3, [pc, #380]	; (80031b8 <main+0x1c8>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800303e:	f001 f88e 	bl	800415e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003042:	f000 f8d9 	bl	80031f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003046:	f7ff fe35 	bl	8002cb4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800304a:	f000 fc31 	bl	80038b0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800304e:	f000 fc63 	bl	8003918 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8003052:	f00a f9ef 	bl	800d434 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8003056:	f000 fed9 	bl	8003e0c <MX_TIM3_Init>
  MX_TIM4_Init();
 800305a:	f000 ff25 	bl	8003ea8 <MX_TIM4_Init>
  MX_I2C1_Init();
 800305e:	f7ff ff35 	bl	8002ecc <MX_I2C1_Init>
  MX_TIM2_Init();
 8003062:	f000 fe87 	bl	8003d74 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003066:	f000 f913 	bl	8003290 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(750); //WarmUP
 800306a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800306e:	f001 f8e5 	bl	800423c <HAL_Delay>
  load_data_from_EEPROM();
 8003072:	f7ff fd55 	bl	8002b20 <load_data_from_EEPROM>
  TMP117_Initialization(hi2c1);
 8003076:	4c51      	ldr	r4, [pc, #324]	; (80031bc <main+0x1cc>)
 8003078:	4668      	mov	r0, sp
 800307a:	f104 0310 	add.w	r3, r4, #16
 800307e:	2244      	movs	r2, #68	; 0x44
 8003080:	4619      	mov	r1, r3
 8003082:	f00a ff7b 	bl	800df7c <memcpy>
 8003086:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800308a:	f001 f811 	bl	80040b0 <TMP117_Initialization>
  init_LCD();
 800308e:	f7ff f9fb 	bl	8002488 <init_LCD>
  DDS_Init();
 8003092:	f7fe fe7b 	bl	8001d8c <DDS_Init>
  DAC_SendInit();
 8003096:	f7fe fc61 	bl	800195c <DAC_SendInit>
  DAC_Write(DAC_code);
 800309a:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <main+0x1c0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe fc02 	bl	80018a8 <DAC_Write>

  HAL_TIM_Base_Start_IT(&htim3);
 80030a4:	4846      	ldr	r0, [pc, #280]	; (80031c0 <main+0x1d0>)
 80030a6:	f005 fc97 	bl	80089d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80030aa:	4846      	ldr	r0, [pc, #280]	; (80031c4 <main+0x1d4>)
 80030ac:	f005 fc94 	bl	80089d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80030b0:	213c      	movs	r1, #60	; 0x3c
 80030b2:	4845      	ldr	r0, [pc, #276]	; (80031c8 <main+0x1d8>)
 80030b4:	f005 fd80 	bl	8008bb8 <HAL_TIM_Encoder_Start>


  Relay_control(1,0); // x1 mode
 80030b8:	2100      	movs	r1, #0
 80030ba:	2001      	movs	r0, #1
 80030bc:	f7fe fac6 	bl	800164c <Relay_control>
  Relay_control(2,0); // x2/x4 mode
 80030c0:	2100      	movs	r1, #0
 80030c2:	2002      	movs	r0, #2
 80030c4:	f7fe fac2 	bl	800164c <Relay_control>
  Relay_control(3,0); // Output Enable
 80030c8:	2100      	movs	r1, #0
 80030ca:	2003      	movs	r0, #3
 80030cc:	f7fe fabe 	bl	800164c <Relay_control>
  CPLD_control(CPLD_WORD);
 80030d0:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <main+0x1dc>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fb93 	bl	8001800 <CPLD_control>

  send_answer_to_CDC(CLEAR_TYPE_1);
 80030da:	2004      	movs	r0, #4
 80030dc:	f7ff fb0e 	bl	80026fc <send_answer_to_CDC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(cfg.LDACMODE==1){
 80030e0:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <main+0x1b4>)
 80030e2:	789b      	ldrb	r3, [r3, #2]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d117      	bne.n	8003118 <main+0x128>
			sprintf(lcd_buf,"ARM      %01u:%02u:%02u",eta_hours,eta_minute,eta_second);
 80030e8:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <main+0x1e0>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <main+0x1e4>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	4b38      	ldr	r3, [pc, #224]	; (80031d8 <main+0x1e8>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	460b      	mov	r3, r1
 80030fc:	4937      	ldr	r1, [pc, #220]	; (80031dc <main+0x1ec>)
 80030fe:	4838      	ldr	r0, [pc, #224]	; (80031e0 <main+0x1f0>)
 8003100:	f00b fbb2 	bl	800e868 <siprintf>
			LcdString(1, 2);
 8003104:	2102      	movs	r1, #2
 8003106:	2001      	movs	r0, #1
 8003108:	f7ff f8c0 	bl	800228c <LcdString>
			LcdBarLine(DAC_code);
 800310c:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <main+0x1c0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fa4f 	bl	80025b4 <LcdBarLine>
 8003116:	e007      	b.n	8003128 <main+0x138>
		}
		else
		{
				sprintf(lcd_buf,"STANDBY");
 8003118:	4932      	ldr	r1, [pc, #200]	; (80031e4 <main+0x1f4>)
 800311a:	4831      	ldr	r0, [pc, #196]	; (80031e0 <main+0x1f0>)
 800311c:	f00b fba4 	bl	800e868 <siprintf>
				LcdString(1, 2);
 8003120:	2102      	movs	r1, #2
 8003122:	2001      	movs	r0, #1
 8003124:	f7ff f8b2 	bl	800228c <LcdString>
		}
		LcdUpdate();
 8003128:	f7fe ffd6 	bl	80020d8 <LcdUpdate>
		LcdClear_massive();
 800312c:	f7ff f808 	bl	8002140 <LcdClear_massive>

		if(USB_CDC_End_Line_Received)
 8003130:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <main+0x1f8>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d021      	beq.n	800317e <main+0x18e>
		{
			uint8_t i=0;
 800313a:	2300      	movs	r3, #0
 800313c:	71fb      	strb	r3, [r7, #7]
			USB_CDC_End_Line_Received=0;
 800313e:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <main+0x1f8>)
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
			while (1) {
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	4a29      	ldr	r2, [pc, #164]	; (80031ec <main+0x1fc>)
 8003148:	4413      	add	r3, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff40 	bl	8002fd0 <USB_rx_command_buffer_pop_refd>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <main+0x16e>
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	4a24      	ldr	r2, [pc, #144]	; (80031ec <main+0x1fc>)
 800315a:	210a      	movs	r1, #10
 800315c:	54d1      	strb	r1, [r2, r3]
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	4a22      	ldr	r2, [pc, #136]	; (80031ec <main+0x1fc>)
 8003162:	5cd3      	ldrb	r3, [r2, r3]
 8003164:	2b0a      	cmp	r3, #10
 8003166:	d008      	beq.n	800317a <main+0x18a>
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	4a20      	ldr	r2, [pc, #128]	; (80031ec <main+0x1fc>)
 800316c:	5cd3      	ldrb	r3, [r2, r3]
 800316e:	2b0d      	cmp	r3, #13
 8003170:	d003      	beq.n	800317a <main+0x18a>
				i++;
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	3301      	adds	r3, #1
 8003176:	71fb      	strb	r3, [r7, #7]
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8003178:	e7e4      	b.n	8003144 <main+0x154>
			}
			Parsing_USB_command();
 800317a:	f000 f945 	bl	8003408 <Parsing_USB_command>
		}

		if(Need_update_DDS)
 800317e:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <main+0x200>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0ac      	beq.n	80030e0 <main+0xf0>
		{
			if(Ramp_dac_step_complete)
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <main+0x204>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <main+0x1ae>
			{
				DDS_Update();
 800318e:	f7fe fed9 	bl	8001f44 <DDS_Update>
				Need_update_DDS=0;
 8003192:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <main+0x200>)
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
				Ramp_dac_step_complete=0;
 8003198:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <main+0x204>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
			}
			DDS_Calculation();
 800319e:	f7fe fcd5 	bl	8001b4c <DDS_Calculation>
		if(cfg.LDACMODE==1){
 80031a2:	e79d      	b.n	80030e0 <main+0xf0>
 80031a4:	20000bb0 	.word	0x20000bb0
 80031a8:	20000bc8 	.word	0x20000bc8
 80031ac:	3f666666 	.word	0x3f666666
 80031b0:	20000bd8 	.word	0x20000bd8
 80031b4:	0007ffff 	.word	0x0007ffff
 80031b8:	20000bdc 	.word	0x20000bdc
 80031bc:	20000b34 	.word	0x20000b34
 80031c0:	20000cd4 	.word	0x20000cd4
 80031c4:	20000c94 	.word	0x20000c94
 80031c8:	20000d14 	.word	0x20000d14
 80031cc:	200006a8 	.word	0x200006a8
 80031d0:	20000bba 	.word	0x20000bba
 80031d4:	20000bbb 	.word	0x20000bbb
 80031d8:	20000bbc 	.word	0x20000bbc
 80031dc:	080123c0 	.word	0x080123c0
 80031e0:	20000a30 	.word	0x20000a30
 80031e4:	080123d8 	.word	0x080123d8
 80031e8:	20000b10 	.word	0x20000b10
 80031ec:	20000b14 	.word	0x20000b14
 80031f0:	20000bde 	.word	0x20000bde
 80031f4:	20000bdf 	.word	0x20000bdf

080031f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b092      	sub	sp, #72	; 0x48
 80031fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031fe:	f107 0314 	add.w	r3, r7, #20
 8003202:	2234      	movs	r2, #52	; 0x34
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f00a fec6 	bl	800df98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800320c:	463b      	mov	r3, r7
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	60da      	str	r2, [r3, #12]
 8003218:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800321a:	4b1c      	ldr	r3, [pc, #112]	; (800328c <SystemClock_Config+0x94>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8003222:	4a1a      	ldr	r2, [pc, #104]	; (800328c <SystemClock_Config+0x94>)
 8003224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003228:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800322a:	2301      	movs	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800322e:	2301      	movs	r3, #1
 8003230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003232:	2302      	movs	r3, #2
 8003234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800323c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003240:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8003242:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003246:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	4618      	mov	r0, r3
 800324e:	f003 ff01 	bl	8007054 <HAL_RCC_OscConfig>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8003258:	f000 fb24 	bl	80038a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800325c:	230f      	movs	r3, #15
 800325e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003260:	2303      	movs	r3, #3
 8003262:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003270:	463b      	mov	r3, r7
 8003272:	2101      	movs	r1, #1
 8003274:	4618      	mov	r0, r3
 8003276:	f004 fa1d 	bl	80076b4 <HAL_RCC_ClockConfig>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003280:	f000 fb10 	bl	80038a4 <Error_Handler>
  }
}
 8003284:	bf00      	nop
 8003286:	3748      	adds	r7, #72	; 0x48
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40007000 	.word	0x40007000

08003290 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003294:	2200      	movs	r2, #0
 8003296:	2100      	movs	r1, #0
 8003298:	2017      	movs	r0, #23
 800329a:	f001 f8c8 	bl	800442e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800329e:	2017      	movs	r0, #23
 80032a0:	f001 f8e1 	bl	8004466 <HAL_NVIC_EnableIRQ>
}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_TIM_PeriodElapsedCallback>:
//==============================================================================================


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	if (htim == &htim3 )// INL correction, each 500ms
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a0b      	ldr	r2, [pc, #44]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d106      	bne.n	80032c6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		if(cfg.LDACMODE==1)Need_update_DDS=1;
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80032ba:	789b      	ldrb	r3, [r3, #2]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d102      	bne.n	80032c6 <HAL_TIM_PeriodElapsedCallback+0x1e>
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim2 )//User interface workload, each 10ms
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a08      	ldr	r2, [pc, #32]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d102      	bne.n	80032d4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		Need_update_Display=1;
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
	}

}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000cd4 	.word	0x20000cd4
 80032e4:	20000bb0 	.word	0x20000bb0
 80032e8:	20000bde 	.word	0x20000bde
 80032ec:	20000c94 	.word	0x20000c94
 80032f0:	20000bdd 	.word	0x20000bdd

080032f4 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	80fb      	strh	r3, [r7, #6]
	DAC_Write_FAST();
 80032fe:	f7fe fb13 	bl	8001928 <DAC_Write_FAST>
	Ramp_dac_step_complete=1;
 8003302:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_9)
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d16b      	bne.n	80033e8 <HAL_GPIO_EXTI_Callback+0xf4>
	{
		if(DAC_code_direction)
 8003310:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <HAL_GPIO_EXTI_Callback+0x100>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d035      	beq.n	8003384 <HAL_GPIO_EXTI_Callback+0x90>
		{
			if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 8003318:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x104>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8003320:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003324:	4a35      	ldr	r2, [pc, #212]	; (80033fc <HAL_GPIO_EXTI_Callback+0x108>)
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	4293      	cmp	r3, r2
 800332a:	d322      	bcc.n	8003372 <HAL_GPIO_EXTI_Callback+0x7e>
			{
				DAC_code+=DDS_target_multipiller;
 800332c:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_GPIO_EXTI_Callback+0x108>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x104>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4413      	add	r3, r2
 8003336:	4a31      	ldr	r2, [pc, #196]	; (80033fc <HAL_GPIO_EXTI_Callback+0x108>)
 8003338:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 800333a:	4b31      	ldr	r3, [pc, #196]	; (8003400 <HAL_GPIO_EXTI_Callback+0x10c>)
 800333c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003340:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8003342:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <HAL_GPIO_EXTI_Callback+0x108>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800334c:	f023 030f 	bic.w	r3, r3, #15
 8003350:	4a2b      	ldr	r2, [pc, #172]	; (8003400 <HAL_GPIO_EXTI_Callback+0x10c>)
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	4413      	add	r3, r2
 8003356:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <HAL_GPIO_EXTI_Callback+0x10c>)
 8003358:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 800335a:	4b29      	ldr	r3, [pc, #164]	; (8003400 <HAL_GPIO_EXTI_Callback+0x10c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0c1b      	lsrs	r3, r3, #16
 8003360:	b29a      	uxth	r2, r3
 8003362:	4b28      	ldr	r3, [pc, #160]	; (8003404 <HAL_GPIO_EXTI_Callback+0x110>)
 8003364:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <HAL_GPIO_EXTI_Callback+0x10c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b29a      	uxth	r2, r3
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_GPIO_EXTI_Callback+0x110>)
 800336e:	805a      	strh	r2, [r3, #2]
 8003370:	e03a      	b.n	80033e8 <HAL_GPIO_EXTI_Callback+0xf4>

			} else  {
				CPLD_control(0x0); // Disable LDAC signal
 8003372:	2000      	movs	r0, #0
 8003374:	f7fe fa44 	bl	8001800 <CPLD_control>
				DAC_SendInit();
 8003378:	f7fe faf0 	bl	800195c <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 800337c:	2005      	movs	r0, #5
 800337e:	f7ff f9bd 	bl	80026fc <send_answer_to_CDC>
				return;
 8003382:	e031      	b.n	80033e8 <HAL_GPIO_EXTI_Callback+0xf4>
			}
		}
		else
		{
			if(DAC_code>=DDS_target_multipiller)
 8003384:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_GPIO_EXTI_Callback+0x108>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x104>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d322      	bcc.n	80033d6 <HAL_GPIO_EXTI_Callback+0xe2>
			{
				DAC_code-=DDS_target_multipiller;
 8003390:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_GPIO_EXTI_Callback+0x108>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x104>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	4a18      	ldr	r2, [pc, #96]	; (80033fc <HAL_GPIO_EXTI_Callback+0x108>)
 800339c:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <HAL_GPIO_EXTI_Callback+0x10c>)
 80033a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033a4:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_GPIO_EXTI_Callback+0x108>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033b0:	f023 030f 	bic.w	r3, r3, #15
 80033b4:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_GPIO_EXTI_Callback+0x10c>)
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	4a11      	ldr	r2, [pc, #68]	; (8003400 <HAL_GPIO_EXTI_Callback+0x10c>)
 80033bc:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_GPIO_EXTI_Callback+0x10c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <HAL_GPIO_EXTI_Callback+0x110>)
 80033c8:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <HAL_GPIO_EXTI_Callback+0x10c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_GPIO_EXTI_Callback+0x110>)
 80033d2:	805a      	strh	r2, [r3, #2]
 80033d4:	e008      	b.n	80033e8 <HAL_GPIO_EXTI_Callback+0xf4>

			} else {
				CPLD_control(0x0); // Disable LDAC signal
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fe fa12 	bl	8001800 <CPLD_control>
				DAC_SendInit();
 80033dc:	f7fe fabe 	bl	800195c <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 80033e0:	2005      	movs	r0, #5
 80033e2:	f7ff f98b 	bl	80026fc <send_answer_to_CDC>
				return;
 80033e6:	bf00      	nop
			}
		}
	}
}
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000bdf 	.word	0x20000bdf
 80033f4:	20000bdc 	.word	0x20000bdc
 80033f8:	200006ac 	.word	0x200006ac
 80033fc:	20000bd8 	.word	0x20000bd8
 8003400:	20000ba8 	.word	0x20000ba8
 8003404:	20000bac 	.word	0x20000bac

08003408 <Parsing_USB_command>:

void Parsing_USB_command(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b094      	sub	sp, #80	; 0x50
 800340c:	af00      	add	r7, sp, #0
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];
	float dac_resolution;

	found = strtok((char *)command_buffer," ");
 800340e:	49b8      	ldr	r1, [pc, #736]	; (80036f0 <Parsing_USB_command+0x2e8>)
 8003410:	48b8      	ldr	r0, [pc, #736]	; (80036f4 <Parsing_USB_command+0x2ec>)
 8003412:	f00c f869 	bl	800f4e8 <strtok>
 8003416:	64b8      	str	r0, [r7, #72]	; 0x48
	if(found!=NULL)
 8003418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00e      	beq.n	800343c <Parsing_USB_command+0x34>
	{
		strcpy(decoded_string_1,found);
 800341e:	f107 0320 	add.w	r3, r7, #32
 8003422:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003424:	4618      	mov	r0, r3
 8003426:	f00b fa3f 	bl	800e8a8 <strcpy>
	{
		send_answer_to_CDC(ERROR_TYPE_1);
		return;
	}

	found = strtok(NULL,"\r");
 800342a:	49b3      	ldr	r1, [pc, #716]	; (80036f8 <Parsing_USB_command+0x2f0>)
 800342c:	2000      	movs	r0, #0
 800342e:	f00c f85b 	bl	800f4e8 <strtok>
 8003432:	64b8      	str	r0, [r7, #72]	; 0x48
	if(found!=NULL)
 8003434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003436:	2b00      	cmp	r3, #0
 8003438:	d023      	beq.n	8003482 <Parsing_USB_command+0x7a>
 800343a:	e003      	b.n	8003444 <Parsing_USB_command+0x3c>
		send_answer_to_CDC(ERROR_TYPE_1);
 800343c:	2000      	movs	r0, #0
 800343e:	f7ff f95d 	bl	80026fc <send_answer_to_CDC>
		return;
 8003442:	e202      	b.n	800384a <Parsing_USB_command+0x442>
	{
		strcpy(decoded_string_2,found);
 8003444:	463b      	mov	r3, r7
 8003446:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003448:	4618      	mov	r0, r3
 800344a:	f00b fa2d 	bl	800e8a8 <strcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 800344e:	2300      	movs	r3, #0
 8003450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003452:	e00d      	b.n	8003470 <Parsing_USB_command+0x68>
 8003454:	463a      	mov	r2, r7
 8003456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003458:	4413      	add	r3, r2
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b20      	cmp	r3, #32
 800345e:	d104      	bne.n	800346a <Parsing_USB_command+0x62>
 8003460:	463a      	mov	r2, r7
 8003462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003464:	4413      	add	r3, r2
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800346c:	3301      	adds	r3, #1
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003470:	463b      	mov	r3, r7
 8003472:	4618      	mov	r0, r3
 8003474:	f7fc fe8e 	bl	8000194 <strlen>
 8003478:	4602      	mov	r2, r0
 800347a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800347c:	429a      	cmp	r2, r3
 800347e:	d8e9      	bhi.n	8003454 <Parsing_USB_command+0x4c>
 8003480:	e003      	b.n	800348a <Parsing_USB_command+0x82>
	}
	else
	{
		send_answer_to_CDC(ERROR_TYPE_1);
 8003482:	2000      	movs	r0, #0
 8003484:	f7ff f93a 	bl	80026fc <send_answer_to_CDC>
		return;
 8003488:	e1df      	b.n	800384a <Parsing_USB_command+0x442>
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 800348a:	f107 0320 	add.w	r3, r7, #32
 800348e:	499b      	ldr	r1, [pc, #620]	; (80036fc <Parsing_USB_command+0x2f4>)
 8003490:	4618      	mov	r0, r3
 8003492:	f7fc fe75 	bl	8000180 <strcmp>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d11f      	bne.n	80034dc <Parsing_USB_command+0xd4>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 800349c:	463b      	mov	r3, r7
 800349e:	4998      	ldr	r1, [pc, #608]	; (8003700 <Parsing_USB_command+0x2f8>)
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fc fe6d 	bl	8000180 <strcmp>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d105      	bne.n	80034b8 <Parsing_USB_command+0xb0>
			cmd_SWEEP_START();
 80034ac:	f7ff f9f4 	bl	8002898 <cmd_SWEEP_START>
			send_answer_to_CDC(OK_TYPE_2);
 80034b0:	2003      	movs	r0, #3
 80034b2:	f7ff f923 	bl	80026fc <send_answer_to_CDC>
			return;
 80034b6:	e1c8      	b.n	800384a <Parsing_USB_command+0x442>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP"))){
 80034b8:	463b      	mov	r3, r7
 80034ba:	4992      	ldr	r1, [pc, #584]	; (8003704 <Parsing_USB_command+0x2fc>)
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fc fe5f 	bl	8000180 <strcmp>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d105      	bne.n	80034d4 <Parsing_USB_command+0xcc>
				cmd_SWEEP_STOP();
 80034c8:	f7ff f9f6 	bl	80028b8 <cmd_SWEEP_STOP>
				send_answer_to_CDC(OK_TYPE_2);
 80034cc:	2003      	movs	r0, #3
 80034ce:	f7ff f915 	bl	80026fc <send_answer_to_CDC>
				return;
 80034d2:	e1ba      	b.n	800384a <Parsing_USB_command+0x442>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7ff f911 	bl	80026fc <send_answer_to_CDC>
				return;
 80034da:	e1b6      	b.n	800384a <Parsing_USB_command+0x442>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 80034dc:	f107 0320 	add.w	r3, r7, #32
 80034e0:	4989      	ldr	r1, [pc, #548]	; (8003708 <Parsing_USB_command+0x300>)
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fc fe4c 	bl	8000180 <strcmp>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d169      	bne.n	80035c2 <Parsing_USB_command+0x1ba>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 80034ee:	463b      	mov	r3, r7
 80034f0:	4986      	ldr	r1, [pc, #536]	; (800370c <Parsing_USB_command+0x304>)
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fc fe44 	bl	8000180 <strcmp>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <Parsing_USB_command+0x104>
			cmd_DAC_SET(DAC_CODE_TOP);
 80034fe:	4884      	ldr	r0, [pc, #528]	; (8003710 <Parsing_USB_command+0x308>)
 8003500:	f7ff f9e4 	bl	80028cc <cmd_DAC_SET>
			send_answer_to_CDC(OK_TYPE_2);
 8003504:	2003      	movs	r0, #3
 8003506:	f7ff f8f9 	bl	80026fc <send_answer_to_CDC>
			return;
 800350a:	e19e      	b.n	800384a <Parsing_USB_command+0x442>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 800350c:	463b      	mov	r3, r7
 800350e:	4981      	ldr	r1, [pc, #516]	; (8003714 <Parsing_USB_command+0x30c>)
 8003510:	4618      	mov	r0, r3
 8003512:	f7fc fe35 	bl	8000180 <strcmp>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d106      	bne.n	800352a <Parsing_USB_command+0x122>
				cmd_DAC_SET(DAC_CODE_DOWN);
 800351c:	2000      	movs	r0, #0
 800351e:	f7ff f9d5 	bl	80028cc <cmd_DAC_SET>
				send_answer_to_CDC(OK_TYPE_2);
 8003522:	2003      	movs	r0, #3
 8003524:	f7ff f8ea 	bl	80026fc <send_answer_to_CDC>
				return;
 8003528:	e18f      	b.n	800384a <Parsing_USB_command+0x442>
			}
			else
			{
				atof_tmp=atof(decoded_string_2);
 800352a:	463b      	mov	r3, r7
 800352c:	4618      	mov	r0, r3
 800352e:	f00a fcf7 	bl	800df20 <atof>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	f7fd fae7 	bl	8000b0c <__aeabi_d2f>
 800353e:	4603      	mov	r3, r0
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
				if(atof_tmp>=cal_DAC_down_voltage && atof_tmp<=cal_DAC_up_voltage)
 8003542:	4b75      	ldr	r3, [pc, #468]	; (8003718 <Parsing_USB_command+0x310>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4619      	mov	r1, r3
 8003548:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800354a:	f7fd fdef 	bl	800112c <__aeabi_fcmpge>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d032      	beq.n	80035ba <Parsing_USB_command+0x1b2>
 8003554:	4b71      	ldr	r3, [pc, #452]	; (800371c <Parsing_USB_command+0x314>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800355c:	f7fd fddc 	bl	8001118 <__aeabi_fcmple>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d029      	beq.n	80035ba <Parsing_USB_command+0x1b2>
				{
					dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 8003566:	4b6d      	ldr	r3, [pc, #436]	; (800371c <Parsing_USB_command+0x314>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6b      	ldr	r2, [pc, #428]	; (8003718 <Parsing_USB_command+0x310>)
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fb1f 	bl	8000bb4 <__aeabi_fsub>
 8003576:	4603      	mov	r3, r0
 8003578:	4969      	ldr	r1, [pc, #420]	; (8003720 <Parsing_USB_command+0x318>)
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fcd8 	bl	8000f30 <__aeabi_fdiv>
 8003580:	4603      	mov	r3, r0
 8003582:	643b      	str	r3, [r7, #64]	; 0x40
					DAC_code=(uint32_t)((atof_tmp-cal_DAC_down_voltage)/dac_resolution);
 8003584:	4b64      	ldr	r3, [pc, #400]	; (8003718 <Parsing_USB_command+0x310>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4619      	mov	r1, r3
 800358a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800358c:	f7fd fb12 	bl	8000bb4 <__aeabi_fsub>
 8003590:	4603      	mov	r3, r0
 8003592:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd fccb 	bl	8000f30 <__aeabi_fdiv>
 800359a:	4603      	mov	r3, r0
 800359c:	4618      	mov	r0, r3
 800359e:	f7fd fdd9 	bl	8001154 <__aeabi_f2uiz>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4a5f      	ldr	r2, [pc, #380]	; (8003724 <Parsing_USB_command+0x31c>)
 80035a6:	6013      	str	r3, [r2, #0]
					cmd_DAC_SET(DAC_code);
 80035a8:	4b5e      	ldr	r3, [pc, #376]	; (8003724 <Parsing_USB_command+0x31c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff f98d 	bl	80028cc <cmd_DAC_SET>
					send_answer_to_CDC(OK_TYPE_2);
 80035b2:	2003      	movs	r0, #3
 80035b4:	f7ff f8a2 	bl	80026fc <send_answer_to_CDC>
					return;
 80035b8:	e147      	b.n	800384a <Parsing_USB_command+0x442>
				}
				else
				{
					send_answer_to_CDC(ERROR_TYPE_2);
 80035ba:	2001      	movs	r0, #1
 80035bc:	f7ff f89e 	bl	80026fc <send_answer_to_CDC>
					return;
 80035c0:	e143      	b.n	800384a <Parsing_USB_command+0x442>

		}
	}

	// ==== DAC_CAL_TEMP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TEMP")))
 80035c2:	f107 0320 	add.w	r3, r7, #32
 80035c6:	4958      	ldr	r1, [pc, #352]	; (8003728 <Parsing_USB_command+0x320>)
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fc fdd9 	bl	8000180 <strcmp>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d116      	bne.n	8003602 <Parsing_USB_command+0x1fa>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 80035d4:	463b      	mov	r3, r7
 80035d6:	494a      	ldr	r1, [pc, #296]	; (8003700 <Parsing_USB_command+0x2f8>)
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc fdd1 	bl	8000180 <strcmp>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <Parsing_USB_command+0x1f2>
			send_answer_to_CDC(RUN_CAL_TYPE_TEMP);
 80035e4:	200d      	movs	r0, #13
 80035e6:	f7ff f889 	bl	80026fc <send_answer_to_CDC>
			cmd_CAL(DAC_CAL_TEMP,NONE);
 80035ea:	4950      	ldr	r1, [pc, #320]	; (800372c <Parsing_USB_command+0x324>)
 80035ec:	2006      	movs	r0, #6
 80035ee:	f7ff f99b 	bl	8002928 <cmd_CAL>
			send_answer_to_CDC(OK_TYPE_1);
 80035f2:	2002      	movs	r0, #2
 80035f4:	f7ff f882 	bl	80026fc <send_answer_to_CDC>
			return;
 80035f8:	e127      	b.n	800384a <Parsing_USB_command+0x442>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7ff f87e 	bl	80026fc <send_answer_to_CDC>
			return;
 8003600:	e123      	b.n	800384a <Parsing_USB_command+0x442>
		}
	}

	// ==== DAC_CAL_POLY_A command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_A")))
 8003602:	f107 0320 	add.w	r3, r7, #32
 8003606:	494a      	ldr	r1, [pc, #296]	; (8003730 <Parsing_USB_command+0x328>)
 8003608:	4618      	mov	r0, r3
 800360a:	f7fc fdb9 	bl	8000180 <strcmp>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d112      	bne.n	800363a <Parsing_USB_command+0x232>
	{
		cmd_CAL(DAC_CAL_POLY_A,atof(decoded_string_2));
 8003614:	463b      	mov	r3, r7
 8003616:	4618      	mov	r0, r3
 8003618:	f00a fc82 	bl	800df20 <atof>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	f7fd fa72 	bl	8000b0c <__aeabi_d2f>
 8003628:	4603      	mov	r3, r0
 800362a:	4619      	mov	r1, r3
 800362c:	2007      	movs	r0, #7
 800362e:	f7ff f97b 	bl	8002928 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003632:	2003      	movs	r0, #3
 8003634:	f7ff f862 	bl	80026fc <send_answer_to_CDC>
		return;
 8003638:	e107      	b.n	800384a <Parsing_USB_command+0x442>
	}

	// ==== DAC_CAL_POLY_B command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_B")))
 800363a:	f107 0320 	add.w	r3, r7, #32
 800363e:	493d      	ldr	r1, [pc, #244]	; (8003734 <Parsing_USB_command+0x32c>)
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc fd9d 	bl	8000180 <strcmp>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d112      	bne.n	8003672 <Parsing_USB_command+0x26a>
	{
		cmd_CAL(DAC_CAL_POLY_B,atof(decoded_string_2));
 800364c:	463b      	mov	r3, r7
 800364e:	4618      	mov	r0, r3
 8003650:	f00a fc66 	bl	800df20 <atof>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4610      	mov	r0, r2
 800365a:	4619      	mov	r1, r3
 800365c:	f7fd fa56 	bl	8000b0c <__aeabi_d2f>
 8003660:	4603      	mov	r3, r0
 8003662:	4619      	mov	r1, r3
 8003664:	2008      	movs	r0, #8
 8003666:	f7ff f95f 	bl	8002928 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 800366a:	2003      	movs	r0, #3
 800366c:	f7ff f846 	bl	80026fc <send_answer_to_CDC>
		return;
 8003670:	e0eb      	b.n	800384a <Parsing_USB_command+0x442>
	}

	// ==== DAC_CAL_POLY_C command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_C")))
 8003672:	f107 0320 	add.w	r3, r7, #32
 8003676:	4930      	ldr	r1, [pc, #192]	; (8003738 <Parsing_USB_command+0x330>)
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc fd81 	bl	8000180 <strcmp>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d112      	bne.n	80036aa <Parsing_USB_command+0x2a2>
	{
		cmd_CAL(DAC_CAL_POLY_C,atof(decoded_string_2));
 8003684:	463b      	mov	r3, r7
 8003686:	4618      	mov	r0, r3
 8003688:	f00a fc4a 	bl	800df20 <atof>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	f7fd fa3a 	bl	8000b0c <__aeabi_d2f>
 8003698:	4603      	mov	r3, r0
 800369a:	4619      	mov	r1, r3
 800369c:	2009      	movs	r0, #9
 800369e:	f7ff f943 	bl	8002928 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 80036a2:	2003      	movs	r0, #3
 80036a4:	f7ff f82a 	bl	80026fc <send_answer_to_CDC>
		return;
 80036a8:	e0cf      	b.n	800384a <Parsing_USB_command+0x442>
	}

	// ==== DAC_CAL_TOP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TOP")))
 80036aa:	f107 0320 	add.w	r3, r7, #32
 80036ae:	4923      	ldr	r1, [pc, #140]	; (800373c <Parsing_USB_command+0x334>)
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fc fd65 	bl	8000180 <strcmp>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d141      	bne.n	8003740 <Parsing_USB_command+0x338>
	{
		if(cmd_CAL(DAC_CAL_TOP,atof(decoded_string_2)))
 80036bc:	463b      	mov	r3, r7
 80036be:	4618      	mov	r0, r3
 80036c0:	f00a fc2e 	bl	800df20 <atof>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4610      	mov	r0, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	f7fd fa1e 	bl	8000b0c <__aeabi_d2f>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4619      	mov	r1, r3
 80036d4:	200a      	movs	r0, #10
 80036d6:	f7ff f927 	bl	8002928 <cmd_CAL>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <Parsing_USB_command+0x2e0>
		{
			send_answer_to_CDC(OK_TYPE_2);
 80036e0:	2003      	movs	r0, #3
 80036e2:	f7ff f80b 	bl	80026fc <send_answer_to_CDC>
			return;
 80036e6:	e0b0      	b.n	800384a <Parsing_USB_command+0x442>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 80036e8:	2001      	movs	r0, #1
 80036ea:	f7ff f807 	bl	80026fc <send_answer_to_CDC>
			return;
 80036ee:	e0ac      	b.n	800384a <Parsing_USB_command+0x442>
 80036f0:	080123e0 	.word	0x080123e0
 80036f4:	20000b14 	.word	0x20000b14
 80036f8:	080123e4 	.word	0x080123e4
 80036fc:	080123e8 	.word	0x080123e8
 8003700:	080123f0 	.word	0x080123f0
 8003704:	080123f8 	.word	0x080123f8
 8003708:	08012400 	.word	0x08012400
 800370c:	08012408 	.word	0x08012408
 8003710:	000fffff 	.word	0x000fffff
 8003714:	0801240c 	.word	0x0801240c
 8003718:	20000bd4 	.word	0x20000bd4
 800371c:	20000bd0 	.word	0x20000bd0
 8003720:	497ffff0 	.word	0x497ffff0
 8003724:	20000bd8 	.word	0x20000bd8
 8003728:	08012414 	.word	0x08012414
 800372c:	41400000 	.word	0x41400000
 8003730:	08012424 	.word	0x08012424
 8003734:	08012434 	.word	0x08012434
 8003738:	08012444 	.word	0x08012444
 800373c:	08012454 	.word	0x08012454
		}
	}


	// ==== DAC_CAL_DOWN command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_DOWN")))
 8003740:	f107 0320 	add.w	r3, r7, #32
 8003744:	4944      	ldr	r1, [pc, #272]	; (8003858 <Parsing_USB_command+0x450>)
 8003746:	4618      	mov	r0, r3
 8003748:	f7fc fd1a 	bl	8000180 <strcmp>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d119      	bne.n	8003786 <Parsing_USB_command+0x37e>
	{
		if(cmd_CAL(DAC_CAL_DOWN,atof(decoded_string_2)))
 8003752:	463b      	mov	r3, r7
 8003754:	4618      	mov	r0, r3
 8003756:	f00a fbe3 	bl	800df20 <atof>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4610      	mov	r0, r2
 8003760:	4619      	mov	r1, r3
 8003762:	f7fd f9d3 	bl	8000b0c <__aeabi_d2f>
 8003766:	4603      	mov	r3, r0
 8003768:	4619      	mov	r1, r3
 800376a:	200b      	movs	r0, #11
 800376c:	f7ff f8dc 	bl	8002928 <cmd_CAL>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <Parsing_USB_command+0x376>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003776:	2003      	movs	r0, #3
 8003778:	f7fe ffc0 	bl	80026fc <send_answer_to_CDC>
			return;
 800377c:	e065      	b.n	800384a <Parsing_USB_command+0x442>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 800377e:	2001      	movs	r0, #1
 8003780:	f7fe ffbc 	bl	80026fc <send_answer_to_CDC>
			return;
 8003784:	e061      	b.n	800384a <Parsing_USB_command+0x442>
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 8003786:	f107 0320 	add.w	r3, r7, #32
 800378a:	4934      	ldr	r1, [pc, #208]	; (800385c <Parsing_USB_command+0x454>)
 800378c:	4618      	mov	r0, r3
 800378e:	f7fc fcf7 	bl	8000180 <strcmp>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d129      	bne.n	80037ec <Parsing_USB_command+0x3e4>
	{
		atof_tmp=atof(decoded_string_2);
 8003798:	463b      	mov	r3, r7
 800379a:	4618      	mov	r0, r3
 800379c:	f00a fbc0 	bl	800df20 <atof>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	f7fd f9b0 	bl	8000b0c <__aeabi_d2f>
 80037ac:	4603      	mov	r3, r0
 80037ae:	647b      	str	r3, [r7, #68]	; 0x44
		if(atof_tmp<0.001 || atof_tmp>1)
 80037b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80037b2:	f7fc fe5b 	bl	800046c <__aeabi_f2d>
 80037b6:	a326      	add	r3, pc, #152	; (adr r3, 8003850 <Parsing_USB_command+0x448>)
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f7fd f920 	bl	8000a00 <__aeabi_dcmplt>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d107      	bne.n	80037d6 <Parsing_USB_command+0x3ce>
 80037c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80037ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80037cc:	f7fd fcb8 	bl	8001140 <__aeabi_fcmpgt>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <Parsing_USB_command+0x3d6>
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 80037d6:	2000      	movs	r0, #0
 80037d8:	f7fe ff90 	bl	80026fc <send_answer_to_CDC>
			return;
 80037dc:	e035      	b.n	800384a <Parsing_USB_command+0x442>
		}
		else
		{
			DAC_target_speed=atof_tmp;
 80037de:	4a20      	ldr	r2, [pc, #128]	; (8003860 <Parsing_USB_command+0x458>)
 80037e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e2:	6013      	str	r3, [r2, #0]

			send_answer_to_CDC(OK_TYPE_2);
 80037e4:	2003      	movs	r0, #3
 80037e6:	f7fe ff89 	bl	80026fc <send_answer_to_CDC>
			return;
 80037ea:	e02e      	b.n	800384a <Parsing_USB_command+0x442>
		}
	}

	// ==== SWEEP_DIRECTION command ====
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 80037ec:	f107 0320 	add.w	r3, r7, #32
 80037f0:	491c      	ldr	r1, [pc, #112]	; (8003864 <Parsing_USB_command+0x45c>)
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc fcc4 	bl	8000180 <strcmp>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d121      	bne.n	8003842 <Parsing_USB_command+0x43a>
	{
		if(!(strcmp(decoded_string_2,"UP"))){
 80037fe:	463b      	mov	r3, r7
 8003800:	4919      	ldr	r1, [pc, #100]	; (8003868 <Parsing_USB_command+0x460>)
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fcbc 	bl	8000180 <strcmp>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <Parsing_USB_command+0x414>
			DAC_code_direction=1;
 800380e:	4b17      	ldr	r3, [pc, #92]	; (800386c <Parsing_USB_command+0x464>)
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
			send_answer_to_CDC(OK_TYPE_2);
 8003814:	2003      	movs	r0, #3
 8003816:	f7fe ff71 	bl	80026fc <send_answer_to_CDC>
			return;
 800381a:	e016      	b.n	800384a <Parsing_USB_command+0x442>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 800381c:	463b      	mov	r3, r7
 800381e:	4914      	ldr	r1, [pc, #80]	; (8003870 <Parsing_USB_command+0x468>)
 8003820:	4618      	mov	r0, r3
 8003822:	f7fc fcad 	bl	8000180 <strcmp>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <Parsing_USB_command+0x432>
				DAC_code_direction=0;
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <Parsing_USB_command+0x464>)
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
				send_answer_to_CDC(OK_TYPE_2);
 8003832:	2003      	movs	r0, #3
 8003834:	f7fe ff62 	bl	80026fc <send_answer_to_CDC>
				return;
 8003838:	e007      	b.n	800384a <Parsing_USB_command+0x442>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 800383a:	2000      	movs	r0, #0
 800383c:	f7fe ff5e 	bl	80026fc <send_answer_to_CDC>
				return;
 8003840:	e003      	b.n	800384a <Parsing_USB_command+0x442>
			}

		}
	}

	send_answer_to_CDC(ERROR_TYPE_1);
 8003842:	2000      	movs	r0, #0
 8003844:	f7fe ff5a 	bl	80026fc <send_answer_to_CDC>
	return;
 8003848:	bf00      	nop
}
 800384a:	3750      	adds	r7, #80	; 0x50
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	d2f1a9fc 	.word	0xd2f1a9fc
 8003854:	3f50624d 	.word	0x3f50624d
 8003858:	08012460 	.word	0x08012460
 800385c:	08012470 	.word	0x08012470
 8003860:	20000bc8 	.word	0x20000bc8
 8003864:	0801247c 	.word	0x0801247c
 8003868:	0801248c 	.word	0x0801248c
 800386c:	20000bdc 	.word	0x20000bdc
 8003870:	0801240c 	.word	0x0801240c

08003874 <Write_to_circ_buffer>:

void Write_to_circ_buffer(uint8_t Buf)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 800387e:	1dfb      	adds	r3, r7, #7
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fb95 	bl	8002fb0 <USB_rx_command_buffer_push_refd>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <Write_to_circ_buffer+0x24>
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <Write_to_circ_buffer+0x2c>)
 800388e:	2200      	movs	r2, #0
 8003890:	809a      	strh	r2, [r3, #4]
 8003892:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <Write_to_circ_buffer+0x2c>)
 8003894:	2200      	movs	r2, #0
 8003896:	80da      	strh	r2, [r3, #6]
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	2000069c 	.word	0x2000069c

080038a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038a8:	b672      	cpsid	i
}
 80038aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80038ac:	e7fe      	b.n	80038ac <Error_Handler+0x8>
	...

080038b0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <MX_SPI1_Init+0x60>)
 80038b6:	4a17      	ldr	r2, [pc, #92]	; (8003914 <MX_SPI1_Init+0x64>)
 80038b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <MX_SPI1_Init+0x60>)
 80038bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <MX_SPI1_Init+0x60>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <MX_SPI1_Init+0x60>)
 80038ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <MX_SPI1_Init+0x60>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80038d6:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <MX_SPI1_Init+0x60>)
 80038d8:	2201      	movs	r2, #1
 80038da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <MX_SPI1_Init+0x60>)
 80038de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80038e4:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <MX_SPI1_Init+0x60>)
 80038e6:	2218      	movs	r2, #24
 80038e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <MX_SPI1_Init+0x60>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038f0:	4b07      	ldr	r3, [pc, #28]	; (8003910 <MX_SPI1_Init+0x60>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <MX_SPI1_Init+0x60>)
 80038f8:	220a      	movs	r2, #10
 80038fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038fc:	4804      	ldr	r0, [pc, #16]	; (8003910 <MX_SPI1_Init+0x60>)
 80038fe:	f004 f98b 	bl	8007c18 <HAL_SPI_Init>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8003908:	f7ff ffcc 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800390c:	bf00      	nop
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000be0 	.word	0x20000be0
 8003914:	40013000 	.word	0x40013000

08003918 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <MX_SPI2_Init+0x60>)
 800391e:	4a17      	ldr	r2, [pc, #92]	; (800397c <MX_SPI2_Init+0x64>)
 8003920:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <MX_SPI2_Init+0x60>)
 8003924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003928:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <MX_SPI2_Init+0x60>)
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <MX_SPI2_Init+0x60>)
 8003932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003936:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <MX_SPI2_Init+0x60>)
 800393a:	2200      	movs	r2, #0
 800393c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800393e:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <MX_SPI2_Init+0x60>)
 8003940:	2201      	movs	r2, #1
 8003942:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <MX_SPI2_Init+0x60>)
 8003946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800394a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <MX_SPI2_Init+0x60>)
 800394e:	2218      	movs	r2, #24
 8003950:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <MX_SPI2_Init+0x60>)
 8003954:	2200      	movs	r2, #0
 8003956:	621a      	str	r2, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003958:	4b07      	ldr	r3, [pc, #28]	; (8003978 <MX_SPI2_Init+0x60>)
 800395a:	2200      	movs	r2, #0
 800395c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <MX_SPI2_Init+0x60>)
 8003960:	220a      	movs	r2, #10
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003964:	4804      	ldr	r0, [pc, #16]	; (8003978 <MX_SPI2_Init+0x60>)
 8003966:	f004 f957 	bl	8007c18 <HAL_SPI_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8003970:	f7ff ff98 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000c38 	.word	0x20000c38
 800397c:	40003800 	.word	0x40003800

08003980 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08c      	sub	sp, #48	; 0x30
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003988:	f107 031c 	add.w	r3, r7, #28
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a32      	ldr	r2, [pc, #200]	; (8003a68 <HAL_SPI_MspInit+0xe8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d130      	bne.n	8003a04 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039a2:	4b32      	ldr	r3, [pc, #200]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	4a31      	ldr	r2, [pc, #196]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 80039a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039ac:	6213      	str	r3, [r2, #32]
 80039ae:	4b2f      	ldr	r3, [pc, #188]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4a2b      	ldr	r2, [pc, #172]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	61d3      	str	r3, [r2, #28]
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039d2:	23e0      	movs	r3, #224	; 0xe0
 80039d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039de:	2303      	movs	r3, #3
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039e2:	2305      	movs	r3, #5
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e6:	f107 031c 	add.w	r3, r7, #28
 80039ea:	4619      	mov	r1, r3
 80039ec:	4820      	ldr	r0, [pc, #128]	; (8003a70 <HAL_SPI_MspInit+0xf0>)
 80039ee:	f001 f8f3 	bl	8004bd8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80039f2:	2200      	movs	r2, #0
 80039f4:	2101      	movs	r1, #1
 80039f6:	2023      	movs	r0, #35	; 0x23
 80039f8:	f000 fd19 	bl	800442e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039fc:	2023      	movs	r0, #35	; 0x23
 80039fe:	f000 fd32 	bl	8004466 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003a02:	e02d      	b.n	8003a60 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1a      	ldr	r2, [pc, #104]	; (8003a74 <HAL_SPI_MspInit+0xf4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d128      	bne.n	8003a60 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 8003a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a18:	6253      	str	r3, [r2, #36]	; 0x24
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	61d3      	str	r3, [r2, #28]
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <HAL_SPI_MspInit+0xec>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003a3e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a50:	2305      	movs	r3, #5
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a54:	f107 031c 	add.w	r3, r7, #28
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4807      	ldr	r0, [pc, #28]	; (8003a78 <HAL_SPI_MspInit+0xf8>)
 8003a5c:	f001 f8bc 	bl	8004bd8 <HAL_GPIO_Init>
}
 8003a60:	bf00      	nop
 8003a62:	3730      	adds	r7, #48	; 0x30
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40013000 	.word	0x40013000
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020000 	.word	0x40020000
 8003a74:	40003800 	.word	0x40003800
 8003a78:	40020400 	.word	0x40020400

08003a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8003a82:	4b26      	ldr	r3, [pc, #152]	; (8003b1c <HAL_MspInit+0xa0>)
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	4a25      	ldr	r2, [pc, #148]	; (8003b1c <HAL_MspInit+0xa0>)
 8003a88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a8c:	6253      	str	r3, [r2, #36]	; 0x24
 8003a8e:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <HAL_MspInit+0xa0>)
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_MspInit+0xa0>)
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <HAL_MspInit+0xa0>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6213      	str	r3, [r2, #32]
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_MspInit+0xa0>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <HAL_MspInit+0xa0>)
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	4a19      	ldr	r2, [pc, #100]	; (8003b1c <HAL_MspInit+0xa0>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6253      	str	r3, [r2, #36]	; 0x24
 8003abe:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <HAL_MspInit+0xa0>)
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2101      	movs	r1, #1
 8003ace:	f06f 000b 	mvn.w	r0, #11
 8003ad2:	f000 fcac 	bl	800442e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2101      	movs	r1, #1
 8003ada:	f06f 000a 	mvn.w	r0, #10
 8003ade:	f000 fca6 	bl	800442e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	f06f 0009 	mvn.w	r0, #9
 8003aea:	f000 fca0 	bl	800442e <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 8003aee:	2200      	movs	r2, #0
 8003af0:	2101      	movs	r1, #1
 8003af2:	f06f 0004 	mvn.w	r0, #4
 8003af6:	f000 fc9a 	bl	800442e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2101      	movs	r1, #1
 8003afe:	f06f 0003 	mvn.w	r0, #3
 8003b02:	f000 fc94 	bl	800442e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2101      	movs	r1, #1
 8003b0a:	f06f 0001 	mvn.w	r0, #1
 8003b0e:	f000 fc8e 	bl	800442e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800

08003b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b24:	e7fe      	b.n	8003b24 <NMI_Handler+0x4>

08003b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2a:	e7fe      	b.n	8003b2a <HardFault_Handler+0x4>

08003b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b30:	e7fe      	b.n	8003b30 <MemManage_Handler+0x4>

08003b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b36:	e7fe      	b.n	8003b36 <BusFault_Handler+0x4>

08003b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <UsageFault_Handler+0x4>

08003b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr

08003b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b66:	f000 fb4d 	bl	8004204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b74:	4802      	ldr	r0, [pc, #8]	; (8003b80 <USB_LP_IRQHandler+0x10>)
 8003b76:	f001 ff45 	bl	8005a04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20001394 	.word	0x20001394

08003b84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encode_Push_Pin);
 8003b88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b8c:	f001 f9d4 	bl	8004f38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003b90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b94:	f001 f9d0 	bl	8004f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ba0:	4802      	ldr	r0, [pc, #8]	; (8003bac <TIM2_IRQHandler+0x10>)
 8003ba2:	f005 f873 	bl	8008c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000c94 	.word	0x20000c94

08003bb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bb4:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <TIM3_IRQHandler+0x10>)
 8003bb6:	f005 f869 	bl	8008c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000cd4 	.word	0x20000cd4

08003bc4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003bc8:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <SPI1_IRQHandler+0x10>)
 8003bca:	f004 fc91 	bl	80084f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000be0 	.word	0x20000be0

08003bd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Start_button_Pin);
 8003bdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003be0:	f001 f9aa 	bl	8004f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003be4:	bf00      	nop
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	return 1;
 8003bec:	2301      	movs	r3, #1
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <_kill>:

int _kill(int pid, int sig)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c00:	f00a f992 	bl	800df28 <__errno>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2216      	movs	r2, #22
 8003c08:	601a      	str	r2, [r3, #0]
	return -1;
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <_exit>:

void _exit (int status)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff ffe7 	bl	8003bf6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c28:	e7fe      	b.n	8003c28 <_exit+0x12>

08003c2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b086      	sub	sp, #24
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	e00a      	b.n	8003c52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c3c:	f3af 8000 	nop.w
 8003c40:	4601      	mov	r1, r0
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	60ba      	str	r2, [r7, #8]
 8003c48:	b2ca      	uxtb	r2, r1
 8003c4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	dbf0      	blt.n	8003c3c <_read+0x12>
	}

return len;
 8003c5a:	687b      	ldr	r3, [r7, #4]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e009      	b.n	8003c8a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	60ba      	str	r2, [r7, #8]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	3301      	adds	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	dbf1      	blt.n	8003c76 <_write+0x12>
	}
	return len;
 8003c92:	687b      	ldr	r3, [r7, #4]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <_close>:

int _close(int file)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	return -1;
 8003ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr

08003cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <_isatty>:

int _isatty(int file)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	return 1;
 8003cd8:	2301      	movs	r3, #1
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
	return 0;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d04:	4a14      	ldr	r2, [pc, #80]	; (8003d58 <_sbrk+0x5c>)
 8003d06:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <_sbrk+0x60>)
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d10:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <_sbrk+0x64>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <_sbrk+0x64>)
 8003d1a:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <_sbrk+0x68>)
 8003d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <_sbrk+0x64>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d207      	bcs.n	8003d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d2c:	f00a f8fc 	bl	800df28 <__errno>
 8003d30:	4603      	mov	r3, r0
 8003d32:	220c      	movs	r2, #12
 8003d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3a:	e009      	b.n	8003d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <_sbrk+0x64>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <_sbrk+0x64>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	4a05      	ldr	r2, [pc, #20]	; (8003d60 <_sbrk+0x64>)
 8003d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20004000 	.word	0x20004000
 8003d5c:	00000400 	.word	0x00000400
 8003d60:	20000c90 	.word	0x20000c90
 8003d64:	200018b0 	.word	0x200018b0

08003d68 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d7a:	f107 0308 	add.w	r3, r7, #8
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	609a      	str	r2, [r3, #8]
 8003d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d88:	463b      	mov	r3, r7
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <MX_TIM2_Init+0x94>)
 8003d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 -1;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <MX_TIM2_Init+0x94>)
 8003d9a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8003d9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003da0:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <MX_TIM2_Init+0x94>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10 - 1;
 8003da6:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <MX_TIM2_Init+0x94>)
 8003da8:	2209      	movs	r2, #9
 8003daa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dac:	4b16      	ldr	r3, [pc, #88]	; (8003e08 <MX_TIM2_Init+0x94>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db2:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <MX_TIM2_Init+0x94>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003db8:	4813      	ldr	r0, [pc, #76]	; (8003e08 <MX_TIM2_Init+0x94>)
 8003dba:	f004 fdcd 	bl	8008958 <HAL_TIM_Base_Init>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003dc4:	f7ff fd6e 	bl	80038a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003dce:	f107 0308 	add.w	r3, r7, #8
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	480c      	ldr	r0, [pc, #48]	; (8003e08 <MX_TIM2_Init+0x94>)
 8003dd6:	f005 f835 	bl	8008e44 <HAL_TIM_ConfigClockSource>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003de0:	f7ff fd60 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de4:	2300      	movs	r3, #0
 8003de6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003dec:	463b      	mov	r3, r7
 8003dee:	4619      	mov	r1, r3
 8003df0:	4805      	ldr	r0, [pc, #20]	; (8003e08 <MX_TIM2_Init+0x94>)
 8003df2:	f005 fa2b 	bl	800924c <HAL_TIMEx_MasterConfigSynchronization>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003dfc:	f7ff fd52 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e00:	bf00      	nop
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20000c94 	.word	0x20000c94

08003e0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e12:	f107 0308 	add.w	r3, r7, #8
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e20:	463b      	mov	r3, r7
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e28:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <MX_TIM3_Init+0x94>)
 8003e2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ea4 <MX_TIM3_Init+0x98>)
 8003e2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 -1;
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <MX_TIM3_Init+0x94>)
 8003e30:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8003e34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e36:	4b1a      	ldr	r3, [pc, #104]	; (8003ea0 <MX_TIM3_Init+0x94>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 -1;
 8003e3c:	4b18      	ldr	r3, [pc, #96]	; (8003ea0 <MX_TIM3_Init+0x94>)
 8003e3e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003e42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e44:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <MX_TIM3_Init+0x94>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <MX_TIM3_Init+0x94>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e50:	4813      	ldr	r0, [pc, #76]	; (8003ea0 <MX_TIM3_Init+0x94>)
 8003e52:	f004 fd81 	bl	8008958 <HAL_TIM_Base_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003e5c:	f7ff fd22 	bl	80038a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	480c      	ldr	r0, [pc, #48]	; (8003ea0 <MX_TIM3_Init+0x94>)
 8003e6e:	f004 ffe9 	bl	8008e44 <HAL_TIM_ConfigClockSource>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003e78:	f7ff fd14 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e84:	463b      	mov	r3, r7
 8003e86:	4619      	mov	r1, r3
 8003e88:	4805      	ldr	r0, [pc, #20]	; (8003ea0 <MX_TIM3_Init+0x94>)
 8003e8a:	f005 f9df 	bl	800924c <HAL_TIMEx_MasterConfigSynchronization>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003e94:	f7ff fd06 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003e98:	bf00      	nop
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000cd4 	.word	0x20000cd4
 8003ea4:	40000400 	.word	0x40000400

08003ea8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003eae:	f107 030c 	add.w	r3, r7, #12
 8003eb2:	2224      	movs	r2, #36	; 0x24
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f00a f86e 	bl	800df98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ebc:	1d3b      	adds	r3, r7, #4
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ec4:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <MX_TIM4_Init+0xa0>)
 8003ec6:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <MX_TIM4_Init+0xa4>)
 8003ec8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003eca:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <MX_TIM4_Init+0xa0>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <MX_TIM4_Init+0xa0>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <MX_TIM4_Init+0xa0>)
 8003ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003edc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ede:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <MX_TIM4_Init+0xa0>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ee4:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <MX_TIM4_Init+0xa0>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003eea:	2301      	movs	r3, #1
 8003eec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003efe:	2302      	movs	r3, #2
 8003f00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f02:	2301      	movs	r3, #1
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f06:	2300      	movs	r3, #0
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f0e:	f107 030c 	add.w	r3, r7, #12
 8003f12:	4619      	mov	r1, r3
 8003f14:	480c      	ldr	r0, [pc, #48]	; (8003f48 <MX_TIM4_Init+0xa0>)
 8003f16:	f004 fdb1 	bl	8008a7c <HAL_TIM_Encoder_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003f20:	f7ff fcc0 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f24:	2300      	movs	r3, #0
 8003f26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f2c:	1d3b      	adds	r3, r7, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4805      	ldr	r0, [pc, #20]	; (8003f48 <MX_TIM4_Init+0xa0>)
 8003f32:	f005 f98b 	bl	800924c <HAL_TIMEx_MasterConfigSynchronization>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003f3c:	f7ff fcb2 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f40:	bf00      	nop
 8003f42:	3730      	adds	r7, #48	; 0x30
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000d14 	.word	0x20000d14
 8003f4c:	40000800 	.word	0x40000800

08003f50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f60:	d114      	bne.n	8003f8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f62:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <HAL_TIM_Base_MspInit+0x78>)
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <HAL_TIM_Base_MspInit+0x78>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	6253      	str	r3, [r2, #36]	; 0x24
 8003f6e:	4b16      	ldr	r3, [pc, #88]	; (8003fc8 <HAL_TIM_Base_MspInit+0x78>)
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	201c      	movs	r0, #28
 8003f80:	f000 fa55 	bl	800442e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f84:	201c      	movs	r0, #28
 8003f86:	f000 fa6e 	bl	8004466 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003f8a:	e018      	b.n	8003fbe <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0e      	ldr	r2, [pc, #56]	; (8003fcc <HAL_TIM_Base_MspInit+0x7c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d113      	bne.n	8003fbe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_TIM_Base_MspInit+0x78>)
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	4a0b      	ldr	r2, [pc, #44]	; (8003fc8 <HAL_TIM_Base_MspInit+0x78>)
 8003f9c:	f043 0302 	orr.w	r3, r3, #2
 8003fa0:	6253      	str	r3, [r2, #36]	; 0x24
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_TIM_Base_MspInit+0x78>)
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	201d      	movs	r0, #29
 8003fb4:	f000 fa3b 	bl	800442e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003fb8:	201d      	movs	r0, #29
 8003fba:	f000 fa54 	bl	8004466 <HAL_NVIC_EnableIRQ>
}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40000400 	.word	0x40000400

08003fd0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd8:	f107 0314 	add.w	r3, r7, #20
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	60da      	str	r2, [r3, #12]
 8003fe6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a17      	ldr	r2, [pc, #92]	; (800404c <HAL_TIM_Encoder_MspInit+0x7c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d127      	bne.n	8004042 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <HAL_TIM_Encoder_MspInit+0x80>)
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_TIM_Encoder_MspInit+0x80>)
 8003ff8:	f043 0304 	orr.w	r3, r3, #4
 8003ffc:	6253      	str	r3, [r2, #36]	; 0x24
 8003ffe:	4b14      	ldr	r3, [pc, #80]	; (8004050 <HAL_TIM_Encoder_MspInit+0x80>)
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800400a:	4b11      	ldr	r3, [pc, #68]	; (8004050 <HAL_TIM_Encoder_MspInit+0x80>)
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	4a10      	ldr	r2, [pc, #64]	; (8004050 <HAL_TIM_Encoder_MspInit+0x80>)
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	61d3      	str	r3, [r2, #28]
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_TIM_Encoder_MspInit+0x80>)
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004022:	23c0      	movs	r3, #192	; 0xc0
 8004024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004032:	2302      	movs	r3, #2
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004036:	f107 0314 	add.w	r3, r7, #20
 800403a:	4619      	mov	r1, r3
 800403c:	4805      	ldr	r0, [pc, #20]	; (8004054 <HAL_TIM_Encoder_MspInit+0x84>)
 800403e:	f000 fdcb 	bl	8004bd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004042:	bf00      	nop
 8004044:	3728      	adds	r7, #40	; 0x28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40000800 	.word	0x40000800
 8004050:	40023800 	.word	0x40023800
 8004054:	40020400 	.word	0x40020400

08004058 <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second)
{
 8004058:	b084      	sub	sp, #16
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af02      	add	r7, sp, #8
 8004060:	f107 0c08 	add.w	ip, r7, #8
 8004064:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <TMP117_set_Configuration+0x50>)
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 800406e:	4a0e      	ldr	r2, [pc, #56]	; (80040a8 <TMP117_set_Configuration+0x50>)
 8004070:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8004074:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 8004076:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <TMP117_set_Configuration+0x50>)
 8004078:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800407c:	7093      	strb	r3, [r2, #2]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,2,100);
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <TMP117_set_Configuration+0x54>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	b299      	uxth	r1, r3
 8004084:	2364      	movs	r3, #100	; 0x64
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2302      	movs	r3, #2
 800408a:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <TMP117_set_Configuration+0x50>)
 800408c:	f107 0008 	add.w	r0, r7, #8
 8004090:	f001 f8ae 	bl	80051f0 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8004094:	2001      	movs	r0, #1
 8004096:	f000 f8d1 	bl	800423c <HAL_Delay>
}
 800409a:	bf00      	nop
 800409c:	46bd      	mov	sp, r7
 800409e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a2:	b004      	add	sp, #16
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	20000d54 	.word	0x20000d54
 80040ac:	200006b8 	.word	0x200006b8

080040b0 <TMP117_Initialization>:
   @Description   Custom Parameters for Sensor
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  void
 */
void TMP117_Initialization               (I2C_HandleTypeDef i2c)
{
 80040b0:	b084      	sub	sp, #16
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b094      	sub	sp, #80	; 0x50
 80040b6:	af14      	add	r7, sp, #80	; 0x50
 80040b8:	f107 0c08 	add.w	ip, r7, #8
 80040bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    TMP117_set_Configuration(i2c,0x02,0x22);
 80040c0:	2322      	movs	r3, #34	; 0x22
 80040c2:	9312      	str	r3, [sp, #72]	; 0x48
 80040c4:	2302      	movs	r3, #2
 80040c6:	9311      	str	r3, [sp, #68]	; 0x44
 80040c8:	4668      	mov	r0, sp
 80040ca:	f107 0318 	add.w	r3, r7, #24
 80040ce:	2244      	movs	r2, #68	; 0x44
 80040d0:	4619      	mov	r1, r3
 80040d2:	f009 ff53 	bl	800df7c <memcpy>
 80040d6:	f107 0308 	add.w	r3, r7, #8
 80040da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040dc:	f7ff ffbc 	bl	8004058 <TMP117_set_Configuration>
	HAL_Delay(100); // wait 1ms
 80040e0:	2064      	movs	r0, #100	; 0x64
 80040e2:	f000 f8ab 	bl	800423c <HAL_Delay>
	TMP117_set_Configuration(i2c,0x02,0x20);
 80040e6:	2320      	movs	r3, #32
 80040e8:	9312      	str	r3, [sp, #72]	; 0x48
 80040ea:	2302      	movs	r3, #2
 80040ec:	9311      	str	r3, [sp, #68]	; 0x44
 80040ee:	4668      	mov	r0, sp
 80040f0:	f107 0318 	add.w	r3, r7, #24
 80040f4:	2244      	movs	r2, #68	; 0x44
 80040f6:	4619      	mov	r1, r3
 80040f8:	f009 ff40 	bl	800df7c <memcpy>
 80040fc:	f107 0308 	add.w	r3, r7, #8
 8004100:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004102:	f7ff ffa9 	bl	8004058 <TMP117_set_Configuration>
//      TMP117_set_Temperature_Offset(i2c,0x00,0x00); //Default Value
//      TMP117_set_LowLimit(i2c,0x12,0x80);           //Set 10 Celcius
//      TMP117_set_HighLimit(i2c,0x51,0x20);          //Set 40 Celcius
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800410e:	b004      	add	sp, #16
 8004110:	4770      	bx	lr
	...

08004114 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004114:	480c      	ldr	r0, [pc, #48]	; (8004148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004116:	490d      	ldr	r1, [pc, #52]	; (800414c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004118:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800411a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800411c:	e002      	b.n	8004124 <LoopCopyDataInit>

0800411e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800411e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004122:	3304      	adds	r3, #4

08004124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004128:	d3f9      	bcc.n	800411e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800412c:	4c0a      	ldr	r4, [pc, #40]	; (8004158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800412e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004130:	e001      	b.n	8004136 <LoopFillZerobss>

08004132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004134:	3204      	adds	r2, #4

08004136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004138:	d3fb      	bcc.n	8004132 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800413a:	f7ff fe15 	bl	8003d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800413e:	f009 fef9 	bl	800df34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004142:	f7fe ff55 	bl	8002ff0 <main>
  bx lr
 8004146:	4770      	bx	lr
  ldr r0, =_sdata
 8004148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800414c:	20000a08 	.word	0x20000a08
  ldr r2, =_sidata
 8004150:	080129f8 	.word	0x080129f8
  ldr r2, =_sbss
 8004154:	20000a08 	.word	0x20000a08
  ldr r4, =_ebss
 8004158:	200018b0 	.word	0x200018b0

0800415c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800415c:	e7fe      	b.n	800415c <ADC1_IRQHandler>

0800415e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004168:	2003      	movs	r0, #3
 800416a:	f000 f955 	bl	8004418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800416e:	200f      	movs	r0, #15
 8004170:	f000 f80e 	bl	8004190 <HAL_InitTick>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	71fb      	strb	r3, [r7, #7]
 800417e:	e001      	b.n	8004184 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004180:	f7ff fc7c 	bl	8003a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004184:	79fb      	ldrb	r3, [r7, #7]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <HAL_InitTick+0x68>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d022      	beq.n	80041ea <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80041a4:	4b15      	ldr	r3, [pc, #84]	; (80041fc <HAL_InitTick+0x6c>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <HAL_InitTick+0x68>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 f962 	bl	8004482 <HAL_SYSTICK_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10f      	bne.n	80041e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b0f      	cmp	r3, #15
 80041c8:	d809      	bhi.n	80041de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041ca:	2200      	movs	r2, #0
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	f04f 30ff 	mov.w	r0, #4294967295
 80041d2:	f000 f92c 	bl	800442e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041d6:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <HAL_InitTick+0x70>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e007      	b.n	80041ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e004      	b.n	80041ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
 80041e8:	e001      	b.n	80041ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200006c0 	.word	0x200006c0
 80041fc:	200006b4 	.word	0x200006b4
 8004200:	200006bc 	.word	0x200006bc

08004204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_IncTick+0x1c>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_IncTick+0x20>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4413      	add	r3, r2
 8004212:	4a03      	ldr	r2, [pc, #12]	; (8004220 <HAL_IncTick+0x1c>)
 8004214:	6013      	str	r3, [r2, #0]
}
 8004216:	bf00      	nop
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000d58 	.word	0x20000d58
 8004224:	200006c0 	.word	0x200006c0

08004228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return uwTick;
 800422c:	4b02      	ldr	r3, [pc, #8]	; (8004238 <HAL_GetTick+0x10>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	20000d58 	.word	0x20000d58

0800423c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004244:	f7ff fff0 	bl	8004228 <HAL_GetTick>
 8004248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d004      	beq.n	8004260 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_Delay+0x40>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004260:	bf00      	nop
 8004262:	f7ff ffe1 	bl	8004228 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	429a      	cmp	r2, r3
 8004270:	d8f7      	bhi.n	8004262 <HAL_Delay+0x26>
  {
  }
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	200006c0 	.word	0x200006c0

08004280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800429c:	4013      	ands	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042b2:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <__NVIC_SetPriorityGrouping+0x44>)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	60d3      	str	r3, [r2, #12]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <__NVIC_GetPriorityGrouping+0x18>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	0a1b      	lsrs	r3, r3, #8
 80042d2:	f003 0307 	and.w	r3, r3, #7
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	e000ed00 	.word	0xe000ed00

080042e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	db0b      	blt.n	800430e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	f003 021f 	and.w	r2, r3, #31
 80042fc:	4906      	ldr	r1, [pc, #24]	; (8004318 <__NVIC_EnableIRQ+0x34>)
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2001      	movs	r0, #1
 8004306:	fa00 f202 	lsl.w	r2, r0, r2
 800430a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr
 8004318:	e000e100 	.word	0xe000e100

0800431c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	6039      	str	r1, [r7, #0]
 8004326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432c:	2b00      	cmp	r3, #0
 800432e:	db0a      	blt.n	8004346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	490c      	ldr	r1, [pc, #48]	; (8004368 <__NVIC_SetPriority+0x4c>)
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	0112      	lsls	r2, r2, #4
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	440b      	add	r3, r1
 8004340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004344:	e00a      	b.n	800435c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	4908      	ldr	r1, [pc, #32]	; (800436c <__NVIC_SetPriority+0x50>)
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	3b04      	subs	r3, #4
 8004354:	0112      	lsls	r2, r2, #4
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	440b      	add	r3, r1
 800435a:	761a      	strb	r2, [r3, #24]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	e000e100 	.word	0xe000e100
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004370:	b480      	push	{r7}
 8004372:	b089      	sub	sp, #36	; 0x24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f1c3 0307 	rsb	r3, r3, #7
 800438a:	2b04      	cmp	r3, #4
 800438c:	bf28      	it	cs
 800438e:	2304      	movcs	r3, #4
 8004390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3304      	adds	r3, #4
 8004396:	2b06      	cmp	r3, #6
 8004398:	d902      	bls.n	80043a0 <NVIC_EncodePriority+0x30>
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3b03      	subs	r3, #3
 800439e:	e000      	b.n	80043a2 <NVIC_EncodePriority+0x32>
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43da      	mvns	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	401a      	ands	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b8:	f04f 31ff 	mov.w	r1, #4294967295
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa01 f303 	lsl.w	r3, r1, r3
 80043c2:	43d9      	mvns	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c8:	4313      	orrs	r3, r2
         );
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3724      	adds	r7, #36	; 0x24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3b01      	subs	r3, #1
 80043e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e4:	d301      	bcc.n	80043ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043e6:	2301      	movs	r3, #1
 80043e8:	e00f      	b.n	800440a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ea:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <SysTick_Config+0x40>)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043f2:	210f      	movs	r1, #15
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295
 80043f8:	f7ff ff90 	bl	800431c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <SysTick_Config+0x40>)
 80043fe:	2200      	movs	r2, #0
 8004400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <SysTick_Config+0x40>)
 8004404:	2207      	movs	r2, #7
 8004406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	e000e010 	.word	0xe000e010

08004418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff ff2d 	bl	8004280 <__NVIC_SetPriorityGrouping>
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	4603      	mov	r3, r0
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004440:	f7ff ff42 	bl	80042c8 <__NVIC_GetPriorityGrouping>
 8004444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	6978      	ldr	r0, [r7, #20]
 800444c:	f7ff ff90 	bl	8004370 <NVIC_EncodePriority>
 8004450:	4602      	mov	r2, r0
 8004452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004456:	4611      	mov	r1, r2
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff ff5f 	bl	800431c <__NVIC_SetPriority>
}
 800445e:	bf00      	nop
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	4603      	mov	r3, r0
 800446e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff ff35 	bl	80042e4 <__NVIC_EnableIRQ>
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff ffa2 	bl	80043d4 <SysTick_Config>
 8004490:	4603      	mov	r3, r0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d005      	beq.n	80044be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2204      	movs	r2, #4
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
 80044bc:	e029      	b.n	8004512 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 020e 	bic.w	r2, r2, #14
 80044cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 021c 	and.w	r2, r3, #28
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ea:	2101      	movs	r1, #1
 80044ec:	fa01 f202 	lsl.w	r2, r1, r2
 80044f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
    }
  }
  return status;
 8004512:	7bfb      	ldrb	r3, [r7, #15]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004524:	f7ff fe80 	bl	8004228 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800452a:	e010      	b.n	800454e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d00c      	beq.n	800454e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <FLASH_WaitForLastOperation+0x2e>
 800453a:	f7ff fe75 	bl	8004228 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d201      	bcs.n	800454e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e02f      	b.n	80045ae <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800454e:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <FLASH_WaitForLastOperation+0x9c>)
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d0e8      	beq.n	800452c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <FLASH_WaitForLastOperation+0x9c>)
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d102      	bne.n	800456c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <FLASH_WaitForLastOperation+0x9c>)
 8004568:	2202      	movs	r2, #2
 800456a:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800456c:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <FLASH_WaitForLastOperation+0x9c>)
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004578:	d014      	beq.n	80045a4 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800457a:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <FLASH_WaitForLastOperation+0x9c>)
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004586:	d00d      	beq.n	80045a4 <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <FLASH_WaitForLastOperation+0x9c>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004594:	d006      	beq.n	80045a4 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <FLASH_WaitForLastOperation+0x9c>)
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800459e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a2:	d103      	bne.n	80045ac <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80045a4:	f000 f80a 	bl	80045bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40023c00 	.word	0x40023c00

080045bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <FLASH_SetErrorCode+0xa4>)
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d2:	d109      	bne.n	80045e8 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80045d4:	4b23      	ldr	r3, [pc, #140]	; (8004664 <FLASH_SetErrorCode+0xa8>)
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	4a21      	ldr	r2, [pc, #132]	; (8004664 <FLASH_SetErrorCode+0xa8>)
 80045de:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80045e8:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <FLASH_SetErrorCode+0xa4>)
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f4:	d109      	bne.n	800460a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <FLASH_SetErrorCode+0xa8>)
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	4a19      	ldr	r2, [pc, #100]	; (8004664 <FLASH_SetErrorCode+0xa8>)
 8004600:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004608:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <FLASH_SetErrorCode+0xa4>)
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004616:	d109      	bne.n	800462c <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004618:	4b12      	ldr	r3, [pc, #72]	; (8004664 <FLASH_SetErrorCode+0xa8>)
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f043 0304 	orr.w	r3, r3, #4
 8004620:	4a10      	ldr	r2, [pc, #64]	; (8004664 <FLASH_SetErrorCode+0xa8>)
 8004622:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800462a:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <FLASH_SetErrorCode+0xa4>)
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004638:	d109      	bne.n	800464e <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <FLASH_SetErrorCode+0xa8>)
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f043 0308 	orr.w	r3, r3, #8
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <FLASH_SetErrorCode+0xa8>)
 8004644:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800464c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800464e:	4a04      	ldr	r2, [pc, #16]	; (8004660 <FLASH_SetErrorCode+0xa4>)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6193      	str	r3, [r2, #24]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40023c00 	.word	0x40023c00
 8004664:	20000d5c 	.word	0x20000d5c

08004668 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800467a:	4a07      	ldr	r2, [pc, #28]	; (8004698 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 800467c:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8004680:	4a06      	ldr	r2, [pc, #24]	; (800469c <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 8004682:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e000      	b.n	800468a <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
}
 800468a:	4618      	mov	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00
 8004698:	89abcdef 	.word	0x89abcdef
 800469c:	02030405 	.word	0x02030405

080046a0 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40023c00 	.word	0x40023c00

080046c0 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046d2:	f7ff ff23 	bl	800451c <FLASH_WaitForLastOperation>
 80046d6:	4603      	mov	r3, r0
 80046d8:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d11a      	bne.n	8004716 <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046e0:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d102      	bne.n	80046f2 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d102      	bne.n	80046fe <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800470a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800470e:	f7ff ff05 	bl	800451c <FLASH_WaitForLastOperation>
 8004712:	4603      	mov	r3, r0
 8004714:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 8004716:	7bfb      	ldrb	r3, [r7, #15]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	20000d5c 	.word	0x20000d5c

08004724 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004734:	4b31      	ldr	r3, [pc, #196]	; (80047fc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004736:	7c1b      	ldrb	r3, [r3, #16]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 800473c:	2302      	movs	r3, #2
 800473e:	e058      	b.n	80047f2 <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 8004740:	4b2e      	ldr	r3, [pc, #184]	; (80047fc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004742:	2201      	movs	r2, #1
 8004744:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004746:	f24c 3050 	movw	r0, #50000	; 0xc350
 800474a:	f7ff fee7 	bl	800451c <FLASH_WaitForLastOperation>
 800474e:	4603      	mov	r3, r0
 8004750:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004752:	7dfb      	ldrb	r3, [r7, #23]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d148      	bne.n	80047ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004758:	4b28      	ldr	r3, [pc, #160]	; (80047fc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800475a:	2200      	movs	r2, #0
 800475c:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d106      	bne.n	8004772 <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	68b8      	ldr	r0, [r7, #8]
 8004768:	f000 fa18 	bl	8004b9c <FLASH_DATAEEPROM_ProgramWord>
 800476c:	4603      	mov	r3, r0
 800476e:	75fb      	strb	r3, [r7, #23]
 8004770:	e03b      	b.n	80047ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d108      	bne.n	800478a <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	b29b      	uxth	r3, r3
 800477c:	4619      	mov	r1, r3
 800477e:	68b8      	ldr	r0, [r7, #8]
 8004780:	f000 f99c 	bl	8004abc <FLASH_DATAEEPROM_ProgramHalfWord>
 8004784:	4603      	mov	r3, r0
 8004786:	75fb      	strb	r3, [r7, #23]
 8004788:	e02f      	b.n	80047ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d108      	bne.n	80047a2 <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	4619      	mov	r1, r3
 8004796:	68b8      	ldr	r0, [r7, #8]
 8004798:	f000 f934 	bl	8004a04 <FLASH_DATAEEPROM_ProgramByte>
 800479c:	4603      	mov	r3, r0
 800479e:	75fb      	strb	r3, [r7, #23]
 80047a0:	e023      	b.n	80047ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d108      	bne.n	80047ba <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	4619      	mov	r1, r3
 80047ae:	68b8      	ldr	r0, [r7, #8]
 80047b0:	f000 f826 	bl	8004800 <FLASH_DATAEEPROM_FastProgramByte>
 80047b4:	4603      	mov	r3, r0
 80047b6:	75fb      	strb	r3, [r7, #23]
 80047b8:	e017      	b.n	80047ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d108      	bne.n	80047d2 <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	4619      	mov	r1, r3
 80047c6:	68b8      	ldr	r0, [r7, #8]
 80047c8:	f000 f87e 	bl	80048c8 <FLASH_DATAEEPROM_FastProgramHalfWord>
 80047cc:	4603      	mov	r3, r0
 80047ce:	75fb      	strb	r3, [r7, #23]
 80047d0:	e00b      	b.n	80047ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d106      	bne.n	80047e6 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	68b8      	ldr	r0, [r7, #8]
 80047dc:	f000 f8ec 	bl	80049b8 <FLASH_DATAEEPROM_FastProgramWord>
 80047e0:	4603      	mov	r3, r0
 80047e2:	75fb      	strb	r3, [r7, #23]
 80047e4:	e001      	b.n	80047ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80047ea:	4b04      	ldr	r3, [pc, #16]	; (80047fc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	741a      	strb	r2, [r3, #16]

  return status;
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000d5c 	.word	0x20000d5c

08004800 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004818:	f24c 3050 	movw	r0, #50000	; 0xc350
 800481c:	f7ff fe7e 	bl	800451c <FLASH_WaitForLastOperation>
 8004820:	4603      	mov	r3, r0
 8004822:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d145      	bne.n	80048b6 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800482a:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4a24      	ldr	r2, [pc, #144]	; (80048c0 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8004830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004834:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d009      	beq.n	8004850 <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004842:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004846:	f7ff fe69 	bl	800451c <FLASH_WaitForLastOperation>
 800484a:	4603      	mov	r3, r0
 800484c:	75fb      	strb	r3, [r7, #23]
 800484e:	e032      	b.n	80048b6 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	22ff      	movs	r2, #255	; 0xff
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	43db      	mvns	r3, r3
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4013      	ands	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f023 0303 	bic.w	r3, r3, #3
 800487e:	4619      	mov	r1, r3
 8004880:	2002      	movs	r0, #2
 8004882:	f7ff ff1d 	bl	80046c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800488a:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 800488c:	2200      	movs	r2, #0
 800488e:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f023 0303 	bic.w	r3, r3, #3
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4619      	mov	r1, r3
 800489a:	2010      	movs	r0, #16
 800489c:	f7ff ff42 	bl	8004724 <HAL_FLASHEx_DATAEEPROM_Program>
 80048a0:	4603      	mov	r3, r0
 80048a2:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80048a4:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80048a6:	7c1b      	ldrb	r3, [r3, #16]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e003      	b.n	80048b8 <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40023c00 	.word	0x40023c00
 80048c4:	20000d5c 	.word	0x20000d5c

080048c8 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048e4:	f7ff fe1a 	bl	800451c <FLASH_WaitForLastOperation>
 80048e8:	4603      	mov	r3, r0
 80048ea:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d158      	bne.n	80049a4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80048f2:	4b2f      	ldr	r3, [pc, #188]	; (80049b0 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4a2e      	ldr	r2, [pc, #184]	; (80049b0 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 80048f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048fc:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 80048fe:	887b      	ldrh	r3, [r7, #2]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800490a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800490e:	f7ff fe05 	bl	800451c <FLASH_WaitForLastOperation>
 8004912:	4603      	mov	r3, r0
 8004914:	75fb      	strb	r3, [r7, #23]
 8004916:	e045      	b.n	80049a4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8004918:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 800491a:	2200      	movs	r2, #0
 800491c:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	2b03      	cmp	r3, #3
 8004926:	d028      	beq.n	800497a <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f023 0303 	bic.w	r3, r3, #3
 800492e:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	43db      	mvns	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	4619      	mov	r1, r3
 800495a:	2002      	movs	r0, #2
 800495c:	f7ff feb0 	bl	80046c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 8004960:	4603      	mov	r3, r0
 8004962:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f023 0303 	bic.w	r3, r3, #3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4619      	mov	r1, r3
 800496e:	2010      	movs	r0, #16
 8004970:	f7ff fed8 	bl	8004724 <HAL_FLASHEx_DATAEEPROM_Program>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]
 8004978:	e00b      	b.n	8004992 <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 800497a:	2200      	movs	r2, #0
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	2004      	movs	r0, #4
 8004980:	f7ff fed0 	bl	8004724 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3301      	adds	r3, #1
 8004988:	2200      	movs	r2, #0
 800498a:	4619      	mov	r1, r3
 800498c:	2004      	movs	r0, #4
 800498e:	f7ff fec9 	bl	8004724 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8004994:	7c1b      	ldrb	r3, [r3, #16]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 800499a:	2302      	movs	r3, #2
 800499c:	e003      	b.n	80049a6 <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40023c00 	.word	0x40023c00
 80049b4:	20000d5c 	.word	0x20000d5c

080049b8 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049ca:	f7ff fda7 	bl	800451c <FLASH_WaitForLastOperation>
 80049ce:	4603      	mov	r3, r0
 80049d0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10e      	bne.n	80049f6 <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80049d8:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 80049de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e2:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049ee:	f7ff fd95 	bl	800451c <FLASH_WaitForLastOperation>
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40023c00 	.word	0x40023c00

08004a04 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a20:	f7ff fd7c 	bl	800451c <FLASH_WaitForLastOperation>
 8004a24:	4603      	mov	r3, r0
 8004a26:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d13f      	bne.n	8004aae <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a3e:	f7ff fd6d 	bl	800451c <FLASH_WaitForLastOperation>
 8004a42:	4603      	mov	r3, r0
 8004a44:	75fb      	strb	r3, [r7, #23]
 8004a46:	e032      	b.n	8004aae <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f023 0303 	bic.w	r3, r3, #3
 8004a4e:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	22ff      	movs	r2, #255	; 0xff
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	4619      	mov	r1, r3
 8004a78:	2002      	movs	r0, #2
 8004a7a:	f7ff fe21 	bl	80046c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4619      	mov	r1, r3
 8004a92:	2010      	movs	r0, #16
 8004a94:	f7ff fe46 	bl	8004724 <HAL_FLASHEx_DATAEEPROM_Program>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8004a9e:	7c1b      	ldrb	r3, [r3, #16]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <FLASH_DATAEEPROM_ProgramByte+0xa4>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e003      	b.n	8004ab0 <FLASH_DATAEEPROM_ProgramByte+0xac>
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000d5c 	.word	0x20000d5c

08004abc <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ad4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ad8:	f7ff fd20 	bl	800451c <FLASH_WaitForLastOperation>
 8004adc:	4603      	mov	r3, r0
 8004ade:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d152      	bne.n	8004b8c <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d009      	beq.n	8004b00 <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	887a      	ldrh	r2, [r7, #2]
 8004af0:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004af2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004af6:	f7ff fd11 	bl	800451c <FLASH_WaitForLastOperation>
 8004afa:	4603      	mov	r3, r0
 8004afc:	75fb      	strb	r3, [r7, #23]
 8004afe:	e045      	b.n	8004b8c <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8004b00:	4b25      	ldr	r3, [pc, #148]	; (8004b98 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d028      	beq.n	8004b62 <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	43db      	mvns	r3, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4013      	ands	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f023 0303 	bic.w	r3, r3, #3
 8004b40:	4619      	mov	r1, r3
 8004b42:	2002      	movs	r0, #2
 8004b44:	f7ff fdbc 	bl	80046c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4619      	mov	r1, r3
 8004b56:	2010      	movs	r0, #16
 8004b58:	f7ff fde4 	bl	8004724 <HAL_FLASHEx_DATAEEPROM_Program>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	75fb      	strb	r3, [r7, #23]
 8004b60:	e00b      	b.n	8004b7a <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 8004b62:	2200      	movs	r2, #0
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	2004      	movs	r0, #4
 8004b68:	f7ff fddc 	bl	8004724 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	2200      	movs	r2, #0
 8004b72:	4619      	mov	r1, r3
 8004b74:	2004      	movs	r0, #4
 8004b76:	f7ff fdd5 	bl	8004724 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8004b7c:	7c1b      	ldrb	r3, [r3, #16]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e003      	b.n	8004b8e <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 8004b86:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000d5c 	.word	0x20000d5c

08004b9c <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004baa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004bae:	f7ff fcb5 	bl	800451c <FLASH_WaitForLastOperation>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d108      	bne.n	8004bce <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004bc2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004bc6:	f7ff fca9 	bl	800451c <FLASH_WaitForLastOperation>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004bee:	e154      	b.n	8004e9a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8146 	beq.w	8004e94 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d005      	beq.n	8004c20 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d130      	bne.n	8004c82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	43db      	mvns	r3, r3
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4013      	ands	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004c56:	2201      	movs	r2, #1
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	f003 0201 	and.w	r2, r3, #1
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d017      	beq.n	8004cbe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	2203      	movs	r2, #3
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d123      	bne.n	8004d12 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	08da      	lsrs	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3208      	adds	r2, #8
 8004cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cd6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	220f      	movs	r2, #15
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4013      	ands	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	08da      	lsrs	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3208      	adds	r2, #8
 8004d0c:	6939      	ldr	r1, [r7, #16]
 8004d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4013      	ands	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 0203 	and.w	r2, r3, #3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 80a0 	beq.w	8004e94 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d54:	4b58      	ldr	r3, [pc, #352]	; (8004eb8 <HAL_GPIO_Init+0x2e0>)
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	4a57      	ldr	r2, [pc, #348]	; (8004eb8 <HAL_GPIO_Init+0x2e0>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6213      	str	r3, [r2, #32]
 8004d60:	4b55      	ldr	r3, [pc, #340]	; (8004eb8 <HAL_GPIO_Init+0x2e0>)
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004d6c:	4a53      	ldr	r2, [pc, #332]	; (8004ebc <HAL_GPIO_Init+0x2e4>)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	089b      	lsrs	r3, r3, #2
 8004d72:	3302      	adds	r3, #2
 8004d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	220f      	movs	r2, #15
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a4b      	ldr	r2, [pc, #300]	; (8004ec0 <HAL_GPIO_Init+0x2e8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d019      	beq.n	8004dcc <HAL_GPIO_Init+0x1f4>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a4a      	ldr	r2, [pc, #296]	; (8004ec4 <HAL_GPIO_Init+0x2ec>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <HAL_GPIO_Init+0x1f0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a49      	ldr	r2, [pc, #292]	; (8004ec8 <HAL_GPIO_Init+0x2f0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00d      	beq.n	8004dc4 <HAL_GPIO_Init+0x1ec>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a48      	ldr	r2, [pc, #288]	; (8004ecc <HAL_GPIO_Init+0x2f4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <HAL_GPIO_Init+0x1e8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a47      	ldr	r2, [pc, #284]	; (8004ed0 <HAL_GPIO_Init+0x2f8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <HAL_GPIO_Init+0x1e4>
 8004db8:	2304      	movs	r3, #4
 8004dba:	e008      	b.n	8004dce <HAL_GPIO_Init+0x1f6>
 8004dbc:	2305      	movs	r3, #5
 8004dbe:	e006      	b.n	8004dce <HAL_GPIO_Init+0x1f6>
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e004      	b.n	8004dce <HAL_GPIO_Init+0x1f6>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e002      	b.n	8004dce <HAL_GPIO_Init+0x1f6>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_GPIO_Init+0x1f6>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	f002 0203 	and.w	r2, r2, #3
 8004dd4:	0092      	lsls	r2, r2, #2
 8004dd6:	4093      	lsls	r3, r2
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004dde:	4937      	ldr	r1, [pc, #220]	; (8004ebc <HAL_GPIO_Init+0x2e4>)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	089b      	lsrs	r3, r3, #2
 8004de4:	3302      	adds	r3, #2
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dec:	4b39      	ldr	r3, [pc, #228]	; (8004ed4 <HAL_GPIO_Init+0x2fc>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	43db      	mvns	r3, r3
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e10:	4a30      	ldr	r2, [pc, #192]	; (8004ed4 <HAL_GPIO_Init+0x2fc>)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e16:	4b2f      	ldr	r3, [pc, #188]	; (8004ed4 <HAL_GPIO_Init+0x2fc>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4013      	ands	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e3a:	4a26      	ldr	r2, [pc, #152]	; (8004ed4 <HAL_GPIO_Init+0x2fc>)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e40:	4b24      	ldr	r3, [pc, #144]	; (8004ed4 <HAL_GPIO_Init+0x2fc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e64:	4a1b      	ldr	r2, [pc, #108]	; (8004ed4 <HAL_GPIO_Init+0x2fc>)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <HAL_GPIO_Init+0x2fc>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	43db      	mvns	r3, r3
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4013      	ands	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e8e:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <HAL_GPIO_Init+0x2fc>)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	3301      	adds	r3, #1
 8004e98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f47f aea3 	bne.w	8004bf0 <HAL_GPIO_Init+0x18>
  }
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40020000 	.word	0x40020000
 8004ec4:	40020400 	.word	0x40020400
 8004ec8:	40020800 	.word	0x40020800
 8004ecc:	40020c00 	.word	0x40020c00
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40010400 	.word	0x40010400

08004ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	887b      	ldrh	r3, [r7, #2]
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	e001      	b.n	8004efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr

08004f06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	807b      	strh	r3, [r7, #2]
 8004f12:	4613      	mov	r3, r2
 8004f14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f16:	787b      	ldrb	r3, [r7, #1]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f1c:	887a      	ldrh	r2, [r7, #2]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004f22:	e003      	b.n	8004f2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004f24:	887b      	ldrh	r3, [r7, #2]
 8004f26:	041a      	lsls	r2, r3, #16
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	619a      	str	r2, [r3, #24]
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr
	...

08004f38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	88fb      	ldrh	r3, [r7, #6]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d006      	beq.n	8004f5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f4e:	4a05      	ldr	r2, [pc, #20]	; (8004f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe f9cc 	bl	80032f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40010400 	.word	0x40010400

08004f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e12b      	b.n	80051d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fd ffca 	bl	8002f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2224      	movs	r2, #36	; 0x24
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fcc:	f002 fdb0 	bl	8007b30 <HAL_RCC_GetPCLK1Freq>
 8004fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4a81      	ldr	r2, [pc, #516]	; (80051dc <HAL_I2C_Init+0x274>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d807      	bhi.n	8004fec <HAL_I2C_Init+0x84>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a80      	ldr	r2, [pc, #512]	; (80051e0 <HAL_I2C_Init+0x278>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	bf94      	ite	ls
 8004fe4:	2301      	movls	r3, #1
 8004fe6:	2300      	movhi	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	e006      	b.n	8004ffa <HAL_I2C_Init+0x92>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a7d      	ldr	r2, [pc, #500]	; (80051e4 <HAL_I2C_Init+0x27c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	bf94      	ite	ls
 8004ff4:	2301      	movls	r3, #1
 8004ff6:	2300      	movhi	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e0e7      	b.n	80051d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4a78      	ldr	r2, [pc, #480]	; (80051e8 <HAL_I2C_Init+0x280>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	0c9b      	lsrs	r3, r3, #18
 800500c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	4a6a      	ldr	r2, [pc, #424]	; (80051dc <HAL_I2C_Init+0x274>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d802      	bhi.n	800503c <HAL_I2C_Init+0xd4>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	3301      	adds	r3, #1
 800503a:	e009      	b.n	8005050 <HAL_I2C_Init+0xe8>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	4a69      	ldr	r2, [pc, #420]	; (80051ec <HAL_I2C_Init+0x284>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	099b      	lsrs	r3, r3, #6
 800504e:	3301      	adds	r3, #1
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	430b      	orrs	r3, r1
 8005056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	495c      	ldr	r1, [pc, #368]	; (80051dc <HAL_I2C_Init+0x274>)
 800506c:	428b      	cmp	r3, r1
 800506e:	d819      	bhi.n	80050a4 <HAL_I2C_Init+0x13c>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	1e59      	subs	r1, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	fbb1 f3f3 	udiv	r3, r1, r3
 800507e:	1c59      	adds	r1, r3, #1
 8005080:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005084:	400b      	ands	r3, r1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_I2C_Init+0x138>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1e59      	subs	r1, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	fbb1 f3f3 	udiv	r3, r1, r3
 8005098:	3301      	adds	r3, #1
 800509a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800509e:	e051      	b.n	8005144 <HAL_I2C_Init+0x1dc>
 80050a0:	2304      	movs	r3, #4
 80050a2:	e04f      	b.n	8005144 <HAL_I2C_Init+0x1dc>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d111      	bne.n	80050d0 <HAL_I2C_Init+0x168>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1e58      	subs	r0, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6859      	ldr	r1, [r3, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	440b      	add	r3, r1
 80050ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80050be:	3301      	adds	r3, #1
 80050c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	e012      	b.n	80050f6 <HAL_I2C_Init+0x18e>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1e58      	subs	r0, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6859      	ldr	r1, [r3, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	0099      	lsls	r1, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80050e6:	3301      	adds	r3, #1
 80050e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_I2C_Init+0x196>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e022      	b.n	8005144 <HAL_I2C_Init+0x1dc>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10e      	bne.n	8005124 <HAL_I2C_Init+0x1bc>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1e58      	subs	r0, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6859      	ldr	r1, [r3, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	440b      	add	r3, r1
 8005114:	fbb0 f3f3 	udiv	r3, r0, r3
 8005118:	3301      	adds	r3, #1
 800511a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800511e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005122:	e00f      	b.n	8005144 <HAL_I2C_Init+0x1dc>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	1e58      	subs	r0, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6859      	ldr	r1, [r3, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	0099      	lsls	r1, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	fbb0 f3f3 	udiv	r3, r0, r3
 800513a:	3301      	adds	r3, #1
 800513c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	6809      	ldr	r1, [r1, #0]
 8005148:	4313      	orrs	r3, r2
 800514a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69da      	ldr	r2, [r3, #28]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6911      	ldr	r1, [r2, #16]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68d2      	ldr	r2, [r2, #12]
 800517e:	4311      	orrs	r1, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	430b      	orrs	r3, r1
 8005186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695a      	ldr	r2, [r3, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	000186a0 	.word	0x000186a0
 80051e0:	001e847f 	.word	0x001e847f
 80051e4:	003d08ff 	.word	0x003d08ff
 80051e8:	431bde83 	.word	0x431bde83
 80051ec:	10624dd3 	.word	0x10624dd3

080051f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	461a      	mov	r2, r3
 80051fc:	460b      	mov	r3, r1
 80051fe:	817b      	strh	r3, [r7, #10]
 8005200:	4613      	mov	r3, r2
 8005202:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005204:	f7ff f810 	bl	8004228 <HAL_GetTick>
 8005208:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b20      	cmp	r3, #32
 8005214:	f040 80e0 	bne.w	80053d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	2319      	movs	r3, #25
 800521e:	2201      	movs	r2, #1
 8005220:	4970      	ldr	r1, [pc, #448]	; (80053e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f964 	bl	80054f0 <I2C_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800522e:	2302      	movs	r3, #2
 8005230:	e0d3      	b.n	80053da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_I2C_Master_Transmit+0x50>
 800523c:	2302      	movs	r3, #2
 800523e:	e0cc      	b.n	80053da <HAL_I2C_Master_Transmit+0x1ea>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b01      	cmp	r3, #1
 8005254:	d007      	beq.n	8005266 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 0201 	orr.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005274:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2221      	movs	r2, #33	; 0x21
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2210      	movs	r2, #16
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	893a      	ldrh	r2, [r7, #8]
 8005296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4a50      	ldr	r2, [pc, #320]	; (80053e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80052a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052a8:	8979      	ldrh	r1, [r7, #10]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6a3a      	ldr	r2, [r7, #32]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f89c 	bl	80053ec <I2C_MasterRequestWrite>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e08d      	b.n	80053da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80052d4:	e066      	b.n	80053a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	6a39      	ldr	r1, [r7, #32]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f9de 	bl	800569c <I2C_WaitOnTXEFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00d      	beq.n	8005302 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d107      	bne.n	80052fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e06b      	b.n	80053da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	781a      	ldrb	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b04      	cmp	r3, #4
 800533e:	d11b      	bne.n	8005378 <HAL_I2C_Master_Transmit+0x188>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005344:	2b00      	cmp	r3, #0
 8005346:	d017      	beq.n	8005378 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	781a      	ldrb	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	6a39      	ldr	r1, [r7, #32]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f9ce 	bl	800571e <I2C_WaitOnBTFFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	2b04      	cmp	r3, #4
 800538e:	d107      	bne.n	80053a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e01a      	b.n	80053da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d194      	bne.n	80052d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e000      	b.n	80053da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	00100002 	.word	0x00100002
 80053e8:	ffff0000 	.word	0xffff0000

080053ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	460b      	mov	r3, r1
 80053fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d006      	beq.n	8005416 <I2C_MasterRequestWrite+0x2a>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d003      	beq.n	8005416 <I2C_MasterRequestWrite+0x2a>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005414:	d108      	bne.n	8005428 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e00b      	b.n	8005440 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	2b12      	cmp	r3, #18
 800542e:	d107      	bne.n	8005440 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800543e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f84f 	bl	80054f0 <I2C_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00d      	beq.n	8005474 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005466:	d103      	bne.n	8005470 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800546e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e035      	b.n	80054e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800547c:	d108      	bne.n	8005490 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800547e:	897b      	ldrh	r3, [r7, #10]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800548c:	611a      	str	r2, [r3, #16]
 800548e:	e01b      	b.n	80054c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005490:	897b      	ldrh	r3, [r7, #10]
 8005492:	11db      	asrs	r3, r3, #7
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f003 0306 	and.w	r3, r3, #6
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f063 030f 	orn	r3, r3, #15
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	490e      	ldr	r1, [pc, #56]	; (80054e8 <I2C_MasterRequestWrite+0xfc>)
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f875 	bl	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e010      	b.n	80054e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054be:	897b      	ldrh	r3, [r7, #10]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4907      	ldr	r1, [pc, #28]	; (80054ec <I2C_MasterRequestWrite+0x100>)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f865 	bl	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	00010008 	.word	0x00010008
 80054ec:	00010002 	.word	0x00010002

080054f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	4613      	mov	r3, r2
 80054fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005500:	e025      	b.n	800554e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d021      	beq.n	800554e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550a:	f7fe fe8d 	bl	8004228 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d302      	bcc.n	8005520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d116      	bne.n	800554e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e023      	b.n	8005596 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	0c1b      	lsrs	r3, r3, #16
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10d      	bne.n	8005574 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	43da      	mvns	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	e00c      	b.n	800558e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	43da      	mvns	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	429a      	cmp	r2, r3
 8005592:	d0b6      	beq.n	8005502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
 80055aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ac:	e051      	b.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055bc:	d123      	bne.n	8005606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0204 	orr.w	r2, r3, #4
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e046      	b.n	8005694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d021      	beq.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fe fe0b 	bl	8004228 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d116      	bne.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f043 0220 	orr.w	r2, r3, #32
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e020      	b.n	8005694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d10c      	bne.n	8005676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	43da      	mvns	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4013      	ands	r3, r2
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf14      	ite	ne
 800566e:	2301      	movne	r3, #1
 8005670:	2300      	moveq	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	e00b      	b.n	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	43da      	mvns	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4013      	ands	r3, r2
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d18d      	bne.n	80055ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056a8:	e02d      	b.n	8005706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f878 	bl	80057a0 <I2C_IsAcknowledgeFailed>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e02d      	b.n	8005716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d021      	beq.n	8005706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c2:	f7fe fdb1 	bl	8004228 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d302      	bcc.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d116      	bne.n	8005706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0220 	orr.w	r2, r3, #32
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e007      	b.n	8005716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005710:	2b80      	cmp	r3, #128	; 0x80
 8005712:	d1ca      	bne.n	80056aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800572a:	e02d      	b.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f837 	bl	80057a0 <I2C_IsAcknowledgeFailed>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e02d      	b.n	8005798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	d021      	beq.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005744:	f7fe fd70 	bl	8004228 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	d302      	bcc.n	800575a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d116      	bne.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	f043 0220 	orr.w	r2, r3, #32
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e007      	b.n	8005798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b04      	cmp	r3, #4
 8005794:	d1ca      	bne.n	800572c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b6:	d11b      	bne.n	80057f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	f043 0204 	orr.w	r2, r3, #4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057fe:	b08b      	sub	sp, #44	; 0x2c
 8005800:	af06      	add	r7, sp, #24
 8005802:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e0d0      	b.n	80059b0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f008 f85c 	bl	800d8e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2203      	movs	r2, #3
 800582c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f003 fd7d 	bl	8009334 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]
 800583e:	e04c      	b.n	80058da <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	440b      	add	r3, r1
 8005850:	3301      	adds	r3, #1
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	440b      	add	r3, r1
 8005866:	7bfa      	ldrb	r2, [r7, #15]
 8005868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800586a:	7bfa      	ldrb	r2, [r7, #15]
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	b298      	uxth	r0, r3
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	440b      	add	r3, r1
 800587c:	3336      	adds	r3, #54	; 0x36
 800587e:	4602      	mov	r2, r0
 8005880:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	440b      	add	r3, r1
 8005892:	3303      	adds	r3, #3
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005898:	7bfa      	ldrb	r2, [r7, #15]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	440b      	add	r3, r1
 80058a6:	3338      	adds	r3, #56	; 0x38
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058ac:	7bfa      	ldrb	r2, [r7, #15]
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	440b      	add	r3, r1
 80058ba:	333c      	adds	r3, #60	; 0x3c
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058c0:	7bfa      	ldrb	r2, [r7, #15]
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	440b      	add	r3, r1
 80058ce:	3340      	adds	r3, #64	; 0x40
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	3301      	adds	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]
 80058da:	7bfa      	ldrb	r2, [r7, #15]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d3ad      	bcc.n	8005840 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058e4:	2300      	movs	r3, #0
 80058e6:	73fb      	strb	r3, [r7, #15]
 80058e8:	e044      	b.n	8005974 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058ea:	7bfa      	ldrb	r2, [r7, #15]
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	440b      	add	r3, r1
 80058f8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005900:	7bfa      	ldrb	r2, [r7, #15]
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	440b      	add	r3, r1
 800590e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005912:	7bfa      	ldrb	r2, [r7, #15]
 8005914:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005916:	7bfa      	ldrb	r2, [r7, #15]
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	440b      	add	r3, r1
 8005924:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800592c:	7bfa      	ldrb	r2, [r7, #15]
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	440b      	add	r3, r1
 800593a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005942:	7bfa      	ldrb	r2, [r7, #15]
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	440b      	add	r3, r1
 8005950:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005958:	7bfa      	ldrb	r2, [r7, #15]
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	440b      	add	r3, r1
 8005966:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	3301      	adds	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	7bfa      	ldrb	r2, [r7, #15]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	429a      	cmp	r2, r3
 800597c:	d3b5      	bcc.n	80058ea <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	687e      	ldr	r6, [r7, #4]
 8005986:	466d      	mov	r5, sp
 8005988:	f106 0410 	add.w	r4, r6, #16
 800598c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800598e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	602b      	str	r3, [r5, #0]
 8005994:	1d33      	adds	r3, r6, #4
 8005996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005998:	6838      	ldr	r0, [r7, #0]
 800599a:	f003 fce5 	bl	8009368 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_PCD_Start+0x16>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e016      	b.n	80059fc <HAL_PCD_Start+0x44>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f003 fc94 	bl	8009308 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80059e0:	2101      	movs	r1, #1
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f007 ff5e 	bl	800d8a4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f006 f979 	bl	800bce4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f006 f971 	bl	800bcf8 <USB_ReadInterrupts>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a20:	d102      	bne.n	8005a28 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 faf5 	bl	8006012 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f006 f963 	bl	800bcf8 <USB_ReadInterrupts>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3c:	d112      	bne.n	8005a64 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a50:	b292      	uxth	r2, r2
 8005a52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f007 ffbd 	bl	800d9d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f8c7 	bl	8005bf2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f006 f945 	bl	800bcf8 <USB_ReadInterrupts>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a78:	d10b      	bne.n	8005a92 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a8c:	b292      	uxth	r2, r2
 8005a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f006 f92e 	bl	800bcf8 <USB_ReadInterrupts>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa6:	d10b      	bne.n	8005ac0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aba:	b292      	uxth	r2, r2
 8005abc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f006 f917 	bl	800bcf8 <USB_ReadInterrupts>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad4:	d126      	bne.n	8005b24 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0204 	bic.w	r2, r2, #4
 8005ae8:	b292      	uxth	r2, r2
 8005aea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0208 	bic.w	r2, r2, #8
 8005b00:	b292      	uxth	r2, r2
 8005b02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f007 ff9e 	bl	800da48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b1e:	b292      	uxth	r2, r2
 8005b20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f006 f8e5 	bl	800bcf8 <USB_ReadInterrupts>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b38:	d126      	bne.n	8005b88 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0208 	orr.w	r2, r2, #8
 8005b4c:	b292      	uxth	r2, r2
 8005b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b64:	b292      	uxth	r2, r2
 8005b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0204 	orr.w	r2, r2, #4
 8005b7c:	b292      	uxth	r2, r2
 8005b7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f007 ff46 	bl	800da14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f006 f8b3 	bl	800bcf8 <USB_ReadInterrupts>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9c:	d10e      	bne.n	8005bbc <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005bb0:	b292      	uxth	r2, r2
 8005bb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f007 feff 	bl	800d9ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f006 f899 	bl	800bcf8 <USB_ReadInterrupts>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd0:	d10b      	bne.n	8005bea <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005be4:	b292      	uxth	r2, r2
 8005be6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_PCD_SetAddress+0x1a>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e013      	b.n	8005c34 <HAL_PCD_SetAddress+0x42>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	78fa      	ldrb	r2, [r7, #3]
 8005c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	78fa      	ldrb	r2, [r7, #3]
 8005c22:	4611      	mov	r1, r2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f006 f84a 	bl	800bcbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	4608      	mov	r0, r1
 8005c46:	4611      	mov	r1, r2
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	70fb      	strb	r3, [r7, #3]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	803b      	strh	r3, [r7, #0]
 8005c52:	4613      	mov	r3, r2
 8005c54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da0e      	bge.n	8005c80 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	4413      	add	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	705a      	strb	r2, [r3, #1]
 8005c7e:	e00e      	b.n	8005c9e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	f003 0207 	and.w	r2, r3, #7
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005caa:	883a      	ldrh	r2, [r7, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	78ba      	ldrb	r2, [r7, #2]
 8005cb4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005cc8:	78bb      	ldrb	r3, [r7, #2]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d102      	bne.n	8005cd4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_PCD_EP_Open+0xa6>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e00e      	b.n	8005d00 <HAL_PCD_EP_Open+0xc4>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68f9      	ldr	r1, [r7, #12]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f003 fb59 	bl	80093a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	da0e      	bge.n	8005d3a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	4413      	add	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	705a      	strb	r2, [r3, #1]
 8005d38:	e00e      	b.n	8005d58 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	f003 0207 	and.w	r2, r3, #7
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	4413      	add	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_PCD_EP_Close+0x6a>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e00e      	b.n	8005d90 <HAL_PCD_EP_Close+0x88>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f003 fe7b 	bl	8009a7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	460b      	mov	r3, r1
 8005da6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005da8:	7afb      	ldrb	r3, [r7, #11]
 8005daa:	f003 0207 	and.w	r2, r3, #7
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dd8:	7afb      	ldrb	r3, [r7, #11]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005de4:	7afb      	ldrb	r3, [r7, #11]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6979      	ldr	r1, [r7, #20]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f004 f82d 	bl	8009e54 <USB_EPStartXfer>
 8005dfa:	e005      	b.n	8005e08 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6979      	ldr	r1, [r7, #20]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f004 f826 	bl	8009e54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	f003 0207 	and.w	r2, r3, #7
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	440b      	add	r3, r1
 8005e30:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005e34:	681b      	ldr	r3, [r3, #0]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr

08005e40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	607a      	str	r2, [r7, #4]
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e50:	7afb      	ldrb	r3, [r7, #11]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2200      	movs	r2, #0
 8005e84:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e98:	7afb      	ldrb	r3, [r7, #11]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6979      	ldr	r1, [r7, #20]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f003 ffd3 	bl	8009e54 <USB_EPStartXfer>
 8005eae:	e005      	b.n	8005ebc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6979      	ldr	r1, [r7, #20]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f003 ffcc 	bl	8009e54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	f003 0207 	and.w	r2, r3, #7
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d901      	bls.n	8005ee4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e03e      	b.n	8005f62 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da0e      	bge.n	8005f0a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	4413      	add	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	705a      	strb	r2, [r3, #1]
 8005f08:	e00c      	b.n	8005f24 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f0a:	78fa      	ldrb	r2, [r7, #3]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_PCD_EP_SetStall+0x7e>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e00e      	b.n	8005f62 <HAL_PCD_EP_SetStall+0x9c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68f9      	ldr	r1, [r7, #12]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f005 fdb6 	bl	800bac4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	f003 020f 	and.w	r2, r3, #15
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d901      	bls.n	8005f88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e040      	b.n	800600a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	da0e      	bge.n	8005fae <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	705a      	strb	r2, [r3, #1]
 8005fac:	e00e      	b.n	8005fcc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	f003 0207 	and.w	r2, r3, #7
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_PCD_EP_ClrStall+0x82>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e00e      	b.n	800600a <HAL_PCD_EP_ClrStall+0xa0>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68f9      	ldr	r1, [r7, #12]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f005 fdb2 	bl	800bb64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b08e      	sub	sp, #56	; 0x38
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800601a:	e2ec      	b.n	80065f6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006024:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006026:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006032:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006036:	2b00      	cmp	r3, #0
 8006038:	f040 8161 	bne.w	80062fe <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800603c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800603e:	f003 0310 	and.w	r3, r3, #16
 8006042:	2b00      	cmp	r3, #0
 8006044:	d152      	bne.n	80060ec <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	81fb      	strh	r3, [r7, #14]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	89fb      	ldrh	r3, [r7, #14]
 800605e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006066:	b29b      	uxth	r3, r3
 8006068:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3328      	adds	r3, #40	; 0x28
 800606e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006078:	b29b      	uxth	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	4413      	add	r3, r2
 8006084:	3302      	adds	r3, #2
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	441a      	add	r2, r3
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80060aa:	2100      	movs	r1, #0
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f007 fc6a 	bl	800d986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 829b 	beq.w	80065f6 <PCD_EP_ISR_Handler+0x5e4>
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f040 8296 	bne.w	80065f6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	b292      	uxth	r2, r2
 80060de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80060ea:	e284      	b.n	80065f6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80060fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006102:	2b00      	cmp	r3, #0
 8006104:	d034      	beq.n	8006170 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610e:	b29b      	uxth	r3, r3
 8006110:	461a      	mov	r2, r3
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4413      	add	r3, r2
 800611a:	3306      	adds	r3, #6
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006144:	b29b      	uxth	r3, r3
 8006146:	f005 fe2b 	bl	800bda0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29a      	uxth	r2, r3
 8006152:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006156:	4013      	ands	r3, r2
 8006158:	823b      	strh	r3, [r7, #16]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	8a3a      	ldrh	r2, [r7, #16]
 8006160:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006164:	b292      	uxth	r2, r2
 8006166:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f007 fbdf 	bl	800d92c <HAL_PCD_SetupStageCallback>
 800616e:	e242      	b.n	80065f6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006170:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006174:	2b00      	cmp	r3, #0
 8006176:	f280 823e 	bge.w	80065f6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29a      	uxth	r2, r3
 8006182:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006186:	4013      	ands	r3, r2
 8006188:	83bb      	strh	r3, [r7, #28]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	8bba      	ldrh	r2, [r7, #28]
 8006190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006194:	b292      	uxth	r2, r2
 8006196:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	4413      	add	r3, r2
 80061ac:	3306      	adds	r3, #6
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d019      	beq.n	8006200 <PCD_EP_ISR_Handler+0x1ee>
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d015      	beq.n	8006200 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	6959      	ldr	r1, [r3, #20]
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f005 fddb 	bl	800bda0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	695a      	ldr	r2, [r3, #20]
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	441a      	add	r2, r3
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80061f8:	2100      	movs	r1, #0
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f007 fba8 	bl	800d950 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620c:	2b00      	cmp	r3, #0
 800620e:	f040 81f2 	bne.w	80065f6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	61bb      	str	r3, [r7, #24]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006220:	b29b      	uxth	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	4413      	add	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d112      	bne.n	8006260 <PCD_EP_ISR_Handler+0x24e>
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006244:	b29a      	uxth	r2, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006258:	b29a      	uxth	r2, r3
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	801a      	strh	r2, [r3, #0]
 800625e:	e02f      	b.n	80062c0 <PCD_EP_ISR_Handler+0x2ae>
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b3e      	cmp	r3, #62	; 0x3e
 8006266:	d813      	bhi.n	8006290 <PCD_EP_ISR_Handler+0x27e>
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	633b      	str	r3, [r7, #48]	; 0x30
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <PCD_EP_ISR_Handler+0x270>
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	3301      	adds	r3, #1
 8006280:	633b      	str	r3, [r7, #48]	; 0x30
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	b29b      	uxth	r3, r3
 8006286:	029b      	lsls	r3, r3, #10
 8006288:	b29a      	uxth	r2, r3
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	e017      	b.n	80062c0 <PCD_EP_ISR_Handler+0x2ae>
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	633b      	str	r3, [r7, #48]	; 0x30
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d102      	bne.n	80062aa <PCD_EP_ISR_Handler+0x298>
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	3b01      	subs	r3, #1
 80062a8:	633b      	str	r3, [r7, #48]	; 0x30
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	029b      	lsls	r3, r3, #10
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d0:	827b      	strh	r3, [r7, #18]
 80062d2:	8a7b      	ldrh	r3, [r7, #18]
 80062d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062d8:	827b      	strh	r3, [r7, #18]
 80062da:	8a7b      	ldrh	r3, [r7, #18]
 80062dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062e0:	827b      	strh	r3, [r7, #18]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	8a7b      	ldrh	r3, [r7, #18]
 80062e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	8013      	strh	r3, [r2, #0]
 80062fc:	e17b      	b.n	80065f6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006310:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006314:	2b00      	cmp	r3, #0
 8006316:	f280 80ea 	bge.w	80064ee <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29a      	uxth	r2, r3
 800632c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006330:	4013      	ands	r3, r2
 8006332:	853b      	strh	r3, [r7, #40]	; 0x28
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006344:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006348:	b292      	uxth	r2, r2
 800634a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800634c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	4413      	add	r3, r2
 8006360:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	7b1b      	ldrb	r3, [r3, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d122      	bne.n	80063b0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006372:	b29b      	uxth	r3, r3
 8006374:	461a      	mov	r2, r3
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	4413      	add	r3, r2
 800637e:	3306      	adds	r3, #6
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006392:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006394:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8087 	beq.w	80064aa <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	6959      	ldr	r1, [r3, #20]
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	88da      	ldrh	r2, [r3, #6]
 80063a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063aa:	f005 fcf9 	bl	800bda0 <USB_ReadPMA>
 80063ae:	e07c      	b.n	80064aa <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	78db      	ldrb	r3, [r3, #3]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d108      	bne.n	80063ca <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80063b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80063ba:	461a      	mov	r2, r3
 80063bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f927 	bl	8006612 <HAL_PCD_EP_DB_Receive>
 80063c4:	4603      	mov	r3, r0
 80063c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80063c8:	e06f      	b.n	80064aa <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e4:	847b      	strh	r3, [r7, #34]	; 0x22
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	441a      	add	r2, r3
 80063f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006402:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006406:	b29b      	uxth	r3, r3
 8006408:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29b      	uxth	r3, r3
 800641c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d021      	beq.n	8006468 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642c:	b29b      	uxth	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4413      	add	r3, r2
 8006438:	3302      	adds	r3, #2
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800644c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800644e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006450:	2b00      	cmp	r3, #0
 8006452:	d02a      	beq.n	80064aa <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	6959      	ldr	r1, [r3, #20]
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	891a      	ldrh	r2, [r3, #8]
 8006460:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006462:	f005 fc9d 	bl	800bda0 <USB_ReadPMA>
 8006466:	e020      	b.n	80064aa <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006470:	b29b      	uxth	r3, r3
 8006472:	461a      	mov	r2, r3
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	4413      	add	r3, r2
 800647c:	3306      	adds	r3, #6
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006490:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006492:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006494:	2b00      	cmp	r3, #0
 8006496:	d008      	beq.n	80064aa <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	6959      	ldr	r1, [r3, #20]
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	895a      	ldrh	r2, [r3, #10]
 80064a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064a6:	f005 fc7b 	bl	800bda0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	69da      	ldr	r2, [r3, #28]
 80064ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064b0:	441a      	add	r2, r3
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064bc:	441a      	add	r2, r3
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d004      	beq.n	80064d4 <PCD_EP_ISR_Handler+0x4c2>
 80064ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d206      	bcs.n	80064e2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f007 fa38 	bl	800d950 <HAL_PCD_DataOutStageCallback>
 80064e0:	e005      	b.n	80064ee <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064e8:	4618      	mov	r0, r3
 80064ea:	f003 fcb3 	bl	8009e54 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80064ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80064f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d07e      	beq.n	80065f6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80064f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4413      	add	r3, r2
 800650a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	843b      	strh	r3, [r7, #32]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	441a      	add	r2, r3
 8006536:	8c3b      	ldrh	r3, [r7, #32]
 8006538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006540:	b29b      	uxth	r3, r3
 8006542:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	2b03      	cmp	r3, #3
 800654a:	d00c      	beq.n	8006566 <PCD_EP_ISR_Handler+0x554>
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	78db      	ldrb	r3, [r3, #3]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006558:	2b02      	cmp	r3, #2
 800655a:	d146      	bne.n	80065ea <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800655c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d141      	bne.n	80065ea <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656e:	b29b      	uxth	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4413      	add	r3, r2
 800657a:	3302      	adds	r3, #2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800658e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	8bfb      	ldrh	r3, [r7, #30]
 8006596:	429a      	cmp	r2, r3
 8006598:	d906      	bls.n	80065a8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	8bfb      	ldrh	r3, [r7, #30]
 80065a0:	1ad2      	subs	r2, r2, r3
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	619a      	str	r2, [r3, #24]
 80065a6:	e002      	b.n	80065ae <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	2200      	movs	r2, #0
 80065ac:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f007 f9e2 	bl	800d986 <HAL_PCD_DataInStageCallback>
 80065c2:	e018      	b.n	80065f6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	695a      	ldr	r2, [r3, #20]
 80065c8:	8bfb      	ldrh	r3, [r7, #30]
 80065ca:	441a      	add	r2, r3
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	8bfb      	ldrh	r3, [r7, #30]
 80065d6:	441a      	add	r2, r3
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065e2:	4618      	mov	r0, r3
 80065e4:	f003 fc36 	bl	8009e54 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80065e8:	e005      	b.n	80065f6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80065ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80065ec:	461a      	mov	r2, r3
 80065ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f91b 	bl	800682c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065fe:	b29b      	uxth	r3, r3
 8006600:	b21b      	sxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	f6ff ad0a 	blt.w	800601c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3738      	adds	r7, #56	; 0x38
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b088      	sub	sp, #32
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	4613      	mov	r3, r2
 800661e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006620:	88fb      	ldrh	r3, [r7, #6]
 8006622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d07e      	beq.n	8006728 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006632:	b29b      	uxth	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	4413      	add	r3, r2
 800663e:	3302      	adds	r3, #2
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006652:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	699a      	ldr	r2, [r3, #24]
 8006658:	8b7b      	ldrh	r3, [r7, #26]
 800665a:	429a      	cmp	r2, r3
 800665c:	d306      	bcc.n	800666c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	8b7b      	ldrh	r3, [r7, #26]
 8006664:	1ad2      	subs	r2, r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	619a      	str	r2, [r3, #24]
 800666a:	e002      	b.n	8006672 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2200      	movs	r2, #0
 8006670:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d123      	bne.n	80066c2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006694:	833b      	strh	r3, [r7, #24]
 8006696:	8b3b      	ldrh	r3, [r7, #24]
 8006698:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800669c:	833b      	strh	r3, [r7, #24]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	8b3b      	ldrh	r3, [r7, #24]
 80066ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066be:	b29b      	uxth	r3, r3
 80066c0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01f      	beq.n	800670c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e6:	82fb      	strh	r3, [r7, #22]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	441a      	add	r2, r3
 80066f6:	8afb      	ldrh	r3, [r7, #22]
 80066f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006708:	b29b      	uxth	r3, r3
 800670a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800670c:	8b7b      	ldrh	r3, [r7, #26]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 8087 	beq.w	8006822 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6959      	ldr	r1, [r3, #20]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	891a      	ldrh	r2, [r3, #8]
 8006720:	8b7b      	ldrh	r3, [r7, #26]
 8006722:	f005 fb3d 	bl	800bda0 <USB_ReadPMA>
 8006726:	e07c      	b.n	8006822 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006730:	b29b      	uxth	r3, r3
 8006732:	461a      	mov	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	4413      	add	r3, r2
 800673c:	3306      	adds	r3, #6
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	6812      	ldr	r2, [r2, #0]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006750:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	8b7b      	ldrh	r3, [r7, #26]
 8006758:	429a      	cmp	r2, r3
 800675a:	d306      	bcc.n	800676a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	8b7b      	ldrh	r3, [r7, #26]
 8006762:	1ad2      	subs	r2, r2, r3
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	619a      	str	r2, [r3, #24]
 8006768:	e002      	b.n	8006770 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2200      	movs	r2, #0
 800676e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d123      	bne.n	80067c0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800678e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006792:	83fb      	strh	r3, [r7, #30]
 8006794:	8bfb      	ldrh	r3, [r7, #30]
 8006796:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800679a:	83fb      	strh	r3, [r7, #30]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	461a      	mov	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	441a      	add	r2, r3
 80067aa:	8bfb      	ldrh	r3, [r7, #30]
 80067ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067bc:	b29b      	uxth	r3, r3
 80067be:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d11f      	bne.n	800680a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e4:	83bb      	strh	r3, [r7, #28]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	8bbb      	ldrh	r3, [r7, #28]
 80067f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006802:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006806:	b29b      	uxth	r3, r3
 8006808:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800680a:	8b7b      	ldrh	r3, [r7, #26]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d008      	beq.n	8006822 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	6959      	ldr	r1, [r3, #20]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	895a      	ldrh	r2, [r3, #10]
 800681c:	8b7b      	ldrh	r3, [r7, #26]
 800681e:	f005 fabf 	bl	800bda0 <USB_ReadPMA>
    }
  }

  return count;
 8006822:	8b7b      	ldrh	r3, [r7, #26]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b0a2      	sub	sp, #136	; 0x88
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800683a:	88fb      	ldrh	r3, [r7, #6]
 800683c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 81c7 	beq.w	8006bd4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684e:	b29b      	uxth	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	4413      	add	r3, r2
 800685a:	3302      	adds	r3, #2
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	6812      	ldr	r2, [r2, #0]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800686e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800687a:	429a      	cmp	r2, r3
 800687c:	d907      	bls.n	800688e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	619a      	str	r2, [r3, #24]
 800688c:	e002      	b.n	8006894 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2200      	movs	r2, #0
 8006892:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f040 80b9 	bne.w	8006a10 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d126      	bne.n	80068f4 <HAL_PCD_EP_DB_Transmit+0xc8>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	4413      	add	r3, r2
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	011a      	lsls	r2, r3, #4
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	4413      	add	r3, r2
 80068c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068d8:	b29a      	uxth	r2, r3
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	801a      	strh	r2, [r3, #0]
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	e01a      	b.n	800692a <HAL_PCD_EP_DB_Transmit+0xfe>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d116      	bne.n	800692a <HAL_PCD_EP_DB_Transmit+0xfe>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	633b      	str	r3, [r7, #48]	; 0x30
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690a:	b29b      	uxth	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	4413      	add	r3, r2
 8006912:	633b      	str	r3, [r7, #48]	; 0x30
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	011a      	lsls	r2, r3, #4
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	4413      	add	r3, r2
 800691e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	2200      	movs	r2, #0
 8006928:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	623b      	str	r3, [r7, #32]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d126      	bne.n	8006986 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006946:	b29b      	uxth	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	4413      	add	r3, r2
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	011a      	lsls	r2, r3, #4
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	4413      	add	r3, r2
 800695a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800696a:	b29a      	uxth	r2, r3
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	801a      	strh	r2, [r3, #0]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29b      	uxth	r3, r3
 8006976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800697a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800697e:	b29a      	uxth	r2, r3
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	801a      	strh	r2, [r3, #0]
 8006984:	e017      	b.n	80069b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	785b      	ldrb	r3, [r3, #1]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d113      	bne.n	80069b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	4413      	add	r3, r2
 800699e:	623b      	str	r3, [r7, #32]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	011a      	lsls	r2, r3, #4
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069ae:	61fb      	str	r3, [r7, #28]
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	2200      	movs	r2, #0
 80069b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	4619      	mov	r1, r3
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f006 ffe2 	bl	800d986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 82d4 	beq.w	8006f76 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e8:	827b      	strh	r3, [r7, #18]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	441a      	add	r2, r3
 80069f8:	8a7b      	ldrh	r3, [r7, #18]
 80069fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	8013      	strh	r3, [r2, #0]
 8006a0e:	e2b2      	b.n	8006f76 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a10:	88fb      	ldrh	r3, [r7, #6]
 8006a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d021      	beq.n	8006a5e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	441a      	add	r2, r3
 8006a46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	f040 8286 	bne.w	8006f76 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	695a      	ldr	r2, [r3, #20]
 8006a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a72:	441a      	add	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a80:	441a      	add	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d309      	bcc.n	8006aa6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	6a1a      	ldr	r2, [r3, #32]
 8006a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	621a      	str	r2, [r3, #32]
 8006aa4:	e015      	b.n	8006ad2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d107      	bne.n	8006abe <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8006aae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ab2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006abc:	e009      	b.n	8006ad2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d155      	bne.n	8006b86 <HAL_PCD_EP_DB_Transmit+0x35a>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	4413      	add	r3, r2
 8006af0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	011a      	lsls	r2, r3, #4
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	4413      	add	r3, r2
 8006afc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
 8006b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d112      	bne.n	8006b2e <HAL_PCD_EP_DB_Transmit+0x302>
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e047      	b.n	8006bbe <HAL_PCD_EP_DB_Transmit+0x392>
 8006b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b30:	2b3e      	cmp	r3, #62	; 0x3e
 8006b32:	d811      	bhi.n	8006b58 <HAL_PCD_EP_DB_Transmit+0x32c>
 8006b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_PCD_EP_DB_Transmit+0x31e>
 8006b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b46:	3301      	adds	r3, #1
 8006b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	029b      	lsls	r3, r3, #10
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	e032      	b.n	8006bbe <HAL_PCD_EP_DB_Transmit+0x392>
 8006b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b60:	f003 031f 	and.w	r3, r3, #31
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <HAL_PCD_EP_DB_Transmit+0x342>
 8006b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	029b      	lsls	r3, r3, #10
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	e01b      	b.n	8006bbe <HAL_PCD_EP_DB_Transmit+0x392>
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	785b      	ldrb	r3, [r3, #1]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d117      	bne.n	8006bbe <HAL_PCD_EP_DB_Transmit+0x392>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	643b      	str	r3, [r7, #64]	; 0x40
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba2:	4413      	add	r3, r2
 8006ba4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	011a      	lsls	r2, r3, #4
 8006bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bae:	4413      	add	r3, r2
 8006bb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	6959      	ldr	r1, [r3, #20]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	891a      	ldrh	r2, [r3, #8]
 8006bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f005 f8a2 	bl	800bd16 <USB_WritePMA>
 8006bd2:	e1d0      	b.n	8006f76 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	4413      	add	r3, r2
 8006be8:	3306      	adds	r3, #6
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	6812      	ldr	r2, [r2, #0]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	699a      	ldr	r2, [r3, #24]
 8006c04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d307      	bcc.n	8006c1c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c14:	1ad2      	subs	r2, r2, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	619a      	str	r2, [r3, #24]
 8006c1a:	e002      	b.n	8006c22 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f040 80c4 	bne.w	8006db4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d126      	bne.n	8006c82 <HAL_PCD_EP_DB_Transmit+0x456>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c48:	4413      	add	r3, r2
 8006c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	011a      	lsls	r2, r3, #4
 8006c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c54:	4413      	add	r3, r2
 8006c56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c7e:	801a      	strh	r2, [r3, #0]
 8006c80:	e01a      	b.n	8006cb8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d116      	bne.n	8006cb8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	677b      	str	r3, [r7, #116]	; 0x74
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c9e:	4413      	add	r3, r2
 8006ca0:	677b      	str	r3, [r7, #116]	; 0x74
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	011a      	lsls	r2, r3, #4
 8006ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006caa:	4413      	add	r3, r2
 8006cac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cb0:	673b      	str	r3, [r7, #112]	; 0x70
 8006cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	785b      	ldrb	r3, [r3, #1]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d12f      	bne.n	8006d26 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cde:	4413      	add	r3, r2
 8006ce0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	011a      	lsls	r2, r3, #4
 8006cea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cee:	4413      	add	r3, r2
 8006cf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	e017      	b.n	8006d56 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	785b      	ldrb	r3, [r3, #1]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d113      	bne.n	8006d56 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d3c:	4413      	add	r3, r2
 8006d3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	011a      	lsls	r2, r3, #4
 8006d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d48:	4413      	add	r3, r2
 8006d4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d52:	2200      	movs	r2, #0
 8006d54:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f006 fe12 	bl	800d986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006d62:	88fb      	ldrh	r3, [r7, #6]
 8006d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f040 8104 	bne.w	8006f76 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	8013      	strh	r3, [r2, #0]
 8006db2:	e0e0      	b.n	8006f76 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d121      	bne.n	8006e02 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	441a      	add	r2, r3
 8006dea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	f040 80b4 	bne.w	8006f76 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	695a      	ldr	r2, [r3, #20]
 8006e12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e16:	441a      	add	r2, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e24:	441a      	add	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6a1a      	ldr	r2, [r3, #32]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d309      	bcc.n	8006e4a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	6a1a      	ldr	r2, [r3, #32]
 8006e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e42:	1ad2      	subs	r2, r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	621a      	str	r2, [r3, #32]
 8006e48:	e015      	b.n	8006e76 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d107      	bne.n	8006e62 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006e52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e56:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006e60:	e009      	b.n	8006e76 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	667b      	str	r3, [r7, #100]	; 0x64
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	785b      	ldrb	r3, [r3, #1]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d155      	bne.n	8006f30 <HAL_PCD_EP_DB_Transmit+0x704>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e98:	4413      	add	r3, r2
 8006e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	011a      	lsls	r2, r3, #4
 8006ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006eaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d112      	bne.n	8006ed8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ed4:	801a      	strh	r2, [r3, #0]
 8006ed6:	e044      	b.n	8006f62 <HAL_PCD_EP_DB_Transmit+0x736>
 8006ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eda:	2b3e      	cmp	r3, #62	; 0x3e
 8006edc:	d811      	bhi.n	8006f02 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee0:	085b      	lsrs	r3, r3, #1
 8006ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	029b      	lsls	r3, r3, #10
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006efe:	801a      	strh	r2, [r3, #0]
 8006f00:	e02f      	b.n	8006f62 <HAL_PCD_EP_DB_Transmit+0x736>
 8006f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f04:	095b      	lsrs	r3, r3, #5
 8006f06:	657b      	str	r3, [r7, #84]	; 0x54
 8006f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d102      	bne.n	8006f18 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f14:	3b01      	subs	r3, #1
 8006f16:	657b      	str	r3, [r7, #84]	; 0x54
 8006f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	029b      	lsls	r3, r3, #10
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	e018      	b.n	8006f62 <HAL_PCD_EP_DB_Transmit+0x736>
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d114      	bne.n	8006f62 <HAL_PCD_EP_DB_Transmit+0x736>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f46:	4413      	add	r3, r2
 8006f48:	667b      	str	r3, [r7, #100]	; 0x64
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	011a      	lsls	r2, r3, #4
 8006f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f52:	4413      	add	r3, r2
 8006f54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f58:	663b      	str	r3, [r7, #96]	; 0x60
 8006f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f60:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	6959      	ldr	r1, [r3, #20]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	895a      	ldrh	r2, [r3, #10]
 8006f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f004 fed0 	bl	800bd16 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f90:	823b      	strh	r3, [r7, #16]
 8006f92:	8a3b      	ldrh	r3, [r7, #16]
 8006f94:	f083 0310 	eor.w	r3, r3, #16
 8006f98:	823b      	strh	r3, [r7, #16]
 8006f9a:	8a3b      	ldrh	r3, [r7, #16]
 8006f9c:	f083 0320 	eor.w	r3, r3, #32
 8006fa0:	823b      	strh	r3, [r7, #16]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	441a      	add	r2, r3
 8006fb0:	8a3b      	ldrh	r3, [r7, #16]
 8006fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3788      	adds	r7, #136	; 0x88
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	607b      	str	r3, [r7, #4]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	817b      	strh	r3, [r7, #10]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006fe2:	897b      	ldrh	r3, [r7, #10]
 8006fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fee:	897b      	ldrh	r3, [r7, #10]
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	e009      	b.n	800701a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007006:	897a      	ldrh	r2, [r7, #10]
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800701a:	893b      	ldrh	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d107      	bne.n	8007030 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2200      	movs	r2, #0
 8007024:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	b29a      	uxth	r2, r3
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	80da      	strh	r2, [r3, #6]
 800702e:	e00b      	b.n	8007048 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2201      	movs	r2, #1
 8007034:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	b29a      	uxth	r2, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	0c1b      	lsrs	r3, r3, #16
 8007042:	b29a      	uxth	r2, r3
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr

08007054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e31d      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007066:	4b94      	ldr	r3, [pc, #592]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 030c 	and.w	r3, r3, #12
 800706e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007070:	4b91      	ldr	r3, [pc, #580]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007078:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d07b      	beq.n	800717e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	2b08      	cmp	r3, #8
 800708a:	d006      	beq.n	800709a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b0c      	cmp	r3, #12
 8007090:	d10f      	bne.n	80070b2 <HAL_RCC_OscConfig+0x5e>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007098:	d10b      	bne.n	80070b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800709a:	4b87      	ldr	r3, [pc, #540]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d06a      	beq.n	800717c <HAL_RCC_OscConfig+0x128>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d166      	bne.n	800717c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e2f7      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d106      	bne.n	80070c8 <HAL_RCC_OscConfig+0x74>
 80070ba:	4b7f      	ldr	r3, [pc, #508]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a7e      	ldr	r2, [pc, #504]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80070c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e02d      	b.n	8007124 <HAL_RCC_OscConfig+0xd0>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10c      	bne.n	80070ea <HAL_RCC_OscConfig+0x96>
 80070d0:	4b79      	ldr	r3, [pc, #484]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a78      	ldr	r2, [pc, #480]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80070d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	4b76      	ldr	r3, [pc, #472]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a75      	ldr	r2, [pc, #468]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80070e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	e01c      	b.n	8007124 <HAL_RCC_OscConfig+0xd0>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2b05      	cmp	r3, #5
 80070f0:	d10c      	bne.n	800710c <HAL_RCC_OscConfig+0xb8>
 80070f2:	4b71      	ldr	r3, [pc, #452]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a70      	ldr	r2, [pc, #448]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80070f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4b6e      	ldr	r3, [pc, #440]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a6d      	ldr	r2, [pc, #436]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	e00b      	b.n	8007124 <HAL_RCC_OscConfig+0xd0>
 800710c:	4b6a      	ldr	r3, [pc, #424]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a69      	ldr	r2, [pc, #420]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	4b67      	ldr	r3, [pc, #412]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a66      	ldr	r2, [pc, #408]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 800711e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d013      	beq.n	8007154 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800712c:	f7fd f87c 	bl	8004228 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007134:	f7fd f878 	bl	8004228 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b64      	cmp	r3, #100	; 0x64
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e2ad      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007146:	4b5c      	ldr	r3, [pc, #368]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0f0      	beq.n	8007134 <HAL_RCC_OscConfig+0xe0>
 8007152:	e014      	b.n	800717e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007154:	f7fd f868 	bl	8004228 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800715c:	f7fd f864 	bl	8004228 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b64      	cmp	r3, #100	; 0x64
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e299      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800716e:	4b52      	ldr	r3, [pc, #328]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <HAL_RCC_OscConfig+0x108>
 800717a:	e000      	b.n	800717e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800717c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d05a      	beq.n	8007240 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b04      	cmp	r3, #4
 800718e:	d005      	beq.n	800719c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b0c      	cmp	r3, #12
 8007194:	d119      	bne.n	80071ca <HAL_RCC_OscConfig+0x176>
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d116      	bne.n	80071ca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800719c:	4b46      	ldr	r3, [pc, #280]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <HAL_RCC_OscConfig+0x160>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d001      	beq.n	80071b4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e276      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071b4:	4b40      	ldr	r3, [pc, #256]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	493d      	ldr	r1, [pc, #244]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071c8:	e03a      	b.n	8007240 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d020      	beq.n	8007214 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071d2:	4b3a      	ldr	r3, [pc, #232]	; (80072bc <HAL_RCC_OscConfig+0x268>)
 80071d4:	2201      	movs	r2, #1
 80071d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d8:	f7fd f826 	bl	8004228 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071e0:	f7fd f822 	bl	8004228 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e257      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071f2:	4b31      	ldr	r3, [pc, #196]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0f0      	beq.n	80071e0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071fe:	4b2e      	ldr	r3, [pc, #184]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	021b      	lsls	r3, r3, #8
 800720c:	492a      	ldr	r1, [pc, #168]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 800720e:	4313      	orrs	r3, r2
 8007210:	604b      	str	r3, [r1, #4]
 8007212:	e015      	b.n	8007240 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007214:	4b29      	ldr	r3, [pc, #164]	; (80072bc <HAL_RCC_OscConfig+0x268>)
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800721a:	f7fd f805 	bl	8004228 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007222:	f7fd f801 	bl	8004228 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e236      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007234:	4b20      	ldr	r3, [pc, #128]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f0      	bne.n	8007222 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0310 	and.w	r3, r3, #16
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80b8 	beq.w	80073be <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d170      	bne.n	8007336 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007254:	4b18      	ldr	r3, [pc, #96]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <HAL_RCC_OscConfig+0x218>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e21a      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007278:	429a      	cmp	r2, r3
 800727a:	d921      	bls.n	80072c0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fc69 	bl	8007b58 <RCC_SetFlashLatencyFromMSIRange>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e208      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	4906      	ldr	r1, [pc, #24]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072a2:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	061b      	lsls	r3, r3, #24
 80072b0:	4901      	ldr	r1, [pc, #4]	; (80072b8 <HAL_RCC_OscConfig+0x264>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	604b      	str	r3, [r1, #4]
 80072b6:	e020      	b.n	80072fa <HAL_RCC_OscConfig+0x2a6>
 80072b8:	40023800 	.word	0x40023800
 80072bc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072c0:	4b99      	ldr	r3, [pc, #612]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	4996      	ldr	r1, [pc, #600]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072d2:	4b95      	ldr	r3, [pc, #596]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	061b      	lsls	r3, r3, #24
 80072e0:	4991      	ldr	r1, [pc, #580]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fc34 	bl	8007b58 <RCC_SetFlashLatencyFromMSIRange>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e1d3      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	0b5b      	lsrs	r3, r3, #13
 8007300:	3301      	adds	r3, #1
 8007302:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007306:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800730a:	4a87      	ldr	r2, [pc, #540]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 800730c:	6892      	ldr	r2, [r2, #8]
 800730e:	0912      	lsrs	r2, r2, #4
 8007310:	f002 020f 	and.w	r2, r2, #15
 8007314:	4985      	ldr	r1, [pc, #532]	; (800752c <HAL_RCC_OscConfig+0x4d8>)
 8007316:	5c8a      	ldrb	r2, [r1, r2]
 8007318:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800731a:	4a85      	ldr	r2, [pc, #532]	; (8007530 <HAL_RCC_OscConfig+0x4dc>)
 800731c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800731e:	4b85      	ldr	r3, [pc, #532]	; (8007534 <HAL_RCC_OscConfig+0x4e0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f7fc ff34 	bl	8004190 <HAL_InitTick>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d045      	beq.n	80073be <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	e1b5      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d029      	beq.n	8007392 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800733e:	4b7e      	ldr	r3, [pc, #504]	; (8007538 <HAL_RCC_OscConfig+0x4e4>)
 8007340:	2201      	movs	r2, #1
 8007342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007344:	f7fc ff70 	bl	8004228 <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800734c:	f7fc ff6c 	bl	8004228 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e1a1      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800735e:	4b72      	ldr	r3, [pc, #456]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f0      	beq.n	800734c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800736a:	4b6f      	ldr	r3, [pc, #444]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	496c      	ldr	r1, [pc, #432]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 8007378:	4313      	orrs	r3, r2
 800737a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800737c:	4b6a      	ldr	r3, [pc, #424]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	061b      	lsls	r3, r3, #24
 800738a:	4967      	ldr	r1, [pc, #412]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 800738c:	4313      	orrs	r3, r2
 800738e:	604b      	str	r3, [r1, #4]
 8007390:	e015      	b.n	80073be <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007392:	4b69      	ldr	r3, [pc, #420]	; (8007538 <HAL_RCC_OscConfig+0x4e4>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007398:	f7fc ff46 	bl	8004228 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073a0:	f7fc ff42 	bl	8004228 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e177      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80073b2:	4b5d      	ldr	r3, [pc, #372]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f0      	bne.n	80073a0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0308 	and.w	r3, r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d030      	beq.n	800742c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d016      	beq.n	8007400 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073d2:	4b5a      	ldr	r3, [pc, #360]	; (800753c <HAL_RCC_OscConfig+0x4e8>)
 80073d4:	2201      	movs	r2, #1
 80073d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073d8:	f7fc ff26 	bl	8004228 <HAL_GetTick>
 80073dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073de:	e008      	b.n	80073f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073e0:	f7fc ff22 	bl	8004228 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e157      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073f2:	4b4d      	ldr	r3, [pc, #308]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80073f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f0      	beq.n	80073e0 <HAL_RCC_OscConfig+0x38c>
 80073fe:	e015      	b.n	800742c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007400:	4b4e      	ldr	r3, [pc, #312]	; (800753c <HAL_RCC_OscConfig+0x4e8>)
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007406:	f7fc ff0f 	bl	8004228 <HAL_GetTick>
 800740a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800740c:	e008      	b.n	8007420 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800740e:	f7fc ff0b 	bl	8004228 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e140      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007420:	4b41      	ldr	r3, [pc, #260]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 8007422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f0      	bne.n	800740e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 80b5 	beq.w	80075a4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800743a:	2300      	movs	r3, #0
 800743c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800743e:	4b3a      	ldr	r3, [pc, #232]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10d      	bne.n	8007466 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800744a:	4b37      	ldr	r3, [pc, #220]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	4a36      	ldr	r2, [pc, #216]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 8007450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007454:	6253      	str	r3, [r2, #36]	; 0x24
 8007456:	4b34      	ldr	r3, [pc, #208]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007462:	2301      	movs	r3, #1
 8007464:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007466:	4b36      	ldr	r3, [pc, #216]	; (8007540 <HAL_RCC_OscConfig+0x4ec>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746e:	2b00      	cmp	r3, #0
 8007470:	d118      	bne.n	80074a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007472:	4b33      	ldr	r3, [pc, #204]	; (8007540 <HAL_RCC_OscConfig+0x4ec>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a32      	ldr	r2, [pc, #200]	; (8007540 <HAL_RCC_OscConfig+0x4ec>)
 8007478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800747c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800747e:	f7fc fed3 	bl	8004228 <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007484:	e008      	b.n	8007498 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007486:	f7fc fecf 	bl	8004228 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b64      	cmp	r3, #100	; 0x64
 8007492:	d901      	bls.n	8007498 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e104      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007498:	4b29      	ldr	r3, [pc, #164]	; (8007540 <HAL_RCC_OscConfig+0x4ec>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0f0      	beq.n	8007486 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d106      	bne.n	80074ba <HAL_RCC_OscConfig+0x466>
 80074ac:	4b1e      	ldr	r3, [pc, #120]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80074ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b0:	4a1d      	ldr	r2, [pc, #116]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80074b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b6:	6353      	str	r3, [r2, #52]	; 0x34
 80074b8:	e02d      	b.n	8007516 <HAL_RCC_OscConfig+0x4c2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10c      	bne.n	80074dc <HAL_RCC_OscConfig+0x488>
 80074c2:	4b19      	ldr	r3, [pc, #100]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80074c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c6:	4a18      	ldr	r2, [pc, #96]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80074c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074cc:	6353      	str	r3, [r2, #52]	; 0x34
 80074ce:	4b16      	ldr	r3, [pc, #88]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80074d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d2:	4a15      	ldr	r2, [pc, #84]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80074d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d8:	6353      	str	r3, [r2, #52]	; 0x34
 80074da:	e01c      	b.n	8007516 <HAL_RCC_OscConfig+0x4c2>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b05      	cmp	r3, #5
 80074e2:	d10c      	bne.n	80074fe <HAL_RCC_OscConfig+0x4aa>
 80074e4:	4b10      	ldr	r3, [pc, #64]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80074e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e8:	4a0f      	ldr	r2, [pc, #60]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80074ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074ee:	6353      	str	r3, [r2, #52]	; 0x34
 80074f0:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80074f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f4:	4a0c      	ldr	r2, [pc, #48]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 80074f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074fa:	6353      	str	r3, [r2, #52]	; 0x34
 80074fc:	e00b      	b.n	8007516 <HAL_RCC_OscConfig+0x4c2>
 80074fe:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 8007500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007502:	4a09      	ldr	r2, [pc, #36]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 8007504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007508:	6353      	str	r3, [r2, #52]	; 0x34
 800750a:	4b07      	ldr	r3, [pc, #28]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 800750c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750e:	4a06      	ldr	r2, [pc, #24]	; (8007528 <HAL_RCC_OscConfig+0x4d4>)
 8007510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007514:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d024      	beq.n	8007568 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800751e:	f7fc fe83 	bl	8004228 <HAL_GetTick>
 8007522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007524:	e019      	b.n	800755a <HAL_RCC_OscConfig+0x506>
 8007526:	bf00      	nop
 8007528:	40023800 	.word	0x40023800
 800752c:	080124d4 	.word	0x080124d4
 8007530:	200006b4 	.word	0x200006b4
 8007534:	200006bc 	.word	0x200006bc
 8007538:	42470020 	.word	0x42470020
 800753c:	42470680 	.word	0x42470680
 8007540:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007544:	f7fc fe70 	bl	8004228 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007552:	4293      	cmp	r3, r2
 8007554:	d901      	bls.n	800755a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e0a3      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800755a:	4b54      	ldr	r3, [pc, #336]	; (80076ac <HAL_RCC_OscConfig+0x658>)
 800755c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0ee      	beq.n	8007544 <HAL_RCC_OscConfig+0x4f0>
 8007566:	e014      	b.n	8007592 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007568:	f7fc fe5e 	bl	8004228 <HAL_GetTick>
 800756c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800756e:	e00a      	b.n	8007586 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007570:	f7fc fe5a 	bl	8004228 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	f241 3288 	movw	r2, #5000	; 0x1388
 800757e:	4293      	cmp	r3, r2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e08d      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007586:	4b49      	ldr	r3, [pc, #292]	; (80076ac <HAL_RCC_OscConfig+0x658>)
 8007588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1ee      	bne.n	8007570 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007592:	7ffb      	ldrb	r3, [r7, #31]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d105      	bne.n	80075a4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007598:	4b44      	ldr	r3, [pc, #272]	; (80076ac <HAL_RCC_OscConfig+0x658>)
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	4a43      	ldr	r2, [pc, #268]	; (80076ac <HAL_RCC_OscConfig+0x658>)
 800759e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d079      	beq.n	80076a0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2b0c      	cmp	r3, #12
 80075b0:	d056      	beq.n	8007660 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d13b      	bne.n	8007632 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ba:	4b3d      	ldr	r3, [pc, #244]	; (80076b0 <HAL_RCC_OscConfig+0x65c>)
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c0:	f7fc fe32 	bl	8004228 <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075c6:	e008      	b.n	80075da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075c8:	f7fc fe2e 	bl	8004228 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e063      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075da:	4b34      	ldr	r3, [pc, #208]	; (80076ac <HAL_RCC_OscConfig+0x658>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1f0      	bne.n	80075c8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075e6:	4b31      	ldr	r3, [pc, #196]	; (80076ac <HAL_RCC_OscConfig+0x658>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	4319      	orrs	r1, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	430b      	orrs	r3, r1
 80075fe:	492b      	ldr	r1, [pc, #172]	; (80076ac <HAL_RCC_OscConfig+0x658>)
 8007600:	4313      	orrs	r3, r2
 8007602:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007604:	4b2a      	ldr	r3, [pc, #168]	; (80076b0 <HAL_RCC_OscConfig+0x65c>)
 8007606:	2201      	movs	r2, #1
 8007608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800760a:	f7fc fe0d 	bl	8004228 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007612:	f7fc fe09 	bl	8004228 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e03e      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007624:	4b21      	ldr	r3, [pc, #132]	; (80076ac <HAL_RCC_OscConfig+0x658>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0f0      	beq.n	8007612 <HAL_RCC_OscConfig+0x5be>
 8007630:	e036      	b.n	80076a0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007632:	4b1f      	ldr	r3, [pc, #124]	; (80076b0 <HAL_RCC_OscConfig+0x65c>)
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007638:	f7fc fdf6 	bl	8004228 <HAL_GetTick>
 800763c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800763e:	e008      	b.n	8007652 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007640:	f7fc fdf2 	bl	8004228 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d901      	bls.n	8007652 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e027      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007652:	4b16      	ldr	r3, [pc, #88]	; (80076ac <HAL_RCC_OscConfig+0x658>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f0      	bne.n	8007640 <HAL_RCC_OscConfig+0x5ec>
 800765e:	e01f      	b.n	80076a0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e01a      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800766c:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <HAL_RCC_OscConfig+0x658>)
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	429a      	cmp	r2, r3
 800767e:	d10d      	bne.n	800769c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800768a:	429a      	cmp	r2, r3
 800768c:	d106      	bne.n	800769c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007698:	429a      	cmp	r2, r3
 800769a:	d001      	beq.n	80076a0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3720      	adds	r7, #32
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40023800 	.word	0x40023800
 80076b0:	42470060 	.word	0x42470060

080076b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e11a      	b.n	80078fe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076c8:	4b8f      	ldr	r3, [pc, #572]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d919      	bls.n	800770a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d105      	bne.n	80076e8 <HAL_RCC_ClockConfig+0x34>
 80076dc:	4b8a      	ldr	r3, [pc, #552]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a89      	ldr	r2, [pc, #548]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 80076e2:	f043 0304 	orr.w	r3, r3, #4
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	4b87      	ldr	r3, [pc, #540]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f023 0201 	bic.w	r2, r3, #1
 80076f0:	4985      	ldr	r1, [pc, #532]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076f8:	4b83      	ldr	r3, [pc, #524]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d001      	beq.n	800770a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e0f9      	b.n	80078fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d008      	beq.n	8007728 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007716:	4b7d      	ldr	r3, [pc, #500]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	497a      	ldr	r1, [pc, #488]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 8007724:	4313      	orrs	r3, r2
 8007726:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 808e 	beq.w	8007852 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b02      	cmp	r3, #2
 800773c:	d107      	bne.n	800774e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800773e:	4b73      	ldr	r3, [pc, #460]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d121      	bne.n	800778e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e0d7      	b.n	80078fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b03      	cmp	r3, #3
 8007754:	d107      	bne.n	8007766 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007756:	4b6d      	ldr	r3, [pc, #436]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d115      	bne.n	800778e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e0cb      	b.n	80078fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d107      	bne.n	800777e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800776e:	4b67      	ldr	r3, [pc, #412]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e0bf      	b.n	80078fe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800777e:	4b63      	ldr	r3, [pc, #396]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e0b7      	b.n	80078fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800778e:	4b5f      	ldr	r3, [pc, #380]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f023 0203 	bic.w	r2, r3, #3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	495c      	ldr	r1, [pc, #368]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 800779c:	4313      	orrs	r3, r2
 800779e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077a0:	f7fc fd42 	bl	8004228 <HAL_GetTick>
 80077a4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d112      	bne.n	80077d4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80077ae:	e00a      	b.n	80077c6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077b0:	f7fc fd3a 	bl	8004228 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80077be:	4293      	cmp	r3, r2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e09b      	b.n	80078fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80077c6:	4b51      	ldr	r3, [pc, #324]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 030c 	and.w	r3, r3, #12
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d1ee      	bne.n	80077b0 <HAL_RCC_ClockConfig+0xfc>
 80077d2:	e03e      	b.n	8007852 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d112      	bne.n	8007802 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077dc:	e00a      	b.n	80077f4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077de:	f7fc fd23 	bl	8004228 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e084      	b.n	80078fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077f4:	4b45      	ldr	r3, [pc, #276]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f003 030c 	and.w	r3, r3, #12
 80077fc:	2b0c      	cmp	r3, #12
 80077fe:	d1ee      	bne.n	80077de <HAL_RCC_ClockConfig+0x12a>
 8007800:	e027      	b.n	8007852 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d11d      	bne.n	8007846 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800780a:	e00a      	b.n	8007822 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800780c:	f7fc fd0c 	bl	8004228 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	f241 3288 	movw	r2, #5000	; 0x1388
 800781a:	4293      	cmp	r3, r2
 800781c:	d901      	bls.n	8007822 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e06d      	b.n	80078fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007822:	4b3a      	ldr	r3, [pc, #232]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 030c 	and.w	r3, r3, #12
 800782a:	2b04      	cmp	r3, #4
 800782c:	d1ee      	bne.n	800780c <HAL_RCC_ClockConfig+0x158>
 800782e:	e010      	b.n	8007852 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007830:	f7fc fcfa 	bl	8004228 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	f241 3288 	movw	r2, #5000	; 0x1388
 800783e:	4293      	cmp	r3, r2
 8007840:	d901      	bls.n	8007846 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e05b      	b.n	80078fe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007846:	4b31      	ldr	r3, [pc, #196]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 030c 	and.w	r3, r3, #12
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1ee      	bne.n	8007830 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007852:	4b2d      	ldr	r3, [pc, #180]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d219      	bcs.n	8007894 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d105      	bne.n	8007872 <HAL_RCC_ClockConfig+0x1be>
 8007866:	4b28      	ldr	r3, [pc, #160]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a27      	ldr	r2, [pc, #156]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 800786c:	f043 0304 	orr.w	r3, r3, #4
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	4b25      	ldr	r3, [pc, #148]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f023 0201 	bic.w	r2, r3, #1
 800787a:	4923      	ldr	r1, [pc, #140]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	4313      	orrs	r3, r2
 8007880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007882:	4b21      	ldr	r3, [pc, #132]	; (8007908 <HAL_RCC_ClockConfig+0x254>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	429a      	cmp	r2, r3
 800788e:	d001      	beq.n	8007894 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e034      	b.n	80078fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	d008      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078a0:	4b1a      	ldr	r3, [pc, #104]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	4917      	ldr	r1, [pc, #92]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0308 	and.w	r3, r3, #8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d009      	beq.n	80078d2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	00db      	lsls	r3, r3, #3
 80078cc:	490f      	ldr	r1, [pc, #60]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078d2:	f000 f823 	bl	800791c <HAL_RCC_GetSysClockFreq>
 80078d6:	4602      	mov	r2, r0
 80078d8:	4b0c      	ldr	r3, [pc, #48]	; (800790c <HAL_RCC_ClockConfig+0x258>)
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	091b      	lsrs	r3, r3, #4
 80078de:	f003 030f 	and.w	r3, r3, #15
 80078e2:	490b      	ldr	r1, [pc, #44]	; (8007910 <HAL_RCC_ClockConfig+0x25c>)
 80078e4:	5ccb      	ldrb	r3, [r1, r3]
 80078e6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ea:	4a0a      	ldr	r2, [pc, #40]	; (8007914 <HAL_RCC_ClockConfig+0x260>)
 80078ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80078ee:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <HAL_RCC_ClockConfig+0x264>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fc fc4c 	bl	8004190 <HAL_InitTick>
 80078f8:	4603      	mov	r3, r0
 80078fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80078fc:	7afb      	ldrb	r3, [r7, #11]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	40023c00 	.word	0x40023c00
 800790c:	40023800 	.word	0x40023800
 8007910:	080124d4 	.word	0x080124d4
 8007914:	200006b4 	.word	0x200006b4
 8007918:	200006bc 	.word	0x200006bc

0800791c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800791c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007920:	b092      	sub	sp, #72	; 0x48
 8007922:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8007924:	4b79      	ldr	r3, [pc, #484]	; (8007b0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800792a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792c:	f003 030c 	and.w	r3, r3, #12
 8007930:	2b0c      	cmp	r3, #12
 8007932:	d00d      	beq.n	8007950 <HAL_RCC_GetSysClockFreq+0x34>
 8007934:	2b0c      	cmp	r3, #12
 8007936:	f200 80d5 	bhi.w	8007ae4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800793a:	2b04      	cmp	r3, #4
 800793c:	d002      	beq.n	8007944 <HAL_RCC_GetSysClockFreq+0x28>
 800793e:	2b08      	cmp	r3, #8
 8007940:	d003      	beq.n	800794a <HAL_RCC_GetSysClockFreq+0x2e>
 8007942:	e0cf      	b.n	8007ae4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007944:	4b72      	ldr	r3, [pc, #456]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007946:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007948:	e0da      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800794a:	4b72      	ldr	r3, [pc, #456]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800794c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800794e:	e0d7      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007952:	0c9b      	lsrs	r3, r3, #18
 8007954:	f003 020f 	and.w	r2, r3, #15
 8007958:	4b6f      	ldr	r3, [pc, #444]	; (8007b18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800795a:	5c9b      	ldrb	r3, [r3, r2]
 800795c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800795e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007960:	0d9b      	lsrs	r3, r3, #22
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	3301      	adds	r3, #1
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800796a:	4b68      	ldr	r3, [pc, #416]	; (8007b0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d05d      	beq.n	8007a32 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	2200      	movs	r2, #0
 800797a:	4618      	mov	r0, r3
 800797c:	4611      	mov	r1, r2
 800797e:	4604      	mov	r4, r0
 8007980:	460d      	mov	r5, r1
 8007982:	4622      	mov	r2, r4
 8007984:	462b      	mov	r3, r5
 8007986:	f04f 0000 	mov.w	r0, #0
 800798a:	f04f 0100 	mov.w	r1, #0
 800798e:	0159      	lsls	r1, r3, #5
 8007990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007994:	0150      	lsls	r0, r2, #5
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4621      	mov	r1, r4
 800799c:	1a51      	subs	r1, r2, r1
 800799e:	6139      	str	r1, [r7, #16]
 80079a0:	4629      	mov	r1, r5
 80079a2:	eb63 0301 	sbc.w	r3, r3, r1
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	f04f 0200 	mov.w	r2, #0
 80079ac:	f04f 0300 	mov.w	r3, #0
 80079b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079b4:	4659      	mov	r1, fp
 80079b6:	018b      	lsls	r3, r1, #6
 80079b8:	4651      	mov	r1, sl
 80079ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079be:	4651      	mov	r1, sl
 80079c0:	018a      	lsls	r2, r1, #6
 80079c2:	46d4      	mov	ip, sl
 80079c4:	ebb2 080c 	subs.w	r8, r2, ip
 80079c8:	4659      	mov	r1, fp
 80079ca:	eb63 0901 	sbc.w	r9, r3, r1
 80079ce:	f04f 0200 	mov.w	r2, #0
 80079d2:	f04f 0300 	mov.w	r3, #0
 80079d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079e2:	4690      	mov	r8, r2
 80079e4:	4699      	mov	r9, r3
 80079e6:	4623      	mov	r3, r4
 80079e8:	eb18 0303 	adds.w	r3, r8, r3
 80079ec:	60bb      	str	r3, [r7, #8]
 80079ee:	462b      	mov	r3, r5
 80079f0:	eb49 0303 	adc.w	r3, r9, r3
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a02:	4629      	mov	r1, r5
 8007a04:	024b      	lsls	r3, r1, #9
 8007a06:	4620      	mov	r0, r4
 8007a08:	4629      	mov	r1, r5
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8007a10:	4601      	mov	r1, r0
 8007a12:	024a      	lsls	r2, r1, #9
 8007a14:	4610      	mov	r0, r2
 8007a16:	4619      	mov	r1, r3
 8007a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a24:	f7f9 fbb6 	bl	8001194 <__aeabi_uldivmod>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a30:	e055      	b.n	8007ade <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	2200      	movs	r2, #0
 8007a36:	623b      	str	r3, [r7, #32]
 8007a38:	627a      	str	r2, [r7, #36]	; 0x24
 8007a3a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a3e:	4642      	mov	r2, r8
 8007a40:	464b      	mov	r3, r9
 8007a42:	f04f 0000 	mov.w	r0, #0
 8007a46:	f04f 0100 	mov.w	r1, #0
 8007a4a:	0159      	lsls	r1, r3, #5
 8007a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a50:	0150      	lsls	r0, r2, #5
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	46c4      	mov	ip, r8
 8007a58:	ebb2 0a0c 	subs.w	sl, r2, ip
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	4649      	mov	r1, r9
 8007a60:	468c      	mov	ip, r1
 8007a62:	eb63 0b0c 	sbc.w	fp, r3, ip
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007a72:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007a76:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007a7a:	ebb2 040a 	subs.w	r4, r2, sl
 8007a7e:	eb63 050b 	sbc.w	r5, r3, fp
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	00eb      	lsls	r3, r5, #3
 8007a8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a90:	00e2      	lsls	r2, r4, #3
 8007a92:	4614      	mov	r4, r2
 8007a94:	461d      	mov	r5, r3
 8007a96:	4603      	mov	r3, r0
 8007a98:	18e3      	adds	r3, r4, r3
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	eb45 0303 	adc.w	r3, r5, r3
 8007aa2:	607b      	str	r3, [r7, #4]
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	028b      	lsls	r3, r1, #10
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	4604      	mov	r4, r0
 8007aba:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8007abe:	4601      	mov	r1, r0
 8007ac0:	028a      	lsls	r2, r1, #10
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac8:	2200      	movs	r2, #0
 8007aca:	61bb      	str	r3, [r7, #24]
 8007acc:	61fa      	str	r2, [r7, #28]
 8007ace:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ad2:	f7f9 fb5f 	bl	8001194 <__aeabi_uldivmod>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4613      	mov	r3, r2
 8007adc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8007ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ae0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007ae2:	e00d      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007ae4:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	0b5b      	lsrs	r3, r3, #13
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	3301      	adds	r3, #1
 8007af4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007afe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3748      	adds	r7, #72	; 0x48
 8007b06:	46bd      	mov	sp, r7
 8007b08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b0c:	40023800 	.word	0x40023800
 8007b10:	00f42400 	.word	0x00f42400
 8007b14:	007a1200 	.word	0x007a1200
 8007b18:	080124c8 	.word	0x080124c8

08007b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b20:	4b02      	ldr	r3, [pc, #8]	; (8007b2c <HAL_RCC_GetHCLKFreq+0x10>)
 8007b22:	681b      	ldr	r3, [r3, #0]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr
 8007b2c:	200006b4 	.word	0x200006b4

08007b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b34:	f7ff fff2 	bl	8007b1c <HAL_RCC_GetHCLKFreq>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	4903      	ldr	r1, [pc, #12]	; (8007b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b46:	5ccb      	ldrb	r3, [r1, r3]
 8007b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	40023800 	.word	0x40023800
 8007b54:	080124e4 	.word	0x080124e4

08007b58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007b60:	2300      	movs	r3, #0
 8007b62:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007b64:	4b29      	ldr	r3, [pc, #164]	; (8007c0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d12c      	bne.n	8007bca <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b70:	4b26      	ldr	r3, [pc, #152]	; (8007c0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007b7c:	4b24      	ldr	r3, [pc, #144]	; (8007c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	e016      	b.n	8007bb6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b88:	4b20      	ldr	r3, [pc, #128]	; (8007c0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b92:	6253      	str	r3, [r2, #36]	; 0x24
 8007b94:	4b1d      	ldr	r3, [pc, #116]	; (8007c0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007ba0:	4b1b      	ldr	r3, [pc, #108]	; (8007c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007ba8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8007baa:	4b18      	ldr	r3, [pc, #96]	; (8007c0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	4a17      	ldr	r2, [pc, #92]	; (8007c0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007bbc:	d105      	bne.n	8007bca <RCC_SetFlashLatencyFromMSIRange+0x72>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bc4:	d101      	bne.n	8007bca <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d105      	bne.n	8007bdc <RCC_SetFlashLatencyFromMSIRange+0x84>
 8007bd0:	4b10      	ldr	r3, [pc, #64]	; (8007c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a0f      	ldr	r2, [pc, #60]	; (8007c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bd6:	f043 0304 	orr.w	r3, r3, #4
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f023 0201 	bic.w	r2, r3, #1
 8007be4:	490b      	ldr	r1, [pc, #44]	; (8007c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007bec:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d001      	beq.n	8007bfe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	40023800 	.word	0x40023800
 8007c10:	40007000 	.word	0x40007000
 8007c14:	40023c00 	.word	0x40023c00

08007c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e06e      	b.n	8007d08 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d108      	bne.n	8007c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c3a:	d009      	beq.n	8007c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	61da      	str	r2, [r3, #28]
 8007c42:	e005      	b.n	8007c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fb fe88 	bl	8003980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	431a      	orrs	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd4:	ea42 0103 	orr.w	r1, r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	0c1a      	lsrs	r2, r3, #16
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f002 0204 	and.w	r2, r2, #4
 8007cf6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d101      	bne.n	8007d32 <HAL_SPI_Transmit+0x22>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	e126      	b.n	8007f80 <HAL_SPI_Transmit+0x270>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d3a:	f7fc fa75 	bl	8004228 <HAL_GetTick>
 8007d3e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d40:	88fb      	ldrh	r3, [r7, #6]
 8007d42:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d002      	beq.n	8007d56 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007d50:	2302      	movs	r3, #2
 8007d52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d54:	e10b      	b.n	8007f6e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <HAL_SPI_Transmit+0x52>
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d102      	bne.n	8007d68 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d66:	e102      	b.n	8007f6e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2203      	movs	r2, #3
 8007d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	88fa      	ldrh	r2, [r7, #6]
 8007d80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	88fa      	ldrh	r2, [r7, #6]
 8007d86:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dae:	d10f      	bne.n	8007dd0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dda:	2b40      	cmp	r3, #64	; 0x40
 8007ddc:	d007      	beq.n	8007dee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df6:	d14b      	bne.n	8007e90 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <HAL_SPI_Transmit+0xf6>
 8007e00:	8afb      	ldrh	r3, [r7, #22]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d13e      	bne.n	8007e84 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0a:	881a      	ldrh	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e16:	1c9a      	adds	r2, r3, #2
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	3b01      	subs	r3, #1
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e2a:	e02b      	b.n	8007e84 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d112      	bne.n	8007e60 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3e:	881a      	ldrh	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	1c9a      	adds	r2, r3, #2
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	3b01      	subs	r3, #1
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e5e:	e011      	b.n	8007e84 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e60:	f7fc f9e2 	bl	8004228 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d803      	bhi.n	8007e78 <HAL_SPI_Transmit+0x168>
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d102      	bne.n	8007e7e <HAL_SPI_Transmit+0x16e>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d102      	bne.n	8007e84 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e82:	e074      	b.n	8007f6e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1ce      	bne.n	8007e2c <HAL_SPI_Transmit+0x11c>
 8007e8e:	e04c      	b.n	8007f2a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <HAL_SPI_Transmit+0x18e>
 8007e98:	8afb      	ldrh	r3, [r7, #22]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d140      	bne.n	8007f20 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	330c      	adds	r3, #12
 8007ea8:	7812      	ldrb	r2, [r2, #0]
 8007eaa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ec4:	e02c      	b.n	8007f20 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d113      	bne.n	8007efc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	330c      	adds	r3, #12
 8007ede:	7812      	ldrb	r2, [r2, #0]
 8007ee0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	86da      	strh	r2, [r3, #54]	; 0x36
 8007efa:	e011      	b.n	8007f20 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007efc:	f7fc f994 	bl	8004228 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d803      	bhi.n	8007f14 <HAL_SPI_Transmit+0x204>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	d102      	bne.n	8007f1a <HAL_SPI_Transmit+0x20a>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f1e:	e026      	b.n	8007f6e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1cd      	bne.n	8007ec6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 fcd0 	bl	80088d4 <SPI_EndRxTxTransaction>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f48:	2300      	movs	r3, #0
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	613b      	str	r3, [r7, #16]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	77fb      	strb	r3, [r7, #31]
 8007f6a:	e000      	b.n	8007f6e <HAL_SPI_Transmit+0x25e>
  }

error:
 8007f6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3720      	adds	r7, #32
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	4613      	mov	r3, r2
 8007f96:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fa4:	d112      	bne.n	8007fcc <HAL_SPI_Receive+0x44>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10e      	bne.n	8007fcc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2204      	movs	r2, #4
 8007fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007fb6:	88fa      	ldrh	r2, [r7, #6]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	68b9      	ldr	r1, [r7, #8]
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 f8f1 	bl	80081aa <HAL_SPI_TransmitReceive>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	e0ea      	b.n	80081a2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <HAL_SPI_Receive+0x52>
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e0e3      	b.n	80081a2 <HAL_SPI_Receive+0x21a>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fe2:	f7fc f921 	bl	8004228 <HAL_GetTick>
 8007fe6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d002      	beq.n	8007ffa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ff8:	e0ca      	b.n	8008190 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_SPI_Receive+0x7e>
 8008000:	88fb      	ldrh	r3, [r7, #6]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d102      	bne.n	800800c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	75fb      	strb	r3, [r7, #23]
    goto error;
 800800a:	e0c1      	b.n	8008190 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2204      	movs	r2, #4
 8008010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	88fa      	ldrh	r2, [r7, #6]
 800802a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008052:	d10f      	bne.n	8008074 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008062:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008072:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807e:	2b40      	cmp	r3, #64	; 0x40
 8008080:	d007      	beq.n	8008092 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008090:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d162      	bne.n	8008160 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800809a:	e02e      	b.n	80080fa <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d115      	bne.n	80080d6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f103 020c 	add.w	r2, r3, #12
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b6:	7812      	ldrb	r2, [r2, #0]
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	3b01      	subs	r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080d4:	e011      	b.n	80080fa <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080d6:	f7fc f8a7 	bl	8004228 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d803      	bhi.n	80080ee <HAL_SPI_Receive+0x166>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ec:	d102      	bne.n	80080f4 <HAL_SPI_Receive+0x16c>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80080f8:	e04a      	b.n	8008190 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1cb      	bne.n	800809c <HAL_SPI_Receive+0x114>
 8008104:	e031      	b.n	800816a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b01      	cmp	r3, #1
 8008112:	d113      	bne.n	800813c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	b292      	uxth	r2, r2
 8008120:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	1c9a      	adds	r2, r3, #2
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008130:	b29b      	uxth	r3, r3
 8008132:	3b01      	subs	r3, #1
 8008134:	b29a      	uxth	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	87da      	strh	r2, [r3, #62]	; 0x3e
 800813a:	e011      	b.n	8008160 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800813c:	f7fc f874 	bl	8004228 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d803      	bhi.n	8008154 <HAL_SPI_Receive+0x1cc>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008152:	d102      	bne.n	800815a <HAL_SPI_Receive+0x1d2>
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800815e:	e017      	b.n	8008190 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1cd      	bne.n	8008106 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 fb4a 	bl	8008808 <SPI_EndRxTransaction>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2220      	movs	r2, #32
 800817e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]
 800818c:	e000      	b.n	8008190 <HAL_SPI_Receive+0x208>
  }

error :
 800818e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b08c      	sub	sp, #48	; 0x30
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081b8:	2301      	movs	r3, #1
 80081ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_SPI_TransmitReceive+0x26>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e18a      	b.n	80084e6 <HAL_SPI_TransmitReceive+0x33c>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081d8:	f7fc f826 	bl	8004228 <HAL_GetTick>
 80081dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80081ee:	887b      	ldrh	r3, [r7, #2]
 80081f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d00f      	beq.n	800821a <HAL_SPI_TransmitReceive+0x70>
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008200:	d107      	bne.n	8008212 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d103      	bne.n	8008212 <HAL_SPI_TransmitReceive+0x68>
 800820a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800820e:	2b04      	cmp	r3, #4
 8008210:	d003      	beq.n	800821a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008212:	2302      	movs	r3, #2
 8008214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008218:	e15b      	b.n	80084d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d005      	beq.n	800822c <HAL_SPI_TransmitReceive+0x82>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d002      	beq.n	800822c <HAL_SPI_TransmitReceive+0x82>
 8008226:	887b      	ldrh	r3, [r7, #2]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d103      	bne.n	8008234 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008232:	e14e      	b.n	80084d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b04      	cmp	r3, #4
 800823e:	d003      	beq.n	8008248 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2205      	movs	r2, #5
 8008244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	887a      	ldrh	r2, [r7, #2]
 8008258:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	887a      	ldrh	r2, [r7, #2]
 800825e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	887a      	ldrh	r2, [r7, #2]
 800826a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	887a      	ldrh	r2, [r7, #2]
 8008270:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008288:	2b40      	cmp	r3, #64	; 0x40
 800828a:	d007      	beq.n	800829c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800829a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a4:	d178      	bne.n	8008398 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <HAL_SPI_TransmitReceive+0x10a>
 80082ae:	8b7b      	ldrh	r3, [r7, #26]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d166      	bne.n	8008382 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b8:	881a      	ldrh	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c4:	1c9a      	adds	r2, r3, #2
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	3b01      	subs	r3, #1
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082d8:	e053      	b.n	8008382 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f003 0302 	and.w	r3, r3, #2
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d11b      	bne.n	8008320 <HAL_SPI_TransmitReceive+0x176>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d016      	beq.n	8008320 <HAL_SPI_TransmitReceive+0x176>
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d113      	bne.n	8008320 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fc:	881a      	ldrh	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	1c9a      	adds	r2, r3, #2
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008312:	b29b      	uxth	r3, r3
 8008314:	3b01      	subs	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b01      	cmp	r3, #1
 800832c:	d119      	bne.n	8008362 <HAL_SPI_TransmitReceive+0x1b8>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008332:	b29b      	uxth	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d014      	beq.n	8008362 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	b292      	uxth	r2, r2
 8008344:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	1c9a      	adds	r2, r3, #2
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800835e:	2301      	movs	r3, #1
 8008360:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008362:	f7fb ff61 	bl	8004228 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800836e:	429a      	cmp	r2, r3
 8008370:	d807      	bhi.n	8008382 <HAL_SPI_TransmitReceive+0x1d8>
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d003      	beq.n	8008382 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008380:	e0a7      	b.n	80084d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008386:	b29b      	uxth	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1a6      	bne.n	80082da <HAL_SPI_TransmitReceive+0x130>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008390:	b29b      	uxth	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1a1      	bne.n	80082da <HAL_SPI_TransmitReceive+0x130>
 8008396:	e07c      	b.n	8008492 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <HAL_SPI_TransmitReceive+0x1fc>
 80083a0:	8b7b      	ldrh	r3, [r7, #26]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d16b      	bne.n	800847e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	330c      	adds	r3, #12
 80083b0:	7812      	ldrb	r2, [r2, #0]
 80083b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083cc:	e057      	b.n	800847e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f003 0302 	and.w	r3, r3, #2
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d11c      	bne.n	8008416 <HAL_SPI_TransmitReceive+0x26c>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d017      	beq.n	8008416 <HAL_SPI_TransmitReceive+0x26c>
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d114      	bne.n	8008416 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	330c      	adds	r3, #12
 80083f6:	7812      	ldrb	r2, [r2, #0]
 80083f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008408:	b29b      	uxth	r3, r3
 800840a:	3b01      	subs	r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008412:	2300      	movs	r3, #0
 8008414:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b01      	cmp	r3, #1
 8008422:	d119      	bne.n	8008458 <HAL_SPI_TransmitReceive+0x2ae>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d014      	beq.n	8008458 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	b2d2      	uxtb	r2, r2
 800843a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800844a:	b29b      	uxth	r3, r3
 800844c:	3b01      	subs	r3, #1
 800844e:	b29a      	uxth	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008454:	2301      	movs	r3, #1
 8008456:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008458:	f7fb fee6 	bl	8004228 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008464:	429a      	cmp	r2, r3
 8008466:	d803      	bhi.n	8008470 <HAL_SPI_TransmitReceive+0x2c6>
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846e:	d102      	bne.n	8008476 <HAL_SPI_TransmitReceive+0x2cc>
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	2b00      	cmp	r3, #0
 8008474:	d103      	bne.n	800847e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800847c:	e029      	b.n	80084d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008482:	b29b      	uxth	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1a2      	bne.n	80083ce <HAL_SPI_TransmitReceive+0x224>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d19d      	bne.n	80083ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008494:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fa1c 	bl	80088d4 <SPI_EndRxTxTransaction>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d006      	beq.n	80084b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2220      	movs	r2, #32
 80084ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80084ae:	e010      	b.n	80084d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10b      	bne.n	80084d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084b8:	2300      	movs	r3, #0
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	617b      	str	r3, [r7, #20]
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	e000      	b.n	80084d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80084d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3730      	adds	r7, #48	; 0x30
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	099b      	lsrs	r3, r3, #6
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10f      	bne.n	8008534 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	099b      	lsrs	r3, r3, #6
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	4798      	blx	r3
    return;
 8008532:	e0be      	b.n	80086b2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	085b      	lsrs	r3, r3, #1
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00a      	beq.n	8008556 <HAL_SPI_IRQHandler+0x66>
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	09db      	lsrs	r3, r3, #7
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	4798      	blx	r3
    return;
 8008554:	e0ad      	b.n	80086b2 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	095b      	lsrs	r3, r3, #5
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d106      	bne.n	8008570 <HAL_SPI_IRQHandler+0x80>
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	099b      	lsrs	r3, r3, #6
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80a1 	beq.w	80086b2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	095b      	lsrs	r3, r3, #5
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 809a 	beq.w	80086b2 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	099b      	lsrs	r3, r3, #6
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d023      	beq.n	80085d2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b03      	cmp	r3, #3
 8008594:	d011      	beq.n	80085ba <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800859a:	f043 0204 	orr.w	r2, r3, #4
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	e00b      	b.n	80085d2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085ba:	2300      	movs	r3, #0
 80085bc:	613b      	str	r3, [r7, #16]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	693b      	ldr	r3, [r7, #16]
        return;
 80085d0:	e06f      	b.n	80086b2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	095b      	lsrs	r3, r3, #5
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d014      	beq.n	8008608 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e2:	f043 0201 	orr.w	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860c:	2b00      	cmp	r3, #0
 800860e:	d04f      	beq.n	80086b0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800861e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d104      	bne.n	800863c <HAL_SPI_IRQHandler+0x14c>
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	2b00      	cmp	r3, #0
 800863a:	d034      	beq.n	80086a6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 0203 	bic.w	r2, r2, #3
 800864a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d011      	beq.n	8008678 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008658:	4a17      	ldr	r2, [pc, #92]	; (80086b8 <HAL_SPI_IRQHandler+0x1c8>)
 800865a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008660:	4618      	mov	r0, r3
 8008662:	f7fb ff1a 	bl	800449a <HAL_DMA_Abort_IT>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008670:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800867c:	2b00      	cmp	r3, #0
 800867e:	d016      	beq.n	80086ae <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008684:	4a0c      	ldr	r2, [pc, #48]	; (80086b8 <HAL_SPI_IRQHandler+0x1c8>)
 8008686:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800868c:	4618      	mov	r0, r3
 800868e:	f7fb ff04 	bl	800449a <HAL_DMA_Abort_IT>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00a      	beq.n	80086ae <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80086a4:	e003      	b.n	80086ae <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f808 	bl	80086bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80086ac:	e000      	b.n	80086b0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80086ae:	bf00      	nop
    return;
 80086b0:	bf00      	nop
  }
}
 80086b2:	3720      	adds	r7, #32
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	080086cf 	.word	0x080086cf

080086bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bc80      	pop	{r7}
 80086cc:	4770      	bx	lr

080086ce <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f7ff ffe7 	bl	80086bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086ee:	bf00      	nop
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	4613      	mov	r3, r2
 8008706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008708:	f7fb fd8e 	bl	8004228 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	1a9b      	subs	r3, r3, r2
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	4413      	add	r3, r2
 8008716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008718:	f7fb fd86 	bl	8004228 <HAL_GetTick>
 800871c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800871e:	4b39      	ldr	r3, [pc, #228]	; (8008804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	015b      	lsls	r3, r3, #5
 8008724:	0d1b      	lsrs	r3, r3, #20
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	fb02 f303 	mul.w	r3, r2, r3
 800872c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800872e:	e054      	b.n	80087da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d050      	beq.n	80087da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008738:	f7fb fd76 	bl	8004228 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	69fa      	ldr	r2, [r7, #28]
 8008744:	429a      	cmp	r2, r3
 8008746:	d902      	bls.n	800874e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d13d      	bne.n	80087ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800875c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008766:	d111      	bne.n	800878c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008770:	d004      	beq.n	800877c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800877a:	d107      	bne.n	800878c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800878a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008794:	d10f      	bne.n	80087b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e017      	b.n	80087fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4013      	ands	r3, r2
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	bf0c      	ite	eq
 80087ea:	2301      	moveq	r3, #1
 80087ec:	2300      	movne	r3, #0
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	461a      	mov	r2, r3
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d19b      	bne.n	8008730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3720      	adds	r7, #32
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	200006b4 	.word	0x200006b4

08008808 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af02      	add	r7, sp, #8
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800881c:	d111      	bne.n	8008842 <SPI_EndRxTransaction+0x3a>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008826:	d004      	beq.n	8008832 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008830:	d107      	bne.n	8008842 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008840:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800884a:	d12a      	bne.n	80088a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008854:	d012      	beq.n	800887c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	2180      	movs	r1, #128	; 0x80
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f7ff ff49 	bl	80086f8 <SPI_WaitFlagStateUntilTimeout>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d02d      	beq.n	80088c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008870:	f043 0220 	orr.w	r2, r3, #32
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e026      	b.n	80088ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2200      	movs	r2, #0
 8008884:	2101      	movs	r1, #1
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff ff36 	bl	80086f8 <SPI_WaitFlagStateUntilTimeout>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d01a      	beq.n	80088c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008896:	f043 0220 	orr.w	r2, r3, #32
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e013      	b.n	80088ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2200      	movs	r2, #0
 80088aa:	2101      	movs	r1, #1
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f7ff ff23 	bl	80086f8 <SPI_WaitFlagStateUntilTimeout>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d007      	beq.n	80088c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088bc:	f043 0220 	orr.w	r2, r3, #32
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e000      	b.n	80088ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af02      	add	r7, sp, #8
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088e0:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <SPI_EndRxTxTransaction+0x7c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1b      	ldr	r2, [pc, #108]	; (8008954 <SPI_EndRxTxTransaction+0x80>)
 80088e6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ea:	0d5b      	lsrs	r3, r3, #21
 80088ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088f0:	fb02 f303 	mul.w	r3, r2, r3
 80088f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088fe:	d112      	bne.n	8008926 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2200      	movs	r2, #0
 8008908:	2180      	movs	r1, #128	; 0x80
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f7ff fef4 	bl	80086f8 <SPI_WaitFlagStateUntilTimeout>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d016      	beq.n	8008944 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891a:	f043 0220 	orr.w	r2, r3, #32
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e00f      	b.n	8008946 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00a      	beq.n	8008942 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	3b01      	subs	r3, #1
 8008930:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893c:	2b80      	cmp	r3, #128	; 0x80
 800893e:	d0f2      	beq.n	8008926 <SPI_EndRxTxTransaction+0x52>
 8008940:	e000      	b.n	8008944 <SPI_EndRxTxTransaction+0x70>
        break;
 8008942:	bf00      	nop
  }

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	200006b4 	.word	0x200006b4
 8008954:	165e9f81 	.word	0x165e9f81

08008958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e031      	b.n	80089ce <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d106      	bne.n	8008984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fb fae6 	bl	8003f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3304      	adds	r3, #4
 8008994:	4619      	mov	r1, r3
 8008996:	4610      	mov	r0, r2
 8008998:	f000 fb3c 	bl	8009014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
	...

080089d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d001      	beq.n	80089f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e03a      	b.n	8008a66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0201 	orr.w	r2, r2, #1
 8008a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a10:	d00e      	beq.n	8008a30 <HAL_TIM_Base_Start_IT+0x58>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a16      	ldr	r2, [pc, #88]	; (8008a70 <HAL_TIM_Base_Start_IT+0x98>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d009      	beq.n	8008a30 <HAL_TIM_Base_Start_IT+0x58>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a14      	ldr	r2, [pc, #80]	; (8008a74 <HAL_TIM_Base_Start_IT+0x9c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d004      	beq.n	8008a30 <HAL_TIM_Base_Start_IT+0x58>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a13      	ldr	r2, [pc, #76]	; (8008a78 <HAL_TIM_Base_Start_IT+0xa0>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d111      	bne.n	8008a54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b06      	cmp	r3, #6
 8008a40:	d010      	beq.n	8008a64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0201 	orr.w	r2, r2, #1
 8008a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a52:	e007      	b.n	8008a64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 0201 	orr.w	r2, r2, #1
 8008a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bc80      	pop	{r7}
 8008a6e:	4770      	bx	lr
 8008a70:	40000400 	.word	0x40000400
 8008a74:	40000800 	.word	0x40000800
 8008a78:	40010800 	.word	0x40010800

08008a7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e08f      	b.n	8008bb0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d106      	bne.n	8008aaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7fb fa93 	bl	8003fd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2202      	movs	r2, #2
 8008aae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	6812      	ldr	r2, [r2, #0]
 8008abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ac0:	f023 0307 	bic.w	r3, r3, #7
 8008ac4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3304      	adds	r3, #4
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	f000 fa9f 	bl	8009014 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008afe:	f023 0303 	bic.w	r3, r3, #3
 8008b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	689a      	ldr	r2, [r3, #8]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	021b      	lsls	r3, r3, #8
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008b1c:	f023 030c 	bic.w	r3, r3, #12
 8008b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	68da      	ldr	r2, [r3, #12]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	021b      	lsls	r3, r3, #8
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	011a      	lsls	r2, r3, #4
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	031b      	lsls	r3, r3, #12
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008bc8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8008bd0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d109      	bne.n	8008bec <HAL_TIM_Encoder_Start+0x34>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d001      	beq.n	8008be2 <HAL_TIM_Encoder_Start+0x2a>
    {
      return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e050      	b.n	8008c84 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2202      	movs	r2, #2
 8008be6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008bea:	e01c      	b.n	8008c26 <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	d109      	bne.n	8008c06 <HAL_TIM_Encoder_Start+0x4e>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d001      	beq.n	8008bfc <HAL_TIM_Encoder_Start+0x44>
    {
      return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e043      	b.n	8008c84 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008c04:	e00f      	b.n	8008c26 <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d102      	bne.n	8008c12 <HAL_TIM_Encoder_Start+0x5a>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d001      	beq.n	8008c16 <HAL_TIM_Encoder_Start+0x5e>
    {
      return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e036      	b.n	8008c84 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2202      	movs	r2, #2
 8008c22:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <HAL_TIM_Encoder_Start+0x7c>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d008      	beq.n	8008c44 <HAL_TIM_Encoder_Start+0x8c>
 8008c32:	e00f      	b.n	8008c54 <HAL_TIM_Encoder_Start+0x9c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 fae1 	bl	8009204 <TIM_CCxChannelCmd>
      break;
 8008c42:	e016      	b.n	8008c72 <HAL_TIM_Encoder_Start+0xba>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	2104      	movs	r1, #4
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fad9 	bl	8009204 <TIM_CCxChannelCmd>
      break;
 8008c52:	e00e      	b.n	8008c72 <HAL_TIM_Encoder_Start+0xba>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 fad1 	bl	8009204 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2201      	movs	r2, #1
 8008c68:	2104      	movs	r1, #4
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 faca 	bl	8009204 <TIM_CCxChannelCmd>
      break;
 8008c70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f042 0201 	orr.w	r2, r2, #1
 8008c80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d122      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d11b      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f06f 0202 	mvn.w	r2, #2
 8008cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f985 	bl	8008fde <HAL_TIM_IC_CaptureCallback>
 8008cd4:	e005      	b.n	8008ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f978 	bl	8008fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f987 	bl	8008ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	f003 0304 	and.w	r3, r3, #4
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	d122      	bne.n	8008d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	2b04      	cmp	r3, #4
 8008d02:	d11b      	bne.n	8008d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f06f 0204 	mvn.w	r2, #4
 8008d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2202      	movs	r2, #2
 8008d12:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f95b 	bl	8008fde <HAL_TIM_IC_CaptureCallback>
 8008d28:	e005      	b.n	8008d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f94e 	bl	8008fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f95d 	bl	8008ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	f003 0308 	and.w	r3, r3, #8
 8008d46:	2b08      	cmp	r3, #8
 8008d48:	d122      	bne.n	8008d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f003 0308 	and.w	r3, r3, #8
 8008d54:	2b08      	cmp	r3, #8
 8008d56:	d11b      	bne.n	8008d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f06f 0208 	mvn.w	r2, #8
 8008d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2204      	movs	r2, #4
 8008d66:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f931 	bl	8008fde <HAL_TIM_IC_CaptureCallback>
 8008d7c:	e005      	b.n	8008d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f924 	bl	8008fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f933 	bl	8008ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	f003 0310 	and.w	r3, r3, #16
 8008d9a:	2b10      	cmp	r3, #16
 8008d9c:	d122      	bne.n	8008de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	f003 0310 	and.w	r3, r3, #16
 8008da8:	2b10      	cmp	r3, #16
 8008daa:	d11b      	bne.n	8008de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f06f 0210 	mvn.w	r2, #16
 8008db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2208      	movs	r2, #8
 8008dba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f907 	bl	8008fde <HAL_TIM_IC_CaptureCallback>
 8008dd0:	e005      	b.n	8008dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f8fa 	bl	8008fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f909 	bl	8008ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d10e      	bne.n	8008e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f003 0301 	and.w	r3, r3, #1
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d107      	bne.n	8008e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f06f 0201 	mvn.w	r2, #1
 8008e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7fa fa4c 	bl	80032a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1a:	2b40      	cmp	r3, #64	; 0x40
 8008e1c:	d10e      	bne.n	8008e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e28:	2b40      	cmp	r3, #64	; 0x40
 8008e2a:	d107      	bne.n	8008e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f8e3 	bl	8009002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d101      	bne.n	8008e5c <HAL_TIM_ConfigClockSource+0x18>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e0b3      	b.n	8008fc4 <HAL_TIM_ConfigClockSource+0x180>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2202      	movs	r2, #2
 8008e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e94:	d03e      	beq.n	8008f14 <HAL_TIM_ConfigClockSource+0xd0>
 8008e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e9a:	f200 8087 	bhi.w	8008fac <HAL_TIM_ConfigClockSource+0x168>
 8008e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea2:	f000 8085 	beq.w	8008fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eaa:	d87f      	bhi.n	8008fac <HAL_TIM_ConfigClockSource+0x168>
 8008eac:	2b70      	cmp	r3, #112	; 0x70
 8008eae:	d01a      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0xa2>
 8008eb0:	2b70      	cmp	r3, #112	; 0x70
 8008eb2:	d87b      	bhi.n	8008fac <HAL_TIM_ConfigClockSource+0x168>
 8008eb4:	2b60      	cmp	r3, #96	; 0x60
 8008eb6:	d050      	beq.n	8008f5a <HAL_TIM_ConfigClockSource+0x116>
 8008eb8:	2b60      	cmp	r3, #96	; 0x60
 8008eba:	d877      	bhi.n	8008fac <HAL_TIM_ConfigClockSource+0x168>
 8008ebc:	2b50      	cmp	r3, #80	; 0x50
 8008ebe:	d03c      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0xf6>
 8008ec0:	2b50      	cmp	r3, #80	; 0x50
 8008ec2:	d873      	bhi.n	8008fac <HAL_TIM_ConfigClockSource+0x168>
 8008ec4:	2b40      	cmp	r3, #64	; 0x40
 8008ec6:	d058      	beq.n	8008f7a <HAL_TIM_ConfigClockSource+0x136>
 8008ec8:	2b40      	cmp	r3, #64	; 0x40
 8008eca:	d86f      	bhi.n	8008fac <HAL_TIM_ConfigClockSource+0x168>
 8008ecc:	2b30      	cmp	r3, #48	; 0x30
 8008ece:	d064      	beq.n	8008f9a <HAL_TIM_ConfigClockSource+0x156>
 8008ed0:	2b30      	cmp	r3, #48	; 0x30
 8008ed2:	d86b      	bhi.n	8008fac <HAL_TIM_ConfigClockSource+0x168>
 8008ed4:	2b20      	cmp	r3, #32
 8008ed6:	d060      	beq.n	8008f9a <HAL_TIM_ConfigClockSource+0x156>
 8008ed8:	2b20      	cmp	r3, #32
 8008eda:	d867      	bhi.n	8008fac <HAL_TIM_ConfigClockSource+0x168>
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d05c      	beq.n	8008f9a <HAL_TIM_ConfigClockSource+0x156>
 8008ee0:	2b10      	cmp	r3, #16
 8008ee2:	d05a      	beq.n	8008f9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008ee4:	e062      	b.n	8008fac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	6899      	ldr	r1, [r3, #8]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f000 f966 	bl	80091c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	609a      	str	r2, [r3, #8]
      break;
 8008f12:	e04e      	b.n	8008fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	6899      	ldr	r1, [r3, #8]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f000 f94f 	bl	80091c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f36:	609a      	str	r2, [r3, #8]
      break;
 8008f38:	e03b      	b.n	8008fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	6859      	ldr	r1, [r3, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	461a      	mov	r2, r3
 8008f48:	f000 f8c6 	bl	80090d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2150      	movs	r1, #80	; 0x50
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f91d 	bl	8009192 <TIM_ITRx_SetConfig>
      break;
 8008f58:	e02b      	b.n	8008fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	6859      	ldr	r1, [r3, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f000 f8e4 	bl	8009134 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2160      	movs	r1, #96	; 0x60
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f90d 	bl	8009192 <TIM_ITRx_SetConfig>
      break;
 8008f78:	e01b      	b.n	8008fb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	6859      	ldr	r1, [r3, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	461a      	mov	r2, r3
 8008f88:	f000 f8a6 	bl	80090d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2140      	movs	r1, #64	; 0x40
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 f8fd 	bl	8009192 <TIM_ITRx_SetConfig>
      break;
 8008f98:	e00b      	b.n	8008fb2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	f000 f8f4 	bl	8009192 <TIM_ITRx_SetConfig>
        break;
 8008faa:	e002      	b.n	8008fb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008fac:	bf00      	nop
 8008fae:	e000      	b.n	8008fb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008fb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bc80      	pop	{r7}
 8008fdc:	4770      	bx	lr

08008fde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fe6:	bf00      	nop
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bc80      	pop	{r7}
 8008fee:	4770      	bx	lr

08008ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr

08009002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	bc80      	pop	{r7}
 8009012:	4770      	bx	lr

08009014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800902a:	d007      	beq.n	800903c <TIM_Base_SetConfig+0x28>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a25      	ldr	r2, [pc, #148]	; (80090c4 <TIM_Base_SetConfig+0xb0>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d003      	beq.n	800903c <TIM_Base_SetConfig+0x28>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a24      	ldr	r2, [pc, #144]	; (80090c8 <TIM_Base_SetConfig+0xb4>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d108      	bne.n	800904e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	4313      	orrs	r3, r2
 800904c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009054:	d013      	beq.n	800907e <TIM_Base_SetConfig+0x6a>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a1a      	ldr	r2, [pc, #104]	; (80090c4 <TIM_Base_SetConfig+0xb0>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d00f      	beq.n	800907e <TIM_Base_SetConfig+0x6a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a19      	ldr	r2, [pc, #100]	; (80090c8 <TIM_Base_SetConfig+0xb4>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d00b      	beq.n	800907e <TIM_Base_SetConfig+0x6a>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a18      	ldr	r2, [pc, #96]	; (80090cc <TIM_Base_SetConfig+0xb8>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d007      	beq.n	800907e <TIM_Base_SetConfig+0x6a>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a17      	ldr	r2, [pc, #92]	; (80090d0 <TIM_Base_SetConfig+0xbc>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d003      	beq.n	800907e <TIM_Base_SetConfig+0x6a>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a16      	ldr	r2, [pc, #88]	; (80090d4 <TIM_Base_SetConfig+0xc0>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d108      	bne.n	8009090 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	4313      	orrs	r3, r2
 800908e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	689a      	ldr	r2, [r3, #8]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	615a      	str	r2, [r3, #20]
}
 80090ba:	bf00      	nop
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	bc80      	pop	{r7}
 80090c2:	4770      	bx	lr
 80090c4:	40000400 	.word	0x40000400
 80090c8:	40000800 	.word	0x40000800
 80090cc:	40010800 	.word	0x40010800
 80090d0:	40010c00 	.word	0x40010c00
 80090d4:	40011000 	.word	0x40011000

080090d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090d8:	b480      	push	{r7}
 80090da:	b087      	sub	sp, #28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	f023 0201 	bic.w	r2, r3, #1
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f023 030a 	bic.w	r3, r3, #10
 8009114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	4313      	orrs	r3, r2
 800911c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	621a      	str	r2, [r3, #32]
}
 800912a:	bf00      	nop
 800912c:	371c      	adds	r7, #28
 800912e:	46bd      	mov	sp, r7
 8009130:	bc80      	pop	{r7}
 8009132:	4770      	bx	lr

08009134 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	f023 0210 	bic.w	r2, r3, #16
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800915e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	031b      	lsls	r3, r3, #12
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	4313      	orrs	r3, r2
 8009168:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009170:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	011b      	lsls	r3, r3, #4
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	4313      	orrs	r3, r2
 800917a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	621a      	str	r2, [r3, #32]
}
 8009188:	bf00      	nop
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	bc80      	pop	{r7}
 8009190:	4770      	bx	lr

08009192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009192:	b480      	push	{r7}
 8009194:	b085      	sub	sp, #20
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	f043 0307 	orr.w	r3, r3, #7
 80091b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	609a      	str	r2, [r3, #8]
}
 80091bc:	bf00      	nop
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bc80      	pop	{r7}
 80091c4:	4770      	bx	lr

080091c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b087      	sub	sp, #28
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	60f8      	str	r0, [r7, #12]
 80091ce:	60b9      	str	r1, [r7, #8]
 80091d0:	607a      	str	r2, [r7, #4]
 80091d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	021a      	lsls	r2, r3, #8
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	609a      	str	r2, [r3, #8]
}
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	bc80      	pop	{r7}
 8009202:	4770      	bx	lr

08009204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009204:	b480      	push	{r7}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f003 031f 	and.w	r3, r3, #31
 8009216:	2201      	movs	r2, #1
 8009218:	fa02 f303 	lsl.w	r3, r2, r3
 800921c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6a1a      	ldr	r2, [r3, #32]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	43db      	mvns	r3, r3
 8009226:	401a      	ands	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a1a      	ldr	r2, [r3, #32]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f003 031f 	and.w	r3, r3, #31
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	fa01 f303 	lsl.w	r3, r1, r3
 800923c:	431a      	orrs	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	621a      	str	r2, [r3, #32]
}
 8009242:	bf00      	nop
 8009244:	371c      	adds	r7, #28
 8009246:	46bd      	mov	sp, r7
 8009248:	bc80      	pop	{r7}
 800924a:	4770      	bx	lr

0800924c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009260:	2302      	movs	r3, #2
 8009262:	e046      	b.n	80092f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	4313      	orrs	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a6:	d00e      	beq.n	80092c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a13      	ldr	r2, [pc, #76]	; (80092fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d009      	beq.n	80092c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a12      	ldr	r2, [pc, #72]	; (8009300 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d004      	beq.n	80092c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a10      	ldr	r2, [pc, #64]	; (8009304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d10c      	bne.n	80092e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bc80      	pop	{r7}
 80092fa:	4770      	bx	lr
 80092fc:	40000400 	.word	0x40000400
 8009300:	40000800 	.word	0x40000800
 8009304:	40010800 	.word	0x40010800

08009308 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009318:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800931c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	b29a      	uxth	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr

08009334 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800933c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009340:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009348:	b29a      	uxth	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	b29b      	uxth	r3, r3
 800934e:	43db      	mvns	r3, r3
 8009350:	b29b      	uxth	r3, r3
 8009352:	4013      	ands	r3, r2
 8009354:	b29a      	uxth	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	bc80      	pop	{r7}
 8009366:	4770      	bx	lr

08009368 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009368:	b084      	sub	sp, #16
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	f107 0014 	add.w	r0, r7, #20
 8009376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bc80      	pop	{r7}
 80093a4:	b004      	add	sp, #16
 80093a6:	4770      	bx	lr

080093a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b09b      	sub	sp, #108	; 0x6c
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80093ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	78db      	ldrb	r3, [r3, #3]
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d81f      	bhi.n	800941a <USB_ActivateEndpoint+0x72>
 80093da:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <USB_ActivateEndpoint+0x38>)
 80093dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e0:	080093f1 	.word	0x080093f1
 80093e4:	0800940d 	.word	0x0800940d
 80093e8:	08009423 	.word	0x08009423
 80093ec:	080093ff 	.word	0x080093ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80093f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80093f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80093fc:	e012      	b.n	8009424 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80093fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009402:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009406:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800940a:	e00b      	b.n	8009424 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800940c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009414:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009418:	e004      	b.n	8009424 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8009420:	e000      	b.n	8009424 <USB_ActivateEndpoint+0x7c>
      break;
 8009422:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	441a      	add	r2, r3
 800942e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800943a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800943e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009442:	b29b      	uxth	r3, r3
 8009444:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b29b      	uxth	r3, r3
 8009454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800945c:	b29a      	uxth	r2, r3
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	b29b      	uxth	r3, r3
 8009464:	4313      	orrs	r3, r2
 8009466:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	441a      	add	r2, r3
 8009474:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800947c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009488:	b29b      	uxth	r3, r3
 800948a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	7b1b      	ldrb	r3, [r3, #12]
 8009490:	2b00      	cmp	r3, #0
 8009492:	f040 8149 	bne.w	8009728 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	785b      	ldrb	r3, [r3, #1]
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 8084 	beq.w	80095a8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	4413      	add	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	011a      	lsls	r2, r3, #4
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094c2:	613b      	str	r3, [r7, #16]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	88db      	ldrh	r3, [r3, #6]
 80094c8:	085b      	lsrs	r3, r3, #1
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	81fb      	strh	r3, [r7, #14]
 80094e2:	89fb      	ldrh	r3, [r7, #14]
 80094e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01b      	beq.n	8009524 <USB_ActivateEndpoint+0x17c>
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009502:	81bb      	strh	r3, [r7, #12]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	441a      	add	r2, r3
 800950e:	89bb      	ldrh	r3, [r7, #12]
 8009510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800951c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009520:	b29b      	uxth	r3, r3
 8009522:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	78db      	ldrb	r3, [r3, #3]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d020      	beq.n	800956e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	b29b      	uxth	r3, r3
 800953a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800953e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009542:	813b      	strh	r3, [r7, #8]
 8009544:	893b      	ldrh	r3, [r7, #8]
 8009546:	f083 0320 	eor.w	r3, r3, #32
 800954a:	813b      	strh	r3, [r7, #8]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	441a      	add	r2, r3
 8009556:	893b      	ldrh	r3, [r7, #8]
 8009558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800955c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009568:	b29b      	uxth	r3, r3
 800956a:	8013      	strh	r3, [r2, #0]
 800956c:	e27f      	b.n	8009a6e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	b29b      	uxth	r3, r3
 800957c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009584:	817b      	strh	r3, [r7, #10]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	441a      	add	r2, r3
 8009590:	897b      	ldrh	r3, [r7, #10]
 8009592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800959a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800959e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	8013      	strh	r3, [r2, #0]
 80095a6:	e262      	b.n	8009a6e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	461a      	mov	r2, r3
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	4413      	add	r3, r2
 80095ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	011a      	lsls	r2, r3, #4
 80095c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80095ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	88db      	ldrh	r3, [r3, #6]
 80095d0:	085b      	lsrs	r3, r3, #1
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095da:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	627b      	str	r3, [r7, #36]	; 0x24
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	461a      	mov	r2, r3
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	4413      	add	r3, r2
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	011a      	lsls	r2, r3, #4
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	4413      	add	r3, r2
 80095fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095fe:	623b      	str	r3, [r7, #32]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d112      	bne.n	800962e <USB_ActivateEndpoint+0x286>
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	b29b      	uxth	r3, r3
 800960e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009612:	b29a      	uxth	r2, r3
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	801a      	strh	r2, [r3, #0]
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	b29b      	uxth	r3, r3
 800961e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009626:	b29a      	uxth	r2, r3
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	801a      	strh	r2, [r3, #0]
 800962c:	e02f      	b.n	800968e <USB_ActivateEndpoint+0x2e6>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b3e      	cmp	r3, #62	; 0x3e
 8009634:	d813      	bhi.n	800965e <USB_ActivateEndpoint+0x2b6>
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	085b      	lsrs	r3, r3, #1
 800963c:	663b      	str	r3, [r7, #96]	; 0x60
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <USB_ActivateEndpoint+0x2a8>
 800964a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800964c:	3301      	adds	r3, #1
 800964e:	663b      	str	r3, [r7, #96]	; 0x60
 8009650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009652:	b29b      	uxth	r3, r3
 8009654:	029b      	lsls	r3, r3, #10
 8009656:	b29a      	uxth	r2, r3
 8009658:	6a3b      	ldr	r3, [r7, #32]
 800965a:	801a      	strh	r2, [r3, #0]
 800965c:	e017      	b.n	800968e <USB_ActivateEndpoint+0x2e6>
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	095b      	lsrs	r3, r3, #5
 8009664:	663b      	str	r3, [r7, #96]	; 0x60
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	f003 031f 	and.w	r3, r3, #31
 800966e:	2b00      	cmp	r3, #0
 8009670:	d102      	bne.n	8009678 <USB_ActivateEndpoint+0x2d0>
 8009672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009674:	3b01      	subs	r3, #1
 8009676:	663b      	str	r3, [r7, #96]	; 0x60
 8009678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800967a:	b29b      	uxth	r3, r3
 800967c:	029b      	lsls	r3, r3, #10
 800967e:	b29b      	uxth	r3, r3
 8009680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009688:	b29a      	uxth	r2, r3
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	83fb      	strh	r3, [r7, #30]
 800969c:	8bfb      	ldrh	r3, [r7, #30]
 800969e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d01b      	beq.n	80096de <USB_ActivateEndpoint+0x336>
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096bc:	83bb      	strh	r3, [r7, #28]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	441a      	add	r2, r3
 80096c8:	8bbb      	ldrh	r3, [r7, #28]
 80096ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096da:	b29b      	uxth	r3, r3
 80096dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	881b      	ldrh	r3, [r3, #0]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f4:	837b      	strh	r3, [r7, #26]
 80096f6:	8b7b      	ldrh	r3, [r7, #26]
 80096f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80096fc:	837b      	strh	r3, [r7, #26]
 80096fe:	8b7b      	ldrh	r3, [r7, #26]
 8009700:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009704:	837b      	strh	r3, [r7, #26]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	441a      	add	r2, r3
 8009710:	8b7b      	ldrh	r3, [r7, #26]
 8009712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800971a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800971e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009722:	b29b      	uxth	r3, r3
 8009724:	8013      	strh	r3, [r2, #0]
 8009726:	e1a2      	b.n	8009a6e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	b29b      	uxth	r3, r3
 8009736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800973a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800973e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	441a      	add	r2, r3
 800974c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009758:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800975c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009760:	b29b      	uxth	r3, r3
 8009762:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	65bb      	str	r3, [r7, #88]	; 0x58
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800976e:	b29b      	uxth	r3, r3
 8009770:	461a      	mov	r2, r3
 8009772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009774:	4413      	add	r3, r2
 8009776:	65bb      	str	r3, [r7, #88]	; 0x58
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	011a      	lsls	r2, r3, #4
 800977e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009780:	4413      	add	r3, r2
 8009782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009786:	657b      	str	r3, [r7, #84]	; 0x54
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	891b      	ldrh	r3, [r3, #8]
 800978c:	085b      	lsrs	r3, r3, #1
 800978e:	b29b      	uxth	r3, r3
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	b29a      	uxth	r2, r3
 8009794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009796:	801a      	strh	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	653b      	str	r3, [r7, #80]	; 0x50
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	461a      	mov	r2, r3
 80097a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097a8:	4413      	add	r3, r2
 80097aa:	653b      	str	r3, [r7, #80]	; 0x50
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	011a      	lsls	r2, r3, #4
 80097b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80097ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	895b      	ldrh	r3, [r3, #10]
 80097c0:	085b      	lsrs	r3, r3, #1
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	785b      	ldrb	r3, [r3, #1]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f040 8091 	bne.w	80098f8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80097e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80097e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01b      	beq.n	8009826 <USB_ActivateEndpoint+0x47e>
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009804:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	441a      	add	r2, r3
 8009810:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800981a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800981e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009822:	b29b      	uxth	r3, r3
 8009824:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	873b      	strh	r3, [r7, #56]	; 0x38
 8009834:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983a:	2b00      	cmp	r3, #0
 800983c:	d01b      	beq.n	8009876 <USB_ActivateEndpoint+0x4ce>
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	b29b      	uxth	r3, r3
 800984c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009854:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	441a      	add	r2, r3
 8009860:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800986a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800986e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009872:	b29b      	uxth	r3, r3
 8009874:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	b29b      	uxth	r3, r3
 8009884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800988c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800988e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009890:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009894:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009896:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009898:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800989c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	441a      	add	r2, r3
 80098a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80098aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098d4:	867b      	strh	r3, [r7, #50]	; 0x32
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	441a      	add	r2, r3
 80098e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80098e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	8013      	strh	r3, [r2, #0]
 80098f6:	e0ba      	b.n	8009a6e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009908:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800990c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01d      	beq.n	8009950 <USB_ActivateEndpoint+0x5a8>
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	b29b      	uxth	r3, r3
 8009922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800992a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	441a      	add	r2, r3
 8009938:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800993c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800994c:	b29b      	uxth	r3, r3
 800994e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009960:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	d01d      	beq.n	80099a8 <USB_ActivateEndpoint+0x600>
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29b      	uxth	r3, r3
 800997a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800997e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009982:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	441a      	add	r2, r3
 8009990:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800999c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	78db      	ldrb	r3, [r3, #3]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d024      	beq.n	80099fa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	881b      	ldrh	r3, [r3, #0]
 80099bc:	b29b      	uxth	r3, r3
 80099be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80099ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80099ce:	f083 0320 	eor.w	r3, r3, #32
 80099d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	441a      	add	r2, r3
 80099e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80099e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	8013      	strh	r3, [r2, #0]
 80099f8:	e01d      	b.n	8009a36 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	441a      	add	r2, r3
 8009a1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	881b      	ldrh	r3, [r3, #0]
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	441a      	add	r2, r3
 8009a58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	376c      	adds	r7, #108	; 0x6c
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bc80      	pop	{r7}
 8009a7a:	4770      	bx	lr

08009a7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b08d      	sub	sp, #52	; 0x34
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	7b1b      	ldrb	r3, [r3, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f040 808e 	bne.w	8009bac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	785b      	ldrb	r3, [r3, #1]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d044      	beq.n	8009b22 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	81bb      	strh	r3, [r7, #12]
 8009aa6:	89bb      	ldrh	r3, [r7, #12]
 8009aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d01b      	beq.n	8009ae8 <USB_DeactivateEndpoint+0x6c>
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac6:	817b      	strh	r3, [r7, #10]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	441a      	add	r2, r3
 8009ad2:	897b      	ldrh	r3, [r7, #10]
 8009ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ae0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afe:	813b      	strh	r3, [r7, #8]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	441a      	add	r2, r3
 8009b0a:	893b      	ldrh	r3, [r7, #8]
 8009b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	8013      	strh	r3, [r2, #0]
 8009b20:	e192      	b.n	8009e48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	827b      	strh	r3, [r7, #18]
 8009b30:	8a7b      	ldrh	r3, [r7, #18]
 8009b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d01b      	beq.n	8009b72 <USB_DeactivateEndpoint+0xf6>
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b50:	823b      	strh	r3, [r7, #16]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	441a      	add	r2, r3
 8009b5c:	8a3b      	ldrh	r3, [r7, #16]
 8009b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b88:	81fb      	strh	r3, [r7, #14]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	441a      	add	r2, r3
 8009b94:	89fb      	ldrh	r3, [r7, #14]
 8009b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	8013      	strh	r3, [r2, #0]
 8009baa:	e14d      	b.n	8009e48 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	785b      	ldrb	r3, [r3, #1]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f040 80a5 	bne.w	8009d00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	843b      	strh	r3, [r7, #32]
 8009bc4:	8c3b      	ldrh	r3, [r7, #32]
 8009bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d01b      	beq.n	8009c06 <USB_DeactivateEndpoint+0x18a>
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009be4:	83fb      	strh	r3, [r7, #30]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	441a      	add	r2, r3
 8009bf0:	8bfb      	ldrh	r3, [r7, #30]
 8009bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	83bb      	strh	r3, [r7, #28]
 8009c14:	8bbb      	ldrh	r3, [r7, #28]
 8009c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d01b      	beq.n	8009c56 <USB_DeactivateEndpoint+0x1da>
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	881b      	ldrh	r3, [r3, #0]
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c34:	837b      	strh	r3, [r7, #26]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	441a      	add	r2, r3
 8009c40:	8b7b      	ldrh	r3, [r7, #26]
 8009c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c6c:	833b      	strh	r3, [r7, #24]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	441a      	add	r2, r3
 8009c78:	8b3b      	ldrh	r3, [r7, #24]
 8009c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca4:	82fb      	strh	r3, [r7, #22]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	441a      	add	r2, r3
 8009cb0:	8afb      	ldrh	r3, [r7, #22]
 8009cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cdc:	82bb      	strh	r3, [r7, #20]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	441a      	add	r2, r3
 8009ce8:	8abb      	ldrh	r3, [r7, #20]
 8009cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	8013      	strh	r3, [r2, #0]
 8009cfe:	e0a3      	b.n	8009e48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	881b      	ldrh	r3, [r3, #0]
 8009d0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009d0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d01b      	beq.n	8009d50 <USB_DeactivateEndpoint+0x2d4>
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	441a      	add	r2, r3
 8009d3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009d5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01b      	beq.n	8009da0 <USB_DeactivateEndpoint+0x324>
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	441a      	add	r2, r3
 8009d8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	441a      	add	r2, r3
 8009dc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	441a      	add	r2, r3
 8009dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	881b      	ldrh	r3, [r3, #0]
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e26:	847b      	strh	r3, [r7, #34]	; 0x22
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	441a      	add	r2, r3
 8009e32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3734      	adds	r7, #52	; 0x34
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bc80      	pop	{r7}
 8009e52:	4770      	bx	lr

08009e54 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b0cc      	sub	sp, #304	; 0x130
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e62:	6018      	str	r0, [r3, #0]
 8009e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e6c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	785b      	ldrb	r3, [r3, #1]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	f041 817d 	bne.w	800b17a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	699a      	ldr	r2, [r3, #24]
 8009e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d908      	bls.n	8009eae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009eac:	e007      	b.n	8009ebe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	7b1b      	ldrb	r3, [r3, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d152      	bne.n	8009f74 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6959      	ldr	r1, [r3, #20]
 8009eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	88da      	ldrh	r2, [r3, #6]
 8009ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009ef0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009ef4:	6800      	ldr	r0, [r0, #0]
 8009ef6:	f001 ff0e 	bl	800bd16 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009efe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009f02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f06:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009f0a:	6812      	ldr	r2, [r2, #0]
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	4619      	mov	r1, r3
 8009f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f24:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009f28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f2c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8009f30:	6812      	ldr	r2, [r2, #0]
 8009f32:	440a      	add	r2, r1
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	011a      	lsls	r2, r3, #4
 8009f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f48:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f68:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	801a      	strh	r2, [r3, #0]
 8009f70:	f001 b8b5 	b.w	800b0de <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	78db      	ldrb	r3, [r3, #3]
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	f040 84c6 	bne.w	800a912 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6a1a      	ldr	r2, [r3, #32]
 8009f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	f240 8443 	bls.w	800a82a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	441a      	add	r2, r3
 8009fe8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ff4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6a1a      	ldr	r2, [r3, #32]
 800a00c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a010:	1ad2      	subs	r2, r2, r3
 800a012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a01e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a02c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 823e 	beq.w	800a4c2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a04a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a04e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a052:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a056:	6812      	ldr	r2, [r2, #0]
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a05e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	785b      	ldrb	r3, [r3, #1]
 800a066:	2b00      	cmp	r3, #0
 800a068:	f040 809a 	bne.w	800a1a0 <USB_EPStartXfer+0x34c>
 800a06c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a074:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a078:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a07c:	6812      	ldr	r2, [r2, #0]
 800a07e:	601a      	str	r2, [r3, #0]
 800a080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a084:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a08e:	b29b      	uxth	r3, r3
 800a090:	4619      	mov	r1, r3
 800a092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a09a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a09e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800a0a2:	6812      	ldr	r2, [r2, #0]
 800a0a4:	440a      	add	r2, r1
 800a0a6:	601a      	str	r2, [r3, #0]
 800a0a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	011a      	lsls	r2, r3, #4
 800a0b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a0c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a0ce:	601a      	str	r2, [r3, #0]
 800a0d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d122      	bne.n	800a11e <USB_EPStartXfer+0x2ca>
 800a0d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	801a      	strh	r2, [r3, #0]
 800a0f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	b29b      	uxth	r3, r3
 800a106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a10a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a10e:	b29a      	uxth	r2, r3
 800a110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a114:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	801a      	strh	r2, [r3, #0]
 800a11c:	e079      	b.n	800a212 <USB_EPStartXfer+0x3be>
 800a11e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a122:	2b3e      	cmp	r3, #62	; 0x3e
 800a124:	d81b      	bhi.n	800a15e <USB_EPStartXfer+0x30a>
 800a126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a12a:	085b      	lsrs	r3, r3, #1
 800a12c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d004      	beq.n	800a146 <USB_EPStartXfer+0x2f2>
 800a13c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a140:	3301      	adds	r3, #1
 800a142:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a146:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	029b      	lsls	r3, r3, #10
 800a14e:	b29a      	uxth	r2, r3
 800a150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a154:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	801a      	strh	r2, [r3, #0]
 800a15c:	e059      	b.n	800a212 <USB_EPStartXfer+0x3be>
 800a15e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a162:	095b      	lsrs	r3, r3, #5
 800a164:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a16c:	f003 031f 	and.w	r3, r3, #31
 800a170:	2b00      	cmp	r3, #0
 800a172:	d104      	bne.n	800a17e <USB_EPStartXfer+0x32a>
 800a174:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a178:	3b01      	subs	r3, #1
 800a17a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a17e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a182:	b29b      	uxth	r3, r3
 800a184:	029b      	lsls	r3, r3, #10
 800a186:	b29b      	uxth	r3, r3
 800a188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a18c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a190:	b29a      	uxth	r2, r3
 800a192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a196:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	801a      	strh	r2, [r3, #0]
 800a19e:	e038      	b.n	800a212 <USB_EPStartXfer+0x3be>
 800a1a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d130      	bne.n	800a212 <USB_EPStartXfer+0x3be>
 800a1b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1c6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a1ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1ce:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800a1d2:	6812      	ldr	r2, [r2, #0]
 800a1d4:	440a      	add	r2, r1
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	011a      	lsls	r2, r3, #4
 800a1e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a1f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a204:	b29a      	uxth	r2, r3
 800a206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a20a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	895b      	ldrh	r3, [r3, #10]
 800a21e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6959      	ldr	r1, [r3, #20]
 800a22e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a232:	b29b      	uxth	r3, r3
 800a234:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a238:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a23c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a240:	6800      	ldr	r0, [r0, #0]
 800a242:	f001 fd68 	bl	800bd16 <USB_WritePMA>
            ep->xfer_buff += len;
 800a246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a24a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	695a      	ldr	r2, [r3, #20]
 800a252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a256:	441a      	add	r2, r3
 800a258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a25c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6a1a      	ldr	r2, [r3, #32]
 800a270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d90f      	bls.n	800a2a0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800a280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6a1a      	ldr	r2, [r3, #32]
 800a28c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a290:	1ad2      	subs	r2, r2, r3
 800a292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	621a      	str	r2, [r3, #32]
 800a29e:	e00e      	b.n	800a2be <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800a2a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
 800a2ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800a2b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a2be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	785b      	ldrb	r3, [r3, #1]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f040 809a 	bne.w	800a404 <USB_EPStartXfer+0x5b0>
 800a2d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a2d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a2dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a2e0:	6812      	ldr	r2, [r2, #0]
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a2fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a302:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800a306:	6812      	ldr	r2, [r2, #0]
 800a308:	440a      	add	r2, r1
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	011a      	lsls	r2, r3, #4
 800a31a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a31e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4413      	add	r3, r2
 800a326:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a32a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a32e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d122      	bne.n	800a382 <USB_EPStartXfer+0x52e>
 800a33c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a340:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a34e:	b29a      	uxth	r2, r3
 800a350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a354:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	801a      	strh	r2, [r3, #0]
 800a35c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a360:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	b29b      	uxth	r3, r3
 800a36a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a36e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a372:	b29a      	uxth	r2, r3
 800a374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a378:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	801a      	strh	r2, [r3, #0]
 800a380:	e083      	b.n	800a48a <USB_EPStartXfer+0x636>
 800a382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a386:	2b3e      	cmp	r3, #62	; 0x3e
 800a388:	d81b      	bhi.n	800a3c2 <USB_EPStartXfer+0x56e>
 800a38a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a38e:	085b      	lsrs	r3, r3, #1
 800a390:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d004      	beq.n	800a3aa <USB_EPStartXfer+0x556>
 800a3a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a3aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	029b      	lsls	r3, r3, #10
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	801a      	strh	r2, [r3, #0]
 800a3c0:	e063      	b.n	800a48a <USB_EPStartXfer+0x636>
 800a3c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3c6:	095b      	lsrs	r3, r3, #5
 800a3c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a3cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3d0:	f003 031f 	and.w	r3, r3, #31
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d104      	bne.n	800a3e2 <USB_EPStartXfer+0x58e>
 800a3d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a3e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	029b      	lsls	r3, r3, #10
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	801a      	strh	r2, [r3, #0]
 800a402:	e042      	b.n	800a48a <USB_EPStartXfer+0x636>
 800a404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d13a      	bne.n	800a48a <USB_EPStartXfer+0x636>
 800a414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a418:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a41c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a420:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a424:	6812      	ldr	r2, [r2, #0]
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a42c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a436:	b29b      	uxth	r3, r3
 800a438:	4619      	mov	r1, r3
 800a43a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a43e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a442:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a446:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800a44a:	6812      	ldr	r2, [r2, #0]
 800a44c:	440a      	add	r2, r1
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	011a      	lsls	r2, r3, #4
 800a45e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a462:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4413      	add	r3, r2
 800a46a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a46e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a472:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a476:	601a      	str	r2, [r3, #0]
 800a478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a482:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a48a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a48e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	891b      	ldrh	r3, [r3, #8]
 800a496:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a49a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a49e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6959      	ldr	r1, [r3, #20]
 800a4a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a4b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a4b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a4b8:	6800      	ldr	r0, [r0, #0]
 800a4ba:	f001 fc2c 	bl	800bd16 <USB_WritePMA>
 800a4be:	f000 be0e 	b.w	800b0de <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a4c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	785b      	ldrb	r3, [r3, #1]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d16d      	bne.n	800a5ae <USB_EPStartXfer+0x75a>
 800a4d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f2:	4413      	add	r3, r2
 800a4f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	011a      	lsls	r2, r3, #4
 800a504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a506:	4413      	add	r3, r2
 800a508:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a50c:	647b      	str	r3, [r7, #68]	; 0x44
 800a50e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a512:	2b00      	cmp	r3, #0
 800a514:	d112      	bne.n	800a53c <USB_EPStartXfer+0x6e8>
 800a516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a520:	b29a      	uxth	r2, r3
 800a522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a524:	801a      	strh	r2, [r3, #0]
 800a526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a534:	b29a      	uxth	r2, r3
 800a536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a538:	801a      	strh	r2, [r3, #0]
 800a53a:	e063      	b.n	800a604 <USB_EPStartXfer+0x7b0>
 800a53c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a540:	2b3e      	cmp	r3, #62	; 0x3e
 800a542:	d817      	bhi.n	800a574 <USB_EPStartXfer+0x720>
 800a544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a548:	085b      	lsrs	r3, r3, #1
 800a54a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a54e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	d004      	beq.n	800a564 <USB_EPStartXfer+0x710>
 800a55a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a55e:	3301      	adds	r3, #1
 800a560:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a564:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a568:	b29b      	uxth	r3, r3
 800a56a:	029b      	lsls	r3, r3, #10
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a570:	801a      	strh	r2, [r3, #0]
 800a572:	e047      	b.n	800a604 <USB_EPStartXfer+0x7b0>
 800a574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a578:	095b      	lsrs	r3, r3, #5
 800a57a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a57e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a582:	f003 031f 	and.w	r3, r3, #31
 800a586:	2b00      	cmp	r3, #0
 800a588:	d104      	bne.n	800a594 <USB_EPStartXfer+0x740>
 800a58a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a58e:	3b01      	subs	r3, #1
 800a590:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a594:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a598:	b29b      	uxth	r3, r3
 800a59a:	029b      	lsls	r3, r3, #10
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5aa:	801a      	strh	r2, [r3, #0]
 800a5ac:	e02a      	b.n	800a604 <USB_EPStartXfer+0x7b0>
 800a5ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	785b      	ldrb	r3, [r3, #1]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d122      	bne.n	800a604 <USB_EPStartXfer+0x7b0>
 800a5be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	653b      	str	r3, [r7, #80]	; 0x50
 800a5ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	461a      	mov	r2, r3
 800a5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5de:	4413      	add	r3, r2
 800a5e0:	653b      	str	r3, [r7, #80]	; 0x50
 800a5e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	011a      	lsls	r2, r3, #4
 800a5f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a5f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a602:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	891b      	ldrh	r3, [r3, #8]
 800a610:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6959      	ldr	r1, [r3, #20]
 800a620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a624:	b29b      	uxth	r3, r3
 800a626:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a62a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a62e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a632:	6800      	ldr	r0, [r0, #0]
 800a634:	f001 fb6f 	bl	800bd16 <USB_WritePMA>
            ep->xfer_buff += len;
 800a638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a63c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	695a      	ldr	r2, [r3, #20]
 800a644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a648:	441a      	add	r2, r3
 800a64a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a64e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a65a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6a1a      	ldr	r2, [r3, #32]
 800a662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d90f      	bls.n	800a692 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800a672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6a1a      	ldr	r2, [r3, #32]
 800a67e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a682:	1ad2      	subs	r2, r2, r3
 800a684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	621a      	str	r2, [r3, #32]
 800a690:	e00e      	b.n	800a6b0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800a692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800a6a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a6b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	643b      	str	r3, [r7, #64]	; 0x40
 800a6bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	785b      	ldrb	r3, [r3, #1]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d16d      	bne.n	800a7a8 <USB_EPStartXfer+0x954>
 800a6cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ec:	4413      	add	r3, r2
 800a6ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	011a      	lsls	r2, r3, #4
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	4413      	add	r3, r2
 800a702:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a706:	637b      	str	r3, [r7, #52]	; 0x34
 800a708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d112      	bne.n	800a736 <USB_EPStartXfer+0x8e2>
 800a710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a712:	881b      	ldrh	r3, [r3, #0]
 800a714:	b29b      	uxth	r3, r3
 800a716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71e:	801a      	strh	r2, [r3, #0]
 800a720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	b29b      	uxth	r3, r3
 800a726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a72a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a72e:	b29a      	uxth	r2, r3
 800a730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a732:	801a      	strh	r2, [r3, #0]
 800a734:	e05d      	b.n	800a7f2 <USB_EPStartXfer+0x99e>
 800a736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a73a:	2b3e      	cmp	r3, #62	; 0x3e
 800a73c:	d817      	bhi.n	800a76e <USB_EPStartXfer+0x91a>
 800a73e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a742:	085b      	lsrs	r3, r3, #1
 800a744:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a74c:	f003 0301 	and.w	r3, r3, #1
 800a750:	2b00      	cmp	r3, #0
 800a752:	d004      	beq.n	800a75e <USB_EPStartXfer+0x90a>
 800a754:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a758:	3301      	adds	r3, #1
 800a75a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a75e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a762:	b29b      	uxth	r3, r3
 800a764:	029b      	lsls	r3, r3, #10
 800a766:	b29a      	uxth	r2, r3
 800a768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76a:	801a      	strh	r2, [r3, #0]
 800a76c:	e041      	b.n	800a7f2 <USB_EPStartXfer+0x99e>
 800a76e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a772:	095b      	lsrs	r3, r3, #5
 800a774:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a77c:	f003 031f 	and.w	r3, r3, #31
 800a780:	2b00      	cmp	r3, #0
 800a782:	d104      	bne.n	800a78e <USB_EPStartXfer+0x93a>
 800a784:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a788:	3b01      	subs	r3, #1
 800a78a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a78e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a792:	b29b      	uxth	r3, r3
 800a794:	029b      	lsls	r3, r3, #10
 800a796:	b29b      	uxth	r3, r3
 800a798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a79c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a4:	801a      	strh	r2, [r3, #0]
 800a7a6:	e024      	b.n	800a7f2 <USB_EPStartXfer+0x99e>
 800a7a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	785b      	ldrb	r3, [r3, #1]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d11c      	bne.n	800a7f2 <USB_EPStartXfer+0x99e>
 800a7b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7cc:	4413      	add	r3, r2
 800a7ce:	643b      	str	r3, [r7, #64]	; 0x40
 800a7d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	011a      	lsls	r2, r3, #4
 800a7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a7f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	895b      	ldrh	r3, [r3, #10]
 800a7fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6959      	ldr	r1, [r3, #20]
 800a80e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a812:	b29b      	uxth	r3, r3
 800a814:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a818:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a81c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a820:	6800      	ldr	r0, [r0, #0]
 800a822:	f001 fa78 	bl	800bd16 <USB_WritePMA>
 800a826:	f000 bc5a 	b.w	800b0de <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a82a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a82e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a83a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a83e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	b29b      	uxth	r3, r3
 800a858:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a85c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a860:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	441a      	add	r2, r3
 800a87e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a88a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a892:	b29b      	uxth	r3, r3
 800a894:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a89a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8b6:	4413      	add	r3, r2
 800a8b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	011a      	lsls	r2, r3, #4
 800a8c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a8dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	891b      	ldrh	r3, [r3, #8]
 800a8e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6959      	ldr	r1, [r3, #20]
 800a8f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a902:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a906:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a90a:	6800      	ldr	r0, [r0, #0]
 800a90c:	f001 fa03 	bl	800bd16 <USB_WritePMA>
 800a910:	e3e5      	b.n	800b0de <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800a912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a916:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4413      	add	r3, r2
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a938:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800a93c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a94a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	441a      	add	r2, r3
 800a956:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a95a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a95e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a962:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a96e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6a1a      	ldr	r2, [r3, #32]
 800a97a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a97e:	1ad2      	subs	r2, r2, r3
 800a980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a98c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a990:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a99a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	881b      	ldrh	r3, [r3, #0]
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f000 81bc 	beq.w	800ad2c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a9b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a9c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	785b      	ldrb	r3, [r3, #1]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d16d      	bne.n	800aaae <USB_EPStartXfer+0xc5a>
 800a9d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9f2:	4413      	add	r3, r2
 800a9f4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	011a      	lsls	r2, r3, #4
 800aa04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa06:	4413      	add	r3, r2
 800aa08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aa0c:	677b      	str	r3, [r7, #116]	; 0x74
 800aa0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d112      	bne.n	800aa3c <USB_EPStartXfer+0xbe8>
 800aa16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa24:	801a      	strh	r2, [r3, #0]
 800aa26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa38:	801a      	strh	r2, [r3, #0]
 800aa3a:	e060      	b.n	800aafe <USB_EPStartXfer+0xcaa>
 800aa3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa40:	2b3e      	cmp	r3, #62	; 0x3e
 800aa42:	d817      	bhi.n	800aa74 <USB_EPStartXfer+0xc20>
 800aa44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa48:	085b      	lsrs	r3, r3, #1
 800aa4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800aa4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d004      	beq.n	800aa64 <USB_EPStartXfer+0xc10>
 800aa5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800aa5e:	3301      	adds	r3, #1
 800aa60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800aa64:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	029b      	lsls	r3, r3, #10
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa70:	801a      	strh	r2, [r3, #0]
 800aa72:	e044      	b.n	800aafe <USB_EPStartXfer+0xcaa>
 800aa74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa78:	095b      	lsrs	r3, r3, #5
 800aa7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800aa7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa82:	f003 031f 	and.w	r3, r3, #31
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d104      	bne.n	800aa94 <USB_EPStartXfer+0xc40>
 800aa8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800aa94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	029b      	lsls	r3, r3, #10
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaaa:	801a      	strh	r2, [r3, #0]
 800aaac:	e027      	b.n	800aafe <USB_EPStartXfer+0xcaa>
 800aaae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	785b      	ldrb	r3, [r3, #1]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d11f      	bne.n	800aafe <USB_EPStartXfer+0xcaa>
 800aabe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aac2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aacc:	b29b      	uxth	r3, r3
 800aace:	461a      	mov	r2, r3
 800aad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aad4:	4413      	add	r3, r2
 800aad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	011a      	lsls	r2, r3, #4
 800aae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aaec:	4413      	add	r3, r2
 800aaee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aaf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aaf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aafc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800aafe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	895b      	ldrh	r3, [r3, #10]
 800ab0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	6959      	ldr	r1, [r3, #20]
 800ab1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ab24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ab28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ab2c:	6800      	ldr	r0, [r0, #0]
 800ab2e:	f001 f8f2 	bl	800bd16 <USB_WritePMA>
          ep->xfer_buff += len;
 800ab32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	695a      	ldr	r2, [r3, #20]
 800ab3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab42:	441a      	add	r2, r3
 800ab44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800ab50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6a1a      	ldr	r2, [r3, #32]
 800ab5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d90f      	bls.n	800ab8c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800ab6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6a1a      	ldr	r2, [r3, #32]
 800ab78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab7c:	1ad2      	subs	r2, r2, r3
 800ab7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	621a      	str	r2, [r3, #32]
 800ab8a:	e00e      	b.n	800abaa <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800ab8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800ab9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2200      	movs	r2, #0
 800aba8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800abaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 8295 	beq.w	800b0de <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800abb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	785b      	ldrb	r3, [r3, #1]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d16d      	bne.n	800aca0 <USB_EPStartXfer+0xe4c>
 800abc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	66bb      	str	r3, [r7, #104]	; 0x68
 800abd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abde:	b29b      	uxth	r3, r3
 800abe0:	461a      	mov	r2, r3
 800abe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abe4:	4413      	add	r3, r2
 800abe6:	66bb      	str	r3, [r7, #104]	; 0x68
 800abe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	011a      	lsls	r2, r3, #4
 800abf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abf8:	4413      	add	r3, r2
 800abfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800abfe:	667b      	str	r3, [r7, #100]	; 0x64
 800ac00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d112      	bne.n	800ac2e <USB_EPStartXfer+0xdda>
 800ac08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac16:	801a      	strh	r2, [r3, #0]
 800ac18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac2a:	801a      	strh	r2, [r3, #0]
 800ac2c:	e063      	b.n	800acf6 <USB_EPStartXfer+0xea2>
 800ac2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac32:	2b3e      	cmp	r3, #62	; 0x3e
 800ac34:	d817      	bhi.n	800ac66 <USB_EPStartXfer+0xe12>
 800ac36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac3a:	085b      	lsrs	r3, r3, #1
 800ac3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ac40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d004      	beq.n	800ac56 <USB_EPStartXfer+0xe02>
 800ac4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac50:	3301      	adds	r3, #1
 800ac52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ac56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	029b      	lsls	r3, r3, #10
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac62:	801a      	strh	r2, [r3, #0]
 800ac64:	e047      	b.n	800acf6 <USB_EPStartXfer+0xea2>
 800ac66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac6a:	095b      	lsrs	r3, r3, #5
 800ac6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ac70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac74:	f003 031f 	and.w	r3, r3, #31
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d104      	bne.n	800ac86 <USB_EPStartXfer+0xe32>
 800ac7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac80:	3b01      	subs	r3, #1
 800ac82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ac86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	029b      	lsls	r3, r3, #10
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac9c:	801a      	strh	r2, [r3, #0]
 800ac9e:	e02a      	b.n	800acf6 <USB_EPStartXfer+0xea2>
 800aca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	785b      	ldrb	r3, [r3, #1]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d122      	bne.n	800acf6 <USB_EPStartXfer+0xea2>
 800acb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	673b      	str	r3, [r7, #112]	; 0x70
 800acbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acca:	b29b      	uxth	r3, r3
 800accc:	461a      	mov	r2, r3
 800acce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acd0:	4413      	add	r3, r2
 800acd2:	673b      	str	r3, [r7, #112]	; 0x70
 800acd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	011a      	lsls	r2, r3, #4
 800ace2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ace4:	4413      	add	r3, r2
 800ace6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800acea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800acec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acf4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800acf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	891b      	ldrh	r3, [r3, #8]
 800ad02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6959      	ldr	r1, [r3, #20]
 800ad12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ad1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ad20:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ad24:	6800      	ldr	r0, [r0, #0]
 800ad26:	f000 fff6 	bl	800bd16 <USB_WritePMA>
 800ad2a:	e1d8      	b.n	800b0de <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	785b      	ldrb	r3, [r3, #1]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d178      	bne.n	800ae2e <USB_EPStartXfer+0xfda>
 800ad3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad60:	4413      	add	r3, r2
 800ad62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	011a      	lsls	r2, r3, #4
 800ad74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad78:	4413      	add	r3, r2
 800ad7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ad82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d116      	bne.n	800adb8 <USB_EPStartXfer+0xf64>
 800ad8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad8e:	881b      	ldrh	r3, [r3, #0]
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad9c:	801a      	strh	r2, [r3, #0]
 800ad9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ada2:	881b      	ldrh	r3, [r3, #0]
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adae:	b29a      	uxth	r2, r3
 800adb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adb4:	801a      	strh	r2, [r3, #0]
 800adb6:	e06b      	b.n	800ae90 <USB_EPStartXfer+0x103c>
 800adb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adbc:	2b3e      	cmp	r3, #62	; 0x3e
 800adbe:	d818      	bhi.n	800adf2 <USB_EPStartXfer+0xf9e>
 800adc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adc4:	085b      	lsrs	r3, r3, #1
 800adc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800adca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d004      	beq.n	800ade0 <USB_EPStartXfer+0xf8c>
 800add6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800adda:	3301      	adds	r3, #1
 800addc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ade0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	029b      	lsls	r3, r3, #10
 800ade8:	b29a      	uxth	r2, r3
 800adea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adee:	801a      	strh	r2, [r3, #0]
 800adf0:	e04e      	b.n	800ae90 <USB_EPStartXfer+0x103c>
 800adf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adf6:	095b      	lsrs	r3, r3, #5
 800adf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800adfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae00:	f003 031f 	and.w	r3, r3, #31
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d104      	bne.n	800ae12 <USB_EPStartXfer+0xfbe>
 800ae08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ae12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	029b      	lsls	r3, r3, #10
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae2a:	801a      	strh	r2, [r3, #0]
 800ae2c:	e030      	b.n	800ae90 <USB_EPStartXfer+0x103c>
 800ae2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	785b      	ldrb	r3, [r3, #1]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d128      	bne.n	800ae90 <USB_EPStartXfer+0x103c>
 800ae3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ae4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae62:	4413      	add	r3, r2
 800ae64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ae68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	011a      	lsls	r2, r3, #4
 800ae76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ae80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ae84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	891b      	ldrh	r3, [r3, #8]
 800ae9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	6959      	ldr	r1, [r3, #20]
 800aeac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800aeb6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800aeba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800aebe:	6800      	ldr	r0, [r0, #0]
 800aec0:	f000 ff29 	bl	800bd16 <USB_WritePMA>
          ep->xfer_buff += len;
 800aec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	695a      	ldr	r2, [r3, #20]
 800aed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aed4:	441a      	add	r2, r3
 800aed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aeda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800aee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6a1a      	ldr	r2, [r3, #32]
 800aeee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d90f      	bls.n	800af1e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800aefe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6a1a      	ldr	r2, [r3, #32]
 800af0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af0e:	1ad2      	subs	r2, r2, r3
 800af10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	621a      	str	r2, [r3, #32]
 800af1c:	e00e      	b.n	800af3c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800af1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800af2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2200      	movs	r2, #0
 800af3a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800af3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 80cc 	beq.w	800b0de <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800af46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	785b      	ldrb	r3, [r3, #1]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d178      	bne.n	800b056 <USB_EPStartXfer+0x1202>
 800af64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800af72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af80:	b29b      	uxth	r3, r3
 800af82:	461a      	mov	r2, r3
 800af84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af88:	4413      	add	r3, r2
 800af8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800af8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	011a      	lsls	r2, r3, #4
 800af9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800afa0:	4413      	add	r3, r2
 800afa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800afa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800afaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d116      	bne.n	800afe0 <USB_EPStartXfer+0x118c>
 800afb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afb6:	881b      	ldrh	r3, [r3, #0]
 800afb8:	b29b      	uxth	r3, r3
 800afba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afc4:	801a      	strh	r2, [r3, #0]
 800afc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	b29b      	uxth	r3, r3
 800afce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afdc:	801a      	strh	r2, [r3, #0]
 800afde:	e064      	b.n	800b0aa <USB_EPStartXfer+0x1256>
 800afe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afe4:	2b3e      	cmp	r3, #62	; 0x3e
 800afe6:	d818      	bhi.n	800b01a <USB_EPStartXfer+0x11c6>
 800afe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afec:	085b      	lsrs	r3, r3, #1
 800afee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800aff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d004      	beq.n	800b008 <USB_EPStartXfer+0x11b4>
 800affe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b002:	3301      	adds	r3, #1
 800b004:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	029b      	lsls	r3, r3, #10
 800b010:	b29a      	uxth	r2, r3
 800b012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b016:	801a      	strh	r2, [r3, #0]
 800b018:	e047      	b.n	800b0aa <USB_EPStartXfer+0x1256>
 800b01a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b01e:	095b      	lsrs	r3, r3, #5
 800b020:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b028:	f003 031f 	and.w	r3, r3, #31
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d104      	bne.n	800b03a <USB_EPStartXfer+0x11e6>
 800b030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b034:	3b01      	subs	r3, #1
 800b036:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b03a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b03e:	b29b      	uxth	r3, r3
 800b040:	029b      	lsls	r3, r3, #10
 800b042:	b29b      	uxth	r3, r3
 800b044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b052:	801a      	strh	r2, [r3, #0]
 800b054:	e029      	b.n	800b0aa <USB_EPStartXfer+0x1256>
 800b056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b05a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	785b      	ldrb	r3, [r3, #1]
 800b062:	2b01      	cmp	r3, #1
 800b064:	d121      	bne.n	800b0aa <USB_EPStartXfer+0x1256>
 800b066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b06a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b074:	b29b      	uxth	r3, r3
 800b076:	461a      	mov	r2, r3
 800b078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b07c:	4413      	add	r3, r2
 800b07e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	011a      	lsls	r2, r3, #4
 800b090:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b094:	4413      	add	r3, r2
 800b096:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b09a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b09e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b0aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	895b      	ldrh	r3, [r3, #10]
 800b0b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b0ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6959      	ldr	r1, [r3, #20]
 800b0c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b0d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b0d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b0d8:	6800      	ldr	r0, [r0, #0]
 800b0da:	f000 fe1c 	bl	800bd16 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b0de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	881b      	ldrh	r3, [r3, #0]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b100:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b10c:	8013      	strh	r3, [r2, #0]
 800b10e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b112:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b116:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b11a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b11e:	8812      	ldrh	r2, [r2, #0]
 800b120:	f082 0210 	eor.w	r2, r2, #16
 800b124:	801a      	strh	r2, [r3, #0]
 800b126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b12a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b12e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b132:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b136:	8812      	ldrh	r2, [r2, #0]
 800b138:	f082 0220 	eor.w	r2, r2, #32
 800b13c:	801a      	strh	r2, [r3, #0]
 800b13e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b14c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	441a      	add	r2, r3
 800b158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b15c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b16a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b172:	b29b      	uxth	r3, r3
 800b174:	8013      	strh	r3, [r2, #0]
 800b176:	f000 bc9f 	b.w	800bab8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b17a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b17e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	7b1b      	ldrb	r3, [r3, #12]
 800b186:	2b00      	cmp	r3, #0
 800b188:	f040 80ae 	bne.w	800b2e8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b18c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	699a      	ldr	r2, [r3, #24]
 800b198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b19c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d917      	bls.n	800b1d8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800b1a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800b1b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	699a      	ldr	r2, [r3, #24]
 800b1c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1c8:	1ad2      	subs	r2, r2, r3
 800b1ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	619a      	str	r2, [r3, #24]
 800b1d6:	e00e      	b.n	800b1f6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800b1d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800b1e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b1f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b212:	b29b      	uxth	r3, r3
 800b214:	461a      	mov	r2, r3
 800b216:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b21a:	4413      	add	r3, r2
 800b21c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	011a      	lsls	r2, r3, #4
 800b22e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b232:	4413      	add	r3, r2
 800b234:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b238:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b23c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b240:	2b00      	cmp	r3, #0
 800b242:	d116      	bne.n	800b272 <USB_EPStartXfer+0x141e>
 800b244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b250:	b29a      	uxth	r2, r3
 800b252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b256:	801a      	strh	r2, [r3, #0]
 800b258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b25c:	881b      	ldrh	r3, [r3, #0]
 800b25e:	b29b      	uxth	r3, r3
 800b260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b268:	b29a      	uxth	r2, r3
 800b26a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b26e:	801a      	strh	r2, [r3, #0]
 800b270:	e3e8      	b.n	800ba44 <USB_EPStartXfer+0x1bf0>
 800b272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b276:	2b3e      	cmp	r3, #62	; 0x3e
 800b278:	d818      	bhi.n	800b2ac <USB_EPStartXfer+0x1458>
 800b27a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b27e:	085b      	lsrs	r3, r3, #1
 800b280:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b288:	f003 0301 	and.w	r3, r3, #1
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d004      	beq.n	800b29a <USB_EPStartXfer+0x1446>
 800b290:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b294:	3301      	adds	r3, #1
 800b296:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b29a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	029b      	lsls	r3, r3, #10
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2a8:	801a      	strh	r2, [r3, #0]
 800b2aa:	e3cb      	b.n	800ba44 <USB_EPStartXfer+0x1bf0>
 800b2ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2b0:	095b      	lsrs	r3, r3, #5
 800b2b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b2b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2ba:	f003 031f 	and.w	r3, r3, #31
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d104      	bne.n	800b2cc <USB_EPStartXfer+0x1478>
 800b2c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b2cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	029b      	lsls	r3, r3, #10
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2e4:	801a      	strh	r2, [r3, #0]
 800b2e6:	e3ad      	b.n	800ba44 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b2e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	78db      	ldrb	r3, [r3, #3]
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	f040 8200 	bne.w	800b6fa <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b2fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	785b      	ldrb	r3, [r3, #1]
 800b306:	2b00      	cmp	r3, #0
 800b308:	f040 8091 	bne.w	800b42e <USB_EPStartXfer+0x15da>
 800b30c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b310:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b31a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b31e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b328:	b29b      	uxth	r3, r3
 800b32a:	461a      	mov	r2, r3
 800b32c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b330:	4413      	add	r3, r2
 800b332:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b33a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	011a      	lsls	r2, r3, #4
 800b344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b348:	4413      	add	r3, r2
 800b34a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b34e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d116      	bne.n	800b390 <USB_EPStartXfer+0x153c>
 800b362:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b366:	881b      	ldrh	r3, [r3, #0]
 800b368:	b29b      	uxth	r3, r3
 800b36a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b36e:	b29a      	uxth	r2, r3
 800b370:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b374:	801a      	strh	r2, [r3, #0]
 800b376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b37a:	881b      	ldrh	r3, [r3, #0]
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b386:	b29a      	uxth	r2, r3
 800b388:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b38c:	801a      	strh	r2, [r3, #0]
 800b38e:	e083      	b.n	800b498 <USB_EPStartXfer+0x1644>
 800b390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	2b3e      	cmp	r3, #62	; 0x3e
 800b39e:	d820      	bhi.n	800b3e2 <USB_EPStartXfer+0x158e>
 800b3a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	085b      	lsrs	r3, r3, #1
 800b3ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b3b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	f003 0301 	and.w	r3, r3, #1
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d004      	beq.n	800b3d0 <USB_EPStartXfer+0x157c>
 800b3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	029b      	lsls	r3, r3, #10
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3de:	801a      	strh	r2, [r3, #0]
 800b3e0:	e05a      	b.n	800b498 <USB_EPStartXfer+0x1644>
 800b3e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	095b      	lsrs	r3, r3, #5
 800b3f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b3f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	f003 031f 	and.w	r3, r3, #31
 800b404:	2b00      	cmp	r3, #0
 800b406:	d104      	bne.n	800b412 <USB_EPStartXfer+0x15be>
 800b408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b40c:	3b01      	subs	r3, #1
 800b40e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b416:	b29b      	uxth	r3, r3
 800b418:	029b      	lsls	r3, r3, #10
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b424:	b29a      	uxth	r2, r3
 800b426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b42a:	801a      	strh	r2, [r3, #0]
 800b42c:	e034      	b.n	800b498 <USB_EPStartXfer+0x1644>
 800b42e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	785b      	ldrb	r3, [r3, #1]
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d12c      	bne.n	800b498 <USB_EPStartXfer+0x1644>
 800b43e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b44c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	461a      	mov	r2, r3
 800b45e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b462:	4413      	add	r3, r2
 800b464:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b46c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	011a      	lsls	r2, r3, #4
 800b476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b47a:	4413      	add	r3, r2
 800b47c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	b29a      	uxth	r2, r3
 800b492:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b496:	801a      	strh	r2, [r3, #0]
 800b498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b49c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	785b      	ldrb	r3, [r3, #1]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f040 8091 	bne.w	800b5da <USB_EPStartXfer+0x1786>
 800b4b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b4dc:	4413      	add	r3, r2
 800b4de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	011a      	lsls	r2, r3, #4
 800b4f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b4fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d116      	bne.n	800b53c <USB_EPStartXfer+0x16e8>
 800b50e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	b29b      	uxth	r3, r3
 800b516:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b520:	801a      	strh	r2, [r3, #0]
 800b522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	b29b      	uxth	r3, r3
 800b52a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b52e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b532:	b29a      	uxth	r2, r3
 800b534:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b538:	801a      	strh	r2, [r3, #0]
 800b53a:	e07c      	b.n	800b636 <USB_EPStartXfer+0x17e2>
 800b53c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	2b3e      	cmp	r3, #62	; 0x3e
 800b54a:	d820      	bhi.n	800b58e <USB_EPStartXfer+0x173a>
 800b54c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	085b      	lsrs	r3, r3, #1
 800b55a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b55e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	f003 0301 	and.w	r3, r3, #1
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d004      	beq.n	800b57c <USB_EPStartXfer+0x1728>
 800b572:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b576:	3301      	adds	r3, #1
 800b578:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b57c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b580:	b29b      	uxth	r3, r3
 800b582:	029b      	lsls	r3, r3, #10
 800b584:	b29a      	uxth	r2, r3
 800b586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b58a:	801a      	strh	r2, [r3, #0]
 800b58c:	e053      	b.n	800b636 <USB_EPStartXfer+0x17e2>
 800b58e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	095b      	lsrs	r3, r3, #5
 800b59c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b5a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	691b      	ldr	r3, [r3, #16]
 800b5ac:	f003 031f 	and.w	r3, r3, #31
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d104      	bne.n	800b5be <USB_EPStartXfer+0x176a>
 800b5b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b5be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	029b      	lsls	r3, r3, #10
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b5d6:	801a      	strh	r2, [r3, #0]
 800b5d8:	e02d      	b.n	800b636 <USB_EPStartXfer+0x17e2>
 800b5da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	785b      	ldrb	r3, [r3, #1]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d125      	bne.n	800b636 <USB_EPStartXfer+0x17e2>
 800b5ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b600:	4413      	add	r3, r2
 800b602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b60a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	011a      	lsls	r2, r3, #4
 800b614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b618:	4413      	add	r3, r2
 800b61a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b61e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	b29a      	uxth	r2, r3
 800b630:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b634:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b63a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	69db      	ldr	r3, [r3, #28]
 800b642:	2b00      	cmp	r3, #0
 800b644:	f000 81fe 	beq.w	800ba44 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b64c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	4413      	add	r3, r2
 800b662:	881b      	ldrh	r3, [r3, #0]
 800b664:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b668:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b66c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b670:	2b00      	cmp	r3, #0
 800b672:	d005      	beq.n	800b680 <USB_EPStartXfer+0x182c>
 800b674:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10d      	bne.n	800b69c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b680:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f040 81db 	bne.w	800ba44 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b68e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b696:	2b00      	cmp	r3, #0
 800b698:	f040 81d4 	bne.w	800ba44 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800b69c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	4413      	add	r3, r2
 800b6b6:	881b      	ldrh	r3, [r3, #0]
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6c2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800b6c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	441a      	add	r2, r3
 800b6e0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b6e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	8013      	strh	r3, [r2, #0]
 800b6f8:	e1a4      	b.n	800ba44 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b6fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	78db      	ldrb	r3, [r3, #3]
 800b706:	2b01      	cmp	r3, #1
 800b708:	f040 819a 	bne.w	800ba40 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b70c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	699a      	ldr	r2, [r3, #24]
 800b718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b71c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	429a      	cmp	r2, r3
 800b726:	d917      	bls.n	800b758 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800b728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b72c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800b738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b73c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	699a      	ldr	r2, [r3, #24]
 800b744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b748:	1ad2      	subs	r2, r2, r3
 800b74a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b74e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	619a      	str	r2, [r3, #24]
 800b756:	e00e      	b.n	800b776 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800b758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b75c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	699b      	ldr	r3, [r3, #24]
 800b764:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800b768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b76c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2200      	movs	r2, #0
 800b774:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b77a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	785b      	ldrb	r3, [r3, #1]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d178      	bne.n	800b878 <USB_EPStartXfer+0x1a24>
 800b786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b78a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b7b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	011a      	lsls	r2, r3, #4
 800b7be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b7c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b7cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d116      	bne.n	800b802 <USB_EPStartXfer+0x19ae>
 800b7d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7e6:	801a      	strh	r2, [r3, #0]
 800b7e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7ec:	881b      	ldrh	r3, [r3, #0]
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7fe:	801a      	strh	r2, [r3, #0]
 800b800:	e06b      	b.n	800b8da <USB_EPStartXfer+0x1a86>
 800b802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b806:	2b3e      	cmp	r3, #62	; 0x3e
 800b808:	d818      	bhi.n	800b83c <USB_EPStartXfer+0x19e8>
 800b80a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b80e:	085b      	lsrs	r3, r3, #1
 800b810:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d004      	beq.n	800b82a <USB_EPStartXfer+0x19d6>
 800b820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b824:	3301      	adds	r3, #1
 800b826:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b82a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b82e:	b29b      	uxth	r3, r3
 800b830:	029b      	lsls	r3, r3, #10
 800b832:	b29a      	uxth	r2, r3
 800b834:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b838:	801a      	strh	r2, [r3, #0]
 800b83a:	e04e      	b.n	800b8da <USB_EPStartXfer+0x1a86>
 800b83c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b840:	095b      	lsrs	r3, r3, #5
 800b842:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b84a:	f003 031f 	and.w	r3, r3, #31
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d104      	bne.n	800b85c <USB_EPStartXfer+0x1a08>
 800b852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b856:	3b01      	subs	r3, #1
 800b858:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b85c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b860:	b29b      	uxth	r3, r3
 800b862:	029b      	lsls	r3, r3, #10
 800b864:	b29b      	uxth	r3, r3
 800b866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b86a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b86e:	b29a      	uxth	r2, r3
 800b870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b874:	801a      	strh	r2, [r3, #0]
 800b876:	e030      	b.n	800b8da <USB_EPStartXfer+0x1a86>
 800b878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b87c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	785b      	ldrb	r3, [r3, #1]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d128      	bne.n	800b8da <USB_EPStartXfer+0x1a86>
 800b888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b88c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b89a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b8b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	011a      	lsls	r2, r3, #4
 800b8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b8ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b8ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b8d8:	801a      	strh	r2, [r3, #0]
 800b8da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b8e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	785b      	ldrb	r3, [r3, #1]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d178      	bne.n	800b9ea <USB_EPStartXfer+0x1b96>
 800b8f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b90a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b914:	b29b      	uxth	r3, r3
 800b916:	461a      	mov	r2, r3
 800b918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b91c:	4413      	add	r3, r2
 800b91e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	011a      	lsls	r2, r3, #4
 800b930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b934:	4413      	add	r3, r2
 800b936:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b93a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b93e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b942:	2b00      	cmp	r3, #0
 800b944:	d116      	bne.n	800b974 <USB_EPStartXfer+0x1b20>
 800b946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b94a:	881b      	ldrh	r3, [r3, #0]
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b952:	b29a      	uxth	r2, r3
 800b954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b958:	801a      	strh	r2, [r3, #0]
 800b95a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	b29b      	uxth	r3, r3
 800b962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b970:	801a      	strh	r2, [r3, #0]
 800b972:	e067      	b.n	800ba44 <USB_EPStartXfer+0x1bf0>
 800b974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b978:	2b3e      	cmp	r3, #62	; 0x3e
 800b97a:	d818      	bhi.n	800b9ae <USB_EPStartXfer+0x1b5a>
 800b97c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b980:	085b      	lsrs	r3, r3, #1
 800b982:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b98a:	f003 0301 	and.w	r3, r3, #1
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d004      	beq.n	800b99c <USB_EPStartXfer+0x1b48>
 800b992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b996:	3301      	adds	r3, #1
 800b998:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b99c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	029b      	lsls	r3, r3, #10
 800b9a4:	b29a      	uxth	r2, r3
 800b9a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9aa:	801a      	strh	r2, [r3, #0]
 800b9ac:	e04a      	b.n	800ba44 <USB_EPStartXfer+0x1bf0>
 800b9ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9b2:	095b      	lsrs	r3, r3, #5
 800b9b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9bc:	f003 031f 	and.w	r3, r3, #31
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d104      	bne.n	800b9ce <USB_EPStartXfer+0x1b7a>
 800b9c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	029b      	lsls	r3, r3, #10
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9e6:	801a      	strh	r2, [r3, #0]
 800b9e8:	e02c      	b.n	800ba44 <USB_EPStartXfer+0x1bf0>
 800b9ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	785b      	ldrb	r3, [r3, #1]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d124      	bne.n	800ba44 <USB_EPStartXfer+0x1bf0>
 800b9fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba10:	4413      	add	r3, r2
 800ba12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	011a      	lsls	r2, r3, #4
 800ba24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba28:	4413      	add	r3, r2
 800ba2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ba2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba3c:	801a      	strh	r2, [r3, #0]
 800ba3e:	e001      	b.n	800ba44 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e03a      	b.n	800baba <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800ba6e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ba72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ba76:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800ba7a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ba7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ba82:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800ba86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	441a      	add	r2, r3
 800baa0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800baa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	785b      	ldrb	r3, [r3, #1]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d020      	beq.n	800bb18 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baec:	81bb      	strh	r3, [r7, #12]
 800baee:	89bb      	ldrh	r3, [r7, #12]
 800baf0:	f083 0310 	eor.w	r3, r3, #16
 800baf4:	81bb      	strh	r3, [r7, #12]
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	441a      	add	r2, r3
 800bb00:	89bb      	ldrh	r3, [r7, #12]
 800bb02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	8013      	strh	r3, [r2, #0]
 800bb16:	e01f      	b.n	800bb58 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4413      	add	r3, r2
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb2e:	81fb      	strh	r3, [r7, #14]
 800bb30:	89fb      	ldrh	r3, [r7, #14]
 800bb32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bb36:	81fb      	strh	r3, [r7, #14]
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	441a      	add	r2, r3
 800bb42:	89fb      	ldrh	r3, [r7, #14]
 800bb44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bc80      	pop	{r7}
 800bb62:	4770      	bx	lr

0800bb64 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b087      	sub	sp, #28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	7b1b      	ldrb	r3, [r3, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f040 809d 	bne.w	800bcb2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	785b      	ldrb	r3, [r3, #1]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d04c      	beq.n	800bc1a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	4413      	add	r3, r2
 800bb8a:	881b      	ldrh	r3, [r3, #0]
 800bb8c:	823b      	strh	r3, [r7, #16]
 800bb8e:	8a3b      	ldrh	r3, [r7, #16]
 800bb90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d01b      	beq.n	800bbd0 <USB_EPClearStall+0x6c>
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4413      	add	r3, r2
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbae:	81fb      	strh	r3, [r7, #14]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	441a      	add	r2, r3
 800bbba:	89fb      	ldrh	r3, [r7, #14]
 800bbbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	78db      	ldrb	r3, [r3, #3]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d06c      	beq.n	800bcb2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4413      	add	r3, r2
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbee:	81bb      	strh	r3, [r7, #12]
 800bbf0:	89bb      	ldrh	r3, [r7, #12]
 800bbf2:	f083 0320 	eor.w	r3, r3, #32
 800bbf6:	81bb      	strh	r3, [r7, #12]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	441a      	add	r2, r3
 800bc02:	89bb      	ldrh	r3, [r7, #12]
 800bc04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	8013      	strh	r3, [r2, #0]
 800bc18:	e04b      	b.n	800bcb2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	4413      	add	r3, r2
 800bc24:	881b      	ldrh	r3, [r3, #0]
 800bc26:	82fb      	strh	r3, [r7, #22]
 800bc28:	8afb      	ldrh	r3, [r7, #22]
 800bc2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d01b      	beq.n	800bc6a <USB_EPClearStall+0x106>
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	4413      	add	r3, r2
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc48:	82bb      	strh	r3, [r7, #20]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	441a      	add	r2, r3
 800bc54:	8abb      	ldrh	r3, [r7, #20]
 800bc56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	4413      	add	r3, r2
 800bc74:	881b      	ldrh	r3, [r3, #0]
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc80:	827b      	strh	r3, [r7, #18]
 800bc82:	8a7b      	ldrh	r3, [r7, #18]
 800bc84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc88:	827b      	strh	r3, [r7, #18]
 800bc8a:	8a7b      	ldrh	r3, [r7, #18]
 800bc8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bc90:	827b      	strh	r3, [r7, #18]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	441a      	add	r2, r3
 800bc9c:	8a7b      	ldrh	r3, [r7, #18]
 800bc9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	371c      	adds	r7, #28
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bc80      	pop	{r7}
 800bcbc:	4770      	bx	lr

0800bcbe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bcca:	78fb      	ldrb	r3, [r7, #3]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d103      	bne.n	800bcd8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2280      	movs	r2, #128	; 0x80
 800bcd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bc80      	pop	{r7}
 800bce2:	4770      	bx	lr

0800bce4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bc80      	pop	{r7}
 800bcf6:	4770      	bx	lr

0800bcf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bc80      	pop	{r7}
 800bd14:	4770      	bx	lr

0800bd16 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd16:	b480      	push	{r7}
 800bd18:	b08d      	sub	sp, #52	; 0x34
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	60f8      	str	r0, [r7, #12]
 800bd1e:	60b9      	str	r1, [r7, #8]
 800bd20:	4611      	mov	r1, r2
 800bd22:	461a      	mov	r2, r3
 800bd24:	460b      	mov	r3, r1
 800bd26:	80fb      	strh	r3, [r7, #6]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bd2c:	88bb      	ldrh	r3, [r7, #4]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	085b      	lsrs	r3, r3, #1
 800bd32:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd3c:	88fb      	ldrh	r3, [r7, #6]
 800bd3e:	005a      	lsls	r2, r3, #1
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd48:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd4e:	e01e      	b.n	800bd8e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	3301      	adds	r3, #1
 800bd5a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	021b      	lsls	r3, r3, #8
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	461a      	mov	r2, r3
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	3302      	adds	r3, #2
 800bd7a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	3302      	adds	r3, #2
 800bd80:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd84:	3301      	adds	r3, #1
 800bd86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1dd      	bne.n	800bd50 <USB_WritePMA+0x3a>
  }
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop
 800bd98:	3734      	adds	r7, #52	; 0x34
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bc80      	pop	{r7}
 800bd9e:	4770      	bx	lr

0800bda0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b08b      	sub	sp, #44	; 0x2c
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	4611      	mov	r1, r2
 800bdac:	461a      	mov	r2, r3
 800bdae:	460b      	mov	r3, r1
 800bdb0:	80fb      	strh	r3, [r7, #6]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bdb6:	88bb      	ldrh	r3, [r7, #4]
 800bdb8:	085b      	lsrs	r3, r3, #1
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bdc6:	88fb      	ldrh	r3, [r7, #6]
 800bdc8:	005a      	lsls	r2, r3, #1
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	4413      	add	r3, r2
 800bdce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdd2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	627b      	str	r3, [r7, #36]	; 0x24
 800bdd8:	e01b      	b.n	800be12 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	881b      	ldrh	r3, [r3, #0]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	3302      	adds	r3, #2
 800bde6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	0a1b      	lsrs	r3, r3, #8
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	3301      	adds	r3, #1
 800be04:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	3302      	adds	r3, #2
 800be0a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	3b01      	subs	r3, #1
 800be10:	627b      	str	r3, [r7, #36]	; 0x24
 800be12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1e0      	bne.n	800bdda <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800be18:	88bb      	ldrh	r3, [r7, #4]
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	b29b      	uxth	r3, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	d007      	beq.n	800be34 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800be24:	6a3b      	ldr	r3, [r7, #32]
 800be26:	881b      	ldrh	r3, [r3, #0]
 800be28:	b29b      	uxth	r3, r3
 800be2a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	701a      	strb	r2, [r3, #0]
  }
}
 800be34:	bf00      	nop
 800be36:	372c      	adds	r7, #44	; 0x2c
 800be38:	46bd      	mov	sp, r7
 800be3a:	bc80      	pop	{r7}
 800be3c:	4770      	bx	lr

0800be3e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b084      	sub	sp, #16
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	460b      	mov	r3, r1
 800be48:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800be4a:	2300      	movs	r3, #0
 800be4c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	7c1b      	ldrb	r3, [r3, #16]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d115      	bne.n	800be82 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be56:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be5a:	2202      	movs	r2, #2
 800be5c:	2181      	movs	r1, #129	; 0x81
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f001 fe75 	bl	800db4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be6e:	2202      	movs	r2, #2
 800be70:	2101      	movs	r1, #1
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f001 fe6b 	bl	800db4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800be80:	e012      	b.n	800bea8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be82:	2340      	movs	r3, #64	; 0x40
 800be84:	2202      	movs	r2, #2
 800be86:	2181      	movs	r1, #129	; 0x81
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f001 fe60 	bl	800db4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be94:	2340      	movs	r3, #64	; 0x40
 800be96:	2202      	movs	r2, #2
 800be98:	2101      	movs	r1, #1
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f001 fe57 	bl	800db4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bea8:	2308      	movs	r3, #8
 800beaa:	2203      	movs	r2, #3
 800beac:	2182      	movs	r1, #130	; 0x82
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f001 fe4d 	bl	800db4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800beba:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bebe:	f001 ff6d 	bl	800dd9c <USBD_static_malloc>
 800bec2:	4602      	mov	r2, r0
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d102      	bne.n	800beda <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800bed4:	2301      	movs	r3, #1
 800bed6:	73fb      	strb	r3, [r7, #15]
 800bed8:	e026      	b.n	800bf28 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bee0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2200      	movs	r2, #0
 800bef0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	7c1b      	ldrb	r3, [r3, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d109      	bne.n	800bf18 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf0e:	2101      	movs	r1, #1
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f001 ff0d 	bl	800dd30 <USBD_LL_PrepareReceive>
 800bf16:	e007      	b.n	800bf28 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf1e:	2340      	movs	r3, #64	; 0x40
 800bf20:	2101      	movs	r1, #1
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f001 ff04 	bl	800dd30 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bf28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b084      	sub	sp, #16
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bf42:	2181      	movs	r1, #129	; 0x81
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f001 fe28 	bl	800db9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bf50:	2101      	movs	r1, #1
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f001 fe21 	bl	800db9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bf60:	2182      	movs	r1, #130	; 0x82
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f001 fe19 	bl	800db9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00e      	beq.n	800bf96 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f001 ff13 	bl	800ddb4 <USBD_static_free>
    pdev->pClassData = NULL;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bfb0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d039      	beq.n	800c03e <USBD_CDC_Setup+0x9e>
 800bfca:	2b20      	cmp	r3, #32
 800bfcc:	d17f      	bne.n	800c0ce <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	88db      	ldrh	r3, [r3, #6]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d029      	beq.n	800c02a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	b25b      	sxtb	r3, r3
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	da11      	bge.n	800c004 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	683a      	ldr	r2, [r7, #0]
 800bfea:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800bfec:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	88d2      	ldrh	r2, [r2, #6]
 800bff2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bff4:	6939      	ldr	r1, [r7, #16]
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	88db      	ldrh	r3, [r3, #6]
 800bffa:	461a      	mov	r2, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 f994 	bl	800d32a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800c002:	e06b      	b.n	800c0dc <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	785a      	ldrb	r2, [r3, #1]
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	88db      	ldrh	r3, [r3, #6]
 800c012:	b2da      	uxtb	r2, r3
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c01a:	6939      	ldr	r1, [r7, #16]
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	88db      	ldrh	r3, [r3, #6]
 800c020:	461a      	mov	r2, r3
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f001 f9af 	bl	800d386 <USBD_CtlPrepareRx>
    break;
 800c028:	e058      	b.n	800c0dc <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	7850      	ldrb	r0, [r2, #1]
 800c036:	2200      	movs	r2, #0
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	4798      	blx	r3
    break;
 800c03c:	e04e      	b.n	800c0dc <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	785b      	ldrb	r3, [r3, #1]
 800c042:	2b0b      	cmp	r3, #11
 800c044:	d02e      	beq.n	800c0a4 <USBD_CDC_Setup+0x104>
 800c046:	2b0b      	cmp	r3, #11
 800c048:	dc38      	bgt.n	800c0bc <USBD_CDC_Setup+0x11c>
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d002      	beq.n	800c054 <USBD_CDC_Setup+0xb4>
 800c04e:	2b0a      	cmp	r3, #10
 800c050:	d014      	beq.n	800c07c <USBD_CDC_Setup+0xdc>
 800c052:	e033      	b.n	800c0bc <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c05a:	2b03      	cmp	r3, #3
 800c05c:	d107      	bne.n	800c06e <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c05e:	f107 030c 	add.w	r3, r7, #12
 800c062:	2202      	movs	r2, #2
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f001 f95f 	bl	800d32a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c06c:	e02e      	b.n	800c0cc <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800c06e:	6839      	ldr	r1, [r7, #0]
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f001 f8f0 	bl	800d256 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c076:	2302      	movs	r3, #2
 800c078:	75fb      	strb	r3, [r7, #23]
      break;
 800c07a:	e027      	b.n	800c0cc <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c082:	2b03      	cmp	r3, #3
 800c084:	d107      	bne.n	800c096 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c086:	f107 030f 	add.w	r3, r7, #15
 800c08a:	2201      	movs	r2, #1
 800c08c:	4619      	mov	r1, r3
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f001 f94b 	bl	800d32a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c094:	e01a      	b.n	800c0cc <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 f8dc 	bl	800d256 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c09e:	2302      	movs	r3, #2
 800c0a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c0a2:	e013      	b.n	800c0cc <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d00d      	beq.n	800c0ca <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800c0ae:	6839      	ldr	r1, [r7, #0]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f001 f8d0 	bl	800d256 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c0b6:	2302      	movs	r3, #2
 800c0b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c0ba:	e006      	b.n	800c0ca <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800c0bc:	6839      	ldr	r1, [r7, #0]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f001 f8c9 	bl	800d256 <USBD_CtlError>
      ret = USBD_FAIL;
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	75fb      	strb	r3, [r7, #23]
      break;
 800c0c8:	e000      	b.n	800c0cc <USBD_CDC_Setup+0x12c>
      break;
 800c0ca:	bf00      	nop
    }
    break;
 800c0cc:	e006      	b.n	800c0dc <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f001 f8c0 	bl	800d256 <USBD_CtlError>
    ret = USBD_FAIL;
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	75fb      	strb	r3, [r7, #23]
    break;
 800c0da:	bf00      	nop
  }

  return ret;
 800c0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3718      	adds	r7, #24
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b084      	sub	sp, #16
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0f8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c100:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d03a      	beq.n	800c182 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c10c:	78fa      	ldrb	r2, [r7, #3]
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	4613      	mov	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	440b      	add	r3, r1
 800c11a:	331c      	adds	r3, #28
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d029      	beq.n	800c176 <USBD_CDC_DataIn+0x90>
 800c122:	78fa      	ldrb	r2, [r7, #3]
 800c124:	6879      	ldr	r1, [r7, #4]
 800c126:	4613      	mov	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	440b      	add	r3, r1
 800c130:	331c      	adds	r3, #28
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	78f9      	ldrb	r1, [r7, #3]
 800c136:	68b8      	ldr	r0, [r7, #8]
 800c138:	460b      	mov	r3, r1
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	440b      	add	r3, r1
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	4403      	add	r3, r0
 800c142:	3338      	adds	r3, #56	; 0x38
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	fbb2 f1f3 	udiv	r1, r2, r3
 800c14a:	fb01 f303 	mul.w	r3, r1, r3
 800c14e:	1ad3      	subs	r3, r2, r3
 800c150:	2b00      	cmp	r3, #0
 800c152:	d110      	bne.n	800c176 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c154:	78fa      	ldrb	r2, [r7, #3]
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	440b      	add	r3, r1
 800c162:	331c      	adds	r3, #28
 800c164:	2200      	movs	r2, #0
 800c166:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c168:	78f9      	ldrb	r1, [r7, #3]
 800c16a:	2300      	movs	r3, #0
 800c16c:	2200      	movs	r2, #0
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f001 fdbb 	bl	800dcea <USBD_LL_Transmit>
 800c174:	e003      	b.n	800c17e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	e000      	b.n	800c184 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c182:	2302      	movs	r3, #2
  }
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c19e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f001 fde6 	bl	800dd76 <USBD_LL_GetRxDataSize>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00d      	beq.n	800c1d8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	4798      	blx	r3

    return USBD_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	e000      	b.n	800c1da <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c1d8:	2302      	movs	r3, #2
  }
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b084      	sub	sp, #16
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c1f0:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d015      	beq.n	800c228 <USBD_CDC_EP0_RxReady+0x46>
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c202:	2bff      	cmp	r3, #255	; 0xff
 800c204:	d010      	beq.n	800c228 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c214:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c21c:	b292      	uxth	r2, r2
 800c21e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	22ff      	movs	r2, #255	; 0xff
 800c224:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c228:	2300      	movs	r3, #0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2243      	movs	r2, #67	; 0x43
 800c240:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c242:	4b03      	ldr	r3, [pc, #12]	; (800c250 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c244:	4618      	mov	r0, r3
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	bc80      	pop	{r7}
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	2000074c 	.word	0x2000074c

0800c254 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2243      	movs	r2, #67	; 0x43
 800c260:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c262:	4b03      	ldr	r3, [pc, #12]	; (800c270 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c264:	4618      	mov	r0, r3
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	bc80      	pop	{r7}
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	20000708 	.word	0x20000708

0800c274 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2243      	movs	r2, #67	; 0x43
 800c280:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c282:	4b03      	ldr	r3, [pc, #12]	; (800c290 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c284:	4618      	mov	r0, r3
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	bc80      	pop	{r7}
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	20000790 	.word	0x20000790

0800c294 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	220a      	movs	r2, #10
 800c2a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c2a2:	4b03      	ldr	r3, [pc, #12]	; (800c2b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bc80      	pop	{r7}
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	200006c4 	.word	0x200006c4

0800c2b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c2be:	2302      	movs	r3, #2
 800c2c0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d005      	beq.n	800c2d4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	683a      	ldr	r2, [r7, #0]
 800c2cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bc80      	pop	{r7}
 800c2de:	4770      	bx	lr

0800c2e0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b087      	sub	sp, #28
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c2f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c2fe:	88fa      	ldrh	r2, [r7, #6]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	371c      	adds	r7, #28
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bc80      	pop	{r7}
 800c310:	4770      	bx	lr

0800c312 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c312:	b480      	push	{r7}
 800c314:	b085      	sub	sp, #20
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c322:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3714      	adds	r7, #20
 800c332:	46bd      	mov	sp, r7
 800c334:	bc80      	pop	{r7}
 800c336:	4770      	bx	lr

0800c338 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c346:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d01c      	beq.n	800c38c <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d115      	bne.n	800c388 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2201      	movs	r2, #1
 800c360:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	2181      	movs	r1, #129	; 0x81
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f001 fcb3 	bl	800dcea <USBD_LL_Transmit>

      return USBD_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	e002      	b.n	800c38e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c388:	2301      	movs	r3, #1
 800c38a:	e000      	b.n	800c38e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c38c:	2302      	movs	r3, #2
  }
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b084      	sub	sp, #16
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c3a4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d017      	beq.n	800c3e0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	7c1b      	ldrb	r3, [r3, #16]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d109      	bne.n	800c3cc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c3be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f001 fcb3 	bl	800dd30 <USBD_LL_PrepareReceive>
 800c3ca:	e007      	b.n	800c3dc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c3d2:	2340      	movs	r3, #64	; 0x40
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f001 fcaa 	bl	800dd30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	e000      	b.n	800c3e2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c3e0:	2302      	movs	r3, #2
  }
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b084      	sub	sp, #16
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	60f8      	str	r0, [r7, #12]
 800c3f2:	60b9      	str	r1, [r7, #8]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c3fe:	2302      	movs	r3, #2
 800c400:	e01a      	b.n	800c438 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d003      	beq.n	800c414 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2200      	movs	r2, #0
 800c410:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d003      	beq.n	800c422 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	79fa      	ldrb	r2, [r7, #7]
 800c42e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f001 fb17 	bl	800da64 <USBD_LL_Init>

  return USBD_OK;
 800c436:	2300      	movs	r3, #0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c440:	b480      	push	{r7}
 800c442:	b085      	sub	sp, #20
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d006      	beq.n	800c462 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	683a      	ldr	r2, [r7, #0]
 800c458:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	73fb      	strb	r3, [r7, #15]
 800c460:	e001      	b.n	800c466 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c462:	2302      	movs	r3, #2
 800c464:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c466:	7bfb      	ldrb	r3, [r7, #15]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bc80      	pop	{r7}
 800c470:	4770      	bx	lr

0800c472 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b082      	sub	sp, #8
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f001 fb4c 	bl	800db18 <USBD_LL_Start>

  return USBD_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800c48a:	b480      	push	{r7}
 800c48c:	b083      	sub	sp, #12
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	bc80      	pop	{r7}
 800c49c:	4770      	bx	lr

0800c49e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b084      	sub	sp, #16
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c4aa:	2302      	movs	r3, #2
 800c4ac:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00c      	beq.n	800c4d2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	78fa      	ldrb	r2, [r7, #3]
 800c4c2:	4611      	mov	r1, r2
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	4798      	blx	r3
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	78fa      	ldrb	r2, [r7, #3]
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	4798      	blx	r3
  return USBD_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c512:	6839      	ldr	r1, [r7, #0]
 800c514:	4618      	mov	r0, r3
 800c516:	f000 fe62 	bl	800d1de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800c528:	461a      	mov	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c536:	f003 031f 	and.w	r3, r3, #31
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	d016      	beq.n	800c56c <USBD_LL_SetupStage+0x6a>
 800c53e:	2b02      	cmp	r3, #2
 800c540:	d81c      	bhi.n	800c57c <USBD_LL_SetupStage+0x7a>
 800c542:	2b00      	cmp	r3, #0
 800c544:	d002      	beq.n	800c54c <USBD_LL_SetupStage+0x4a>
 800c546:	2b01      	cmp	r3, #1
 800c548:	d008      	beq.n	800c55c <USBD_LL_SetupStage+0x5a>
 800c54a:	e017      	b.n	800c57c <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f9c5 	bl	800c8e4 <USBD_StdDevReq>
    break;
 800c55a:	e01a      	b.n	800c592 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c562:	4619      	mov	r1, r3
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fa27 	bl	800c9b8 <USBD_StdItfReq>
    break;
 800c56a:	e012      	b.n	800c592 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fa67 	bl	800ca48 <USBD_StdEPReq>
    break;
 800c57a:	e00a      	b.n	800c592 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c582:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c586:	b2db      	uxtb	r3, r3
 800c588:	4619      	mov	r1, r3
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f001 fb24 	bl	800dbd8 <USBD_LL_StallEP>
    break;
 800c590:	bf00      	nop
  }

  return USBD_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	607a      	str	r2, [r7, #4]
 800c5a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c5aa:	7afb      	ldrb	r3, [r7, #11]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d14b      	bne.n	800c648 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c5b6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d134      	bne.n	800c62c <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	68da      	ldr	r2, [r3, #12]
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d919      	bls.n	800c602 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	68da      	ldr	r2, [r3, #12]
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	1ad2      	subs	r2, r2, r3
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	68da      	ldr	r2, [r3, #12]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d203      	bcs.n	800c5f0 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	e002      	b.n	800c5f6 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	6879      	ldr	r1, [r7, #4]
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f000 fee1 	bl	800d3c2 <USBD_CtlContinueRx>
 800c600:	e038      	b.n	800c674 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00a      	beq.n	800c624 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c614:	2b03      	cmp	r3, #3
 800c616:	d105      	bne.n	800c624 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f000 fede 	bl	800d3e6 <USBD_CtlSendStatus>
 800c62a:	e023      	b.n	800c674 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c632:	2b05      	cmp	r3, #5
 800c634:	d11e      	bne.n	800c674 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c63e:	2100      	movs	r1, #0
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f001 fac9 	bl	800dbd8 <USBD_LL_StallEP>
 800c646:	e015      	b.n	800c674 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00d      	beq.n	800c670 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800c65a:	2b03      	cmp	r3, #3
 800c65c:	d108      	bne.n	800c670 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c664:	699b      	ldr	r3, [r3, #24]
 800c666:	7afa      	ldrb	r2, [r7, #11]
 800c668:	4611      	mov	r1, r2
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	4798      	blx	r3
 800c66e:	e001      	b.n	800c674 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c670:	2302      	movs	r3, #2
 800c672:	e000      	b.n	800c676 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3718      	adds	r7, #24
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b086      	sub	sp, #24
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	460b      	mov	r3, r1
 800c688:	607a      	str	r2, [r7, #4]
 800c68a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c68c:	7afb      	ldrb	r3, [r7, #11]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d17f      	bne.n	800c792 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	3314      	adds	r3, #20
 800c696:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	d15c      	bne.n	800c75c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	68da      	ldr	r2, [r3, #12]
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d915      	bls.n	800c6da <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	68da      	ldr	r2, [r3, #12]
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	1ad2      	subs	r2, r2, r3
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	6879      	ldr	r1, [r7, #4]
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f000 fe4b 	bl	800d362 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f001 fb2c 	bl	800dd30 <USBD_LL_PrepareReceive>
 800c6d8:	e04e      	b.n	800c778 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	6912      	ldr	r2, [r2, #16]
 800c6e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6e6:	fb01 f202 	mul.w	r2, r1, r2
 800c6ea:	1a9b      	subs	r3, r3, r2
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d11c      	bne.n	800c72a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	689a      	ldr	r2, [r3, #8]
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d316      	bcc.n	800c72a <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	689a      	ldr	r2, [r3, #8]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c706:	429a      	cmp	r2, r3
 800c708:	d20f      	bcs.n	800c72a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c70a:	2200      	movs	r2, #0
 800c70c:	2100      	movs	r1, #0
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f000 fe27 	bl	800d362 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c71c:	2300      	movs	r3, #0
 800c71e:	2200      	movs	r2, #0
 800c720:	2100      	movs	r1, #0
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f001 fb04 	bl	800dd30 <USBD_LL_PrepareReceive>
 800c728:	e026      	b.n	800c778 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00a      	beq.n	800c74c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c73c:	2b03      	cmp	r3, #3
 800c73e:	d105      	bne.n	800c74c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c74c:	2180      	movs	r1, #128	; 0x80
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f001 fa42 	bl	800dbd8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f000 fe59 	bl	800d40c <USBD_CtlReceiveStatus>
 800c75a:	e00d      	b.n	800c778 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c762:	2b04      	cmp	r3, #4
 800c764:	d004      	beq.n	800c770 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d103      	bne.n	800c778 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c770:	2180      	movs	r1, #128	; 0x80
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f001 fa30 	bl	800dbd8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d11d      	bne.n	800c7be <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f7ff fe81 	bl	800c48a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800c790:	e015      	b.n	800c7be <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c798:	695b      	ldr	r3, [r3, #20]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00d      	beq.n	800c7ba <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	d108      	bne.n	800c7ba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c7ae:	695b      	ldr	r3, [r3, #20]
 800c7b0:	7afa      	ldrb	r2, [r7, #11]
 800c7b2:	4611      	mov	r1, r2
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	4798      	blx	r3
 800c7b8:	e001      	b.n	800c7be <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	e000      	b.n	800c7c0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3718      	adds	r7, #24
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7d0:	2340      	movs	r3, #64	; 0x40
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f001 f9b9 	bl	800db4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2240      	movs	r2, #64	; 0x40
 800c7e8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7ec:	2340      	movs	r3, #64	; 0x40
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2180      	movs	r1, #128	; 0x80
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f001 f9ab 	bl	800db4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2240      	movs	r2, #64	; 0x40
 800c802:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d009      	beq.n	800c840 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	6852      	ldr	r2, [r2, #4]
 800c838:	b2d2      	uxtb	r2, r2
 800c83a:	4611      	mov	r1, r2
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	4798      	blx	r3
  }

  return USBD_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c84a:	b480      	push	{r7}
 800c84c:	b083      	sub	sp, #12
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	460b      	mov	r3, r1
 800c854:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	78fa      	ldrb	r2, [r7, #3]
 800c85a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c85c:	2300      	movs	r3, #0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	370c      	adds	r7, #12
 800c862:	46bd      	mov	sp, r7
 800c864:	bc80      	pop	{r7}
 800c866:	4770      	bx	lr

0800c868 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2204      	movs	r2, #4
 800c880:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	370c      	adds	r7, #12
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bc80      	pop	{r7}
 800c88e:	4770      	bx	lr

0800c890 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bc80      	pop	{r7}
 800c8ae:	4770      	bx	lr

0800c8b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d10b      	bne.n	800c8da <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c8c8:	69db      	ldr	r3, [r3, #28]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d005      	beq.n	800c8da <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8fa:	2b40      	cmp	r3, #64	; 0x40
 800c8fc:	d005      	beq.n	800c90a <USBD_StdDevReq+0x26>
 800c8fe:	2b40      	cmp	r3, #64	; 0x40
 800c900:	d84f      	bhi.n	800c9a2 <USBD_StdDevReq+0xbe>
 800c902:	2b00      	cmp	r3, #0
 800c904:	d009      	beq.n	800c91a <USBD_StdDevReq+0x36>
 800c906:	2b20      	cmp	r3, #32
 800c908:	d14b      	bne.n	800c9a2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	6839      	ldr	r1, [r7, #0]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	4798      	blx	r3
    break;
 800c918:	e048      	b.n	800c9ac <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	785b      	ldrb	r3, [r3, #1]
 800c91e:	2b09      	cmp	r3, #9
 800c920:	d839      	bhi.n	800c996 <USBD_StdDevReq+0xb2>
 800c922:	a201      	add	r2, pc, #4	; (adr r2, 800c928 <USBD_StdDevReq+0x44>)
 800c924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c928:	0800c979 	.word	0x0800c979
 800c92c:	0800c98d 	.word	0x0800c98d
 800c930:	0800c997 	.word	0x0800c997
 800c934:	0800c983 	.word	0x0800c983
 800c938:	0800c997 	.word	0x0800c997
 800c93c:	0800c95b 	.word	0x0800c95b
 800c940:	0800c951 	.word	0x0800c951
 800c944:	0800c997 	.word	0x0800c997
 800c948:	0800c96f 	.word	0x0800c96f
 800c94c:	0800c965 	.word	0x0800c965
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800c950:	6839      	ldr	r1, [r7, #0]
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 f9da 	bl	800cd0c <USBD_GetDescriptor>
      break;
 800c958:	e022      	b.n	800c9a0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800c95a:	6839      	ldr	r1, [r7, #0]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 facf 	bl	800cf00 <USBD_SetAddress>
      break;
 800c962:	e01d      	b.n	800c9a0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800c964:	6839      	ldr	r1, [r7, #0]
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fb0e 	bl	800cf88 <USBD_SetConfig>
      break;
 800c96c:	e018      	b.n	800c9a0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800c96e:	6839      	ldr	r1, [r7, #0]
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fb97 	bl	800d0a4 <USBD_GetConfig>
      break;
 800c976:	e013      	b.n	800c9a0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800c978:	6839      	ldr	r1, [r7, #0]
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 fbc7 	bl	800d10e <USBD_GetStatus>
      break;
 800c980:	e00e      	b.n	800c9a0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fbf5 	bl	800d174 <USBD_SetFeature>
      break;
 800c98a:	e009      	b.n	800c9a0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800c98c:	6839      	ldr	r1, [r7, #0]
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 fc04 	bl	800d19c <USBD_ClrFeature>
      break;
 800c994:	e004      	b.n	800c9a0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fc5c 	bl	800d256 <USBD_CtlError>
      break;
 800c99e:	bf00      	nop
    }
    break;
 800c9a0:	e004      	b.n	800c9ac <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fc56 	bl	800d256 <USBD_CtlError>
    break;
 800c9aa:	bf00      	nop
  }

  return ret;
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop

0800c9b8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9ce:	2b40      	cmp	r3, #64	; 0x40
 800c9d0:	d005      	beq.n	800c9de <USBD_StdItfReq+0x26>
 800c9d2:	2b40      	cmp	r3, #64	; 0x40
 800c9d4:	d82e      	bhi.n	800ca34 <USBD_StdItfReq+0x7c>
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <USBD_StdItfReq+0x26>
 800c9da:	2b20      	cmp	r3, #32
 800c9dc:	d12a      	bne.n	800ca34 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d81d      	bhi.n	800ca26 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	889b      	ldrh	r3, [r3, #4]
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d813      	bhi.n	800ca1c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	4798      	blx	r3
 800ca02:	4603      	mov	r3, r0
 800ca04:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	88db      	ldrh	r3, [r3, #6]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d110      	bne.n	800ca30 <USBD_StdItfReq+0x78>
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10d      	bne.n	800ca30 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fce6 	bl	800d3e6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ca1a:	e009      	b.n	800ca30 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800ca1c:	6839      	ldr	r1, [r7, #0]
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fc19 	bl	800d256 <USBD_CtlError>
      break;
 800ca24:	e004      	b.n	800ca30 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800ca26:	6839      	ldr	r1, [r7, #0]
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 fc14 	bl	800d256 <USBD_CtlError>
      break;
 800ca2e:	e000      	b.n	800ca32 <USBD_StdItfReq+0x7a>
      break;
 800ca30:	bf00      	nop
    }
    break;
 800ca32:	e004      	b.n	800ca3e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800ca34:	6839      	ldr	r1, [r7, #0]
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 fc0d 	bl	800d256 <USBD_CtlError>
    break;
 800ca3c:	bf00      	nop
  }

  return USBD_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca52:	2300      	movs	r3, #0
 800ca54:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	889b      	ldrh	r3, [r3, #4]
 800ca5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca64:	2b40      	cmp	r3, #64	; 0x40
 800ca66:	d007      	beq.n	800ca78 <USBD_StdEPReq+0x30>
 800ca68:	2b40      	cmp	r3, #64	; 0x40
 800ca6a:	f200 8144 	bhi.w	800ccf6 <USBD_StdEPReq+0x2ae>
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00a      	beq.n	800ca88 <USBD_StdEPReq+0x40>
 800ca72:	2b20      	cmp	r3, #32
 800ca74:	f040 813f 	bne.w	800ccf6 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	4798      	blx	r3
    break;
 800ca86:	e13b      	b.n	800cd00 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca90:	2b20      	cmp	r3, #32
 800ca92:	d10a      	bne.n	800caaa <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	6839      	ldr	r1, [r7, #0]
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	4798      	blx	r3
 800caa2:	4603      	mov	r3, r0
 800caa4:	73fb      	strb	r3, [r7, #15]

      return ret;
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	e12b      	b.n	800cd02 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	785b      	ldrb	r3, [r3, #1]
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d007      	beq.n	800cac2 <USBD_StdEPReq+0x7a>
 800cab2:	2b03      	cmp	r3, #3
 800cab4:	f300 8119 	bgt.w	800ccea <USBD_StdEPReq+0x2a2>
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d072      	beq.n	800cba2 <USBD_StdEPReq+0x15a>
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d03a      	beq.n	800cb36 <USBD_StdEPReq+0xee>
 800cac0:	e113      	b.n	800ccea <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d002      	beq.n	800cad2 <USBD_StdEPReq+0x8a>
 800cacc:	2b03      	cmp	r3, #3
 800cace:	d015      	beq.n	800cafc <USBD_StdEPReq+0xb4>
 800cad0:	e02b      	b.n	800cb2a <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cad2:	7bbb      	ldrb	r3, [r7, #14]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00c      	beq.n	800caf2 <USBD_StdEPReq+0xaa>
 800cad8:	7bbb      	ldrb	r3, [r7, #14]
 800cada:	2b80      	cmp	r3, #128	; 0x80
 800cadc:	d009      	beq.n	800caf2 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800cade:	7bbb      	ldrb	r3, [r7, #14]
 800cae0:	4619      	mov	r1, r3
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f001 f878 	bl	800dbd8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800cae8:	2180      	movs	r1, #128	; 0x80
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f001 f874 	bl	800dbd8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800caf0:	e020      	b.n	800cb34 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fbae 	bl	800d256 <USBD_CtlError>
        break;
 800cafa:	e01b      	b.n	800cb34 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	885b      	ldrh	r3, [r3, #2]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10e      	bne.n	800cb22 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00b      	beq.n	800cb22 <USBD_StdEPReq+0xda>
 800cb0a:	7bbb      	ldrb	r3, [r7, #14]
 800cb0c:	2b80      	cmp	r3, #128	; 0x80
 800cb0e:	d008      	beq.n	800cb22 <USBD_StdEPReq+0xda>
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	88db      	ldrh	r3, [r3, #6]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d104      	bne.n	800cb22 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800cb18:	7bbb      	ldrb	r3, [r7, #14]
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f001 f85b 	bl	800dbd8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 fc5f 	bl	800d3e6 <USBD_CtlSendStatus>

        break;
 800cb28:	e004      	b.n	800cb34 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fb92 	bl	800d256 <USBD_CtlError>
        break;
 800cb32:	bf00      	nop
      }
      break;
 800cb34:	e0de      	b.n	800ccf4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cb3c:	2b02      	cmp	r3, #2
 800cb3e:	d002      	beq.n	800cb46 <USBD_StdEPReq+0xfe>
 800cb40:	2b03      	cmp	r3, #3
 800cb42:	d015      	beq.n	800cb70 <USBD_StdEPReq+0x128>
 800cb44:	e026      	b.n	800cb94 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00c      	beq.n	800cb66 <USBD_StdEPReq+0x11e>
 800cb4c:	7bbb      	ldrb	r3, [r7, #14]
 800cb4e:	2b80      	cmp	r3, #128	; 0x80
 800cb50:	d009      	beq.n	800cb66 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800cb52:	7bbb      	ldrb	r3, [r7, #14]
 800cb54:	4619      	mov	r1, r3
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f001 f83e 	bl	800dbd8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800cb5c:	2180      	movs	r1, #128	; 0x80
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f001 f83a 	bl	800dbd8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800cb64:	e01c      	b.n	800cba0 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 fb74 	bl	800d256 <USBD_CtlError>
        break;
 800cb6e:	e017      	b.n	800cba0 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	885b      	ldrh	r3, [r3, #2]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d112      	bne.n	800cb9e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800cb78:	7bbb      	ldrb	r3, [r7, #14]
 800cb7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d004      	beq.n	800cb8c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb82:	7bbb      	ldrb	r3, [r7, #14]
 800cb84:	4619      	mov	r1, r3
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f001 f845 	bl	800dc16 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fc2a 	bl	800d3e6 <USBD_CtlSendStatus>
        }
        break;
 800cb92:	e004      	b.n	800cb9e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800cb94:	6839      	ldr	r1, [r7, #0]
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fb5d 	bl	800d256 <USBD_CtlError>
        break;
 800cb9c:	e000      	b.n	800cba0 <USBD_StdEPReq+0x158>
        break;
 800cb9e:	bf00      	nop
      }
      break;
 800cba0:	e0a8      	b.n	800ccf4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d002      	beq.n	800cbb2 <USBD_StdEPReq+0x16a>
 800cbac:	2b03      	cmp	r3, #3
 800cbae:	d031      	beq.n	800cc14 <USBD_StdEPReq+0x1cc>
 800cbb0:	e095      	b.n	800ccde <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbb2:	7bbb      	ldrb	r3, [r7, #14]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d007      	beq.n	800cbc8 <USBD_StdEPReq+0x180>
 800cbb8:	7bbb      	ldrb	r3, [r7, #14]
 800cbba:	2b80      	cmp	r3, #128	; 0x80
 800cbbc:	d004      	beq.n	800cbc8 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800cbbe:	6839      	ldr	r1, [r7, #0]
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 fb48 	bl	800d256 <USBD_CtlError>
          break;
 800cbc6:	e08f      	b.n	800cce8 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cbc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	da0b      	bge.n	800cbe8 <USBD_StdEPReq+0x1a0>
 800cbd0:	7bbb      	ldrb	r3, [r7, #14]
 800cbd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	4413      	add	r3, r2
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	3310      	adds	r3, #16
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	e00a      	b.n	800cbfe <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cbe8:	7bbb      	ldrb	r3, [r7, #14]
 800cbea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cbee:	4613      	mov	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4413      	add	r3, r2
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2200      	movs	r2, #0
 800cc04:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	2202      	movs	r2, #2
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 fb8c 	bl	800d32a <USBD_CtlSendData>
          break;
 800cc12:	e069      	b.n	800cce8 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800cc14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	da11      	bge.n	800cc40 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
 800cc1e:	f003 020f 	and.w	r2, r3, #15
 800cc22:	6879      	ldr	r1, [r7, #4]
 800cc24:	4613      	mov	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	440b      	add	r3, r1
 800cc2e:	3318      	adds	r3, #24
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d117      	bne.n	800cc66 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 fb0c 	bl	800d256 <USBD_CtlError>
            break;
 800cc3e:	e053      	b.n	800cce8 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
 800cc42:	f003 020f 	and.w	r2, r3, #15
 800cc46:	6879      	ldr	r1, [r7, #4]
 800cc48:	4613      	mov	r3, r2
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	4413      	add	r3, r2
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	440b      	add	r3, r1
 800cc52:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d104      	bne.n	800cc66 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800cc5c:	6839      	ldr	r1, [r7, #0]
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 faf9 	bl	800d256 <USBD_CtlError>
            break;
 800cc64:	e040      	b.n	800cce8 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cc66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	da0b      	bge.n	800cc86 <USBD_StdEPReq+0x23e>
 800cc6e:	7bbb      	ldrb	r3, [r7, #14]
 800cc70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc74:	4613      	mov	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	3310      	adds	r3, #16
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	4413      	add	r3, r2
 800cc82:	3304      	adds	r3, #4
 800cc84:	e00a      	b.n	800cc9c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cc86:	7bbb      	ldrb	r3, [r7, #14]
 800cc88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	4413      	add	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d002      	beq.n	800ccaa <USBD_StdEPReq+0x262>
 800cca4:	7bbb      	ldrb	r3, [r7, #14]
 800cca6:	2b80      	cmp	r3, #128	; 0x80
 800cca8:	d103      	bne.n	800ccb2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	2200      	movs	r2, #0
 800ccae:	601a      	str	r2, [r3, #0]
 800ccb0:	e00e      	b.n	800ccd0 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 ffcc 	bl	800dc54 <USBD_LL_IsStallEP>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d003      	beq.n	800ccca <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	e002      	b.n	800ccd0 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	2200      	movs	r2, #0
 800ccce:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	2202      	movs	r2, #2
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 fb27 	bl	800d32a <USBD_CtlSendData>
          break;
 800ccdc:	e004      	b.n	800cce8 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800ccde:	6839      	ldr	r1, [r7, #0]
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 fab8 	bl	800d256 <USBD_CtlError>
        break;
 800cce6:	bf00      	nop
      }
      break;
 800cce8:	e004      	b.n	800ccf4 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800ccea:	6839      	ldr	r1, [r7, #0]
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fab2 	bl	800d256 <USBD_CtlError>
      break;
 800ccf2:	bf00      	nop
    }
    break;
 800ccf4:	e004      	b.n	800cd00 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800ccf6:	6839      	ldr	r1, [r7, #0]
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 faac 	bl	800d256 <USBD_CtlError>
    break;
 800ccfe:	bf00      	nop
  }

  return ret;
 800cd00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
	...

0800cd0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	885b      	ldrh	r3, [r3, #2]
 800cd1a:	0a1b      	lsrs	r3, r3, #8
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	2b06      	cmp	r3, #6
 800cd22:	f200 80c9 	bhi.w	800ceb8 <USBD_GetDescriptor+0x1ac>
 800cd26:	a201      	add	r2, pc, #4	; (adr r2, 800cd2c <USBD_GetDescriptor+0x20>)
 800cd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd2c:	0800cd49 	.word	0x0800cd49
 800cd30:	0800cd61 	.word	0x0800cd61
 800cd34:	0800cda1 	.word	0x0800cda1
 800cd38:	0800ceb9 	.word	0x0800ceb9
 800cd3c:	0800ceb9 	.word	0x0800ceb9
 800cd40:	0800ce65 	.word	0x0800ce65
 800cd44:	0800ce8b 	.word	0x0800ce8b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	7c12      	ldrb	r2, [r2, #16]
 800cd54:	f107 010a 	add.w	r1, r7, #10
 800cd58:	4610      	mov	r0, r2
 800cd5a:	4798      	blx	r3
 800cd5c:	60f8      	str	r0, [r7, #12]
    break;
 800cd5e:	e0b0      	b.n	800cec2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	7c1b      	ldrb	r3, [r3, #16]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10d      	bne.n	800cd84 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd70:	f107 020a 	add.w	r2, r7, #10
 800cd74:	4610      	mov	r0, r2
 800cd76:	4798      	blx	r3
 800cd78:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	2202      	movs	r2, #2
 800cd80:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800cd82:	e09e      	b.n	800cec2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8c:	f107 020a 	add.w	r2, r7, #10
 800cd90:	4610      	mov	r0, r2
 800cd92:	4798      	blx	r3
 800cd94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	2202      	movs	r2, #2
 800cd9c:	701a      	strb	r2, [r3, #0]
    break;
 800cd9e:	e090      	b.n	800cec2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	885b      	ldrh	r3, [r3, #2]
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	2b05      	cmp	r3, #5
 800cda8:	d856      	bhi.n	800ce58 <USBD_GetDescriptor+0x14c>
 800cdaa:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <USBD_GetDescriptor+0xa4>)
 800cdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb0:	0800cdc9 	.word	0x0800cdc9
 800cdb4:	0800cde1 	.word	0x0800cde1
 800cdb8:	0800cdf9 	.word	0x0800cdf9
 800cdbc:	0800ce11 	.word	0x0800ce11
 800cdc0:	0800ce29 	.word	0x0800ce29
 800cdc4:	0800ce41 	.word	0x0800ce41
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	7c12      	ldrb	r2, [r2, #16]
 800cdd4:	f107 010a 	add.w	r1, r7, #10
 800cdd8:	4610      	mov	r0, r2
 800cdda:	4798      	blx	r3
 800cddc:	60f8      	str	r0, [r7, #12]
      break;
 800cdde:	e040      	b.n	800ce62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	7c12      	ldrb	r2, [r2, #16]
 800cdec:	f107 010a 	add.w	r1, r7, #10
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4798      	blx	r3
 800cdf4:	60f8      	str	r0, [r7, #12]
      break;
 800cdf6:	e034      	b.n	800ce62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	7c12      	ldrb	r2, [r2, #16]
 800ce04:	f107 010a 	add.w	r1, r7, #10
 800ce08:	4610      	mov	r0, r2
 800ce0a:	4798      	blx	r3
 800ce0c:	60f8      	str	r0, [r7, #12]
      break;
 800ce0e:	e028      	b.n	800ce62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	7c12      	ldrb	r2, [r2, #16]
 800ce1c:	f107 010a 	add.w	r1, r7, #10
 800ce20:	4610      	mov	r0, r2
 800ce22:	4798      	blx	r3
 800ce24:	60f8      	str	r0, [r7, #12]
      break;
 800ce26:	e01c      	b.n	800ce62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ce2e:	695b      	ldr	r3, [r3, #20]
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	7c12      	ldrb	r2, [r2, #16]
 800ce34:	f107 010a 	add.w	r1, r7, #10
 800ce38:	4610      	mov	r0, r2
 800ce3a:	4798      	blx	r3
 800ce3c:	60f8      	str	r0, [r7, #12]
      break;
 800ce3e:	e010      	b.n	800ce62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	7c12      	ldrb	r2, [r2, #16]
 800ce4c:	f107 010a 	add.w	r1, r7, #10
 800ce50:	4610      	mov	r0, r2
 800ce52:	4798      	blx	r3
 800ce54:	60f8      	str	r0, [r7, #12]
      break;
 800ce56:	e004      	b.n	800ce62 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800ce58:	6839      	ldr	r1, [r7, #0]
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f9fb 	bl	800d256 <USBD_CtlError>
      return;
 800ce60:	e04b      	b.n	800cefa <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800ce62:	e02e      	b.n	800cec2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	7c1b      	ldrb	r3, [r3, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d109      	bne.n	800ce80 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce74:	f107 020a 	add.w	r2, r7, #10
 800ce78:	4610      	mov	r0, r2
 800ce7a:	4798      	blx	r3
 800ce7c:	60f8      	str	r0, [r7, #12]
      break;
 800ce7e:	e020      	b.n	800cec2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 f9e7 	bl	800d256 <USBD_CtlError>
      return;
 800ce88:	e037      	b.n	800cefa <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	7c1b      	ldrb	r3, [r3, #16]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10d      	bne.n	800ceae <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce9a:	f107 020a 	add.w	r2, r7, #10
 800ce9e:	4610      	mov	r0, r2
 800cea0:	4798      	blx	r3
 800cea2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	3301      	adds	r3, #1
 800cea8:	2207      	movs	r2, #7
 800ceaa:	701a      	strb	r2, [r3, #0]
      break;
 800ceac:	e009      	b.n	800cec2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ceae:	6839      	ldr	r1, [r7, #0]
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f9d0 	bl	800d256 <USBD_CtlError>
      return;
 800ceb6:	e020      	b.n	800cefa <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f9cb 	bl	800d256 <USBD_CtlError>
    return;
 800cec0:	e01b      	b.n	800cefa <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800cec2:	897b      	ldrh	r3, [r7, #10]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d011      	beq.n	800ceec <USBD_GetDescriptor+0x1e0>
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	88db      	ldrh	r3, [r3, #6]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00d      	beq.n	800ceec <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	88da      	ldrh	r2, [r3, #6]
 800ced4:	897b      	ldrh	r3, [r7, #10]
 800ced6:	4293      	cmp	r3, r2
 800ced8:	bf28      	it	cs
 800ceda:	4613      	movcs	r3, r2
 800cedc:	b29b      	uxth	r3, r3
 800cede:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800cee0:	897b      	ldrh	r3, [r7, #10]
 800cee2:	461a      	mov	r2, r3
 800cee4:	68f9      	ldr	r1, [r7, #12]
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 fa1f 	bl	800d32a <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	88db      	ldrh	r3, [r3, #6]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d102      	bne.n	800cefa <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 fa76 	bl	800d3e6 <USBD_CtlSendStatus>
  }
}
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	889b      	ldrh	r3, [r3, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d130      	bne.n	800cf74 <USBD_SetAddress+0x74>
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	88db      	ldrh	r3, [r3, #6]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d12c      	bne.n	800cf74 <USBD_SetAddress+0x74>
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	885b      	ldrh	r3, [r3, #2]
 800cf1e:	2b7f      	cmp	r3, #127	; 0x7f
 800cf20:	d828      	bhi.n	800cf74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	885b      	ldrh	r3, [r3, #2]
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cf34:	2b03      	cmp	r3, #3
 800cf36:	d104      	bne.n	800cf42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f98b 	bl	800d256 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf40:	e01d      	b.n	800cf7e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	7bfa      	ldrb	r2, [r7, #15]
 800cf46:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cf4a:	7bfb      	ldrb	r3, [r7, #15]
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 feac 	bl	800dcac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fa46 	bl	800d3e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d004      	beq.n	800cf6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2202      	movs	r2, #2
 800cf64:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf68:	e009      	b.n	800cf7e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf72:	e004      	b.n	800cf7e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cf74:	6839      	ldr	r1, [r7, #0]
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 f96d 	bl	800d256 <USBD_CtlError>
  }
}
 800cf7c:	bf00      	nop
 800cf7e:	bf00      	nop
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
	...

0800cf88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	885b      	ldrh	r3, [r3, #2]
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	4b41      	ldr	r3, [pc, #260]	; (800d0a0 <USBD_SetConfig+0x118>)
 800cf9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cf9c:	4b40      	ldr	r3, [pc, #256]	; (800d0a0 <USBD_SetConfig+0x118>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d904      	bls.n	800cfae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f955 	bl	800d256 <USBD_CtlError>
 800cfac:	e075      	b.n	800d09a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d002      	beq.n	800cfbe <USBD_SetConfig+0x36>
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	d023      	beq.n	800d004 <USBD_SetConfig+0x7c>
 800cfbc:	e062      	b.n	800d084 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800cfbe:	4b38      	ldr	r3, [pc, #224]	; (800d0a0 <USBD_SetConfig+0x118>)
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d01a      	beq.n	800cffc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800cfc6:	4b36      	ldr	r3, [pc, #216]	; (800d0a0 <USBD_SetConfig+0x118>)
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	461a      	mov	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2203      	movs	r2, #3
 800cfd4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cfd8:	4b31      	ldr	r3, [pc, #196]	; (800d0a0 <USBD_SetConfig+0x118>)
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7ff fa5d 	bl	800c49e <USBD_SetClassConfig>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b02      	cmp	r3, #2
 800cfe8:	d104      	bne.n	800cff4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800cfea:	6839      	ldr	r1, [r7, #0]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 f932 	bl	800d256 <USBD_CtlError>
          return;
 800cff2:	e052      	b.n	800d09a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f9f6 	bl	800d3e6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800cffa:	e04e      	b.n	800d09a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 f9f2 	bl	800d3e6 <USBD_CtlSendStatus>
      break;
 800d002:	e04a      	b.n	800d09a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d004:	4b26      	ldr	r3, [pc, #152]	; (800d0a0 <USBD_SetConfig+0x118>)
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d112      	bne.n	800d032 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2202      	movs	r2, #2
 800d010:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800d014:	4b22      	ldr	r3, [pc, #136]	; (800d0a0 <USBD_SetConfig+0x118>)
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	461a      	mov	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800d01e:	4b20      	ldr	r3, [pc, #128]	; (800d0a0 <USBD_SetConfig+0x118>)
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	4619      	mov	r1, r3
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7ff fa59 	bl	800c4dc <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f9db 	bl	800d3e6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d030:	e033      	b.n	800d09a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800d032:	4b1b      	ldr	r3, [pc, #108]	; (800d0a0 <USBD_SetConfig+0x118>)
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	461a      	mov	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d01d      	beq.n	800d07c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	b2db      	uxtb	r3, r3
 800d046:	4619      	mov	r1, r3
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff fa47 	bl	800c4dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d04e:	4b14      	ldr	r3, [pc, #80]	; (800d0a0 <USBD_SetConfig+0x118>)
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	461a      	mov	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d058:	4b11      	ldr	r3, [pc, #68]	; (800d0a0 <USBD_SetConfig+0x118>)
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	4619      	mov	r1, r3
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7ff fa1d 	bl	800c49e <USBD_SetClassConfig>
 800d064:	4603      	mov	r3, r0
 800d066:	2b02      	cmp	r3, #2
 800d068:	d104      	bne.n	800d074 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800d06a:	6839      	ldr	r1, [r7, #0]
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f8f2 	bl	800d256 <USBD_CtlError>
          return;
 800d072:	e012      	b.n	800d09a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 f9b6 	bl	800d3e6 <USBD_CtlSendStatus>
      break;
 800d07a:	e00e      	b.n	800d09a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 f9b2 	bl	800d3e6 <USBD_CtlSendStatus>
      break;
 800d082:	e00a      	b.n	800d09a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 f8e5 	bl	800d256 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800d08c:	4b04      	ldr	r3, [pc, #16]	; (800d0a0 <USBD_SetConfig+0x118>)
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	4619      	mov	r1, r3
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff fa22 	bl	800c4dc <USBD_ClrClassConfig>
      break;
 800d098:	bf00      	nop
    }
  }
}
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	20000d74 	.word	0x20000d74

0800d0a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	88db      	ldrh	r3, [r3, #6]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d004      	beq.n	800d0c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800d0b6:	6839      	ldr	r1, [r7, #0]
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f8cc 	bl	800d256 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d0be:	e022      	b.n	800d106 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	dc02      	bgt.n	800d0d0 <USBD_GetConfig+0x2c>
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	dc03      	bgt.n	800d0d6 <USBD_GetConfig+0x32>
 800d0ce:	e015      	b.n	800d0fc <USBD_GetConfig+0x58>
 800d0d0:	2b03      	cmp	r3, #3
 800d0d2:	d00b      	beq.n	800d0ec <USBD_GetConfig+0x48>
 800d0d4:	e012      	b.n	800d0fc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	3308      	adds	r3, #8
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f920 	bl	800d32a <USBD_CtlSendData>
      break;
 800d0ea:	e00c      	b.n	800d106 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 f918 	bl	800d32a <USBD_CtlSendData>
      break;
 800d0fa:	e004      	b.n	800d106 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800d0fc:	6839      	ldr	r1, [r7, #0]
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 f8a9 	bl	800d256 <USBD_CtlError>
      break;
 800d104:	bf00      	nop
}
 800d106:	bf00      	nop
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b082      	sub	sp, #8
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d11e:	3b01      	subs	r3, #1
 800d120:	2b02      	cmp	r3, #2
 800d122:	d81e      	bhi.n	800d162 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	88db      	ldrh	r3, [r3, #6]
 800d128:	2b02      	cmp	r3, #2
 800d12a:	d004      	beq.n	800d136 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d12c:	6839      	ldr	r1, [r7, #0]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f891 	bl	800d256 <USBD_CtlError>
      break;
 800d134:	e01a      	b.n	800d16c <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2201      	movs	r2, #1
 800d13a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d142:	2b00      	cmp	r3, #0
 800d144:	d005      	beq.n	800d152 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	f043 0202 	orr.w	r2, r3, #2
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	330c      	adds	r3, #12
 800d156:	2202      	movs	r2, #2
 800d158:	4619      	mov	r1, r3
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f8e5 	bl	800d32a <USBD_CtlSendData>
    break;
 800d160:	e004      	b.n	800d16c <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f876 	bl	800d256 <USBD_CtlError>
    break;
 800d16a:	bf00      	nop
  }
}
 800d16c:	bf00      	nop
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	885b      	ldrh	r3, [r3, #2]
 800d182:	2b01      	cmp	r3, #1
 800d184:	d106      	bne.n	800d194 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2201      	movs	r2, #1
 800d18a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 f929 	bl	800d3e6 <USBD_CtlSendStatus>
  }

}
 800d194:	bf00      	nop
 800d196:	3708      	adds	r7, #8
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	d80b      	bhi.n	800d1ca <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	885b      	ldrh	r3, [r3, #2]
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d10c      	bne.n	800d1d4 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 f90f 	bl	800d3e6 <USBD_CtlSendStatus>
    }
    break;
 800d1c8:	e004      	b.n	800d1d4 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800d1ca:	6839      	ldr	r1, [r7, #0]
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f842 	bl	800d256 <USBD_CtlError>
    break;
 800d1d2:	e000      	b.n	800d1d6 <USBD_ClrFeature+0x3a>
    break;
 800d1d4:	bf00      	nop
  }
}
 800d1d6:	bf00      	nop
 800d1d8:	3708      	adds	r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d1de:	b480      	push	{r7}
 800d1e0:	b083      	sub	sp, #12
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	781a      	ldrb	r2, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	785a      	ldrb	r2, [r3, #1]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	3302      	adds	r3, #2
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	3303      	adds	r3, #3
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	b29b      	uxth	r3, r3
 800d208:	021b      	lsls	r3, r3, #8
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	4413      	add	r3, r2
 800d20e:	b29a      	uxth	r2, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	3304      	adds	r3, #4
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	b29a      	uxth	r2, r3
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	3305      	adds	r3, #5
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	b29b      	uxth	r3, r3
 800d224:	021b      	lsls	r3, r3, #8
 800d226:	b29b      	uxth	r3, r3
 800d228:	4413      	add	r3, r2
 800d22a:	b29a      	uxth	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	3306      	adds	r3, #6
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	b29a      	uxth	r2, r3
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	3307      	adds	r3, #7
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	b29b      	uxth	r3, r3
 800d240:	021b      	lsls	r3, r3, #8
 800d242:	b29b      	uxth	r3, r3
 800d244:	4413      	add	r3, r2
 800d246:	b29a      	uxth	r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	80da      	strh	r2, [r3, #6]

}
 800d24c:	bf00      	nop
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	bc80      	pop	{r7}
 800d254:	4770      	bx	lr

0800d256 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b082      	sub	sp, #8
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d260:	2180      	movs	r1, #128	; 0x80
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 fcb8 	bl	800dbd8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d268:	2100      	movs	r1, #0
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fcb4 	bl	800dbd8 <USBD_LL_StallEP>
}
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d284:	2300      	movs	r3, #0
 800d286:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d032      	beq.n	800d2f4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	f000 f834 	bl	800d2fc <USBD_GetLen>
 800d294:	4603      	mov	r3, r0
 800d296:	3301      	adds	r3, #1
 800d298:	b29b      	uxth	r3, r3
 800d29a:	005b      	lsls	r3, r3, #1
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d2a2:	7dfb      	ldrb	r3, [r7, #23]
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	75fa      	strb	r2, [r7, #23]
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	7812      	ldrb	r2, [r2, #0]
 800d2b2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d2b4:	7dfb      	ldrb	r3, [r7, #23]
 800d2b6:	1c5a      	adds	r2, r3, #1
 800d2b8:	75fa      	strb	r2, [r7, #23]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	4413      	add	r3, r2
 800d2c0:	2203      	movs	r2, #3
 800d2c2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d2c4:	e012      	b.n	800d2ec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	1c5a      	adds	r2, r3, #1
 800d2ca:	60fa      	str	r2, [r7, #12]
 800d2cc:	7dfa      	ldrb	r2, [r7, #23]
 800d2ce:	1c51      	adds	r1, r2, #1
 800d2d0:	75f9      	strb	r1, [r7, #23]
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	68ba      	ldr	r2, [r7, #8]
 800d2d6:	440a      	add	r2, r1
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d2dc:	7dfb      	ldrb	r3, [r7, #23]
 800d2de:	1c5a      	adds	r2, r3, #1
 800d2e0:	75fa      	strb	r2, [r7, #23]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d1e8      	bne.n	800d2c6 <USBD_GetString+0x4e>
    }
  }
}
 800d2f4:	bf00      	nop
 800d2f6:	3718      	adds	r7, #24
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b085      	sub	sp, #20
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800d304:	2300      	movs	r3, #0
 800d306:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800d308:	e005      	b.n	800d316 <USBD_GetLen+0x1a>
    {
        len++;
 800d30a:	7bfb      	ldrb	r3, [r7, #15]
 800d30c:	3301      	adds	r3, #1
 800d30e:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	3301      	adds	r3, #1
 800d314:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1f5      	bne.n	800d30a <USBD_GetLen+0xe>
    }

    return len;
 800d31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	bc80      	pop	{r7}
 800d328:	4770      	bx	lr

0800d32a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b084      	sub	sp, #16
 800d32e:	af00      	add	r7, sp, #0
 800d330:	60f8      	str	r0, [r7, #12]
 800d332:	60b9      	str	r1, [r7, #8]
 800d334:	4613      	mov	r3, r2
 800d336:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2202      	movs	r2, #2
 800d33c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800d340:	88fa      	ldrh	r2, [r7, #6]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d346:	88fa      	ldrh	r2, [r7, #6]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d34c:	88fb      	ldrh	r3, [r7, #6]
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	2100      	movs	r1, #0
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f000 fcc9 	bl	800dcea <USBD_LL_Transmit>

  return USBD_OK;
 800d358:	2300      	movs	r3, #0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b084      	sub	sp, #16
 800d366:	af00      	add	r7, sp, #0
 800d368:	60f8      	str	r0, [r7, #12]
 800d36a:	60b9      	str	r1, [r7, #8]
 800d36c:	4613      	mov	r3, r2
 800d36e:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d370:	88fb      	ldrh	r3, [r7, #6]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	2100      	movs	r1, #0
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f000 fcb7 	bl	800dcea <USBD_LL_Transmit>

  return USBD_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b084      	sub	sp, #16
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	60f8      	str	r0, [r7, #12]
 800d38e:	60b9      	str	r1, [r7, #8]
 800d390:	4613      	mov	r3, r2
 800d392:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2203      	movs	r2, #3
 800d398:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800d39c:	88fa      	ldrh	r2, [r7, #6]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800d3a4:	88fa      	ldrh	r2, [r7, #6]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800d3ac:	88fb      	ldrh	r3, [r7, #6]
 800d3ae:	68ba      	ldr	r2, [r7, #8]
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	68f8      	ldr	r0, [r7, #12]
 800d3b4:	f000 fcbc 	bl	800dd30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	60f8      	str	r0, [r7, #12]
 800d3ca:	60b9      	str	r1, [r7, #8]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d3d0:	88fb      	ldrh	r3, [r7, #6]
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	2100      	movs	r1, #0
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f000 fcaa 	bl	800dd30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b082      	sub	sp, #8
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2204      	movs	r2, #4
 800d3f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	2100      	movs	r1, #0
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 fc74 	bl	800dcea <USBD_LL_Transmit>

  return USBD_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2205      	movs	r2, #5
 800d418:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d41c:	2300      	movs	r3, #0
 800d41e:	2200      	movs	r2, #0
 800d420:	2100      	movs	r1, #0
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 fc84 	bl	800dd30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
	...

0800d434 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d438:	2200      	movs	r2, #0
 800d43a:	4912      	ldr	r1, [pc, #72]	; (800d484 <MX_USB_DEVICE_Init+0x50>)
 800d43c:	4812      	ldr	r0, [pc, #72]	; (800d488 <MX_USB_DEVICE_Init+0x54>)
 800d43e:	f7fe ffd4 	bl	800c3ea <USBD_Init>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d001      	beq.n	800d44c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d448:	f7f6 fa2c 	bl	80038a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d44c:	490f      	ldr	r1, [pc, #60]	; (800d48c <MX_USB_DEVICE_Init+0x58>)
 800d44e:	480e      	ldr	r0, [pc, #56]	; (800d488 <MX_USB_DEVICE_Init+0x54>)
 800d450:	f7fe fff6 	bl	800c440 <USBD_RegisterClass>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d45a:	f7f6 fa23 	bl	80038a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d45e:	490c      	ldr	r1, [pc, #48]	; (800d490 <MX_USB_DEVICE_Init+0x5c>)
 800d460:	4809      	ldr	r0, [pc, #36]	; (800d488 <MX_USB_DEVICE_Init+0x54>)
 800d462:	f7fe ff27 	bl	800c2b4 <USBD_CDC_RegisterInterface>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d001      	beq.n	800d470 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d46c:	f7f6 fa1a 	bl	80038a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d470:	4805      	ldr	r0, [pc, #20]	; (800d488 <MX_USB_DEVICE_Init+0x54>)
 800d472:	f7fe fffe 	bl	800c472 <USBD_Start>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d001      	beq.n	800d480 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d47c:	f7f6 fa12 	bl	80038a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d480:	bf00      	nop
 800d482:	bd80      	pop	{r7, pc}
 800d484:	200007e4 	.word	0x200007e4
 800d488:	20000d78 	.word	0x20000d78
 800d48c:	200006d0 	.word	0x200006d0
 800d490:	200007d4 	.word	0x200007d4

0800d494 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d498:	2200      	movs	r2, #0
 800d49a:	4905      	ldr	r1, [pc, #20]	; (800d4b0 <CDC_Init_FS+0x1c>)
 800d49c:	4805      	ldr	r0, [pc, #20]	; (800d4b4 <CDC_Init_FS+0x20>)
 800d49e:	f7fe ff1f 	bl	800c2e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d4a2:	4905      	ldr	r1, [pc, #20]	; (800d4b8 <CDC_Init_FS+0x24>)
 800d4a4:	4803      	ldr	r0, [pc, #12]	; (800d4b4 <CDC_Init_FS+0x20>)
 800d4a6:	f7fe ff34 	bl	800c312 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d4aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20001094 	.word	0x20001094
 800d4b4:	20000d78 	.word	0x20000d78
 800d4b8:	20001014 	.word	0x20001014

0800d4bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d4c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bc80      	pop	{r7}
 800d4c8:	4770      	bx	lr
	...

0800d4cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	6039      	str	r1, [r7, #0]
 800d4d6:	71fb      	strb	r3, [r7, #7]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d4dc:	79fb      	ldrb	r3, [r7, #7]
 800d4de:	2b23      	cmp	r3, #35	; 0x23
 800d4e0:	d866      	bhi.n	800d5b0 <CDC_Control_FS+0xe4>
 800d4e2:	a201      	add	r2, pc, #4	; (adr r2, 800d4e8 <CDC_Control_FS+0x1c>)
 800d4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e8:	0800d5b1 	.word	0x0800d5b1
 800d4ec:	0800d5b1 	.word	0x0800d5b1
 800d4f0:	0800d5b1 	.word	0x0800d5b1
 800d4f4:	0800d5b1 	.word	0x0800d5b1
 800d4f8:	0800d5b1 	.word	0x0800d5b1
 800d4fc:	0800d5b1 	.word	0x0800d5b1
 800d500:	0800d5b1 	.word	0x0800d5b1
 800d504:	0800d5b1 	.word	0x0800d5b1
 800d508:	0800d5b1 	.word	0x0800d5b1
 800d50c:	0800d5b1 	.word	0x0800d5b1
 800d510:	0800d5b1 	.word	0x0800d5b1
 800d514:	0800d5b1 	.word	0x0800d5b1
 800d518:	0800d5b1 	.word	0x0800d5b1
 800d51c:	0800d5b1 	.word	0x0800d5b1
 800d520:	0800d5b1 	.word	0x0800d5b1
 800d524:	0800d5b1 	.word	0x0800d5b1
 800d528:	0800d5b1 	.word	0x0800d5b1
 800d52c:	0800d5b1 	.word	0x0800d5b1
 800d530:	0800d5b1 	.word	0x0800d5b1
 800d534:	0800d5b1 	.word	0x0800d5b1
 800d538:	0800d5b1 	.word	0x0800d5b1
 800d53c:	0800d5b1 	.word	0x0800d5b1
 800d540:	0800d5b1 	.word	0x0800d5b1
 800d544:	0800d5b1 	.word	0x0800d5b1
 800d548:	0800d5b1 	.word	0x0800d5b1
 800d54c:	0800d5b1 	.word	0x0800d5b1
 800d550:	0800d5b1 	.word	0x0800d5b1
 800d554:	0800d5b1 	.word	0x0800d5b1
 800d558:	0800d5b1 	.word	0x0800d5b1
 800d55c:	0800d5b1 	.word	0x0800d5b1
 800d560:	0800d5b1 	.word	0x0800d5b1
 800d564:	0800d5b1 	.word	0x0800d5b1
 800d568:	0800d5b1 	.word	0x0800d5b1
 800d56c:	0800d579 	.word	0x0800d579
 800d570:	0800d5b1 	.word	0x0800d5b1
 800d574:	0800d5b1 	.word	0x0800d5b1
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	2220      	movs	r2, #32
 800d57c:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	3301      	adds	r3, #1
 800d582:	22c2      	movs	r2, #194	; 0xc2
 800d584:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	3302      	adds	r3, #2
 800d58a:	2201      	movs	r2, #1
 800d58c:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	3303      	adds	r3, #3
 800d592:	2200      	movs	r2, #0
 800d594:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	3304      	adds	r3, #4
 800d59a:	2200      	movs	r2, #0
 800d59c:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	3305      	adds	r3, #5
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	3306      	adds	r3, #6
 800d5aa:	2208      	movs	r2, #8
 800d5ac:	701a      	strb	r2, [r3, #0]
    break;
 800d5ae:	e000      	b.n	800d5b2 <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d5b0:	bf00      	nop
  }

  return (USBD_OK);
 800d5b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bc80      	pop	{r7}
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop

0800d5c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800d5ce:	e018      	b.n	800d602 <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	2b0a      	cmp	r3, #10
 800d5da:	d005      	beq.n	800d5e8 <CDC_Receive_FS+0x28>
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	2b0d      	cmp	r3, #13
 800d5e6:	d102      	bne.n	800d5ee <CDC_Receive_FS+0x2e>
 800d5e8:	4b12      	ldr	r3, [pc, #72]	; (800d634 <CDC_Receive_FS+0x74>)
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7f6 f93c 	bl	8003874 <Write_to_circ_buffer>
	  i++;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3301      	adds	r3, #1
 800d600:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d3e1      	bcc.n	800d5d0 <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	b29b      	uxth	r3, r3
 800d612:	4619      	mov	r1, r3
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 f811 	bl	800d63c <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d61a:	6879      	ldr	r1, [r7, #4]
 800d61c:	4806      	ldr	r0, [pc, #24]	; (800d638 <CDC_Receive_FS+0x78>)
 800d61e:	f7fe fe78 	bl	800c312 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d622:	4805      	ldr	r0, [pc, #20]	; (800d638 <CDC_Receive_FS+0x78>)
 800d624:	f7fe feb7 	bl	800c396 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d628:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	20000b10 	.word	0x20000b10
 800d638:	20000d78 	.word	0x20000d78

0800d63c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	460b      	mov	r3, r1
 800d646:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d64c:	4b0d      	ldr	r3, [pc, #52]	; (800d684 <CDC_Transmit_FS+0x48>)
 800d64e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d652:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d001      	beq.n	800d662 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d65e:	2301      	movs	r3, #1
 800d660:	e00b      	b.n	800d67a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d662:	887b      	ldrh	r3, [r7, #2]
 800d664:	461a      	mov	r2, r3
 800d666:	6879      	ldr	r1, [r7, #4]
 800d668:	4806      	ldr	r0, [pc, #24]	; (800d684 <CDC_Transmit_FS+0x48>)
 800d66a:	f7fe fe39 	bl	800c2e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d66e:	4805      	ldr	r0, [pc, #20]	; (800d684 <CDC_Transmit_FS+0x48>)
 800d670:	f7fe fe62 	bl	800c338 <USBD_CDC_TransmitPacket>
 800d674:	4603      	mov	r3, r0
 800d676:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d678:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	20000d78 	.word	0x20000d78

0800d688 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	4603      	mov	r3, r0
 800d690:	6039      	str	r1, [r7, #0]
 800d692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	2212      	movs	r2, #18
 800d698:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d69a:	4b03      	ldr	r3, [pc, #12]	; (800d6a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bc80      	pop	{r7}
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	20000800 	.word	0x20000800

0800d6ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	6039      	str	r1, [r7, #0]
 800d6b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2204      	movs	r2, #4
 800d6bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d6be:	4b03      	ldr	r3, [pc, #12]	; (800d6cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bc80      	pop	{r7}
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	20000814 	.word	0x20000814

0800d6d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	6039      	str	r1, [r7, #0]
 800d6da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6dc:	79fb      	ldrb	r3, [r7, #7]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d105      	bne.n	800d6ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d6e2:	683a      	ldr	r2, [r7, #0]
 800d6e4:	4907      	ldr	r1, [pc, #28]	; (800d704 <USBD_FS_ProductStrDescriptor+0x34>)
 800d6e6:	4808      	ldr	r0, [pc, #32]	; (800d708 <USBD_FS_ProductStrDescriptor+0x38>)
 800d6e8:	f7ff fdc6 	bl	800d278 <USBD_GetString>
 800d6ec:	e004      	b.n	800d6f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	4904      	ldr	r1, [pc, #16]	; (800d704 <USBD_FS_ProductStrDescriptor+0x34>)
 800d6f2:	4805      	ldr	r0, [pc, #20]	; (800d708 <USBD_FS_ProductStrDescriptor+0x38>)
 800d6f4:	f7ff fdc0 	bl	800d278 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6f8:	4b02      	ldr	r3, [pc, #8]	; (800d704 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	20001194 	.word	0x20001194
 800d708:	08012490 	.word	0x08012490

0800d70c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	4603      	mov	r3, r0
 800d714:	6039      	str	r1, [r7, #0]
 800d716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d718:	683a      	ldr	r2, [r7, #0]
 800d71a:	4904      	ldr	r1, [pc, #16]	; (800d72c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d71c:	4804      	ldr	r0, [pc, #16]	; (800d730 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d71e:	f7ff fdab 	bl	800d278 <USBD_GetString>
  return USBD_StrDesc;
 800d722:	4b02      	ldr	r3, [pc, #8]	; (800d72c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d724:	4618      	mov	r0, r3
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	20001194 	.word	0x20001194
 800d730:	0801249c 	.word	0x0801249c

0800d734 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	4603      	mov	r3, r0
 800d73c:	6039      	str	r1, [r7, #0]
 800d73e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	221a      	movs	r2, #26
 800d744:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d746:	f000 f843 	bl	800d7d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d74a:	4b02      	ldr	r3, [pc, #8]	; (800d754 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	20000818 	.word	0x20000818

0800d758 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	4603      	mov	r3, r0
 800d760:	6039      	str	r1, [r7, #0]
 800d762:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d764:	79fb      	ldrb	r3, [r7, #7]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d105      	bne.n	800d776 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d76a:	683a      	ldr	r2, [r7, #0]
 800d76c:	4907      	ldr	r1, [pc, #28]	; (800d78c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d76e:	4808      	ldr	r0, [pc, #32]	; (800d790 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d770:	f7ff fd82 	bl	800d278 <USBD_GetString>
 800d774:	e004      	b.n	800d780 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d776:	683a      	ldr	r2, [r7, #0]
 800d778:	4904      	ldr	r1, [pc, #16]	; (800d78c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d77a:	4805      	ldr	r0, [pc, #20]	; (800d790 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d77c:	f7ff fd7c 	bl	800d278 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d780:	4b02      	ldr	r3, [pc, #8]	; (800d78c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d782:	4618      	mov	r0, r3
 800d784:	3708      	adds	r7, #8
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	20001194 	.word	0x20001194
 800d790:	080124ac 	.word	0x080124ac

0800d794 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	4603      	mov	r3, r0
 800d79c:	6039      	str	r1, [r7, #0]
 800d79e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7a0:	79fb      	ldrb	r3, [r7, #7]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d105      	bne.n	800d7b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d7a6:	683a      	ldr	r2, [r7, #0]
 800d7a8:	4907      	ldr	r1, [pc, #28]	; (800d7c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d7aa:	4808      	ldr	r0, [pc, #32]	; (800d7cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d7ac:	f7ff fd64 	bl	800d278 <USBD_GetString>
 800d7b0:	e004      	b.n	800d7bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d7b2:	683a      	ldr	r2, [r7, #0]
 800d7b4:	4904      	ldr	r1, [pc, #16]	; (800d7c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d7b6:	4805      	ldr	r0, [pc, #20]	; (800d7cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d7b8:	f7ff fd5e 	bl	800d278 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7bc:	4b02      	ldr	r3, [pc, #8]	; (800d7c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	20001194 	.word	0x20001194
 800d7cc:	080124b8 	.word	0x080124b8

0800d7d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d7d6:	4b0f      	ldr	r3, [pc, #60]	; (800d814 <Get_SerialNum+0x44>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d7dc:	4b0e      	ldr	r3, [pc, #56]	; (800d818 <Get_SerialNum+0x48>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d7e2:	4b0e      	ldr	r3, [pc, #56]	; (800d81c <Get_SerialNum+0x4c>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d009      	beq.n	800d80a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d7f6:	2208      	movs	r2, #8
 800d7f8:	4909      	ldr	r1, [pc, #36]	; (800d820 <Get_SerialNum+0x50>)
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f000 f814 	bl	800d828 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d800:	2204      	movs	r2, #4
 800d802:	4908      	ldr	r1, [pc, #32]	; (800d824 <Get_SerialNum+0x54>)
 800d804:	68b8      	ldr	r0, [r7, #8]
 800d806:	f000 f80f 	bl	800d828 <IntToUnicode>
  }
}
 800d80a:	bf00      	nop
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	1ff80050 	.word	0x1ff80050
 800d818:	1ff80054 	.word	0x1ff80054
 800d81c:	1ff80058 	.word	0x1ff80058
 800d820:	2000081a 	.word	0x2000081a
 800d824:	2000082a 	.word	0x2000082a

0800d828 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d828:	b480      	push	{r7}
 800d82a:	b087      	sub	sp, #28
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	4613      	mov	r3, r2
 800d834:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d836:	2300      	movs	r3, #0
 800d838:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d83a:	2300      	movs	r3, #0
 800d83c:	75fb      	strb	r3, [r7, #23]
 800d83e:	e027      	b.n	800d890 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	0f1b      	lsrs	r3, r3, #28
 800d844:	2b09      	cmp	r3, #9
 800d846:	d80b      	bhi.n	800d860 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	0f1b      	lsrs	r3, r3, #28
 800d84c:	b2da      	uxtb	r2, r3
 800d84e:	7dfb      	ldrb	r3, [r7, #23]
 800d850:	005b      	lsls	r3, r3, #1
 800d852:	4619      	mov	r1, r3
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	440b      	add	r3, r1
 800d858:	3230      	adds	r2, #48	; 0x30
 800d85a:	b2d2      	uxtb	r2, r2
 800d85c:	701a      	strb	r2, [r3, #0]
 800d85e:	e00a      	b.n	800d876 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	0f1b      	lsrs	r3, r3, #28
 800d864:	b2da      	uxtb	r2, r3
 800d866:	7dfb      	ldrb	r3, [r7, #23]
 800d868:	005b      	lsls	r3, r3, #1
 800d86a:	4619      	mov	r1, r3
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	440b      	add	r3, r1
 800d870:	3237      	adds	r2, #55	; 0x37
 800d872:	b2d2      	uxtb	r2, r2
 800d874:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	011b      	lsls	r3, r3, #4
 800d87a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d87c:	7dfb      	ldrb	r3, [r7, #23]
 800d87e:	005b      	lsls	r3, r3, #1
 800d880:	3301      	adds	r3, #1
 800d882:	68ba      	ldr	r2, [r7, #8]
 800d884:	4413      	add	r3, r2
 800d886:	2200      	movs	r2, #0
 800d888:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
 800d88c:	3301      	adds	r3, #1
 800d88e:	75fb      	strb	r3, [r7, #23]
 800d890:	7dfa      	ldrb	r2, [r7, #23]
 800d892:	79fb      	ldrb	r3, [r7, #7]
 800d894:	429a      	cmp	r2, r3
 800d896:	d3d3      	bcc.n	800d840 <IntToUnicode+0x18>
  }
}
 800d898:	bf00      	nop
 800d89a:	bf00      	nop
 800d89c:	371c      	adds	r7, #28
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bc80      	pop	{r7}
 800d8a2:	4770      	bx	lr

0800d8a4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800d8b0:	78fb      	ldrb	r3, [r7, #3]
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d106      	bne.n	800d8c4 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800d8b6:	4b09      	ldr	r3, [pc, #36]	; (800d8dc <HAL_PCDEx_SetConnectionState+0x38>)
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	4a08      	ldr	r2, [pc, #32]	; (800d8dc <HAL_PCDEx_SetConnectionState+0x38>)
 800d8bc:	f043 0301 	orr.w	r3, r3, #1
 800d8c0:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800d8c2:	e005      	b.n	800d8d0 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800d8c4:	4b05      	ldr	r3, [pc, #20]	; (800d8dc <HAL_PCDEx_SetConnectionState+0x38>)
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	4a04      	ldr	r2, [pc, #16]	; (800d8dc <HAL_PCDEx_SetConnectionState+0x38>)
 800d8ca:	f023 0301 	bic.w	r3, r3, #1
 800d8ce:	6053      	str	r3, [r2, #4]
}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bc80      	pop	{r7}
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop
 800d8dc:	40010000 	.word	0x40010000

0800d8e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a0d      	ldr	r2, [pc, #52]	; (800d924 <HAL_PCD_MspInit+0x44>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d113      	bne.n	800d91a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d8f2:	4b0d      	ldr	r3, [pc, #52]	; (800d928 <HAL_PCD_MspInit+0x48>)
 800d8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f6:	4a0c      	ldr	r2, [pc, #48]	; (800d928 <HAL_PCD_MspInit+0x48>)
 800d8f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d8fc:	6253      	str	r3, [r2, #36]	; 0x24
 800d8fe:	4b0a      	ldr	r3, [pc, #40]	; (800d928 <HAL_PCD_MspInit+0x48>)
 800d900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d906:	60fb      	str	r3, [r7, #12]
 800d908:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800d90a:	2200      	movs	r2, #0
 800d90c:	2101      	movs	r1, #1
 800d90e:	2014      	movs	r0, #20
 800d910:	f7f6 fd8d 	bl	800442e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d914:	2014      	movs	r0, #20
 800d916:	f7f6 fda6 	bl	8004466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d91a:	bf00      	nop
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	40005c00 	.word	0x40005c00
 800d928:	40023800 	.word	0x40023800

0800d92c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d940:	4619      	mov	r1, r3
 800d942:	4610      	mov	r0, r2
 800d944:	f7fe fddd 	bl	800c502 <USBD_LL_SetupStage>
}
 800d948:	bf00      	nop
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d962:	78fa      	ldrb	r2, [r7, #3]
 800d964:	6879      	ldr	r1, [r7, #4]
 800d966:	4613      	mov	r3, r2
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	4413      	add	r3, r2
 800d96c:	00db      	lsls	r3, r3, #3
 800d96e:	440b      	add	r3, r1
 800d970:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	78fb      	ldrb	r3, [r7, #3]
 800d978:	4619      	mov	r1, r3
 800d97a:	f7fe fe0f 	bl	800c59c <USBD_LL_DataOutStage>
}
 800d97e:	bf00      	nop
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b082      	sub	sp, #8
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
 800d98e:	460b      	mov	r3, r1
 800d990:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d998:	78fa      	ldrb	r2, [r7, #3]
 800d99a:	6879      	ldr	r1, [r7, #4]
 800d99c:	4613      	mov	r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4413      	add	r3, r2
 800d9a2:	00db      	lsls	r3, r3, #3
 800d9a4:	440b      	add	r3, r1
 800d9a6:	333c      	adds	r3, #60	; 0x3c
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	78fb      	ldrb	r3, [r7, #3]
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	f7fe fe66 	bl	800c67e <USBD_LL_DataInStage>
}
 800d9b2:	bf00      	nop
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9ba:	b580      	push	{r7, lr}
 800d9bc:	b082      	sub	sp, #8
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7fe ff71 	bl	800c8b0 <USBD_LL_SOF>
}
 800d9ce:	bf00      	nop
 800d9d0:	3708      	adds	r7, #8
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b084      	sub	sp, #16
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d001      	beq.n	800d9ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d9ea:	f7f5 ff5b 	bl	80038a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d9f4:	7bfa      	ldrb	r2, [r7, #15]
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fe ff26 	bl	800c84a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800da04:	4618      	mov	r0, r3
 800da06:	f7fe fedf 	bl	800c7c8 <USBD_LL_Reset>
}
 800da0a:	bf00      	nop
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
	...

0800da14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800da22:	4618      	mov	r0, r3
 800da24:	f7fe ff20 	bl	800c868 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	699b      	ldr	r3, [r3, #24]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d005      	beq.n	800da3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da30:	4b04      	ldr	r3, [pc, #16]	; (800da44 <HAL_PCD_SuspendCallback+0x30>)
 800da32:	691b      	ldr	r3, [r3, #16]
 800da34:	4a03      	ldr	r2, [pc, #12]	; (800da44 <HAL_PCD_SuspendCallback+0x30>)
 800da36:	f043 0306 	orr.w	r3, r3, #6
 800da3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800da3c:	bf00      	nop
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	e000ed00 	.word	0xe000ed00

0800da48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800da56:	4618      	mov	r0, r3
 800da58:	f7fe ff1a 	bl	800c890 <USBD_LL_Resume>
}
 800da5c:	bf00      	nop
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800da6c:	4a28      	ldr	r2, [pc, #160]	; (800db10 <USBD_LL_Init+0xac>)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4a26      	ldr	r2, [pc, #152]	; (800db10 <USBD_LL_Init+0xac>)
 800da78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800da7c:	4b24      	ldr	r3, [pc, #144]	; (800db10 <USBD_LL_Init+0xac>)
 800da7e:	4a25      	ldr	r2, [pc, #148]	; (800db14 <USBD_LL_Init+0xb0>)
 800da80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800da82:	4b23      	ldr	r3, [pc, #140]	; (800db10 <USBD_LL_Init+0xac>)
 800da84:	2208      	movs	r2, #8
 800da86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800da88:	4b21      	ldr	r3, [pc, #132]	; (800db10 <USBD_LL_Init+0xac>)
 800da8a:	2202      	movs	r2, #2
 800da8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da8e:	4b20      	ldr	r3, [pc, #128]	; (800db10 <USBD_LL_Init+0xac>)
 800da90:	2202      	movs	r2, #2
 800da92:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800da94:	4b1e      	ldr	r3, [pc, #120]	; (800db10 <USBD_LL_Init+0xac>)
 800da96:	2200      	movs	r2, #0
 800da98:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800da9a:	4b1d      	ldr	r3, [pc, #116]	; (800db10 <USBD_LL_Init+0xac>)
 800da9c:	2200      	movs	r2, #0
 800da9e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800daa0:	481b      	ldr	r0, [pc, #108]	; (800db10 <USBD_LL_Init+0xac>)
 800daa2:	f7f7 feab 	bl	80057fc <HAL_PCD_Init>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d001      	beq.n	800dab0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800daac:	f7f5 fefa 	bl	80038a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dab6:	2318      	movs	r3, #24
 800dab8:	2200      	movs	r2, #0
 800daba:	2100      	movs	r1, #0
 800dabc:	f7f9 fa88 	bl	8006fd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dac6:	2358      	movs	r3, #88	; 0x58
 800dac8:	2200      	movs	r2, #0
 800daca:	2180      	movs	r1, #128	; 0x80
 800dacc:	f7f9 fa80 	bl	8006fd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dad6:	23c0      	movs	r3, #192	; 0xc0
 800dad8:	2200      	movs	r2, #0
 800dada:	2181      	movs	r1, #129	; 0x81
 800dadc:	f7f9 fa78 	bl	8006fd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dae6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800daea:	2200      	movs	r2, #0
 800daec:	2101      	movs	r1, #1
 800daee:	f7f9 fa6f 	bl	8006fd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800daf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dafc:	2200      	movs	r2, #0
 800dafe:	2182      	movs	r1, #130	; 0x82
 800db00:	f7f9 fa66 	bl	8006fd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	20001394 	.word	0x20001394
 800db14:	40005c00 	.word	0x40005c00

0800db18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db20:	2300      	movs	r3, #0
 800db22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db24:	2300      	movs	r3, #0
 800db26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800db2e:	4618      	mov	r0, r3
 800db30:	f7f7 ff42 	bl	80059b8 <HAL_PCD_Start>
 800db34:	4603      	mov	r3, r0
 800db36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db38:	7bfb      	ldrb	r3, [r7, #15]
 800db3a:	4618      	mov	r0, r3
 800db3c:	f000 f944 	bl	800ddc8 <USBD_Get_USB_Status>
 800db40:	4603      	mov	r3, r0
 800db42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db44:	7bbb      	ldrb	r3, [r7, #14]
}
 800db46:	4618      	mov	r0, r3
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b084      	sub	sp, #16
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
 800db56:	4608      	mov	r0, r1
 800db58:	4611      	mov	r1, r2
 800db5a:	461a      	mov	r2, r3
 800db5c:	4603      	mov	r3, r0
 800db5e:	70fb      	strb	r3, [r7, #3]
 800db60:	460b      	mov	r3, r1
 800db62:	70bb      	strb	r3, [r7, #2]
 800db64:	4613      	mov	r3, r2
 800db66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db68:	2300      	movs	r3, #0
 800db6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db6c:	2300      	movs	r3, #0
 800db6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800db76:	78bb      	ldrb	r3, [r7, #2]
 800db78:	883a      	ldrh	r2, [r7, #0]
 800db7a:	78f9      	ldrb	r1, [r7, #3]
 800db7c:	f7f8 f85e 	bl	8005c3c <HAL_PCD_EP_Open>
 800db80:	4603      	mov	r3, r0
 800db82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db84:	7bfb      	ldrb	r3, [r7, #15]
 800db86:	4618      	mov	r0, r3
 800db88:	f000 f91e 	bl	800ddc8 <USBD_Get_USB_Status>
 800db8c:	4603      	mov	r3, r0
 800db8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db90:	7bbb      	ldrb	r3, [r7, #14]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b084      	sub	sp, #16
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
 800dba2:	460b      	mov	r3, r1
 800dba4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dbb4:	78fa      	ldrb	r2, [r7, #3]
 800dbb6:	4611      	mov	r1, r2
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7f8 f8a5 	bl	8005d08 <HAL_PCD_EP_Close>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbc2:	7bfb      	ldrb	r3, [r7, #15]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f000 f8ff 	bl	800ddc8 <USBD_Get_USB_Status>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbce:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dbf2:	78fa      	ldrb	r2, [r7, #3]
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7f8 f965 	bl	8005ec6 <HAL_PCD_EP_SetStall>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc00:	7bfb      	ldrb	r3, [r7, #15]
 800dc02:	4618      	mov	r0, r3
 800dc04:	f000 f8e0 	bl	800ddc8 <USBD_Get_USB_Status>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b084      	sub	sp, #16
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
 800dc1e:	460b      	mov	r3, r1
 800dc20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc26:	2300      	movs	r3, #0
 800dc28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dc30:	78fa      	ldrb	r2, [r7, #3]
 800dc32:	4611      	mov	r1, r2
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7f8 f998 	bl	8005f6a <HAL_PCD_EP_ClrStall>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc3e:	7bfb      	ldrb	r3, [r7, #15]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f000 f8c1 	bl	800ddc8 <USBD_Get_USB_Status>
 800dc46:	4603      	mov	r3, r0
 800dc48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dc66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dc68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	da0c      	bge.n	800dc8a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dc70:	78fb      	ldrb	r3, [r7, #3]
 800dc72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc76:	68f9      	ldr	r1, [r7, #12]
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	4613      	mov	r3, r2
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	4413      	add	r3, r2
 800dc80:	00db      	lsls	r3, r3, #3
 800dc82:	440b      	add	r3, r1
 800dc84:	3302      	adds	r3, #2
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	e00b      	b.n	800dca2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc8a:	78fb      	ldrb	r3, [r7, #3]
 800dc8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc90:	68f9      	ldr	r1, [r7, #12]
 800dc92:	4613      	mov	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	00db      	lsls	r3, r3, #3
 800dc9a:	440b      	add	r3, r1
 800dc9c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dca0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3714      	adds	r7, #20
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bc80      	pop	{r7}
 800dcaa:	4770      	bx	lr

0800dcac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dcc6:	78fa      	ldrb	r2, [r7, #3]
 800dcc8:	4611      	mov	r1, r2
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7f7 ff91 	bl	8005bf2 <HAL_PCD_SetAddress>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcd4:	7bfb      	ldrb	r3, [r7, #15]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 f876 	bl	800ddc8 <USBD_Get_USB_Status>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dce0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b086      	sub	sp, #24
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	60f8      	str	r0, [r7, #12]
 800dcf2:	607a      	str	r2, [r7, #4]
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	72fb      	strb	r3, [r7, #11]
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd02:	2300      	movs	r3, #0
 800dd04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dd0c:	893b      	ldrh	r3, [r7, #8]
 800dd0e:	7af9      	ldrb	r1, [r7, #11]
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	f7f8 f895 	bl	8005e40 <HAL_PCD_EP_Transmit>
 800dd16:	4603      	mov	r3, r0
 800dd18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd1a:	7dfb      	ldrb	r3, [r7, #23]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 f853 	bl	800ddc8 <USBD_Get_USB_Status>
 800dd22:	4603      	mov	r3, r0
 800dd24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd26:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3718      	adds	r7, #24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	607a      	str	r2, [r7, #4]
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	72fb      	strb	r3, [r7, #11]
 800dd40:	4613      	mov	r3, r2
 800dd42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd44:	2300      	movs	r3, #0
 800dd46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dd52:	893b      	ldrh	r3, [r7, #8]
 800dd54:	7af9      	ldrb	r1, [r7, #11]
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	f7f8 f81e 	bl	8005d98 <HAL_PCD_EP_Receive>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd60:	7dfb      	ldrb	r3, [r7, #23]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f000 f830 	bl	800ddc8 <USBD_Get_USB_Status>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3718      	adds	r7, #24
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b082      	sub	sp, #8
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	460b      	mov	r3, r1
 800dd80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dd88:	78fa      	ldrb	r2, [r7, #3]
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7f8 f840 	bl	8005e12 <HAL_PCD_EP_GetRxCount>
 800dd92:	4603      	mov	r3, r0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dda4:	4b02      	ldr	r3, [pc, #8]	; (800ddb0 <USBD_static_malloc+0x14>)
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	370c      	adds	r7, #12
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bc80      	pop	{r7}
 800ddae:	4770      	bx	lr
 800ddb0:	20001680 	.word	0x20001680

0800ddb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]

}
 800ddbc:	bf00      	nop
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bc80      	pop	{r7}
 800ddc4:	4770      	bx	lr
	...

0800ddc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	d817      	bhi.n	800de0c <USBD_Get_USB_Status+0x44>
 800dddc:	a201      	add	r2, pc, #4	; (adr r2, 800dde4 <USBD_Get_USB_Status+0x1c>)
 800ddde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde2:	bf00      	nop
 800dde4:	0800ddf5 	.word	0x0800ddf5
 800dde8:	0800ddfb 	.word	0x0800ddfb
 800ddec:	0800de01 	.word	0x0800de01
 800ddf0:	0800de07 	.word	0x0800de07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf8:	e00b      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ddfa:	2302      	movs	r3, #2
 800ddfc:	73fb      	strb	r3, [r7, #15]
    break;
 800ddfe:	e008      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de00:	2301      	movs	r3, #1
 800de02:	73fb      	strb	r3, [r7, #15]
    break;
 800de04:	e005      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de06:	2302      	movs	r3, #2
 800de08:	73fb      	strb	r3, [r7, #15]
    break;
 800de0a:	e002      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800de0c:	2302      	movs	r3, #2
 800de0e:	73fb      	strb	r3, [r7, #15]
    break;
 800de10:	bf00      	nop
  }
  return usb_status;
 800de12:	7bfb      	ldrb	r3, [r7, #15]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3714      	adds	r7, #20
 800de18:	46bd      	mov	sp, r7
 800de1a:	bc80      	pop	{r7}
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop

0800de20 <floor>:
 800de20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de24:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800de28:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800de2c:	2e13      	cmp	r6, #19
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	4607      	mov	r7, r0
 800de34:	460c      	mov	r4, r1
 800de36:	4605      	mov	r5, r0
 800de38:	dc33      	bgt.n	800dea2 <floor+0x82>
 800de3a:	2e00      	cmp	r6, #0
 800de3c:	da14      	bge.n	800de68 <floor+0x48>
 800de3e:	a334      	add	r3, pc, #208	; (adr r3, 800df10 <floor+0xf0>)
 800de40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de44:	f7f2 f9b4 	bl	80001b0 <__adddf3>
 800de48:	2200      	movs	r2, #0
 800de4a:	2300      	movs	r3, #0
 800de4c:	f7f2 fdf6 	bl	8000a3c <__aeabi_dcmpgt>
 800de50:	b138      	cbz	r0, 800de62 <floor+0x42>
 800de52:	2c00      	cmp	r4, #0
 800de54:	da58      	bge.n	800df08 <floor+0xe8>
 800de56:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800de5a:	431d      	orrs	r5, r3
 800de5c:	d001      	beq.n	800de62 <floor+0x42>
 800de5e:	2500      	movs	r5, #0
 800de60:	4c2d      	ldr	r4, [pc, #180]	; (800df18 <floor+0xf8>)
 800de62:	4623      	mov	r3, r4
 800de64:	462f      	mov	r7, r5
 800de66:	e025      	b.n	800deb4 <floor+0x94>
 800de68:	4a2c      	ldr	r2, [pc, #176]	; (800df1c <floor+0xfc>)
 800de6a:	fa42 f806 	asr.w	r8, r2, r6
 800de6e:	ea01 0208 	and.w	r2, r1, r8
 800de72:	4302      	orrs	r2, r0
 800de74:	d01e      	beq.n	800deb4 <floor+0x94>
 800de76:	a326      	add	r3, pc, #152	; (adr r3, 800df10 <floor+0xf0>)
 800de78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7c:	f7f2 f998 	bl	80001b0 <__adddf3>
 800de80:	2200      	movs	r2, #0
 800de82:	2300      	movs	r3, #0
 800de84:	f7f2 fdda 	bl	8000a3c <__aeabi_dcmpgt>
 800de88:	2800      	cmp	r0, #0
 800de8a:	d0ea      	beq.n	800de62 <floor+0x42>
 800de8c:	2c00      	cmp	r4, #0
 800de8e:	bfbe      	ittt	lt
 800de90:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800de94:	fa43 f606 	asrlt.w	r6, r3, r6
 800de98:	19a4      	addlt	r4, r4, r6
 800de9a:	2500      	movs	r5, #0
 800de9c:	ea24 0408 	bic.w	r4, r4, r8
 800dea0:	e7df      	b.n	800de62 <floor+0x42>
 800dea2:	2e33      	cmp	r6, #51	; 0x33
 800dea4:	dd0a      	ble.n	800debc <floor+0x9c>
 800dea6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800deaa:	d103      	bne.n	800deb4 <floor+0x94>
 800deac:	f7f2 f980 	bl	80001b0 <__adddf3>
 800deb0:	4607      	mov	r7, r0
 800deb2:	460b      	mov	r3, r1
 800deb4:	4638      	mov	r0, r7
 800deb6:	4619      	mov	r1, r3
 800deb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800debc:	f04f 32ff 	mov.w	r2, #4294967295
 800dec0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800dec4:	fa22 f808 	lsr.w	r8, r2, r8
 800dec8:	ea18 0f00 	tst.w	r8, r0
 800decc:	d0f2      	beq.n	800deb4 <floor+0x94>
 800dece:	a310      	add	r3, pc, #64	; (adr r3, 800df10 <floor+0xf0>)
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	f7f2 f96c 	bl	80001b0 <__adddf3>
 800ded8:	2200      	movs	r2, #0
 800deda:	2300      	movs	r3, #0
 800dedc:	f7f2 fdae 	bl	8000a3c <__aeabi_dcmpgt>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	d0be      	beq.n	800de62 <floor+0x42>
 800dee4:	2c00      	cmp	r4, #0
 800dee6:	da02      	bge.n	800deee <floor+0xce>
 800dee8:	2e14      	cmp	r6, #20
 800deea:	d103      	bne.n	800def4 <floor+0xd4>
 800deec:	3401      	adds	r4, #1
 800deee:	ea25 0508 	bic.w	r5, r5, r8
 800def2:	e7b6      	b.n	800de62 <floor+0x42>
 800def4:	2301      	movs	r3, #1
 800def6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800defa:	fa03 f606 	lsl.w	r6, r3, r6
 800defe:	4435      	add	r5, r6
 800df00:	42bd      	cmp	r5, r7
 800df02:	bf38      	it	cc
 800df04:	18e4      	addcc	r4, r4, r3
 800df06:	e7f2      	b.n	800deee <floor+0xce>
 800df08:	2500      	movs	r5, #0
 800df0a:	462c      	mov	r4, r5
 800df0c:	e7a9      	b.n	800de62 <floor+0x42>
 800df0e:	bf00      	nop
 800df10:	8800759c 	.word	0x8800759c
 800df14:	7e37e43c 	.word	0x7e37e43c
 800df18:	bff00000 	.word	0xbff00000
 800df1c:	000fffff 	.word	0x000fffff

0800df20 <atof>:
 800df20:	2100      	movs	r1, #0
 800df22:	f001 bad5 	b.w	800f4d0 <strtod>
	...

0800df28 <__errno>:
 800df28:	4b01      	ldr	r3, [pc, #4]	; (800df30 <__errno+0x8>)
 800df2a:	6818      	ldr	r0, [r3, #0]
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	20000834 	.word	0x20000834

0800df34 <__libc_init_array>:
 800df34:	b570      	push	{r4, r5, r6, lr}
 800df36:	2600      	movs	r6, #0
 800df38:	4d0c      	ldr	r5, [pc, #48]	; (800df6c <__libc_init_array+0x38>)
 800df3a:	4c0d      	ldr	r4, [pc, #52]	; (800df70 <__libc_init_array+0x3c>)
 800df3c:	1b64      	subs	r4, r4, r5
 800df3e:	10a4      	asrs	r4, r4, #2
 800df40:	42a6      	cmp	r6, r4
 800df42:	d109      	bne.n	800df58 <__libc_init_array+0x24>
 800df44:	f004 fa30 	bl	80123a8 <_init>
 800df48:	2600      	movs	r6, #0
 800df4a:	4d0a      	ldr	r5, [pc, #40]	; (800df74 <__libc_init_array+0x40>)
 800df4c:	4c0a      	ldr	r4, [pc, #40]	; (800df78 <__libc_init_array+0x44>)
 800df4e:	1b64      	subs	r4, r4, r5
 800df50:	10a4      	asrs	r4, r4, #2
 800df52:	42a6      	cmp	r6, r4
 800df54:	d105      	bne.n	800df62 <__libc_init_array+0x2e>
 800df56:	bd70      	pop	{r4, r5, r6, pc}
 800df58:	f855 3b04 	ldr.w	r3, [r5], #4
 800df5c:	4798      	blx	r3
 800df5e:	3601      	adds	r6, #1
 800df60:	e7ee      	b.n	800df40 <__libc_init_array+0xc>
 800df62:	f855 3b04 	ldr.w	r3, [r5], #4
 800df66:	4798      	blx	r3
 800df68:	3601      	adds	r6, #1
 800df6a:	e7f2      	b.n	800df52 <__libc_init_array+0x1e>
 800df6c:	080129f0 	.word	0x080129f0
 800df70:	080129f0 	.word	0x080129f0
 800df74:	080129f0 	.word	0x080129f0
 800df78:	080129f4 	.word	0x080129f4

0800df7c <memcpy>:
 800df7c:	440a      	add	r2, r1
 800df7e:	4291      	cmp	r1, r2
 800df80:	f100 33ff 	add.w	r3, r0, #4294967295
 800df84:	d100      	bne.n	800df88 <memcpy+0xc>
 800df86:	4770      	bx	lr
 800df88:	b510      	push	{r4, lr}
 800df8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df8e:	4291      	cmp	r1, r2
 800df90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df94:	d1f9      	bne.n	800df8a <memcpy+0xe>
 800df96:	bd10      	pop	{r4, pc}

0800df98 <memset>:
 800df98:	4603      	mov	r3, r0
 800df9a:	4402      	add	r2, r0
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d100      	bne.n	800dfa2 <memset+0xa>
 800dfa0:	4770      	bx	lr
 800dfa2:	f803 1b01 	strb.w	r1, [r3], #1
 800dfa6:	e7f9      	b.n	800df9c <memset+0x4>

0800dfa8 <__cvt>:
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfae:	461f      	mov	r7, r3
 800dfb0:	bfbb      	ittet	lt
 800dfb2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800dfb6:	461f      	movlt	r7, r3
 800dfb8:	2300      	movge	r3, #0
 800dfba:	232d      	movlt	r3, #45	; 0x2d
 800dfbc:	b088      	sub	sp, #32
 800dfbe:	4614      	mov	r4, r2
 800dfc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dfc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800dfc4:	7013      	strb	r3, [r2, #0]
 800dfc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfc8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800dfcc:	f023 0820 	bic.w	r8, r3, #32
 800dfd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dfd4:	d005      	beq.n	800dfe2 <__cvt+0x3a>
 800dfd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dfda:	d100      	bne.n	800dfde <__cvt+0x36>
 800dfdc:	3501      	adds	r5, #1
 800dfde:	2302      	movs	r3, #2
 800dfe0:	e000      	b.n	800dfe4 <__cvt+0x3c>
 800dfe2:	2303      	movs	r3, #3
 800dfe4:	aa07      	add	r2, sp, #28
 800dfe6:	9204      	str	r2, [sp, #16]
 800dfe8:	aa06      	add	r2, sp, #24
 800dfea:	e9cd a202 	strd	sl, r2, [sp, #8]
 800dfee:	e9cd 3500 	strd	r3, r5, [sp]
 800dff2:	4622      	mov	r2, r4
 800dff4:	463b      	mov	r3, r7
 800dff6:	f001 fb7f 	bl	800f6f8 <_dtoa_r>
 800dffa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dffe:	4606      	mov	r6, r0
 800e000:	d102      	bne.n	800e008 <__cvt+0x60>
 800e002:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e004:	07db      	lsls	r3, r3, #31
 800e006:	d522      	bpl.n	800e04e <__cvt+0xa6>
 800e008:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e00c:	eb06 0905 	add.w	r9, r6, r5
 800e010:	d110      	bne.n	800e034 <__cvt+0x8c>
 800e012:	7833      	ldrb	r3, [r6, #0]
 800e014:	2b30      	cmp	r3, #48	; 0x30
 800e016:	d10a      	bne.n	800e02e <__cvt+0x86>
 800e018:	2200      	movs	r2, #0
 800e01a:	2300      	movs	r3, #0
 800e01c:	4620      	mov	r0, r4
 800e01e:	4639      	mov	r1, r7
 800e020:	f7f2 fce4 	bl	80009ec <__aeabi_dcmpeq>
 800e024:	b918      	cbnz	r0, 800e02e <__cvt+0x86>
 800e026:	f1c5 0501 	rsb	r5, r5, #1
 800e02a:	f8ca 5000 	str.w	r5, [sl]
 800e02e:	f8da 3000 	ldr.w	r3, [sl]
 800e032:	4499      	add	r9, r3
 800e034:	2200      	movs	r2, #0
 800e036:	2300      	movs	r3, #0
 800e038:	4620      	mov	r0, r4
 800e03a:	4639      	mov	r1, r7
 800e03c:	f7f2 fcd6 	bl	80009ec <__aeabi_dcmpeq>
 800e040:	b108      	cbz	r0, 800e046 <__cvt+0x9e>
 800e042:	f8cd 901c 	str.w	r9, [sp, #28]
 800e046:	2230      	movs	r2, #48	; 0x30
 800e048:	9b07      	ldr	r3, [sp, #28]
 800e04a:	454b      	cmp	r3, r9
 800e04c:	d307      	bcc.n	800e05e <__cvt+0xb6>
 800e04e:	4630      	mov	r0, r6
 800e050:	9b07      	ldr	r3, [sp, #28]
 800e052:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e054:	1b9b      	subs	r3, r3, r6
 800e056:	6013      	str	r3, [r2, #0]
 800e058:	b008      	add	sp, #32
 800e05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e05e:	1c59      	adds	r1, r3, #1
 800e060:	9107      	str	r1, [sp, #28]
 800e062:	701a      	strb	r2, [r3, #0]
 800e064:	e7f0      	b.n	800e048 <__cvt+0xa0>

0800e066 <__exponent>:
 800e066:	4603      	mov	r3, r0
 800e068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e06a:	2900      	cmp	r1, #0
 800e06c:	f803 2b02 	strb.w	r2, [r3], #2
 800e070:	bfb6      	itet	lt
 800e072:	222d      	movlt	r2, #45	; 0x2d
 800e074:	222b      	movge	r2, #43	; 0x2b
 800e076:	4249      	neglt	r1, r1
 800e078:	2909      	cmp	r1, #9
 800e07a:	7042      	strb	r2, [r0, #1]
 800e07c:	dd2b      	ble.n	800e0d6 <__exponent+0x70>
 800e07e:	f10d 0407 	add.w	r4, sp, #7
 800e082:	46a4      	mov	ip, r4
 800e084:	270a      	movs	r7, #10
 800e086:	fb91 f6f7 	sdiv	r6, r1, r7
 800e08a:	460a      	mov	r2, r1
 800e08c:	46a6      	mov	lr, r4
 800e08e:	fb07 1516 	mls	r5, r7, r6, r1
 800e092:	2a63      	cmp	r2, #99	; 0x63
 800e094:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800e098:	4631      	mov	r1, r6
 800e09a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e09e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e0a2:	dcf0      	bgt.n	800e086 <__exponent+0x20>
 800e0a4:	3130      	adds	r1, #48	; 0x30
 800e0a6:	f1ae 0502 	sub.w	r5, lr, #2
 800e0aa:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	1c44      	adds	r4, r0, #1
 800e0b2:	4561      	cmp	r1, ip
 800e0b4:	d30a      	bcc.n	800e0cc <__exponent+0x66>
 800e0b6:	f10d 0209 	add.w	r2, sp, #9
 800e0ba:	eba2 020e 	sub.w	r2, r2, lr
 800e0be:	4565      	cmp	r5, ip
 800e0c0:	bf88      	it	hi
 800e0c2:	2200      	movhi	r2, #0
 800e0c4:	4413      	add	r3, r2
 800e0c6:	1a18      	subs	r0, r3, r0
 800e0c8:	b003      	add	sp, #12
 800e0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0d0:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e0d4:	e7ed      	b.n	800e0b2 <__exponent+0x4c>
 800e0d6:	2330      	movs	r3, #48	; 0x30
 800e0d8:	3130      	adds	r1, #48	; 0x30
 800e0da:	7083      	strb	r3, [r0, #2]
 800e0dc:	70c1      	strb	r1, [r0, #3]
 800e0de:	1d03      	adds	r3, r0, #4
 800e0e0:	e7f1      	b.n	800e0c6 <__exponent+0x60>
	...

0800e0e4 <_printf_float>:
 800e0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e8:	b091      	sub	sp, #68	; 0x44
 800e0ea:	460c      	mov	r4, r1
 800e0ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e0f0:	4616      	mov	r6, r2
 800e0f2:	461f      	mov	r7, r3
 800e0f4:	4605      	mov	r5, r0
 800e0f6:	f002 fc65 	bl	80109c4 <_localeconv_r>
 800e0fa:	6803      	ldr	r3, [r0, #0]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e100:	f7f2 f848 	bl	8000194 <strlen>
 800e104:	2300      	movs	r3, #0
 800e106:	930e      	str	r3, [sp, #56]	; 0x38
 800e108:	f8d8 3000 	ldr.w	r3, [r8]
 800e10c:	900a      	str	r0, [sp, #40]	; 0x28
 800e10e:	3307      	adds	r3, #7
 800e110:	f023 0307 	bic.w	r3, r3, #7
 800e114:	f103 0208 	add.w	r2, r3, #8
 800e118:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e11c:	f8d4 b000 	ldr.w	fp, [r4]
 800e120:	f8c8 2000 	str.w	r2, [r8]
 800e124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e128:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e12c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800e130:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e134:	930b      	str	r3, [sp, #44]	; 0x2c
 800e136:	f04f 32ff 	mov.w	r2, #4294967295
 800e13a:	4640      	mov	r0, r8
 800e13c:	4b9c      	ldr	r3, [pc, #624]	; (800e3b0 <_printf_float+0x2cc>)
 800e13e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e140:	f7f2 fc86 	bl	8000a50 <__aeabi_dcmpun>
 800e144:	bb70      	cbnz	r0, 800e1a4 <_printf_float+0xc0>
 800e146:	f04f 32ff 	mov.w	r2, #4294967295
 800e14a:	4640      	mov	r0, r8
 800e14c:	4b98      	ldr	r3, [pc, #608]	; (800e3b0 <_printf_float+0x2cc>)
 800e14e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e150:	f7f2 fc60 	bl	8000a14 <__aeabi_dcmple>
 800e154:	bb30      	cbnz	r0, 800e1a4 <_printf_float+0xc0>
 800e156:	2200      	movs	r2, #0
 800e158:	2300      	movs	r3, #0
 800e15a:	4640      	mov	r0, r8
 800e15c:	4651      	mov	r1, sl
 800e15e:	f7f2 fc4f 	bl	8000a00 <__aeabi_dcmplt>
 800e162:	b110      	cbz	r0, 800e16a <_printf_float+0x86>
 800e164:	232d      	movs	r3, #45	; 0x2d
 800e166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e16a:	4b92      	ldr	r3, [pc, #584]	; (800e3b4 <_printf_float+0x2d0>)
 800e16c:	4892      	ldr	r0, [pc, #584]	; (800e3b8 <_printf_float+0x2d4>)
 800e16e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e172:	bf94      	ite	ls
 800e174:	4698      	movls	r8, r3
 800e176:	4680      	movhi	r8, r0
 800e178:	2303      	movs	r3, #3
 800e17a:	f04f 0a00 	mov.w	sl, #0
 800e17e:	6123      	str	r3, [r4, #16]
 800e180:	f02b 0304 	bic.w	r3, fp, #4
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	4633      	mov	r3, r6
 800e188:	4621      	mov	r1, r4
 800e18a:	4628      	mov	r0, r5
 800e18c:	9700      	str	r7, [sp, #0]
 800e18e:	aa0f      	add	r2, sp, #60	; 0x3c
 800e190:	f000 f9d4 	bl	800e53c <_printf_common>
 800e194:	3001      	adds	r0, #1
 800e196:	f040 8090 	bne.w	800e2ba <_printf_float+0x1d6>
 800e19a:	f04f 30ff 	mov.w	r0, #4294967295
 800e19e:	b011      	add	sp, #68	; 0x44
 800e1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a4:	4642      	mov	r2, r8
 800e1a6:	4653      	mov	r3, sl
 800e1a8:	4640      	mov	r0, r8
 800e1aa:	4651      	mov	r1, sl
 800e1ac:	f7f2 fc50 	bl	8000a50 <__aeabi_dcmpun>
 800e1b0:	b148      	cbz	r0, 800e1c6 <_printf_float+0xe2>
 800e1b2:	f1ba 0f00 	cmp.w	sl, #0
 800e1b6:	bfb8      	it	lt
 800e1b8:	232d      	movlt	r3, #45	; 0x2d
 800e1ba:	4880      	ldr	r0, [pc, #512]	; (800e3bc <_printf_float+0x2d8>)
 800e1bc:	bfb8      	it	lt
 800e1be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e1c2:	4b7f      	ldr	r3, [pc, #508]	; (800e3c0 <_printf_float+0x2dc>)
 800e1c4:	e7d3      	b.n	800e16e <_printf_float+0x8a>
 800e1c6:	6863      	ldr	r3, [r4, #4]
 800e1c8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e1cc:	1c5a      	adds	r2, r3, #1
 800e1ce:	d142      	bne.n	800e256 <_printf_float+0x172>
 800e1d0:	2306      	movs	r3, #6
 800e1d2:	6063      	str	r3, [r4, #4]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	9206      	str	r2, [sp, #24]
 800e1d8:	aa0e      	add	r2, sp, #56	; 0x38
 800e1da:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e1de:	aa0d      	add	r2, sp, #52	; 0x34
 800e1e0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e1e4:	9203      	str	r2, [sp, #12]
 800e1e6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e1ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e1ee:	6023      	str	r3, [r4, #0]
 800e1f0:	6863      	ldr	r3, [r4, #4]
 800e1f2:	4642      	mov	r2, r8
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	4653      	mov	r3, sl
 800e1fa:	910b      	str	r1, [sp, #44]	; 0x2c
 800e1fc:	f7ff fed4 	bl	800dfa8 <__cvt>
 800e200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e202:	4680      	mov	r8, r0
 800e204:	2947      	cmp	r1, #71	; 0x47
 800e206:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e208:	d108      	bne.n	800e21c <_printf_float+0x138>
 800e20a:	1cc8      	adds	r0, r1, #3
 800e20c:	db02      	blt.n	800e214 <_printf_float+0x130>
 800e20e:	6863      	ldr	r3, [r4, #4]
 800e210:	4299      	cmp	r1, r3
 800e212:	dd40      	ble.n	800e296 <_printf_float+0x1b2>
 800e214:	f1a9 0902 	sub.w	r9, r9, #2
 800e218:	fa5f f989 	uxtb.w	r9, r9
 800e21c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e220:	d81f      	bhi.n	800e262 <_printf_float+0x17e>
 800e222:	464a      	mov	r2, r9
 800e224:	3901      	subs	r1, #1
 800e226:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e22a:	910d      	str	r1, [sp, #52]	; 0x34
 800e22c:	f7ff ff1b 	bl	800e066 <__exponent>
 800e230:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e232:	4682      	mov	sl, r0
 800e234:	1813      	adds	r3, r2, r0
 800e236:	2a01      	cmp	r2, #1
 800e238:	6123      	str	r3, [r4, #16]
 800e23a:	dc02      	bgt.n	800e242 <_printf_float+0x15e>
 800e23c:	6822      	ldr	r2, [r4, #0]
 800e23e:	07d2      	lsls	r2, r2, #31
 800e240:	d501      	bpl.n	800e246 <_printf_float+0x162>
 800e242:	3301      	adds	r3, #1
 800e244:	6123      	str	r3, [r4, #16]
 800e246:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d09b      	beq.n	800e186 <_printf_float+0xa2>
 800e24e:	232d      	movs	r3, #45	; 0x2d
 800e250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e254:	e797      	b.n	800e186 <_printf_float+0xa2>
 800e256:	2947      	cmp	r1, #71	; 0x47
 800e258:	d1bc      	bne.n	800e1d4 <_printf_float+0xf0>
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1ba      	bne.n	800e1d4 <_printf_float+0xf0>
 800e25e:	2301      	movs	r3, #1
 800e260:	e7b7      	b.n	800e1d2 <_printf_float+0xee>
 800e262:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e266:	d118      	bne.n	800e29a <_printf_float+0x1b6>
 800e268:	2900      	cmp	r1, #0
 800e26a:	6863      	ldr	r3, [r4, #4]
 800e26c:	dd0b      	ble.n	800e286 <_printf_float+0x1a2>
 800e26e:	6121      	str	r1, [r4, #16]
 800e270:	b913      	cbnz	r3, 800e278 <_printf_float+0x194>
 800e272:	6822      	ldr	r2, [r4, #0]
 800e274:	07d0      	lsls	r0, r2, #31
 800e276:	d502      	bpl.n	800e27e <_printf_float+0x19a>
 800e278:	3301      	adds	r3, #1
 800e27a:	440b      	add	r3, r1
 800e27c:	6123      	str	r3, [r4, #16]
 800e27e:	f04f 0a00 	mov.w	sl, #0
 800e282:	65a1      	str	r1, [r4, #88]	; 0x58
 800e284:	e7df      	b.n	800e246 <_printf_float+0x162>
 800e286:	b913      	cbnz	r3, 800e28e <_printf_float+0x1aa>
 800e288:	6822      	ldr	r2, [r4, #0]
 800e28a:	07d2      	lsls	r2, r2, #31
 800e28c:	d501      	bpl.n	800e292 <_printf_float+0x1ae>
 800e28e:	3302      	adds	r3, #2
 800e290:	e7f4      	b.n	800e27c <_printf_float+0x198>
 800e292:	2301      	movs	r3, #1
 800e294:	e7f2      	b.n	800e27c <_printf_float+0x198>
 800e296:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e29a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e29c:	4299      	cmp	r1, r3
 800e29e:	db05      	blt.n	800e2ac <_printf_float+0x1c8>
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	6121      	str	r1, [r4, #16]
 800e2a4:	07d8      	lsls	r0, r3, #31
 800e2a6:	d5ea      	bpl.n	800e27e <_printf_float+0x19a>
 800e2a8:	1c4b      	adds	r3, r1, #1
 800e2aa:	e7e7      	b.n	800e27c <_printf_float+0x198>
 800e2ac:	2900      	cmp	r1, #0
 800e2ae:	bfcc      	ite	gt
 800e2b0:	2201      	movgt	r2, #1
 800e2b2:	f1c1 0202 	rsble	r2, r1, #2
 800e2b6:	4413      	add	r3, r2
 800e2b8:	e7e0      	b.n	800e27c <_printf_float+0x198>
 800e2ba:	6823      	ldr	r3, [r4, #0]
 800e2bc:	055a      	lsls	r2, r3, #21
 800e2be:	d407      	bmi.n	800e2d0 <_printf_float+0x1ec>
 800e2c0:	6923      	ldr	r3, [r4, #16]
 800e2c2:	4642      	mov	r2, r8
 800e2c4:	4631      	mov	r1, r6
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	47b8      	blx	r7
 800e2ca:	3001      	adds	r0, #1
 800e2cc:	d12b      	bne.n	800e326 <_printf_float+0x242>
 800e2ce:	e764      	b.n	800e19a <_printf_float+0xb6>
 800e2d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e2d4:	f240 80dd 	bls.w	800e492 <_printf_float+0x3ae>
 800e2d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e2dc:	2200      	movs	r2, #0
 800e2de:	2300      	movs	r3, #0
 800e2e0:	f7f2 fb84 	bl	80009ec <__aeabi_dcmpeq>
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d033      	beq.n	800e350 <_printf_float+0x26c>
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	4631      	mov	r1, r6
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	4a35      	ldr	r2, [pc, #212]	; (800e3c4 <_printf_float+0x2e0>)
 800e2f0:	47b8      	blx	r7
 800e2f2:	3001      	adds	r0, #1
 800e2f4:	f43f af51 	beq.w	800e19a <_printf_float+0xb6>
 800e2f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	db02      	blt.n	800e306 <_printf_float+0x222>
 800e300:	6823      	ldr	r3, [r4, #0]
 800e302:	07d8      	lsls	r0, r3, #31
 800e304:	d50f      	bpl.n	800e326 <_printf_float+0x242>
 800e306:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e30a:	4631      	mov	r1, r6
 800e30c:	4628      	mov	r0, r5
 800e30e:	47b8      	blx	r7
 800e310:	3001      	adds	r0, #1
 800e312:	f43f af42 	beq.w	800e19a <_printf_float+0xb6>
 800e316:	f04f 0800 	mov.w	r8, #0
 800e31a:	f104 091a 	add.w	r9, r4, #26
 800e31e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e320:	3b01      	subs	r3, #1
 800e322:	4543      	cmp	r3, r8
 800e324:	dc09      	bgt.n	800e33a <_printf_float+0x256>
 800e326:	6823      	ldr	r3, [r4, #0]
 800e328:	079b      	lsls	r3, r3, #30
 800e32a:	f100 8102 	bmi.w	800e532 <_printf_float+0x44e>
 800e32e:	68e0      	ldr	r0, [r4, #12]
 800e330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e332:	4298      	cmp	r0, r3
 800e334:	bfb8      	it	lt
 800e336:	4618      	movlt	r0, r3
 800e338:	e731      	b.n	800e19e <_printf_float+0xba>
 800e33a:	2301      	movs	r3, #1
 800e33c:	464a      	mov	r2, r9
 800e33e:	4631      	mov	r1, r6
 800e340:	4628      	mov	r0, r5
 800e342:	47b8      	blx	r7
 800e344:	3001      	adds	r0, #1
 800e346:	f43f af28 	beq.w	800e19a <_printf_float+0xb6>
 800e34a:	f108 0801 	add.w	r8, r8, #1
 800e34e:	e7e6      	b.n	800e31e <_printf_float+0x23a>
 800e350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e352:	2b00      	cmp	r3, #0
 800e354:	dc38      	bgt.n	800e3c8 <_printf_float+0x2e4>
 800e356:	2301      	movs	r3, #1
 800e358:	4631      	mov	r1, r6
 800e35a:	4628      	mov	r0, r5
 800e35c:	4a19      	ldr	r2, [pc, #100]	; (800e3c4 <_printf_float+0x2e0>)
 800e35e:	47b8      	blx	r7
 800e360:	3001      	adds	r0, #1
 800e362:	f43f af1a 	beq.w	800e19a <_printf_float+0xb6>
 800e366:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e36a:	4313      	orrs	r3, r2
 800e36c:	d102      	bne.n	800e374 <_printf_float+0x290>
 800e36e:	6823      	ldr	r3, [r4, #0]
 800e370:	07d9      	lsls	r1, r3, #31
 800e372:	d5d8      	bpl.n	800e326 <_printf_float+0x242>
 800e374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e378:	4631      	mov	r1, r6
 800e37a:	4628      	mov	r0, r5
 800e37c:	47b8      	blx	r7
 800e37e:	3001      	adds	r0, #1
 800e380:	f43f af0b 	beq.w	800e19a <_printf_float+0xb6>
 800e384:	f04f 0900 	mov.w	r9, #0
 800e388:	f104 0a1a 	add.w	sl, r4, #26
 800e38c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e38e:	425b      	negs	r3, r3
 800e390:	454b      	cmp	r3, r9
 800e392:	dc01      	bgt.n	800e398 <_printf_float+0x2b4>
 800e394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e396:	e794      	b.n	800e2c2 <_printf_float+0x1de>
 800e398:	2301      	movs	r3, #1
 800e39a:	4652      	mov	r2, sl
 800e39c:	4631      	mov	r1, r6
 800e39e:	4628      	mov	r0, r5
 800e3a0:	47b8      	blx	r7
 800e3a2:	3001      	adds	r0, #1
 800e3a4:	f43f aef9 	beq.w	800e19a <_printf_float+0xb6>
 800e3a8:	f109 0901 	add.w	r9, r9, #1
 800e3ac:	e7ee      	b.n	800e38c <_printf_float+0x2a8>
 800e3ae:	bf00      	nop
 800e3b0:	7fefffff 	.word	0x7fefffff
 800e3b4:	080124f0 	.word	0x080124f0
 800e3b8:	080124f4 	.word	0x080124f4
 800e3bc:	080124fc 	.word	0x080124fc
 800e3c0:	080124f8 	.word	0x080124f8
 800e3c4:	08012500 	.word	0x08012500
 800e3c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	bfa8      	it	ge
 800e3d0:	461a      	movge	r2, r3
 800e3d2:	2a00      	cmp	r2, #0
 800e3d4:	4691      	mov	r9, r2
 800e3d6:	dc37      	bgt.n	800e448 <_printf_float+0x364>
 800e3d8:	f04f 0b00 	mov.w	fp, #0
 800e3dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3e0:	f104 021a 	add.w	r2, r4, #26
 800e3e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e3e8:	ebaa 0309 	sub.w	r3, sl, r9
 800e3ec:	455b      	cmp	r3, fp
 800e3ee:	dc33      	bgt.n	800e458 <_printf_float+0x374>
 800e3f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	db3b      	blt.n	800e470 <_printf_float+0x38c>
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	07da      	lsls	r2, r3, #31
 800e3fc:	d438      	bmi.n	800e470 <_printf_float+0x38c>
 800e3fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e400:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e402:	eba3 020a 	sub.w	r2, r3, sl
 800e406:	eba3 0901 	sub.w	r9, r3, r1
 800e40a:	4591      	cmp	r9, r2
 800e40c:	bfa8      	it	ge
 800e40e:	4691      	movge	r9, r2
 800e410:	f1b9 0f00 	cmp.w	r9, #0
 800e414:	dc34      	bgt.n	800e480 <_printf_float+0x39c>
 800e416:	f04f 0800 	mov.w	r8, #0
 800e41a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e41e:	f104 0a1a 	add.w	sl, r4, #26
 800e422:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e426:	1a9b      	subs	r3, r3, r2
 800e428:	eba3 0309 	sub.w	r3, r3, r9
 800e42c:	4543      	cmp	r3, r8
 800e42e:	f77f af7a 	ble.w	800e326 <_printf_float+0x242>
 800e432:	2301      	movs	r3, #1
 800e434:	4652      	mov	r2, sl
 800e436:	4631      	mov	r1, r6
 800e438:	4628      	mov	r0, r5
 800e43a:	47b8      	blx	r7
 800e43c:	3001      	adds	r0, #1
 800e43e:	f43f aeac 	beq.w	800e19a <_printf_float+0xb6>
 800e442:	f108 0801 	add.w	r8, r8, #1
 800e446:	e7ec      	b.n	800e422 <_printf_float+0x33e>
 800e448:	4613      	mov	r3, r2
 800e44a:	4631      	mov	r1, r6
 800e44c:	4642      	mov	r2, r8
 800e44e:	4628      	mov	r0, r5
 800e450:	47b8      	blx	r7
 800e452:	3001      	adds	r0, #1
 800e454:	d1c0      	bne.n	800e3d8 <_printf_float+0x2f4>
 800e456:	e6a0      	b.n	800e19a <_printf_float+0xb6>
 800e458:	2301      	movs	r3, #1
 800e45a:	4631      	mov	r1, r6
 800e45c:	4628      	mov	r0, r5
 800e45e:	920b      	str	r2, [sp, #44]	; 0x2c
 800e460:	47b8      	blx	r7
 800e462:	3001      	adds	r0, #1
 800e464:	f43f ae99 	beq.w	800e19a <_printf_float+0xb6>
 800e468:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e46a:	f10b 0b01 	add.w	fp, fp, #1
 800e46e:	e7b9      	b.n	800e3e4 <_printf_float+0x300>
 800e470:	4631      	mov	r1, r6
 800e472:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e476:	4628      	mov	r0, r5
 800e478:	47b8      	blx	r7
 800e47a:	3001      	adds	r0, #1
 800e47c:	d1bf      	bne.n	800e3fe <_printf_float+0x31a>
 800e47e:	e68c      	b.n	800e19a <_printf_float+0xb6>
 800e480:	464b      	mov	r3, r9
 800e482:	4631      	mov	r1, r6
 800e484:	4628      	mov	r0, r5
 800e486:	eb08 020a 	add.w	r2, r8, sl
 800e48a:	47b8      	blx	r7
 800e48c:	3001      	adds	r0, #1
 800e48e:	d1c2      	bne.n	800e416 <_printf_float+0x332>
 800e490:	e683      	b.n	800e19a <_printf_float+0xb6>
 800e492:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e494:	2a01      	cmp	r2, #1
 800e496:	dc01      	bgt.n	800e49c <_printf_float+0x3b8>
 800e498:	07db      	lsls	r3, r3, #31
 800e49a:	d537      	bpl.n	800e50c <_printf_float+0x428>
 800e49c:	2301      	movs	r3, #1
 800e49e:	4642      	mov	r2, r8
 800e4a0:	4631      	mov	r1, r6
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	47b8      	blx	r7
 800e4a6:	3001      	adds	r0, #1
 800e4a8:	f43f ae77 	beq.w	800e19a <_printf_float+0xb6>
 800e4ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4b0:	4631      	mov	r1, r6
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	47b8      	blx	r7
 800e4b6:	3001      	adds	r0, #1
 800e4b8:	f43f ae6f 	beq.w	800e19a <_printf_float+0xb6>
 800e4bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	f7f2 fa92 	bl	80009ec <__aeabi_dcmpeq>
 800e4c8:	b9d8      	cbnz	r0, 800e502 <_printf_float+0x41e>
 800e4ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4cc:	f108 0201 	add.w	r2, r8, #1
 800e4d0:	3b01      	subs	r3, #1
 800e4d2:	4631      	mov	r1, r6
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	47b8      	blx	r7
 800e4d8:	3001      	adds	r0, #1
 800e4da:	d10e      	bne.n	800e4fa <_printf_float+0x416>
 800e4dc:	e65d      	b.n	800e19a <_printf_float+0xb6>
 800e4de:	2301      	movs	r3, #1
 800e4e0:	464a      	mov	r2, r9
 800e4e2:	4631      	mov	r1, r6
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	47b8      	blx	r7
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	f43f ae56 	beq.w	800e19a <_printf_float+0xb6>
 800e4ee:	f108 0801 	add.w	r8, r8, #1
 800e4f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4f4:	3b01      	subs	r3, #1
 800e4f6:	4543      	cmp	r3, r8
 800e4f8:	dcf1      	bgt.n	800e4de <_printf_float+0x3fa>
 800e4fa:	4653      	mov	r3, sl
 800e4fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e500:	e6e0      	b.n	800e2c4 <_printf_float+0x1e0>
 800e502:	f04f 0800 	mov.w	r8, #0
 800e506:	f104 091a 	add.w	r9, r4, #26
 800e50a:	e7f2      	b.n	800e4f2 <_printf_float+0x40e>
 800e50c:	2301      	movs	r3, #1
 800e50e:	4642      	mov	r2, r8
 800e510:	e7df      	b.n	800e4d2 <_printf_float+0x3ee>
 800e512:	2301      	movs	r3, #1
 800e514:	464a      	mov	r2, r9
 800e516:	4631      	mov	r1, r6
 800e518:	4628      	mov	r0, r5
 800e51a:	47b8      	blx	r7
 800e51c:	3001      	adds	r0, #1
 800e51e:	f43f ae3c 	beq.w	800e19a <_printf_float+0xb6>
 800e522:	f108 0801 	add.w	r8, r8, #1
 800e526:	68e3      	ldr	r3, [r4, #12]
 800e528:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e52a:	1a5b      	subs	r3, r3, r1
 800e52c:	4543      	cmp	r3, r8
 800e52e:	dcf0      	bgt.n	800e512 <_printf_float+0x42e>
 800e530:	e6fd      	b.n	800e32e <_printf_float+0x24a>
 800e532:	f04f 0800 	mov.w	r8, #0
 800e536:	f104 0919 	add.w	r9, r4, #25
 800e53a:	e7f4      	b.n	800e526 <_printf_float+0x442>

0800e53c <_printf_common>:
 800e53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e540:	4616      	mov	r6, r2
 800e542:	4699      	mov	r9, r3
 800e544:	688a      	ldr	r2, [r1, #8]
 800e546:	690b      	ldr	r3, [r1, #16]
 800e548:	4607      	mov	r7, r0
 800e54a:	4293      	cmp	r3, r2
 800e54c:	bfb8      	it	lt
 800e54e:	4613      	movlt	r3, r2
 800e550:	6033      	str	r3, [r6, #0]
 800e552:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e556:	460c      	mov	r4, r1
 800e558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e55c:	b10a      	cbz	r2, 800e562 <_printf_common+0x26>
 800e55e:	3301      	adds	r3, #1
 800e560:	6033      	str	r3, [r6, #0]
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	0699      	lsls	r1, r3, #26
 800e566:	bf42      	ittt	mi
 800e568:	6833      	ldrmi	r3, [r6, #0]
 800e56a:	3302      	addmi	r3, #2
 800e56c:	6033      	strmi	r3, [r6, #0]
 800e56e:	6825      	ldr	r5, [r4, #0]
 800e570:	f015 0506 	ands.w	r5, r5, #6
 800e574:	d106      	bne.n	800e584 <_printf_common+0x48>
 800e576:	f104 0a19 	add.w	sl, r4, #25
 800e57a:	68e3      	ldr	r3, [r4, #12]
 800e57c:	6832      	ldr	r2, [r6, #0]
 800e57e:	1a9b      	subs	r3, r3, r2
 800e580:	42ab      	cmp	r3, r5
 800e582:	dc28      	bgt.n	800e5d6 <_printf_common+0x9a>
 800e584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e588:	1e13      	subs	r3, r2, #0
 800e58a:	6822      	ldr	r2, [r4, #0]
 800e58c:	bf18      	it	ne
 800e58e:	2301      	movne	r3, #1
 800e590:	0692      	lsls	r2, r2, #26
 800e592:	d42d      	bmi.n	800e5f0 <_printf_common+0xb4>
 800e594:	4649      	mov	r1, r9
 800e596:	4638      	mov	r0, r7
 800e598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e59c:	47c0      	blx	r8
 800e59e:	3001      	adds	r0, #1
 800e5a0:	d020      	beq.n	800e5e4 <_printf_common+0xa8>
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	68e5      	ldr	r5, [r4, #12]
 800e5a6:	f003 0306 	and.w	r3, r3, #6
 800e5aa:	2b04      	cmp	r3, #4
 800e5ac:	bf18      	it	ne
 800e5ae:	2500      	movne	r5, #0
 800e5b0:	6832      	ldr	r2, [r6, #0]
 800e5b2:	f04f 0600 	mov.w	r6, #0
 800e5b6:	68a3      	ldr	r3, [r4, #8]
 800e5b8:	bf08      	it	eq
 800e5ba:	1aad      	subeq	r5, r5, r2
 800e5bc:	6922      	ldr	r2, [r4, #16]
 800e5be:	bf08      	it	eq
 800e5c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	bfc4      	itt	gt
 800e5c8:	1a9b      	subgt	r3, r3, r2
 800e5ca:	18ed      	addgt	r5, r5, r3
 800e5cc:	341a      	adds	r4, #26
 800e5ce:	42b5      	cmp	r5, r6
 800e5d0:	d11a      	bne.n	800e608 <_printf_common+0xcc>
 800e5d2:	2000      	movs	r0, #0
 800e5d4:	e008      	b.n	800e5e8 <_printf_common+0xac>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	4652      	mov	r2, sl
 800e5da:	4649      	mov	r1, r9
 800e5dc:	4638      	mov	r0, r7
 800e5de:	47c0      	blx	r8
 800e5e0:	3001      	adds	r0, #1
 800e5e2:	d103      	bne.n	800e5ec <_printf_common+0xb0>
 800e5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ec:	3501      	adds	r5, #1
 800e5ee:	e7c4      	b.n	800e57a <_printf_common+0x3e>
 800e5f0:	2030      	movs	r0, #48	; 0x30
 800e5f2:	18e1      	adds	r1, r4, r3
 800e5f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5f8:	1c5a      	adds	r2, r3, #1
 800e5fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5fe:	4422      	add	r2, r4
 800e600:	3302      	adds	r3, #2
 800e602:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e606:	e7c5      	b.n	800e594 <_printf_common+0x58>
 800e608:	2301      	movs	r3, #1
 800e60a:	4622      	mov	r2, r4
 800e60c:	4649      	mov	r1, r9
 800e60e:	4638      	mov	r0, r7
 800e610:	47c0      	blx	r8
 800e612:	3001      	adds	r0, #1
 800e614:	d0e6      	beq.n	800e5e4 <_printf_common+0xa8>
 800e616:	3601      	adds	r6, #1
 800e618:	e7d9      	b.n	800e5ce <_printf_common+0x92>
	...

0800e61c <_printf_i>:
 800e61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e620:	7e0f      	ldrb	r7, [r1, #24]
 800e622:	4691      	mov	r9, r2
 800e624:	2f78      	cmp	r7, #120	; 0x78
 800e626:	4680      	mov	r8, r0
 800e628:	460c      	mov	r4, r1
 800e62a:	469a      	mov	sl, r3
 800e62c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e62e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e632:	d807      	bhi.n	800e644 <_printf_i+0x28>
 800e634:	2f62      	cmp	r7, #98	; 0x62
 800e636:	d80a      	bhi.n	800e64e <_printf_i+0x32>
 800e638:	2f00      	cmp	r7, #0
 800e63a:	f000 80d9 	beq.w	800e7f0 <_printf_i+0x1d4>
 800e63e:	2f58      	cmp	r7, #88	; 0x58
 800e640:	f000 80a4 	beq.w	800e78c <_printf_i+0x170>
 800e644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e64c:	e03a      	b.n	800e6c4 <_printf_i+0xa8>
 800e64e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e652:	2b15      	cmp	r3, #21
 800e654:	d8f6      	bhi.n	800e644 <_printf_i+0x28>
 800e656:	a101      	add	r1, pc, #4	; (adr r1, 800e65c <_printf_i+0x40>)
 800e658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e65c:	0800e6b5 	.word	0x0800e6b5
 800e660:	0800e6c9 	.word	0x0800e6c9
 800e664:	0800e645 	.word	0x0800e645
 800e668:	0800e645 	.word	0x0800e645
 800e66c:	0800e645 	.word	0x0800e645
 800e670:	0800e645 	.word	0x0800e645
 800e674:	0800e6c9 	.word	0x0800e6c9
 800e678:	0800e645 	.word	0x0800e645
 800e67c:	0800e645 	.word	0x0800e645
 800e680:	0800e645 	.word	0x0800e645
 800e684:	0800e645 	.word	0x0800e645
 800e688:	0800e7d7 	.word	0x0800e7d7
 800e68c:	0800e6f9 	.word	0x0800e6f9
 800e690:	0800e7b9 	.word	0x0800e7b9
 800e694:	0800e645 	.word	0x0800e645
 800e698:	0800e645 	.word	0x0800e645
 800e69c:	0800e7f9 	.word	0x0800e7f9
 800e6a0:	0800e645 	.word	0x0800e645
 800e6a4:	0800e6f9 	.word	0x0800e6f9
 800e6a8:	0800e645 	.word	0x0800e645
 800e6ac:	0800e645 	.word	0x0800e645
 800e6b0:	0800e7c1 	.word	0x0800e7c1
 800e6b4:	682b      	ldr	r3, [r5, #0]
 800e6b6:	1d1a      	adds	r2, r3, #4
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	602a      	str	r2, [r5, #0]
 800e6bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e0a4      	b.n	800e812 <_printf_i+0x1f6>
 800e6c8:	6820      	ldr	r0, [r4, #0]
 800e6ca:	6829      	ldr	r1, [r5, #0]
 800e6cc:	0606      	lsls	r6, r0, #24
 800e6ce:	f101 0304 	add.w	r3, r1, #4
 800e6d2:	d50a      	bpl.n	800e6ea <_printf_i+0xce>
 800e6d4:	680e      	ldr	r6, [r1, #0]
 800e6d6:	602b      	str	r3, [r5, #0]
 800e6d8:	2e00      	cmp	r6, #0
 800e6da:	da03      	bge.n	800e6e4 <_printf_i+0xc8>
 800e6dc:	232d      	movs	r3, #45	; 0x2d
 800e6de:	4276      	negs	r6, r6
 800e6e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6e4:	230a      	movs	r3, #10
 800e6e6:	485e      	ldr	r0, [pc, #376]	; (800e860 <_printf_i+0x244>)
 800e6e8:	e019      	b.n	800e71e <_printf_i+0x102>
 800e6ea:	680e      	ldr	r6, [r1, #0]
 800e6ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e6f0:	602b      	str	r3, [r5, #0]
 800e6f2:	bf18      	it	ne
 800e6f4:	b236      	sxthne	r6, r6
 800e6f6:	e7ef      	b.n	800e6d8 <_printf_i+0xbc>
 800e6f8:	682b      	ldr	r3, [r5, #0]
 800e6fa:	6820      	ldr	r0, [r4, #0]
 800e6fc:	1d19      	adds	r1, r3, #4
 800e6fe:	6029      	str	r1, [r5, #0]
 800e700:	0601      	lsls	r1, r0, #24
 800e702:	d501      	bpl.n	800e708 <_printf_i+0xec>
 800e704:	681e      	ldr	r6, [r3, #0]
 800e706:	e002      	b.n	800e70e <_printf_i+0xf2>
 800e708:	0646      	lsls	r6, r0, #25
 800e70a:	d5fb      	bpl.n	800e704 <_printf_i+0xe8>
 800e70c:	881e      	ldrh	r6, [r3, #0]
 800e70e:	2f6f      	cmp	r7, #111	; 0x6f
 800e710:	bf0c      	ite	eq
 800e712:	2308      	moveq	r3, #8
 800e714:	230a      	movne	r3, #10
 800e716:	4852      	ldr	r0, [pc, #328]	; (800e860 <_printf_i+0x244>)
 800e718:	2100      	movs	r1, #0
 800e71a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e71e:	6865      	ldr	r5, [r4, #4]
 800e720:	2d00      	cmp	r5, #0
 800e722:	bfa8      	it	ge
 800e724:	6821      	ldrge	r1, [r4, #0]
 800e726:	60a5      	str	r5, [r4, #8]
 800e728:	bfa4      	itt	ge
 800e72a:	f021 0104 	bicge.w	r1, r1, #4
 800e72e:	6021      	strge	r1, [r4, #0]
 800e730:	b90e      	cbnz	r6, 800e736 <_printf_i+0x11a>
 800e732:	2d00      	cmp	r5, #0
 800e734:	d04d      	beq.n	800e7d2 <_printf_i+0x1b6>
 800e736:	4615      	mov	r5, r2
 800e738:	fbb6 f1f3 	udiv	r1, r6, r3
 800e73c:	fb03 6711 	mls	r7, r3, r1, r6
 800e740:	5dc7      	ldrb	r7, [r0, r7]
 800e742:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e746:	4637      	mov	r7, r6
 800e748:	42bb      	cmp	r3, r7
 800e74a:	460e      	mov	r6, r1
 800e74c:	d9f4      	bls.n	800e738 <_printf_i+0x11c>
 800e74e:	2b08      	cmp	r3, #8
 800e750:	d10b      	bne.n	800e76a <_printf_i+0x14e>
 800e752:	6823      	ldr	r3, [r4, #0]
 800e754:	07de      	lsls	r6, r3, #31
 800e756:	d508      	bpl.n	800e76a <_printf_i+0x14e>
 800e758:	6923      	ldr	r3, [r4, #16]
 800e75a:	6861      	ldr	r1, [r4, #4]
 800e75c:	4299      	cmp	r1, r3
 800e75e:	bfde      	ittt	le
 800e760:	2330      	movle	r3, #48	; 0x30
 800e762:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e766:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e76a:	1b52      	subs	r2, r2, r5
 800e76c:	6122      	str	r2, [r4, #16]
 800e76e:	464b      	mov	r3, r9
 800e770:	4621      	mov	r1, r4
 800e772:	4640      	mov	r0, r8
 800e774:	f8cd a000 	str.w	sl, [sp]
 800e778:	aa03      	add	r2, sp, #12
 800e77a:	f7ff fedf 	bl	800e53c <_printf_common>
 800e77e:	3001      	adds	r0, #1
 800e780:	d14c      	bne.n	800e81c <_printf_i+0x200>
 800e782:	f04f 30ff 	mov.w	r0, #4294967295
 800e786:	b004      	add	sp, #16
 800e788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e78c:	4834      	ldr	r0, [pc, #208]	; (800e860 <_printf_i+0x244>)
 800e78e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e792:	6829      	ldr	r1, [r5, #0]
 800e794:	6823      	ldr	r3, [r4, #0]
 800e796:	f851 6b04 	ldr.w	r6, [r1], #4
 800e79a:	6029      	str	r1, [r5, #0]
 800e79c:	061d      	lsls	r5, r3, #24
 800e79e:	d514      	bpl.n	800e7ca <_printf_i+0x1ae>
 800e7a0:	07df      	lsls	r7, r3, #31
 800e7a2:	bf44      	itt	mi
 800e7a4:	f043 0320 	orrmi.w	r3, r3, #32
 800e7a8:	6023      	strmi	r3, [r4, #0]
 800e7aa:	b91e      	cbnz	r6, 800e7b4 <_printf_i+0x198>
 800e7ac:	6823      	ldr	r3, [r4, #0]
 800e7ae:	f023 0320 	bic.w	r3, r3, #32
 800e7b2:	6023      	str	r3, [r4, #0]
 800e7b4:	2310      	movs	r3, #16
 800e7b6:	e7af      	b.n	800e718 <_printf_i+0xfc>
 800e7b8:	6823      	ldr	r3, [r4, #0]
 800e7ba:	f043 0320 	orr.w	r3, r3, #32
 800e7be:	6023      	str	r3, [r4, #0]
 800e7c0:	2378      	movs	r3, #120	; 0x78
 800e7c2:	4828      	ldr	r0, [pc, #160]	; (800e864 <_printf_i+0x248>)
 800e7c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e7c8:	e7e3      	b.n	800e792 <_printf_i+0x176>
 800e7ca:	0659      	lsls	r1, r3, #25
 800e7cc:	bf48      	it	mi
 800e7ce:	b2b6      	uxthmi	r6, r6
 800e7d0:	e7e6      	b.n	800e7a0 <_printf_i+0x184>
 800e7d2:	4615      	mov	r5, r2
 800e7d4:	e7bb      	b.n	800e74e <_printf_i+0x132>
 800e7d6:	682b      	ldr	r3, [r5, #0]
 800e7d8:	6826      	ldr	r6, [r4, #0]
 800e7da:	1d18      	adds	r0, r3, #4
 800e7dc:	6961      	ldr	r1, [r4, #20]
 800e7de:	6028      	str	r0, [r5, #0]
 800e7e0:	0635      	lsls	r5, r6, #24
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	d501      	bpl.n	800e7ea <_printf_i+0x1ce>
 800e7e6:	6019      	str	r1, [r3, #0]
 800e7e8:	e002      	b.n	800e7f0 <_printf_i+0x1d4>
 800e7ea:	0670      	lsls	r0, r6, #25
 800e7ec:	d5fb      	bpl.n	800e7e6 <_printf_i+0x1ca>
 800e7ee:	8019      	strh	r1, [r3, #0]
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4615      	mov	r5, r2
 800e7f4:	6123      	str	r3, [r4, #16]
 800e7f6:	e7ba      	b.n	800e76e <_printf_i+0x152>
 800e7f8:	682b      	ldr	r3, [r5, #0]
 800e7fa:	2100      	movs	r1, #0
 800e7fc:	1d1a      	adds	r2, r3, #4
 800e7fe:	602a      	str	r2, [r5, #0]
 800e800:	681d      	ldr	r5, [r3, #0]
 800e802:	6862      	ldr	r2, [r4, #4]
 800e804:	4628      	mov	r0, r5
 800e806:	f002 f8fb 	bl	8010a00 <memchr>
 800e80a:	b108      	cbz	r0, 800e810 <_printf_i+0x1f4>
 800e80c:	1b40      	subs	r0, r0, r5
 800e80e:	6060      	str	r0, [r4, #4]
 800e810:	6863      	ldr	r3, [r4, #4]
 800e812:	6123      	str	r3, [r4, #16]
 800e814:	2300      	movs	r3, #0
 800e816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e81a:	e7a8      	b.n	800e76e <_printf_i+0x152>
 800e81c:	462a      	mov	r2, r5
 800e81e:	4649      	mov	r1, r9
 800e820:	4640      	mov	r0, r8
 800e822:	6923      	ldr	r3, [r4, #16]
 800e824:	47d0      	blx	sl
 800e826:	3001      	adds	r0, #1
 800e828:	d0ab      	beq.n	800e782 <_printf_i+0x166>
 800e82a:	6823      	ldr	r3, [r4, #0]
 800e82c:	079b      	lsls	r3, r3, #30
 800e82e:	d413      	bmi.n	800e858 <_printf_i+0x23c>
 800e830:	68e0      	ldr	r0, [r4, #12]
 800e832:	9b03      	ldr	r3, [sp, #12]
 800e834:	4298      	cmp	r0, r3
 800e836:	bfb8      	it	lt
 800e838:	4618      	movlt	r0, r3
 800e83a:	e7a4      	b.n	800e786 <_printf_i+0x16a>
 800e83c:	2301      	movs	r3, #1
 800e83e:	4632      	mov	r2, r6
 800e840:	4649      	mov	r1, r9
 800e842:	4640      	mov	r0, r8
 800e844:	47d0      	blx	sl
 800e846:	3001      	adds	r0, #1
 800e848:	d09b      	beq.n	800e782 <_printf_i+0x166>
 800e84a:	3501      	adds	r5, #1
 800e84c:	68e3      	ldr	r3, [r4, #12]
 800e84e:	9903      	ldr	r1, [sp, #12]
 800e850:	1a5b      	subs	r3, r3, r1
 800e852:	42ab      	cmp	r3, r5
 800e854:	dcf2      	bgt.n	800e83c <_printf_i+0x220>
 800e856:	e7eb      	b.n	800e830 <_printf_i+0x214>
 800e858:	2500      	movs	r5, #0
 800e85a:	f104 0619 	add.w	r6, r4, #25
 800e85e:	e7f5      	b.n	800e84c <_printf_i+0x230>
 800e860:	08012502 	.word	0x08012502
 800e864:	08012513 	.word	0x08012513

0800e868 <siprintf>:
 800e868:	b40e      	push	{r1, r2, r3}
 800e86a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e86e:	b500      	push	{lr}
 800e870:	b09c      	sub	sp, #112	; 0x70
 800e872:	ab1d      	add	r3, sp, #116	; 0x74
 800e874:	9002      	str	r0, [sp, #8]
 800e876:	9006      	str	r0, [sp, #24]
 800e878:	9107      	str	r1, [sp, #28]
 800e87a:	9104      	str	r1, [sp, #16]
 800e87c:	4808      	ldr	r0, [pc, #32]	; (800e8a0 <siprintf+0x38>)
 800e87e:	4909      	ldr	r1, [pc, #36]	; (800e8a4 <siprintf+0x3c>)
 800e880:	f853 2b04 	ldr.w	r2, [r3], #4
 800e884:	9105      	str	r1, [sp, #20]
 800e886:	6800      	ldr	r0, [r0, #0]
 800e888:	a902      	add	r1, sp, #8
 800e88a:	9301      	str	r3, [sp, #4]
 800e88c:	f002 feca 	bl	8011624 <_svfiprintf_r>
 800e890:	2200      	movs	r2, #0
 800e892:	9b02      	ldr	r3, [sp, #8]
 800e894:	701a      	strb	r2, [r3, #0]
 800e896:	b01c      	add	sp, #112	; 0x70
 800e898:	f85d eb04 	ldr.w	lr, [sp], #4
 800e89c:	b003      	add	sp, #12
 800e89e:	4770      	bx	lr
 800e8a0:	20000834 	.word	0x20000834
 800e8a4:	ffff0208 	.word	0xffff0208

0800e8a8 <strcpy>:
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8ae:	f803 2b01 	strb.w	r2, [r3], #1
 800e8b2:	2a00      	cmp	r2, #0
 800e8b4:	d1f9      	bne.n	800e8aa <strcpy+0x2>
 800e8b6:	4770      	bx	lr

0800e8b8 <sulp>:
 800e8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8bc:	460f      	mov	r7, r1
 800e8be:	4690      	mov	r8, r2
 800e8c0:	f002 fc1c 	bl	80110fc <__ulp>
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	460d      	mov	r5, r1
 800e8c8:	f1b8 0f00 	cmp.w	r8, #0
 800e8cc:	d011      	beq.n	800e8f2 <sulp+0x3a>
 800e8ce:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800e8d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	dd0b      	ble.n	800e8f2 <sulp+0x3a>
 800e8da:	2400      	movs	r4, #0
 800e8dc:	051b      	lsls	r3, r3, #20
 800e8de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e8e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e8e6:	4622      	mov	r2, r4
 800e8e8:	462b      	mov	r3, r5
 800e8ea:	f7f1 fe17 	bl	800051c <__aeabi_dmul>
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	460d      	mov	r5, r1
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8fa:	0000      	movs	r0, r0
 800e8fc:	0000      	movs	r0, r0
	...

0800e900 <_strtod_l>:
 800e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	469b      	mov	fp, r3
 800e906:	2300      	movs	r3, #0
 800e908:	b09f      	sub	sp, #124	; 0x7c
 800e90a:	931a      	str	r3, [sp, #104]	; 0x68
 800e90c:	4b9e      	ldr	r3, [pc, #632]	; (800eb88 <_strtod_l+0x288>)
 800e90e:	4682      	mov	sl, r0
 800e910:	681f      	ldr	r7, [r3, #0]
 800e912:	460e      	mov	r6, r1
 800e914:	4638      	mov	r0, r7
 800e916:	9215      	str	r2, [sp, #84]	; 0x54
 800e918:	f7f1 fc3c 	bl	8000194 <strlen>
 800e91c:	f04f 0800 	mov.w	r8, #0
 800e920:	4604      	mov	r4, r0
 800e922:	f04f 0900 	mov.w	r9, #0
 800e926:	9619      	str	r6, [sp, #100]	; 0x64
 800e928:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e92a:	781a      	ldrb	r2, [r3, #0]
 800e92c:	2a2b      	cmp	r2, #43	; 0x2b
 800e92e:	d04c      	beq.n	800e9ca <_strtod_l+0xca>
 800e930:	d83a      	bhi.n	800e9a8 <_strtod_l+0xa8>
 800e932:	2a0d      	cmp	r2, #13
 800e934:	d833      	bhi.n	800e99e <_strtod_l+0x9e>
 800e936:	2a08      	cmp	r2, #8
 800e938:	d833      	bhi.n	800e9a2 <_strtod_l+0xa2>
 800e93a:	2a00      	cmp	r2, #0
 800e93c:	d03d      	beq.n	800e9ba <_strtod_l+0xba>
 800e93e:	2300      	movs	r3, #0
 800e940:	930a      	str	r3, [sp, #40]	; 0x28
 800e942:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800e944:	782b      	ldrb	r3, [r5, #0]
 800e946:	2b30      	cmp	r3, #48	; 0x30
 800e948:	f040 80aa 	bne.w	800eaa0 <_strtod_l+0x1a0>
 800e94c:	786b      	ldrb	r3, [r5, #1]
 800e94e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e952:	2b58      	cmp	r3, #88	; 0x58
 800e954:	d166      	bne.n	800ea24 <_strtod_l+0x124>
 800e956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e958:	4650      	mov	r0, sl
 800e95a:	9301      	str	r3, [sp, #4]
 800e95c:	ab1a      	add	r3, sp, #104	; 0x68
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	4a8a      	ldr	r2, [pc, #552]	; (800eb8c <_strtod_l+0x28c>)
 800e962:	f8cd b008 	str.w	fp, [sp, #8]
 800e966:	ab1b      	add	r3, sp, #108	; 0x6c
 800e968:	a919      	add	r1, sp, #100	; 0x64
 800e96a:	f001 fd2d 	bl	80103c8 <__gethex>
 800e96e:	f010 0607 	ands.w	r6, r0, #7
 800e972:	4604      	mov	r4, r0
 800e974:	d005      	beq.n	800e982 <_strtod_l+0x82>
 800e976:	2e06      	cmp	r6, #6
 800e978:	d129      	bne.n	800e9ce <_strtod_l+0xce>
 800e97a:	2300      	movs	r3, #0
 800e97c:	3501      	adds	r5, #1
 800e97e:	9519      	str	r5, [sp, #100]	; 0x64
 800e980:	930a      	str	r3, [sp, #40]	; 0x28
 800e982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e984:	2b00      	cmp	r3, #0
 800e986:	f040 858a 	bne.w	800f49e <_strtod_l+0xb9e>
 800e98a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e98c:	b1d3      	cbz	r3, 800e9c4 <_strtod_l+0xc4>
 800e98e:	4642      	mov	r2, r8
 800e990:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e994:	4610      	mov	r0, r2
 800e996:	4619      	mov	r1, r3
 800e998:	b01f      	add	sp, #124	; 0x7c
 800e99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e99e:	2a20      	cmp	r2, #32
 800e9a0:	d1cd      	bne.n	800e93e <_strtod_l+0x3e>
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	9319      	str	r3, [sp, #100]	; 0x64
 800e9a6:	e7bf      	b.n	800e928 <_strtod_l+0x28>
 800e9a8:	2a2d      	cmp	r2, #45	; 0x2d
 800e9aa:	d1c8      	bne.n	800e93e <_strtod_l+0x3e>
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	920a      	str	r2, [sp, #40]	; 0x28
 800e9b0:	1c5a      	adds	r2, r3, #1
 800e9b2:	9219      	str	r2, [sp, #100]	; 0x64
 800e9b4:	785b      	ldrb	r3, [r3, #1]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d1c3      	bne.n	800e942 <_strtod_l+0x42>
 800e9ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9bc:	9619      	str	r6, [sp, #100]	; 0x64
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f040 856b 	bne.w	800f49a <_strtod_l+0xb9a>
 800e9c4:	4642      	mov	r2, r8
 800e9c6:	464b      	mov	r3, r9
 800e9c8:	e7e4      	b.n	800e994 <_strtod_l+0x94>
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	e7ef      	b.n	800e9ae <_strtod_l+0xae>
 800e9ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e9d0:	b13a      	cbz	r2, 800e9e2 <_strtod_l+0xe2>
 800e9d2:	2135      	movs	r1, #53	; 0x35
 800e9d4:	a81c      	add	r0, sp, #112	; 0x70
 800e9d6:	f002 fc95 	bl	8011304 <__copybits>
 800e9da:	4650      	mov	r0, sl
 800e9dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e9de:	f002 f85d 	bl	8010a9c <_Bfree>
 800e9e2:	3e01      	subs	r6, #1
 800e9e4:	2e04      	cmp	r6, #4
 800e9e6:	d806      	bhi.n	800e9f6 <_strtod_l+0xf6>
 800e9e8:	e8df f006 	tbb	[pc, r6]
 800e9ec:	1714030a 	.word	0x1714030a
 800e9f0:	0a          	.byte	0x0a
 800e9f1:	00          	.byte	0x00
 800e9f2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800e9f6:	0721      	lsls	r1, r4, #28
 800e9f8:	d5c3      	bpl.n	800e982 <_strtod_l+0x82>
 800e9fa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e9fe:	e7c0      	b.n	800e982 <_strtod_l+0x82>
 800ea00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ea02:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ea06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ea0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ea0e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ea12:	e7f0      	b.n	800e9f6 <_strtod_l+0xf6>
 800ea14:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800eb90 <_strtod_l+0x290>
 800ea18:	e7ed      	b.n	800e9f6 <_strtod_l+0xf6>
 800ea1a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ea1e:	f04f 38ff 	mov.w	r8, #4294967295
 800ea22:	e7e8      	b.n	800e9f6 <_strtod_l+0xf6>
 800ea24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea26:	1c5a      	adds	r2, r3, #1
 800ea28:	9219      	str	r2, [sp, #100]	; 0x64
 800ea2a:	785b      	ldrb	r3, [r3, #1]
 800ea2c:	2b30      	cmp	r3, #48	; 0x30
 800ea2e:	d0f9      	beq.n	800ea24 <_strtod_l+0x124>
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d0a6      	beq.n	800e982 <_strtod_l+0x82>
 800ea34:	2301      	movs	r3, #1
 800ea36:	9307      	str	r3, [sp, #28]
 800ea38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea3a:	220a      	movs	r2, #10
 800ea3c:	9308      	str	r3, [sp, #32]
 800ea3e:	2300      	movs	r3, #0
 800ea40:	469b      	mov	fp, r3
 800ea42:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ea46:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ea48:	7805      	ldrb	r5, [r0, #0]
 800ea4a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ea4e:	b2d9      	uxtb	r1, r3
 800ea50:	2909      	cmp	r1, #9
 800ea52:	d927      	bls.n	800eaa4 <_strtod_l+0x1a4>
 800ea54:	4622      	mov	r2, r4
 800ea56:	4639      	mov	r1, r7
 800ea58:	f003 f852 	bl	8011b00 <strncmp>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d033      	beq.n	800eac8 <_strtod_l+0x1c8>
 800ea60:	2000      	movs	r0, #0
 800ea62:	462a      	mov	r2, r5
 800ea64:	465c      	mov	r4, fp
 800ea66:	4603      	mov	r3, r0
 800ea68:	9004      	str	r0, [sp, #16]
 800ea6a:	2a65      	cmp	r2, #101	; 0x65
 800ea6c:	d001      	beq.n	800ea72 <_strtod_l+0x172>
 800ea6e:	2a45      	cmp	r2, #69	; 0x45
 800ea70:	d114      	bne.n	800ea9c <_strtod_l+0x19c>
 800ea72:	b91c      	cbnz	r4, 800ea7c <_strtod_l+0x17c>
 800ea74:	9a07      	ldr	r2, [sp, #28]
 800ea76:	4302      	orrs	r2, r0
 800ea78:	d09f      	beq.n	800e9ba <_strtod_l+0xba>
 800ea7a:	2400      	movs	r4, #0
 800ea7c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ea7e:	1c72      	adds	r2, r6, #1
 800ea80:	9219      	str	r2, [sp, #100]	; 0x64
 800ea82:	7872      	ldrb	r2, [r6, #1]
 800ea84:	2a2b      	cmp	r2, #43	; 0x2b
 800ea86:	d079      	beq.n	800eb7c <_strtod_l+0x27c>
 800ea88:	2a2d      	cmp	r2, #45	; 0x2d
 800ea8a:	f000 8083 	beq.w	800eb94 <_strtod_l+0x294>
 800ea8e:	2700      	movs	r7, #0
 800ea90:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ea94:	2909      	cmp	r1, #9
 800ea96:	f240 8083 	bls.w	800eba0 <_strtod_l+0x2a0>
 800ea9a:	9619      	str	r6, [sp, #100]	; 0x64
 800ea9c:	2500      	movs	r5, #0
 800ea9e:	e09f      	b.n	800ebe0 <_strtod_l+0x2e0>
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	e7c8      	b.n	800ea36 <_strtod_l+0x136>
 800eaa4:	f1bb 0f08 	cmp.w	fp, #8
 800eaa8:	bfd5      	itete	le
 800eaaa:	9906      	ldrle	r1, [sp, #24]
 800eaac:	9905      	ldrgt	r1, [sp, #20]
 800eaae:	fb02 3301 	mlale	r3, r2, r1, r3
 800eab2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800eab6:	f100 0001 	add.w	r0, r0, #1
 800eaba:	bfd4      	ite	le
 800eabc:	9306      	strle	r3, [sp, #24]
 800eabe:	9305      	strgt	r3, [sp, #20]
 800eac0:	f10b 0b01 	add.w	fp, fp, #1
 800eac4:	9019      	str	r0, [sp, #100]	; 0x64
 800eac6:	e7be      	b.n	800ea46 <_strtod_l+0x146>
 800eac8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eaca:	191a      	adds	r2, r3, r4
 800eacc:	9219      	str	r2, [sp, #100]	; 0x64
 800eace:	5d1a      	ldrb	r2, [r3, r4]
 800ead0:	f1bb 0f00 	cmp.w	fp, #0
 800ead4:	d036      	beq.n	800eb44 <_strtod_l+0x244>
 800ead6:	465c      	mov	r4, fp
 800ead8:	9004      	str	r0, [sp, #16]
 800eada:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800eade:	2b09      	cmp	r3, #9
 800eae0:	d912      	bls.n	800eb08 <_strtod_l+0x208>
 800eae2:	2301      	movs	r3, #1
 800eae4:	e7c1      	b.n	800ea6a <_strtod_l+0x16a>
 800eae6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eae8:	3001      	adds	r0, #1
 800eaea:	1c5a      	adds	r2, r3, #1
 800eaec:	9219      	str	r2, [sp, #100]	; 0x64
 800eaee:	785a      	ldrb	r2, [r3, #1]
 800eaf0:	2a30      	cmp	r2, #48	; 0x30
 800eaf2:	d0f8      	beq.n	800eae6 <_strtod_l+0x1e6>
 800eaf4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800eaf8:	2b08      	cmp	r3, #8
 800eafa:	f200 84d5 	bhi.w	800f4a8 <_strtod_l+0xba8>
 800eafe:	9004      	str	r0, [sp, #16]
 800eb00:	2000      	movs	r0, #0
 800eb02:	4604      	mov	r4, r0
 800eb04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb06:	9308      	str	r3, [sp, #32]
 800eb08:	3a30      	subs	r2, #48	; 0x30
 800eb0a:	f100 0301 	add.w	r3, r0, #1
 800eb0e:	d013      	beq.n	800eb38 <_strtod_l+0x238>
 800eb10:	9904      	ldr	r1, [sp, #16]
 800eb12:	1905      	adds	r5, r0, r4
 800eb14:	4419      	add	r1, r3
 800eb16:	9104      	str	r1, [sp, #16]
 800eb18:	4623      	mov	r3, r4
 800eb1a:	210a      	movs	r1, #10
 800eb1c:	42ab      	cmp	r3, r5
 800eb1e:	d113      	bne.n	800eb48 <_strtod_l+0x248>
 800eb20:	1823      	adds	r3, r4, r0
 800eb22:	2b08      	cmp	r3, #8
 800eb24:	f104 0401 	add.w	r4, r4, #1
 800eb28:	4404      	add	r4, r0
 800eb2a:	dc1b      	bgt.n	800eb64 <_strtod_l+0x264>
 800eb2c:	230a      	movs	r3, #10
 800eb2e:	9906      	ldr	r1, [sp, #24]
 800eb30:	fb03 2301 	mla	r3, r3, r1, r2
 800eb34:	9306      	str	r3, [sp, #24]
 800eb36:	2300      	movs	r3, #0
 800eb38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	1c51      	adds	r1, r2, #1
 800eb3e:	9119      	str	r1, [sp, #100]	; 0x64
 800eb40:	7852      	ldrb	r2, [r2, #1]
 800eb42:	e7ca      	b.n	800eada <_strtod_l+0x1da>
 800eb44:	4658      	mov	r0, fp
 800eb46:	e7d3      	b.n	800eaf0 <_strtod_l+0x1f0>
 800eb48:	2b08      	cmp	r3, #8
 800eb4a:	dc04      	bgt.n	800eb56 <_strtod_l+0x256>
 800eb4c:	9f06      	ldr	r7, [sp, #24]
 800eb4e:	434f      	muls	r7, r1
 800eb50:	9706      	str	r7, [sp, #24]
 800eb52:	3301      	adds	r3, #1
 800eb54:	e7e2      	b.n	800eb1c <_strtod_l+0x21c>
 800eb56:	1c5f      	adds	r7, r3, #1
 800eb58:	2f10      	cmp	r7, #16
 800eb5a:	bfde      	ittt	le
 800eb5c:	9f05      	ldrle	r7, [sp, #20]
 800eb5e:	434f      	mulle	r7, r1
 800eb60:	9705      	strle	r7, [sp, #20]
 800eb62:	e7f6      	b.n	800eb52 <_strtod_l+0x252>
 800eb64:	2c10      	cmp	r4, #16
 800eb66:	bfdf      	itttt	le
 800eb68:	230a      	movle	r3, #10
 800eb6a:	9905      	ldrle	r1, [sp, #20]
 800eb6c:	fb03 2301 	mlale	r3, r3, r1, r2
 800eb70:	9305      	strle	r3, [sp, #20]
 800eb72:	e7e0      	b.n	800eb36 <_strtod_l+0x236>
 800eb74:	2300      	movs	r3, #0
 800eb76:	9304      	str	r3, [sp, #16]
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e77b      	b.n	800ea74 <_strtod_l+0x174>
 800eb7c:	2700      	movs	r7, #0
 800eb7e:	1cb2      	adds	r2, r6, #2
 800eb80:	9219      	str	r2, [sp, #100]	; 0x64
 800eb82:	78b2      	ldrb	r2, [r6, #2]
 800eb84:	e784      	b.n	800ea90 <_strtod_l+0x190>
 800eb86:	bf00      	nop
 800eb88:	08012708 	.word	0x08012708
 800eb8c:	08012524 	.word	0x08012524
 800eb90:	7ff00000 	.word	0x7ff00000
 800eb94:	2701      	movs	r7, #1
 800eb96:	e7f2      	b.n	800eb7e <_strtod_l+0x27e>
 800eb98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eb9a:	1c51      	adds	r1, r2, #1
 800eb9c:	9119      	str	r1, [sp, #100]	; 0x64
 800eb9e:	7852      	ldrb	r2, [r2, #1]
 800eba0:	2a30      	cmp	r2, #48	; 0x30
 800eba2:	d0f9      	beq.n	800eb98 <_strtod_l+0x298>
 800eba4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800eba8:	2908      	cmp	r1, #8
 800ebaa:	f63f af77 	bhi.w	800ea9c <_strtod_l+0x19c>
 800ebae:	f04f 0e0a 	mov.w	lr, #10
 800ebb2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ebb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ebb8:	9209      	str	r2, [sp, #36]	; 0x24
 800ebba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ebbc:	1c51      	adds	r1, r2, #1
 800ebbe:	9119      	str	r1, [sp, #100]	; 0x64
 800ebc0:	7852      	ldrb	r2, [r2, #1]
 800ebc2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ebc6:	2d09      	cmp	r5, #9
 800ebc8:	d935      	bls.n	800ec36 <_strtod_l+0x336>
 800ebca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ebcc:	1b49      	subs	r1, r1, r5
 800ebce:	2908      	cmp	r1, #8
 800ebd0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ebd4:	dc02      	bgt.n	800ebdc <_strtod_l+0x2dc>
 800ebd6:	4565      	cmp	r5, ip
 800ebd8:	bfa8      	it	ge
 800ebda:	4665      	movge	r5, ip
 800ebdc:	b107      	cbz	r7, 800ebe0 <_strtod_l+0x2e0>
 800ebde:	426d      	negs	r5, r5
 800ebe0:	2c00      	cmp	r4, #0
 800ebe2:	d14c      	bne.n	800ec7e <_strtod_l+0x37e>
 800ebe4:	9907      	ldr	r1, [sp, #28]
 800ebe6:	4301      	orrs	r1, r0
 800ebe8:	f47f aecb 	bne.w	800e982 <_strtod_l+0x82>
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f47f aee4 	bne.w	800e9ba <_strtod_l+0xba>
 800ebf2:	2a69      	cmp	r2, #105	; 0x69
 800ebf4:	d026      	beq.n	800ec44 <_strtod_l+0x344>
 800ebf6:	dc23      	bgt.n	800ec40 <_strtod_l+0x340>
 800ebf8:	2a49      	cmp	r2, #73	; 0x49
 800ebfa:	d023      	beq.n	800ec44 <_strtod_l+0x344>
 800ebfc:	2a4e      	cmp	r2, #78	; 0x4e
 800ebfe:	f47f aedc 	bne.w	800e9ba <_strtod_l+0xba>
 800ec02:	499d      	ldr	r1, [pc, #628]	; (800ee78 <_strtod_l+0x578>)
 800ec04:	a819      	add	r0, sp, #100	; 0x64
 800ec06:	f001 fe2d 	bl	8010864 <__match>
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	f43f aed5 	beq.w	800e9ba <_strtod_l+0xba>
 800ec10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	2b28      	cmp	r3, #40	; 0x28
 800ec16:	d12c      	bne.n	800ec72 <_strtod_l+0x372>
 800ec18:	4998      	ldr	r1, [pc, #608]	; (800ee7c <_strtod_l+0x57c>)
 800ec1a:	aa1c      	add	r2, sp, #112	; 0x70
 800ec1c:	a819      	add	r0, sp, #100	; 0x64
 800ec1e:	f001 fe35 	bl	801088c <__hexnan>
 800ec22:	2805      	cmp	r0, #5
 800ec24:	d125      	bne.n	800ec72 <_strtod_l+0x372>
 800ec26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec28:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ec2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ec30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ec34:	e6a5      	b.n	800e982 <_strtod_l+0x82>
 800ec36:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ec3a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ec3e:	e7bc      	b.n	800ebba <_strtod_l+0x2ba>
 800ec40:	2a6e      	cmp	r2, #110	; 0x6e
 800ec42:	e7dc      	b.n	800ebfe <_strtod_l+0x2fe>
 800ec44:	498e      	ldr	r1, [pc, #568]	; (800ee80 <_strtod_l+0x580>)
 800ec46:	a819      	add	r0, sp, #100	; 0x64
 800ec48:	f001 fe0c 	bl	8010864 <__match>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	f43f aeb4 	beq.w	800e9ba <_strtod_l+0xba>
 800ec52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec54:	498b      	ldr	r1, [pc, #556]	; (800ee84 <_strtod_l+0x584>)
 800ec56:	3b01      	subs	r3, #1
 800ec58:	a819      	add	r0, sp, #100	; 0x64
 800ec5a:	9319      	str	r3, [sp, #100]	; 0x64
 800ec5c:	f001 fe02 	bl	8010864 <__match>
 800ec60:	b910      	cbnz	r0, 800ec68 <_strtod_l+0x368>
 800ec62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec64:	3301      	adds	r3, #1
 800ec66:	9319      	str	r3, [sp, #100]	; 0x64
 800ec68:	f04f 0800 	mov.w	r8, #0
 800ec6c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800ee88 <_strtod_l+0x588>
 800ec70:	e687      	b.n	800e982 <_strtod_l+0x82>
 800ec72:	4886      	ldr	r0, [pc, #536]	; (800ee8c <_strtod_l+0x58c>)
 800ec74:	f002 ff2e 	bl	8011ad4 <nan>
 800ec78:	4680      	mov	r8, r0
 800ec7a:	4689      	mov	r9, r1
 800ec7c:	e681      	b.n	800e982 <_strtod_l+0x82>
 800ec7e:	9b04      	ldr	r3, [sp, #16]
 800ec80:	f1bb 0f00 	cmp.w	fp, #0
 800ec84:	bf08      	it	eq
 800ec86:	46a3      	moveq	fp, r4
 800ec88:	1aeb      	subs	r3, r5, r3
 800ec8a:	2c10      	cmp	r4, #16
 800ec8c:	9806      	ldr	r0, [sp, #24]
 800ec8e:	4626      	mov	r6, r4
 800ec90:	9307      	str	r3, [sp, #28]
 800ec92:	bfa8      	it	ge
 800ec94:	2610      	movge	r6, #16
 800ec96:	f7f1 fbc7 	bl	8000428 <__aeabi_ui2d>
 800ec9a:	2c09      	cmp	r4, #9
 800ec9c:	4680      	mov	r8, r0
 800ec9e:	4689      	mov	r9, r1
 800eca0:	dd13      	ble.n	800ecca <_strtod_l+0x3ca>
 800eca2:	4b7b      	ldr	r3, [pc, #492]	; (800ee90 <_strtod_l+0x590>)
 800eca4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eca8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ecac:	f7f1 fc36 	bl	800051c <__aeabi_dmul>
 800ecb0:	4680      	mov	r8, r0
 800ecb2:	9805      	ldr	r0, [sp, #20]
 800ecb4:	4689      	mov	r9, r1
 800ecb6:	f7f1 fbb7 	bl	8000428 <__aeabi_ui2d>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	4640      	mov	r0, r8
 800ecc0:	4649      	mov	r1, r9
 800ecc2:	f7f1 fa75 	bl	80001b0 <__adddf3>
 800ecc6:	4680      	mov	r8, r0
 800ecc8:	4689      	mov	r9, r1
 800ecca:	2c0f      	cmp	r4, #15
 800eccc:	dc36      	bgt.n	800ed3c <_strtod_l+0x43c>
 800ecce:	9b07      	ldr	r3, [sp, #28]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f43f ae56 	beq.w	800e982 <_strtod_l+0x82>
 800ecd6:	dd22      	ble.n	800ed1e <_strtod_l+0x41e>
 800ecd8:	2b16      	cmp	r3, #22
 800ecda:	dc09      	bgt.n	800ecf0 <_strtod_l+0x3f0>
 800ecdc:	496c      	ldr	r1, [pc, #432]	; (800ee90 <_strtod_l+0x590>)
 800ecde:	4642      	mov	r2, r8
 800ece0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ece4:	464b      	mov	r3, r9
 800ece6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecea:	f7f1 fc17 	bl	800051c <__aeabi_dmul>
 800ecee:	e7c3      	b.n	800ec78 <_strtod_l+0x378>
 800ecf0:	9a07      	ldr	r2, [sp, #28]
 800ecf2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	db20      	blt.n	800ed3c <_strtod_l+0x43c>
 800ecfa:	4d65      	ldr	r5, [pc, #404]	; (800ee90 <_strtod_l+0x590>)
 800ecfc:	f1c4 040f 	rsb	r4, r4, #15
 800ed00:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ed04:	4642      	mov	r2, r8
 800ed06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed0a:	464b      	mov	r3, r9
 800ed0c:	f7f1 fc06 	bl	800051c <__aeabi_dmul>
 800ed10:	9b07      	ldr	r3, [sp, #28]
 800ed12:	1b1c      	subs	r4, r3, r4
 800ed14:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ed18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed1c:	e7e5      	b.n	800ecea <_strtod_l+0x3ea>
 800ed1e:	9b07      	ldr	r3, [sp, #28]
 800ed20:	3316      	adds	r3, #22
 800ed22:	db0b      	blt.n	800ed3c <_strtod_l+0x43c>
 800ed24:	9b04      	ldr	r3, [sp, #16]
 800ed26:	4640      	mov	r0, r8
 800ed28:	1b5d      	subs	r5, r3, r5
 800ed2a:	4b59      	ldr	r3, [pc, #356]	; (800ee90 <_strtod_l+0x590>)
 800ed2c:	4649      	mov	r1, r9
 800ed2e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ed32:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed36:	f7f1 fd1b 	bl	8000770 <__aeabi_ddiv>
 800ed3a:	e79d      	b.n	800ec78 <_strtod_l+0x378>
 800ed3c:	9b07      	ldr	r3, [sp, #28]
 800ed3e:	1ba6      	subs	r6, r4, r6
 800ed40:	441e      	add	r6, r3
 800ed42:	2e00      	cmp	r6, #0
 800ed44:	dd74      	ble.n	800ee30 <_strtod_l+0x530>
 800ed46:	f016 030f 	ands.w	r3, r6, #15
 800ed4a:	d00a      	beq.n	800ed62 <_strtod_l+0x462>
 800ed4c:	4950      	ldr	r1, [pc, #320]	; (800ee90 <_strtod_l+0x590>)
 800ed4e:	4642      	mov	r2, r8
 800ed50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed58:	464b      	mov	r3, r9
 800ed5a:	f7f1 fbdf 	bl	800051c <__aeabi_dmul>
 800ed5e:	4680      	mov	r8, r0
 800ed60:	4689      	mov	r9, r1
 800ed62:	f036 060f 	bics.w	r6, r6, #15
 800ed66:	d052      	beq.n	800ee0e <_strtod_l+0x50e>
 800ed68:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800ed6c:	dd27      	ble.n	800edbe <_strtod_l+0x4be>
 800ed6e:	f04f 0b00 	mov.w	fp, #0
 800ed72:	f8cd b010 	str.w	fp, [sp, #16]
 800ed76:	f8cd b020 	str.w	fp, [sp, #32]
 800ed7a:	f8cd b018 	str.w	fp, [sp, #24]
 800ed7e:	2322      	movs	r3, #34	; 0x22
 800ed80:	f04f 0800 	mov.w	r8, #0
 800ed84:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800ee88 <_strtod_l+0x588>
 800ed88:	f8ca 3000 	str.w	r3, [sl]
 800ed8c:	9b08      	ldr	r3, [sp, #32]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f43f adf7 	beq.w	800e982 <_strtod_l+0x82>
 800ed94:	4650      	mov	r0, sl
 800ed96:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ed98:	f001 fe80 	bl	8010a9c <_Bfree>
 800ed9c:	4650      	mov	r0, sl
 800ed9e:	9906      	ldr	r1, [sp, #24]
 800eda0:	f001 fe7c 	bl	8010a9c <_Bfree>
 800eda4:	4650      	mov	r0, sl
 800eda6:	9904      	ldr	r1, [sp, #16]
 800eda8:	f001 fe78 	bl	8010a9c <_Bfree>
 800edac:	4650      	mov	r0, sl
 800edae:	9908      	ldr	r1, [sp, #32]
 800edb0:	f001 fe74 	bl	8010a9c <_Bfree>
 800edb4:	4659      	mov	r1, fp
 800edb6:	4650      	mov	r0, sl
 800edb8:	f001 fe70 	bl	8010a9c <_Bfree>
 800edbc:	e5e1      	b.n	800e982 <_strtod_l+0x82>
 800edbe:	4b35      	ldr	r3, [pc, #212]	; (800ee94 <_strtod_l+0x594>)
 800edc0:	4640      	mov	r0, r8
 800edc2:	9305      	str	r3, [sp, #20]
 800edc4:	2300      	movs	r3, #0
 800edc6:	4649      	mov	r1, r9
 800edc8:	461f      	mov	r7, r3
 800edca:	1136      	asrs	r6, r6, #4
 800edcc:	2e01      	cmp	r6, #1
 800edce:	dc21      	bgt.n	800ee14 <_strtod_l+0x514>
 800edd0:	b10b      	cbz	r3, 800edd6 <_strtod_l+0x4d6>
 800edd2:	4680      	mov	r8, r0
 800edd4:	4689      	mov	r9, r1
 800edd6:	4b2f      	ldr	r3, [pc, #188]	; (800ee94 <_strtod_l+0x594>)
 800edd8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800eddc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ede0:	4642      	mov	r2, r8
 800ede2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ede6:	464b      	mov	r3, r9
 800ede8:	f7f1 fb98 	bl	800051c <__aeabi_dmul>
 800edec:	4b26      	ldr	r3, [pc, #152]	; (800ee88 <_strtod_l+0x588>)
 800edee:	460a      	mov	r2, r1
 800edf0:	400b      	ands	r3, r1
 800edf2:	4929      	ldr	r1, [pc, #164]	; (800ee98 <_strtod_l+0x598>)
 800edf4:	4680      	mov	r8, r0
 800edf6:	428b      	cmp	r3, r1
 800edf8:	d8b9      	bhi.n	800ed6e <_strtod_l+0x46e>
 800edfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800edfe:	428b      	cmp	r3, r1
 800ee00:	bf86      	itte	hi
 800ee02:	f04f 38ff 	movhi.w	r8, #4294967295
 800ee06:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800ee9c <_strtod_l+0x59c>
 800ee0a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ee0e:	2300      	movs	r3, #0
 800ee10:	9305      	str	r3, [sp, #20]
 800ee12:	e07f      	b.n	800ef14 <_strtod_l+0x614>
 800ee14:	07f2      	lsls	r2, r6, #31
 800ee16:	d505      	bpl.n	800ee24 <_strtod_l+0x524>
 800ee18:	9b05      	ldr	r3, [sp, #20]
 800ee1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1e:	f7f1 fb7d 	bl	800051c <__aeabi_dmul>
 800ee22:	2301      	movs	r3, #1
 800ee24:	9a05      	ldr	r2, [sp, #20]
 800ee26:	3701      	adds	r7, #1
 800ee28:	3208      	adds	r2, #8
 800ee2a:	1076      	asrs	r6, r6, #1
 800ee2c:	9205      	str	r2, [sp, #20]
 800ee2e:	e7cd      	b.n	800edcc <_strtod_l+0x4cc>
 800ee30:	d0ed      	beq.n	800ee0e <_strtod_l+0x50e>
 800ee32:	4276      	negs	r6, r6
 800ee34:	f016 020f 	ands.w	r2, r6, #15
 800ee38:	d00a      	beq.n	800ee50 <_strtod_l+0x550>
 800ee3a:	4b15      	ldr	r3, [pc, #84]	; (800ee90 <_strtod_l+0x590>)
 800ee3c:	4640      	mov	r0, r8
 800ee3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee42:	4649      	mov	r1, r9
 800ee44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee48:	f7f1 fc92 	bl	8000770 <__aeabi_ddiv>
 800ee4c:	4680      	mov	r8, r0
 800ee4e:	4689      	mov	r9, r1
 800ee50:	1136      	asrs	r6, r6, #4
 800ee52:	d0dc      	beq.n	800ee0e <_strtod_l+0x50e>
 800ee54:	2e1f      	cmp	r6, #31
 800ee56:	dd23      	ble.n	800eea0 <_strtod_l+0x5a0>
 800ee58:	f04f 0b00 	mov.w	fp, #0
 800ee5c:	f8cd b010 	str.w	fp, [sp, #16]
 800ee60:	f8cd b020 	str.w	fp, [sp, #32]
 800ee64:	f8cd b018 	str.w	fp, [sp, #24]
 800ee68:	2322      	movs	r3, #34	; 0x22
 800ee6a:	f04f 0800 	mov.w	r8, #0
 800ee6e:	f04f 0900 	mov.w	r9, #0
 800ee72:	f8ca 3000 	str.w	r3, [sl]
 800ee76:	e789      	b.n	800ed8c <_strtod_l+0x48c>
 800ee78:	080124fd 	.word	0x080124fd
 800ee7c:	08012538 	.word	0x08012538
 800ee80:	080124f5 	.word	0x080124f5
 800ee84:	0801262b 	.word	0x0801262b
 800ee88:	7ff00000 	.word	0x7ff00000
 800ee8c:	08012627 	.word	0x08012627
 800ee90:	080127a0 	.word	0x080127a0
 800ee94:	08012778 	.word	0x08012778
 800ee98:	7ca00000 	.word	0x7ca00000
 800ee9c:	7fefffff 	.word	0x7fefffff
 800eea0:	f016 0310 	ands.w	r3, r6, #16
 800eea4:	bf18      	it	ne
 800eea6:	236a      	movne	r3, #106	; 0x6a
 800eea8:	4640      	mov	r0, r8
 800eeaa:	9305      	str	r3, [sp, #20]
 800eeac:	4649      	mov	r1, r9
 800eeae:	2300      	movs	r3, #0
 800eeb0:	4fb0      	ldr	r7, [pc, #704]	; (800f174 <_strtod_l+0x874>)
 800eeb2:	07f2      	lsls	r2, r6, #31
 800eeb4:	d504      	bpl.n	800eec0 <_strtod_l+0x5c0>
 800eeb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eeba:	f7f1 fb2f 	bl	800051c <__aeabi_dmul>
 800eebe:	2301      	movs	r3, #1
 800eec0:	1076      	asrs	r6, r6, #1
 800eec2:	f107 0708 	add.w	r7, r7, #8
 800eec6:	d1f4      	bne.n	800eeb2 <_strtod_l+0x5b2>
 800eec8:	b10b      	cbz	r3, 800eece <_strtod_l+0x5ce>
 800eeca:	4680      	mov	r8, r0
 800eecc:	4689      	mov	r9, r1
 800eece:	9b05      	ldr	r3, [sp, #20]
 800eed0:	b1c3      	cbz	r3, 800ef04 <_strtod_l+0x604>
 800eed2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800eed6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	4649      	mov	r1, r9
 800eede:	dd11      	ble.n	800ef04 <_strtod_l+0x604>
 800eee0:	2b1f      	cmp	r3, #31
 800eee2:	f340 8127 	ble.w	800f134 <_strtod_l+0x834>
 800eee6:	2b34      	cmp	r3, #52	; 0x34
 800eee8:	bfd8      	it	le
 800eeea:	f04f 33ff 	movle.w	r3, #4294967295
 800eeee:	f04f 0800 	mov.w	r8, #0
 800eef2:	bfcf      	iteee	gt
 800eef4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800eef8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800eefc:	fa03 f202 	lslle.w	r2, r3, r2
 800ef00:	ea02 0901 	andle.w	r9, r2, r1
 800ef04:	2200      	movs	r2, #0
 800ef06:	2300      	movs	r3, #0
 800ef08:	4640      	mov	r0, r8
 800ef0a:	4649      	mov	r1, r9
 800ef0c:	f7f1 fd6e 	bl	80009ec <__aeabi_dcmpeq>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d1a1      	bne.n	800ee58 <_strtod_l+0x558>
 800ef14:	9b06      	ldr	r3, [sp, #24]
 800ef16:	465a      	mov	r2, fp
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	4650      	mov	r0, sl
 800ef1c:	4623      	mov	r3, r4
 800ef1e:	9908      	ldr	r1, [sp, #32]
 800ef20:	f001 fe24 	bl	8010b6c <__s2b>
 800ef24:	9008      	str	r0, [sp, #32]
 800ef26:	2800      	cmp	r0, #0
 800ef28:	f43f af21 	beq.w	800ed6e <_strtod_l+0x46e>
 800ef2c:	9b04      	ldr	r3, [sp, #16]
 800ef2e:	f04f 0b00 	mov.w	fp, #0
 800ef32:	1b5d      	subs	r5, r3, r5
 800ef34:	9b07      	ldr	r3, [sp, #28]
 800ef36:	f8cd b010 	str.w	fp, [sp, #16]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	bfb4      	ite	lt
 800ef3e:	462b      	movlt	r3, r5
 800ef40:	2300      	movge	r3, #0
 800ef42:	930e      	str	r3, [sp, #56]	; 0x38
 800ef44:	9b07      	ldr	r3, [sp, #28]
 800ef46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ef4a:	9314      	str	r3, [sp, #80]	; 0x50
 800ef4c:	9b08      	ldr	r3, [sp, #32]
 800ef4e:	4650      	mov	r0, sl
 800ef50:	6859      	ldr	r1, [r3, #4]
 800ef52:	f001 fd63 	bl	8010a1c <_Balloc>
 800ef56:	9006      	str	r0, [sp, #24]
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	f43f af10 	beq.w	800ed7e <_strtod_l+0x47e>
 800ef5e:	9b08      	ldr	r3, [sp, #32]
 800ef60:	300c      	adds	r0, #12
 800ef62:	691a      	ldr	r2, [r3, #16]
 800ef64:	f103 010c 	add.w	r1, r3, #12
 800ef68:	3202      	adds	r2, #2
 800ef6a:	0092      	lsls	r2, r2, #2
 800ef6c:	f7ff f806 	bl	800df7c <memcpy>
 800ef70:	ab1c      	add	r3, sp, #112	; 0x70
 800ef72:	9301      	str	r3, [sp, #4]
 800ef74:	ab1b      	add	r3, sp, #108	; 0x6c
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	4642      	mov	r2, r8
 800ef7a:	464b      	mov	r3, r9
 800ef7c:	4650      	mov	r0, sl
 800ef7e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800ef82:	f002 f935 	bl	80111f0 <__d2b>
 800ef86:	901a      	str	r0, [sp, #104]	; 0x68
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	f43f aef8 	beq.w	800ed7e <_strtod_l+0x47e>
 800ef8e:	2101      	movs	r1, #1
 800ef90:	4650      	mov	r0, sl
 800ef92:	f001 fe83 	bl	8010c9c <__i2b>
 800ef96:	4603      	mov	r3, r0
 800ef98:	9004      	str	r0, [sp, #16]
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	f43f aeef 	beq.w	800ed7e <_strtod_l+0x47e>
 800efa0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800efa2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800efa4:	2d00      	cmp	r5, #0
 800efa6:	bfab      	itete	ge
 800efa8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800efaa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800efac:	18ee      	addge	r6, r5, r3
 800efae:	1b5c      	sublt	r4, r3, r5
 800efb0:	9b05      	ldr	r3, [sp, #20]
 800efb2:	bfa8      	it	ge
 800efb4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800efb6:	eba5 0503 	sub.w	r5, r5, r3
 800efba:	4415      	add	r5, r2
 800efbc:	4b6e      	ldr	r3, [pc, #440]	; (800f178 <_strtod_l+0x878>)
 800efbe:	f105 35ff 	add.w	r5, r5, #4294967295
 800efc2:	bfb8      	it	lt
 800efc4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800efc6:	429d      	cmp	r5, r3
 800efc8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800efcc:	f280 80c4 	bge.w	800f158 <_strtod_l+0x858>
 800efd0:	1b5b      	subs	r3, r3, r5
 800efd2:	2b1f      	cmp	r3, #31
 800efd4:	f04f 0701 	mov.w	r7, #1
 800efd8:	eba2 0203 	sub.w	r2, r2, r3
 800efdc:	f300 80b1 	bgt.w	800f142 <_strtod_l+0x842>
 800efe0:	2500      	movs	r5, #0
 800efe2:	fa07 f303 	lsl.w	r3, r7, r3
 800efe6:	930f      	str	r3, [sp, #60]	; 0x3c
 800efe8:	18b7      	adds	r7, r6, r2
 800efea:	9b05      	ldr	r3, [sp, #20]
 800efec:	42be      	cmp	r6, r7
 800efee:	4414      	add	r4, r2
 800eff0:	441c      	add	r4, r3
 800eff2:	4633      	mov	r3, r6
 800eff4:	bfa8      	it	ge
 800eff6:	463b      	movge	r3, r7
 800eff8:	42a3      	cmp	r3, r4
 800effa:	bfa8      	it	ge
 800effc:	4623      	movge	r3, r4
 800effe:	2b00      	cmp	r3, #0
 800f000:	bfc2      	ittt	gt
 800f002:	1aff      	subgt	r7, r7, r3
 800f004:	1ae4      	subgt	r4, r4, r3
 800f006:	1af6      	subgt	r6, r6, r3
 800f008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	dd17      	ble.n	800f03e <_strtod_l+0x73e>
 800f00e:	461a      	mov	r2, r3
 800f010:	4650      	mov	r0, sl
 800f012:	9904      	ldr	r1, [sp, #16]
 800f014:	f001 ff00 	bl	8010e18 <__pow5mult>
 800f018:	9004      	str	r0, [sp, #16]
 800f01a:	2800      	cmp	r0, #0
 800f01c:	f43f aeaf 	beq.w	800ed7e <_strtod_l+0x47e>
 800f020:	4601      	mov	r1, r0
 800f022:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f024:	4650      	mov	r0, sl
 800f026:	f001 fe4f 	bl	8010cc8 <__multiply>
 800f02a:	9009      	str	r0, [sp, #36]	; 0x24
 800f02c:	2800      	cmp	r0, #0
 800f02e:	f43f aea6 	beq.w	800ed7e <_strtod_l+0x47e>
 800f032:	4650      	mov	r0, sl
 800f034:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f036:	f001 fd31 	bl	8010a9c <_Bfree>
 800f03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f03c:	931a      	str	r3, [sp, #104]	; 0x68
 800f03e:	2f00      	cmp	r7, #0
 800f040:	f300 808e 	bgt.w	800f160 <_strtod_l+0x860>
 800f044:	9b07      	ldr	r3, [sp, #28]
 800f046:	2b00      	cmp	r3, #0
 800f048:	dd08      	ble.n	800f05c <_strtod_l+0x75c>
 800f04a:	4650      	mov	r0, sl
 800f04c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f04e:	9906      	ldr	r1, [sp, #24]
 800f050:	f001 fee2 	bl	8010e18 <__pow5mult>
 800f054:	9006      	str	r0, [sp, #24]
 800f056:	2800      	cmp	r0, #0
 800f058:	f43f ae91 	beq.w	800ed7e <_strtod_l+0x47e>
 800f05c:	2c00      	cmp	r4, #0
 800f05e:	dd08      	ble.n	800f072 <_strtod_l+0x772>
 800f060:	4622      	mov	r2, r4
 800f062:	4650      	mov	r0, sl
 800f064:	9906      	ldr	r1, [sp, #24]
 800f066:	f001 ff31 	bl	8010ecc <__lshift>
 800f06a:	9006      	str	r0, [sp, #24]
 800f06c:	2800      	cmp	r0, #0
 800f06e:	f43f ae86 	beq.w	800ed7e <_strtod_l+0x47e>
 800f072:	2e00      	cmp	r6, #0
 800f074:	dd08      	ble.n	800f088 <_strtod_l+0x788>
 800f076:	4632      	mov	r2, r6
 800f078:	4650      	mov	r0, sl
 800f07a:	9904      	ldr	r1, [sp, #16]
 800f07c:	f001 ff26 	bl	8010ecc <__lshift>
 800f080:	9004      	str	r0, [sp, #16]
 800f082:	2800      	cmp	r0, #0
 800f084:	f43f ae7b 	beq.w	800ed7e <_strtod_l+0x47e>
 800f088:	4650      	mov	r0, sl
 800f08a:	9a06      	ldr	r2, [sp, #24]
 800f08c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f08e:	f001 ffa9 	bl	8010fe4 <__mdiff>
 800f092:	4683      	mov	fp, r0
 800f094:	2800      	cmp	r0, #0
 800f096:	f43f ae72 	beq.w	800ed7e <_strtod_l+0x47e>
 800f09a:	2400      	movs	r4, #0
 800f09c:	68c3      	ldr	r3, [r0, #12]
 800f09e:	9904      	ldr	r1, [sp, #16]
 800f0a0:	60c4      	str	r4, [r0, #12]
 800f0a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0a4:	f001 ff82 	bl	8010fac <__mcmp>
 800f0a8:	42a0      	cmp	r0, r4
 800f0aa:	da6b      	bge.n	800f184 <_strtod_l+0x884>
 800f0ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0ae:	ea53 0308 	orrs.w	r3, r3, r8
 800f0b2:	f040 8091 	bne.w	800f1d8 <_strtod_l+0x8d8>
 800f0b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f040 808c 	bne.w	800f1d8 <_strtod_l+0x8d8>
 800f0c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f0c4:	0d1b      	lsrs	r3, r3, #20
 800f0c6:	051b      	lsls	r3, r3, #20
 800f0c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f0cc:	f240 8084 	bls.w	800f1d8 <_strtod_l+0x8d8>
 800f0d0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800f0d4:	b91b      	cbnz	r3, 800f0de <_strtod_l+0x7de>
 800f0d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	dd7c      	ble.n	800f1d8 <_strtod_l+0x8d8>
 800f0de:	4659      	mov	r1, fp
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	4650      	mov	r0, sl
 800f0e4:	f001 fef2 	bl	8010ecc <__lshift>
 800f0e8:	9904      	ldr	r1, [sp, #16]
 800f0ea:	4683      	mov	fp, r0
 800f0ec:	f001 ff5e 	bl	8010fac <__mcmp>
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	dd71      	ble.n	800f1d8 <_strtod_l+0x8d8>
 800f0f4:	9905      	ldr	r1, [sp, #20]
 800f0f6:	464b      	mov	r3, r9
 800f0f8:	4a20      	ldr	r2, [pc, #128]	; (800f17c <_strtod_l+0x87c>)
 800f0fa:	2900      	cmp	r1, #0
 800f0fc:	f000 808c 	beq.w	800f218 <_strtod_l+0x918>
 800f100:	ea02 0109 	and.w	r1, r2, r9
 800f104:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f108:	f300 8086 	bgt.w	800f218 <_strtod_l+0x918>
 800f10c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f110:	f77f aeaa 	ble.w	800ee68 <_strtod_l+0x568>
 800f114:	4640      	mov	r0, r8
 800f116:	4649      	mov	r1, r9
 800f118:	4b19      	ldr	r3, [pc, #100]	; (800f180 <_strtod_l+0x880>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	f7f1 f9fe 	bl	800051c <__aeabi_dmul>
 800f120:	460b      	mov	r3, r1
 800f122:	4303      	orrs	r3, r0
 800f124:	bf08      	it	eq
 800f126:	2322      	moveq	r3, #34	; 0x22
 800f128:	4680      	mov	r8, r0
 800f12a:	4689      	mov	r9, r1
 800f12c:	bf08      	it	eq
 800f12e:	f8ca 3000 	streq.w	r3, [sl]
 800f132:	e62f      	b.n	800ed94 <_strtod_l+0x494>
 800f134:	f04f 32ff 	mov.w	r2, #4294967295
 800f138:	fa02 f303 	lsl.w	r3, r2, r3
 800f13c:	ea03 0808 	and.w	r8, r3, r8
 800f140:	e6e0      	b.n	800ef04 <_strtod_l+0x604>
 800f142:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800f146:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800f14a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800f14e:	35e2      	adds	r5, #226	; 0xe2
 800f150:	fa07 f505 	lsl.w	r5, r7, r5
 800f154:	970f      	str	r7, [sp, #60]	; 0x3c
 800f156:	e747      	b.n	800efe8 <_strtod_l+0x6e8>
 800f158:	2301      	movs	r3, #1
 800f15a:	2500      	movs	r5, #0
 800f15c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f15e:	e743      	b.n	800efe8 <_strtod_l+0x6e8>
 800f160:	463a      	mov	r2, r7
 800f162:	4650      	mov	r0, sl
 800f164:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f166:	f001 feb1 	bl	8010ecc <__lshift>
 800f16a:	901a      	str	r0, [sp, #104]	; 0x68
 800f16c:	2800      	cmp	r0, #0
 800f16e:	f47f af69 	bne.w	800f044 <_strtod_l+0x744>
 800f172:	e604      	b.n	800ed7e <_strtod_l+0x47e>
 800f174:	08012550 	.word	0x08012550
 800f178:	fffffc02 	.word	0xfffffc02
 800f17c:	7ff00000 	.word	0x7ff00000
 800f180:	39500000 	.word	0x39500000
 800f184:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f188:	d165      	bne.n	800f256 <_strtod_l+0x956>
 800f18a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f18c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f190:	b35a      	cbz	r2, 800f1ea <_strtod_l+0x8ea>
 800f192:	4a99      	ldr	r2, [pc, #612]	; (800f3f8 <_strtod_l+0xaf8>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d12b      	bne.n	800f1f0 <_strtod_l+0x8f0>
 800f198:	9b05      	ldr	r3, [sp, #20]
 800f19a:	4641      	mov	r1, r8
 800f19c:	b303      	cbz	r3, 800f1e0 <_strtod_l+0x8e0>
 800f19e:	464a      	mov	r2, r9
 800f1a0:	4b96      	ldr	r3, [pc, #600]	; (800f3fc <_strtod_l+0xafc>)
 800f1a2:	4013      	ands	r3, r2
 800f1a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ac:	d81b      	bhi.n	800f1e6 <_strtod_l+0x8e6>
 800f1ae:	0d1b      	lsrs	r3, r3, #20
 800f1b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f1b8:	4299      	cmp	r1, r3
 800f1ba:	d119      	bne.n	800f1f0 <_strtod_l+0x8f0>
 800f1bc:	4b90      	ldr	r3, [pc, #576]	; (800f400 <_strtod_l+0xb00>)
 800f1be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d102      	bne.n	800f1ca <_strtod_l+0x8ca>
 800f1c4:	3101      	adds	r1, #1
 800f1c6:	f43f adda 	beq.w	800ed7e <_strtod_l+0x47e>
 800f1ca:	f04f 0800 	mov.w	r8, #0
 800f1ce:	4b8b      	ldr	r3, [pc, #556]	; (800f3fc <_strtod_l+0xafc>)
 800f1d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1d2:	401a      	ands	r2, r3
 800f1d4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800f1d8:	9b05      	ldr	r3, [sp, #20]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d19a      	bne.n	800f114 <_strtod_l+0x814>
 800f1de:	e5d9      	b.n	800ed94 <_strtod_l+0x494>
 800f1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e4:	e7e8      	b.n	800f1b8 <_strtod_l+0x8b8>
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	e7e6      	b.n	800f1b8 <_strtod_l+0x8b8>
 800f1ea:	ea53 0308 	orrs.w	r3, r3, r8
 800f1ee:	d081      	beq.n	800f0f4 <_strtod_l+0x7f4>
 800f1f0:	b1e5      	cbz	r5, 800f22c <_strtod_l+0x92c>
 800f1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1f4:	421d      	tst	r5, r3
 800f1f6:	d0ef      	beq.n	800f1d8 <_strtod_l+0x8d8>
 800f1f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1fa:	4640      	mov	r0, r8
 800f1fc:	4649      	mov	r1, r9
 800f1fe:	9a05      	ldr	r2, [sp, #20]
 800f200:	b1c3      	cbz	r3, 800f234 <_strtod_l+0x934>
 800f202:	f7ff fb59 	bl	800e8b8 <sulp>
 800f206:	4602      	mov	r2, r0
 800f208:	460b      	mov	r3, r1
 800f20a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f20e:	f7f0 ffcf 	bl	80001b0 <__adddf3>
 800f212:	4680      	mov	r8, r0
 800f214:	4689      	mov	r9, r1
 800f216:	e7df      	b.n	800f1d8 <_strtod_l+0x8d8>
 800f218:	4013      	ands	r3, r2
 800f21a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f21e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f222:	f04f 38ff 	mov.w	r8, #4294967295
 800f226:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f22a:	e7d5      	b.n	800f1d8 <_strtod_l+0x8d8>
 800f22c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f22e:	ea13 0f08 	tst.w	r3, r8
 800f232:	e7e0      	b.n	800f1f6 <_strtod_l+0x8f6>
 800f234:	f7ff fb40 	bl	800e8b8 <sulp>
 800f238:	4602      	mov	r2, r0
 800f23a:	460b      	mov	r3, r1
 800f23c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f240:	f7f0 ffb4 	bl	80001ac <__aeabi_dsub>
 800f244:	2200      	movs	r2, #0
 800f246:	2300      	movs	r3, #0
 800f248:	4680      	mov	r8, r0
 800f24a:	4689      	mov	r9, r1
 800f24c:	f7f1 fbce 	bl	80009ec <__aeabi_dcmpeq>
 800f250:	2800      	cmp	r0, #0
 800f252:	d0c1      	beq.n	800f1d8 <_strtod_l+0x8d8>
 800f254:	e608      	b.n	800ee68 <_strtod_l+0x568>
 800f256:	4658      	mov	r0, fp
 800f258:	9904      	ldr	r1, [sp, #16]
 800f25a:	f002 f825 	bl	80112a8 <__ratio>
 800f25e:	2200      	movs	r2, #0
 800f260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f264:	4606      	mov	r6, r0
 800f266:	460f      	mov	r7, r1
 800f268:	f7f1 fbd4 	bl	8000a14 <__aeabi_dcmple>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d070      	beq.n	800f352 <_strtod_l+0xa52>
 800f270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f272:	2b00      	cmp	r3, #0
 800f274:	d042      	beq.n	800f2fc <_strtod_l+0x9fc>
 800f276:	2600      	movs	r6, #0
 800f278:	4f62      	ldr	r7, [pc, #392]	; (800f404 <_strtod_l+0xb04>)
 800f27a:	4d62      	ldr	r5, [pc, #392]	; (800f404 <_strtod_l+0xb04>)
 800f27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f27e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f282:	0d1b      	lsrs	r3, r3, #20
 800f284:	051b      	lsls	r3, r3, #20
 800f286:	930f      	str	r3, [sp, #60]	; 0x3c
 800f288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f28a:	4b5f      	ldr	r3, [pc, #380]	; (800f408 <_strtod_l+0xb08>)
 800f28c:	429a      	cmp	r2, r3
 800f28e:	f040 80c3 	bne.w	800f418 <_strtod_l+0xb18>
 800f292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f294:	4640      	mov	r0, r8
 800f296:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800f29a:	4649      	mov	r1, r9
 800f29c:	f001 ff2e 	bl	80110fc <__ulp>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	4639      	mov	r1, r7
 800f2a8:	f7f1 f938 	bl	800051c <__aeabi_dmul>
 800f2ac:	4642      	mov	r2, r8
 800f2ae:	464b      	mov	r3, r9
 800f2b0:	f7f0 ff7e 	bl	80001b0 <__adddf3>
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	4951      	ldr	r1, [pc, #324]	; (800f3fc <_strtod_l+0xafc>)
 800f2b8:	4a54      	ldr	r2, [pc, #336]	; (800f40c <_strtod_l+0xb0c>)
 800f2ba:	4019      	ands	r1, r3
 800f2bc:	4291      	cmp	r1, r2
 800f2be:	4680      	mov	r8, r0
 800f2c0:	d95d      	bls.n	800f37e <_strtod_l+0xa7e>
 800f2c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f2c4:	4b4e      	ldr	r3, [pc, #312]	; (800f400 <_strtod_l+0xb00>)
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d103      	bne.n	800f2d2 <_strtod_l+0x9d2>
 800f2ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	f43f ad56 	beq.w	800ed7e <_strtod_l+0x47e>
 800f2d2:	f04f 38ff 	mov.w	r8, #4294967295
 800f2d6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800f400 <_strtod_l+0xb00>
 800f2da:	4650      	mov	r0, sl
 800f2dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f2de:	f001 fbdd 	bl	8010a9c <_Bfree>
 800f2e2:	4650      	mov	r0, sl
 800f2e4:	9906      	ldr	r1, [sp, #24]
 800f2e6:	f001 fbd9 	bl	8010a9c <_Bfree>
 800f2ea:	4650      	mov	r0, sl
 800f2ec:	9904      	ldr	r1, [sp, #16]
 800f2ee:	f001 fbd5 	bl	8010a9c <_Bfree>
 800f2f2:	4659      	mov	r1, fp
 800f2f4:	4650      	mov	r0, sl
 800f2f6:	f001 fbd1 	bl	8010a9c <_Bfree>
 800f2fa:	e627      	b.n	800ef4c <_strtod_l+0x64c>
 800f2fc:	f1b8 0f00 	cmp.w	r8, #0
 800f300:	d119      	bne.n	800f336 <_strtod_l+0xa36>
 800f302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f308:	b9e3      	cbnz	r3, 800f344 <_strtod_l+0xa44>
 800f30a:	2200      	movs	r2, #0
 800f30c:	4630      	mov	r0, r6
 800f30e:	4639      	mov	r1, r7
 800f310:	4b3c      	ldr	r3, [pc, #240]	; (800f404 <_strtod_l+0xb04>)
 800f312:	f7f1 fb75 	bl	8000a00 <__aeabi_dcmplt>
 800f316:	b9c8      	cbnz	r0, 800f34c <_strtod_l+0xa4c>
 800f318:	2200      	movs	r2, #0
 800f31a:	4630      	mov	r0, r6
 800f31c:	4639      	mov	r1, r7
 800f31e:	4b3c      	ldr	r3, [pc, #240]	; (800f410 <_strtod_l+0xb10>)
 800f320:	f7f1 f8fc 	bl	800051c <__aeabi_dmul>
 800f324:	4604      	mov	r4, r0
 800f326:	460d      	mov	r5, r1
 800f328:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800f32c:	9416      	str	r4, [sp, #88]	; 0x58
 800f32e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f330:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800f334:	e7a2      	b.n	800f27c <_strtod_l+0x97c>
 800f336:	f1b8 0f01 	cmp.w	r8, #1
 800f33a:	d103      	bne.n	800f344 <_strtod_l+0xa44>
 800f33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f33e:	2b00      	cmp	r3, #0
 800f340:	f43f ad92 	beq.w	800ee68 <_strtod_l+0x568>
 800f344:	2600      	movs	r6, #0
 800f346:	2400      	movs	r4, #0
 800f348:	4f32      	ldr	r7, [pc, #200]	; (800f414 <_strtod_l+0xb14>)
 800f34a:	e796      	b.n	800f27a <_strtod_l+0x97a>
 800f34c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f34e:	4d30      	ldr	r5, [pc, #192]	; (800f410 <_strtod_l+0xb10>)
 800f350:	e7ea      	b.n	800f328 <_strtod_l+0xa28>
 800f352:	4b2f      	ldr	r3, [pc, #188]	; (800f410 <_strtod_l+0xb10>)
 800f354:	2200      	movs	r2, #0
 800f356:	4630      	mov	r0, r6
 800f358:	4639      	mov	r1, r7
 800f35a:	f7f1 f8df 	bl	800051c <__aeabi_dmul>
 800f35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f360:	4604      	mov	r4, r0
 800f362:	460d      	mov	r5, r1
 800f364:	b933      	cbnz	r3, 800f374 <_strtod_l+0xa74>
 800f366:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f36a:	9010      	str	r0, [sp, #64]	; 0x40
 800f36c:	9311      	str	r3, [sp, #68]	; 0x44
 800f36e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f372:	e783      	b.n	800f27c <_strtod_l+0x97c>
 800f374:	4602      	mov	r2, r0
 800f376:	460b      	mov	r3, r1
 800f378:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800f37c:	e7f7      	b.n	800f36e <_strtod_l+0xa6e>
 800f37e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f382:	9b05      	ldr	r3, [sp, #20]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d1a8      	bne.n	800f2da <_strtod_l+0x9da>
 800f388:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f38c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f38e:	0d1b      	lsrs	r3, r3, #20
 800f390:	051b      	lsls	r3, r3, #20
 800f392:	429a      	cmp	r2, r3
 800f394:	d1a1      	bne.n	800f2da <_strtod_l+0x9da>
 800f396:	4620      	mov	r0, r4
 800f398:	4629      	mov	r1, r5
 800f39a:	f7f1 ff13 	bl	80011c4 <__aeabi_d2lz>
 800f39e:	f7f1 f88f 	bl	80004c0 <__aeabi_l2d>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	4629      	mov	r1, r5
 800f3aa:	f7f0 feff 	bl	80001ac <__aeabi_dsub>
 800f3ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f3b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3b4:	ea43 0308 	orr.w	r3, r3, r8
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	460d      	mov	r5, r1
 800f3be:	d066      	beq.n	800f48e <_strtod_l+0xb8e>
 800f3c0:	a309      	add	r3, pc, #36	; (adr r3, 800f3e8 <_strtod_l+0xae8>)
 800f3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c6:	f7f1 fb1b 	bl	8000a00 <__aeabi_dcmplt>
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	f47f ace2 	bne.w	800ed94 <_strtod_l+0x494>
 800f3d0:	a307      	add	r3, pc, #28	; (adr r3, 800f3f0 <_strtod_l+0xaf0>)
 800f3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	4629      	mov	r1, r5
 800f3da:	f7f1 fb2f 	bl	8000a3c <__aeabi_dcmpgt>
 800f3de:	2800      	cmp	r0, #0
 800f3e0:	f43f af7b 	beq.w	800f2da <_strtod_l+0x9da>
 800f3e4:	e4d6      	b.n	800ed94 <_strtod_l+0x494>
 800f3e6:	bf00      	nop
 800f3e8:	94a03595 	.word	0x94a03595
 800f3ec:	3fdfffff 	.word	0x3fdfffff
 800f3f0:	35afe535 	.word	0x35afe535
 800f3f4:	3fe00000 	.word	0x3fe00000
 800f3f8:	000fffff 	.word	0x000fffff
 800f3fc:	7ff00000 	.word	0x7ff00000
 800f400:	7fefffff 	.word	0x7fefffff
 800f404:	3ff00000 	.word	0x3ff00000
 800f408:	7fe00000 	.word	0x7fe00000
 800f40c:	7c9fffff 	.word	0x7c9fffff
 800f410:	3fe00000 	.word	0x3fe00000
 800f414:	bff00000 	.word	0xbff00000
 800f418:	9b05      	ldr	r3, [sp, #20]
 800f41a:	b313      	cbz	r3, 800f462 <_strtod_l+0xb62>
 800f41c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f41e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f422:	d81e      	bhi.n	800f462 <_strtod_l+0xb62>
 800f424:	a326      	add	r3, pc, #152	; (adr r3, 800f4c0 <_strtod_l+0xbc0>)
 800f426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42a:	4620      	mov	r0, r4
 800f42c:	4629      	mov	r1, r5
 800f42e:	f7f1 faf1 	bl	8000a14 <__aeabi_dcmple>
 800f432:	b190      	cbz	r0, 800f45a <_strtod_l+0xb5a>
 800f434:	4629      	mov	r1, r5
 800f436:	4620      	mov	r0, r4
 800f438:	f7f1 fb48 	bl	8000acc <__aeabi_d2uiz>
 800f43c:	2801      	cmp	r0, #1
 800f43e:	bf38      	it	cc
 800f440:	2001      	movcc	r0, #1
 800f442:	f7f0 fff1 	bl	8000428 <__aeabi_ui2d>
 800f446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f448:	4604      	mov	r4, r0
 800f44a:	460d      	mov	r5, r1
 800f44c:	b9d3      	cbnz	r3, 800f484 <_strtod_l+0xb84>
 800f44e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f452:	9012      	str	r0, [sp, #72]	; 0x48
 800f454:	9313      	str	r3, [sp, #76]	; 0x4c
 800f456:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800f45a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f45c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800f460:	1a9f      	subs	r7, r3, r2
 800f462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f466:	f001 fe49 	bl	80110fc <__ulp>
 800f46a:	4602      	mov	r2, r0
 800f46c:	460b      	mov	r3, r1
 800f46e:	4630      	mov	r0, r6
 800f470:	4639      	mov	r1, r7
 800f472:	f7f1 f853 	bl	800051c <__aeabi_dmul>
 800f476:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f47a:	f7f0 fe99 	bl	80001b0 <__adddf3>
 800f47e:	4680      	mov	r8, r0
 800f480:	4689      	mov	r9, r1
 800f482:	e77e      	b.n	800f382 <_strtod_l+0xa82>
 800f484:	4602      	mov	r2, r0
 800f486:	460b      	mov	r3, r1
 800f488:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800f48c:	e7e3      	b.n	800f456 <_strtod_l+0xb56>
 800f48e:	a30e      	add	r3, pc, #56	; (adr r3, 800f4c8 <_strtod_l+0xbc8>)
 800f490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f494:	f7f1 fab4 	bl	8000a00 <__aeabi_dcmplt>
 800f498:	e7a1      	b.n	800f3de <_strtod_l+0xade>
 800f49a:	2300      	movs	r3, #0
 800f49c:	930a      	str	r3, [sp, #40]	; 0x28
 800f49e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f4a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f4a2:	6013      	str	r3, [r2, #0]
 800f4a4:	f7ff ba71 	b.w	800e98a <_strtod_l+0x8a>
 800f4a8:	2a65      	cmp	r2, #101	; 0x65
 800f4aa:	f43f ab63 	beq.w	800eb74 <_strtod_l+0x274>
 800f4ae:	2a45      	cmp	r2, #69	; 0x45
 800f4b0:	f43f ab60 	beq.w	800eb74 <_strtod_l+0x274>
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	f7ff bb95 	b.w	800ebe4 <_strtod_l+0x2e4>
 800f4ba:	bf00      	nop
 800f4bc:	f3af 8000 	nop.w
 800f4c0:	ffc00000 	.word	0xffc00000
 800f4c4:	41dfffff 	.word	0x41dfffff
 800f4c8:	94a03595 	.word	0x94a03595
 800f4cc:	3fcfffff 	.word	0x3fcfffff

0800f4d0 <strtod>:
 800f4d0:	460a      	mov	r2, r1
 800f4d2:	4601      	mov	r1, r0
 800f4d4:	4802      	ldr	r0, [pc, #8]	; (800f4e0 <strtod+0x10>)
 800f4d6:	4b03      	ldr	r3, [pc, #12]	; (800f4e4 <strtod+0x14>)
 800f4d8:	6800      	ldr	r0, [r0, #0]
 800f4da:	f7ff ba11 	b.w	800e900 <_strtod_l>
 800f4de:	bf00      	nop
 800f4e0:	20000834 	.word	0x20000834
 800f4e4:	2000089c 	.word	0x2000089c

0800f4e8 <strtok>:
 800f4e8:	4b16      	ldr	r3, [pc, #88]	; (800f544 <strtok+0x5c>)
 800f4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ee:	681f      	ldr	r7, [r3, #0]
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800f4f4:	460e      	mov	r6, r1
 800f4f6:	b9ec      	cbnz	r4, 800f534 <strtok+0x4c>
 800f4f8:	2050      	movs	r0, #80	; 0x50
 800f4fa:	f001 fa67 	bl	80109cc <malloc>
 800f4fe:	4602      	mov	r2, r0
 800f500:	65b8      	str	r0, [r7, #88]	; 0x58
 800f502:	b920      	cbnz	r0, 800f50e <strtok+0x26>
 800f504:	2157      	movs	r1, #87	; 0x57
 800f506:	4b10      	ldr	r3, [pc, #64]	; (800f548 <strtok+0x60>)
 800f508:	4810      	ldr	r0, [pc, #64]	; (800f54c <strtok+0x64>)
 800f50a:	f000 f849 	bl	800f5a0 <__assert_func>
 800f50e:	e9c0 4400 	strd	r4, r4, [r0]
 800f512:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f516:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f51a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f51e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f522:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f526:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f52a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f52e:	6184      	str	r4, [r0, #24]
 800f530:	7704      	strb	r4, [r0, #28]
 800f532:	6244      	str	r4, [r0, #36]	; 0x24
 800f534:	4631      	mov	r1, r6
 800f536:	4628      	mov	r0, r5
 800f538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f53a:	2301      	movs	r3, #1
 800f53c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f540:	f000 b806 	b.w	800f550 <__strtok_r>
 800f544:	20000834 	.word	0x20000834
 800f548:	08012578 	.word	0x08012578
 800f54c:	0801258f 	.word	0x0801258f

0800f550 <__strtok_r>:
 800f550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f552:	b908      	cbnz	r0, 800f558 <__strtok_r+0x8>
 800f554:	6810      	ldr	r0, [r2, #0]
 800f556:	b188      	cbz	r0, 800f57c <__strtok_r+0x2c>
 800f558:	4604      	mov	r4, r0
 800f55a:	460f      	mov	r7, r1
 800f55c:	4620      	mov	r0, r4
 800f55e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f562:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f566:	b91e      	cbnz	r6, 800f570 <__strtok_r+0x20>
 800f568:	b965      	cbnz	r5, 800f584 <__strtok_r+0x34>
 800f56a:	4628      	mov	r0, r5
 800f56c:	6015      	str	r5, [r2, #0]
 800f56e:	e005      	b.n	800f57c <__strtok_r+0x2c>
 800f570:	42b5      	cmp	r5, r6
 800f572:	d1f6      	bne.n	800f562 <__strtok_r+0x12>
 800f574:	2b00      	cmp	r3, #0
 800f576:	d1f0      	bne.n	800f55a <__strtok_r+0xa>
 800f578:	6014      	str	r4, [r2, #0]
 800f57a:	7003      	strb	r3, [r0, #0]
 800f57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f57e:	461c      	mov	r4, r3
 800f580:	e00c      	b.n	800f59c <__strtok_r+0x4c>
 800f582:	b915      	cbnz	r5, 800f58a <__strtok_r+0x3a>
 800f584:	460e      	mov	r6, r1
 800f586:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f58a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f58e:	42ab      	cmp	r3, r5
 800f590:	d1f7      	bne.n	800f582 <__strtok_r+0x32>
 800f592:	2b00      	cmp	r3, #0
 800f594:	d0f3      	beq.n	800f57e <__strtok_r+0x2e>
 800f596:	2300      	movs	r3, #0
 800f598:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f59c:	6014      	str	r4, [r2, #0]
 800f59e:	e7ed      	b.n	800f57c <__strtok_r+0x2c>

0800f5a0 <__assert_func>:
 800f5a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5a2:	4614      	mov	r4, r2
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	4b09      	ldr	r3, [pc, #36]	; (800f5cc <__assert_func+0x2c>)
 800f5a8:	4605      	mov	r5, r0
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	68d8      	ldr	r0, [r3, #12]
 800f5ae:	b14c      	cbz	r4, 800f5c4 <__assert_func+0x24>
 800f5b0:	4b07      	ldr	r3, [pc, #28]	; (800f5d0 <__assert_func+0x30>)
 800f5b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5b6:	9100      	str	r1, [sp, #0]
 800f5b8:	462b      	mov	r3, r5
 800f5ba:	4906      	ldr	r1, [pc, #24]	; (800f5d4 <__assert_func+0x34>)
 800f5bc:	f000 fe8a 	bl	80102d4 <fiprintf>
 800f5c0:	f002 fb80 	bl	8011cc4 <abort>
 800f5c4:	4b04      	ldr	r3, [pc, #16]	; (800f5d8 <__assert_func+0x38>)
 800f5c6:	461c      	mov	r4, r3
 800f5c8:	e7f3      	b.n	800f5b2 <__assert_func+0x12>
 800f5ca:	bf00      	nop
 800f5cc:	20000834 	.word	0x20000834
 800f5d0:	080125ec 	.word	0x080125ec
 800f5d4:	080125f9 	.word	0x080125f9
 800f5d8:	08012627 	.word	0x08012627

0800f5dc <quorem>:
 800f5dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e0:	6903      	ldr	r3, [r0, #16]
 800f5e2:	690c      	ldr	r4, [r1, #16]
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	42a3      	cmp	r3, r4
 800f5e8:	f2c0 8082 	blt.w	800f6f0 <quorem+0x114>
 800f5ec:	3c01      	subs	r4, #1
 800f5ee:	f100 0514 	add.w	r5, r0, #20
 800f5f2:	f101 0814 	add.w	r8, r1, #20
 800f5f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5fa:	9301      	str	r3, [sp, #4]
 800f5fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f600:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f604:	3301      	adds	r3, #1
 800f606:	429a      	cmp	r2, r3
 800f608:	fbb2 f6f3 	udiv	r6, r2, r3
 800f60c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f614:	d331      	bcc.n	800f67a <quorem+0x9e>
 800f616:	f04f 0e00 	mov.w	lr, #0
 800f61a:	4640      	mov	r0, r8
 800f61c:	46ac      	mov	ip, r5
 800f61e:	46f2      	mov	sl, lr
 800f620:	f850 2b04 	ldr.w	r2, [r0], #4
 800f624:	b293      	uxth	r3, r2
 800f626:	fb06 e303 	mla	r3, r6, r3, lr
 800f62a:	0c12      	lsrs	r2, r2, #16
 800f62c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f630:	b29b      	uxth	r3, r3
 800f632:	fb06 e202 	mla	r2, r6, r2, lr
 800f636:	ebaa 0303 	sub.w	r3, sl, r3
 800f63a:	f8dc a000 	ldr.w	sl, [ip]
 800f63e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f642:	fa1f fa8a 	uxth.w	sl, sl
 800f646:	4453      	add	r3, sl
 800f648:	f8dc a000 	ldr.w	sl, [ip]
 800f64c:	b292      	uxth	r2, r2
 800f64e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f652:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f656:	b29b      	uxth	r3, r3
 800f658:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f65c:	4581      	cmp	r9, r0
 800f65e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f662:	f84c 3b04 	str.w	r3, [ip], #4
 800f666:	d2db      	bcs.n	800f620 <quorem+0x44>
 800f668:	f855 300b 	ldr.w	r3, [r5, fp]
 800f66c:	b92b      	cbnz	r3, 800f67a <quorem+0x9e>
 800f66e:	9b01      	ldr	r3, [sp, #4]
 800f670:	3b04      	subs	r3, #4
 800f672:	429d      	cmp	r5, r3
 800f674:	461a      	mov	r2, r3
 800f676:	d32f      	bcc.n	800f6d8 <quorem+0xfc>
 800f678:	613c      	str	r4, [r7, #16]
 800f67a:	4638      	mov	r0, r7
 800f67c:	f001 fc96 	bl	8010fac <__mcmp>
 800f680:	2800      	cmp	r0, #0
 800f682:	db25      	blt.n	800f6d0 <quorem+0xf4>
 800f684:	4628      	mov	r0, r5
 800f686:	f04f 0c00 	mov.w	ip, #0
 800f68a:	3601      	adds	r6, #1
 800f68c:	f858 1b04 	ldr.w	r1, [r8], #4
 800f690:	f8d0 e000 	ldr.w	lr, [r0]
 800f694:	b28b      	uxth	r3, r1
 800f696:	ebac 0303 	sub.w	r3, ip, r3
 800f69a:	fa1f f28e 	uxth.w	r2, lr
 800f69e:	4413      	add	r3, r2
 800f6a0:	0c0a      	lsrs	r2, r1, #16
 800f6a2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f6a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6b0:	45c1      	cmp	r9, r8
 800f6b2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f6b6:	f840 3b04 	str.w	r3, [r0], #4
 800f6ba:	d2e7      	bcs.n	800f68c <quorem+0xb0>
 800f6bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6c4:	b922      	cbnz	r2, 800f6d0 <quorem+0xf4>
 800f6c6:	3b04      	subs	r3, #4
 800f6c8:	429d      	cmp	r5, r3
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	d30a      	bcc.n	800f6e4 <quorem+0x108>
 800f6ce:	613c      	str	r4, [r7, #16]
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	b003      	add	sp, #12
 800f6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d8:	6812      	ldr	r2, [r2, #0]
 800f6da:	3b04      	subs	r3, #4
 800f6dc:	2a00      	cmp	r2, #0
 800f6de:	d1cb      	bne.n	800f678 <quorem+0x9c>
 800f6e0:	3c01      	subs	r4, #1
 800f6e2:	e7c6      	b.n	800f672 <quorem+0x96>
 800f6e4:	6812      	ldr	r2, [r2, #0]
 800f6e6:	3b04      	subs	r3, #4
 800f6e8:	2a00      	cmp	r2, #0
 800f6ea:	d1f0      	bne.n	800f6ce <quorem+0xf2>
 800f6ec:	3c01      	subs	r4, #1
 800f6ee:	e7eb      	b.n	800f6c8 <quorem+0xec>
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	e7ee      	b.n	800f6d2 <quorem+0xf6>
 800f6f4:	0000      	movs	r0, r0
	...

0800f6f8 <_dtoa_r>:
 800f6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fc:	4616      	mov	r6, r2
 800f6fe:	461f      	mov	r7, r3
 800f700:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f702:	b099      	sub	sp, #100	; 0x64
 800f704:	4605      	mov	r5, r0
 800f706:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f70a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800f70e:	b974      	cbnz	r4, 800f72e <_dtoa_r+0x36>
 800f710:	2010      	movs	r0, #16
 800f712:	f001 f95b 	bl	80109cc <malloc>
 800f716:	4602      	mov	r2, r0
 800f718:	6268      	str	r0, [r5, #36]	; 0x24
 800f71a:	b920      	cbnz	r0, 800f726 <_dtoa_r+0x2e>
 800f71c:	21ea      	movs	r1, #234	; 0xea
 800f71e:	4ba8      	ldr	r3, [pc, #672]	; (800f9c0 <_dtoa_r+0x2c8>)
 800f720:	48a8      	ldr	r0, [pc, #672]	; (800f9c4 <_dtoa_r+0x2cc>)
 800f722:	f7ff ff3d 	bl	800f5a0 <__assert_func>
 800f726:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f72a:	6004      	str	r4, [r0, #0]
 800f72c:	60c4      	str	r4, [r0, #12]
 800f72e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f730:	6819      	ldr	r1, [r3, #0]
 800f732:	b151      	cbz	r1, 800f74a <_dtoa_r+0x52>
 800f734:	685a      	ldr	r2, [r3, #4]
 800f736:	2301      	movs	r3, #1
 800f738:	4093      	lsls	r3, r2
 800f73a:	604a      	str	r2, [r1, #4]
 800f73c:	608b      	str	r3, [r1, #8]
 800f73e:	4628      	mov	r0, r5
 800f740:	f001 f9ac 	bl	8010a9c <_Bfree>
 800f744:	2200      	movs	r2, #0
 800f746:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f748:	601a      	str	r2, [r3, #0]
 800f74a:	1e3b      	subs	r3, r7, #0
 800f74c:	bfaf      	iteee	ge
 800f74e:	2300      	movge	r3, #0
 800f750:	2201      	movlt	r2, #1
 800f752:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f756:	9305      	strlt	r3, [sp, #20]
 800f758:	bfa8      	it	ge
 800f75a:	f8c8 3000 	strge.w	r3, [r8]
 800f75e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f762:	4b99      	ldr	r3, [pc, #612]	; (800f9c8 <_dtoa_r+0x2d0>)
 800f764:	bfb8      	it	lt
 800f766:	f8c8 2000 	strlt.w	r2, [r8]
 800f76a:	ea33 0309 	bics.w	r3, r3, r9
 800f76e:	d119      	bne.n	800f7a4 <_dtoa_r+0xac>
 800f770:	f242 730f 	movw	r3, #9999	; 0x270f
 800f774:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f776:	6013      	str	r3, [r2, #0]
 800f778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f77c:	4333      	orrs	r3, r6
 800f77e:	f000 857f 	beq.w	8010280 <_dtoa_r+0xb88>
 800f782:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f784:	b953      	cbnz	r3, 800f79c <_dtoa_r+0xa4>
 800f786:	4b91      	ldr	r3, [pc, #580]	; (800f9cc <_dtoa_r+0x2d4>)
 800f788:	e022      	b.n	800f7d0 <_dtoa_r+0xd8>
 800f78a:	4b91      	ldr	r3, [pc, #580]	; (800f9d0 <_dtoa_r+0x2d8>)
 800f78c:	9303      	str	r3, [sp, #12]
 800f78e:	3308      	adds	r3, #8
 800f790:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f792:	6013      	str	r3, [r2, #0]
 800f794:	9803      	ldr	r0, [sp, #12]
 800f796:	b019      	add	sp, #100	; 0x64
 800f798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f79c:	4b8b      	ldr	r3, [pc, #556]	; (800f9cc <_dtoa_r+0x2d4>)
 800f79e:	9303      	str	r3, [sp, #12]
 800f7a0:	3303      	adds	r3, #3
 800f7a2:	e7f5      	b.n	800f790 <_dtoa_r+0x98>
 800f7a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f7a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800f7ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	f7f1 f91a 	bl	80009ec <__aeabi_dcmpeq>
 800f7b8:	4680      	mov	r8, r0
 800f7ba:	b158      	cbz	r0, 800f7d4 <_dtoa_r+0xdc>
 800f7bc:	2301      	movs	r3, #1
 800f7be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f7c0:	6013      	str	r3, [r2, #0]
 800f7c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	f000 8558 	beq.w	801027a <_dtoa_r+0xb82>
 800f7ca:	4882      	ldr	r0, [pc, #520]	; (800f9d4 <_dtoa_r+0x2dc>)
 800f7cc:	6018      	str	r0, [r3, #0]
 800f7ce:	1e43      	subs	r3, r0, #1
 800f7d0:	9303      	str	r3, [sp, #12]
 800f7d2:	e7df      	b.n	800f794 <_dtoa_r+0x9c>
 800f7d4:	ab16      	add	r3, sp, #88	; 0x58
 800f7d6:	9301      	str	r3, [sp, #4]
 800f7d8:	ab17      	add	r3, sp, #92	; 0x5c
 800f7da:	9300      	str	r3, [sp, #0]
 800f7dc:	4628      	mov	r0, r5
 800f7de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f7e2:	f001 fd05 	bl	80111f0 <__d2b>
 800f7e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f7ea:	4683      	mov	fp, r0
 800f7ec:	2c00      	cmp	r4, #0
 800f7ee:	d07f      	beq.n	800f8f0 <_dtoa_r+0x1f8>
 800f7f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f7f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f7fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800f802:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f806:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800f80a:	2200      	movs	r2, #0
 800f80c:	4b72      	ldr	r3, [pc, #456]	; (800f9d8 <_dtoa_r+0x2e0>)
 800f80e:	f7f0 fccd 	bl	80001ac <__aeabi_dsub>
 800f812:	a365      	add	r3, pc, #404	; (adr r3, 800f9a8 <_dtoa_r+0x2b0>)
 800f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f818:	f7f0 fe80 	bl	800051c <__aeabi_dmul>
 800f81c:	a364      	add	r3, pc, #400	; (adr r3, 800f9b0 <_dtoa_r+0x2b8>)
 800f81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f822:	f7f0 fcc5 	bl	80001b0 <__adddf3>
 800f826:	4606      	mov	r6, r0
 800f828:	4620      	mov	r0, r4
 800f82a:	460f      	mov	r7, r1
 800f82c:	f7f0 fe0c 	bl	8000448 <__aeabi_i2d>
 800f830:	a361      	add	r3, pc, #388	; (adr r3, 800f9b8 <_dtoa_r+0x2c0>)
 800f832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f836:	f7f0 fe71 	bl	800051c <__aeabi_dmul>
 800f83a:	4602      	mov	r2, r0
 800f83c:	460b      	mov	r3, r1
 800f83e:	4630      	mov	r0, r6
 800f840:	4639      	mov	r1, r7
 800f842:	f7f0 fcb5 	bl	80001b0 <__adddf3>
 800f846:	4606      	mov	r6, r0
 800f848:	460f      	mov	r7, r1
 800f84a:	f7f1 f917 	bl	8000a7c <__aeabi_d2iz>
 800f84e:	2200      	movs	r2, #0
 800f850:	4682      	mov	sl, r0
 800f852:	2300      	movs	r3, #0
 800f854:	4630      	mov	r0, r6
 800f856:	4639      	mov	r1, r7
 800f858:	f7f1 f8d2 	bl	8000a00 <__aeabi_dcmplt>
 800f85c:	b148      	cbz	r0, 800f872 <_dtoa_r+0x17a>
 800f85e:	4650      	mov	r0, sl
 800f860:	f7f0 fdf2 	bl	8000448 <__aeabi_i2d>
 800f864:	4632      	mov	r2, r6
 800f866:	463b      	mov	r3, r7
 800f868:	f7f1 f8c0 	bl	80009ec <__aeabi_dcmpeq>
 800f86c:	b908      	cbnz	r0, 800f872 <_dtoa_r+0x17a>
 800f86e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f872:	f1ba 0f16 	cmp.w	sl, #22
 800f876:	d858      	bhi.n	800f92a <_dtoa_r+0x232>
 800f878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f87c:	4b57      	ldr	r3, [pc, #348]	; (800f9dc <_dtoa_r+0x2e4>)
 800f87e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f886:	f7f1 f8bb 	bl	8000a00 <__aeabi_dcmplt>
 800f88a:	2800      	cmp	r0, #0
 800f88c:	d04f      	beq.n	800f92e <_dtoa_r+0x236>
 800f88e:	2300      	movs	r3, #0
 800f890:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f894:	930f      	str	r3, [sp, #60]	; 0x3c
 800f896:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f898:	1b1c      	subs	r4, r3, r4
 800f89a:	1e63      	subs	r3, r4, #1
 800f89c:	9309      	str	r3, [sp, #36]	; 0x24
 800f89e:	bf49      	itett	mi
 800f8a0:	f1c4 0301 	rsbmi	r3, r4, #1
 800f8a4:	2300      	movpl	r3, #0
 800f8a6:	9306      	strmi	r3, [sp, #24]
 800f8a8:	2300      	movmi	r3, #0
 800f8aa:	bf54      	ite	pl
 800f8ac:	9306      	strpl	r3, [sp, #24]
 800f8ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 800f8b0:	f1ba 0f00 	cmp.w	sl, #0
 800f8b4:	db3d      	blt.n	800f932 <_dtoa_r+0x23a>
 800f8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8b8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f8bc:	4453      	add	r3, sl
 800f8be:	9309      	str	r3, [sp, #36]	; 0x24
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	930a      	str	r3, [sp, #40]	; 0x28
 800f8c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f8c6:	2b09      	cmp	r3, #9
 800f8c8:	f200 808c 	bhi.w	800f9e4 <_dtoa_r+0x2ec>
 800f8cc:	2b05      	cmp	r3, #5
 800f8ce:	bfc4      	itt	gt
 800f8d0:	3b04      	subgt	r3, #4
 800f8d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800f8d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f8d6:	bfc8      	it	gt
 800f8d8:	2400      	movgt	r4, #0
 800f8da:	f1a3 0302 	sub.w	r3, r3, #2
 800f8de:	bfd8      	it	le
 800f8e0:	2401      	movle	r4, #1
 800f8e2:	2b03      	cmp	r3, #3
 800f8e4:	f200 808a 	bhi.w	800f9fc <_dtoa_r+0x304>
 800f8e8:	e8df f003 	tbb	[pc, r3]
 800f8ec:	5b4d4f2d 	.word	0x5b4d4f2d
 800f8f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800f8f4:	441c      	add	r4, r3
 800f8f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800f8fa:	2b20      	cmp	r3, #32
 800f8fc:	bfc3      	ittte	gt
 800f8fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f902:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800f906:	fa09 f303 	lslgt.w	r3, r9, r3
 800f90a:	f1c3 0320 	rsble	r3, r3, #32
 800f90e:	bfc6      	itte	gt
 800f910:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f914:	4318      	orrgt	r0, r3
 800f916:	fa06 f003 	lslle.w	r0, r6, r3
 800f91a:	f7f0 fd85 	bl	8000428 <__aeabi_ui2d>
 800f91e:	2301      	movs	r3, #1
 800f920:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f924:	3c01      	subs	r4, #1
 800f926:	9313      	str	r3, [sp, #76]	; 0x4c
 800f928:	e76f      	b.n	800f80a <_dtoa_r+0x112>
 800f92a:	2301      	movs	r3, #1
 800f92c:	e7b2      	b.n	800f894 <_dtoa_r+0x19c>
 800f92e:	900f      	str	r0, [sp, #60]	; 0x3c
 800f930:	e7b1      	b.n	800f896 <_dtoa_r+0x19e>
 800f932:	9b06      	ldr	r3, [sp, #24]
 800f934:	eba3 030a 	sub.w	r3, r3, sl
 800f938:	9306      	str	r3, [sp, #24]
 800f93a:	f1ca 0300 	rsb	r3, sl, #0
 800f93e:	930a      	str	r3, [sp, #40]	; 0x28
 800f940:	2300      	movs	r3, #0
 800f942:	930e      	str	r3, [sp, #56]	; 0x38
 800f944:	e7be      	b.n	800f8c4 <_dtoa_r+0x1cc>
 800f946:	2300      	movs	r3, #0
 800f948:	930b      	str	r3, [sp, #44]	; 0x2c
 800f94a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	dc58      	bgt.n	800fa02 <_dtoa_r+0x30a>
 800f950:	f04f 0901 	mov.w	r9, #1
 800f954:	464b      	mov	r3, r9
 800f956:	f8cd 9020 	str.w	r9, [sp, #32]
 800f95a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800f95e:	2200      	movs	r2, #0
 800f960:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f962:	6042      	str	r2, [r0, #4]
 800f964:	2204      	movs	r2, #4
 800f966:	f102 0614 	add.w	r6, r2, #20
 800f96a:	429e      	cmp	r6, r3
 800f96c:	6841      	ldr	r1, [r0, #4]
 800f96e:	d94e      	bls.n	800fa0e <_dtoa_r+0x316>
 800f970:	4628      	mov	r0, r5
 800f972:	f001 f853 	bl	8010a1c <_Balloc>
 800f976:	9003      	str	r0, [sp, #12]
 800f978:	2800      	cmp	r0, #0
 800f97a:	d14c      	bne.n	800fa16 <_dtoa_r+0x31e>
 800f97c:	4602      	mov	r2, r0
 800f97e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f982:	4b17      	ldr	r3, [pc, #92]	; (800f9e0 <_dtoa_r+0x2e8>)
 800f984:	e6cc      	b.n	800f720 <_dtoa_r+0x28>
 800f986:	2301      	movs	r3, #1
 800f988:	e7de      	b.n	800f948 <_dtoa_r+0x250>
 800f98a:	2300      	movs	r3, #0
 800f98c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f98e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f990:	eb0a 0903 	add.w	r9, sl, r3
 800f994:	f109 0301 	add.w	r3, r9, #1
 800f998:	2b01      	cmp	r3, #1
 800f99a:	9308      	str	r3, [sp, #32]
 800f99c:	bfb8      	it	lt
 800f99e:	2301      	movlt	r3, #1
 800f9a0:	e7dd      	b.n	800f95e <_dtoa_r+0x266>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	e7f2      	b.n	800f98c <_dtoa_r+0x294>
 800f9a6:	bf00      	nop
 800f9a8:	636f4361 	.word	0x636f4361
 800f9ac:	3fd287a7 	.word	0x3fd287a7
 800f9b0:	8b60c8b3 	.word	0x8b60c8b3
 800f9b4:	3fc68a28 	.word	0x3fc68a28
 800f9b8:	509f79fb 	.word	0x509f79fb
 800f9bc:	3fd34413 	.word	0x3fd34413
 800f9c0:	08012578 	.word	0x08012578
 800f9c4:	08012635 	.word	0x08012635
 800f9c8:	7ff00000 	.word	0x7ff00000
 800f9cc:	08012631 	.word	0x08012631
 800f9d0:	08012628 	.word	0x08012628
 800f9d4:	08012501 	.word	0x08012501
 800f9d8:	3ff80000 	.word	0x3ff80000
 800f9dc:	080127a0 	.word	0x080127a0
 800f9e0:	08012690 	.word	0x08012690
 800f9e4:	2401      	movs	r4, #1
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	940b      	str	r4, [sp, #44]	; 0x2c
 800f9ea:	9322      	str	r3, [sp, #136]	; 0x88
 800f9ec:	f04f 39ff 	mov.w	r9, #4294967295
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	2312      	movs	r3, #18
 800f9f4:	f8cd 9020 	str.w	r9, [sp, #32]
 800f9f8:	9223      	str	r2, [sp, #140]	; 0x8c
 800f9fa:	e7b0      	b.n	800f95e <_dtoa_r+0x266>
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa00:	e7f4      	b.n	800f9ec <_dtoa_r+0x2f4>
 800fa02:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800fa06:	464b      	mov	r3, r9
 800fa08:	f8cd 9020 	str.w	r9, [sp, #32]
 800fa0c:	e7a7      	b.n	800f95e <_dtoa_r+0x266>
 800fa0e:	3101      	adds	r1, #1
 800fa10:	6041      	str	r1, [r0, #4]
 800fa12:	0052      	lsls	r2, r2, #1
 800fa14:	e7a7      	b.n	800f966 <_dtoa_r+0x26e>
 800fa16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fa18:	9a03      	ldr	r2, [sp, #12]
 800fa1a:	601a      	str	r2, [r3, #0]
 800fa1c:	9b08      	ldr	r3, [sp, #32]
 800fa1e:	2b0e      	cmp	r3, #14
 800fa20:	f200 80a8 	bhi.w	800fb74 <_dtoa_r+0x47c>
 800fa24:	2c00      	cmp	r4, #0
 800fa26:	f000 80a5 	beq.w	800fb74 <_dtoa_r+0x47c>
 800fa2a:	f1ba 0f00 	cmp.w	sl, #0
 800fa2e:	dd34      	ble.n	800fa9a <_dtoa_r+0x3a2>
 800fa30:	4a9a      	ldr	r2, [pc, #616]	; (800fc9c <_dtoa_r+0x5a4>)
 800fa32:	f00a 030f 	and.w	r3, sl, #15
 800fa36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fa3a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800fa3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fa42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800fa46:	ea4f 142a 	mov.w	r4, sl, asr #4
 800fa4a:	d016      	beq.n	800fa7a <_dtoa_r+0x382>
 800fa4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fa50:	4b93      	ldr	r3, [pc, #588]	; (800fca0 <_dtoa_r+0x5a8>)
 800fa52:	2703      	movs	r7, #3
 800fa54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fa58:	f7f0 fe8a 	bl	8000770 <__aeabi_ddiv>
 800fa5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa60:	f004 040f 	and.w	r4, r4, #15
 800fa64:	4e8e      	ldr	r6, [pc, #568]	; (800fca0 <_dtoa_r+0x5a8>)
 800fa66:	b954      	cbnz	r4, 800fa7e <_dtoa_r+0x386>
 800fa68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fa6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa70:	f7f0 fe7e 	bl	8000770 <__aeabi_ddiv>
 800fa74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa78:	e029      	b.n	800face <_dtoa_r+0x3d6>
 800fa7a:	2702      	movs	r7, #2
 800fa7c:	e7f2      	b.n	800fa64 <_dtoa_r+0x36c>
 800fa7e:	07e1      	lsls	r1, r4, #31
 800fa80:	d508      	bpl.n	800fa94 <_dtoa_r+0x39c>
 800fa82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fa86:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fa8a:	f7f0 fd47 	bl	800051c <__aeabi_dmul>
 800fa8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fa92:	3701      	adds	r7, #1
 800fa94:	1064      	asrs	r4, r4, #1
 800fa96:	3608      	adds	r6, #8
 800fa98:	e7e5      	b.n	800fa66 <_dtoa_r+0x36e>
 800fa9a:	f000 80a5 	beq.w	800fbe8 <_dtoa_r+0x4f0>
 800fa9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800faa2:	f1ca 0400 	rsb	r4, sl, #0
 800faa6:	4b7d      	ldr	r3, [pc, #500]	; (800fc9c <_dtoa_r+0x5a4>)
 800faa8:	f004 020f 	and.w	r2, r4, #15
 800faac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab4:	f7f0 fd32 	bl	800051c <__aeabi_dmul>
 800fab8:	2702      	movs	r7, #2
 800faba:	2300      	movs	r3, #0
 800fabc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fac0:	4e77      	ldr	r6, [pc, #476]	; (800fca0 <_dtoa_r+0x5a8>)
 800fac2:	1124      	asrs	r4, r4, #4
 800fac4:	2c00      	cmp	r4, #0
 800fac6:	f040 8084 	bne.w	800fbd2 <_dtoa_r+0x4da>
 800faca:	2b00      	cmp	r3, #0
 800facc:	d1d2      	bne.n	800fa74 <_dtoa_r+0x37c>
 800face:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	f000 808b 	beq.w	800fbec <_dtoa_r+0x4f4>
 800fad6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800fada:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800fade:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fae2:	2200      	movs	r2, #0
 800fae4:	4b6f      	ldr	r3, [pc, #444]	; (800fca4 <_dtoa_r+0x5ac>)
 800fae6:	f7f0 ff8b 	bl	8000a00 <__aeabi_dcmplt>
 800faea:	2800      	cmp	r0, #0
 800faec:	d07e      	beq.n	800fbec <_dtoa_r+0x4f4>
 800faee:	9b08      	ldr	r3, [sp, #32]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d07b      	beq.n	800fbec <_dtoa_r+0x4f4>
 800faf4:	f1b9 0f00 	cmp.w	r9, #0
 800faf8:	dd38      	ble.n	800fb6c <_dtoa_r+0x474>
 800fafa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fafe:	2200      	movs	r2, #0
 800fb00:	4b69      	ldr	r3, [pc, #420]	; (800fca8 <_dtoa_r+0x5b0>)
 800fb02:	f7f0 fd0b 	bl	800051c <__aeabi_dmul>
 800fb06:	464c      	mov	r4, r9
 800fb08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb0c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800fb10:	3701      	adds	r7, #1
 800fb12:	4638      	mov	r0, r7
 800fb14:	f7f0 fc98 	bl	8000448 <__aeabi_i2d>
 800fb18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb1c:	f7f0 fcfe 	bl	800051c <__aeabi_dmul>
 800fb20:	2200      	movs	r2, #0
 800fb22:	4b62      	ldr	r3, [pc, #392]	; (800fcac <_dtoa_r+0x5b4>)
 800fb24:	f7f0 fb44 	bl	80001b0 <__adddf3>
 800fb28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fb2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fb30:	9611      	str	r6, [sp, #68]	; 0x44
 800fb32:	2c00      	cmp	r4, #0
 800fb34:	d15d      	bne.n	800fbf2 <_dtoa_r+0x4fa>
 800fb36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	4b5c      	ldr	r3, [pc, #368]	; (800fcb0 <_dtoa_r+0x5b8>)
 800fb3e:	f7f0 fb35 	bl	80001ac <__aeabi_dsub>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fb4a:	4633      	mov	r3, r6
 800fb4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb4e:	f7f0 ff75 	bl	8000a3c <__aeabi_dcmpgt>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	f040 829c 	bne.w	8010090 <_dtoa_r+0x998>
 800fb58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb5e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fb62:	f7f0 ff4d 	bl	8000a00 <__aeabi_dcmplt>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	f040 8290 	bne.w	801008c <_dtoa_r+0x994>
 800fb6c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800fb70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fb74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	f2c0 8152 	blt.w	800fe20 <_dtoa_r+0x728>
 800fb7c:	f1ba 0f0e 	cmp.w	sl, #14
 800fb80:	f300 814e 	bgt.w	800fe20 <_dtoa_r+0x728>
 800fb84:	4b45      	ldr	r3, [pc, #276]	; (800fc9c <_dtoa_r+0x5a4>)
 800fb86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fb8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fb8e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800fb92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	f280 80db 	bge.w	800fd50 <_dtoa_r+0x658>
 800fb9a:	9b08      	ldr	r3, [sp, #32]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f300 80d7 	bgt.w	800fd50 <_dtoa_r+0x658>
 800fba2:	f040 8272 	bne.w	801008a <_dtoa_r+0x992>
 800fba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	4b40      	ldr	r3, [pc, #256]	; (800fcb0 <_dtoa_r+0x5b8>)
 800fbae:	f7f0 fcb5 	bl	800051c <__aeabi_dmul>
 800fbb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbb6:	f7f0 ff37 	bl	8000a28 <__aeabi_dcmpge>
 800fbba:	9c08      	ldr	r4, [sp, #32]
 800fbbc:	4626      	mov	r6, r4
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	f040 8248 	bne.w	8010054 <_dtoa_r+0x95c>
 800fbc4:	2331      	movs	r3, #49	; 0x31
 800fbc6:	9f03      	ldr	r7, [sp, #12]
 800fbc8:	f10a 0a01 	add.w	sl, sl, #1
 800fbcc:	f807 3b01 	strb.w	r3, [r7], #1
 800fbd0:	e244      	b.n	801005c <_dtoa_r+0x964>
 800fbd2:	07e2      	lsls	r2, r4, #31
 800fbd4:	d505      	bpl.n	800fbe2 <_dtoa_r+0x4ea>
 800fbd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fbda:	f7f0 fc9f 	bl	800051c <__aeabi_dmul>
 800fbde:	2301      	movs	r3, #1
 800fbe0:	3701      	adds	r7, #1
 800fbe2:	1064      	asrs	r4, r4, #1
 800fbe4:	3608      	adds	r6, #8
 800fbe6:	e76d      	b.n	800fac4 <_dtoa_r+0x3cc>
 800fbe8:	2702      	movs	r7, #2
 800fbea:	e770      	b.n	800face <_dtoa_r+0x3d6>
 800fbec:	46d0      	mov	r8, sl
 800fbee:	9c08      	ldr	r4, [sp, #32]
 800fbf0:	e78f      	b.n	800fb12 <_dtoa_r+0x41a>
 800fbf2:	9903      	ldr	r1, [sp, #12]
 800fbf4:	4b29      	ldr	r3, [pc, #164]	; (800fc9c <_dtoa_r+0x5a4>)
 800fbf6:	4421      	add	r1, r4
 800fbf8:	9112      	str	r1, [sp, #72]	; 0x48
 800fbfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc00:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800fc04:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc08:	2900      	cmp	r1, #0
 800fc0a:	d055      	beq.n	800fcb8 <_dtoa_r+0x5c0>
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	4929      	ldr	r1, [pc, #164]	; (800fcb4 <_dtoa_r+0x5bc>)
 800fc10:	f7f0 fdae 	bl	8000770 <__aeabi_ddiv>
 800fc14:	463b      	mov	r3, r7
 800fc16:	4632      	mov	r2, r6
 800fc18:	f7f0 fac8 	bl	80001ac <__aeabi_dsub>
 800fc1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fc20:	9f03      	ldr	r7, [sp, #12]
 800fc22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc26:	f7f0 ff29 	bl	8000a7c <__aeabi_d2iz>
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	f7f0 fc0c 	bl	8000448 <__aeabi_i2d>
 800fc30:	4602      	mov	r2, r0
 800fc32:	460b      	mov	r3, r1
 800fc34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc38:	f7f0 fab8 	bl	80001ac <__aeabi_dsub>
 800fc3c:	4602      	mov	r2, r0
 800fc3e:	460b      	mov	r3, r1
 800fc40:	3430      	adds	r4, #48	; 0x30
 800fc42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fc46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fc4a:	f807 4b01 	strb.w	r4, [r7], #1
 800fc4e:	f7f0 fed7 	bl	8000a00 <__aeabi_dcmplt>
 800fc52:	2800      	cmp	r0, #0
 800fc54:	d174      	bne.n	800fd40 <_dtoa_r+0x648>
 800fc56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc5a:	2000      	movs	r0, #0
 800fc5c:	4911      	ldr	r1, [pc, #68]	; (800fca4 <_dtoa_r+0x5ac>)
 800fc5e:	f7f0 faa5 	bl	80001ac <__aeabi_dsub>
 800fc62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fc66:	f7f0 fecb 	bl	8000a00 <__aeabi_dcmplt>
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	f040 80b7 	bne.w	800fdde <_dtoa_r+0x6e6>
 800fc70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc72:	429f      	cmp	r7, r3
 800fc74:	f43f af7a 	beq.w	800fb6c <_dtoa_r+0x474>
 800fc78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	4b0a      	ldr	r3, [pc, #40]	; (800fca8 <_dtoa_r+0x5b0>)
 800fc80:	f7f0 fc4c 	bl	800051c <__aeabi_dmul>
 800fc84:	2200      	movs	r2, #0
 800fc86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fc8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc8e:	4b06      	ldr	r3, [pc, #24]	; (800fca8 <_dtoa_r+0x5b0>)
 800fc90:	f7f0 fc44 	bl	800051c <__aeabi_dmul>
 800fc94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc98:	e7c3      	b.n	800fc22 <_dtoa_r+0x52a>
 800fc9a:	bf00      	nop
 800fc9c:	080127a0 	.word	0x080127a0
 800fca0:	08012778 	.word	0x08012778
 800fca4:	3ff00000 	.word	0x3ff00000
 800fca8:	40240000 	.word	0x40240000
 800fcac:	401c0000 	.word	0x401c0000
 800fcb0:	40140000 	.word	0x40140000
 800fcb4:	3fe00000 	.word	0x3fe00000
 800fcb8:	4630      	mov	r0, r6
 800fcba:	4639      	mov	r1, r7
 800fcbc:	f7f0 fc2e 	bl	800051c <__aeabi_dmul>
 800fcc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fcc6:	9c03      	ldr	r4, [sp, #12]
 800fcc8:	9314      	str	r3, [sp, #80]	; 0x50
 800fcca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcce:	f7f0 fed5 	bl	8000a7c <__aeabi_d2iz>
 800fcd2:	9015      	str	r0, [sp, #84]	; 0x54
 800fcd4:	f7f0 fbb8 	bl	8000448 <__aeabi_i2d>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	460b      	mov	r3, r1
 800fcdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fce0:	f7f0 fa64 	bl	80001ac <__aeabi_dsub>
 800fce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fce6:	4606      	mov	r6, r0
 800fce8:	3330      	adds	r3, #48	; 0x30
 800fcea:	f804 3b01 	strb.w	r3, [r4], #1
 800fcee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcf0:	460f      	mov	r7, r1
 800fcf2:	429c      	cmp	r4, r3
 800fcf4:	f04f 0200 	mov.w	r2, #0
 800fcf8:	d124      	bne.n	800fd44 <_dtoa_r+0x64c>
 800fcfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fcfe:	4bb0      	ldr	r3, [pc, #704]	; (800ffc0 <_dtoa_r+0x8c8>)
 800fd00:	f7f0 fa56 	bl	80001b0 <__adddf3>
 800fd04:	4602      	mov	r2, r0
 800fd06:	460b      	mov	r3, r1
 800fd08:	4630      	mov	r0, r6
 800fd0a:	4639      	mov	r1, r7
 800fd0c:	f7f0 fe96 	bl	8000a3c <__aeabi_dcmpgt>
 800fd10:	2800      	cmp	r0, #0
 800fd12:	d163      	bne.n	800fddc <_dtoa_r+0x6e4>
 800fd14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fd18:	2000      	movs	r0, #0
 800fd1a:	49a9      	ldr	r1, [pc, #676]	; (800ffc0 <_dtoa_r+0x8c8>)
 800fd1c:	f7f0 fa46 	bl	80001ac <__aeabi_dsub>
 800fd20:	4602      	mov	r2, r0
 800fd22:	460b      	mov	r3, r1
 800fd24:	4630      	mov	r0, r6
 800fd26:	4639      	mov	r1, r7
 800fd28:	f7f0 fe6a 	bl	8000a00 <__aeabi_dcmplt>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	f43f af1d 	beq.w	800fb6c <_dtoa_r+0x474>
 800fd32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800fd34:	1e7b      	subs	r3, r7, #1
 800fd36:	9314      	str	r3, [sp, #80]	; 0x50
 800fd38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800fd3c:	2b30      	cmp	r3, #48	; 0x30
 800fd3e:	d0f8      	beq.n	800fd32 <_dtoa_r+0x63a>
 800fd40:	46c2      	mov	sl, r8
 800fd42:	e03b      	b.n	800fdbc <_dtoa_r+0x6c4>
 800fd44:	4b9f      	ldr	r3, [pc, #636]	; (800ffc4 <_dtoa_r+0x8cc>)
 800fd46:	f7f0 fbe9 	bl	800051c <__aeabi_dmul>
 800fd4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd4e:	e7bc      	b.n	800fcca <_dtoa_r+0x5d2>
 800fd50:	9f03      	ldr	r7, [sp, #12]
 800fd52:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800fd56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd5a:	4640      	mov	r0, r8
 800fd5c:	4649      	mov	r1, r9
 800fd5e:	f7f0 fd07 	bl	8000770 <__aeabi_ddiv>
 800fd62:	f7f0 fe8b 	bl	8000a7c <__aeabi_d2iz>
 800fd66:	4604      	mov	r4, r0
 800fd68:	f7f0 fb6e 	bl	8000448 <__aeabi_i2d>
 800fd6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd70:	f7f0 fbd4 	bl	800051c <__aeabi_dmul>
 800fd74:	4602      	mov	r2, r0
 800fd76:	460b      	mov	r3, r1
 800fd78:	4640      	mov	r0, r8
 800fd7a:	4649      	mov	r1, r9
 800fd7c:	f7f0 fa16 	bl	80001ac <__aeabi_dsub>
 800fd80:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800fd84:	f807 6b01 	strb.w	r6, [r7], #1
 800fd88:	9e03      	ldr	r6, [sp, #12]
 800fd8a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800fd8e:	1bbe      	subs	r6, r7, r6
 800fd90:	45b4      	cmp	ip, r6
 800fd92:	4602      	mov	r2, r0
 800fd94:	460b      	mov	r3, r1
 800fd96:	d136      	bne.n	800fe06 <_dtoa_r+0x70e>
 800fd98:	f7f0 fa0a 	bl	80001b0 <__adddf3>
 800fd9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fda0:	4680      	mov	r8, r0
 800fda2:	4689      	mov	r9, r1
 800fda4:	f7f0 fe4a 	bl	8000a3c <__aeabi_dcmpgt>
 800fda8:	bb58      	cbnz	r0, 800fe02 <_dtoa_r+0x70a>
 800fdaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fdae:	4640      	mov	r0, r8
 800fdb0:	4649      	mov	r1, r9
 800fdb2:	f7f0 fe1b 	bl	80009ec <__aeabi_dcmpeq>
 800fdb6:	b108      	cbz	r0, 800fdbc <_dtoa_r+0x6c4>
 800fdb8:	07e1      	lsls	r1, r4, #31
 800fdba:	d422      	bmi.n	800fe02 <_dtoa_r+0x70a>
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	4659      	mov	r1, fp
 800fdc0:	f000 fe6c 	bl	8010a9c <_Bfree>
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	703b      	strb	r3, [r7, #0]
 800fdc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800fdca:	f10a 0001 	add.w	r0, sl, #1
 800fdce:	6018      	str	r0, [r3, #0]
 800fdd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	f43f acde 	beq.w	800f794 <_dtoa_r+0x9c>
 800fdd8:	601f      	str	r7, [r3, #0]
 800fdda:	e4db      	b.n	800f794 <_dtoa_r+0x9c>
 800fddc:	4627      	mov	r7, r4
 800fdde:	463b      	mov	r3, r7
 800fde0:	461f      	mov	r7, r3
 800fde2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fde6:	2a39      	cmp	r2, #57	; 0x39
 800fde8:	d107      	bne.n	800fdfa <_dtoa_r+0x702>
 800fdea:	9a03      	ldr	r2, [sp, #12]
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d1f7      	bne.n	800fde0 <_dtoa_r+0x6e8>
 800fdf0:	2230      	movs	r2, #48	; 0x30
 800fdf2:	9903      	ldr	r1, [sp, #12]
 800fdf4:	f108 0801 	add.w	r8, r8, #1
 800fdf8:	700a      	strb	r2, [r1, #0]
 800fdfa:	781a      	ldrb	r2, [r3, #0]
 800fdfc:	3201      	adds	r2, #1
 800fdfe:	701a      	strb	r2, [r3, #0]
 800fe00:	e79e      	b.n	800fd40 <_dtoa_r+0x648>
 800fe02:	46d0      	mov	r8, sl
 800fe04:	e7eb      	b.n	800fdde <_dtoa_r+0x6e6>
 800fe06:	2200      	movs	r2, #0
 800fe08:	4b6e      	ldr	r3, [pc, #440]	; (800ffc4 <_dtoa_r+0x8cc>)
 800fe0a:	f7f0 fb87 	bl	800051c <__aeabi_dmul>
 800fe0e:	2200      	movs	r2, #0
 800fe10:	2300      	movs	r3, #0
 800fe12:	4680      	mov	r8, r0
 800fe14:	4689      	mov	r9, r1
 800fe16:	f7f0 fde9 	bl	80009ec <__aeabi_dcmpeq>
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d09b      	beq.n	800fd56 <_dtoa_r+0x65e>
 800fe1e:	e7cd      	b.n	800fdbc <_dtoa_r+0x6c4>
 800fe20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe22:	2a00      	cmp	r2, #0
 800fe24:	f000 80d0 	beq.w	800ffc8 <_dtoa_r+0x8d0>
 800fe28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fe2a:	2a01      	cmp	r2, #1
 800fe2c:	f300 80ae 	bgt.w	800ff8c <_dtoa_r+0x894>
 800fe30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fe32:	2a00      	cmp	r2, #0
 800fe34:	f000 80a6 	beq.w	800ff84 <_dtoa_r+0x88c>
 800fe38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fe3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fe3e:	9f06      	ldr	r7, [sp, #24]
 800fe40:	9a06      	ldr	r2, [sp, #24]
 800fe42:	2101      	movs	r1, #1
 800fe44:	441a      	add	r2, r3
 800fe46:	9206      	str	r2, [sp, #24]
 800fe48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	441a      	add	r2, r3
 800fe4e:	9209      	str	r2, [sp, #36]	; 0x24
 800fe50:	f000 ff24 	bl	8010c9c <__i2b>
 800fe54:	4606      	mov	r6, r0
 800fe56:	2f00      	cmp	r7, #0
 800fe58:	dd0c      	ble.n	800fe74 <_dtoa_r+0x77c>
 800fe5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	dd09      	ble.n	800fe74 <_dtoa_r+0x77c>
 800fe60:	42bb      	cmp	r3, r7
 800fe62:	bfa8      	it	ge
 800fe64:	463b      	movge	r3, r7
 800fe66:	9a06      	ldr	r2, [sp, #24]
 800fe68:	1aff      	subs	r7, r7, r3
 800fe6a:	1ad2      	subs	r2, r2, r3
 800fe6c:	9206      	str	r2, [sp, #24]
 800fe6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	9309      	str	r3, [sp, #36]	; 0x24
 800fe74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe76:	b1f3      	cbz	r3, 800feb6 <_dtoa_r+0x7be>
 800fe78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	f000 80a8 	beq.w	800ffd0 <_dtoa_r+0x8d8>
 800fe80:	2c00      	cmp	r4, #0
 800fe82:	dd10      	ble.n	800fea6 <_dtoa_r+0x7ae>
 800fe84:	4631      	mov	r1, r6
 800fe86:	4622      	mov	r2, r4
 800fe88:	4628      	mov	r0, r5
 800fe8a:	f000 ffc5 	bl	8010e18 <__pow5mult>
 800fe8e:	465a      	mov	r2, fp
 800fe90:	4601      	mov	r1, r0
 800fe92:	4606      	mov	r6, r0
 800fe94:	4628      	mov	r0, r5
 800fe96:	f000 ff17 	bl	8010cc8 <__multiply>
 800fe9a:	4680      	mov	r8, r0
 800fe9c:	4659      	mov	r1, fp
 800fe9e:	4628      	mov	r0, r5
 800fea0:	f000 fdfc 	bl	8010a9c <_Bfree>
 800fea4:	46c3      	mov	fp, r8
 800fea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fea8:	1b1a      	subs	r2, r3, r4
 800feaa:	d004      	beq.n	800feb6 <_dtoa_r+0x7be>
 800feac:	4659      	mov	r1, fp
 800feae:	4628      	mov	r0, r5
 800feb0:	f000 ffb2 	bl	8010e18 <__pow5mult>
 800feb4:	4683      	mov	fp, r0
 800feb6:	2101      	movs	r1, #1
 800feb8:	4628      	mov	r0, r5
 800feba:	f000 feef 	bl	8010c9c <__i2b>
 800febe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fec0:	4604      	mov	r4, r0
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f340 8086 	ble.w	800ffd4 <_dtoa_r+0x8dc>
 800fec8:	461a      	mov	r2, r3
 800feca:	4601      	mov	r1, r0
 800fecc:	4628      	mov	r0, r5
 800fece:	f000 ffa3 	bl	8010e18 <__pow5mult>
 800fed2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fed4:	4604      	mov	r4, r0
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	dd7f      	ble.n	800ffda <_dtoa_r+0x8e2>
 800feda:	f04f 0800 	mov.w	r8, #0
 800fede:	6923      	ldr	r3, [r4, #16]
 800fee0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fee4:	6918      	ldr	r0, [r3, #16]
 800fee6:	f000 fe8b 	bl	8010c00 <__hi0bits>
 800feea:	f1c0 0020 	rsb	r0, r0, #32
 800feee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fef0:	4418      	add	r0, r3
 800fef2:	f010 001f 	ands.w	r0, r0, #31
 800fef6:	f000 8092 	beq.w	801001e <_dtoa_r+0x926>
 800fefa:	f1c0 0320 	rsb	r3, r0, #32
 800fefe:	2b04      	cmp	r3, #4
 800ff00:	f340 808a 	ble.w	8010018 <_dtoa_r+0x920>
 800ff04:	f1c0 001c 	rsb	r0, r0, #28
 800ff08:	9b06      	ldr	r3, [sp, #24]
 800ff0a:	4407      	add	r7, r0
 800ff0c:	4403      	add	r3, r0
 800ff0e:	9306      	str	r3, [sp, #24]
 800ff10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff12:	4403      	add	r3, r0
 800ff14:	9309      	str	r3, [sp, #36]	; 0x24
 800ff16:	9b06      	ldr	r3, [sp, #24]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	dd05      	ble.n	800ff28 <_dtoa_r+0x830>
 800ff1c:	4659      	mov	r1, fp
 800ff1e:	461a      	mov	r2, r3
 800ff20:	4628      	mov	r0, r5
 800ff22:	f000 ffd3 	bl	8010ecc <__lshift>
 800ff26:	4683      	mov	fp, r0
 800ff28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	dd05      	ble.n	800ff3a <_dtoa_r+0x842>
 800ff2e:	4621      	mov	r1, r4
 800ff30:	461a      	mov	r2, r3
 800ff32:	4628      	mov	r0, r5
 800ff34:	f000 ffca 	bl	8010ecc <__lshift>
 800ff38:	4604      	mov	r4, r0
 800ff3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d070      	beq.n	8010022 <_dtoa_r+0x92a>
 800ff40:	4621      	mov	r1, r4
 800ff42:	4658      	mov	r0, fp
 800ff44:	f001 f832 	bl	8010fac <__mcmp>
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	da6a      	bge.n	8010022 <_dtoa_r+0x92a>
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	4659      	mov	r1, fp
 800ff50:	220a      	movs	r2, #10
 800ff52:	4628      	mov	r0, r5
 800ff54:	f000 fdc4 	bl	8010ae0 <__multadd>
 800ff58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff5a:	4683      	mov	fp, r0
 800ff5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f000 8194 	beq.w	801028e <_dtoa_r+0xb96>
 800ff66:	4631      	mov	r1, r6
 800ff68:	2300      	movs	r3, #0
 800ff6a:	220a      	movs	r2, #10
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	f000 fdb7 	bl	8010ae0 <__multadd>
 800ff72:	f1b9 0f00 	cmp.w	r9, #0
 800ff76:	4606      	mov	r6, r0
 800ff78:	f300 8093 	bgt.w	80100a2 <_dtoa_r+0x9aa>
 800ff7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ff7e:	2b02      	cmp	r3, #2
 800ff80:	dc57      	bgt.n	8010032 <_dtoa_r+0x93a>
 800ff82:	e08e      	b.n	80100a2 <_dtoa_r+0x9aa>
 800ff84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ff86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ff8a:	e757      	b.n	800fe3c <_dtoa_r+0x744>
 800ff8c:	9b08      	ldr	r3, [sp, #32]
 800ff8e:	1e5c      	subs	r4, r3, #1
 800ff90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff92:	42a3      	cmp	r3, r4
 800ff94:	bfb7      	itett	lt
 800ff96:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ff98:	1b1c      	subge	r4, r3, r4
 800ff9a:	1ae2      	sublt	r2, r4, r3
 800ff9c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ff9e:	bfbe      	ittt	lt
 800ffa0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ffa2:	189b      	addlt	r3, r3, r2
 800ffa4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ffa6:	9b08      	ldr	r3, [sp, #32]
 800ffa8:	bfb8      	it	lt
 800ffaa:	2400      	movlt	r4, #0
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	bfbb      	ittet	lt
 800ffb0:	9b06      	ldrlt	r3, [sp, #24]
 800ffb2:	9a08      	ldrlt	r2, [sp, #32]
 800ffb4:	9f06      	ldrge	r7, [sp, #24]
 800ffb6:	1a9f      	sublt	r7, r3, r2
 800ffb8:	bfac      	ite	ge
 800ffba:	9b08      	ldrge	r3, [sp, #32]
 800ffbc:	2300      	movlt	r3, #0
 800ffbe:	e73f      	b.n	800fe40 <_dtoa_r+0x748>
 800ffc0:	3fe00000 	.word	0x3fe00000
 800ffc4:	40240000 	.word	0x40240000
 800ffc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ffca:	9f06      	ldr	r7, [sp, #24]
 800ffcc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ffce:	e742      	b.n	800fe56 <_dtoa_r+0x75e>
 800ffd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffd2:	e76b      	b.n	800feac <_dtoa_r+0x7b4>
 800ffd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	dc19      	bgt.n	801000e <_dtoa_r+0x916>
 800ffda:	9b04      	ldr	r3, [sp, #16]
 800ffdc:	b9bb      	cbnz	r3, 801000e <_dtoa_r+0x916>
 800ffde:	9b05      	ldr	r3, [sp, #20]
 800ffe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffe4:	b99b      	cbnz	r3, 801000e <_dtoa_r+0x916>
 800ffe6:	9b05      	ldr	r3, [sp, #20]
 800ffe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ffec:	0d1b      	lsrs	r3, r3, #20
 800ffee:	051b      	lsls	r3, r3, #20
 800fff0:	b183      	cbz	r3, 8010014 <_dtoa_r+0x91c>
 800fff2:	f04f 0801 	mov.w	r8, #1
 800fff6:	9b06      	ldr	r3, [sp, #24]
 800fff8:	3301      	adds	r3, #1
 800fffa:	9306      	str	r3, [sp, #24]
 800fffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fffe:	3301      	adds	r3, #1
 8010000:	9309      	str	r3, [sp, #36]	; 0x24
 8010002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010004:	2b00      	cmp	r3, #0
 8010006:	f47f af6a 	bne.w	800fede <_dtoa_r+0x7e6>
 801000a:	2001      	movs	r0, #1
 801000c:	e76f      	b.n	800feee <_dtoa_r+0x7f6>
 801000e:	f04f 0800 	mov.w	r8, #0
 8010012:	e7f6      	b.n	8010002 <_dtoa_r+0x90a>
 8010014:	4698      	mov	r8, r3
 8010016:	e7f4      	b.n	8010002 <_dtoa_r+0x90a>
 8010018:	f43f af7d 	beq.w	800ff16 <_dtoa_r+0x81e>
 801001c:	4618      	mov	r0, r3
 801001e:	301c      	adds	r0, #28
 8010020:	e772      	b.n	800ff08 <_dtoa_r+0x810>
 8010022:	9b08      	ldr	r3, [sp, #32]
 8010024:	2b00      	cmp	r3, #0
 8010026:	dc36      	bgt.n	8010096 <_dtoa_r+0x99e>
 8010028:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801002a:	2b02      	cmp	r3, #2
 801002c:	dd33      	ble.n	8010096 <_dtoa_r+0x99e>
 801002e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010032:	f1b9 0f00 	cmp.w	r9, #0
 8010036:	d10d      	bne.n	8010054 <_dtoa_r+0x95c>
 8010038:	4621      	mov	r1, r4
 801003a:	464b      	mov	r3, r9
 801003c:	2205      	movs	r2, #5
 801003e:	4628      	mov	r0, r5
 8010040:	f000 fd4e 	bl	8010ae0 <__multadd>
 8010044:	4601      	mov	r1, r0
 8010046:	4604      	mov	r4, r0
 8010048:	4658      	mov	r0, fp
 801004a:	f000 ffaf 	bl	8010fac <__mcmp>
 801004e:	2800      	cmp	r0, #0
 8010050:	f73f adb8 	bgt.w	800fbc4 <_dtoa_r+0x4cc>
 8010054:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010056:	9f03      	ldr	r7, [sp, #12]
 8010058:	ea6f 0a03 	mvn.w	sl, r3
 801005c:	f04f 0800 	mov.w	r8, #0
 8010060:	4621      	mov	r1, r4
 8010062:	4628      	mov	r0, r5
 8010064:	f000 fd1a 	bl	8010a9c <_Bfree>
 8010068:	2e00      	cmp	r6, #0
 801006a:	f43f aea7 	beq.w	800fdbc <_dtoa_r+0x6c4>
 801006e:	f1b8 0f00 	cmp.w	r8, #0
 8010072:	d005      	beq.n	8010080 <_dtoa_r+0x988>
 8010074:	45b0      	cmp	r8, r6
 8010076:	d003      	beq.n	8010080 <_dtoa_r+0x988>
 8010078:	4641      	mov	r1, r8
 801007a:	4628      	mov	r0, r5
 801007c:	f000 fd0e 	bl	8010a9c <_Bfree>
 8010080:	4631      	mov	r1, r6
 8010082:	4628      	mov	r0, r5
 8010084:	f000 fd0a 	bl	8010a9c <_Bfree>
 8010088:	e698      	b.n	800fdbc <_dtoa_r+0x6c4>
 801008a:	2400      	movs	r4, #0
 801008c:	4626      	mov	r6, r4
 801008e:	e7e1      	b.n	8010054 <_dtoa_r+0x95c>
 8010090:	46c2      	mov	sl, r8
 8010092:	4626      	mov	r6, r4
 8010094:	e596      	b.n	800fbc4 <_dtoa_r+0x4cc>
 8010096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010098:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801009c:	2b00      	cmp	r3, #0
 801009e:	f000 80fd 	beq.w	801029c <_dtoa_r+0xba4>
 80100a2:	2f00      	cmp	r7, #0
 80100a4:	dd05      	ble.n	80100b2 <_dtoa_r+0x9ba>
 80100a6:	4631      	mov	r1, r6
 80100a8:	463a      	mov	r2, r7
 80100aa:	4628      	mov	r0, r5
 80100ac:	f000 ff0e 	bl	8010ecc <__lshift>
 80100b0:	4606      	mov	r6, r0
 80100b2:	f1b8 0f00 	cmp.w	r8, #0
 80100b6:	d05c      	beq.n	8010172 <_dtoa_r+0xa7a>
 80100b8:	4628      	mov	r0, r5
 80100ba:	6871      	ldr	r1, [r6, #4]
 80100bc:	f000 fcae 	bl	8010a1c <_Balloc>
 80100c0:	4607      	mov	r7, r0
 80100c2:	b928      	cbnz	r0, 80100d0 <_dtoa_r+0x9d8>
 80100c4:	4602      	mov	r2, r0
 80100c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80100ca:	4b7f      	ldr	r3, [pc, #508]	; (80102c8 <_dtoa_r+0xbd0>)
 80100cc:	f7ff bb28 	b.w	800f720 <_dtoa_r+0x28>
 80100d0:	6932      	ldr	r2, [r6, #16]
 80100d2:	f106 010c 	add.w	r1, r6, #12
 80100d6:	3202      	adds	r2, #2
 80100d8:	0092      	lsls	r2, r2, #2
 80100da:	300c      	adds	r0, #12
 80100dc:	f7fd ff4e 	bl	800df7c <memcpy>
 80100e0:	2201      	movs	r2, #1
 80100e2:	4639      	mov	r1, r7
 80100e4:	4628      	mov	r0, r5
 80100e6:	f000 fef1 	bl	8010ecc <__lshift>
 80100ea:	46b0      	mov	r8, r6
 80100ec:	4606      	mov	r6, r0
 80100ee:	9b03      	ldr	r3, [sp, #12]
 80100f0:	3301      	adds	r3, #1
 80100f2:	9308      	str	r3, [sp, #32]
 80100f4:	9b03      	ldr	r3, [sp, #12]
 80100f6:	444b      	add	r3, r9
 80100f8:	930a      	str	r3, [sp, #40]	; 0x28
 80100fa:	9b04      	ldr	r3, [sp, #16]
 80100fc:	f003 0301 	and.w	r3, r3, #1
 8010100:	9309      	str	r3, [sp, #36]	; 0x24
 8010102:	9b08      	ldr	r3, [sp, #32]
 8010104:	4621      	mov	r1, r4
 8010106:	3b01      	subs	r3, #1
 8010108:	4658      	mov	r0, fp
 801010a:	9304      	str	r3, [sp, #16]
 801010c:	f7ff fa66 	bl	800f5dc <quorem>
 8010110:	4603      	mov	r3, r0
 8010112:	4641      	mov	r1, r8
 8010114:	3330      	adds	r3, #48	; 0x30
 8010116:	9006      	str	r0, [sp, #24]
 8010118:	4658      	mov	r0, fp
 801011a:	930b      	str	r3, [sp, #44]	; 0x2c
 801011c:	f000 ff46 	bl	8010fac <__mcmp>
 8010120:	4632      	mov	r2, r6
 8010122:	4681      	mov	r9, r0
 8010124:	4621      	mov	r1, r4
 8010126:	4628      	mov	r0, r5
 8010128:	f000 ff5c 	bl	8010fe4 <__mdiff>
 801012c:	68c2      	ldr	r2, [r0, #12]
 801012e:	4607      	mov	r7, r0
 8010130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010132:	bb02      	cbnz	r2, 8010176 <_dtoa_r+0xa7e>
 8010134:	4601      	mov	r1, r0
 8010136:	4658      	mov	r0, fp
 8010138:	f000 ff38 	bl	8010fac <__mcmp>
 801013c:	4602      	mov	r2, r0
 801013e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010140:	4639      	mov	r1, r7
 8010142:	4628      	mov	r0, r5
 8010144:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8010148:	f000 fca8 	bl	8010a9c <_Bfree>
 801014c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801014e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010150:	9f08      	ldr	r7, [sp, #32]
 8010152:	ea43 0102 	orr.w	r1, r3, r2
 8010156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010158:	430b      	orrs	r3, r1
 801015a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801015c:	d10d      	bne.n	801017a <_dtoa_r+0xa82>
 801015e:	2b39      	cmp	r3, #57	; 0x39
 8010160:	d029      	beq.n	80101b6 <_dtoa_r+0xabe>
 8010162:	f1b9 0f00 	cmp.w	r9, #0
 8010166:	dd01      	ble.n	801016c <_dtoa_r+0xa74>
 8010168:	9b06      	ldr	r3, [sp, #24]
 801016a:	3331      	adds	r3, #49	; 0x31
 801016c:	9a04      	ldr	r2, [sp, #16]
 801016e:	7013      	strb	r3, [r2, #0]
 8010170:	e776      	b.n	8010060 <_dtoa_r+0x968>
 8010172:	4630      	mov	r0, r6
 8010174:	e7b9      	b.n	80100ea <_dtoa_r+0x9f2>
 8010176:	2201      	movs	r2, #1
 8010178:	e7e2      	b.n	8010140 <_dtoa_r+0xa48>
 801017a:	f1b9 0f00 	cmp.w	r9, #0
 801017e:	db06      	blt.n	801018e <_dtoa_r+0xa96>
 8010180:	9922      	ldr	r1, [sp, #136]	; 0x88
 8010182:	ea41 0909 	orr.w	r9, r1, r9
 8010186:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010188:	ea59 0101 	orrs.w	r1, r9, r1
 801018c:	d120      	bne.n	80101d0 <_dtoa_r+0xad8>
 801018e:	2a00      	cmp	r2, #0
 8010190:	ddec      	ble.n	801016c <_dtoa_r+0xa74>
 8010192:	4659      	mov	r1, fp
 8010194:	2201      	movs	r2, #1
 8010196:	4628      	mov	r0, r5
 8010198:	9308      	str	r3, [sp, #32]
 801019a:	f000 fe97 	bl	8010ecc <__lshift>
 801019e:	4621      	mov	r1, r4
 80101a0:	4683      	mov	fp, r0
 80101a2:	f000 ff03 	bl	8010fac <__mcmp>
 80101a6:	2800      	cmp	r0, #0
 80101a8:	9b08      	ldr	r3, [sp, #32]
 80101aa:	dc02      	bgt.n	80101b2 <_dtoa_r+0xaba>
 80101ac:	d1de      	bne.n	801016c <_dtoa_r+0xa74>
 80101ae:	07da      	lsls	r2, r3, #31
 80101b0:	d5dc      	bpl.n	801016c <_dtoa_r+0xa74>
 80101b2:	2b39      	cmp	r3, #57	; 0x39
 80101b4:	d1d8      	bne.n	8010168 <_dtoa_r+0xa70>
 80101b6:	2339      	movs	r3, #57	; 0x39
 80101b8:	9a04      	ldr	r2, [sp, #16]
 80101ba:	7013      	strb	r3, [r2, #0]
 80101bc:	463b      	mov	r3, r7
 80101be:	461f      	mov	r7, r3
 80101c0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80101c4:	3b01      	subs	r3, #1
 80101c6:	2a39      	cmp	r2, #57	; 0x39
 80101c8:	d050      	beq.n	801026c <_dtoa_r+0xb74>
 80101ca:	3201      	adds	r2, #1
 80101cc:	701a      	strb	r2, [r3, #0]
 80101ce:	e747      	b.n	8010060 <_dtoa_r+0x968>
 80101d0:	2a00      	cmp	r2, #0
 80101d2:	dd03      	ble.n	80101dc <_dtoa_r+0xae4>
 80101d4:	2b39      	cmp	r3, #57	; 0x39
 80101d6:	d0ee      	beq.n	80101b6 <_dtoa_r+0xabe>
 80101d8:	3301      	adds	r3, #1
 80101da:	e7c7      	b.n	801016c <_dtoa_r+0xa74>
 80101dc:	9a08      	ldr	r2, [sp, #32]
 80101de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80101e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80101e4:	428a      	cmp	r2, r1
 80101e6:	d02a      	beq.n	801023e <_dtoa_r+0xb46>
 80101e8:	4659      	mov	r1, fp
 80101ea:	2300      	movs	r3, #0
 80101ec:	220a      	movs	r2, #10
 80101ee:	4628      	mov	r0, r5
 80101f0:	f000 fc76 	bl	8010ae0 <__multadd>
 80101f4:	45b0      	cmp	r8, r6
 80101f6:	4683      	mov	fp, r0
 80101f8:	f04f 0300 	mov.w	r3, #0
 80101fc:	f04f 020a 	mov.w	r2, #10
 8010200:	4641      	mov	r1, r8
 8010202:	4628      	mov	r0, r5
 8010204:	d107      	bne.n	8010216 <_dtoa_r+0xb1e>
 8010206:	f000 fc6b 	bl	8010ae0 <__multadd>
 801020a:	4680      	mov	r8, r0
 801020c:	4606      	mov	r6, r0
 801020e:	9b08      	ldr	r3, [sp, #32]
 8010210:	3301      	adds	r3, #1
 8010212:	9308      	str	r3, [sp, #32]
 8010214:	e775      	b.n	8010102 <_dtoa_r+0xa0a>
 8010216:	f000 fc63 	bl	8010ae0 <__multadd>
 801021a:	4631      	mov	r1, r6
 801021c:	4680      	mov	r8, r0
 801021e:	2300      	movs	r3, #0
 8010220:	220a      	movs	r2, #10
 8010222:	4628      	mov	r0, r5
 8010224:	f000 fc5c 	bl	8010ae0 <__multadd>
 8010228:	4606      	mov	r6, r0
 801022a:	e7f0      	b.n	801020e <_dtoa_r+0xb16>
 801022c:	f1b9 0f00 	cmp.w	r9, #0
 8010230:	bfcc      	ite	gt
 8010232:	464f      	movgt	r7, r9
 8010234:	2701      	movle	r7, #1
 8010236:	f04f 0800 	mov.w	r8, #0
 801023a:	9a03      	ldr	r2, [sp, #12]
 801023c:	4417      	add	r7, r2
 801023e:	4659      	mov	r1, fp
 8010240:	2201      	movs	r2, #1
 8010242:	4628      	mov	r0, r5
 8010244:	9308      	str	r3, [sp, #32]
 8010246:	f000 fe41 	bl	8010ecc <__lshift>
 801024a:	4621      	mov	r1, r4
 801024c:	4683      	mov	fp, r0
 801024e:	f000 fead 	bl	8010fac <__mcmp>
 8010252:	2800      	cmp	r0, #0
 8010254:	dcb2      	bgt.n	80101bc <_dtoa_r+0xac4>
 8010256:	d102      	bne.n	801025e <_dtoa_r+0xb66>
 8010258:	9b08      	ldr	r3, [sp, #32]
 801025a:	07db      	lsls	r3, r3, #31
 801025c:	d4ae      	bmi.n	80101bc <_dtoa_r+0xac4>
 801025e:	463b      	mov	r3, r7
 8010260:	461f      	mov	r7, r3
 8010262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010266:	2a30      	cmp	r2, #48	; 0x30
 8010268:	d0fa      	beq.n	8010260 <_dtoa_r+0xb68>
 801026a:	e6f9      	b.n	8010060 <_dtoa_r+0x968>
 801026c:	9a03      	ldr	r2, [sp, #12]
 801026e:	429a      	cmp	r2, r3
 8010270:	d1a5      	bne.n	80101be <_dtoa_r+0xac6>
 8010272:	2331      	movs	r3, #49	; 0x31
 8010274:	f10a 0a01 	add.w	sl, sl, #1
 8010278:	e779      	b.n	801016e <_dtoa_r+0xa76>
 801027a:	4b14      	ldr	r3, [pc, #80]	; (80102cc <_dtoa_r+0xbd4>)
 801027c:	f7ff baa8 	b.w	800f7d0 <_dtoa_r+0xd8>
 8010280:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010282:	2b00      	cmp	r3, #0
 8010284:	f47f aa81 	bne.w	800f78a <_dtoa_r+0x92>
 8010288:	4b11      	ldr	r3, [pc, #68]	; (80102d0 <_dtoa_r+0xbd8>)
 801028a:	f7ff baa1 	b.w	800f7d0 <_dtoa_r+0xd8>
 801028e:	f1b9 0f00 	cmp.w	r9, #0
 8010292:	dc03      	bgt.n	801029c <_dtoa_r+0xba4>
 8010294:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010296:	2b02      	cmp	r3, #2
 8010298:	f73f aecb 	bgt.w	8010032 <_dtoa_r+0x93a>
 801029c:	9f03      	ldr	r7, [sp, #12]
 801029e:	4621      	mov	r1, r4
 80102a0:	4658      	mov	r0, fp
 80102a2:	f7ff f99b 	bl	800f5dc <quorem>
 80102a6:	9a03      	ldr	r2, [sp, #12]
 80102a8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80102ac:	f807 3b01 	strb.w	r3, [r7], #1
 80102b0:	1aba      	subs	r2, r7, r2
 80102b2:	4591      	cmp	r9, r2
 80102b4:	ddba      	ble.n	801022c <_dtoa_r+0xb34>
 80102b6:	4659      	mov	r1, fp
 80102b8:	2300      	movs	r3, #0
 80102ba:	220a      	movs	r2, #10
 80102bc:	4628      	mov	r0, r5
 80102be:	f000 fc0f 	bl	8010ae0 <__multadd>
 80102c2:	4683      	mov	fp, r0
 80102c4:	e7eb      	b.n	801029e <_dtoa_r+0xba6>
 80102c6:	bf00      	nop
 80102c8:	08012690 	.word	0x08012690
 80102cc:	08012500 	.word	0x08012500
 80102d0:	08012628 	.word	0x08012628

080102d4 <fiprintf>:
 80102d4:	b40e      	push	{r1, r2, r3}
 80102d6:	b503      	push	{r0, r1, lr}
 80102d8:	4601      	mov	r1, r0
 80102da:	ab03      	add	r3, sp, #12
 80102dc:	4805      	ldr	r0, [pc, #20]	; (80102f4 <fiprintf+0x20>)
 80102de:	f853 2b04 	ldr.w	r2, [r3], #4
 80102e2:	6800      	ldr	r0, [r0, #0]
 80102e4:	9301      	str	r3, [sp, #4]
 80102e6:	f001 fac5 	bl	8011874 <_vfiprintf_r>
 80102ea:	b002      	add	sp, #8
 80102ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80102f0:	b003      	add	sp, #12
 80102f2:	4770      	bx	lr
 80102f4:	20000834 	.word	0x20000834

080102f8 <rshift>:
 80102f8:	6903      	ldr	r3, [r0, #16]
 80102fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010302:	f100 0414 	add.w	r4, r0, #20
 8010306:	ea4f 1261 	mov.w	r2, r1, asr #5
 801030a:	dd46      	ble.n	801039a <rshift+0xa2>
 801030c:	f011 011f 	ands.w	r1, r1, #31
 8010310:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010314:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010318:	d10c      	bne.n	8010334 <rshift+0x3c>
 801031a:	4629      	mov	r1, r5
 801031c:	f100 0710 	add.w	r7, r0, #16
 8010320:	42b1      	cmp	r1, r6
 8010322:	d335      	bcc.n	8010390 <rshift+0x98>
 8010324:	1a9b      	subs	r3, r3, r2
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	1eea      	subs	r2, r5, #3
 801032a:	4296      	cmp	r6, r2
 801032c:	bf38      	it	cc
 801032e:	2300      	movcc	r3, #0
 8010330:	4423      	add	r3, r4
 8010332:	e015      	b.n	8010360 <rshift+0x68>
 8010334:	46a1      	mov	r9, r4
 8010336:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801033a:	f1c1 0820 	rsb	r8, r1, #32
 801033e:	40cf      	lsrs	r7, r1
 8010340:	f105 0e04 	add.w	lr, r5, #4
 8010344:	4576      	cmp	r6, lr
 8010346:	46f4      	mov	ip, lr
 8010348:	d816      	bhi.n	8010378 <rshift+0x80>
 801034a:	1a9a      	subs	r2, r3, r2
 801034c:	0092      	lsls	r2, r2, #2
 801034e:	3a04      	subs	r2, #4
 8010350:	3501      	adds	r5, #1
 8010352:	42ae      	cmp	r6, r5
 8010354:	bf38      	it	cc
 8010356:	2200      	movcc	r2, #0
 8010358:	18a3      	adds	r3, r4, r2
 801035a:	50a7      	str	r7, [r4, r2]
 801035c:	b107      	cbz	r7, 8010360 <rshift+0x68>
 801035e:	3304      	adds	r3, #4
 8010360:	42a3      	cmp	r3, r4
 8010362:	eba3 0204 	sub.w	r2, r3, r4
 8010366:	bf08      	it	eq
 8010368:	2300      	moveq	r3, #0
 801036a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801036e:	6102      	str	r2, [r0, #16]
 8010370:	bf08      	it	eq
 8010372:	6143      	streq	r3, [r0, #20]
 8010374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010378:	f8dc c000 	ldr.w	ip, [ip]
 801037c:	fa0c fc08 	lsl.w	ip, ip, r8
 8010380:	ea4c 0707 	orr.w	r7, ip, r7
 8010384:	f849 7b04 	str.w	r7, [r9], #4
 8010388:	f85e 7b04 	ldr.w	r7, [lr], #4
 801038c:	40cf      	lsrs	r7, r1
 801038e:	e7d9      	b.n	8010344 <rshift+0x4c>
 8010390:	f851 cb04 	ldr.w	ip, [r1], #4
 8010394:	f847 cf04 	str.w	ip, [r7, #4]!
 8010398:	e7c2      	b.n	8010320 <rshift+0x28>
 801039a:	4623      	mov	r3, r4
 801039c:	e7e0      	b.n	8010360 <rshift+0x68>

0801039e <__hexdig_fun>:
 801039e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80103a2:	2b09      	cmp	r3, #9
 80103a4:	d802      	bhi.n	80103ac <__hexdig_fun+0xe>
 80103a6:	3820      	subs	r0, #32
 80103a8:	b2c0      	uxtb	r0, r0
 80103aa:	4770      	bx	lr
 80103ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80103b0:	2b05      	cmp	r3, #5
 80103b2:	d801      	bhi.n	80103b8 <__hexdig_fun+0x1a>
 80103b4:	3847      	subs	r0, #71	; 0x47
 80103b6:	e7f7      	b.n	80103a8 <__hexdig_fun+0xa>
 80103b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80103bc:	2b05      	cmp	r3, #5
 80103be:	d801      	bhi.n	80103c4 <__hexdig_fun+0x26>
 80103c0:	3827      	subs	r0, #39	; 0x27
 80103c2:	e7f1      	b.n	80103a8 <__hexdig_fun+0xa>
 80103c4:	2000      	movs	r0, #0
 80103c6:	4770      	bx	lr

080103c8 <__gethex>:
 80103c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103cc:	b08b      	sub	sp, #44	; 0x2c
 80103ce:	9305      	str	r3, [sp, #20]
 80103d0:	4bb2      	ldr	r3, [pc, #712]	; (801069c <__gethex+0x2d4>)
 80103d2:	9002      	str	r0, [sp, #8]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	468b      	mov	fp, r1
 80103d8:	4618      	mov	r0, r3
 80103da:	4690      	mov	r8, r2
 80103dc:	9303      	str	r3, [sp, #12]
 80103de:	f7ef fed9 	bl	8000194 <strlen>
 80103e2:	4682      	mov	sl, r0
 80103e4:	9b03      	ldr	r3, [sp, #12]
 80103e6:	f8db 2000 	ldr.w	r2, [fp]
 80103ea:	4403      	add	r3, r0
 80103ec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80103f0:	9306      	str	r3, [sp, #24]
 80103f2:	1c93      	adds	r3, r2, #2
 80103f4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80103f8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80103fc:	32fe      	adds	r2, #254	; 0xfe
 80103fe:	18d1      	adds	r1, r2, r3
 8010400:	461f      	mov	r7, r3
 8010402:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010406:	9101      	str	r1, [sp, #4]
 8010408:	2830      	cmp	r0, #48	; 0x30
 801040a:	d0f8      	beq.n	80103fe <__gethex+0x36>
 801040c:	f7ff ffc7 	bl	801039e <__hexdig_fun>
 8010410:	4604      	mov	r4, r0
 8010412:	2800      	cmp	r0, #0
 8010414:	d13a      	bne.n	801048c <__gethex+0xc4>
 8010416:	4652      	mov	r2, sl
 8010418:	4638      	mov	r0, r7
 801041a:	9903      	ldr	r1, [sp, #12]
 801041c:	f001 fb70 	bl	8011b00 <strncmp>
 8010420:	4605      	mov	r5, r0
 8010422:	2800      	cmp	r0, #0
 8010424:	d166      	bne.n	80104f4 <__gethex+0x12c>
 8010426:	f817 000a 	ldrb.w	r0, [r7, sl]
 801042a:	eb07 060a 	add.w	r6, r7, sl
 801042e:	f7ff ffb6 	bl	801039e <__hexdig_fun>
 8010432:	2800      	cmp	r0, #0
 8010434:	d060      	beq.n	80104f8 <__gethex+0x130>
 8010436:	4633      	mov	r3, r6
 8010438:	7818      	ldrb	r0, [r3, #0]
 801043a:	461f      	mov	r7, r3
 801043c:	2830      	cmp	r0, #48	; 0x30
 801043e:	f103 0301 	add.w	r3, r3, #1
 8010442:	d0f9      	beq.n	8010438 <__gethex+0x70>
 8010444:	f7ff ffab 	bl	801039e <__hexdig_fun>
 8010448:	2301      	movs	r3, #1
 801044a:	fab0 f480 	clz	r4, r0
 801044e:	4635      	mov	r5, r6
 8010450:	0964      	lsrs	r4, r4, #5
 8010452:	9301      	str	r3, [sp, #4]
 8010454:	463a      	mov	r2, r7
 8010456:	4616      	mov	r6, r2
 8010458:	7830      	ldrb	r0, [r6, #0]
 801045a:	3201      	adds	r2, #1
 801045c:	f7ff ff9f 	bl	801039e <__hexdig_fun>
 8010460:	2800      	cmp	r0, #0
 8010462:	d1f8      	bne.n	8010456 <__gethex+0x8e>
 8010464:	4652      	mov	r2, sl
 8010466:	4630      	mov	r0, r6
 8010468:	9903      	ldr	r1, [sp, #12]
 801046a:	f001 fb49 	bl	8011b00 <strncmp>
 801046e:	b980      	cbnz	r0, 8010492 <__gethex+0xca>
 8010470:	b94d      	cbnz	r5, 8010486 <__gethex+0xbe>
 8010472:	eb06 050a 	add.w	r5, r6, sl
 8010476:	462a      	mov	r2, r5
 8010478:	4616      	mov	r6, r2
 801047a:	7830      	ldrb	r0, [r6, #0]
 801047c:	3201      	adds	r2, #1
 801047e:	f7ff ff8e 	bl	801039e <__hexdig_fun>
 8010482:	2800      	cmp	r0, #0
 8010484:	d1f8      	bne.n	8010478 <__gethex+0xb0>
 8010486:	1bad      	subs	r5, r5, r6
 8010488:	00ad      	lsls	r5, r5, #2
 801048a:	e004      	b.n	8010496 <__gethex+0xce>
 801048c:	2400      	movs	r4, #0
 801048e:	4625      	mov	r5, r4
 8010490:	e7e0      	b.n	8010454 <__gethex+0x8c>
 8010492:	2d00      	cmp	r5, #0
 8010494:	d1f7      	bne.n	8010486 <__gethex+0xbe>
 8010496:	7833      	ldrb	r3, [r6, #0]
 8010498:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801049c:	2b50      	cmp	r3, #80	; 0x50
 801049e:	d139      	bne.n	8010514 <__gethex+0x14c>
 80104a0:	7873      	ldrb	r3, [r6, #1]
 80104a2:	2b2b      	cmp	r3, #43	; 0x2b
 80104a4:	d02a      	beq.n	80104fc <__gethex+0x134>
 80104a6:	2b2d      	cmp	r3, #45	; 0x2d
 80104a8:	d02c      	beq.n	8010504 <__gethex+0x13c>
 80104aa:	f04f 0900 	mov.w	r9, #0
 80104ae:	1c71      	adds	r1, r6, #1
 80104b0:	7808      	ldrb	r0, [r1, #0]
 80104b2:	f7ff ff74 	bl	801039e <__hexdig_fun>
 80104b6:	1e43      	subs	r3, r0, #1
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	2b18      	cmp	r3, #24
 80104bc:	d82a      	bhi.n	8010514 <__gethex+0x14c>
 80104be:	f1a0 0210 	sub.w	r2, r0, #16
 80104c2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80104c6:	f7ff ff6a 	bl	801039e <__hexdig_fun>
 80104ca:	1e43      	subs	r3, r0, #1
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	2b18      	cmp	r3, #24
 80104d0:	d91b      	bls.n	801050a <__gethex+0x142>
 80104d2:	f1b9 0f00 	cmp.w	r9, #0
 80104d6:	d000      	beq.n	80104da <__gethex+0x112>
 80104d8:	4252      	negs	r2, r2
 80104da:	4415      	add	r5, r2
 80104dc:	f8cb 1000 	str.w	r1, [fp]
 80104e0:	b1d4      	cbz	r4, 8010518 <__gethex+0x150>
 80104e2:	9b01      	ldr	r3, [sp, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	bf14      	ite	ne
 80104e8:	2700      	movne	r7, #0
 80104ea:	2706      	moveq	r7, #6
 80104ec:	4638      	mov	r0, r7
 80104ee:	b00b      	add	sp, #44	; 0x2c
 80104f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f4:	463e      	mov	r6, r7
 80104f6:	4625      	mov	r5, r4
 80104f8:	2401      	movs	r4, #1
 80104fa:	e7cc      	b.n	8010496 <__gethex+0xce>
 80104fc:	f04f 0900 	mov.w	r9, #0
 8010500:	1cb1      	adds	r1, r6, #2
 8010502:	e7d5      	b.n	80104b0 <__gethex+0xe8>
 8010504:	f04f 0901 	mov.w	r9, #1
 8010508:	e7fa      	b.n	8010500 <__gethex+0x138>
 801050a:	230a      	movs	r3, #10
 801050c:	fb03 0202 	mla	r2, r3, r2, r0
 8010510:	3a10      	subs	r2, #16
 8010512:	e7d6      	b.n	80104c2 <__gethex+0xfa>
 8010514:	4631      	mov	r1, r6
 8010516:	e7e1      	b.n	80104dc <__gethex+0x114>
 8010518:	4621      	mov	r1, r4
 801051a:	1bf3      	subs	r3, r6, r7
 801051c:	3b01      	subs	r3, #1
 801051e:	2b07      	cmp	r3, #7
 8010520:	dc0a      	bgt.n	8010538 <__gethex+0x170>
 8010522:	9802      	ldr	r0, [sp, #8]
 8010524:	f000 fa7a 	bl	8010a1c <_Balloc>
 8010528:	4604      	mov	r4, r0
 801052a:	b940      	cbnz	r0, 801053e <__gethex+0x176>
 801052c:	4602      	mov	r2, r0
 801052e:	21de      	movs	r1, #222	; 0xde
 8010530:	4b5b      	ldr	r3, [pc, #364]	; (80106a0 <__gethex+0x2d8>)
 8010532:	485c      	ldr	r0, [pc, #368]	; (80106a4 <__gethex+0x2dc>)
 8010534:	f7ff f834 	bl	800f5a0 <__assert_func>
 8010538:	3101      	adds	r1, #1
 801053a:	105b      	asrs	r3, r3, #1
 801053c:	e7ef      	b.n	801051e <__gethex+0x156>
 801053e:	f04f 0b00 	mov.w	fp, #0
 8010542:	f100 0914 	add.w	r9, r0, #20
 8010546:	f1ca 0301 	rsb	r3, sl, #1
 801054a:	f8cd 9010 	str.w	r9, [sp, #16]
 801054e:	f8cd b004 	str.w	fp, [sp, #4]
 8010552:	9308      	str	r3, [sp, #32]
 8010554:	42b7      	cmp	r7, r6
 8010556:	d33f      	bcc.n	80105d8 <__gethex+0x210>
 8010558:	9f04      	ldr	r7, [sp, #16]
 801055a:	9b01      	ldr	r3, [sp, #4]
 801055c:	f847 3b04 	str.w	r3, [r7], #4
 8010560:	eba7 0709 	sub.w	r7, r7, r9
 8010564:	10bf      	asrs	r7, r7, #2
 8010566:	6127      	str	r7, [r4, #16]
 8010568:	4618      	mov	r0, r3
 801056a:	f000 fb49 	bl	8010c00 <__hi0bits>
 801056e:	017f      	lsls	r7, r7, #5
 8010570:	f8d8 6000 	ldr.w	r6, [r8]
 8010574:	1a3f      	subs	r7, r7, r0
 8010576:	42b7      	cmp	r7, r6
 8010578:	dd62      	ble.n	8010640 <__gethex+0x278>
 801057a:	1bbf      	subs	r7, r7, r6
 801057c:	4639      	mov	r1, r7
 801057e:	4620      	mov	r0, r4
 8010580:	f000 fee3 	bl	801134a <__any_on>
 8010584:	4682      	mov	sl, r0
 8010586:	b1a8      	cbz	r0, 80105b4 <__gethex+0x1ec>
 8010588:	f04f 0a01 	mov.w	sl, #1
 801058c:	1e7b      	subs	r3, r7, #1
 801058e:	1159      	asrs	r1, r3, #5
 8010590:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010594:	f003 021f 	and.w	r2, r3, #31
 8010598:	fa0a f202 	lsl.w	r2, sl, r2
 801059c:	420a      	tst	r2, r1
 801059e:	d009      	beq.n	80105b4 <__gethex+0x1ec>
 80105a0:	4553      	cmp	r3, sl
 80105a2:	dd05      	ble.n	80105b0 <__gethex+0x1e8>
 80105a4:	4620      	mov	r0, r4
 80105a6:	1eb9      	subs	r1, r7, #2
 80105a8:	f000 fecf 	bl	801134a <__any_on>
 80105ac:	2800      	cmp	r0, #0
 80105ae:	d144      	bne.n	801063a <__gethex+0x272>
 80105b0:	f04f 0a02 	mov.w	sl, #2
 80105b4:	4639      	mov	r1, r7
 80105b6:	4620      	mov	r0, r4
 80105b8:	f7ff fe9e 	bl	80102f8 <rshift>
 80105bc:	443d      	add	r5, r7
 80105be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80105c2:	42ab      	cmp	r3, r5
 80105c4:	da4a      	bge.n	801065c <__gethex+0x294>
 80105c6:	4621      	mov	r1, r4
 80105c8:	9802      	ldr	r0, [sp, #8]
 80105ca:	f000 fa67 	bl	8010a9c <_Bfree>
 80105ce:	2300      	movs	r3, #0
 80105d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80105d2:	27a3      	movs	r7, #163	; 0xa3
 80105d4:	6013      	str	r3, [r2, #0]
 80105d6:	e789      	b.n	80104ec <__gethex+0x124>
 80105d8:	1e73      	subs	r3, r6, #1
 80105da:	9a06      	ldr	r2, [sp, #24]
 80105dc:	9307      	str	r3, [sp, #28]
 80105de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d019      	beq.n	801061a <__gethex+0x252>
 80105e6:	f1bb 0f20 	cmp.w	fp, #32
 80105ea:	d107      	bne.n	80105fc <__gethex+0x234>
 80105ec:	9b04      	ldr	r3, [sp, #16]
 80105ee:	9a01      	ldr	r2, [sp, #4]
 80105f0:	f843 2b04 	str.w	r2, [r3], #4
 80105f4:	9304      	str	r3, [sp, #16]
 80105f6:	2300      	movs	r3, #0
 80105f8:	469b      	mov	fp, r3
 80105fa:	9301      	str	r3, [sp, #4]
 80105fc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010600:	f7ff fecd 	bl	801039e <__hexdig_fun>
 8010604:	9b01      	ldr	r3, [sp, #4]
 8010606:	f000 000f 	and.w	r0, r0, #15
 801060a:	fa00 f00b 	lsl.w	r0, r0, fp
 801060e:	4303      	orrs	r3, r0
 8010610:	9301      	str	r3, [sp, #4]
 8010612:	f10b 0b04 	add.w	fp, fp, #4
 8010616:	9b07      	ldr	r3, [sp, #28]
 8010618:	e00d      	b.n	8010636 <__gethex+0x26e>
 801061a:	9a08      	ldr	r2, [sp, #32]
 801061c:	1e73      	subs	r3, r6, #1
 801061e:	4413      	add	r3, r2
 8010620:	42bb      	cmp	r3, r7
 8010622:	d3e0      	bcc.n	80105e6 <__gethex+0x21e>
 8010624:	4618      	mov	r0, r3
 8010626:	4652      	mov	r2, sl
 8010628:	9903      	ldr	r1, [sp, #12]
 801062a:	9309      	str	r3, [sp, #36]	; 0x24
 801062c:	f001 fa68 	bl	8011b00 <strncmp>
 8010630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010632:	2800      	cmp	r0, #0
 8010634:	d1d7      	bne.n	80105e6 <__gethex+0x21e>
 8010636:	461e      	mov	r6, r3
 8010638:	e78c      	b.n	8010554 <__gethex+0x18c>
 801063a:	f04f 0a03 	mov.w	sl, #3
 801063e:	e7b9      	b.n	80105b4 <__gethex+0x1ec>
 8010640:	da09      	bge.n	8010656 <__gethex+0x28e>
 8010642:	1bf7      	subs	r7, r6, r7
 8010644:	4621      	mov	r1, r4
 8010646:	463a      	mov	r2, r7
 8010648:	9802      	ldr	r0, [sp, #8]
 801064a:	f000 fc3f 	bl	8010ecc <__lshift>
 801064e:	4604      	mov	r4, r0
 8010650:	1bed      	subs	r5, r5, r7
 8010652:	f100 0914 	add.w	r9, r0, #20
 8010656:	f04f 0a00 	mov.w	sl, #0
 801065a:	e7b0      	b.n	80105be <__gethex+0x1f6>
 801065c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010660:	42a8      	cmp	r0, r5
 8010662:	dd72      	ble.n	801074a <__gethex+0x382>
 8010664:	1b45      	subs	r5, r0, r5
 8010666:	42ae      	cmp	r6, r5
 8010668:	dc35      	bgt.n	80106d6 <__gethex+0x30e>
 801066a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801066e:	2b02      	cmp	r3, #2
 8010670:	d029      	beq.n	80106c6 <__gethex+0x2fe>
 8010672:	2b03      	cmp	r3, #3
 8010674:	d02b      	beq.n	80106ce <__gethex+0x306>
 8010676:	2b01      	cmp	r3, #1
 8010678:	d11c      	bne.n	80106b4 <__gethex+0x2ec>
 801067a:	42ae      	cmp	r6, r5
 801067c:	d11a      	bne.n	80106b4 <__gethex+0x2ec>
 801067e:	2e01      	cmp	r6, #1
 8010680:	d112      	bne.n	80106a8 <__gethex+0x2e0>
 8010682:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010686:	9a05      	ldr	r2, [sp, #20]
 8010688:	2762      	movs	r7, #98	; 0x62
 801068a:	6013      	str	r3, [r2, #0]
 801068c:	2301      	movs	r3, #1
 801068e:	6123      	str	r3, [r4, #16]
 8010690:	f8c9 3000 	str.w	r3, [r9]
 8010694:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010696:	601c      	str	r4, [r3, #0]
 8010698:	e728      	b.n	80104ec <__gethex+0x124>
 801069a:	bf00      	nop
 801069c:	08012708 	.word	0x08012708
 80106a0:	08012690 	.word	0x08012690
 80106a4:	080126a1 	.word	0x080126a1
 80106a8:	4620      	mov	r0, r4
 80106aa:	1e71      	subs	r1, r6, #1
 80106ac:	f000 fe4d 	bl	801134a <__any_on>
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d1e6      	bne.n	8010682 <__gethex+0x2ba>
 80106b4:	4621      	mov	r1, r4
 80106b6:	9802      	ldr	r0, [sp, #8]
 80106b8:	f000 f9f0 	bl	8010a9c <_Bfree>
 80106bc:	2300      	movs	r3, #0
 80106be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80106c0:	2750      	movs	r7, #80	; 0x50
 80106c2:	6013      	str	r3, [r2, #0]
 80106c4:	e712      	b.n	80104ec <__gethex+0x124>
 80106c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1f3      	bne.n	80106b4 <__gethex+0x2ec>
 80106cc:	e7d9      	b.n	8010682 <__gethex+0x2ba>
 80106ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d1d6      	bne.n	8010682 <__gethex+0x2ba>
 80106d4:	e7ee      	b.n	80106b4 <__gethex+0x2ec>
 80106d6:	1e6f      	subs	r7, r5, #1
 80106d8:	f1ba 0f00 	cmp.w	sl, #0
 80106dc:	d132      	bne.n	8010744 <__gethex+0x37c>
 80106de:	b127      	cbz	r7, 80106ea <__gethex+0x322>
 80106e0:	4639      	mov	r1, r7
 80106e2:	4620      	mov	r0, r4
 80106e4:	f000 fe31 	bl	801134a <__any_on>
 80106e8:	4682      	mov	sl, r0
 80106ea:	2101      	movs	r1, #1
 80106ec:	117b      	asrs	r3, r7, #5
 80106ee:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80106f2:	f007 071f 	and.w	r7, r7, #31
 80106f6:	fa01 f707 	lsl.w	r7, r1, r7
 80106fa:	421f      	tst	r7, r3
 80106fc:	f04f 0702 	mov.w	r7, #2
 8010700:	4629      	mov	r1, r5
 8010702:	4620      	mov	r0, r4
 8010704:	bf18      	it	ne
 8010706:	f04a 0a02 	orrne.w	sl, sl, #2
 801070a:	1b76      	subs	r6, r6, r5
 801070c:	f7ff fdf4 	bl	80102f8 <rshift>
 8010710:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010714:	f1ba 0f00 	cmp.w	sl, #0
 8010718:	d048      	beq.n	80107ac <__gethex+0x3e4>
 801071a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801071e:	2b02      	cmp	r3, #2
 8010720:	d015      	beq.n	801074e <__gethex+0x386>
 8010722:	2b03      	cmp	r3, #3
 8010724:	d017      	beq.n	8010756 <__gethex+0x38e>
 8010726:	2b01      	cmp	r3, #1
 8010728:	d109      	bne.n	801073e <__gethex+0x376>
 801072a:	f01a 0f02 	tst.w	sl, #2
 801072e:	d006      	beq.n	801073e <__gethex+0x376>
 8010730:	f8d9 0000 	ldr.w	r0, [r9]
 8010734:	ea4a 0a00 	orr.w	sl, sl, r0
 8010738:	f01a 0f01 	tst.w	sl, #1
 801073c:	d10e      	bne.n	801075c <__gethex+0x394>
 801073e:	f047 0710 	orr.w	r7, r7, #16
 8010742:	e033      	b.n	80107ac <__gethex+0x3e4>
 8010744:	f04f 0a01 	mov.w	sl, #1
 8010748:	e7cf      	b.n	80106ea <__gethex+0x322>
 801074a:	2701      	movs	r7, #1
 801074c:	e7e2      	b.n	8010714 <__gethex+0x34c>
 801074e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010750:	f1c3 0301 	rsb	r3, r3, #1
 8010754:	9315      	str	r3, [sp, #84]	; 0x54
 8010756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010758:	2b00      	cmp	r3, #0
 801075a:	d0f0      	beq.n	801073e <__gethex+0x376>
 801075c:	f04f 0c00 	mov.w	ip, #0
 8010760:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010764:	f104 0314 	add.w	r3, r4, #20
 8010768:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801076c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010770:	4618      	mov	r0, r3
 8010772:	f853 2b04 	ldr.w	r2, [r3], #4
 8010776:	f1b2 3fff 	cmp.w	r2, #4294967295
 801077a:	d01c      	beq.n	80107b6 <__gethex+0x3ee>
 801077c:	3201      	adds	r2, #1
 801077e:	6002      	str	r2, [r0, #0]
 8010780:	2f02      	cmp	r7, #2
 8010782:	f104 0314 	add.w	r3, r4, #20
 8010786:	d13d      	bne.n	8010804 <__gethex+0x43c>
 8010788:	f8d8 2000 	ldr.w	r2, [r8]
 801078c:	3a01      	subs	r2, #1
 801078e:	42b2      	cmp	r2, r6
 8010790:	d10a      	bne.n	80107a8 <__gethex+0x3e0>
 8010792:	2201      	movs	r2, #1
 8010794:	1171      	asrs	r1, r6, #5
 8010796:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801079a:	f006 061f 	and.w	r6, r6, #31
 801079e:	fa02 f606 	lsl.w	r6, r2, r6
 80107a2:	421e      	tst	r6, r3
 80107a4:	bf18      	it	ne
 80107a6:	4617      	movne	r7, r2
 80107a8:	f047 0720 	orr.w	r7, r7, #32
 80107ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80107ae:	601c      	str	r4, [r3, #0]
 80107b0:	9b05      	ldr	r3, [sp, #20]
 80107b2:	601d      	str	r5, [r3, #0]
 80107b4:	e69a      	b.n	80104ec <__gethex+0x124>
 80107b6:	4299      	cmp	r1, r3
 80107b8:	f843 cc04 	str.w	ip, [r3, #-4]
 80107bc:	d8d8      	bhi.n	8010770 <__gethex+0x3a8>
 80107be:	68a3      	ldr	r3, [r4, #8]
 80107c0:	459b      	cmp	fp, r3
 80107c2:	db17      	blt.n	80107f4 <__gethex+0x42c>
 80107c4:	6861      	ldr	r1, [r4, #4]
 80107c6:	9802      	ldr	r0, [sp, #8]
 80107c8:	3101      	adds	r1, #1
 80107ca:	f000 f927 	bl	8010a1c <_Balloc>
 80107ce:	4681      	mov	r9, r0
 80107d0:	b918      	cbnz	r0, 80107da <__gethex+0x412>
 80107d2:	4602      	mov	r2, r0
 80107d4:	2184      	movs	r1, #132	; 0x84
 80107d6:	4b19      	ldr	r3, [pc, #100]	; (801083c <__gethex+0x474>)
 80107d8:	e6ab      	b.n	8010532 <__gethex+0x16a>
 80107da:	6922      	ldr	r2, [r4, #16]
 80107dc:	f104 010c 	add.w	r1, r4, #12
 80107e0:	3202      	adds	r2, #2
 80107e2:	0092      	lsls	r2, r2, #2
 80107e4:	300c      	adds	r0, #12
 80107e6:	f7fd fbc9 	bl	800df7c <memcpy>
 80107ea:	4621      	mov	r1, r4
 80107ec:	9802      	ldr	r0, [sp, #8]
 80107ee:	f000 f955 	bl	8010a9c <_Bfree>
 80107f2:	464c      	mov	r4, r9
 80107f4:	6923      	ldr	r3, [r4, #16]
 80107f6:	1c5a      	adds	r2, r3, #1
 80107f8:	6122      	str	r2, [r4, #16]
 80107fa:	2201      	movs	r2, #1
 80107fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010800:	615a      	str	r2, [r3, #20]
 8010802:	e7bd      	b.n	8010780 <__gethex+0x3b8>
 8010804:	6922      	ldr	r2, [r4, #16]
 8010806:	455a      	cmp	r2, fp
 8010808:	dd0b      	ble.n	8010822 <__gethex+0x45a>
 801080a:	2101      	movs	r1, #1
 801080c:	4620      	mov	r0, r4
 801080e:	f7ff fd73 	bl	80102f8 <rshift>
 8010812:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010816:	3501      	adds	r5, #1
 8010818:	42ab      	cmp	r3, r5
 801081a:	f6ff aed4 	blt.w	80105c6 <__gethex+0x1fe>
 801081e:	2701      	movs	r7, #1
 8010820:	e7c2      	b.n	80107a8 <__gethex+0x3e0>
 8010822:	f016 061f 	ands.w	r6, r6, #31
 8010826:	d0fa      	beq.n	801081e <__gethex+0x456>
 8010828:	4453      	add	r3, sl
 801082a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801082e:	f000 f9e7 	bl	8010c00 <__hi0bits>
 8010832:	f1c6 0620 	rsb	r6, r6, #32
 8010836:	42b0      	cmp	r0, r6
 8010838:	dbe7      	blt.n	801080a <__gethex+0x442>
 801083a:	e7f0      	b.n	801081e <__gethex+0x456>
 801083c:	08012690 	.word	0x08012690

08010840 <L_shift>:
 8010840:	f1c2 0208 	rsb	r2, r2, #8
 8010844:	0092      	lsls	r2, r2, #2
 8010846:	b570      	push	{r4, r5, r6, lr}
 8010848:	f1c2 0620 	rsb	r6, r2, #32
 801084c:	6843      	ldr	r3, [r0, #4]
 801084e:	6804      	ldr	r4, [r0, #0]
 8010850:	fa03 f506 	lsl.w	r5, r3, r6
 8010854:	432c      	orrs	r4, r5
 8010856:	40d3      	lsrs	r3, r2
 8010858:	6004      	str	r4, [r0, #0]
 801085a:	f840 3f04 	str.w	r3, [r0, #4]!
 801085e:	4288      	cmp	r0, r1
 8010860:	d3f4      	bcc.n	801084c <L_shift+0xc>
 8010862:	bd70      	pop	{r4, r5, r6, pc}

08010864 <__match>:
 8010864:	b530      	push	{r4, r5, lr}
 8010866:	6803      	ldr	r3, [r0, #0]
 8010868:	3301      	adds	r3, #1
 801086a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801086e:	b914      	cbnz	r4, 8010876 <__match+0x12>
 8010870:	6003      	str	r3, [r0, #0]
 8010872:	2001      	movs	r0, #1
 8010874:	bd30      	pop	{r4, r5, pc}
 8010876:	f813 2b01 	ldrb.w	r2, [r3], #1
 801087a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801087e:	2d19      	cmp	r5, #25
 8010880:	bf98      	it	ls
 8010882:	3220      	addls	r2, #32
 8010884:	42a2      	cmp	r2, r4
 8010886:	d0f0      	beq.n	801086a <__match+0x6>
 8010888:	2000      	movs	r0, #0
 801088a:	e7f3      	b.n	8010874 <__match+0x10>

0801088c <__hexnan>:
 801088c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010890:	2500      	movs	r5, #0
 8010892:	680b      	ldr	r3, [r1, #0]
 8010894:	4682      	mov	sl, r0
 8010896:	115e      	asrs	r6, r3, #5
 8010898:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801089c:	f013 031f 	ands.w	r3, r3, #31
 80108a0:	bf18      	it	ne
 80108a2:	3604      	addne	r6, #4
 80108a4:	1f37      	subs	r7, r6, #4
 80108a6:	46b9      	mov	r9, r7
 80108a8:	463c      	mov	r4, r7
 80108aa:	46ab      	mov	fp, r5
 80108ac:	b087      	sub	sp, #28
 80108ae:	4690      	mov	r8, r2
 80108b0:	6802      	ldr	r2, [r0, #0]
 80108b2:	9301      	str	r3, [sp, #4]
 80108b4:	f846 5c04 	str.w	r5, [r6, #-4]
 80108b8:	9502      	str	r5, [sp, #8]
 80108ba:	7851      	ldrb	r1, [r2, #1]
 80108bc:	1c53      	adds	r3, r2, #1
 80108be:	9303      	str	r3, [sp, #12]
 80108c0:	b341      	cbz	r1, 8010914 <__hexnan+0x88>
 80108c2:	4608      	mov	r0, r1
 80108c4:	9205      	str	r2, [sp, #20]
 80108c6:	9104      	str	r1, [sp, #16]
 80108c8:	f7ff fd69 	bl	801039e <__hexdig_fun>
 80108cc:	2800      	cmp	r0, #0
 80108ce:	d14f      	bne.n	8010970 <__hexnan+0xe4>
 80108d0:	9904      	ldr	r1, [sp, #16]
 80108d2:	9a05      	ldr	r2, [sp, #20]
 80108d4:	2920      	cmp	r1, #32
 80108d6:	d818      	bhi.n	801090a <__hexnan+0x7e>
 80108d8:	9b02      	ldr	r3, [sp, #8]
 80108da:	459b      	cmp	fp, r3
 80108dc:	dd13      	ble.n	8010906 <__hexnan+0x7a>
 80108de:	454c      	cmp	r4, r9
 80108e0:	d206      	bcs.n	80108f0 <__hexnan+0x64>
 80108e2:	2d07      	cmp	r5, #7
 80108e4:	dc04      	bgt.n	80108f0 <__hexnan+0x64>
 80108e6:	462a      	mov	r2, r5
 80108e8:	4649      	mov	r1, r9
 80108ea:	4620      	mov	r0, r4
 80108ec:	f7ff ffa8 	bl	8010840 <L_shift>
 80108f0:	4544      	cmp	r4, r8
 80108f2:	d950      	bls.n	8010996 <__hexnan+0x10a>
 80108f4:	2300      	movs	r3, #0
 80108f6:	f1a4 0904 	sub.w	r9, r4, #4
 80108fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80108fe:	461d      	mov	r5, r3
 8010900:	464c      	mov	r4, r9
 8010902:	f8cd b008 	str.w	fp, [sp, #8]
 8010906:	9a03      	ldr	r2, [sp, #12]
 8010908:	e7d7      	b.n	80108ba <__hexnan+0x2e>
 801090a:	2929      	cmp	r1, #41	; 0x29
 801090c:	d156      	bne.n	80109bc <__hexnan+0x130>
 801090e:	3202      	adds	r2, #2
 8010910:	f8ca 2000 	str.w	r2, [sl]
 8010914:	f1bb 0f00 	cmp.w	fp, #0
 8010918:	d050      	beq.n	80109bc <__hexnan+0x130>
 801091a:	454c      	cmp	r4, r9
 801091c:	d206      	bcs.n	801092c <__hexnan+0xa0>
 801091e:	2d07      	cmp	r5, #7
 8010920:	dc04      	bgt.n	801092c <__hexnan+0xa0>
 8010922:	462a      	mov	r2, r5
 8010924:	4649      	mov	r1, r9
 8010926:	4620      	mov	r0, r4
 8010928:	f7ff ff8a 	bl	8010840 <L_shift>
 801092c:	4544      	cmp	r4, r8
 801092e:	d934      	bls.n	801099a <__hexnan+0x10e>
 8010930:	4623      	mov	r3, r4
 8010932:	f1a8 0204 	sub.w	r2, r8, #4
 8010936:	f853 1b04 	ldr.w	r1, [r3], #4
 801093a:	429f      	cmp	r7, r3
 801093c:	f842 1f04 	str.w	r1, [r2, #4]!
 8010940:	d2f9      	bcs.n	8010936 <__hexnan+0xaa>
 8010942:	1b3b      	subs	r3, r7, r4
 8010944:	f023 0303 	bic.w	r3, r3, #3
 8010948:	3304      	adds	r3, #4
 801094a:	3401      	adds	r4, #1
 801094c:	3e03      	subs	r6, #3
 801094e:	42b4      	cmp	r4, r6
 8010950:	bf88      	it	hi
 8010952:	2304      	movhi	r3, #4
 8010954:	2200      	movs	r2, #0
 8010956:	4443      	add	r3, r8
 8010958:	f843 2b04 	str.w	r2, [r3], #4
 801095c:	429f      	cmp	r7, r3
 801095e:	d2fb      	bcs.n	8010958 <__hexnan+0xcc>
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	b91b      	cbnz	r3, 801096c <__hexnan+0xe0>
 8010964:	4547      	cmp	r7, r8
 8010966:	d127      	bne.n	80109b8 <__hexnan+0x12c>
 8010968:	2301      	movs	r3, #1
 801096a:	603b      	str	r3, [r7, #0]
 801096c:	2005      	movs	r0, #5
 801096e:	e026      	b.n	80109be <__hexnan+0x132>
 8010970:	3501      	adds	r5, #1
 8010972:	2d08      	cmp	r5, #8
 8010974:	f10b 0b01 	add.w	fp, fp, #1
 8010978:	dd06      	ble.n	8010988 <__hexnan+0xfc>
 801097a:	4544      	cmp	r4, r8
 801097c:	d9c3      	bls.n	8010906 <__hexnan+0x7a>
 801097e:	2300      	movs	r3, #0
 8010980:	2501      	movs	r5, #1
 8010982:	f844 3c04 	str.w	r3, [r4, #-4]
 8010986:	3c04      	subs	r4, #4
 8010988:	6822      	ldr	r2, [r4, #0]
 801098a:	f000 000f 	and.w	r0, r0, #15
 801098e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010992:	6022      	str	r2, [r4, #0]
 8010994:	e7b7      	b.n	8010906 <__hexnan+0x7a>
 8010996:	2508      	movs	r5, #8
 8010998:	e7b5      	b.n	8010906 <__hexnan+0x7a>
 801099a:	9b01      	ldr	r3, [sp, #4]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d0df      	beq.n	8010960 <__hexnan+0xd4>
 80109a0:	f04f 32ff 	mov.w	r2, #4294967295
 80109a4:	f1c3 0320 	rsb	r3, r3, #32
 80109a8:	fa22 f303 	lsr.w	r3, r2, r3
 80109ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80109b0:	401a      	ands	r2, r3
 80109b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80109b6:	e7d3      	b.n	8010960 <__hexnan+0xd4>
 80109b8:	3f04      	subs	r7, #4
 80109ba:	e7d1      	b.n	8010960 <__hexnan+0xd4>
 80109bc:	2004      	movs	r0, #4
 80109be:	b007      	add	sp, #28
 80109c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080109c4 <_localeconv_r>:
 80109c4:	4800      	ldr	r0, [pc, #0]	; (80109c8 <_localeconv_r+0x4>)
 80109c6:	4770      	bx	lr
 80109c8:	2000098c 	.word	0x2000098c

080109cc <malloc>:
 80109cc:	4b02      	ldr	r3, [pc, #8]	; (80109d8 <malloc+0xc>)
 80109ce:	4601      	mov	r1, r0
 80109d0:	6818      	ldr	r0, [r3, #0]
 80109d2:	f000 bd57 	b.w	8011484 <_malloc_r>
 80109d6:	bf00      	nop
 80109d8:	20000834 	.word	0x20000834

080109dc <__ascii_mbtowc>:
 80109dc:	b082      	sub	sp, #8
 80109de:	b901      	cbnz	r1, 80109e2 <__ascii_mbtowc+0x6>
 80109e0:	a901      	add	r1, sp, #4
 80109e2:	b142      	cbz	r2, 80109f6 <__ascii_mbtowc+0x1a>
 80109e4:	b14b      	cbz	r3, 80109fa <__ascii_mbtowc+0x1e>
 80109e6:	7813      	ldrb	r3, [r2, #0]
 80109e8:	600b      	str	r3, [r1, #0]
 80109ea:	7812      	ldrb	r2, [r2, #0]
 80109ec:	1e10      	subs	r0, r2, #0
 80109ee:	bf18      	it	ne
 80109f0:	2001      	movne	r0, #1
 80109f2:	b002      	add	sp, #8
 80109f4:	4770      	bx	lr
 80109f6:	4610      	mov	r0, r2
 80109f8:	e7fb      	b.n	80109f2 <__ascii_mbtowc+0x16>
 80109fa:	f06f 0001 	mvn.w	r0, #1
 80109fe:	e7f8      	b.n	80109f2 <__ascii_mbtowc+0x16>

08010a00 <memchr>:
 8010a00:	4603      	mov	r3, r0
 8010a02:	b510      	push	{r4, lr}
 8010a04:	b2c9      	uxtb	r1, r1
 8010a06:	4402      	add	r2, r0
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	d101      	bne.n	8010a12 <memchr+0x12>
 8010a0e:	2000      	movs	r0, #0
 8010a10:	e003      	b.n	8010a1a <memchr+0x1a>
 8010a12:	7804      	ldrb	r4, [r0, #0]
 8010a14:	3301      	adds	r3, #1
 8010a16:	428c      	cmp	r4, r1
 8010a18:	d1f6      	bne.n	8010a08 <memchr+0x8>
 8010a1a:	bd10      	pop	{r4, pc}

08010a1c <_Balloc>:
 8010a1c:	b570      	push	{r4, r5, r6, lr}
 8010a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a20:	4604      	mov	r4, r0
 8010a22:	460d      	mov	r5, r1
 8010a24:	b976      	cbnz	r6, 8010a44 <_Balloc+0x28>
 8010a26:	2010      	movs	r0, #16
 8010a28:	f7ff ffd0 	bl	80109cc <malloc>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	6260      	str	r0, [r4, #36]	; 0x24
 8010a30:	b920      	cbnz	r0, 8010a3c <_Balloc+0x20>
 8010a32:	2166      	movs	r1, #102	; 0x66
 8010a34:	4b17      	ldr	r3, [pc, #92]	; (8010a94 <_Balloc+0x78>)
 8010a36:	4818      	ldr	r0, [pc, #96]	; (8010a98 <_Balloc+0x7c>)
 8010a38:	f7fe fdb2 	bl	800f5a0 <__assert_func>
 8010a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a40:	6006      	str	r6, [r0, #0]
 8010a42:	60c6      	str	r6, [r0, #12]
 8010a44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a46:	68f3      	ldr	r3, [r6, #12]
 8010a48:	b183      	cbz	r3, 8010a6c <_Balloc+0x50>
 8010a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a4c:	68db      	ldr	r3, [r3, #12]
 8010a4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a52:	b9b8      	cbnz	r0, 8010a84 <_Balloc+0x68>
 8010a54:	2101      	movs	r1, #1
 8010a56:	fa01 f605 	lsl.w	r6, r1, r5
 8010a5a:	1d72      	adds	r2, r6, #5
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	0092      	lsls	r2, r2, #2
 8010a60:	f000 fc94 	bl	801138c <_calloc_r>
 8010a64:	b160      	cbz	r0, 8010a80 <_Balloc+0x64>
 8010a66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a6a:	e00e      	b.n	8010a8a <_Balloc+0x6e>
 8010a6c:	2221      	movs	r2, #33	; 0x21
 8010a6e:	2104      	movs	r1, #4
 8010a70:	4620      	mov	r0, r4
 8010a72:	f000 fc8b 	bl	801138c <_calloc_r>
 8010a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a78:	60f0      	str	r0, [r6, #12]
 8010a7a:	68db      	ldr	r3, [r3, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d1e4      	bne.n	8010a4a <_Balloc+0x2e>
 8010a80:	2000      	movs	r0, #0
 8010a82:	bd70      	pop	{r4, r5, r6, pc}
 8010a84:	6802      	ldr	r2, [r0, #0]
 8010a86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a90:	e7f7      	b.n	8010a82 <_Balloc+0x66>
 8010a92:	bf00      	nop
 8010a94:	08012578 	.word	0x08012578
 8010a98:	0801271c 	.word	0x0801271c

08010a9c <_Bfree>:
 8010a9c:	b570      	push	{r4, r5, r6, lr}
 8010a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010aa0:	4605      	mov	r5, r0
 8010aa2:	460c      	mov	r4, r1
 8010aa4:	b976      	cbnz	r6, 8010ac4 <_Bfree+0x28>
 8010aa6:	2010      	movs	r0, #16
 8010aa8:	f7ff ff90 	bl	80109cc <malloc>
 8010aac:	4602      	mov	r2, r0
 8010aae:	6268      	str	r0, [r5, #36]	; 0x24
 8010ab0:	b920      	cbnz	r0, 8010abc <_Bfree+0x20>
 8010ab2:	218a      	movs	r1, #138	; 0x8a
 8010ab4:	4b08      	ldr	r3, [pc, #32]	; (8010ad8 <_Bfree+0x3c>)
 8010ab6:	4809      	ldr	r0, [pc, #36]	; (8010adc <_Bfree+0x40>)
 8010ab8:	f7fe fd72 	bl	800f5a0 <__assert_func>
 8010abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ac0:	6006      	str	r6, [r0, #0]
 8010ac2:	60c6      	str	r6, [r0, #12]
 8010ac4:	b13c      	cbz	r4, 8010ad6 <_Bfree+0x3a>
 8010ac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ac8:	6862      	ldr	r2, [r4, #4]
 8010aca:	68db      	ldr	r3, [r3, #12]
 8010acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ad0:	6021      	str	r1, [r4, #0]
 8010ad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ad6:	bd70      	pop	{r4, r5, r6, pc}
 8010ad8:	08012578 	.word	0x08012578
 8010adc:	0801271c 	.word	0x0801271c

08010ae0 <__multadd>:
 8010ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ae4:	4607      	mov	r7, r0
 8010ae6:	460c      	mov	r4, r1
 8010ae8:	461e      	mov	r6, r3
 8010aea:	2000      	movs	r0, #0
 8010aec:	690d      	ldr	r5, [r1, #16]
 8010aee:	f101 0c14 	add.w	ip, r1, #20
 8010af2:	f8dc 3000 	ldr.w	r3, [ip]
 8010af6:	3001      	adds	r0, #1
 8010af8:	b299      	uxth	r1, r3
 8010afa:	fb02 6101 	mla	r1, r2, r1, r6
 8010afe:	0c1e      	lsrs	r6, r3, #16
 8010b00:	0c0b      	lsrs	r3, r1, #16
 8010b02:	fb02 3306 	mla	r3, r2, r6, r3
 8010b06:	b289      	uxth	r1, r1
 8010b08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010b0c:	4285      	cmp	r5, r0
 8010b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010b12:	f84c 1b04 	str.w	r1, [ip], #4
 8010b16:	dcec      	bgt.n	8010af2 <__multadd+0x12>
 8010b18:	b30e      	cbz	r6, 8010b5e <__multadd+0x7e>
 8010b1a:	68a3      	ldr	r3, [r4, #8]
 8010b1c:	42ab      	cmp	r3, r5
 8010b1e:	dc19      	bgt.n	8010b54 <__multadd+0x74>
 8010b20:	6861      	ldr	r1, [r4, #4]
 8010b22:	4638      	mov	r0, r7
 8010b24:	3101      	adds	r1, #1
 8010b26:	f7ff ff79 	bl	8010a1c <_Balloc>
 8010b2a:	4680      	mov	r8, r0
 8010b2c:	b928      	cbnz	r0, 8010b3a <__multadd+0x5a>
 8010b2e:	4602      	mov	r2, r0
 8010b30:	21b5      	movs	r1, #181	; 0xb5
 8010b32:	4b0c      	ldr	r3, [pc, #48]	; (8010b64 <__multadd+0x84>)
 8010b34:	480c      	ldr	r0, [pc, #48]	; (8010b68 <__multadd+0x88>)
 8010b36:	f7fe fd33 	bl	800f5a0 <__assert_func>
 8010b3a:	6922      	ldr	r2, [r4, #16]
 8010b3c:	f104 010c 	add.w	r1, r4, #12
 8010b40:	3202      	adds	r2, #2
 8010b42:	0092      	lsls	r2, r2, #2
 8010b44:	300c      	adds	r0, #12
 8010b46:	f7fd fa19 	bl	800df7c <memcpy>
 8010b4a:	4621      	mov	r1, r4
 8010b4c:	4638      	mov	r0, r7
 8010b4e:	f7ff ffa5 	bl	8010a9c <_Bfree>
 8010b52:	4644      	mov	r4, r8
 8010b54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b58:	3501      	adds	r5, #1
 8010b5a:	615e      	str	r6, [r3, #20]
 8010b5c:	6125      	str	r5, [r4, #16]
 8010b5e:	4620      	mov	r0, r4
 8010b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b64:	08012690 	.word	0x08012690
 8010b68:	0801271c 	.word	0x0801271c

08010b6c <__s2b>:
 8010b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b70:	4615      	mov	r5, r2
 8010b72:	2209      	movs	r2, #9
 8010b74:	461f      	mov	r7, r3
 8010b76:	3308      	adds	r3, #8
 8010b78:	460c      	mov	r4, r1
 8010b7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b7e:	4606      	mov	r6, r0
 8010b80:	2201      	movs	r2, #1
 8010b82:	2100      	movs	r1, #0
 8010b84:	429a      	cmp	r2, r3
 8010b86:	db09      	blt.n	8010b9c <__s2b+0x30>
 8010b88:	4630      	mov	r0, r6
 8010b8a:	f7ff ff47 	bl	8010a1c <_Balloc>
 8010b8e:	b940      	cbnz	r0, 8010ba2 <__s2b+0x36>
 8010b90:	4602      	mov	r2, r0
 8010b92:	21ce      	movs	r1, #206	; 0xce
 8010b94:	4b18      	ldr	r3, [pc, #96]	; (8010bf8 <__s2b+0x8c>)
 8010b96:	4819      	ldr	r0, [pc, #100]	; (8010bfc <__s2b+0x90>)
 8010b98:	f7fe fd02 	bl	800f5a0 <__assert_func>
 8010b9c:	0052      	lsls	r2, r2, #1
 8010b9e:	3101      	adds	r1, #1
 8010ba0:	e7f0      	b.n	8010b84 <__s2b+0x18>
 8010ba2:	9b08      	ldr	r3, [sp, #32]
 8010ba4:	2d09      	cmp	r5, #9
 8010ba6:	6143      	str	r3, [r0, #20]
 8010ba8:	f04f 0301 	mov.w	r3, #1
 8010bac:	6103      	str	r3, [r0, #16]
 8010bae:	dd16      	ble.n	8010bde <__s2b+0x72>
 8010bb0:	f104 0909 	add.w	r9, r4, #9
 8010bb4:	46c8      	mov	r8, r9
 8010bb6:	442c      	add	r4, r5
 8010bb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010bbc:	4601      	mov	r1, r0
 8010bbe:	220a      	movs	r2, #10
 8010bc0:	4630      	mov	r0, r6
 8010bc2:	3b30      	subs	r3, #48	; 0x30
 8010bc4:	f7ff ff8c 	bl	8010ae0 <__multadd>
 8010bc8:	45a0      	cmp	r8, r4
 8010bca:	d1f5      	bne.n	8010bb8 <__s2b+0x4c>
 8010bcc:	f1a5 0408 	sub.w	r4, r5, #8
 8010bd0:	444c      	add	r4, r9
 8010bd2:	1b2d      	subs	r5, r5, r4
 8010bd4:	1963      	adds	r3, r4, r5
 8010bd6:	42bb      	cmp	r3, r7
 8010bd8:	db04      	blt.n	8010be4 <__s2b+0x78>
 8010bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bde:	2509      	movs	r5, #9
 8010be0:	340a      	adds	r4, #10
 8010be2:	e7f6      	b.n	8010bd2 <__s2b+0x66>
 8010be4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010be8:	4601      	mov	r1, r0
 8010bea:	220a      	movs	r2, #10
 8010bec:	4630      	mov	r0, r6
 8010bee:	3b30      	subs	r3, #48	; 0x30
 8010bf0:	f7ff ff76 	bl	8010ae0 <__multadd>
 8010bf4:	e7ee      	b.n	8010bd4 <__s2b+0x68>
 8010bf6:	bf00      	nop
 8010bf8:	08012690 	.word	0x08012690
 8010bfc:	0801271c 	.word	0x0801271c

08010c00 <__hi0bits>:
 8010c00:	0c02      	lsrs	r2, r0, #16
 8010c02:	0412      	lsls	r2, r2, #16
 8010c04:	4603      	mov	r3, r0
 8010c06:	b9ca      	cbnz	r2, 8010c3c <__hi0bits+0x3c>
 8010c08:	0403      	lsls	r3, r0, #16
 8010c0a:	2010      	movs	r0, #16
 8010c0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010c10:	bf04      	itt	eq
 8010c12:	021b      	lsleq	r3, r3, #8
 8010c14:	3008      	addeq	r0, #8
 8010c16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010c1a:	bf04      	itt	eq
 8010c1c:	011b      	lsleq	r3, r3, #4
 8010c1e:	3004      	addeq	r0, #4
 8010c20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010c24:	bf04      	itt	eq
 8010c26:	009b      	lsleq	r3, r3, #2
 8010c28:	3002      	addeq	r0, #2
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	db05      	blt.n	8010c3a <__hi0bits+0x3a>
 8010c2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8010c32:	f100 0001 	add.w	r0, r0, #1
 8010c36:	bf08      	it	eq
 8010c38:	2020      	moveq	r0, #32
 8010c3a:	4770      	bx	lr
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	e7e5      	b.n	8010c0c <__hi0bits+0xc>

08010c40 <__lo0bits>:
 8010c40:	6803      	ldr	r3, [r0, #0]
 8010c42:	4602      	mov	r2, r0
 8010c44:	f013 0007 	ands.w	r0, r3, #7
 8010c48:	d00b      	beq.n	8010c62 <__lo0bits+0x22>
 8010c4a:	07d9      	lsls	r1, r3, #31
 8010c4c:	d421      	bmi.n	8010c92 <__lo0bits+0x52>
 8010c4e:	0798      	lsls	r0, r3, #30
 8010c50:	bf49      	itett	mi
 8010c52:	085b      	lsrmi	r3, r3, #1
 8010c54:	089b      	lsrpl	r3, r3, #2
 8010c56:	2001      	movmi	r0, #1
 8010c58:	6013      	strmi	r3, [r2, #0]
 8010c5a:	bf5c      	itt	pl
 8010c5c:	2002      	movpl	r0, #2
 8010c5e:	6013      	strpl	r3, [r2, #0]
 8010c60:	4770      	bx	lr
 8010c62:	b299      	uxth	r1, r3
 8010c64:	b909      	cbnz	r1, 8010c6a <__lo0bits+0x2a>
 8010c66:	2010      	movs	r0, #16
 8010c68:	0c1b      	lsrs	r3, r3, #16
 8010c6a:	b2d9      	uxtb	r1, r3
 8010c6c:	b909      	cbnz	r1, 8010c72 <__lo0bits+0x32>
 8010c6e:	3008      	adds	r0, #8
 8010c70:	0a1b      	lsrs	r3, r3, #8
 8010c72:	0719      	lsls	r1, r3, #28
 8010c74:	bf04      	itt	eq
 8010c76:	091b      	lsreq	r3, r3, #4
 8010c78:	3004      	addeq	r0, #4
 8010c7a:	0799      	lsls	r1, r3, #30
 8010c7c:	bf04      	itt	eq
 8010c7e:	089b      	lsreq	r3, r3, #2
 8010c80:	3002      	addeq	r0, #2
 8010c82:	07d9      	lsls	r1, r3, #31
 8010c84:	d403      	bmi.n	8010c8e <__lo0bits+0x4e>
 8010c86:	085b      	lsrs	r3, r3, #1
 8010c88:	f100 0001 	add.w	r0, r0, #1
 8010c8c:	d003      	beq.n	8010c96 <__lo0bits+0x56>
 8010c8e:	6013      	str	r3, [r2, #0]
 8010c90:	4770      	bx	lr
 8010c92:	2000      	movs	r0, #0
 8010c94:	4770      	bx	lr
 8010c96:	2020      	movs	r0, #32
 8010c98:	4770      	bx	lr
	...

08010c9c <__i2b>:
 8010c9c:	b510      	push	{r4, lr}
 8010c9e:	460c      	mov	r4, r1
 8010ca0:	2101      	movs	r1, #1
 8010ca2:	f7ff febb 	bl	8010a1c <_Balloc>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	b928      	cbnz	r0, 8010cb6 <__i2b+0x1a>
 8010caa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010cae:	4b04      	ldr	r3, [pc, #16]	; (8010cc0 <__i2b+0x24>)
 8010cb0:	4804      	ldr	r0, [pc, #16]	; (8010cc4 <__i2b+0x28>)
 8010cb2:	f7fe fc75 	bl	800f5a0 <__assert_func>
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	6144      	str	r4, [r0, #20]
 8010cba:	6103      	str	r3, [r0, #16]
 8010cbc:	bd10      	pop	{r4, pc}
 8010cbe:	bf00      	nop
 8010cc0:	08012690 	.word	0x08012690
 8010cc4:	0801271c 	.word	0x0801271c

08010cc8 <__multiply>:
 8010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	4691      	mov	r9, r2
 8010cce:	690a      	ldr	r2, [r1, #16]
 8010cd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010cd4:	460c      	mov	r4, r1
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	bfbe      	ittt	lt
 8010cda:	460b      	movlt	r3, r1
 8010cdc:	464c      	movlt	r4, r9
 8010cde:	4699      	movlt	r9, r3
 8010ce0:	6927      	ldr	r7, [r4, #16]
 8010ce2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010ce6:	68a3      	ldr	r3, [r4, #8]
 8010ce8:	6861      	ldr	r1, [r4, #4]
 8010cea:	eb07 060a 	add.w	r6, r7, sl
 8010cee:	42b3      	cmp	r3, r6
 8010cf0:	b085      	sub	sp, #20
 8010cf2:	bfb8      	it	lt
 8010cf4:	3101      	addlt	r1, #1
 8010cf6:	f7ff fe91 	bl	8010a1c <_Balloc>
 8010cfa:	b930      	cbnz	r0, 8010d0a <__multiply+0x42>
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	f240 115d 	movw	r1, #349	; 0x15d
 8010d02:	4b43      	ldr	r3, [pc, #268]	; (8010e10 <__multiply+0x148>)
 8010d04:	4843      	ldr	r0, [pc, #268]	; (8010e14 <__multiply+0x14c>)
 8010d06:	f7fe fc4b 	bl	800f5a0 <__assert_func>
 8010d0a:	f100 0514 	add.w	r5, r0, #20
 8010d0e:	462b      	mov	r3, r5
 8010d10:	2200      	movs	r2, #0
 8010d12:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010d16:	4543      	cmp	r3, r8
 8010d18:	d321      	bcc.n	8010d5e <__multiply+0x96>
 8010d1a:	f104 0314 	add.w	r3, r4, #20
 8010d1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010d22:	f109 0314 	add.w	r3, r9, #20
 8010d26:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010d2a:	9202      	str	r2, [sp, #8]
 8010d2c:	1b3a      	subs	r2, r7, r4
 8010d2e:	3a15      	subs	r2, #21
 8010d30:	f022 0203 	bic.w	r2, r2, #3
 8010d34:	3204      	adds	r2, #4
 8010d36:	f104 0115 	add.w	r1, r4, #21
 8010d3a:	428f      	cmp	r7, r1
 8010d3c:	bf38      	it	cc
 8010d3e:	2204      	movcc	r2, #4
 8010d40:	9201      	str	r2, [sp, #4]
 8010d42:	9a02      	ldr	r2, [sp, #8]
 8010d44:	9303      	str	r3, [sp, #12]
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d80c      	bhi.n	8010d64 <__multiply+0x9c>
 8010d4a:	2e00      	cmp	r6, #0
 8010d4c:	dd03      	ble.n	8010d56 <__multiply+0x8e>
 8010d4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d059      	beq.n	8010e0a <__multiply+0x142>
 8010d56:	6106      	str	r6, [r0, #16]
 8010d58:	b005      	add	sp, #20
 8010d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d5e:	f843 2b04 	str.w	r2, [r3], #4
 8010d62:	e7d8      	b.n	8010d16 <__multiply+0x4e>
 8010d64:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d68:	f1ba 0f00 	cmp.w	sl, #0
 8010d6c:	d023      	beq.n	8010db6 <__multiply+0xee>
 8010d6e:	46a9      	mov	r9, r5
 8010d70:	f04f 0c00 	mov.w	ip, #0
 8010d74:	f104 0e14 	add.w	lr, r4, #20
 8010d78:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010d7c:	f8d9 1000 	ldr.w	r1, [r9]
 8010d80:	fa1f fb82 	uxth.w	fp, r2
 8010d84:	b289      	uxth	r1, r1
 8010d86:	fb0a 110b 	mla	r1, sl, fp, r1
 8010d8a:	4461      	add	r1, ip
 8010d8c:	f8d9 c000 	ldr.w	ip, [r9]
 8010d90:	0c12      	lsrs	r2, r2, #16
 8010d92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010d96:	fb0a c202 	mla	r2, sl, r2, ip
 8010d9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010d9e:	b289      	uxth	r1, r1
 8010da0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010da4:	4577      	cmp	r7, lr
 8010da6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010daa:	f849 1b04 	str.w	r1, [r9], #4
 8010dae:	d8e3      	bhi.n	8010d78 <__multiply+0xb0>
 8010db0:	9a01      	ldr	r2, [sp, #4]
 8010db2:	f845 c002 	str.w	ip, [r5, r2]
 8010db6:	9a03      	ldr	r2, [sp, #12]
 8010db8:	3304      	adds	r3, #4
 8010dba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010dbe:	f1b9 0f00 	cmp.w	r9, #0
 8010dc2:	d020      	beq.n	8010e06 <__multiply+0x13e>
 8010dc4:	46ae      	mov	lr, r5
 8010dc6:	f04f 0a00 	mov.w	sl, #0
 8010dca:	6829      	ldr	r1, [r5, #0]
 8010dcc:	f104 0c14 	add.w	ip, r4, #20
 8010dd0:	f8bc b000 	ldrh.w	fp, [ip]
 8010dd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010dd8:	b289      	uxth	r1, r1
 8010dda:	fb09 220b 	mla	r2, r9, fp, r2
 8010dde:	4492      	add	sl, r2
 8010de0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010de4:	f84e 1b04 	str.w	r1, [lr], #4
 8010de8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010dec:	f8be 1000 	ldrh.w	r1, [lr]
 8010df0:	0c12      	lsrs	r2, r2, #16
 8010df2:	fb09 1102 	mla	r1, r9, r2, r1
 8010df6:	4567      	cmp	r7, ip
 8010df8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010dfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010e00:	d8e6      	bhi.n	8010dd0 <__multiply+0x108>
 8010e02:	9a01      	ldr	r2, [sp, #4]
 8010e04:	50a9      	str	r1, [r5, r2]
 8010e06:	3504      	adds	r5, #4
 8010e08:	e79b      	b.n	8010d42 <__multiply+0x7a>
 8010e0a:	3e01      	subs	r6, #1
 8010e0c:	e79d      	b.n	8010d4a <__multiply+0x82>
 8010e0e:	bf00      	nop
 8010e10:	08012690 	.word	0x08012690
 8010e14:	0801271c 	.word	0x0801271c

08010e18 <__pow5mult>:
 8010e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e1c:	4615      	mov	r5, r2
 8010e1e:	f012 0203 	ands.w	r2, r2, #3
 8010e22:	4606      	mov	r6, r0
 8010e24:	460f      	mov	r7, r1
 8010e26:	d007      	beq.n	8010e38 <__pow5mult+0x20>
 8010e28:	4c25      	ldr	r4, [pc, #148]	; (8010ec0 <__pow5mult+0xa8>)
 8010e2a:	3a01      	subs	r2, #1
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e32:	f7ff fe55 	bl	8010ae0 <__multadd>
 8010e36:	4607      	mov	r7, r0
 8010e38:	10ad      	asrs	r5, r5, #2
 8010e3a:	d03d      	beq.n	8010eb8 <__pow5mult+0xa0>
 8010e3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010e3e:	b97c      	cbnz	r4, 8010e60 <__pow5mult+0x48>
 8010e40:	2010      	movs	r0, #16
 8010e42:	f7ff fdc3 	bl	80109cc <malloc>
 8010e46:	4602      	mov	r2, r0
 8010e48:	6270      	str	r0, [r6, #36]	; 0x24
 8010e4a:	b928      	cbnz	r0, 8010e58 <__pow5mult+0x40>
 8010e4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010e50:	4b1c      	ldr	r3, [pc, #112]	; (8010ec4 <__pow5mult+0xac>)
 8010e52:	481d      	ldr	r0, [pc, #116]	; (8010ec8 <__pow5mult+0xb0>)
 8010e54:	f7fe fba4 	bl	800f5a0 <__assert_func>
 8010e58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e5c:	6004      	str	r4, [r0, #0]
 8010e5e:	60c4      	str	r4, [r0, #12]
 8010e60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e68:	b94c      	cbnz	r4, 8010e7e <__pow5mult+0x66>
 8010e6a:	f240 2171 	movw	r1, #625	; 0x271
 8010e6e:	4630      	mov	r0, r6
 8010e70:	f7ff ff14 	bl	8010c9c <__i2b>
 8010e74:	2300      	movs	r3, #0
 8010e76:	4604      	mov	r4, r0
 8010e78:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e7c:	6003      	str	r3, [r0, #0]
 8010e7e:	f04f 0900 	mov.w	r9, #0
 8010e82:	07eb      	lsls	r3, r5, #31
 8010e84:	d50a      	bpl.n	8010e9c <__pow5mult+0x84>
 8010e86:	4639      	mov	r1, r7
 8010e88:	4622      	mov	r2, r4
 8010e8a:	4630      	mov	r0, r6
 8010e8c:	f7ff ff1c 	bl	8010cc8 <__multiply>
 8010e90:	4680      	mov	r8, r0
 8010e92:	4639      	mov	r1, r7
 8010e94:	4630      	mov	r0, r6
 8010e96:	f7ff fe01 	bl	8010a9c <_Bfree>
 8010e9a:	4647      	mov	r7, r8
 8010e9c:	106d      	asrs	r5, r5, #1
 8010e9e:	d00b      	beq.n	8010eb8 <__pow5mult+0xa0>
 8010ea0:	6820      	ldr	r0, [r4, #0]
 8010ea2:	b938      	cbnz	r0, 8010eb4 <__pow5mult+0x9c>
 8010ea4:	4622      	mov	r2, r4
 8010ea6:	4621      	mov	r1, r4
 8010ea8:	4630      	mov	r0, r6
 8010eaa:	f7ff ff0d 	bl	8010cc8 <__multiply>
 8010eae:	6020      	str	r0, [r4, #0]
 8010eb0:	f8c0 9000 	str.w	r9, [r0]
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	e7e4      	b.n	8010e82 <__pow5mult+0x6a>
 8010eb8:	4638      	mov	r0, r7
 8010eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ebe:	bf00      	nop
 8010ec0:	08012868 	.word	0x08012868
 8010ec4:	08012578 	.word	0x08012578
 8010ec8:	0801271c 	.word	0x0801271c

08010ecc <__lshift>:
 8010ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed0:	460c      	mov	r4, r1
 8010ed2:	4607      	mov	r7, r0
 8010ed4:	4691      	mov	r9, r2
 8010ed6:	6923      	ldr	r3, [r4, #16]
 8010ed8:	6849      	ldr	r1, [r1, #4]
 8010eda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ede:	68a3      	ldr	r3, [r4, #8]
 8010ee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ee4:	f108 0601 	add.w	r6, r8, #1
 8010ee8:	42b3      	cmp	r3, r6
 8010eea:	db0b      	blt.n	8010f04 <__lshift+0x38>
 8010eec:	4638      	mov	r0, r7
 8010eee:	f7ff fd95 	bl	8010a1c <_Balloc>
 8010ef2:	4605      	mov	r5, r0
 8010ef4:	b948      	cbnz	r0, 8010f0a <__lshift+0x3e>
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010efc:	4b29      	ldr	r3, [pc, #164]	; (8010fa4 <__lshift+0xd8>)
 8010efe:	482a      	ldr	r0, [pc, #168]	; (8010fa8 <__lshift+0xdc>)
 8010f00:	f7fe fb4e 	bl	800f5a0 <__assert_func>
 8010f04:	3101      	adds	r1, #1
 8010f06:	005b      	lsls	r3, r3, #1
 8010f08:	e7ee      	b.n	8010ee8 <__lshift+0x1c>
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	f100 0114 	add.w	r1, r0, #20
 8010f10:	f100 0210 	add.w	r2, r0, #16
 8010f14:	4618      	mov	r0, r3
 8010f16:	4553      	cmp	r3, sl
 8010f18:	db37      	blt.n	8010f8a <__lshift+0xbe>
 8010f1a:	6920      	ldr	r0, [r4, #16]
 8010f1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f20:	f104 0314 	add.w	r3, r4, #20
 8010f24:	f019 091f 	ands.w	r9, r9, #31
 8010f28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010f30:	d02f      	beq.n	8010f92 <__lshift+0xc6>
 8010f32:	468a      	mov	sl, r1
 8010f34:	f04f 0c00 	mov.w	ip, #0
 8010f38:	f1c9 0e20 	rsb	lr, r9, #32
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	fa02 f209 	lsl.w	r2, r2, r9
 8010f42:	ea42 020c 	orr.w	r2, r2, ip
 8010f46:	f84a 2b04 	str.w	r2, [sl], #4
 8010f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f4e:	4298      	cmp	r0, r3
 8010f50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010f54:	d8f2      	bhi.n	8010f3c <__lshift+0x70>
 8010f56:	1b03      	subs	r3, r0, r4
 8010f58:	3b15      	subs	r3, #21
 8010f5a:	f023 0303 	bic.w	r3, r3, #3
 8010f5e:	3304      	adds	r3, #4
 8010f60:	f104 0215 	add.w	r2, r4, #21
 8010f64:	4290      	cmp	r0, r2
 8010f66:	bf38      	it	cc
 8010f68:	2304      	movcc	r3, #4
 8010f6a:	f841 c003 	str.w	ip, [r1, r3]
 8010f6e:	f1bc 0f00 	cmp.w	ip, #0
 8010f72:	d001      	beq.n	8010f78 <__lshift+0xac>
 8010f74:	f108 0602 	add.w	r6, r8, #2
 8010f78:	3e01      	subs	r6, #1
 8010f7a:	4638      	mov	r0, r7
 8010f7c:	4621      	mov	r1, r4
 8010f7e:	612e      	str	r6, [r5, #16]
 8010f80:	f7ff fd8c 	bl	8010a9c <_Bfree>
 8010f84:	4628      	mov	r0, r5
 8010f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f8e:	3301      	adds	r3, #1
 8010f90:	e7c1      	b.n	8010f16 <__lshift+0x4a>
 8010f92:	3904      	subs	r1, #4
 8010f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f98:	4298      	cmp	r0, r3
 8010f9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f9e:	d8f9      	bhi.n	8010f94 <__lshift+0xc8>
 8010fa0:	e7ea      	b.n	8010f78 <__lshift+0xac>
 8010fa2:	bf00      	nop
 8010fa4:	08012690 	.word	0x08012690
 8010fa8:	0801271c 	.word	0x0801271c

08010fac <__mcmp>:
 8010fac:	4603      	mov	r3, r0
 8010fae:	690a      	ldr	r2, [r1, #16]
 8010fb0:	6900      	ldr	r0, [r0, #16]
 8010fb2:	b530      	push	{r4, r5, lr}
 8010fb4:	1a80      	subs	r0, r0, r2
 8010fb6:	d10d      	bne.n	8010fd4 <__mcmp+0x28>
 8010fb8:	3314      	adds	r3, #20
 8010fba:	3114      	adds	r1, #20
 8010fbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010fc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010fc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010fc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010fcc:	4295      	cmp	r5, r2
 8010fce:	d002      	beq.n	8010fd6 <__mcmp+0x2a>
 8010fd0:	d304      	bcc.n	8010fdc <__mcmp+0x30>
 8010fd2:	2001      	movs	r0, #1
 8010fd4:	bd30      	pop	{r4, r5, pc}
 8010fd6:	42a3      	cmp	r3, r4
 8010fd8:	d3f4      	bcc.n	8010fc4 <__mcmp+0x18>
 8010fda:	e7fb      	b.n	8010fd4 <__mcmp+0x28>
 8010fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8010fe0:	e7f8      	b.n	8010fd4 <__mcmp+0x28>
	...

08010fe4 <__mdiff>:
 8010fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe8:	460d      	mov	r5, r1
 8010fea:	4607      	mov	r7, r0
 8010fec:	4611      	mov	r1, r2
 8010fee:	4628      	mov	r0, r5
 8010ff0:	4614      	mov	r4, r2
 8010ff2:	f7ff ffdb 	bl	8010fac <__mcmp>
 8010ff6:	1e06      	subs	r6, r0, #0
 8010ff8:	d111      	bne.n	801101e <__mdiff+0x3a>
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	4638      	mov	r0, r7
 8010ffe:	f7ff fd0d 	bl	8010a1c <_Balloc>
 8011002:	4602      	mov	r2, r0
 8011004:	b928      	cbnz	r0, 8011012 <__mdiff+0x2e>
 8011006:	f240 2132 	movw	r1, #562	; 0x232
 801100a:	4b3a      	ldr	r3, [pc, #232]	; (80110f4 <__mdiff+0x110>)
 801100c:	483a      	ldr	r0, [pc, #232]	; (80110f8 <__mdiff+0x114>)
 801100e:	f7fe fac7 	bl	800f5a0 <__assert_func>
 8011012:	2301      	movs	r3, #1
 8011014:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011018:	4610      	mov	r0, r2
 801101a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101e:	bfa4      	itt	ge
 8011020:	4623      	movge	r3, r4
 8011022:	462c      	movge	r4, r5
 8011024:	4638      	mov	r0, r7
 8011026:	6861      	ldr	r1, [r4, #4]
 8011028:	bfa6      	itte	ge
 801102a:	461d      	movge	r5, r3
 801102c:	2600      	movge	r6, #0
 801102e:	2601      	movlt	r6, #1
 8011030:	f7ff fcf4 	bl	8010a1c <_Balloc>
 8011034:	4602      	mov	r2, r0
 8011036:	b918      	cbnz	r0, 8011040 <__mdiff+0x5c>
 8011038:	f44f 7110 	mov.w	r1, #576	; 0x240
 801103c:	4b2d      	ldr	r3, [pc, #180]	; (80110f4 <__mdiff+0x110>)
 801103e:	e7e5      	b.n	801100c <__mdiff+0x28>
 8011040:	f102 0814 	add.w	r8, r2, #20
 8011044:	46c2      	mov	sl, r8
 8011046:	f04f 0c00 	mov.w	ip, #0
 801104a:	6927      	ldr	r7, [r4, #16]
 801104c:	60c6      	str	r6, [r0, #12]
 801104e:	692e      	ldr	r6, [r5, #16]
 8011050:	f104 0014 	add.w	r0, r4, #20
 8011054:	f105 0914 	add.w	r9, r5, #20
 8011058:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 801105c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011060:	3410      	adds	r4, #16
 8011062:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8011066:	f859 3b04 	ldr.w	r3, [r9], #4
 801106a:	fa1f f18b 	uxth.w	r1, fp
 801106e:	448c      	add	ip, r1
 8011070:	b299      	uxth	r1, r3
 8011072:	0c1b      	lsrs	r3, r3, #16
 8011074:	ebac 0101 	sub.w	r1, ip, r1
 8011078:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801107c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011080:	b289      	uxth	r1, r1
 8011082:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011086:	454e      	cmp	r6, r9
 8011088:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801108c:	f84a 3b04 	str.w	r3, [sl], #4
 8011090:	d8e7      	bhi.n	8011062 <__mdiff+0x7e>
 8011092:	1b73      	subs	r3, r6, r5
 8011094:	3b15      	subs	r3, #21
 8011096:	f023 0303 	bic.w	r3, r3, #3
 801109a:	3515      	adds	r5, #21
 801109c:	3304      	adds	r3, #4
 801109e:	42ae      	cmp	r6, r5
 80110a0:	bf38      	it	cc
 80110a2:	2304      	movcc	r3, #4
 80110a4:	4418      	add	r0, r3
 80110a6:	4443      	add	r3, r8
 80110a8:	461e      	mov	r6, r3
 80110aa:	4605      	mov	r5, r0
 80110ac:	4575      	cmp	r5, lr
 80110ae:	d30e      	bcc.n	80110ce <__mdiff+0xea>
 80110b0:	f10e 0103 	add.w	r1, lr, #3
 80110b4:	1a09      	subs	r1, r1, r0
 80110b6:	f021 0103 	bic.w	r1, r1, #3
 80110ba:	3803      	subs	r0, #3
 80110bc:	4586      	cmp	lr, r0
 80110be:	bf38      	it	cc
 80110c0:	2100      	movcc	r1, #0
 80110c2:	4419      	add	r1, r3
 80110c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80110c8:	b18b      	cbz	r3, 80110ee <__mdiff+0x10a>
 80110ca:	6117      	str	r7, [r2, #16]
 80110cc:	e7a4      	b.n	8011018 <__mdiff+0x34>
 80110ce:	f855 8b04 	ldr.w	r8, [r5], #4
 80110d2:	fa1f f188 	uxth.w	r1, r8
 80110d6:	4461      	add	r1, ip
 80110d8:	140c      	asrs	r4, r1, #16
 80110da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80110de:	b289      	uxth	r1, r1
 80110e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80110e4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80110e8:	f846 1b04 	str.w	r1, [r6], #4
 80110ec:	e7de      	b.n	80110ac <__mdiff+0xc8>
 80110ee:	3f01      	subs	r7, #1
 80110f0:	e7e8      	b.n	80110c4 <__mdiff+0xe0>
 80110f2:	bf00      	nop
 80110f4:	08012690 	.word	0x08012690
 80110f8:	0801271c 	.word	0x0801271c

080110fc <__ulp>:
 80110fc:	4b11      	ldr	r3, [pc, #68]	; (8011144 <__ulp+0x48>)
 80110fe:	400b      	ands	r3, r1
 8011100:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011104:	2b00      	cmp	r3, #0
 8011106:	dd02      	ble.n	801110e <__ulp+0x12>
 8011108:	2000      	movs	r0, #0
 801110a:	4619      	mov	r1, r3
 801110c:	4770      	bx	lr
 801110e:	425b      	negs	r3, r3
 8011110:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011114:	f04f 0000 	mov.w	r0, #0
 8011118:	f04f 0100 	mov.w	r1, #0
 801111c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011120:	da04      	bge.n	801112c <__ulp+0x30>
 8011122:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011126:	fa43 f102 	asr.w	r1, r3, r2
 801112a:	4770      	bx	lr
 801112c:	f1a2 0314 	sub.w	r3, r2, #20
 8011130:	2b1e      	cmp	r3, #30
 8011132:	bfd6      	itet	le
 8011134:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011138:	2301      	movgt	r3, #1
 801113a:	fa22 f303 	lsrle.w	r3, r2, r3
 801113e:	4618      	mov	r0, r3
 8011140:	4770      	bx	lr
 8011142:	bf00      	nop
 8011144:	7ff00000 	.word	0x7ff00000

08011148 <__b2d>:
 8011148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801114c:	6907      	ldr	r7, [r0, #16]
 801114e:	f100 0914 	add.w	r9, r0, #20
 8011152:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8011156:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801115a:	f1a7 0804 	sub.w	r8, r7, #4
 801115e:	4630      	mov	r0, r6
 8011160:	f7ff fd4e 	bl	8010c00 <__hi0bits>
 8011164:	f1c0 0320 	rsb	r3, r0, #32
 8011168:	280a      	cmp	r0, #10
 801116a:	600b      	str	r3, [r1, #0]
 801116c:	491f      	ldr	r1, [pc, #124]	; (80111ec <__b2d+0xa4>)
 801116e:	dc17      	bgt.n	80111a0 <__b2d+0x58>
 8011170:	45c1      	cmp	r9, r8
 8011172:	bf28      	it	cs
 8011174:	2200      	movcs	r2, #0
 8011176:	f1c0 0c0b 	rsb	ip, r0, #11
 801117a:	fa26 f30c 	lsr.w	r3, r6, ip
 801117e:	bf38      	it	cc
 8011180:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011184:	ea43 0501 	orr.w	r5, r3, r1
 8011188:	f100 0315 	add.w	r3, r0, #21
 801118c:	fa06 f303 	lsl.w	r3, r6, r3
 8011190:	fa22 f20c 	lsr.w	r2, r2, ip
 8011194:	ea43 0402 	orr.w	r4, r3, r2
 8011198:	4620      	mov	r0, r4
 801119a:	4629      	mov	r1, r5
 801119c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111a0:	45c1      	cmp	r9, r8
 80111a2:	bf2e      	itee	cs
 80111a4:	2200      	movcs	r2, #0
 80111a6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80111aa:	f1a7 0808 	subcc.w	r8, r7, #8
 80111ae:	f1b0 030b 	subs.w	r3, r0, #11
 80111b2:	d016      	beq.n	80111e2 <__b2d+0x9a>
 80111b4:	f1c3 0720 	rsb	r7, r3, #32
 80111b8:	fa22 f107 	lsr.w	r1, r2, r7
 80111bc:	45c8      	cmp	r8, r9
 80111be:	fa06 f603 	lsl.w	r6, r6, r3
 80111c2:	ea46 0601 	orr.w	r6, r6, r1
 80111c6:	bf94      	ite	ls
 80111c8:	2100      	movls	r1, #0
 80111ca:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80111ce:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80111d2:	fa02 f003 	lsl.w	r0, r2, r3
 80111d6:	40f9      	lsrs	r1, r7
 80111d8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80111dc:	ea40 0401 	orr.w	r4, r0, r1
 80111e0:	e7da      	b.n	8011198 <__b2d+0x50>
 80111e2:	4614      	mov	r4, r2
 80111e4:	ea46 0501 	orr.w	r5, r6, r1
 80111e8:	e7d6      	b.n	8011198 <__b2d+0x50>
 80111ea:	bf00      	nop
 80111ec:	3ff00000 	.word	0x3ff00000

080111f0 <__d2b>:
 80111f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80111f4:	2101      	movs	r1, #1
 80111f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80111fa:	4690      	mov	r8, r2
 80111fc:	461d      	mov	r5, r3
 80111fe:	f7ff fc0d 	bl	8010a1c <_Balloc>
 8011202:	4604      	mov	r4, r0
 8011204:	b930      	cbnz	r0, 8011214 <__d2b+0x24>
 8011206:	4602      	mov	r2, r0
 8011208:	f240 310a 	movw	r1, #778	; 0x30a
 801120c:	4b24      	ldr	r3, [pc, #144]	; (80112a0 <__d2b+0xb0>)
 801120e:	4825      	ldr	r0, [pc, #148]	; (80112a4 <__d2b+0xb4>)
 8011210:	f7fe f9c6 	bl	800f5a0 <__assert_func>
 8011214:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8011218:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801121c:	bb2d      	cbnz	r5, 801126a <__d2b+0x7a>
 801121e:	9301      	str	r3, [sp, #4]
 8011220:	f1b8 0300 	subs.w	r3, r8, #0
 8011224:	d026      	beq.n	8011274 <__d2b+0x84>
 8011226:	4668      	mov	r0, sp
 8011228:	9300      	str	r3, [sp, #0]
 801122a:	f7ff fd09 	bl	8010c40 <__lo0bits>
 801122e:	9900      	ldr	r1, [sp, #0]
 8011230:	b1f0      	cbz	r0, 8011270 <__d2b+0x80>
 8011232:	9a01      	ldr	r2, [sp, #4]
 8011234:	f1c0 0320 	rsb	r3, r0, #32
 8011238:	fa02 f303 	lsl.w	r3, r2, r3
 801123c:	430b      	orrs	r3, r1
 801123e:	40c2      	lsrs	r2, r0
 8011240:	6163      	str	r3, [r4, #20]
 8011242:	9201      	str	r2, [sp, #4]
 8011244:	9b01      	ldr	r3, [sp, #4]
 8011246:	2b00      	cmp	r3, #0
 8011248:	bf14      	ite	ne
 801124a:	2102      	movne	r1, #2
 801124c:	2101      	moveq	r1, #1
 801124e:	61a3      	str	r3, [r4, #24]
 8011250:	6121      	str	r1, [r4, #16]
 8011252:	b1c5      	cbz	r5, 8011286 <__d2b+0x96>
 8011254:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011258:	4405      	add	r5, r0
 801125a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801125e:	603d      	str	r5, [r7, #0]
 8011260:	6030      	str	r0, [r6, #0]
 8011262:	4620      	mov	r0, r4
 8011264:	b002      	add	sp, #8
 8011266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801126a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801126e:	e7d6      	b.n	801121e <__d2b+0x2e>
 8011270:	6161      	str	r1, [r4, #20]
 8011272:	e7e7      	b.n	8011244 <__d2b+0x54>
 8011274:	a801      	add	r0, sp, #4
 8011276:	f7ff fce3 	bl	8010c40 <__lo0bits>
 801127a:	2101      	movs	r1, #1
 801127c:	9b01      	ldr	r3, [sp, #4]
 801127e:	6121      	str	r1, [r4, #16]
 8011280:	6163      	str	r3, [r4, #20]
 8011282:	3020      	adds	r0, #32
 8011284:	e7e5      	b.n	8011252 <__d2b+0x62>
 8011286:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801128a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801128e:	6038      	str	r0, [r7, #0]
 8011290:	6918      	ldr	r0, [r3, #16]
 8011292:	f7ff fcb5 	bl	8010c00 <__hi0bits>
 8011296:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801129a:	6031      	str	r1, [r6, #0]
 801129c:	e7e1      	b.n	8011262 <__d2b+0x72>
 801129e:	bf00      	nop
 80112a0:	08012690 	.word	0x08012690
 80112a4:	0801271c 	.word	0x0801271c

080112a8 <__ratio>:
 80112a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ac:	4688      	mov	r8, r1
 80112ae:	4669      	mov	r1, sp
 80112b0:	4681      	mov	r9, r0
 80112b2:	f7ff ff49 	bl	8011148 <__b2d>
 80112b6:	460f      	mov	r7, r1
 80112b8:	4604      	mov	r4, r0
 80112ba:	460d      	mov	r5, r1
 80112bc:	4640      	mov	r0, r8
 80112be:	a901      	add	r1, sp, #4
 80112c0:	f7ff ff42 	bl	8011148 <__b2d>
 80112c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80112c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80112cc:	468b      	mov	fp, r1
 80112ce:	eba3 0c02 	sub.w	ip, r3, r2
 80112d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80112d6:	1a9b      	subs	r3, r3, r2
 80112d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80112dc:	2b00      	cmp	r3, #0
 80112de:	bfd5      	itete	le
 80112e0:	460a      	movle	r2, r1
 80112e2:	462a      	movgt	r2, r5
 80112e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80112e8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80112ec:	bfd8      	it	le
 80112ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80112f2:	465b      	mov	r3, fp
 80112f4:	4602      	mov	r2, r0
 80112f6:	4639      	mov	r1, r7
 80112f8:	4620      	mov	r0, r4
 80112fa:	f7ef fa39 	bl	8000770 <__aeabi_ddiv>
 80112fe:	b003      	add	sp, #12
 8011300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011304 <__copybits>:
 8011304:	3901      	subs	r1, #1
 8011306:	b570      	push	{r4, r5, r6, lr}
 8011308:	1149      	asrs	r1, r1, #5
 801130a:	6914      	ldr	r4, [r2, #16]
 801130c:	3101      	adds	r1, #1
 801130e:	f102 0314 	add.w	r3, r2, #20
 8011312:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011316:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801131a:	1f05      	subs	r5, r0, #4
 801131c:	42a3      	cmp	r3, r4
 801131e:	d30c      	bcc.n	801133a <__copybits+0x36>
 8011320:	1aa3      	subs	r3, r4, r2
 8011322:	3b11      	subs	r3, #17
 8011324:	f023 0303 	bic.w	r3, r3, #3
 8011328:	3211      	adds	r2, #17
 801132a:	42a2      	cmp	r2, r4
 801132c:	bf88      	it	hi
 801132e:	2300      	movhi	r3, #0
 8011330:	4418      	add	r0, r3
 8011332:	2300      	movs	r3, #0
 8011334:	4288      	cmp	r0, r1
 8011336:	d305      	bcc.n	8011344 <__copybits+0x40>
 8011338:	bd70      	pop	{r4, r5, r6, pc}
 801133a:	f853 6b04 	ldr.w	r6, [r3], #4
 801133e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011342:	e7eb      	b.n	801131c <__copybits+0x18>
 8011344:	f840 3b04 	str.w	r3, [r0], #4
 8011348:	e7f4      	b.n	8011334 <__copybits+0x30>

0801134a <__any_on>:
 801134a:	f100 0214 	add.w	r2, r0, #20
 801134e:	6900      	ldr	r0, [r0, #16]
 8011350:	114b      	asrs	r3, r1, #5
 8011352:	4298      	cmp	r0, r3
 8011354:	b510      	push	{r4, lr}
 8011356:	db11      	blt.n	801137c <__any_on+0x32>
 8011358:	dd0a      	ble.n	8011370 <__any_on+0x26>
 801135a:	f011 011f 	ands.w	r1, r1, #31
 801135e:	d007      	beq.n	8011370 <__any_on+0x26>
 8011360:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011364:	fa24 f001 	lsr.w	r0, r4, r1
 8011368:	fa00 f101 	lsl.w	r1, r0, r1
 801136c:	428c      	cmp	r4, r1
 801136e:	d10b      	bne.n	8011388 <__any_on+0x3e>
 8011370:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011374:	4293      	cmp	r3, r2
 8011376:	d803      	bhi.n	8011380 <__any_on+0x36>
 8011378:	2000      	movs	r0, #0
 801137a:	bd10      	pop	{r4, pc}
 801137c:	4603      	mov	r3, r0
 801137e:	e7f7      	b.n	8011370 <__any_on+0x26>
 8011380:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011384:	2900      	cmp	r1, #0
 8011386:	d0f5      	beq.n	8011374 <__any_on+0x2a>
 8011388:	2001      	movs	r0, #1
 801138a:	e7f6      	b.n	801137a <__any_on+0x30>

0801138c <_calloc_r>:
 801138c:	b570      	push	{r4, r5, r6, lr}
 801138e:	fba1 5402 	umull	r5, r4, r1, r2
 8011392:	b934      	cbnz	r4, 80113a2 <_calloc_r+0x16>
 8011394:	4629      	mov	r1, r5
 8011396:	f000 f875 	bl	8011484 <_malloc_r>
 801139a:	4606      	mov	r6, r0
 801139c:	b928      	cbnz	r0, 80113aa <_calloc_r+0x1e>
 801139e:	4630      	mov	r0, r6
 80113a0:	bd70      	pop	{r4, r5, r6, pc}
 80113a2:	220c      	movs	r2, #12
 80113a4:	2600      	movs	r6, #0
 80113a6:	6002      	str	r2, [r0, #0]
 80113a8:	e7f9      	b.n	801139e <_calloc_r+0x12>
 80113aa:	462a      	mov	r2, r5
 80113ac:	4621      	mov	r1, r4
 80113ae:	f7fc fdf3 	bl	800df98 <memset>
 80113b2:	e7f4      	b.n	801139e <_calloc_r+0x12>

080113b4 <_free_r>:
 80113b4:	b538      	push	{r3, r4, r5, lr}
 80113b6:	4605      	mov	r5, r0
 80113b8:	2900      	cmp	r1, #0
 80113ba:	d040      	beq.n	801143e <_free_r+0x8a>
 80113bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113c0:	1f0c      	subs	r4, r1, #4
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	bfb8      	it	lt
 80113c6:	18e4      	addlt	r4, r4, r3
 80113c8:	f000 feba 	bl	8012140 <__malloc_lock>
 80113cc:	4a1c      	ldr	r2, [pc, #112]	; (8011440 <_free_r+0x8c>)
 80113ce:	6813      	ldr	r3, [r2, #0]
 80113d0:	b933      	cbnz	r3, 80113e0 <_free_r+0x2c>
 80113d2:	6063      	str	r3, [r4, #4]
 80113d4:	6014      	str	r4, [r2, #0]
 80113d6:	4628      	mov	r0, r5
 80113d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113dc:	f000 beb6 	b.w	801214c <__malloc_unlock>
 80113e0:	42a3      	cmp	r3, r4
 80113e2:	d908      	bls.n	80113f6 <_free_r+0x42>
 80113e4:	6820      	ldr	r0, [r4, #0]
 80113e6:	1821      	adds	r1, r4, r0
 80113e8:	428b      	cmp	r3, r1
 80113ea:	bf01      	itttt	eq
 80113ec:	6819      	ldreq	r1, [r3, #0]
 80113ee:	685b      	ldreq	r3, [r3, #4]
 80113f0:	1809      	addeq	r1, r1, r0
 80113f2:	6021      	streq	r1, [r4, #0]
 80113f4:	e7ed      	b.n	80113d2 <_free_r+0x1e>
 80113f6:	461a      	mov	r2, r3
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	b10b      	cbz	r3, 8011400 <_free_r+0x4c>
 80113fc:	42a3      	cmp	r3, r4
 80113fe:	d9fa      	bls.n	80113f6 <_free_r+0x42>
 8011400:	6811      	ldr	r1, [r2, #0]
 8011402:	1850      	adds	r0, r2, r1
 8011404:	42a0      	cmp	r0, r4
 8011406:	d10b      	bne.n	8011420 <_free_r+0x6c>
 8011408:	6820      	ldr	r0, [r4, #0]
 801140a:	4401      	add	r1, r0
 801140c:	1850      	adds	r0, r2, r1
 801140e:	4283      	cmp	r3, r0
 8011410:	6011      	str	r1, [r2, #0]
 8011412:	d1e0      	bne.n	80113d6 <_free_r+0x22>
 8011414:	6818      	ldr	r0, [r3, #0]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	4401      	add	r1, r0
 801141a:	6011      	str	r1, [r2, #0]
 801141c:	6053      	str	r3, [r2, #4]
 801141e:	e7da      	b.n	80113d6 <_free_r+0x22>
 8011420:	d902      	bls.n	8011428 <_free_r+0x74>
 8011422:	230c      	movs	r3, #12
 8011424:	602b      	str	r3, [r5, #0]
 8011426:	e7d6      	b.n	80113d6 <_free_r+0x22>
 8011428:	6820      	ldr	r0, [r4, #0]
 801142a:	1821      	adds	r1, r4, r0
 801142c:	428b      	cmp	r3, r1
 801142e:	bf01      	itttt	eq
 8011430:	6819      	ldreq	r1, [r3, #0]
 8011432:	685b      	ldreq	r3, [r3, #4]
 8011434:	1809      	addeq	r1, r1, r0
 8011436:	6021      	streq	r1, [r4, #0]
 8011438:	6063      	str	r3, [r4, #4]
 801143a:	6054      	str	r4, [r2, #4]
 801143c:	e7cb      	b.n	80113d6 <_free_r+0x22>
 801143e:	bd38      	pop	{r3, r4, r5, pc}
 8011440:	200018a0 	.word	0x200018a0

08011444 <sbrk_aligned>:
 8011444:	b570      	push	{r4, r5, r6, lr}
 8011446:	4e0e      	ldr	r6, [pc, #56]	; (8011480 <sbrk_aligned+0x3c>)
 8011448:	460c      	mov	r4, r1
 801144a:	6831      	ldr	r1, [r6, #0]
 801144c:	4605      	mov	r5, r0
 801144e:	b911      	cbnz	r1, 8011456 <sbrk_aligned+0x12>
 8011450:	f000 fb46 	bl	8011ae0 <_sbrk_r>
 8011454:	6030      	str	r0, [r6, #0]
 8011456:	4621      	mov	r1, r4
 8011458:	4628      	mov	r0, r5
 801145a:	f000 fb41 	bl	8011ae0 <_sbrk_r>
 801145e:	1c43      	adds	r3, r0, #1
 8011460:	d00a      	beq.n	8011478 <sbrk_aligned+0x34>
 8011462:	1cc4      	adds	r4, r0, #3
 8011464:	f024 0403 	bic.w	r4, r4, #3
 8011468:	42a0      	cmp	r0, r4
 801146a:	d007      	beq.n	801147c <sbrk_aligned+0x38>
 801146c:	1a21      	subs	r1, r4, r0
 801146e:	4628      	mov	r0, r5
 8011470:	f000 fb36 	bl	8011ae0 <_sbrk_r>
 8011474:	3001      	adds	r0, #1
 8011476:	d101      	bne.n	801147c <sbrk_aligned+0x38>
 8011478:	f04f 34ff 	mov.w	r4, #4294967295
 801147c:	4620      	mov	r0, r4
 801147e:	bd70      	pop	{r4, r5, r6, pc}
 8011480:	200018a4 	.word	0x200018a4

08011484 <_malloc_r>:
 8011484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011488:	1ccd      	adds	r5, r1, #3
 801148a:	f025 0503 	bic.w	r5, r5, #3
 801148e:	3508      	adds	r5, #8
 8011490:	2d0c      	cmp	r5, #12
 8011492:	bf38      	it	cc
 8011494:	250c      	movcc	r5, #12
 8011496:	2d00      	cmp	r5, #0
 8011498:	4607      	mov	r7, r0
 801149a:	db01      	blt.n	80114a0 <_malloc_r+0x1c>
 801149c:	42a9      	cmp	r1, r5
 801149e:	d905      	bls.n	80114ac <_malloc_r+0x28>
 80114a0:	230c      	movs	r3, #12
 80114a2:	2600      	movs	r6, #0
 80114a4:	603b      	str	r3, [r7, #0]
 80114a6:	4630      	mov	r0, r6
 80114a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114ac:	4e2e      	ldr	r6, [pc, #184]	; (8011568 <_malloc_r+0xe4>)
 80114ae:	f000 fe47 	bl	8012140 <__malloc_lock>
 80114b2:	6833      	ldr	r3, [r6, #0]
 80114b4:	461c      	mov	r4, r3
 80114b6:	bb34      	cbnz	r4, 8011506 <_malloc_r+0x82>
 80114b8:	4629      	mov	r1, r5
 80114ba:	4638      	mov	r0, r7
 80114bc:	f7ff ffc2 	bl	8011444 <sbrk_aligned>
 80114c0:	1c43      	adds	r3, r0, #1
 80114c2:	4604      	mov	r4, r0
 80114c4:	d14d      	bne.n	8011562 <_malloc_r+0xde>
 80114c6:	6834      	ldr	r4, [r6, #0]
 80114c8:	4626      	mov	r6, r4
 80114ca:	2e00      	cmp	r6, #0
 80114cc:	d140      	bne.n	8011550 <_malloc_r+0xcc>
 80114ce:	6823      	ldr	r3, [r4, #0]
 80114d0:	4631      	mov	r1, r6
 80114d2:	4638      	mov	r0, r7
 80114d4:	eb04 0803 	add.w	r8, r4, r3
 80114d8:	f000 fb02 	bl	8011ae0 <_sbrk_r>
 80114dc:	4580      	cmp	r8, r0
 80114de:	d13a      	bne.n	8011556 <_malloc_r+0xd2>
 80114e0:	6821      	ldr	r1, [r4, #0]
 80114e2:	3503      	adds	r5, #3
 80114e4:	1a6d      	subs	r5, r5, r1
 80114e6:	f025 0503 	bic.w	r5, r5, #3
 80114ea:	3508      	adds	r5, #8
 80114ec:	2d0c      	cmp	r5, #12
 80114ee:	bf38      	it	cc
 80114f0:	250c      	movcc	r5, #12
 80114f2:	4638      	mov	r0, r7
 80114f4:	4629      	mov	r1, r5
 80114f6:	f7ff ffa5 	bl	8011444 <sbrk_aligned>
 80114fa:	3001      	adds	r0, #1
 80114fc:	d02b      	beq.n	8011556 <_malloc_r+0xd2>
 80114fe:	6823      	ldr	r3, [r4, #0]
 8011500:	442b      	add	r3, r5
 8011502:	6023      	str	r3, [r4, #0]
 8011504:	e00e      	b.n	8011524 <_malloc_r+0xa0>
 8011506:	6822      	ldr	r2, [r4, #0]
 8011508:	1b52      	subs	r2, r2, r5
 801150a:	d41e      	bmi.n	801154a <_malloc_r+0xc6>
 801150c:	2a0b      	cmp	r2, #11
 801150e:	d916      	bls.n	801153e <_malloc_r+0xba>
 8011510:	1961      	adds	r1, r4, r5
 8011512:	42a3      	cmp	r3, r4
 8011514:	6025      	str	r5, [r4, #0]
 8011516:	bf18      	it	ne
 8011518:	6059      	strne	r1, [r3, #4]
 801151a:	6863      	ldr	r3, [r4, #4]
 801151c:	bf08      	it	eq
 801151e:	6031      	streq	r1, [r6, #0]
 8011520:	5162      	str	r2, [r4, r5]
 8011522:	604b      	str	r3, [r1, #4]
 8011524:	4638      	mov	r0, r7
 8011526:	f104 060b 	add.w	r6, r4, #11
 801152a:	f000 fe0f 	bl	801214c <__malloc_unlock>
 801152e:	f026 0607 	bic.w	r6, r6, #7
 8011532:	1d23      	adds	r3, r4, #4
 8011534:	1af2      	subs	r2, r6, r3
 8011536:	d0b6      	beq.n	80114a6 <_malloc_r+0x22>
 8011538:	1b9b      	subs	r3, r3, r6
 801153a:	50a3      	str	r3, [r4, r2]
 801153c:	e7b3      	b.n	80114a6 <_malloc_r+0x22>
 801153e:	6862      	ldr	r2, [r4, #4]
 8011540:	42a3      	cmp	r3, r4
 8011542:	bf0c      	ite	eq
 8011544:	6032      	streq	r2, [r6, #0]
 8011546:	605a      	strne	r2, [r3, #4]
 8011548:	e7ec      	b.n	8011524 <_malloc_r+0xa0>
 801154a:	4623      	mov	r3, r4
 801154c:	6864      	ldr	r4, [r4, #4]
 801154e:	e7b2      	b.n	80114b6 <_malloc_r+0x32>
 8011550:	4634      	mov	r4, r6
 8011552:	6876      	ldr	r6, [r6, #4]
 8011554:	e7b9      	b.n	80114ca <_malloc_r+0x46>
 8011556:	230c      	movs	r3, #12
 8011558:	4638      	mov	r0, r7
 801155a:	603b      	str	r3, [r7, #0]
 801155c:	f000 fdf6 	bl	801214c <__malloc_unlock>
 8011560:	e7a1      	b.n	80114a6 <_malloc_r+0x22>
 8011562:	6025      	str	r5, [r4, #0]
 8011564:	e7de      	b.n	8011524 <_malloc_r+0xa0>
 8011566:	bf00      	nop
 8011568:	200018a0 	.word	0x200018a0

0801156c <__ssputs_r>:
 801156c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011570:	688e      	ldr	r6, [r1, #8]
 8011572:	4682      	mov	sl, r0
 8011574:	429e      	cmp	r6, r3
 8011576:	460c      	mov	r4, r1
 8011578:	4690      	mov	r8, r2
 801157a:	461f      	mov	r7, r3
 801157c:	d838      	bhi.n	80115f0 <__ssputs_r+0x84>
 801157e:	898a      	ldrh	r2, [r1, #12]
 8011580:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011584:	d032      	beq.n	80115ec <__ssputs_r+0x80>
 8011586:	6825      	ldr	r5, [r4, #0]
 8011588:	6909      	ldr	r1, [r1, #16]
 801158a:	3301      	adds	r3, #1
 801158c:	eba5 0901 	sub.w	r9, r5, r1
 8011590:	6965      	ldr	r5, [r4, #20]
 8011592:	444b      	add	r3, r9
 8011594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801159c:	106d      	asrs	r5, r5, #1
 801159e:	429d      	cmp	r5, r3
 80115a0:	bf38      	it	cc
 80115a2:	461d      	movcc	r5, r3
 80115a4:	0553      	lsls	r3, r2, #21
 80115a6:	d531      	bpl.n	801160c <__ssputs_r+0xa0>
 80115a8:	4629      	mov	r1, r5
 80115aa:	f7ff ff6b 	bl	8011484 <_malloc_r>
 80115ae:	4606      	mov	r6, r0
 80115b0:	b950      	cbnz	r0, 80115c8 <__ssputs_r+0x5c>
 80115b2:	230c      	movs	r3, #12
 80115b4:	f04f 30ff 	mov.w	r0, #4294967295
 80115b8:	f8ca 3000 	str.w	r3, [sl]
 80115bc:	89a3      	ldrh	r3, [r4, #12]
 80115be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115c2:	81a3      	strh	r3, [r4, #12]
 80115c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115c8:	464a      	mov	r2, r9
 80115ca:	6921      	ldr	r1, [r4, #16]
 80115cc:	f7fc fcd6 	bl	800df7c <memcpy>
 80115d0:	89a3      	ldrh	r3, [r4, #12]
 80115d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80115d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115da:	81a3      	strh	r3, [r4, #12]
 80115dc:	6126      	str	r6, [r4, #16]
 80115de:	444e      	add	r6, r9
 80115e0:	6026      	str	r6, [r4, #0]
 80115e2:	463e      	mov	r6, r7
 80115e4:	6165      	str	r5, [r4, #20]
 80115e6:	eba5 0509 	sub.w	r5, r5, r9
 80115ea:	60a5      	str	r5, [r4, #8]
 80115ec:	42be      	cmp	r6, r7
 80115ee:	d900      	bls.n	80115f2 <__ssputs_r+0x86>
 80115f0:	463e      	mov	r6, r7
 80115f2:	4632      	mov	r2, r6
 80115f4:	4641      	mov	r1, r8
 80115f6:	6820      	ldr	r0, [r4, #0]
 80115f8:	f000 fd88 	bl	801210c <memmove>
 80115fc:	68a3      	ldr	r3, [r4, #8]
 80115fe:	2000      	movs	r0, #0
 8011600:	1b9b      	subs	r3, r3, r6
 8011602:	60a3      	str	r3, [r4, #8]
 8011604:	6823      	ldr	r3, [r4, #0]
 8011606:	4433      	add	r3, r6
 8011608:	6023      	str	r3, [r4, #0]
 801160a:	e7db      	b.n	80115c4 <__ssputs_r+0x58>
 801160c:	462a      	mov	r2, r5
 801160e:	f000 fda3 	bl	8012158 <_realloc_r>
 8011612:	4606      	mov	r6, r0
 8011614:	2800      	cmp	r0, #0
 8011616:	d1e1      	bne.n	80115dc <__ssputs_r+0x70>
 8011618:	4650      	mov	r0, sl
 801161a:	6921      	ldr	r1, [r4, #16]
 801161c:	f7ff feca 	bl	80113b4 <_free_r>
 8011620:	e7c7      	b.n	80115b2 <__ssputs_r+0x46>
	...

08011624 <_svfiprintf_r>:
 8011624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011628:	4698      	mov	r8, r3
 801162a:	898b      	ldrh	r3, [r1, #12]
 801162c:	4607      	mov	r7, r0
 801162e:	061b      	lsls	r3, r3, #24
 8011630:	460d      	mov	r5, r1
 8011632:	4614      	mov	r4, r2
 8011634:	b09d      	sub	sp, #116	; 0x74
 8011636:	d50e      	bpl.n	8011656 <_svfiprintf_r+0x32>
 8011638:	690b      	ldr	r3, [r1, #16]
 801163a:	b963      	cbnz	r3, 8011656 <_svfiprintf_r+0x32>
 801163c:	2140      	movs	r1, #64	; 0x40
 801163e:	f7ff ff21 	bl	8011484 <_malloc_r>
 8011642:	6028      	str	r0, [r5, #0]
 8011644:	6128      	str	r0, [r5, #16]
 8011646:	b920      	cbnz	r0, 8011652 <_svfiprintf_r+0x2e>
 8011648:	230c      	movs	r3, #12
 801164a:	603b      	str	r3, [r7, #0]
 801164c:	f04f 30ff 	mov.w	r0, #4294967295
 8011650:	e0d1      	b.n	80117f6 <_svfiprintf_r+0x1d2>
 8011652:	2340      	movs	r3, #64	; 0x40
 8011654:	616b      	str	r3, [r5, #20]
 8011656:	2300      	movs	r3, #0
 8011658:	9309      	str	r3, [sp, #36]	; 0x24
 801165a:	2320      	movs	r3, #32
 801165c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011660:	2330      	movs	r3, #48	; 0x30
 8011662:	f04f 0901 	mov.w	r9, #1
 8011666:	f8cd 800c 	str.w	r8, [sp, #12]
 801166a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011810 <_svfiprintf_r+0x1ec>
 801166e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011672:	4623      	mov	r3, r4
 8011674:	469a      	mov	sl, r3
 8011676:	f813 2b01 	ldrb.w	r2, [r3], #1
 801167a:	b10a      	cbz	r2, 8011680 <_svfiprintf_r+0x5c>
 801167c:	2a25      	cmp	r2, #37	; 0x25
 801167e:	d1f9      	bne.n	8011674 <_svfiprintf_r+0x50>
 8011680:	ebba 0b04 	subs.w	fp, sl, r4
 8011684:	d00b      	beq.n	801169e <_svfiprintf_r+0x7a>
 8011686:	465b      	mov	r3, fp
 8011688:	4622      	mov	r2, r4
 801168a:	4629      	mov	r1, r5
 801168c:	4638      	mov	r0, r7
 801168e:	f7ff ff6d 	bl	801156c <__ssputs_r>
 8011692:	3001      	adds	r0, #1
 8011694:	f000 80aa 	beq.w	80117ec <_svfiprintf_r+0x1c8>
 8011698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801169a:	445a      	add	r2, fp
 801169c:	9209      	str	r2, [sp, #36]	; 0x24
 801169e:	f89a 3000 	ldrb.w	r3, [sl]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f000 80a2 	beq.w	80117ec <_svfiprintf_r+0x1c8>
 80116a8:	2300      	movs	r3, #0
 80116aa:	f04f 32ff 	mov.w	r2, #4294967295
 80116ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116b2:	f10a 0a01 	add.w	sl, sl, #1
 80116b6:	9304      	str	r3, [sp, #16]
 80116b8:	9307      	str	r3, [sp, #28]
 80116ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80116be:	931a      	str	r3, [sp, #104]	; 0x68
 80116c0:	4654      	mov	r4, sl
 80116c2:	2205      	movs	r2, #5
 80116c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116c8:	4851      	ldr	r0, [pc, #324]	; (8011810 <_svfiprintf_r+0x1ec>)
 80116ca:	f7ff f999 	bl	8010a00 <memchr>
 80116ce:	9a04      	ldr	r2, [sp, #16]
 80116d0:	b9d8      	cbnz	r0, 801170a <_svfiprintf_r+0xe6>
 80116d2:	06d0      	lsls	r0, r2, #27
 80116d4:	bf44      	itt	mi
 80116d6:	2320      	movmi	r3, #32
 80116d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116dc:	0711      	lsls	r1, r2, #28
 80116de:	bf44      	itt	mi
 80116e0:	232b      	movmi	r3, #43	; 0x2b
 80116e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116e6:	f89a 3000 	ldrb.w	r3, [sl]
 80116ea:	2b2a      	cmp	r3, #42	; 0x2a
 80116ec:	d015      	beq.n	801171a <_svfiprintf_r+0xf6>
 80116ee:	4654      	mov	r4, sl
 80116f0:	2000      	movs	r0, #0
 80116f2:	f04f 0c0a 	mov.w	ip, #10
 80116f6:	9a07      	ldr	r2, [sp, #28]
 80116f8:	4621      	mov	r1, r4
 80116fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116fe:	3b30      	subs	r3, #48	; 0x30
 8011700:	2b09      	cmp	r3, #9
 8011702:	d94e      	bls.n	80117a2 <_svfiprintf_r+0x17e>
 8011704:	b1b0      	cbz	r0, 8011734 <_svfiprintf_r+0x110>
 8011706:	9207      	str	r2, [sp, #28]
 8011708:	e014      	b.n	8011734 <_svfiprintf_r+0x110>
 801170a:	eba0 0308 	sub.w	r3, r0, r8
 801170e:	fa09 f303 	lsl.w	r3, r9, r3
 8011712:	4313      	orrs	r3, r2
 8011714:	46a2      	mov	sl, r4
 8011716:	9304      	str	r3, [sp, #16]
 8011718:	e7d2      	b.n	80116c0 <_svfiprintf_r+0x9c>
 801171a:	9b03      	ldr	r3, [sp, #12]
 801171c:	1d19      	adds	r1, r3, #4
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	9103      	str	r1, [sp, #12]
 8011722:	2b00      	cmp	r3, #0
 8011724:	bfbb      	ittet	lt
 8011726:	425b      	neglt	r3, r3
 8011728:	f042 0202 	orrlt.w	r2, r2, #2
 801172c:	9307      	strge	r3, [sp, #28]
 801172e:	9307      	strlt	r3, [sp, #28]
 8011730:	bfb8      	it	lt
 8011732:	9204      	strlt	r2, [sp, #16]
 8011734:	7823      	ldrb	r3, [r4, #0]
 8011736:	2b2e      	cmp	r3, #46	; 0x2e
 8011738:	d10c      	bne.n	8011754 <_svfiprintf_r+0x130>
 801173a:	7863      	ldrb	r3, [r4, #1]
 801173c:	2b2a      	cmp	r3, #42	; 0x2a
 801173e:	d135      	bne.n	80117ac <_svfiprintf_r+0x188>
 8011740:	9b03      	ldr	r3, [sp, #12]
 8011742:	3402      	adds	r4, #2
 8011744:	1d1a      	adds	r2, r3, #4
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	9203      	str	r2, [sp, #12]
 801174a:	2b00      	cmp	r3, #0
 801174c:	bfb8      	it	lt
 801174e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011752:	9305      	str	r3, [sp, #20]
 8011754:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8011814 <_svfiprintf_r+0x1f0>
 8011758:	2203      	movs	r2, #3
 801175a:	4650      	mov	r0, sl
 801175c:	7821      	ldrb	r1, [r4, #0]
 801175e:	f7ff f94f 	bl	8010a00 <memchr>
 8011762:	b140      	cbz	r0, 8011776 <_svfiprintf_r+0x152>
 8011764:	2340      	movs	r3, #64	; 0x40
 8011766:	eba0 000a 	sub.w	r0, r0, sl
 801176a:	fa03 f000 	lsl.w	r0, r3, r0
 801176e:	9b04      	ldr	r3, [sp, #16]
 8011770:	3401      	adds	r4, #1
 8011772:	4303      	orrs	r3, r0
 8011774:	9304      	str	r3, [sp, #16]
 8011776:	f814 1b01 	ldrb.w	r1, [r4], #1
 801177a:	2206      	movs	r2, #6
 801177c:	4826      	ldr	r0, [pc, #152]	; (8011818 <_svfiprintf_r+0x1f4>)
 801177e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011782:	f7ff f93d 	bl	8010a00 <memchr>
 8011786:	2800      	cmp	r0, #0
 8011788:	d038      	beq.n	80117fc <_svfiprintf_r+0x1d8>
 801178a:	4b24      	ldr	r3, [pc, #144]	; (801181c <_svfiprintf_r+0x1f8>)
 801178c:	bb1b      	cbnz	r3, 80117d6 <_svfiprintf_r+0x1b2>
 801178e:	9b03      	ldr	r3, [sp, #12]
 8011790:	3307      	adds	r3, #7
 8011792:	f023 0307 	bic.w	r3, r3, #7
 8011796:	3308      	adds	r3, #8
 8011798:	9303      	str	r3, [sp, #12]
 801179a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801179c:	4433      	add	r3, r6
 801179e:	9309      	str	r3, [sp, #36]	; 0x24
 80117a0:	e767      	b.n	8011672 <_svfiprintf_r+0x4e>
 80117a2:	460c      	mov	r4, r1
 80117a4:	2001      	movs	r0, #1
 80117a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80117aa:	e7a5      	b.n	80116f8 <_svfiprintf_r+0xd4>
 80117ac:	2300      	movs	r3, #0
 80117ae:	f04f 0c0a 	mov.w	ip, #10
 80117b2:	4619      	mov	r1, r3
 80117b4:	3401      	adds	r4, #1
 80117b6:	9305      	str	r3, [sp, #20]
 80117b8:	4620      	mov	r0, r4
 80117ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117be:	3a30      	subs	r2, #48	; 0x30
 80117c0:	2a09      	cmp	r2, #9
 80117c2:	d903      	bls.n	80117cc <_svfiprintf_r+0x1a8>
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d0c5      	beq.n	8011754 <_svfiprintf_r+0x130>
 80117c8:	9105      	str	r1, [sp, #20]
 80117ca:	e7c3      	b.n	8011754 <_svfiprintf_r+0x130>
 80117cc:	4604      	mov	r4, r0
 80117ce:	2301      	movs	r3, #1
 80117d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80117d4:	e7f0      	b.n	80117b8 <_svfiprintf_r+0x194>
 80117d6:	ab03      	add	r3, sp, #12
 80117d8:	9300      	str	r3, [sp, #0]
 80117da:	462a      	mov	r2, r5
 80117dc:	4638      	mov	r0, r7
 80117de:	4b10      	ldr	r3, [pc, #64]	; (8011820 <_svfiprintf_r+0x1fc>)
 80117e0:	a904      	add	r1, sp, #16
 80117e2:	f7fc fc7f 	bl	800e0e4 <_printf_float>
 80117e6:	1c42      	adds	r2, r0, #1
 80117e8:	4606      	mov	r6, r0
 80117ea:	d1d6      	bne.n	801179a <_svfiprintf_r+0x176>
 80117ec:	89ab      	ldrh	r3, [r5, #12]
 80117ee:	065b      	lsls	r3, r3, #25
 80117f0:	f53f af2c 	bmi.w	801164c <_svfiprintf_r+0x28>
 80117f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117f6:	b01d      	add	sp, #116	; 0x74
 80117f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117fc:	ab03      	add	r3, sp, #12
 80117fe:	9300      	str	r3, [sp, #0]
 8011800:	462a      	mov	r2, r5
 8011802:	4638      	mov	r0, r7
 8011804:	4b06      	ldr	r3, [pc, #24]	; (8011820 <_svfiprintf_r+0x1fc>)
 8011806:	a904      	add	r1, sp, #16
 8011808:	f7fc ff08 	bl	800e61c <_printf_i>
 801180c:	e7eb      	b.n	80117e6 <_svfiprintf_r+0x1c2>
 801180e:	bf00      	nop
 8011810:	08012874 	.word	0x08012874
 8011814:	0801287a 	.word	0x0801287a
 8011818:	0801287e 	.word	0x0801287e
 801181c:	0800e0e5 	.word	0x0800e0e5
 8011820:	0801156d 	.word	0x0801156d

08011824 <__sfputc_r>:
 8011824:	6893      	ldr	r3, [r2, #8]
 8011826:	b410      	push	{r4}
 8011828:	3b01      	subs	r3, #1
 801182a:	2b00      	cmp	r3, #0
 801182c:	6093      	str	r3, [r2, #8]
 801182e:	da07      	bge.n	8011840 <__sfputc_r+0x1c>
 8011830:	6994      	ldr	r4, [r2, #24]
 8011832:	42a3      	cmp	r3, r4
 8011834:	db01      	blt.n	801183a <__sfputc_r+0x16>
 8011836:	290a      	cmp	r1, #10
 8011838:	d102      	bne.n	8011840 <__sfputc_r+0x1c>
 801183a:	bc10      	pop	{r4}
 801183c:	f000 b974 	b.w	8011b28 <__swbuf_r>
 8011840:	6813      	ldr	r3, [r2, #0]
 8011842:	1c58      	adds	r0, r3, #1
 8011844:	6010      	str	r0, [r2, #0]
 8011846:	7019      	strb	r1, [r3, #0]
 8011848:	4608      	mov	r0, r1
 801184a:	bc10      	pop	{r4}
 801184c:	4770      	bx	lr

0801184e <__sfputs_r>:
 801184e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011850:	4606      	mov	r6, r0
 8011852:	460f      	mov	r7, r1
 8011854:	4614      	mov	r4, r2
 8011856:	18d5      	adds	r5, r2, r3
 8011858:	42ac      	cmp	r4, r5
 801185a:	d101      	bne.n	8011860 <__sfputs_r+0x12>
 801185c:	2000      	movs	r0, #0
 801185e:	e007      	b.n	8011870 <__sfputs_r+0x22>
 8011860:	463a      	mov	r2, r7
 8011862:	4630      	mov	r0, r6
 8011864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011868:	f7ff ffdc 	bl	8011824 <__sfputc_r>
 801186c:	1c43      	adds	r3, r0, #1
 801186e:	d1f3      	bne.n	8011858 <__sfputs_r+0xa>
 8011870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011874 <_vfiprintf_r>:
 8011874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011878:	460d      	mov	r5, r1
 801187a:	4614      	mov	r4, r2
 801187c:	4698      	mov	r8, r3
 801187e:	4606      	mov	r6, r0
 8011880:	b09d      	sub	sp, #116	; 0x74
 8011882:	b118      	cbz	r0, 801188c <_vfiprintf_r+0x18>
 8011884:	6983      	ldr	r3, [r0, #24]
 8011886:	b90b      	cbnz	r3, 801188c <_vfiprintf_r+0x18>
 8011888:	f000 fb3a 	bl	8011f00 <__sinit>
 801188c:	4b89      	ldr	r3, [pc, #548]	; (8011ab4 <_vfiprintf_r+0x240>)
 801188e:	429d      	cmp	r5, r3
 8011890:	d11b      	bne.n	80118ca <_vfiprintf_r+0x56>
 8011892:	6875      	ldr	r5, [r6, #4]
 8011894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011896:	07d9      	lsls	r1, r3, #31
 8011898:	d405      	bmi.n	80118a6 <_vfiprintf_r+0x32>
 801189a:	89ab      	ldrh	r3, [r5, #12]
 801189c:	059a      	lsls	r2, r3, #22
 801189e:	d402      	bmi.n	80118a6 <_vfiprintf_r+0x32>
 80118a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118a2:	f000 fbcb 	bl	801203c <__retarget_lock_acquire_recursive>
 80118a6:	89ab      	ldrh	r3, [r5, #12]
 80118a8:	071b      	lsls	r3, r3, #28
 80118aa:	d501      	bpl.n	80118b0 <_vfiprintf_r+0x3c>
 80118ac:	692b      	ldr	r3, [r5, #16]
 80118ae:	b9eb      	cbnz	r3, 80118ec <_vfiprintf_r+0x78>
 80118b0:	4629      	mov	r1, r5
 80118b2:	4630      	mov	r0, r6
 80118b4:	f000 f998 	bl	8011be8 <__swsetup_r>
 80118b8:	b1c0      	cbz	r0, 80118ec <_vfiprintf_r+0x78>
 80118ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118bc:	07dc      	lsls	r4, r3, #31
 80118be:	d50e      	bpl.n	80118de <_vfiprintf_r+0x6a>
 80118c0:	f04f 30ff 	mov.w	r0, #4294967295
 80118c4:	b01d      	add	sp, #116	; 0x74
 80118c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ca:	4b7b      	ldr	r3, [pc, #492]	; (8011ab8 <_vfiprintf_r+0x244>)
 80118cc:	429d      	cmp	r5, r3
 80118ce:	d101      	bne.n	80118d4 <_vfiprintf_r+0x60>
 80118d0:	68b5      	ldr	r5, [r6, #8]
 80118d2:	e7df      	b.n	8011894 <_vfiprintf_r+0x20>
 80118d4:	4b79      	ldr	r3, [pc, #484]	; (8011abc <_vfiprintf_r+0x248>)
 80118d6:	429d      	cmp	r5, r3
 80118d8:	bf08      	it	eq
 80118da:	68f5      	ldreq	r5, [r6, #12]
 80118dc:	e7da      	b.n	8011894 <_vfiprintf_r+0x20>
 80118de:	89ab      	ldrh	r3, [r5, #12]
 80118e0:	0598      	lsls	r0, r3, #22
 80118e2:	d4ed      	bmi.n	80118c0 <_vfiprintf_r+0x4c>
 80118e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118e6:	f000 fbaa 	bl	801203e <__retarget_lock_release_recursive>
 80118ea:	e7e9      	b.n	80118c0 <_vfiprintf_r+0x4c>
 80118ec:	2300      	movs	r3, #0
 80118ee:	9309      	str	r3, [sp, #36]	; 0x24
 80118f0:	2320      	movs	r3, #32
 80118f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118f6:	2330      	movs	r3, #48	; 0x30
 80118f8:	f04f 0901 	mov.w	r9, #1
 80118fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011900:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011ac0 <_vfiprintf_r+0x24c>
 8011904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011908:	4623      	mov	r3, r4
 801190a:	469a      	mov	sl, r3
 801190c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011910:	b10a      	cbz	r2, 8011916 <_vfiprintf_r+0xa2>
 8011912:	2a25      	cmp	r2, #37	; 0x25
 8011914:	d1f9      	bne.n	801190a <_vfiprintf_r+0x96>
 8011916:	ebba 0b04 	subs.w	fp, sl, r4
 801191a:	d00b      	beq.n	8011934 <_vfiprintf_r+0xc0>
 801191c:	465b      	mov	r3, fp
 801191e:	4622      	mov	r2, r4
 8011920:	4629      	mov	r1, r5
 8011922:	4630      	mov	r0, r6
 8011924:	f7ff ff93 	bl	801184e <__sfputs_r>
 8011928:	3001      	adds	r0, #1
 801192a:	f000 80aa 	beq.w	8011a82 <_vfiprintf_r+0x20e>
 801192e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011930:	445a      	add	r2, fp
 8011932:	9209      	str	r2, [sp, #36]	; 0x24
 8011934:	f89a 3000 	ldrb.w	r3, [sl]
 8011938:	2b00      	cmp	r3, #0
 801193a:	f000 80a2 	beq.w	8011a82 <_vfiprintf_r+0x20e>
 801193e:	2300      	movs	r3, #0
 8011940:	f04f 32ff 	mov.w	r2, #4294967295
 8011944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011948:	f10a 0a01 	add.w	sl, sl, #1
 801194c:	9304      	str	r3, [sp, #16]
 801194e:	9307      	str	r3, [sp, #28]
 8011950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011954:	931a      	str	r3, [sp, #104]	; 0x68
 8011956:	4654      	mov	r4, sl
 8011958:	2205      	movs	r2, #5
 801195a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801195e:	4858      	ldr	r0, [pc, #352]	; (8011ac0 <_vfiprintf_r+0x24c>)
 8011960:	f7ff f84e 	bl	8010a00 <memchr>
 8011964:	9a04      	ldr	r2, [sp, #16]
 8011966:	b9d8      	cbnz	r0, 80119a0 <_vfiprintf_r+0x12c>
 8011968:	06d1      	lsls	r1, r2, #27
 801196a:	bf44      	itt	mi
 801196c:	2320      	movmi	r3, #32
 801196e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011972:	0713      	lsls	r3, r2, #28
 8011974:	bf44      	itt	mi
 8011976:	232b      	movmi	r3, #43	; 0x2b
 8011978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801197c:	f89a 3000 	ldrb.w	r3, [sl]
 8011980:	2b2a      	cmp	r3, #42	; 0x2a
 8011982:	d015      	beq.n	80119b0 <_vfiprintf_r+0x13c>
 8011984:	4654      	mov	r4, sl
 8011986:	2000      	movs	r0, #0
 8011988:	f04f 0c0a 	mov.w	ip, #10
 801198c:	9a07      	ldr	r2, [sp, #28]
 801198e:	4621      	mov	r1, r4
 8011990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011994:	3b30      	subs	r3, #48	; 0x30
 8011996:	2b09      	cmp	r3, #9
 8011998:	d94e      	bls.n	8011a38 <_vfiprintf_r+0x1c4>
 801199a:	b1b0      	cbz	r0, 80119ca <_vfiprintf_r+0x156>
 801199c:	9207      	str	r2, [sp, #28]
 801199e:	e014      	b.n	80119ca <_vfiprintf_r+0x156>
 80119a0:	eba0 0308 	sub.w	r3, r0, r8
 80119a4:	fa09 f303 	lsl.w	r3, r9, r3
 80119a8:	4313      	orrs	r3, r2
 80119aa:	46a2      	mov	sl, r4
 80119ac:	9304      	str	r3, [sp, #16]
 80119ae:	e7d2      	b.n	8011956 <_vfiprintf_r+0xe2>
 80119b0:	9b03      	ldr	r3, [sp, #12]
 80119b2:	1d19      	adds	r1, r3, #4
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	9103      	str	r1, [sp, #12]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	bfbb      	ittet	lt
 80119bc:	425b      	neglt	r3, r3
 80119be:	f042 0202 	orrlt.w	r2, r2, #2
 80119c2:	9307      	strge	r3, [sp, #28]
 80119c4:	9307      	strlt	r3, [sp, #28]
 80119c6:	bfb8      	it	lt
 80119c8:	9204      	strlt	r2, [sp, #16]
 80119ca:	7823      	ldrb	r3, [r4, #0]
 80119cc:	2b2e      	cmp	r3, #46	; 0x2e
 80119ce:	d10c      	bne.n	80119ea <_vfiprintf_r+0x176>
 80119d0:	7863      	ldrb	r3, [r4, #1]
 80119d2:	2b2a      	cmp	r3, #42	; 0x2a
 80119d4:	d135      	bne.n	8011a42 <_vfiprintf_r+0x1ce>
 80119d6:	9b03      	ldr	r3, [sp, #12]
 80119d8:	3402      	adds	r4, #2
 80119da:	1d1a      	adds	r2, r3, #4
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	9203      	str	r2, [sp, #12]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	bfb8      	it	lt
 80119e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80119e8:	9305      	str	r3, [sp, #20]
 80119ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8011ac4 <_vfiprintf_r+0x250>
 80119ee:	2203      	movs	r2, #3
 80119f0:	4650      	mov	r0, sl
 80119f2:	7821      	ldrb	r1, [r4, #0]
 80119f4:	f7ff f804 	bl	8010a00 <memchr>
 80119f8:	b140      	cbz	r0, 8011a0c <_vfiprintf_r+0x198>
 80119fa:	2340      	movs	r3, #64	; 0x40
 80119fc:	eba0 000a 	sub.w	r0, r0, sl
 8011a00:	fa03 f000 	lsl.w	r0, r3, r0
 8011a04:	9b04      	ldr	r3, [sp, #16]
 8011a06:	3401      	adds	r4, #1
 8011a08:	4303      	orrs	r3, r0
 8011a0a:	9304      	str	r3, [sp, #16]
 8011a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a10:	2206      	movs	r2, #6
 8011a12:	482d      	ldr	r0, [pc, #180]	; (8011ac8 <_vfiprintf_r+0x254>)
 8011a14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a18:	f7fe fff2 	bl	8010a00 <memchr>
 8011a1c:	2800      	cmp	r0, #0
 8011a1e:	d03f      	beq.n	8011aa0 <_vfiprintf_r+0x22c>
 8011a20:	4b2a      	ldr	r3, [pc, #168]	; (8011acc <_vfiprintf_r+0x258>)
 8011a22:	bb1b      	cbnz	r3, 8011a6c <_vfiprintf_r+0x1f8>
 8011a24:	9b03      	ldr	r3, [sp, #12]
 8011a26:	3307      	adds	r3, #7
 8011a28:	f023 0307 	bic.w	r3, r3, #7
 8011a2c:	3308      	adds	r3, #8
 8011a2e:	9303      	str	r3, [sp, #12]
 8011a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a32:	443b      	add	r3, r7
 8011a34:	9309      	str	r3, [sp, #36]	; 0x24
 8011a36:	e767      	b.n	8011908 <_vfiprintf_r+0x94>
 8011a38:	460c      	mov	r4, r1
 8011a3a:	2001      	movs	r0, #1
 8011a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a40:	e7a5      	b.n	801198e <_vfiprintf_r+0x11a>
 8011a42:	2300      	movs	r3, #0
 8011a44:	f04f 0c0a 	mov.w	ip, #10
 8011a48:	4619      	mov	r1, r3
 8011a4a:	3401      	adds	r4, #1
 8011a4c:	9305      	str	r3, [sp, #20]
 8011a4e:	4620      	mov	r0, r4
 8011a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a54:	3a30      	subs	r2, #48	; 0x30
 8011a56:	2a09      	cmp	r2, #9
 8011a58:	d903      	bls.n	8011a62 <_vfiprintf_r+0x1ee>
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d0c5      	beq.n	80119ea <_vfiprintf_r+0x176>
 8011a5e:	9105      	str	r1, [sp, #20]
 8011a60:	e7c3      	b.n	80119ea <_vfiprintf_r+0x176>
 8011a62:	4604      	mov	r4, r0
 8011a64:	2301      	movs	r3, #1
 8011a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a6a:	e7f0      	b.n	8011a4e <_vfiprintf_r+0x1da>
 8011a6c:	ab03      	add	r3, sp, #12
 8011a6e:	9300      	str	r3, [sp, #0]
 8011a70:	462a      	mov	r2, r5
 8011a72:	4630      	mov	r0, r6
 8011a74:	4b16      	ldr	r3, [pc, #88]	; (8011ad0 <_vfiprintf_r+0x25c>)
 8011a76:	a904      	add	r1, sp, #16
 8011a78:	f7fc fb34 	bl	800e0e4 <_printf_float>
 8011a7c:	4607      	mov	r7, r0
 8011a7e:	1c78      	adds	r0, r7, #1
 8011a80:	d1d6      	bne.n	8011a30 <_vfiprintf_r+0x1bc>
 8011a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a84:	07d9      	lsls	r1, r3, #31
 8011a86:	d405      	bmi.n	8011a94 <_vfiprintf_r+0x220>
 8011a88:	89ab      	ldrh	r3, [r5, #12]
 8011a8a:	059a      	lsls	r2, r3, #22
 8011a8c:	d402      	bmi.n	8011a94 <_vfiprintf_r+0x220>
 8011a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a90:	f000 fad5 	bl	801203e <__retarget_lock_release_recursive>
 8011a94:	89ab      	ldrh	r3, [r5, #12]
 8011a96:	065b      	lsls	r3, r3, #25
 8011a98:	f53f af12 	bmi.w	80118c0 <_vfiprintf_r+0x4c>
 8011a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a9e:	e711      	b.n	80118c4 <_vfiprintf_r+0x50>
 8011aa0:	ab03      	add	r3, sp, #12
 8011aa2:	9300      	str	r3, [sp, #0]
 8011aa4:	462a      	mov	r2, r5
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	4b09      	ldr	r3, [pc, #36]	; (8011ad0 <_vfiprintf_r+0x25c>)
 8011aaa:	a904      	add	r1, sp, #16
 8011aac:	f7fc fdb6 	bl	800e61c <_printf_i>
 8011ab0:	e7e4      	b.n	8011a7c <_vfiprintf_r+0x208>
 8011ab2:	bf00      	nop
 8011ab4:	080129a8 	.word	0x080129a8
 8011ab8:	080129c8 	.word	0x080129c8
 8011abc:	08012988 	.word	0x08012988
 8011ac0:	08012874 	.word	0x08012874
 8011ac4:	0801287a 	.word	0x0801287a
 8011ac8:	0801287e 	.word	0x0801287e
 8011acc:	0800e0e5 	.word	0x0800e0e5
 8011ad0:	0801184f 	.word	0x0801184f

08011ad4 <nan>:
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	4901      	ldr	r1, [pc, #4]	; (8011adc <nan+0x8>)
 8011ad8:	4770      	bx	lr
 8011ada:	bf00      	nop
 8011adc:	7ff80000 	.word	0x7ff80000

08011ae0 <_sbrk_r>:
 8011ae0:	b538      	push	{r3, r4, r5, lr}
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	4d05      	ldr	r5, [pc, #20]	; (8011afc <_sbrk_r+0x1c>)
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	4608      	mov	r0, r1
 8011aea:	602b      	str	r3, [r5, #0]
 8011aec:	f7f2 f906 	bl	8003cfc <_sbrk>
 8011af0:	1c43      	adds	r3, r0, #1
 8011af2:	d102      	bne.n	8011afa <_sbrk_r+0x1a>
 8011af4:	682b      	ldr	r3, [r5, #0]
 8011af6:	b103      	cbz	r3, 8011afa <_sbrk_r+0x1a>
 8011af8:	6023      	str	r3, [r4, #0]
 8011afa:	bd38      	pop	{r3, r4, r5, pc}
 8011afc:	200018ac 	.word	0x200018ac

08011b00 <strncmp>:
 8011b00:	4603      	mov	r3, r0
 8011b02:	b510      	push	{r4, lr}
 8011b04:	b172      	cbz	r2, 8011b24 <strncmp+0x24>
 8011b06:	3901      	subs	r1, #1
 8011b08:	1884      	adds	r4, r0, r2
 8011b0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011b0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011b12:	4290      	cmp	r0, r2
 8011b14:	d101      	bne.n	8011b1a <strncmp+0x1a>
 8011b16:	42a3      	cmp	r3, r4
 8011b18:	d101      	bne.n	8011b1e <strncmp+0x1e>
 8011b1a:	1a80      	subs	r0, r0, r2
 8011b1c:	bd10      	pop	{r4, pc}
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	d1f3      	bne.n	8011b0a <strncmp+0xa>
 8011b22:	e7fa      	b.n	8011b1a <strncmp+0x1a>
 8011b24:	4610      	mov	r0, r2
 8011b26:	e7f9      	b.n	8011b1c <strncmp+0x1c>

08011b28 <__swbuf_r>:
 8011b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b2a:	460e      	mov	r6, r1
 8011b2c:	4614      	mov	r4, r2
 8011b2e:	4605      	mov	r5, r0
 8011b30:	b118      	cbz	r0, 8011b3a <__swbuf_r+0x12>
 8011b32:	6983      	ldr	r3, [r0, #24]
 8011b34:	b90b      	cbnz	r3, 8011b3a <__swbuf_r+0x12>
 8011b36:	f000 f9e3 	bl	8011f00 <__sinit>
 8011b3a:	4b21      	ldr	r3, [pc, #132]	; (8011bc0 <__swbuf_r+0x98>)
 8011b3c:	429c      	cmp	r4, r3
 8011b3e:	d12b      	bne.n	8011b98 <__swbuf_r+0x70>
 8011b40:	686c      	ldr	r4, [r5, #4]
 8011b42:	69a3      	ldr	r3, [r4, #24]
 8011b44:	60a3      	str	r3, [r4, #8]
 8011b46:	89a3      	ldrh	r3, [r4, #12]
 8011b48:	071a      	lsls	r2, r3, #28
 8011b4a:	d52f      	bpl.n	8011bac <__swbuf_r+0x84>
 8011b4c:	6923      	ldr	r3, [r4, #16]
 8011b4e:	b36b      	cbz	r3, 8011bac <__swbuf_r+0x84>
 8011b50:	6923      	ldr	r3, [r4, #16]
 8011b52:	6820      	ldr	r0, [r4, #0]
 8011b54:	b2f6      	uxtb	r6, r6
 8011b56:	1ac0      	subs	r0, r0, r3
 8011b58:	6963      	ldr	r3, [r4, #20]
 8011b5a:	4637      	mov	r7, r6
 8011b5c:	4283      	cmp	r3, r0
 8011b5e:	dc04      	bgt.n	8011b6a <__swbuf_r+0x42>
 8011b60:	4621      	mov	r1, r4
 8011b62:	4628      	mov	r0, r5
 8011b64:	f000 f938 	bl	8011dd8 <_fflush_r>
 8011b68:	bb30      	cbnz	r0, 8011bb8 <__swbuf_r+0x90>
 8011b6a:	68a3      	ldr	r3, [r4, #8]
 8011b6c:	3001      	adds	r0, #1
 8011b6e:	3b01      	subs	r3, #1
 8011b70:	60a3      	str	r3, [r4, #8]
 8011b72:	6823      	ldr	r3, [r4, #0]
 8011b74:	1c5a      	adds	r2, r3, #1
 8011b76:	6022      	str	r2, [r4, #0]
 8011b78:	701e      	strb	r6, [r3, #0]
 8011b7a:	6963      	ldr	r3, [r4, #20]
 8011b7c:	4283      	cmp	r3, r0
 8011b7e:	d004      	beq.n	8011b8a <__swbuf_r+0x62>
 8011b80:	89a3      	ldrh	r3, [r4, #12]
 8011b82:	07db      	lsls	r3, r3, #31
 8011b84:	d506      	bpl.n	8011b94 <__swbuf_r+0x6c>
 8011b86:	2e0a      	cmp	r6, #10
 8011b88:	d104      	bne.n	8011b94 <__swbuf_r+0x6c>
 8011b8a:	4621      	mov	r1, r4
 8011b8c:	4628      	mov	r0, r5
 8011b8e:	f000 f923 	bl	8011dd8 <_fflush_r>
 8011b92:	b988      	cbnz	r0, 8011bb8 <__swbuf_r+0x90>
 8011b94:	4638      	mov	r0, r7
 8011b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b98:	4b0a      	ldr	r3, [pc, #40]	; (8011bc4 <__swbuf_r+0x9c>)
 8011b9a:	429c      	cmp	r4, r3
 8011b9c:	d101      	bne.n	8011ba2 <__swbuf_r+0x7a>
 8011b9e:	68ac      	ldr	r4, [r5, #8]
 8011ba0:	e7cf      	b.n	8011b42 <__swbuf_r+0x1a>
 8011ba2:	4b09      	ldr	r3, [pc, #36]	; (8011bc8 <__swbuf_r+0xa0>)
 8011ba4:	429c      	cmp	r4, r3
 8011ba6:	bf08      	it	eq
 8011ba8:	68ec      	ldreq	r4, [r5, #12]
 8011baa:	e7ca      	b.n	8011b42 <__swbuf_r+0x1a>
 8011bac:	4621      	mov	r1, r4
 8011bae:	4628      	mov	r0, r5
 8011bb0:	f000 f81a 	bl	8011be8 <__swsetup_r>
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	d0cb      	beq.n	8011b50 <__swbuf_r+0x28>
 8011bb8:	f04f 37ff 	mov.w	r7, #4294967295
 8011bbc:	e7ea      	b.n	8011b94 <__swbuf_r+0x6c>
 8011bbe:	bf00      	nop
 8011bc0:	080129a8 	.word	0x080129a8
 8011bc4:	080129c8 	.word	0x080129c8
 8011bc8:	08012988 	.word	0x08012988

08011bcc <__ascii_wctomb>:
 8011bcc:	4603      	mov	r3, r0
 8011bce:	4608      	mov	r0, r1
 8011bd0:	b141      	cbz	r1, 8011be4 <__ascii_wctomb+0x18>
 8011bd2:	2aff      	cmp	r2, #255	; 0xff
 8011bd4:	d904      	bls.n	8011be0 <__ascii_wctomb+0x14>
 8011bd6:	228a      	movs	r2, #138	; 0x8a
 8011bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011bdc:	601a      	str	r2, [r3, #0]
 8011bde:	4770      	bx	lr
 8011be0:	2001      	movs	r0, #1
 8011be2:	700a      	strb	r2, [r1, #0]
 8011be4:	4770      	bx	lr
	...

08011be8 <__swsetup_r>:
 8011be8:	4b32      	ldr	r3, [pc, #200]	; (8011cb4 <__swsetup_r+0xcc>)
 8011bea:	b570      	push	{r4, r5, r6, lr}
 8011bec:	681d      	ldr	r5, [r3, #0]
 8011bee:	4606      	mov	r6, r0
 8011bf0:	460c      	mov	r4, r1
 8011bf2:	b125      	cbz	r5, 8011bfe <__swsetup_r+0x16>
 8011bf4:	69ab      	ldr	r3, [r5, #24]
 8011bf6:	b913      	cbnz	r3, 8011bfe <__swsetup_r+0x16>
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	f000 f981 	bl	8011f00 <__sinit>
 8011bfe:	4b2e      	ldr	r3, [pc, #184]	; (8011cb8 <__swsetup_r+0xd0>)
 8011c00:	429c      	cmp	r4, r3
 8011c02:	d10f      	bne.n	8011c24 <__swsetup_r+0x3c>
 8011c04:	686c      	ldr	r4, [r5, #4]
 8011c06:	89a3      	ldrh	r3, [r4, #12]
 8011c08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c0c:	0719      	lsls	r1, r3, #28
 8011c0e:	d42c      	bmi.n	8011c6a <__swsetup_r+0x82>
 8011c10:	06dd      	lsls	r5, r3, #27
 8011c12:	d411      	bmi.n	8011c38 <__swsetup_r+0x50>
 8011c14:	2309      	movs	r3, #9
 8011c16:	6033      	str	r3, [r6, #0]
 8011c18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c20:	81a3      	strh	r3, [r4, #12]
 8011c22:	e03e      	b.n	8011ca2 <__swsetup_r+0xba>
 8011c24:	4b25      	ldr	r3, [pc, #148]	; (8011cbc <__swsetup_r+0xd4>)
 8011c26:	429c      	cmp	r4, r3
 8011c28:	d101      	bne.n	8011c2e <__swsetup_r+0x46>
 8011c2a:	68ac      	ldr	r4, [r5, #8]
 8011c2c:	e7eb      	b.n	8011c06 <__swsetup_r+0x1e>
 8011c2e:	4b24      	ldr	r3, [pc, #144]	; (8011cc0 <__swsetup_r+0xd8>)
 8011c30:	429c      	cmp	r4, r3
 8011c32:	bf08      	it	eq
 8011c34:	68ec      	ldreq	r4, [r5, #12]
 8011c36:	e7e6      	b.n	8011c06 <__swsetup_r+0x1e>
 8011c38:	0758      	lsls	r0, r3, #29
 8011c3a:	d512      	bpl.n	8011c62 <__swsetup_r+0x7a>
 8011c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c3e:	b141      	cbz	r1, 8011c52 <__swsetup_r+0x6a>
 8011c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c44:	4299      	cmp	r1, r3
 8011c46:	d002      	beq.n	8011c4e <__swsetup_r+0x66>
 8011c48:	4630      	mov	r0, r6
 8011c4a:	f7ff fbb3 	bl	80113b4 <_free_r>
 8011c4e:	2300      	movs	r3, #0
 8011c50:	6363      	str	r3, [r4, #52]	; 0x34
 8011c52:	89a3      	ldrh	r3, [r4, #12]
 8011c54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011c58:	81a3      	strh	r3, [r4, #12]
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	6063      	str	r3, [r4, #4]
 8011c5e:	6923      	ldr	r3, [r4, #16]
 8011c60:	6023      	str	r3, [r4, #0]
 8011c62:	89a3      	ldrh	r3, [r4, #12]
 8011c64:	f043 0308 	orr.w	r3, r3, #8
 8011c68:	81a3      	strh	r3, [r4, #12]
 8011c6a:	6923      	ldr	r3, [r4, #16]
 8011c6c:	b94b      	cbnz	r3, 8011c82 <__swsetup_r+0x9a>
 8011c6e:	89a3      	ldrh	r3, [r4, #12]
 8011c70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c78:	d003      	beq.n	8011c82 <__swsetup_r+0x9a>
 8011c7a:	4621      	mov	r1, r4
 8011c7c:	4630      	mov	r0, r6
 8011c7e:	f000 fa05 	bl	801208c <__smakebuf_r>
 8011c82:	89a0      	ldrh	r0, [r4, #12]
 8011c84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c88:	f010 0301 	ands.w	r3, r0, #1
 8011c8c:	d00a      	beq.n	8011ca4 <__swsetup_r+0xbc>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	60a3      	str	r3, [r4, #8]
 8011c92:	6963      	ldr	r3, [r4, #20]
 8011c94:	425b      	negs	r3, r3
 8011c96:	61a3      	str	r3, [r4, #24]
 8011c98:	6923      	ldr	r3, [r4, #16]
 8011c9a:	b943      	cbnz	r3, 8011cae <__swsetup_r+0xc6>
 8011c9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011ca0:	d1ba      	bne.n	8011c18 <__swsetup_r+0x30>
 8011ca2:	bd70      	pop	{r4, r5, r6, pc}
 8011ca4:	0781      	lsls	r1, r0, #30
 8011ca6:	bf58      	it	pl
 8011ca8:	6963      	ldrpl	r3, [r4, #20]
 8011caa:	60a3      	str	r3, [r4, #8]
 8011cac:	e7f4      	b.n	8011c98 <__swsetup_r+0xb0>
 8011cae:	2000      	movs	r0, #0
 8011cb0:	e7f7      	b.n	8011ca2 <__swsetup_r+0xba>
 8011cb2:	bf00      	nop
 8011cb4:	20000834 	.word	0x20000834
 8011cb8:	080129a8 	.word	0x080129a8
 8011cbc:	080129c8 	.word	0x080129c8
 8011cc0:	08012988 	.word	0x08012988

08011cc4 <abort>:
 8011cc4:	2006      	movs	r0, #6
 8011cc6:	b508      	push	{r3, lr}
 8011cc8:	f000 fa9e 	bl	8012208 <raise>
 8011ccc:	2001      	movs	r0, #1
 8011cce:	f7f1 ffa2 	bl	8003c16 <_exit>
	...

08011cd4 <__sflush_r>:
 8011cd4:	898a      	ldrh	r2, [r1, #12]
 8011cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd8:	4605      	mov	r5, r0
 8011cda:	0710      	lsls	r0, r2, #28
 8011cdc:	460c      	mov	r4, r1
 8011cde:	d457      	bmi.n	8011d90 <__sflush_r+0xbc>
 8011ce0:	684b      	ldr	r3, [r1, #4]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	dc04      	bgt.n	8011cf0 <__sflush_r+0x1c>
 8011ce6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	dc01      	bgt.n	8011cf0 <__sflush_r+0x1c>
 8011cec:	2000      	movs	r0, #0
 8011cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011cf2:	2e00      	cmp	r6, #0
 8011cf4:	d0fa      	beq.n	8011cec <__sflush_r+0x18>
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011cfc:	682f      	ldr	r7, [r5, #0]
 8011cfe:	602b      	str	r3, [r5, #0]
 8011d00:	d032      	beq.n	8011d68 <__sflush_r+0x94>
 8011d02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011d04:	89a3      	ldrh	r3, [r4, #12]
 8011d06:	075a      	lsls	r2, r3, #29
 8011d08:	d505      	bpl.n	8011d16 <__sflush_r+0x42>
 8011d0a:	6863      	ldr	r3, [r4, #4]
 8011d0c:	1ac0      	subs	r0, r0, r3
 8011d0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d10:	b10b      	cbz	r3, 8011d16 <__sflush_r+0x42>
 8011d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d14:	1ac0      	subs	r0, r0, r3
 8011d16:	2300      	movs	r3, #0
 8011d18:	4602      	mov	r2, r0
 8011d1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	6a21      	ldr	r1, [r4, #32]
 8011d20:	47b0      	blx	r6
 8011d22:	1c43      	adds	r3, r0, #1
 8011d24:	89a3      	ldrh	r3, [r4, #12]
 8011d26:	d106      	bne.n	8011d36 <__sflush_r+0x62>
 8011d28:	6829      	ldr	r1, [r5, #0]
 8011d2a:	291d      	cmp	r1, #29
 8011d2c:	d82c      	bhi.n	8011d88 <__sflush_r+0xb4>
 8011d2e:	4a29      	ldr	r2, [pc, #164]	; (8011dd4 <__sflush_r+0x100>)
 8011d30:	40ca      	lsrs	r2, r1
 8011d32:	07d6      	lsls	r6, r2, #31
 8011d34:	d528      	bpl.n	8011d88 <__sflush_r+0xb4>
 8011d36:	2200      	movs	r2, #0
 8011d38:	6062      	str	r2, [r4, #4]
 8011d3a:	6922      	ldr	r2, [r4, #16]
 8011d3c:	04d9      	lsls	r1, r3, #19
 8011d3e:	6022      	str	r2, [r4, #0]
 8011d40:	d504      	bpl.n	8011d4c <__sflush_r+0x78>
 8011d42:	1c42      	adds	r2, r0, #1
 8011d44:	d101      	bne.n	8011d4a <__sflush_r+0x76>
 8011d46:	682b      	ldr	r3, [r5, #0]
 8011d48:	b903      	cbnz	r3, 8011d4c <__sflush_r+0x78>
 8011d4a:	6560      	str	r0, [r4, #84]	; 0x54
 8011d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d4e:	602f      	str	r7, [r5, #0]
 8011d50:	2900      	cmp	r1, #0
 8011d52:	d0cb      	beq.n	8011cec <__sflush_r+0x18>
 8011d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d58:	4299      	cmp	r1, r3
 8011d5a:	d002      	beq.n	8011d62 <__sflush_r+0x8e>
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	f7ff fb29 	bl	80113b4 <_free_r>
 8011d62:	2000      	movs	r0, #0
 8011d64:	6360      	str	r0, [r4, #52]	; 0x34
 8011d66:	e7c2      	b.n	8011cee <__sflush_r+0x1a>
 8011d68:	6a21      	ldr	r1, [r4, #32]
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	47b0      	blx	r6
 8011d70:	1c41      	adds	r1, r0, #1
 8011d72:	d1c7      	bne.n	8011d04 <__sflush_r+0x30>
 8011d74:	682b      	ldr	r3, [r5, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d0c4      	beq.n	8011d04 <__sflush_r+0x30>
 8011d7a:	2b1d      	cmp	r3, #29
 8011d7c:	d001      	beq.n	8011d82 <__sflush_r+0xae>
 8011d7e:	2b16      	cmp	r3, #22
 8011d80:	d101      	bne.n	8011d86 <__sflush_r+0xb2>
 8011d82:	602f      	str	r7, [r5, #0]
 8011d84:	e7b2      	b.n	8011cec <__sflush_r+0x18>
 8011d86:	89a3      	ldrh	r3, [r4, #12]
 8011d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d8c:	81a3      	strh	r3, [r4, #12]
 8011d8e:	e7ae      	b.n	8011cee <__sflush_r+0x1a>
 8011d90:	690f      	ldr	r7, [r1, #16]
 8011d92:	2f00      	cmp	r7, #0
 8011d94:	d0aa      	beq.n	8011cec <__sflush_r+0x18>
 8011d96:	0793      	lsls	r3, r2, #30
 8011d98:	bf18      	it	ne
 8011d9a:	2300      	movne	r3, #0
 8011d9c:	680e      	ldr	r6, [r1, #0]
 8011d9e:	bf08      	it	eq
 8011da0:	694b      	ldreq	r3, [r1, #20]
 8011da2:	1bf6      	subs	r6, r6, r7
 8011da4:	600f      	str	r7, [r1, #0]
 8011da6:	608b      	str	r3, [r1, #8]
 8011da8:	2e00      	cmp	r6, #0
 8011daa:	dd9f      	ble.n	8011cec <__sflush_r+0x18>
 8011dac:	4633      	mov	r3, r6
 8011dae:	463a      	mov	r2, r7
 8011db0:	4628      	mov	r0, r5
 8011db2:	6a21      	ldr	r1, [r4, #32]
 8011db4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8011db8:	47e0      	blx	ip
 8011dba:	2800      	cmp	r0, #0
 8011dbc:	dc06      	bgt.n	8011dcc <__sflush_r+0xf8>
 8011dbe:	89a3      	ldrh	r3, [r4, #12]
 8011dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8011dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dc8:	81a3      	strh	r3, [r4, #12]
 8011dca:	e790      	b.n	8011cee <__sflush_r+0x1a>
 8011dcc:	4407      	add	r7, r0
 8011dce:	1a36      	subs	r6, r6, r0
 8011dd0:	e7ea      	b.n	8011da8 <__sflush_r+0xd4>
 8011dd2:	bf00      	nop
 8011dd4:	20400001 	.word	0x20400001

08011dd8 <_fflush_r>:
 8011dd8:	b538      	push	{r3, r4, r5, lr}
 8011dda:	690b      	ldr	r3, [r1, #16]
 8011ddc:	4605      	mov	r5, r0
 8011dde:	460c      	mov	r4, r1
 8011de0:	b913      	cbnz	r3, 8011de8 <_fflush_r+0x10>
 8011de2:	2500      	movs	r5, #0
 8011de4:	4628      	mov	r0, r5
 8011de6:	bd38      	pop	{r3, r4, r5, pc}
 8011de8:	b118      	cbz	r0, 8011df2 <_fflush_r+0x1a>
 8011dea:	6983      	ldr	r3, [r0, #24]
 8011dec:	b90b      	cbnz	r3, 8011df2 <_fflush_r+0x1a>
 8011dee:	f000 f887 	bl	8011f00 <__sinit>
 8011df2:	4b14      	ldr	r3, [pc, #80]	; (8011e44 <_fflush_r+0x6c>)
 8011df4:	429c      	cmp	r4, r3
 8011df6:	d11b      	bne.n	8011e30 <_fflush_r+0x58>
 8011df8:	686c      	ldr	r4, [r5, #4]
 8011dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d0ef      	beq.n	8011de2 <_fflush_r+0xa>
 8011e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011e04:	07d0      	lsls	r0, r2, #31
 8011e06:	d404      	bmi.n	8011e12 <_fflush_r+0x3a>
 8011e08:	0599      	lsls	r1, r3, #22
 8011e0a:	d402      	bmi.n	8011e12 <_fflush_r+0x3a>
 8011e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e0e:	f000 f915 	bl	801203c <__retarget_lock_acquire_recursive>
 8011e12:	4628      	mov	r0, r5
 8011e14:	4621      	mov	r1, r4
 8011e16:	f7ff ff5d 	bl	8011cd4 <__sflush_r>
 8011e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e1c:	4605      	mov	r5, r0
 8011e1e:	07da      	lsls	r2, r3, #31
 8011e20:	d4e0      	bmi.n	8011de4 <_fflush_r+0xc>
 8011e22:	89a3      	ldrh	r3, [r4, #12]
 8011e24:	059b      	lsls	r3, r3, #22
 8011e26:	d4dd      	bmi.n	8011de4 <_fflush_r+0xc>
 8011e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e2a:	f000 f908 	bl	801203e <__retarget_lock_release_recursive>
 8011e2e:	e7d9      	b.n	8011de4 <_fflush_r+0xc>
 8011e30:	4b05      	ldr	r3, [pc, #20]	; (8011e48 <_fflush_r+0x70>)
 8011e32:	429c      	cmp	r4, r3
 8011e34:	d101      	bne.n	8011e3a <_fflush_r+0x62>
 8011e36:	68ac      	ldr	r4, [r5, #8]
 8011e38:	e7df      	b.n	8011dfa <_fflush_r+0x22>
 8011e3a:	4b04      	ldr	r3, [pc, #16]	; (8011e4c <_fflush_r+0x74>)
 8011e3c:	429c      	cmp	r4, r3
 8011e3e:	bf08      	it	eq
 8011e40:	68ec      	ldreq	r4, [r5, #12]
 8011e42:	e7da      	b.n	8011dfa <_fflush_r+0x22>
 8011e44:	080129a8 	.word	0x080129a8
 8011e48:	080129c8 	.word	0x080129c8
 8011e4c:	08012988 	.word	0x08012988

08011e50 <std>:
 8011e50:	2300      	movs	r3, #0
 8011e52:	b510      	push	{r4, lr}
 8011e54:	4604      	mov	r4, r0
 8011e56:	e9c0 3300 	strd	r3, r3, [r0]
 8011e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e5e:	6083      	str	r3, [r0, #8]
 8011e60:	8181      	strh	r1, [r0, #12]
 8011e62:	6643      	str	r3, [r0, #100]	; 0x64
 8011e64:	81c2      	strh	r2, [r0, #14]
 8011e66:	6183      	str	r3, [r0, #24]
 8011e68:	4619      	mov	r1, r3
 8011e6a:	2208      	movs	r2, #8
 8011e6c:	305c      	adds	r0, #92	; 0x5c
 8011e6e:	f7fc f893 	bl	800df98 <memset>
 8011e72:	4b05      	ldr	r3, [pc, #20]	; (8011e88 <std+0x38>)
 8011e74:	6224      	str	r4, [r4, #32]
 8011e76:	6263      	str	r3, [r4, #36]	; 0x24
 8011e78:	4b04      	ldr	r3, [pc, #16]	; (8011e8c <std+0x3c>)
 8011e7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8011e7c:	4b04      	ldr	r3, [pc, #16]	; (8011e90 <std+0x40>)
 8011e7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011e80:	4b04      	ldr	r3, [pc, #16]	; (8011e94 <std+0x44>)
 8011e82:	6323      	str	r3, [r4, #48]	; 0x30
 8011e84:	bd10      	pop	{r4, pc}
 8011e86:	bf00      	nop
 8011e88:	08012241 	.word	0x08012241
 8011e8c:	08012263 	.word	0x08012263
 8011e90:	0801229b 	.word	0x0801229b
 8011e94:	080122bf 	.word	0x080122bf

08011e98 <_cleanup_r>:
 8011e98:	4901      	ldr	r1, [pc, #4]	; (8011ea0 <_cleanup_r+0x8>)
 8011e9a:	f000 b8af 	b.w	8011ffc <_fwalk_reent>
 8011e9e:	bf00      	nop
 8011ea0:	08011dd9 	.word	0x08011dd9

08011ea4 <__sfmoreglue>:
 8011ea4:	2268      	movs	r2, #104	; 0x68
 8011ea6:	b570      	push	{r4, r5, r6, lr}
 8011ea8:	1e4d      	subs	r5, r1, #1
 8011eaa:	4355      	muls	r5, r2
 8011eac:	460e      	mov	r6, r1
 8011eae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011eb2:	f7ff fae7 	bl	8011484 <_malloc_r>
 8011eb6:	4604      	mov	r4, r0
 8011eb8:	b140      	cbz	r0, 8011ecc <__sfmoreglue+0x28>
 8011eba:	2100      	movs	r1, #0
 8011ebc:	e9c0 1600 	strd	r1, r6, [r0]
 8011ec0:	300c      	adds	r0, #12
 8011ec2:	60a0      	str	r0, [r4, #8]
 8011ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ec8:	f7fc f866 	bl	800df98 <memset>
 8011ecc:	4620      	mov	r0, r4
 8011ece:	bd70      	pop	{r4, r5, r6, pc}

08011ed0 <__sfp_lock_acquire>:
 8011ed0:	4801      	ldr	r0, [pc, #4]	; (8011ed8 <__sfp_lock_acquire+0x8>)
 8011ed2:	f000 b8b3 	b.w	801203c <__retarget_lock_acquire_recursive>
 8011ed6:	bf00      	nop
 8011ed8:	200018a9 	.word	0x200018a9

08011edc <__sfp_lock_release>:
 8011edc:	4801      	ldr	r0, [pc, #4]	; (8011ee4 <__sfp_lock_release+0x8>)
 8011ede:	f000 b8ae 	b.w	801203e <__retarget_lock_release_recursive>
 8011ee2:	bf00      	nop
 8011ee4:	200018a9 	.word	0x200018a9

08011ee8 <__sinit_lock_acquire>:
 8011ee8:	4801      	ldr	r0, [pc, #4]	; (8011ef0 <__sinit_lock_acquire+0x8>)
 8011eea:	f000 b8a7 	b.w	801203c <__retarget_lock_acquire_recursive>
 8011eee:	bf00      	nop
 8011ef0:	200018aa 	.word	0x200018aa

08011ef4 <__sinit_lock_release>:
 8011ef4:	4801      	ldr	r0, [pc, #4]	; (8011efc <__sinit_lock_release+0x8>)
 8011ef6:	f000 b8a2 	b.w	801203e <__retarget_lock_release_recursive>
 8011efa:	bf00      	nop
 8011efc:	200018aa 	.word	0x200018aa

08011f00 <__sinit>:
 8011f00:	b510      	push	{r4, lr}
 8011f02:	4604      	mov	r4, r0
 8011f04:	f7ff fff0 	bl	8011ee8 <__sinit_lock_acquire>
 8011f08:	69a3      	ldr	r3, [r4, #24]
 8011f0a:	b11b      	cbz	r3, 8011f14 <__sinit+0x14>
 8011f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f10:	f7ff bff0 	b.w	8011ef4 <__sinit_lock_release>
 8011f14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011f18:	6523      	str	r3, [r4, #80]	; 0x50
 8011f1a:	4b13      	ldr	r3, [pc, #76]	; (8011f68 <__sinit+0x68>)
 8011f1c:	4a13      	ldr	r2, [pc, #76]	; (8011f6c <__sinit+0x6c>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	62a2      	str	r2, [r4, #40]	; 0x28
 8011f22:	42a3      	cmp	r3, r4
 8011f24:	bf08      	it	eq
 8011f26:	2301      	moveq	r3, #1
 8011f28:	4620      	mov	r0, r4
 8011f2a:	bf08      	it	eq
 8011f2c:	61a3      	streq	r3, [r4, #24]
 8011f2e:	f000 f81f 	bl	8011f70 <__sfp>
 8011f32:	6060      	str	r0, [r4, #4]
 8011f34:	4620      	mov	r0, r4
 8011f36:	f000 f81b 	bl	8011f70 <__sfp>
 8011f3a:	60a0      	str	r0, [r4, #8]
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	f000 f817 	bl	8011f70 <__sfp>
 8011f42:	2200      	movs	r2, #0
 8011f44:	2104      	movs	r1, #4
 8011f46:	60e0      	str	r0, [r4, #12]
 8011f48:	6860      	ldr	r0, [r4, #4]
 8011f4a:	f7ff ff81 	bl	8011e50 <std>
 8011f4e:	2201      	movs	r2, #1
 8011f50:	2109      	movs	r1, #9
 8011f52:	68a0      	ldr	r0, [r4, #8]
 8011f54:	f7ff ff7c 	bl	8011e50 <std>
 8011f58:	2202      	movs	r2, #2
 8011f5a:	2112      	movs	r1, #18
 8011f5c:	68e0      	ldr	r0, [r4, #12]
 8011f5e:	f7ff ff77 	bl	8011e50 <std>
 8011f62:	2301      	movs	r3, #1
 8011f64:	61a3      	str	r3, [r4, #24]
 8011f66:	e7d1      	b.n	8011f0c <__sinit+0xc>
 8011f68:	080124ec 	.word	0x080124ec
 8011f6c:	08011e99 	.word	0x08011e99

08011f70 <__sfp>:
 8011f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f72:	4607      	mov	r7, r0
 8011f74:	f7ff ffac 	bl	8011ed0 <__sfp_lock_acquire>
 8011f78:	4b1e      	ldr	r3, [pc, #120]	; (8011ff4 <__sfp+0x84>)
 8011f7a:	681e      	ldr	r6, [r3, #0]
 8011f7c:	69b3      	ldr	r3, [r6, #24]
 8011f7e:	b913      	cbnz	r3, 8011f86 <__sfp+0x16>
 8011f80:	4630      	mov	r0, r6
 8011f82:	f7ff ffbd 	bl	8011f00 <__sinit>
 8011f86:	3648      	adds	r6, #72	; 0x48
 8011f88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011f8c:	3b01      	subs	r3, #1
 8011f8e:	d503      	bpl.n	8011f98 <__sfp+0x28>
 8011f90:	6833      	ldr	r3, [r6, #0]
 8011f92:	b30b      	cbz	r3, 8011fd8 <__sfp+0x68>
 8011f94:	6836      	ldr	r6, [r6, #0]
 8011f96:	e7f7      	b.n	8011f88 <__sfp+0x18>
 8011f98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011f9c:	b9d5      	cbnz	r5, 8011fd4 <__sfp+0x64>
 8011f9e:	4b16      	ldr	r3, [pc, #88]	; (8011ff8 <__sfp+0x88>)
 8011fa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011fa4:	60e3      	str	r3, [r4, #12]
 8011fa6:	6665      	str	r5, [r4, #100]	; 0x64
 8011fa8:	f000 f847 	bl	801203a <__retarget_lock_init_recursive>
 8011fac:	f7ff ff96 	bl	8011edc <__sfp_lock_release>
 8011fb0:	2208      	movs	r2, #8
 8011fb2:	4629      	mov	r1, r5
 8011fb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011fb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011fbc:	6025      	str	r5, [r4, #0]
 8011fbe:	61a5      	str	r5, [r4, #24]
 8011fc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011fc4:	f7fb ffe8 	bl	800df98 <memset>
 8011fc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011fcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fd4:	3468      	adds	r4, #104	; 0x68
 8011fd6:	e7d9      	b.n	8011f8c <__sfp+0x1c>
 8011fd8:	2104      	movs	r1, #4
 8011fda:	4638      	mov	r0, r7
 8011fdc:	f7ff ff62 	bl	8011ea4 <__sfmoreglue>
 8011fe0:	4604      	mov	r4, r0
 8011fe2:	6030      	str	r0, [r6, #0]
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	d1d5      	bne.n	8011f94 <__sfp+0x24>
 8011fe8:	f7ff ff78 	bl	8011edc <__sfp_lock_release>
 8011fec:	230c      	movs	r3, #12
 8011fee:	603b      	str	r3, [r7, #0]
 8011ff0:	e7ee      	b.n	8011fd0 <__sfp+0x60>
 8011ff2:	bf00      	nop
 8011ff4:	080124ec 	.word	0x080124ec
 8011ff8:	ffff0001 	.word	0xffff0001

08011ffc <_fwalk_reent>:
 8011ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012000:	4606      	mov	r6, r0
 8012002:	4688      	mov	r8, r1
 8012004:	2700      	movs	r7, #0
 8012006:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801200a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801200e:	f1b9 0901 	subs.w	r9, r9, #1
 8012012:	d505      	bpl.n	8012020 <_fwalk_reent+0x24>
 8012014:	6824      	ldr	r4, [r4, #0]
 8012016:	2c00      	cmp	r4, #0
 8012018:	d1f7      	bne.n	801200a <_fwalk_reent+0xe>
 801201a:	4638      	mov	r0, r7
 801201c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012020:	89ab      	ldrh	r3, [r5, #12]
 8012022:	2b01      	cmp	r3, #1
 8012024:	d907      	bls.n	8012036 <_fwalk_reent+0x3a>
 8012026:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801202a:	3301      	adds	r3, #1
 801202c:	d003      	beq.n	8012036 <_fwalk_reent+0x3a>
 801202e:	4629      	mov	r1, r5
 8012030:	4630      	mov	r0, r6
 8012032:	47c0      	blx	r8
 8012034:	4307      	orrs	r7, r0
 8012036:	3568      	adds	r5, #104	; 0x68
 8012038:	e7e9      	b.n	801200e <_fwalk_reent+0x12>

0801203a <__retarget_lock_init_recursive>:
 801203a:	4770      	bx	lr

0801203c <__retarget_lock_acquire_recursive>:
 801203c:	4770      	bx	lr

0801203e <__retarget_lock_release_recursive>:
 801203e:	4770      	bx	lr

08012040 <__swhatbuf_r>:
 8012040:	b570      	push	{r4, r5, r6, lr}
 8012042:	460e      	mov	r6, r1
 8012044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012048:	4614      	mov	r4, r2
 801204a:	2900      	cmp	r1, #0
 801204c:	461d      	mov	r5, r3
 801204e:	b096      	sub	sp, #88	; 0x58
 8012050:	da08      	bge.n	8012064 <__swhatbuf_r+0x24>
 8012052:	2200      	movs	r2, #0
 8012054:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012058:	602a      	str	r2, [r5, #0]
 801205a:	061a      	lsls	r2, r3, #24
 801205c:	d410      	bmi.n	8012080 <__swhatbuf_r+0x40>
 801205e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012062:	e00e      	b.n	8012082 <__swhatbuf_r+0x42>
 8012064:	466a      	mov	r2, sp
 8012066:	f000 f951 	bl	801230c <_fstat_r>
 801206a:	2800      	cmp	r0, #0
 801206c:	dbf1      	blt.n	8012052 <__swhatbuf_r+0x12>
 801206e:	9a01      	ldr	r2, [sp, #4]
 8012070:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012074:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012078:	425a      	negs	r2, r3
 801207a:	415a      	adcs	r2, r3
 801207c:	602a      	str	r2, [r5, #0]
 801207e:	e7ee      	b.n	801205e <__swhatbuf_r+0x1e>
 8012080:	2340      	movs	r3, #64	; 0x40
 8012082:	2000      	movs	r0, #0
 8012084:	6023      	str	r3, [r4, #0]
 8012086:	b016      	add	sp, #88	; 0x58
 8012088:	bd70      	pop	{r4, r5, r6, pc}
	...

0801208c <__smakebuf_r>:
 801208c:	898b      	ldrh	r3, [r1, #12]
 801208e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012090:	079d      	lsls	r5, r3, #30
 8012092:	4606      	mov	r6, r0
 8012094:	460c      	mov	r4, r1
 8012096:	d507      	bpl.n	80120a8 <__smakebuf_r+0x1c>
 8012098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	6123      	str	r3, [r4, #16]
 80120a0:	2301      	movs	r3, #1
 80120a2:	6163      	str	r3, [r4, #20]
 80120a4:	b002      	add	sp, #8
 80120a6:	bd70      	pop	{r4, r5, r6, pc}
 80120a8:	466a      	mov	r2, sp
 80120aa:	ab01      	add	r3, sp, #4
 80120ac:	f7ff ffc8 	bl	8012040 <__swhatbuf_r>
 80120b0:	9900      	ldr	r1, [sp, #0]
 80120b2:	4605      	mov	r5, r0
 80120b4:	4630      	mov	r0, r6
 80120b6:	f7ff f9e5 	bl	8011484 <_malloc_r>
 80120ba:	b948      	cbnz	r0, 80120d0 <__smakebuf_r+0x44>
 80120bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120c0:	059a      	lsls	r2, r3, #22
 80120c2:	d4ef      	bmi.n	80120a4 <__smakebuf_r+0x18>
 80120c4:	f023 0303 	bic.w	r3, r3, #3
 80120c8:	f043 0302 	orr.w	r3, r3, #2
 80120cc:	81a3      	strh	r3, [r4, #12]
 80120ce:	e7e3      	b.n	8012098 <__smakebuf_r+0xc>
 80120d0:	4b0d      	ldr	r3, [pc, #52]	; (8012108 <__smakebuf_r+0x7c>)
 80120d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80120d4:	89a3      	ldrh	r3, [r4, #12]
 80120d6:	6020      	str	r0, [r4, #0]
 80120d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120dc:	81a3      	strh	r3, [r4, #12]
 80120de:	9b00      	ldr	r3, [sp, #0]
 80120e0:	6120      	str	r0, [r4, #16]
 80120e2:	6163      	str	r3, [r4, #20]
 80120e4:	9b01      	ldr	r3, [sp, #4]
 80120e6:	b15b      	cbz	r3, 8012100 <__smakebuf_r+0x74>
 80120e8:	4630      	mov	r0, r6
 80120ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120ee:	f000 f91f 	bl	8012330 <_isatty_r>
 80120f2:	b128      	cbz	r0, 8012100 <__smakebuf_r+0x74>
 80120f4:	89a3      	ldrh	r3, [r4, #12]
 80120f6:	f023 0303 	bic.w	r3, r3, #3
 80120fa:	f043 0301 	orr.w	r3, r3, #1
 80120fe:	81a3      	strh	r3, [r4, #12]
 8012100:	89a0      	ldrh	r0, [r4, #12]
 8012102:	4305      	orrs	r5, r0
 8012104:	81a5      	strh	r5, [r4, #12]
 8012106:	e7cd      	b.n	80120a4 <__smakebuf_r+0x18>
 8012108:	08011e99 	.word	0x08011e99

0801210c <memmove>:
 801210c:	4288      	cmp	r0, r1
 801210e:	b510      	push	{r4, lr}
 8012110:	eb01 0402 	add.w	r4, r1, r2
 8012114:	d902      	bls.n	801211c <memmove+0x10>
 8012116:	4284      	cmp	r4, r0
 8012118:	4623      	mov	r3, r4
 801211a:	d807      	bhi.n	801212c <memmove+0x20>
 801211c:	1e43      	subs	r3, r0, #1
 801211e:	42a1      	cmp	r1, r4
 8012120:	d008      	beq.n	8012134 <memmove+0x28>
 8012122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012126:	f803 2f01 	strb.w	r2, [r3, #1]!
 801212a:	e7f8      	b.n	801211e <memmove+0x12>
 801212c:	4601      	mov	r1, r0
 801212e:	4402      	add	r2, r0
 8012130:	428a      	cmp	r2, r1
 8012132:	d100      	bne.n	8012136 <memmove+0x2a>
 8012134:	bd10      	pop	{r4, pc}
 8012136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801213a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801213e:	e7f7      	b.n	8012130 <memmove+0x24>

08012140 <__malloc_lock>:
 8012140:	4801      	ldr	r0, [pc, #4]	; (8012148 <__malloc_lock+0x8>)
 8012142:	f7ff bf7b 	b.w	801203c <__retarget_lock_acquire_recursive>
 8012146:	bf00      	nop
 8012148:	200018a8 	.word	0x200018a8

0801214c <__malloc_unlock>:
 801214c:	4801      	ldr	r0, [pc, #4]	; (8012154 <__malloc_unlock+0x8>)
 801214e:	f7ff bf76 	b.w	801203e <__retarget_lock_release_recursive>
 8012152:	bf00      	nop
 8012154:	200018a8 	.word	0x200018a8

08012158 <_realloc_r>:
 8012158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801215c:	4680      	mov	r8, r0
 801215e:	4614      	mov	r4, r2
 8012160:	460e      	mov	r6, r1
 8012162:	b921      	cbnz	r1, 801216e <_realloc_r+0x16>
 8012164:	4611      	mov	r1, r2
 8012166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801216a:	f7ff b98b 	b.w	8011484 <_malloc_r>
 801216e:	b92a      	cbnz	r2, 801217c <_realloc_r+0x24>
 8012170:	f7ff f920 	bl	80113b4 <_free_r>
 8012174:	4625      	mov	r5, r4
 8012176:	4628      	mov	r0, r5
 8012178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801217c:	f000 f8fa 	bl	8012374 <_malloc_usable_size_r>
 8012180:	4284      	cmp	r4, r0
 8012182:	4607      	mov	r7, r0
 8012184:	d802      	bhi.n	801218c <_realloc_r+0x34>
 8012186:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801218a:	d812      	bhi.n	80121b2 <_realloc_r+0x5a>
 801218c:	4621      	mov	r1, r4
 801218e:	4640      	mov	r0, r8
 8012190:	f7ff f978 	bl	8011484 <_malloc_r>
 8012194:	4605      	mov	r5, r0
 8012196:	2800      	cmp	r0, #0
 8012198:	d0ed      	beq.n	8012176 <_realloc_r+0x1e>
 801219a:	42bc      	cmp	r4, r7
 801219c:	4622      	mov	r2, r4
 801219e:	4631      	mov	r1, r6
 80121a0:	bf28      	it	cs
 80121a2:	463a      	movcs	r2, r7
 80121a4:	f7fb feea 	bl	800df7c <memcpy>
 80121a8:	4631      	mov	r1, r6
 80121aa:	4640      	mov	r0, r8
 80121ac:	f7ff f902 	bl	80113b4 <_free_r>
 80121b0:	e7e1      	b.n	8012176 <_realloc_r+0x1e>
 80121b2:	4635      	mov	r5, r6
 80121b4:	e7df      	b.n	8012176 <_realloc_r+0x1e>

080121b6 <_raise_r>:
 80121b6:	291f      	cmp	r1, #31
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	4604      	mov	r4, r0
 80121bc:	460d      	mov	r5, r1
 80121be:	d904      	bls.n	80121ca <_raise_r+0x14>
 80121c0:	2316      	movs	r3, #22
 80121c2:	6003      	str	r3, [r0, #0]
 80121c4:	f04f 30ff 	mov.w	r0, #4294967295
 80121c8:	bd38      	pop	{r3, r4, r5, pc}
 80121ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80121cc:	b112      	cbz	r2, 80121d4 <_raise_r+0x1e>
 80121ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80121d2:	b94b      	cbnz	r3, 80121e8 <_raise_r+0x32>
 80121d4:	4620      	mov	r0, r4
 80121d6:	f000 f831 	bl	801223c <_getpid_r>
 80121da:	462a      	mov	r2, r5
 80121dc:	4601      	mov	r1, r0
 80121de:	4620      	mov	r0, r4
 80121e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121e4:	f000 b818 	b.w	8012218 <_kill_r>
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d00a      	beq.n	8012202 <_raise_r+0x4c>
 80121ec:	1c59      	adds	r1, r3, #1
 80121ee:	d103      	bne.n	80121f8 <_raise_r+0x42>
 80121f0:	2316      	movs	r3, #22
 80121f2:	6003      	str	r3, [r0, #0]
 80121f4:	2001      	movs	r0, #1
 80121f6:	e7e7      	b.n	80121c8 <_raise_r+0x12>
 80121f8:	2400      	movs	r4, #0
 80121fa:	4628      	mov	r0, r5
 80121fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012200:	4798      	blx	r3
 8012202:	2000      	movs	r0, #0
 8012204:	e7e0      	b.n	80121c8 <_raise_r+0x12>
	...

08012208 <raise>:
 8012208:	4b02      	ldr	r3, [pc, #8]	; (8012214 <raise+0xc>)
 801220a:	4601      	mov	r1, r0
 801220c:	6818      	ldr	r0, [r3, #0]
 801220e:	f7ff bfd2 	b.w	80121b6 <_raise_r>
 8012212:	bf00      	nop
 8012214:	20000834 	.word	0x20000834

08012218 <_kill_r>:
 8012218:	b538      	push	{r3, r4, r5, lr}
 801221a:	2300      	movs	r3, #0
 801221c:	4d06      	ldr	r5, [pc, #24]	; (8012238 <_kill_r+0x20>)
 801221e:	4604      	mov	r4, r0
 8012220:	4608      	mov	r0, r1
 8012222:	4611      	mov	r1, r2
 8012224:	602b      	str	r3, [r5, #0]
 8012226:	f7f1 fce6 	bl	8003bf6 <_kill>
 801222a:	1c43      	adds	r3, r0, #1
 801222c:	d102      	bne.n	8012234 <_kill_r+0x1c>
 801222e:	682b      	ldr	r3, [r5, #0]
 8012230:	b103      	cbz	r3, 8012234 <_kill_r+0x1c>
 8012232:	6023      	str	r3, [r4, #0]
 8012234:	bd38      	pop	{r3, r4, r5, pc}
 8012236:	bf00      	nop
 8012238:	200018ac 	.word	0x200018ac

0801223c <_getpid_r>:
 801223c:	f7f1 bcd4 	b.w	8003be8 <_getpid>

08012240 <__sread>:
 8012240:	b510      	push	{r4, lr}
 8012242:	460c      	mov	r4, r1
 8012244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012248:	f000 f89c 	bl	8012384 <_read_r>
 801224c:	2800      	cmp	r0, #0
 801224e:	bfab      	itete	ge
 8012250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012252:	89a3      	ldrhlt	r3, [r4, #12]
 8012254:	181b      	addge	r3, r3, r0
 8012256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801225a:	bfac      	ite	ge
 801225c:	6563      	strge	r3, [r4, #84]	; 0x54
 801225e:	81a3      	strhlt	r3, [r4, #12]
 8012260:	bd10      	pop	{r4, pc}

08012262 <__swrite>:
 8012262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012266:	461f      	mov	r7, r3
 8012268:	898b      	ldrh	r3, [r1, #12]
 801226a:	4605      	mov	r5, r0
 801226c:	05db      	lsls	r3, r3, #23
 801226e:	460c      	mov	r4, r1
 8012270:	4616      	mov	r6, r2
 8012272:	d505      	bpl.n	8012280 <__swrite+0x1e>
 8012274:	2302      	movs	r3, #2
 8012276:	2200      	movs	r2, #0
 8012278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801227c:	f000 f868 	bl	8012350 <_lseek_r>
 8012280:	89a3      	ldrh	r3, [r4, #12]
 8012282:	4632      	mov	r2, r6
 8012284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012288:	81a3      	strh	r3, [r4, #12]
 801228a:	4628      	mov	r0, r5
 801228c:	463b      	mov	r3, r7
 801228e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012296:	f000 b817 	b.w	80122c8 <_write_r>

0801229a <__sseek>:
 801229a:	b510      	push	{r4, lr}
 801229c:	460c      	mov	r4, r1
 801229e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122a2:	f000 f855 	bl	8012350 <_lseek_r>
 80122a6:	1c43      	adds	r3, r0, #1
 80122a8:	89a3      	ldrh	r3, [r4, #12]
 80122aa:	bf15      	itete	ne
 80122ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80122ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80122b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80122b6:	81a3      	strheq	r3, [r4, #12]
 80122b8:	bf18      	it	ne
 80122ba:	81a3      	strhne	r3, [r4, #12]
 80122bc:	bd10      	pop	{r4, pc}

080122be <__sclose>:
 80122be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122c2:	f000 b813 	b.w	80122ec <_close_r>
	...

080122c8 <_write_r>:
 80122c8:	b538      	push	{r3, r4, r5, lr}
 80122ca:	4604      	mov	r4, r0
 80122cc:	4608      	mov	r0, r1
 80122ce:	4611      	mov	r1, r2
 80122d0:	2200      	movs	r2, #0
 80122d2:	4d05      	ldr	r5, [pc, #20]	; (80122e8 <_write_r+0x20>)
 80122d4:	602a      	str	r2, [r5, #0]
 80122d6:	461a      	mov	r2, r3
 80122d8:	f7f1 fcc4 	bl	8003c64 <_write>
 80122dc:	1c43      	adds	r3, r0, #1
 80122de:	d102      	bne.n	80122e6 <_write_r+0x1e>
 80122e0:	682b      	ldr	r3, [r5, #0]
 80122e2:	b103      	cbz	r3, 80122e6 <_write_r+0x1e>
 80122e4:	6023      	str	r3, [r4, #0]
 80122e6:	bd38      	pop	{r3, r4, r5, pc}
 80122e8:	200018ac 	.word	0x200018ac

080122ec <_close_r>:
 80122ec:	b538      	push	{r3, r4, r5, lr}
 80122ee:	2300      	movs	r3, #0
 80122f0:	4d05      	ldr	r5, [pc, #20]	; (8012308 <_close_r+0x1c>)
 80122f2:	4604      	mov	r4, r0
 80122f4:	4608      	mov	r0, r1
 80122f6:	602b      	str	r3, [r5, #0]
 80122f8:	f7f1 fcd0 	bl	8003c9c <_close>
 80122fc:	1c43      	adds	r3, r0, #1
 80122fe:	d102      	bne.n	8012306 <_close_r+0x1a>
 8012300:	682b      	ldr	r3, [r5, #0]
 8012302:	b103      	cbz	r3, 8012306 <_close_r+0x1a>
 8012304:	6023      	str	r3, [r4, #0]
 8012306:	bd38      	pop	{r3, r4, r5, pc}
 8012308:	200018ac 	.word	0x200018ac

0801230c <_fstat_r>:
 801230c:	b538      	push	{r3, r4, r5, lr}
 801230e:	2300      	movs	r3, #0
 8012310:	4d06      	ldr	r5, [pc, #24]	; (801232c <_fstat_r+0x20>)
 8012312:	4604      	mov	r4, r0
 8012314:	4608      	mov	r0, r1
 8012316:	4611      	mov	r1, r2
 8012318:	602b      	str	r3, [r5, #0]
 801231a:	f7f1 fcca 	bl	8003cb2 <_fstat>
 801231e:	1c43      	adds	r3, r0, #1
 8012320:	d102      	bne.n	8012328 <_fstat_r+0x1c>
 8012322:	682b      	ldr	r3, [r5, #0]
 8012324:	b103      	cbz	r3, 8012328 <_fstat_r+0x1c>
 8012326:	6023      	str	r3, [r4, #0]
 8012328:	bd38      	pop	{r3, r4, r5, pc}
 801232a:	bf00      	nop
 801232c:	200018ac 	.word	0x200018ac

08012330 <_isatty_r>:
 8012330:	b538      	push	{r3, r4, r5, lr}
 8012332:	2300      	movs	r3, #0
 8012334:	4d05      	ldr	r5, [pc, #20]	; (801234c <_isatty_r+0x1c>)
 8012336:	4604      	mov	r4, r0
 8012338:	4608      	mov	r0, r1
 801233a:	602b      	str	r3, [r5, #0]
 801233c:	f7f1 fcc8 	bl	8003cd0 <_isatty>
 8012340:	1c43      	adds	r3, r0, #1
 8012342:	d102      	bne.n	801234a <_isatty_r+0x1a>
 8012344:	682b      	ldr	r3, [r5, #0]
 8012346:	b103      	cbz	r3, 801234a <_isatty_r+0x1a>
 8012348:	6023      	str	r3, [r4, #0]
 801234a:	bd38      	pop	{r3, r4, r5, pc}
 801234c:	200018ac 	.word	0x200018ac

08012350 <_lseek_r>:
 8012350:	b538      	push	{r3, r4, r5, lr}
 8012352:	4604      	mov	r4, r0
 8012354:	4608      	mov	r0, r1
 8012356:	4611      	mov	r1, r2
 8012358:	2200      	movs	r2, #0
 801235a:	4d05      	ldr	r5, [pc, #20]	; (8012370 <_lseek_r+0x20>)
 801235c:	602a      	str	r2, [r5, #0]
 801235e:	461a      	mov	r2, r3
 8012360:	f7f1 fcc0 	bl	8003ce4 <_lseek>
 8012364:	1c43      	adds	r3, r0, #1
 8012366:	d102      	bne.n	801236e <_lseek_r+0x1e>
 8012368:	682b      	ldr	r3, [r5, #0]
 801236a:	b103      	cbz	r3, 801236e <_lseek_r+0x1e>
 801236c:	6023      	str	r3, [r4, #0]
 801236e:	bd38      	pop	{r3, r4, r5, pc}
 8012370:	200018ac 	.word	0x200018ac

08012374 <_malloc_usable_size_r>:
 8012374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012378:	1f18      	subs	r0, r3, #4
 801237a:	2b00      	cmp	r3, #0
 801237c:	bfbc      	itt	lt
 801237e:	580b      	ldrlt	r3, [r1, r0]
 8012380:	18c0      	addlt	r0, r0, r3
 8012382:	4770      	bx	lr

08012384 <_read_r>:
 8012384:	b538      	push	{r3, r4, r5, lr}
 8012386:	4604      	mov	r4, r0
 8012388:	4608      	mov	r0, r1
 801238a:	4611      	mov	r1, r2
 801238c:	2200      	movs	r2, #0
 801238e:	4d05      	ldr	r5, [pc, #20]	; (80123a4 <_read_r+0x20>)
 8012390:	602a      	str	r2, [r5, #0]
 8012392:	461a      	mov	r2, r3
 8012394:	f7f1 fc49 	bl	8003c2a <_read>
 8012398:	1c43      	adds	r3, r0, #1
 801239a:	d102      	bne.n	80123a2 <_read_r+0x1e>
 801239c:	682b      	ldr	r3, [r5, #0]
 801239e:	b103      	cbz	r3, 80123a2 <_read_r+0x1e>
 80123a0:	6023      	str	r3, [r4, #0]
 80123a2:	bd38      	pop	{r3, r4, r5, pc}
 80123a4:	200018ac 	.word	0x200018ac

080123a8 <_init>:
 80123a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123aa:	bf00      	nop
 80123ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ae:	bc08      	pop	{r3}
 80123b0:	469e      	mov	lr, r3
 80123b2:	4770      	bx	lr

080123b4 <_fini>:
 80123b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123b6:	bf00      	nop
 80123b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ba:	bc08      	pop	{r3}
 80123bc:	469e      	mov	lr, r3
 80123be:	4770      	bx	lr
