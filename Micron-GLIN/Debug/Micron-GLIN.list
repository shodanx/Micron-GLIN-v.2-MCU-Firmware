
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008178  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008308  08008308  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008310  08008310  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008310  08008310  00018310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08008318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000127c  20000184  0800849c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001400  0800849c  00021400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d15  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003181  00000000  00000000  00033ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00037048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  00037c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016693  00000000  00000000  00038780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108ef  00000000  00000000  0004ee13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ae67  00000000  00000000  0005f702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003078  00000000  00000000  000da5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0800829c 	.word	0x0800829c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0800829c 	.word	0x0800829c

0800017c <__aeabi_fmul>:
 800017c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000180:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000184:	bf1e      	ittt	ne
 8000186:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018a:	ea92 0f0c 	teqne	r2, ip
 800018e:	ea93 0f0c 	teqne	r3, ip
 8000192:	d06f      	beq.n	8000274 <__aeabi_fmul+0xf8>
 8000194:	441a      	add	r2, r3
 8000196:	ea80 0c01 	eor.w	ip, r0, r1
 800019a:	0240      	lsls	r0, r0, #9
 800019c:	bf18      	it	ne
 800019e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a2:	d01e      	beq.n	80001e2 <__aeabi_fmul+0x66>
 80001a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b0:	fba0 3101 	umull	r3, r1, r0, r1
 80001b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001bc:	bf3e      	ittt	cc
 80001be:	0049      	lslcc	r1, r1, #1
 80001c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c4:	005b      	lslcc	r3, r3, #1
 80001c6:	ea40 0001 	orr.w	r0, r0, r1
 80001ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ce:	2afd      	cmp	r2, #253	; 0xfd
 80001d0:	d81d      	bhi.n	800020e <__aeabi_fmul+0x92>
 80001d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001da:	bf08      	it	eq
 80001dc:	f020 0001 	biceq.w	r0, r0, #1
 80001e0:	4770      	bx	lr
 80001e2:	f090 0f00 	teq	r0, #0
 80001e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ea:	bf08      	it	eq
 80001ec:	0249      	lsleq	r1, r1, #9
 80001ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001f6:	3a7f      	subs	r2, #127	; 0x7f
 80001f8:	bfc2      	ittt	gt
 80001fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000202:	4770      	bxgt	lr
 8000204:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000208:	f04f 0300 	mov.w	r3, #0
 800020c:	3a01      	subs	r2, #1
 800020e:	dc5d      	bgt.n	80002cc <__aeabi_fmul+0x150>
 8000210:	f112 0f19 	cmn.w	r2, #25
 8000214:	bfdc      	itt	le
 8000216:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800021a:	4770      	bxle	lr
 800021c:	f1c2 0200 	rsb	r2, r2, #0
 8000220:	0041      	lsls	r1, r0, #1
 8000222:	fa21 f102 	lsr.w	r1, r1, r2
 8000226:	f1c2 0220 	rsb	r2, r2, #32
 800022a:	fa00 fc02 	lsl.w	ip, r0, r2
 800022e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000232:	f140 0000 	adc.w	r0, r0, #0
 8000236:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023a:	bf08      	it	eq
 800023c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000240:	4770      	bx	lr
 8000242:	f092 0f00 	teq	r2, #0
 8000246:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800024a:	bf02      	ittt	eq
 800024c:	0040      	lsleq	r0, r0, #1
 800024e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000252:	3a01      	subeq	r2, #1
 8000254:	d0f9      	beq.n	800024a <__aeabi_fmul+0xce>
 8000256:	ea40 000c 	orr.w	r0, r0, ip
 800025a:	f093 0f00 	teq	r3, #0
 800025e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000262:	bf02      	ittt	eq
 8000264:	0049      	lsleq	r1, r1, #1
 8000266:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800026a:	3b01      	subeq	r3, #1
 800026c:	d0f9      	beq.n	8000262 <__aeabi_fmul+0xe6>
 800026e:	ea41 010c 	orr.w	r1, r1, ip
 8000272:	e78f      	b.n	8000194 <__aeabi_fmul+0x18>
 8000274:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000278:	ea92 0f0c 	teq	r2, ip
 800027c:	bf18      	it	ne
 800027e:	ea93 0f0c 	teqne	r3, ip
 8000282:	d00a      	beq.n	800029a <__aeabi_fmul+0x11e>
 8000284:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000288:	bf18      	it	ne
 800028a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800028e:	d1d8      	bne.n	8000242 <__aeabi_fmul+0xc6>
 8000290:	ea80 0001 	eor.w	r0, r0, r1
 8000294:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000298:	4770      	bx	lr
 800029a:	f090 0f00 	teq	r0, #0
 800029e:	bf17      	itett	ne
 80002a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a4:	4608      	moveq	r0, r1
 80002a6:	f091 0f00 	teqne	r1, #0
 80002aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002ae:	d014      	beq.n	80002da <__aeabi_fmul+0x15e>
 80002b0:	ea92 0f0c 	teq	r2, ip
 80002b4:	d101      	bne.n	80002ba <__aeabi_fmul+0x13e>
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	d10f      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002ba:	ea93 0f0c 	teq	r3, ip
 80002be:	d103      	bne.n	80002c8 <__aeabi_fmul+0x14c>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	bf18      	it	ne
 80002c4:	4608      	movne	r0, r1
 80002c6:	d108      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002c8:	ea80 0001 	eor.w	r0, r0, r1
 80002cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d8:	4770      	bx	lr
 80002da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_fdiv>:
 80002e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80002ec:	bf1e      	ittt	ne
 80002ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80002f2:	ea92 0f0c 	teqne	r2, ip
 80002f6:	ea93 0f0c 	teqne	r3, ip
 80002fa:	d069      	beq.n	80003d0 <__aeabi_fdiv+0xec>
 80002fc:	eba2 0203 	sub.w	r2, r2, r3
 8000300:	ea80 0c01 	eor.w	ip, r0, r1
 8000304:	0249      	lsls	r1, r1, #9
 8000306:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800030a:	d037      	beq.n	800037c <__aeabi_fdiv+0x98>
 800030c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000310:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000314:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000318:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800031c:	428b      	cmp	r3, r1
 800031e:	bf38      	it	cc
 8000320:	005b      	lslcc	r3, r3, #1
 8000322:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000326:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800032a:	428b      	cmp	r3, r1
 800032c:	bf24      	itt	cs
 800032e:	1a5b      	subcs	r3, r3, r1
 8000330:	ea40 000c 	orrcs.w	r0, r0, ip
 8000334:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000338:	bf24      	itt	cs
 800033a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800033e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000342:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000346:	bf24      	itt	cs
 8000348:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800034c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000350:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000354:	bf24      	itt	cs
 8000356:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800035a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800035e:	011b      	lsls	r3, r3, #4
 8000360:	bf18      	it	ne
 8000362:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000366:	d1e0      	bne.n	800032a <__aeabi_fdiv+0x46>
 8000368:	2afd      	cmp	r2, #253	; 0xfd
 800036a:	f63f af50 	bhi.w	800020e <__aeabi_fmul+0x92>
 800036e:	428b      	cmp	r3, r1
 8000370:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000374:	bf08      	it	eq
 8000376:	f020 0001 	biceq.w	r0, r0, #1
 800037a:	4770      	bx	lr
 800037c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000380:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000384:	327f      	adds	r2, #127	; 0x7f
 8000386:	bfc2      	ittt	gt
 8000388:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800038c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000390:	4770      	bxgt	lr
 8000392:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000396:	f04f 0300 	mov.w	r3, #0
 800039a:	3a01      	subs	r2, #1
 800039c:	e737      	b.n	800020e <__aeabi_fmul+0x92>
 800039e:	f092 0f00 	teq	r2, #0
 80003a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80003a6:	bf02      	ittt	eq
 80003a8:	0040      	lsleq	r0, r0, #1
 80003aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80003ae:	3a01      	subeq	r2, #1
 80003b0:	d0f9      	beq.n	80003a6 <__aeabi_fdiv+0xc2>
 80003b2:	ea40 000c 	orr.w	r0, r0, ip
 80003b6:	f093 0f00 	teq	r3, #0
 80003ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80003be:	bf02      	ittt	eq
 80003c0:	0049      	lsleq	r1, r1, #1
 80003c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80003c6:	3b01      	subeq	r3, #1
 80003c8:	d0f9      	beq.n	80003be <__aeabi_fdiv+0xda>
 80003ca:	ea41 010c 	orr.w	r1, r1, ip
 80003ce:	e795      	b.n	80002fc <__aeabi_fdiv+0x18>
 80003d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80003d4:	ea92 0f0c 	teq	r2, ip
 80003d8:	d108      	bne.n	80003ec <__aeabi_fdiv+0x108>
 80003da:	0242      	lsls	r2, r0, #9
 80003dc:	f47f af7d 	bne.w	80002da <__aeabi_fmul+0x15e>
 80003e0:	ea93 0f0c 	teq	r3, ip
 80003e4:	f47f af70 	bne.w	80002c8 <__aeabi_fmul+0x14c>
 80003e8:	4608      	mov	r0, r1
 80003ea:	e776      	b.n	80002da <__aeabi_fmul+0x15e>
 80003ec:	ea93 0f0c 	teq	r3, ip
 80003f0:	d104      	bne.n	80003fc <__aeabi_fdiv+0x118>
 80003f2:	024b      	lsls	r3, r1, #9
 80003f4:	f43f af4c 	beq.w	8000290 <__aeabi_fmul+0x114>
 80003f8:	4608      	mov	r0, r1
 80003fa:	e76e      	b.n	80002da <__aeabi_fmul+0x15e>
 80003fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000400:	bf18      	it	ne
 8000402:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000406:	d1ca      	bne.n	800039e <__aeabi_fdiv+0xba>
 8000408:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800040c:	f47f af5c 	bne.w	80002c8 <__aeabi_fmul+0x14c>
 8000410:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000414:	f47f af3c 	bne.w	8000290 <__aeabi_fmul+0x114>
 8000418:	e75f      	b.n	80002da <__aeabi_fmul+0x15e>
 800041a:	bf00      	nop

0800041c <__aeabi_f2uiz>:
 800041c:	0042      	lsls	r2, r0, #1
 800041e:	d20e      	bcs.n	800043e <__aeabi_f2uiz+0x22>
 8000420:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000424:	d30b      	bcc.n	800043e <__aeabi_f2uiz+0x22>
 8000426:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800042a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800042e:	d409      	bmi.n	8000444 <__aeabi_f2uiz+0x28>
 8000430:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000438:	fa23 f002 	lsr.w	r0, r3, r2
 800043c:	4770      	bx	lr
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	4770      	bx	lr
 8000444:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000448:	d101      	bne.n	800044e <__aeabi_f2uiz+0x32>
 800044a:	0242      	lsls	r2, r0, #9
 800044c:	d102      	bne.n	8000454 <__aeabi_f2uiz+0x38>
 800044e:	f04f 30ff 	mov.w	r0, #4294967295
 8000452:	4770      	bx	lr
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop

0800045c <__aeabi_uldivmod>:
 800045c:	b953      	cbnz	r3, 8000474 <__aeabi_uldivmod+0x18>
 800045e:	b94a      	cbnz	r2, 8000474 <__aeabi_uldivmod+0x18>
 8000460:	2900      	cmp	r1, #0
 8000462:	bf08      	it	eq
 8000464:	2800      	cmpeq	r0, #0
 8000466:	bf1c      	itt	ne
 8000468:	f04f 31ff 	movne.w	r1, #4294967295
 800046c:	f04f 30ff 	movne.w	r0, #4294967295
 8000470:	f000 b96e 	b.w	8000750 <__aeabi_idiv0>
 8000474:	f1ad 0c08 	sub.w	ip, sp, #8
 8000478:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800047c:	f000 f806 	bl	800048c <__udivmoddi4>
 8000480:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000488:	b004      	add	sp, #16
 800048a:	4770      	bx	lr

0800048c <__udivmoddi4>:
 800048c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000490:	9e08      	ldr	r6, [sp, #32]
 8000492:	460d      	mov	r5, r1
 8000494:	4604      	mov	r4, r0
 8000496:	468e      	mov	lr, r1
 8000498:	2b00      	cmp	r3, #0
 800049a:	f040 8083 	bne.w	80005a4 <__udivmoddi4+0x118>
 800049e:	428a      	cmp	r2, r1
 80004a0:	4617      	mov	r7, r2
 80004a2:	d947      	bls.n	8000534 <__udivmoddi4+0xa8>
 80004a4:	fab2 f382 	clz	r3, r2
 80004a8:	b14b      	cbz	r3, 80004be <__udivmoddi4+0x32>
 80004aa:	f1c3 0120 	rsb	r1, r3, #32
 80004ae:	fa05 fe03 	lsl.w	lr, r5, r3
 80004b2:	fa20 f101 	lsr.w	r1, r0, r1
 80004b6:	409f      	lsls	r7, r3
 80004b8:	ea41 0e0e 	orr.w	lr, r1, lr
 80004bc:	409c      	lsls	r4, r3
 80004be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004c2:	fbbe fcf8 	udiv	ip, lr, r8
 80004c6:	fa1f f987 	uxth.w	r9, r7
 80004ca:	fb08 e21c 	mls	r2, r8, ip, lr
 80004ce:	fb0c f009 	mul.w	r0, ip, r9
 80004d2:	0c21      	lsrs	r1, r4, #16
 80004d4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80004d8:	4290      	cmp	r0, r2
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x66>
 80004dc:	18ba      	adds	r2, r7, r2
 80004de:	f10c 31ff 	add.w	r1, ip, #4294967295
 80004e2:	f080 8118 	bcs.w	8000716 <__udivmoddi4+0x28a>
 80004e6:	4290      	cmp	r0, r2
 80004e8:	f240 8115 	bls.w	8000716 <__udivmoddi4+0x28a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	1a12      	subs	r2, r2, r0
 80004f4:	fbb2 f0f8 	udiv	r0, r2, r8
 80004f8:	fb08 2210 	mls	r2, r8, r0, r2
 80004fc:	fb00 f109 	mul.w	r1, r0, r9
 8000500:	b2a4      	uxth	r4, r4
 8000502:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000506:	42a1      	cmp	r1, r4
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x92>
 800050a:	193c      	adds	r4, r7, r4
 800050c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000510:	f080 8103 	bcs.w	800071a <__udivmoddi4+0x28e>
 8000514:	42a1      	cmp	r1, r4
 8000516:	f240 8100 	bls.w	800071a <__udivmoddi4+0x28e>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	1a64      	subs	r4, r4, r1
 8000520:	2100      	movs	r1, #0
 8000522:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000526:	b11e      	cbz	r6, 8000530 <__udivmoddi4+0xa4>
 8000528:	2200      	movs	r2, #0
 800052a:	40dc      	lsrs	r4, r3
 800052c:	e9c6 4200 	strd	r4, r2, [r6]
 8000530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000534:	b902      	cbnz	r2, 8000538 <__udivmoddi4+0xac>
 8000536:	deff      	udf	#255	; 0xff
 8000538:	fab2 f382 	clz	r3, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	d14f      	bne.n	80005e0 <__udivmoddi4+0x154>
 8000540:	1a8d      	subs	r5, r1, r2
 8000542:	2101      	movs	r1, #1
 8000544:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000548:	fa1f f882 	uxth.w	r8, r2
 800054c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000550:	fb0e 551c 	mls	r5, lr, ip, r5
 8000554:	fb08 f00c 	mul.w	r0, r8, ip
 8000558:	0c22      	lsrs	r2, r4, #16
 800055a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800055e:	42a8      	cmp	r0, r5
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0xe6>
 8000562:	197d      	adds	r5, r7, r5
 8000564:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000568:	d202      	bcs.n	8000570 <__udivmoddi4+0xe4>
 800056a:	42a8      	cmp	r0, r5
 800056c:	f200 80e9 	bhi.w	8000742 <__udivmoddi4+0x2b6>
 8000570:	4694      	mov	ip, r2
 8000572:	1a2d      	subs	r5, r5, r0
 8000574:	fbb5 f0fe 	udiv	r0, r5, lr
 8000578:	fb0e 5510 	mls	r5, lr, r0, r5
 800057c:	fb08 f800 	mul.w	r8, r8, r0
 8000580:	b2a4      	uxth	r4, r4
 8000582:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000586:	45a0      	cmp	r8, r4
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x10e>
 800058a:	193c      	adds	r4, r7, r4
 800058c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000590:	d202      	bcs.n	8000598 <__udivmoddi4+0x10c>
 8000592:	45a0      	cmp	r8, r4
 8000594:	f200 80d9 	bhi.w	800074a <__udivmoddi4+0x2be>
 8000598:	4610      	mov	r0, r2
 800059a:	eba4 0408 	sub.w	r4, r4, r8
 800059e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005a2:	e7c0      	b.n	8000526 <__udivmoddi4+0x9a>
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x12e>
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	f000 80b1 	beq.w	8000710 <__udivmoddi4+0x284>
 80005ae:	2100      	movs	r1, #0
 80005b0:	e9c6 0500 	strd	r0, r5, [r6]
 80005b4:	4608      	mov	r0, r1
 80005b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ba:	fab3 f183 	clz	r1, r3
 80005be:	2900      	cmp	r1, #0
 80005c0:	d14b      	bne.n	800065a <__udivmoddi4+0x1ce>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d302      	bcc.n	80005cc <__udivmoddi4+0x140>
 80005c6:	4282      	cmp	r2, r0
 80005c8:	f200 80b9 	bhi.w	800073e <__udivmoddi4+0x2b2>
 80005cc:	1a84      	subs	r4, r0, r2
 80005ce:	eb65 0303 	sbc.w	r3, r5, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	469e      	mov	lr, r3
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d0aa      	beq.n	8000530 <__udivmoddi4+0xa4>
 80005da:	e9c6 4e00 	strd	r4, lr, [r6]
 80005de:	e7a7      	b.n	8000530 <__udivmoddi4+0xa4>
 80005e0:	409f      	lsls	r7, r3
 80005e2:	f1c3 0220 	rsb	r2, r3, #32
 80005e6:	40d1      	lsrs	r1, r2
 80005e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80005f0:	fa1f f887 	uxth.w	r8, r7
 80005f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80005f8:	fa24 f202 	lsr.w	r2, r4, r2
 80005fc:	409d      	lsls	r5, r3
 80005fe:	fb00 fc08 	mul.w	ip, r0, r8
 8000602:	432a      	orrs	r2, r5
 8000604:	0c15      	lsrs	r5, r2, #16
 8000606:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800060a:	45ac      	cmp	ip, r5
 800060c:	fa04 f403 	lsl.w	r4, r4, r3
 8000610:	d909      	bls.n	8000626 <__udivmoddi4+0x19a>
 8000612:	197d      	adds	r5, r7, r5
 8000614:	f100 31ff 	add.w	r1, r0, #4294967295
 8000618:	f080 808f 	bcs.w	800073a <__udivmoddi4+0x2ae>
 800061c:	45ac      	cmp	ip, r5
 800061e:	f240 808c 	bls.w	800073a <__udivmoddi4+0x2ae>
 8000622:	3802      	subs	r0, #2
 8000624:	443d      	add	r5, r7
 8000626:	eba5 050c 	sub.w	r5, r5, ip
 800062a:	fbb5 f1fe 	udiv	r1, r5, lr
 800062e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000632:	fb01 f908 	mul.w	r9, r1, r8
 8000636:	b295      	uxth	r5, r2
 8000638:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800063c:	45a9      	cmp	r9, r5
 800063e:	d907      	bls.n	8000650 <__udivmoddi4+0x1c4>
 8000640:	197d      	adds	r5, r7, r5
 8000642:	f101 32ff 	add.w	r2, r1, #4294967295
 8000646:	d274      	bcs.n	8000732 <__udivmoddi4+0x2a6>
 8000648:	45a9      	cmp	r9, r5
 800064a:	d972      	bls.n	8000732 <__udivmoddi4+0x2a6>
 800064c:	3902      	subs	r1, #2
 800064e:	443d      	add	r5, r7
 8000650:	eba5 0509 	sub.w	r5, r5, r9
 8000654:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000658:	e778      	b.n	800054c <__udivmoddi4+0xc0>
 800065a:	f1c1 0720 	rsb	r7, r1, #32
 800065e:	408b      	lsls	r3, r1
 8000660:	fa22 fc07 	lsr.w	ip, r2, r7
 8000664:	ea4c 0c03 	orr.w	ip, ip, r3
 8000668:	fa25 f407 	lsr.w	r4, r5, r7
 800066c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000670:	fbb4 f9fe 	udiv	r9, r4, lr
 8000674:	fa1f f88c 	uxth.w	r8, ip
 8000678:	fb0e 4419 	mls	r4, lr, r9, r4
 800067c:	fa20 f307 	lsr.w	r3, r0, r7
 8000680:	fb09 fa08 	mul.w	sl, r9, r8
 8000684:	408d      	lsls	r5, r1
 8000686:	431d      	orrs	r5, r3
 8000688:	0c2b      	lsrs	r3, r5, #16
 800068a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800068e:	45a2      	cmp	sl, r4
 8000690:	fa02 f201 	lsl.w	r2, r2, r1
 8000694:	fa00 f301 	lsl.w	r3, r0, r1
 8000698:	d909      	bls.n	80006ae <__udivmoddi4+0x222>
 800069a:	eb1c 0404 	adds.w	r4, ip, r4
 800069e:	f109 30ff 	add.w	r0, r9, #4294967295
 80006a2:	d248      	bcs.n	8000736 <__udivmoddi4+0x2aa>
 80006a4:	45a2      	cmp	sl, r4
 80006a6:	d946      	bls.n	8000736 <__udivmoddi4+0x2aa>
 80006a8:	f1a9 0902 	sub.w	r9, r9, #2
 80006ac:	4464      	add	r4, ip
 80006ae:	eba4 040a 	sub.w	r4, r4, sl
 80006b2:	fbb4 f0fe 	udiv	r0, r4, lr
 80006b6:	fb0e 4410 	mls	r4, lr, r0, r4
 80006ba:	fb00 fa08 	mul.w	sl, r0, r8
 80006be:	b2ad      	uxth	r5, r5
 80006c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80006c4:	45a2      	cmp	sl, r4
 80006c6:	d908      	bls.n	80006da <__udivmoddi4+0x24e>
 80006c8:	eb1c 0404 	adds.w	r4, ip, r4
 80006cc:	f100 35ff 	add.w	r5, r0, #4294967295
 80006d0:	d22d      	bcs.n	800072e <__udivmoddi4+0x2a2>
 80006d2:	45a2      	cmp	sl, r4
 80006d4:	d92b      	bls.n	800072e <__udivmoddi4+0x2a2>
 80006d6:	3802      	subs	r0, #2
 80006d8:	4464      	add	r4, ip
 80006da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006de:	fba0 8902 	umull	r8, r9, r0, r2
 80006e2:	eba4 040a 	sub.w	r4, r4, sl
 80006e6:	454c      	cmp	r4, r9
 80006e8:	46c6      	mov	lr, r8
 80006ea:	464d      	mov	r5, r9
 80006ec:	d319      	bcc.n	8000722 <__udivmoddi4+0x296>
 80006ee:	d016      	beq.n	800071e <__udivmoddi4+0x292>
 80006f0:	b15e      	cbz	r6, 800070a <__udivmoddi4+0x27e>
 80006f2:	ebb3 020e 	subs.w	r2, r3, lr
 80006f6:	eb64 0405 	sbc.w	r4, r4, r5
 80006fa:	fa04 f707 	lsl.w	r7, r4, r7
 80006fe:	fa22 f301 	lsr.w	r3, r2, r1
 8000702:	431f      	orrs	r7, r3
 8000704:	40cc      	lsrs	r4, r1
 8000706:	e9c6 7400 	strd	r7, r4, [r6]
 800070a:	2100      	movs	r1, #0
 800070c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000710:	4631      	mov	r1, r6
 8000712:	4630      	mov	r0, r6
 8000714:	e70c      	b.n	8000530 <__udivmoddi4+0xa4>
 8000716:	468c      	mov	ip, r1
 8000718:	e6eb      	b.n	80004f2 <__udivmoddi4+0x66>
 800071a:	4610      	mov	r0, r2
 800071c:	e6ff      	b.n	800051e <__udivmoddi4+0x92>
 800071e:	4543      	cmp	r3, r8
 8000720:	d2e6      	bcs.n	80006f0 <__udivmoddi4+0x264>
 8000722:	ebb8 0e02 	subs.w	lr, r8, r2
 8000726:	eb69 050c 	sbc.w	r5, r9, ip
 800072a:	3801      	subs	r0, #1
 800072c:	e7e0      	b.n	80006f0 <__udivmoddi4+0x264>
 800072e:	4628      	mov	r0, r5
 8000730:	e7d3      	b.n	80006da <__udivmoddi4+0x24e>
 8000732:	4611      	mov	r1, r2
 8000734:	e78c      	b.n	8000650 <__udivmoddi4+0x1c4>
 8000736:	4681      	mov	r9, r0
 8000738:	e7b9      	b.n	80006ae <__udivmoddi4+0x222>
 800073a:	4608      	mov	r0, r1
 800073c:	e773      	b.n	8000626 <__udivmoddi4+0x19a>
 800073e:	4608      	mov	r0, r1
 8000740:	e749      	b.n	80005d6 <__udivmoddi4+0x14a>
 8000742:	f1ac 0c02 	sub.w	ip, ip, #2
 8000746:	443d      	add	r5, r7
 8000748:	e713      	b.n	8000572 <__udivmoddi4+0xe6>
 800074a:	3802      	subs	r0, #2
 800074c:	443c      	add	r4, r7
 800074e:	e724      	b.n	800059a <__udivmoddi4+0x10e>

08000750 <__aeabi_idiv0>:
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop

08000754 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <MX_GPIO_Init+0x110>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a3d      	ldr	r2, [pc, #244]	; (8000864 <MX_GPIO_Init+0x110>)
 8000770:	f043 0320 	orr.w	r3, r3, #32
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <MX_GPIO_Init+0x110>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 0320 	and.w	r3, r3, #32
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b38      	ldr	r3, [pc, #224]	; (8000864 <MX_GPIO_Init+0x110>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a37      	ldr	r2, [pc, #220]	; (8000864 <MX_GPIO_Init+0x110>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <MX_GPIO_Init+0x110>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <MX_GPIO_Init+0x110>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a31      	ldr	r2, [pc, #196]	; (8000864 <MX_GPIO_Init+0x110>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <MX_GPIO_Init+0x110>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2111      	movs	r1, #17
 80007b6:	482c      	ldr	r0, [pc, #176]	; (8000868 <MX_GPIO_Init+0x114>)
 80007b8:	f000 ff24 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2108      	movs	r1, #8
 80007c0:	482a      	ldr	r0, [pc, #168]	; (800086c <MX_GPIO_Init+0x118>)
 80007c2:	f000 ff1f 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_CLR_Pin;
 80007c6:	2301      	movs	r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007ca:	2311      	movs	r3, #17
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_CLR_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	4619      	mov	r1, r3
 80007dc:	4822      	ldr	r0, [pc, #136]	; (8000868 <MX_GPIO_Init+0x114>)
 80007de:	f000 fd91 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 80007e2:	2302      	movs	r3, #2
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	481c      	ldr	r0, [pc, #112]	; (8000868 <MX_GPIO_Init+0x114>)
 80007f6:	f000 fd85 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CPU_LDAC_Pin;
 80007fa:	2304      	movs	r3, #4
 80007fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CPU_LDAC_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	4816      	ldr	r0, [pc, #88]	; (8000868 <MX_GPIO_Init+0x114>)
 8000810:	f000 fd78 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8000814:	2310      	movs	r3, #16
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	480f      	ldr	r0, [pc, #60]	; (8000868 <MX_GPIO_Init+0x114>)
 800082c:	f000 fd6a 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COUNT_EN_Pin;
 8000830:	2308      	movs	r3, #8
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(COUNT_EN_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <MX_GPIO_Init+0x118>)
 8000848:	f000 fd5c 	bl	8001304 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2008      	movs	r0, #8
 8000852:	f000 fd20 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000856:	2008      	movs	r0, #8
 8000858:	f000 fd39 	bl	80012ce <HAL_NVIC_EnableIRQ>

}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020400 	.word	0x40020400

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <main+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <main+0x90>)
 800087c:	2208      	movs	r2, #8
 800087e:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <main+0x90>)
 8000882:	2201      	movs	r2, #1
 8000884:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <main+0x90>)
 8000888:	2201      	movs	r2, #1
 800088a:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=1; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <main+0x90>)
 800088e:	2201      	movs	r2, #1
 8000890:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <main+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=1; // DAC updated on LDAC !!!!falling edge!!!!
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <main+0x90>)
 800089a:	2201      	movs	r2, #1
 800089c:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <main+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=1; // Temperature calibration feature enabled
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <main+0x90>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008aa:	f000 fbae 	bl	800100a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ae:	f000 f839 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b2:	f7ff ff4f 	bl	8000754 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008b6:	f000 fa33 	bl	8000d20 <MX_SPI1_Init>
  MX_SPI2_Init();
 80008ba:	f000 fa67 	bl	8000d8c <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80008be:	f007 f837 	bl	8007930 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  DAC_target_speed=0.01; //  V/s
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <main+0x94>)
 80008c4:	4a10      	ldr	r2, [pc, #64]	; (8000908 <main+0x98>)
 80008c6:	601a      	str	r2, [r3, #0]
  DAC_code=0xFFFFF;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <main+0x9c>)
 80008ca:	4a11      	ldr	r2, [pc, #68]	; (8000910 <main+0xa0>)
 80008cc:	601a      	str	r2, [r3, #0]
  DAC_code_direction=0;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <main+0xa4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]

  DDS_target_frequecny=(DAC_fullrange_voltage/DAC_target_speed)/0xFFFFF;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <main+0xa8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <main+0x94>)
 80008da:	6812      	ldr	r2, [r2, #0]
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fd00 	bl	80002e4 <__aeabi_fdiv>
 80008e4:	4603      	mov	r3, r0
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <main+0xac>)
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fcfb 	bl	80002e4 <__aeabi_fdiv>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <main+0xb0>)
 80008f4:	601a      	str	r2, [r3, #0]

  DDS_Init();
 80008f6:	f000 f861 	bl	80009bc <DDS_Init>
  DAC_SendInit();
 80008fa:	f000 f8df 	bl	8000abc <DAC_SendInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <main+0x8e>
 8000900:	200003d8 	.word	0x200003d8
 8000904:	200003ec 	.word	0x200003ec
 8000908:	3c23d70a 	.word	0x3c23d70a
 800090c:	200001a0 	.word	0x200001a0
 8000910:	000fffff 	.word	0x000fffff
 8000914:	200003f0 	.word	0x200003f0
 8000918:	20000004 	.word	0x20000004
 800091c:	497ffff0 	.word	0x497ffff0
 8000920:	200003d4 	.word	0x200003d4

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b092      	sub	sp, #72	; 0x48
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2234      	movs	r2, #52	; 0x34
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f007 fcaa 	bl	800828c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <SystemClock_Config+0x94>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <SystemClock_Config+0x94>)
 8000950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000954:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000956:	2301      	movs	r3, #1
 8000958:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000968:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800096c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800096e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000972:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fa9f 	bl	8002ebc <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000984:	f000 f9c6 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2303      	movs	r3, #3
 800098e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	2101      	movs	r1, #1
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 fdbb 	bl	800351c <HAL_RCC_ClockConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009ac:	f000 f9b2 	bl	8000d14 <Error_Handler>
  }
}
 80009b0:	bf00      	nop
 80009b2:	3748      	adds	r7, #72	; 0x48
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40007000 	.word	0x40007000

080009bc <DDS_Init>:

/* USER CODE BEGIN 4 */
void DDS_Init(void)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
  float DDS_FTW=((DDS_target_frequecny*256)/DDS_clock_frequecny)*0xFFFFFFFF;
 80009c2:	4b39      	ldr	r3, [pc, #228]	; (8000aa8 <DDS_Init+0xec>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fbd6 	bl	800017c <__aeabi_fmul>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b35      	ldr	r3, [pc, #212]	; (8000aac <DDS_Init+0xf0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	4610      	mov	r0, r2
 80009dc:	f7ff fc82 	bl	80002e4 <__aeabi_fdiv>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fbc8 	bl	800017c <__aeabi_fmul>
 80009ec:	4603      	mov	r3, r0
 80009ee:	607b      	str	r3, [r7, #4]

  DDS_tx_buffer[0]=0xF800; // Enter DAC to Sleep+Reset mode
 80009f0:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <DDS_Init+0xf4>)
 80009f2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80009f6:	801a      	strh	r2, [r3, #0]

  DDS_tx_buffer[1]=0x3300; // Write to Frequency 0 Reg, H MSB
 80009f8:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <DDS_Init+0xf4>)
 80009fa:	f44f 524c 	mov.w	r2, #13056	; 0x3300
 80009fe:	805a      	strh	r2, [r3, #2]
  DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8000a00:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <DDS_Init+0xf4>)
 8000a02:	885c      	ldrh	r4, [r3, #2]
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff fd09 	bl	800041c <__aeabi_f2uiz>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	0e1b      	lsrs	r3, r3, #24
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	4423      	add	r3, r4
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <DDS_Init+0xf4>)
 8000a16:	805a      	strh	r2, [r3, #2]

  DDS_tx_buffer[2]=0x2200; // Write to Frequency 0 Reg, L MSBs
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <DDS_Init+0xf4>)
 8000a1a:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8000a1e:	809a      	strh	r2, [r3, #4]
  DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <DDS_Init+0xf4>)
 8000a22:	889c      	ldrh	r4, [r3, #4]
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff fcf9 	bl	800041c <__aeabi_f2uiz>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	0c1b      	lsrs	r3, r3, #16
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	4423      	add	r3, r4
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <DDS_Init+0xf4>)
 8000a3a:	809a      	strh	r2, [r3, #4]

  DDS_tx_buffer[3]=0x3100; // Write to Frequency 0 Reg, H LSBs
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <DDS_Init+0xf4>)
 8000a3e:	f44f 5244 	mov.w	r2, #12544	; 0x3100
 8000a42:	80da      	strh	r2, [r3, #6]
  DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <DDS_Init+0xf4>)
 8000a46:	88dc      	ldrh	r4, [r3, #6]
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff fce7 	bl	800041c <__aeabi_f2uiz>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	4423      	add	r3, r4
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <DDS_Init+0xf4>)
 8000a5e:	80da      	strh	r2, [r3, #6]

  DDS_tx_buffer[4]=0x2000; // Write to Frequency 0 Reg, L LSBs
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <DDS_Init+0xf4>)
 8000a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a66:	811a      	strh	r2, [r3, #8]
  DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <DDS_Init+0xf4>)
 8000a6a:	891c      	ldrh	r4, [r3, #8]
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fcd5 	bl	800041c <__aeabi_f2uiz>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4423      	add	r3, r4
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <DDS_Init+0xf4>)
 8000a80:	811a      	strh	r2, [r3, #8]

  DDS_tx_buffer[5]=0xC000; // Exit DAC from Sleep+Reset mode
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <DDS_Init+0xf4>)
 8000a84:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000a88:	815a      	strh	r2, [r3, #10]

  HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 8000a8a:	2364      	movs	r3, #100	; 0x64
 8000a8c:	2206      	movs	r2, #6
 8000a8e:	4908      	ldr	r1, [pc, #32]	; (8000ab0 <DDS_Init+0xf4>)
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <DDS_Init+0xf8>)
 8000a92:	f003 f821 	bl	8003ad8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, COUNT_EN_Pin, GPIO_PIN_RESET); // Enable LDAC signal
 8000a96:	2200      	movs	r2, #0
 8000a98:	2108      	movs	r1, #8
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <DDS_Init+0xfc>)
 8000a9c:	f000 fdb2 	bl	8001604 <HAL_GPIO_WritePin>

}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	200003d4 	.word	0x200003d4
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	200003c8 	.word	0x200003c8
 8000ab4:	200003f4 	.word	0x200003f4
 8000ab8:	40020400 	.word	0x40020400

08000abc <DAC_SendInit>:

void DAC_SendInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	DAC_tx_buffer=0;
 8000ac0:	4b53      	ldr	r3, [pc, #332]	; (8000c10 <DAC_SendInit+0x154>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 8000ac6:	4b53      	ldr	r3, [pc, #332]	; (8000c14 <DAC_SendInit+0x158>)
 8000ac8:	7a1b      	ldrb	r3, [r3, #8]
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	f003 0210 	and.w	r2, r3, #16
 8000ad0:	4b4f      	ldr	r3, [pc, #316]	; (8000c10 <DAC_SendInit+0x154>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a4e      	ldr	r2, [pc, #312]	; (8000c10 <DAC_SendInit+0x154>)
 8000ad8:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x0F)<<6;
 8000ada:	4b4e      	ldr	r3, [pc, #312]	; (8000c14 <DAC_SendInit+0x158>)
 8000adc:	79db      	ldrb	r3, [r3, #7]
 8000ade:	019b      	lsls	r3, r3, #6
 8000ae0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <DAC_SendInit+0x154>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a49      	ldr	r2, [pc, #292]	; (8000c10 <DAC_SendInit+0x154>)
 8000aec:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 8000aee:	4b49      	ldr	r3, [pc, #292]	; (8000c14 <DAC_SendInit+0x158>)
 8000af0:	799b      	ldrb	r3, [r3, #6]
 8000af2:	029b      	lsls	r3, r3, #10
 8000af4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000af8:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <DAC_SendInit+0x154>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a44      	ldr	r2, [pc, #272]	; (8000c10 <DAC_SendInit+0x154>)
 8000b00:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 8000b02:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <DAC_SendInit+0x158>)
 8000b04:	795b      	ldrb	r3, [r3, #5]
 8000b06:	02db      	lsls	r3, r3, #11
 8000b08:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8000b0c:	4b40      	ldr	r3, [pc, #256]	; (8000c10 <DAC_SendInit+0x154>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a3f      	ldr	r2, [pc, #252]	; (8000c10 <DAC_SendInit+0x154>)
 8000b14:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 8000b16:	4b3f      	ldr	r3, [pc, #252]	; (8000c14 <DAC_SendInit+0x158>)
 8000b18:	791b      	ldrb	r3, [r3, #4]
 8000b1a:	031b      	lsls	r3, r3, #12
 8000b1c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8000b20:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <DAC_SendInit+0x154>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a3a      	ldr	r2, [pc, #232]	; (8000c10 <DAC_SendInit+0x154>)
 8000b28:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 8000b2a:	4b3a      	ldr	r3, [pc, #232]	; (8000c14 <DAC_SendInit+0x158>)
 8000b2c:	78db      	ldrb	r3, [r3, #3]
 8000b2e:	035b      	lsls	r3, r3, #13
 8000b30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8000b34:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <DAC_SendInit+0x154>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <DAC_SendInit+0x154>)
 8000b3c:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 8000b3e:	4b35      	ldr	r3, [pc, #212]	; (8000c14 <DAC_SendInit+0x158>)
 8000b40:	789b      	ldrb	r3, [r3, #2]
 8000b42:	039b      	lsls	r3, r3, #14
 8000b44:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8000b48:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <DAC_SendInit+0x154>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a30      	ldr	r2, [pc, #192]	; (8000c10 <DAC_SendInit+0x154>)
 8000b50:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8000b52:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <DAC_SendInit+0x158>)
 8000b54:	785b      	ldrb	r3, [r3, #1]
 8000b56:	049b      	lsls	r3, r3, #18
 8000b58:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <DAC_SendInit+0x154>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a2b      	ldr	r2, [pc, #172]	; (8000c10 <DAC_SendInit+0x154>)
 8000b64:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8000b66:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <DAC_SendInit+0x158>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	05db      	lsls	r3, r3, #23
 8000b6c:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8000b70:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <DAC_SendInit+0x154>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <DAC_SendInit+0x154>)
 8000b78:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=0x02<<24; // CONFIG1
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <DAC_SendInit+0x154>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000b82:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <DAC_SendInit+0x154>)
 8000b84:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=0x00<<31; // Write
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <DAC_SendInit+0x154>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <DAC_SendInit+0x154>)
 8000b8c:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <DAC_SendInit+0x154>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	0e1b      	lsrs	r3, r3, #24
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <DAC_SendInit+0x15c>)
 8000b98:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <DAC_SendInit+0x154>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	0c1b      	lsrs	r3, r3, #16
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <DAC_SendInit+0x15c>)
 8000ba4:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <DAC_SendInit+0x154>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	0a1b      	lsrs	r3, r3, #8
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <DAC_SendInit+0x15c>)
 8000bb0:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <DAC_SendInit+0x154>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <DAC_SendInit+0x15c>)
 8000bba:	70da      	strb	r2, [r3, #3]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <DAC_SendInit+0x154>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0e1b      	lsrs	r3, r3, #24
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <DAC_SendInit+0x15c>)
 8000bc6:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <DAC_SendInit+0x154>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	0c1b      	lsrs	r3, r3, #16
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <DAC_SendInit+0x15c>)
 8000bd2:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <DAC_SendInit+0x154>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <DAC_SendInit+0x15c>)
 8000bde:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <DAC_SendInit+0x154>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <DAC_SendInit+0x15c>)
 8000be8:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2110      	movs	r1, #16
 8000bee:	480b      	ldr	r0, [pc, #44]	; (8000c1c <DAC_SendInit+0x160>)
 8000bf0:	f000 fd08 	bl	8001604 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,4,100);
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <DAC_SendInit+0x15c>)
 8000bfa:	4809      	ldr	r0, [pc, #36]	; (8000c20 <DAC_SendInit+0x164>)
 8000bfc:	f002 ff6c 	bl	8003ad8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, DAC_SYNC_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2110      	movs	r1, #16
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <DAC_SendInit+0x160>)
 8000c06:	f000 fcfd 	bl	8001604 <HAL_GPIO_WritePin>

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200003e8 	.word	0x200003e8
 8000c14:	200003d8 	.word	0x200003d8
 8000c18:	200003e4 	.word	0x200003e4
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	2000044c 	.word	0x2000044c

08000c24 <DAC_Write>:

void DAC_Write(uint32_t value)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2110      	movs	r1, #16
 8000c30:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <DAC_Write+0x7c>)
 8000c32:	f000 fce7 	bl	8001604 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,4,100);
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	2204      	movs	r2, #4
 8000c3a:	491a      	ldr	r1, [pc, #104]	; (8000ca4 <DAC_Write+0x80>)
 8000c3c:	481a      	ldr	r0, [pc, #104]	; (8000ca8 <DAC_Write+0x84>)
 8000c3e:	f002 ff4b 	bl	8003ad8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, DAC_SYNC_Pin, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2110      	movs	r1, #16
 8000c46:	4816      	ldr	r0, [pc, #88]	; (8000ca0 <DAC_Write+0x7c>)
 8000c48:	f000 fcdc 	bl	8001604 <HAL_GPIO_WritePin>

	// Speedup hint: Calculate data AFTER send.
	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <DAC_Write+0x88>)
 8000c4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c52:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	011b      	lsls	r3, r3, #4
 8000c58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c5c:	f023 030f 	bic.w	r3, r3, #15
 8000c60:	4a12      	ldr	r2, [pc, #72]	; (8000cac <DAC_Write+0x88>)
 8000c62:	6812      	ldr	r2, [r2, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <DAC_Write+0x88>)
 8000c68:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <DAC_Write+0x88>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	0e1b      	lsrs	r3, r3, #24
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <DAC_Write+0x80>)
 8000c74:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <DAC_Write+0x88>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <DAC_Write+0x80>)
 8000c80:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <DAC_Write+0x88>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	0a1b      	lsrs	r3, r3, #8
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <DAC_Write+0x80>)
 8000c8c:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <DAC_Write+0x88>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <DAC_Write+0x80>)
 8000c96:	70da      	strb	r2, [r3, #3]
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	200003e4 	.word	0x200003e4
 8000ca8:	2000044c 	.word	0x2000044c
 8000cac:	200003e8 	.word	0x200003e8

08000cb0 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_2)
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d11e      	bne.n	8000cfe <HAL_GPIO_EXTI_Callback+0x4e>
  {
	  if(DAC_code_direction)
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d010      	beq.n	8000cea <HAL_GPIO_EXTI_Callback+0x3a>
	  {
		  if(DAC_code<=0xFFFFF)
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000cd0:	d205      	bcs.n	8000cde <HAL_GPIO_EXTI_Callback+0x2e>
		  {
			  DAC_code++;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	e00a      	b.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x44>
		  } else  HAL_GPIO_WritePin(GPIOB, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ce4:	f000 fc8e 	bl	8001604 <HAL_GPIO_WritePin>
 8000ce8:	e004      	b.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x44>
	  }
	  else
	  {
		  if(DAC_code>=0x0)
		  {
			  DAC_code--;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000cf2:	6013      	str	r3, [r2, #0]
		  } else  HAL_GPIO_WritePin(GPIOB, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
	  }
	  DAC_Write(DAC_code);
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff93 	bl	8000c24 <DAC_Write>
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200003f0 	.word	0x200003f0
 8000d0c:	200001a0 	.word	0x200001a0
 8000d10:	40020400 	.word	0x40020400

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <MX_SPI1_Init+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d6c:	220a      	movs	r2, #10
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d72:	f002 fe35 	bl	80039e0 <HAL_SPI_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d7c:	f7ff ffca 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000044c 	.word	0x2000044c
 8000d88:	40013000 	.word	0x40013000

08000d8c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000d92:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <MX_SPI2_Init+0x6c>)
 8000d94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000daa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000dba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dbe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000dc2:	2230      	movs	r2, #48	; 0x30
 8000dc4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000dda:	220a      	movs	r2, #10
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000de0:	f002 fdfe 	bl	80039e0 <HAL_SPI_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000dea:	f7ff ff93 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200003f4 	.word	0x200003f4
 8000df8:	40003800 	.word	0x40003800

08000dfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a2e      	ldr	r2, [pc, #184]	; (8000ed4 <HAL_SPI_MspInit+0xd8>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d128      	bne.n	8000e70 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	4a2d      	ldr	r2, [pc, #180]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e28:	6213      	str	r3, [r2, #32]
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a27      	ldr	r2, [pc, #156]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e4e:	23e0      	movs	r3, #224	; 0xe0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	481c      	ldr	r0, [pc, #112]	; (8000edc <HAL_SPI_MspInit+0xe0>)
 8000e6a:	f000 fa4b 	bl	8001304 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e6e:	e02d      	b.n	8000ecc <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <HAL_SPI_MspInit+0xe4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d128      	bne.n	8000ecc <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6253      	str	r3, [r2, #36]	; 0x24
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_SPI_MspInit+0xdc>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000eaa:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ebc:	2305      	movs	r3, #5
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <HAL_SPI_MspInit+0xe8>)
 8000ec8:	f000 fa1c 	bl	8001304 <HAL_GPIO_Init>
}
 8000ecc:	bf00      	nop
 8000ece:	3730      	adds	r7, #48	; 0x30
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40013000 	.word	0x40013000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40003800 	.word	0x40003800
 8000ee4:	40020400 	.word	0x40020400

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_MspInit+0x58>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <HAL_MspInit+0x58>)
 8000ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ef8:	6253      	str	r3, [r2, #36]	; 0x24
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_MspInit+0x58>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_MspInit+0x58>)
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_MspInit+0x58>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6213      	str	r3, [r2, #32]
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_MspInit+0x58>)
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_MspInit+0x58>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_MspInit+0x58>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	6253      	str	r3, [r2, #36]	; 0x24
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_MspInit+0x58>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40023800 	.word	0x40023800

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f891 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CPU_LDAC_Pin);
 8000f96:	2004      	movs	r0, #4
 8000f98:	f000 fb4c 	bl	8001634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <USB_LP_IRQHandler+0x10>)
 8000fa6:	f000 fc61 	bl	800186c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20001114 	.word	0x20001114

08000fb4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	; (8001004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fe6:	f7ff ffe5 	bl	8000fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f007 f92b 	bl	8008244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff fc3f 	bl	8000870 <main>
  bx lr
 8000ff2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000ffc:	08008318 	.word	0x08008318
  ldr r2, =_sbss
 8001000:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001004:	20001400 	.word	0x20001400

08001008 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_IRQHandler>

0800100a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f933 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101a:	200f      	movs	r0, #15
 800101c:	f000 f80e 	bl	800103c <HAL_InitTick>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	e001      	b.n	8001030 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800102c:	f7ff ff5c 	bl	8000ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001030:	79fb      	ldrb	r3, [r7, #7]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_InitTick+0x68>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d022      	beq.n	8001096 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_InitTick+0x6c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_InitTick+0x68>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800105c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001060:	fbb2 f3f3 	udiv	r3, r2, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f940 	bl	80012ea <HAL_SYSTICK_Config>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10f      	bne.n	8001090 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	d809      	bhi.n	800108a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001076:	2200      	movs	r2, #0
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	f04f 30ff 	mov.w	r0, #4294967295
 800107e:	f000 f90a 	bl	8001296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_InitTick+0x70>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e007      	b.n	800109a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e004      	b.n	800109a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e001      	b.n	800109a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000010 	.word	0x20000010
 80010a8:	20000008 	.word	0x20000008
 80010ac:	2000000c 	.word	0x2000000c

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_IncTick+0x1c>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_IncTick+0x20>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	4a03      	ldr	r2, [pc, #12]	; (80010cc <HAL_IncTick+0x1c>)
 80010c0:	6013      	str	r3, [r2, #0]
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	200004a4 	.word	0x200004a4
 80010d0:	20000010 	.word	0x20000010

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <HAL_GetTick+0x10>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	200004a4 	.word	0x200004a4

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4906      	ldr	r1, [pc, #24]	; (8001180 <__NVIC_EnableIRQ+0x34>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff90 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff2d 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff42 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff90 	bl	80011d8 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5f 	bl	8001184 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff35 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffa2 	bl	800123c <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800131a:	e154      	b.n	80015c6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8146 	beq.w	80015c0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d005      	beq.n	800134c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001348:	2b02      	cmp	r3, #2
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f003 0201 	and.w	r2, r3, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d017      	beq.n	80013ea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d123      	bne.n	800143e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001402:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	6939      	ldr	r1, [r7, #16]
 800143a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0203 	and.w	r2, r3, #3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80a0 	beq.w	80015c0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	4b58      	ldr	r3, [pc, #352]	; (80015e4 <HAL_GPIO_Init+0x2e0>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <HAL_GPIO_Init+0x2e0>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6213      	str	r3, [r2, #32]
 800148c:	4b55      	ldr	r3, [pc, #340]	; (80015e4 <HAL_GPIO_Init+0x2e0>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001498:	4a53      	ldr	r2, [pc, #332]	; (80015e8 <HAL_GPIO_Init+0x2e4>)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a4b      	ldr	r2, [pc, #300]	; (80015ec <HAL_GPIO_Init+0x2e8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d019      	beq.n	80014f8 <HAL_GPIO_Init+0x1f4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a4a      	ldr	r2, [pc, #296]	; (80015f0 <HAL_GPIO_Init+0x2ec>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d013      	beq.n	80014f4 <HAL_GPIO_Init+0x1f0>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a49      	ldr	r2, [pc, #292]	; (80015f4 <HAL_GPIO_Init+0x2f0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d00d      	beq.n	80014f0 <HAL_GPIO_Init+0x1ec>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a48      	ldr	r2, [pc, #288]	; (80015f8 <HAL_GPIO_Init+0x2f4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d007      	beq.n	80014ec <HAL_GPIO_Init+0x1e8>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a47      	ldr	r2, [pc, #284]	; (80015fc <HAL_GPIO_Init+0x2f8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d101      	bne.n	80014e8 <HAL_GPIO_Init+0x1e4>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e008      	b.n	80014fa <HAL_GPIO_Init+0x1f6>
 80014e8:	2305      	movs	r3, #5
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x1f6>
 80014ec:	2303      	movs	r3, #3
 80014ee:	e004      	b.n	80014fa <HAL_GPIO_Init+0x1f6>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x1f6>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_GPIO_Init+0x1f6>
 80014f8:	2300      	movs	r3, #0
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	f002 0203 	and.w	r2, r2, #3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4093      	lsls	r3, r2
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800150a:	4937      	ldr	r1, [pc, #220]	; (80015e8 <HAL_GPIO_Init+0x2e4>)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800153c:	4a30      	ldr	r2, [pc, #192]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001566:	4a26      	ldr	r2, [pc, #152]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ba:	4a11      	ldr	r2, [pc, #68]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f aea3 	bne.w	800131c <HAL_GPIO_Init+0x18>
  }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40010000 	.word	0x40010000
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40020c00 	.word	0x40020c00
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010400 	.word	0x40010400

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fb2c 	bl	8000cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	b08b      	sub	sp, #44	; 0x2c
 8001668:	af06      	add	r7, sp, #24
 800166a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e0d0      	b.n	8001818 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d106      	bne.n	8001690 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f006 fb3a 	bl	8007d04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2203      	movs	r2, #3
 8001694:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fc37 	bl	8003f10 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	e04c      	b.n	8001742 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	3301      	adds	r3, #1
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	440b      	add	r3, r1
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	b298      	uxth	r0, r3
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	440b      	add	r3, r1
 80016e4:	3336      	adds	r3, #54	; 0x36
 80016e6:	4602      	mov	r2, r0
 80016e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	3303      	adds	r3, #3
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	3338      	adds	r3, #56	; 0x38
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	333c      	adds	r3, #60	; 0x3c
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	3340      	adds	r3, #64	; 0x40
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	3301      	adds	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	d3ad      	bcc.n	80016a8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e044      	b.n	80017dc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	3301      	adds	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3b5      	bcc.n	8001752 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	687e      	ldr	r6, [r7, #4]
 80017ee:	466d      	mov	r5, sp
 80017f0:	f106 0410 	add.w	r4, r6, #16
 80017f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	602b      	str	r3, [r5, #0]
 80017fc:	1d33      	adds	r3, r6, #4
 80017fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f002 fb9f 	bl	8003f44 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001820 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_PCD_Start+0x16>
 8001832:	2302      	movs	r3, #2
 8001834:	e016      	b.n	8001864 <HAL_PCD_Start+0x44>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fb4e 	bl	8003ee4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001848:	2101      	movs	r1, #1
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f006 fa3c 	bl	8007cc8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f004 fcf2 	bl	800623e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f004 fcea 	bl	8006252 <USB_ReadInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001888:	d102      	bne.n	8001890 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 faf5 	bl	8001e7a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f004 fcdc 	bl	8006252 <USB_ReadInterrupts>
 800189a:	4603      	mov	r3, r0
 800189c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a4:	d112      	bne.n	80018cc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018b8:	b292      	uxth	r2, r2
 80018ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f006 fa9b 	bl	8007dfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80018c4:	2100      	movs	r1, #0
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f8c7 	bl	8001a5a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 fcbe 	bl	8006252 <USB_ReadInterrupts>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018e0:	d10b      	bne.n	80018fa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018f4:	b292      	uxth	r2, r2
 80018f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f004 fca7 	bl	8006252 <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800190e:	d10b      	bne.n	8001928 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001922:	b292      	uxth	r2, r2
 8001924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f004 fc90 	bl	8006252 <USB_ReadInterrupts>
 8001932:	4603      	mov	r3, r0
 8001934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800193c:	d126      	bne.n	800198c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001946:	b29a      	uxth	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0204 	bic.w	r2, r2, #4
 8001950:	b292      	uxth	r2, r2
 8001952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0208 	bic.w	r2, r2, #8
 8001968:	b292      	uxth	r2, r2
 800196a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f006 fa7c 	bl	8007e6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800197c:	b29a      	uxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001986:	b292      	uxth	r2, r2
 8001988:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f004 fc5e 	bl	8006252 <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800199c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019a0:	d126      	bne.n	80019f0 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0208 	orr.w	r2, r2, #8
 80019b4:	b292      	uxth	r2, r2
 80019b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019cc:	b292      	uxth	r2, r2
 80019ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019da:	b29a      	uxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0204 	orr.w	r2, r2, #4
 80019e4:	b292      	uxth	r2, r2
 80019e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f006 fa24 	bl	8007e38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 fc2c 	bl	8006252 <USB_ReadInterrupts>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a04:	d10e      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f006 f9dd 	bl	8007dde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 fc12 	bl	8006252 <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a38:	d10b      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a4c:	b292      	uxth	r2, r2
 8001a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_PCD_SetAddress+0x1a>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e013      	b.n	8001a9c <HAL_PCD_SetAddress+0x42>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	78fa      	ldrb	r2, [r7, #3]
 8001a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 fbc3 	bl	8006218 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	70fb      	strb	r3, [r7, #3]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	803b      	strh	r3, [r7, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	da0e      	bge.n	8001ae8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	705a      	strb	r2, [r3, #1]
 8001ae6:	e00e      	b.n	8001b06 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	f003 0207 	and.w	r2, r3, #7
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b12:	883a      	ldrh	r2, [r7, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	78ba      	ldrb	r2, [r7, #2]
 8001b1c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	785b      	ldrb	r3, [r3, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b30:	78bb      	ldrb	r3, [r7, #2]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d102      	bne.n	8001b3c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_PCD_EP_Open+0xa6>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e00e      	b.n	8001b68 <HAL_PCD_EP_Open+0xc4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68f9      	ldr	r1, [r7, #12]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fa13 	bl	8003f84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b66:	7afb      	ldrb	r3, [r7, #11]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	da0e      	bge.n	8001ba2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	705a      	strb	r2, [r3, #1]
 8001ba0:	e00e      	b.n	8001bc0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 0207 	and.w	r2, r3, #7
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_PCD_EP_Close+0x6a>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e00e      	b.n	8001bf8 <HAL_PCD_EP_Close+0x88>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68f9      	ldr	r1, [r7, #12]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 fd35 	bl	8004658 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c10:	7afb      	ldrb	r3, [r7, #11]
 8001c12:	f003 0207 	and.w	r2, r3, #7
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c40:	7afb      	ldrb	r3, [r7, #11]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6979      	ldr	r1, [r7, #20]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fee7 	bl	8004a30 <USB_EPStartXfer>
 8001c62:	e005      	b.n	8001c70 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6979      	ldr	r1, [r7, #20]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fee0 	bl	8004a30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	f003 0207 	and.w	r2, r3, #7
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c9c:	681b      	ldr	r3, [r3, #0]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d00:	7afb      	ldrb	r3, [r7, #11]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6979      	ldr	r1, [r7, #20]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fe8d 	bl	8004a30 <USB_EPStartXfer>
 8001d16:	e005      	b.n	8001d24 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6979      	ldr	r1, [r7, #20]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 fe86 	bl	8004a30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f003 0207 	and.w	r2, r3, #7
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d901      	bls.n	8001d4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e03e      	b.n	8001dca <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	da0e      	bge.n	8001d72 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	705a      	strb	r2, [r3, #1]
 8001d70:	e00c      	b.n	8001d8c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_PCD_EP_SetStall+0x7e>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e00e      	b.n	8001dca <HAL_PCD_EP_SetStall+0x9c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 f92f 	bl	800601e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	f003 020f 	and.w	r2, r3, #15
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d901      	bls.n	8001df0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e040      	b.n	8001e72 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	da0e      	bge.n	8001e16 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	705a      	strb	r2, [r3, #1]
 8001e14:	e00e      	b.n	8001e34 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	f003 0207 	and.w	r2, r3, #7
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_PCD_EP_ClrStall+0x82>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e00e      	b.n	8001e72 <HAL_PCD_EP_ClrStall+0xa0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68f9      	ldr	r1, [r7, #12]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 f92b 	bl	80060be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b08e      	sub	sp, #56	; 0x38
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e82:	e2ec      	b.n	800245e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001e9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 8161 	bne.w	8002166 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ea4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d152      	bne.n	8001f54 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebe:	81fb      	strh	r3, [r7, #14]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3328      	adds	r3, #40	; 0x28
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	3302      	adds	r3, #2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	441a      	add	r2, r3
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f12:	2100      	movs	r1, #0
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f005 ff48 	bl	8007daa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 829b 	beq.w	800245e <PCD_EP_ISR_Handler+0x5e4>
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f040 8296 	bne.w	800245e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b292      	uxth	r2, r2
 8001f46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f52:	e284      	b.n	800245e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d034      	beq.n	8001fd8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	3306      	adds	r3, #6
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f004 f9a4 	bl	80062fa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	823b      	strh	r3, [r7, #16]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	8a3a      	ldrh	r2, [r7, #16]
 8001fc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fcc:	b292      	uxth	r2, r2
 8001fce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f005 febd 	bl	8007d50 <HAL_PCD_SetupStageCallback>
 8001fd6:	e242      	b.n	800245e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fd8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f280 823e 	bge.w	800245e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fee:	4013      	ands	r3, r2
 8001ff0:	83bb      	strh	r3, [r7, #28]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	8bba      	ldrh	r2, [r7, #28]
 8001ff8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ffc:	b292      	uxth	r2, r2
 8001ffe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002008:	b29b      	uxth	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	3306      	adds	r3, #6
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d019      	beq.n	8002068 <PCD_EP_ISR_Handler+0x1ee>
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d015      	beq.n	8002068 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	6959      	ldr	r1, [r3, #20]
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800204c:	b29b      	uxth	r3, r3
 800204e:	f004 f954 	bl	80062fa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	441a      	add	r2, r3
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002060:	2100      	movs	r1, #0
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f005 fe86 	bl	8007d74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002074:	2b00      	cmp	r3, #0
 8002076:	f040 81f2 	bne.w	800245e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002088:	b29b      	uxth	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	4413      	add	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d112      	bne.n	80020c8 <PCD_EP_ISR_Handler+0x24e>
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	801a      	strh	r2, [r3, #0]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	801a      	strh	r2, [r3, #0]
 80020c6:	e02f      	b.n	8002128 <PCD_EP_ISR_Handler+0x2ae>
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b3e      	cmp	r3, #62	; 0x3e
 80020ce:	d813      	bhi.n	80020f8 <PCD_EP_ISR_Handler+0x27e>
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <PCD_EP_ISR_Handler+0x270>
 80020e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e6:	3301      	adds	r3, #1
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
 80020ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	029b      	lsls	r3, r3, #10
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	801a      	strh	r2, [r3, #0]
 80020f6:	e017      	b.n	8002128 <PCD_EP_ISR_Handler+0x2ae>
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	095b      	lsrs	r3, r3, #5
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <PCD_EP_ISR_Handler+0x298>
 800210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210e:	3b01      	subs	r3, #1
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	b29b      	uxth	r3, r3
 8002116:	029b      	lsls	r3, r3, #10
 8002118:	b29b      	uxth	r3, r3
 800211a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800211e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002138:	827b      	strh	r3, [r7, #18]
 800213a:	8a7b      	ldrh	r3, [r7, #18]
 800213c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002140:	827b      	strh	r3, [r7, #18]
 8002142:	8a7b      	ldrh	r3, [r7, #18]
 8002144:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002148:	827b      	strh	r3, [r7, #18]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	8a7b      	ldrh	r3, [r7, #18]
 8002150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	b29b      	uxth	r3, r3
 8002162:	8013      	strh	r3, [r2, #0]
 8002164:	e17b      	b.n	800245e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002178:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800217c:	2b00      	cmp	r3, #0
 800217e:	f280 80ea 	bge.w	8002356 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	b29a      	uxth	r2, r3
 8002194:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002198:	4013      	ands	r3, r2
 800219a:	853b      	strh	r3, [r7, #40]	; 0x28
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021b0:	b292      	uxth	r2, r2
 80021b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021b4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	7b1b      	ldrb	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d122      	bne.n	8002218 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	3306      	adds	r3, #6
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80021fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8087 	beq.w	8002312 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	6959      	ldr	r1, [r3, #20]
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	88da      	ldrh	r2, [r3, #6]
 8002210:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002212:	f004 f872 	bl	80062fa <USB_ReadPMA>
 8002216:	e07c      	b.n	8002312 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	78db      	ldrb	r3, [r3, #3]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d108      	bne.n	8002232 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002220:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002222:	461a      	mov	r2, r3
 8002224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f927 	bl	800247a <HAL_PCD_EP_DB_Receive>
 800222c:	4603      	mov	r3, r0
 800222e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002230:	e06f      	b.n	8002312 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224c:	847b      	strh	r3, [r7, #34]	; 0x22
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	441a      	add	r2, r3
 800225c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800225e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800226e:	b29b      	uxth	r3, r3
 8002270:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d021      	beq.n	80022d0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	3302      	adds	r3, #2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d02a      	beq.n	8002312 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	6959      	ldr	r1, [r3, #20]
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	891a      	ldrh	r2, [r3, #8]
 80022c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022ca:	f004 f816 	bl	80062fa <USB_ReadPMA>
 80022ce:	e020      	b.n	8002312 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d8:	b29b      	uxth	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	3306      	adds	r3, #6
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	6959      	ldr	r1, [r3, #20]
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	895a      	ldrh	r2, [r3, #10]
 800230c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800230e:	f003 fff4 	bl	80062fa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002318:	441a      	add	r2, r3
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002324:	441a      	add	r2, r3
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d004      	beq.n	800233c <PCD_EP_ISR_Handler+0x4c2>
 8002332:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	429a      	cmp	r2, r3
 800233a:	d206      	bcs.n	800234a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f005 fd16 	bl	8007d74 <HAL_PCD_DataOutStageCallback>
 8002348:	e005      	b.n	8002356 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002350:	4618      	mov	r0, r3
 8002352:	f002 fb6d 	bl	8004a30 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002356:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d07e      	beq.n	800245e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002360:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800238a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238e:	843b      	strh	r3, [r7, #32]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	8c3b      	ldrh	r3, [r7, #32]
 80023a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	78db      	ldrb	r3, [r3, #3]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d00c      	beq.n	80023ce <PCD_EP_ISR_Handler+0x554>
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	78db      	ldrb	r3, [r3, #3]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d146      	bne.n	8002452 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d141      	bne.n	8002452 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	3302      	adds	r3, #2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	8bfb      	ldrh	r3, [r7, #30]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d906      	bls.n	8002410 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	8bfb      	ldrh	r3, [r7, #30]
 8002408:	1ad2      	subs	r2, r2, r3
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	619a      	str	r2, [r3, #24]
 800240e:	e002      	b.n	8002416 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f005 fcc0 	bl	8007daa <HAL_PCD_DataInStageCallback>
 800242a:	e018      	b.n	800245e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	8bfb      	ldrh	r3, [r7, #30]
 8002432:	441a      	add	r2, r3
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	8bfb      	ldrh	r3, [r7, #30]
 800243e:	441a      	add	r2, r3
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800244a:	4618      	mov	r0, r3
 800244c:	f002 faf0 	bl	8004a30 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002450:	e005      	b.n	800245e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002452:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002454:	461a      	mov	r2, r3
 8002456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f91b 	bl	8002694 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002466:	b29b      	uxth	r3, r3
 8002468:	b21b      	sxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	f6ff ad0a 	blt.w	8001e84 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3738      	adds	r7, #56	; 0x38
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b088      	sub	sp, #32
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	4613      	mov	r3, r2
 8002486:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d07e      	beq.n	8002590 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	3302      	adds	r3, #2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	699a      	ldr	r2, [r3, #24]
 80024c0:	8b7b      	ldrh	r3, [r7, #26]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d306      	bcc.n	80024d4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	8b7b      	ldrh	r3, [r7, #26]
 80024cc:	1ad2      	subs	r2, r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	619a      	str	r2, [r3, #24]
 80024d2:	e002      	b.n	80024da <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d123      	bne.n	800252a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fc:	833b      	strh	r3, [r7, #24]
 80024fe:	8b3b      	ldrh	r3, [r7, #24]
 8002500:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002504:	833b      	strh	r3, [r7, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	441a      	add	r2, r3
 8002514:	8b3b      	ldrh	r3, [r7, #24]
 8002516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800251a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800251e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002526:	b29b      	uxth	r3, r3
 8002528:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01f      	beq.n	8002574 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	82fb      	strh	r3, [r7, #22]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	441a      	add	r2, r3
 800255e:	8afb      	ldrh	r3, [r7, #22]
 8002560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002570:	b29b      	uxth	r3, r3
 8002572:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002574:	8b7b      	ldrh	r3, [r7, #26]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8087 	beq.w	800268a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6959      	ldr	r1, [r3, #20]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	891a      	ldrh	r2, [r3, #8]
 8002588:	8b7b      	ldrh	r3, [r7, #26]
 800258a:	f003 feb6 	bl	80062fa <USB_ReadPMA>
 800258e:	e07c      	b.n	800268a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002598:	b29b      	uxth	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	3306      	adds	r3, #6
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	8b7b      	ldrh	r3, [r7, #26]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d306      	bcc.n	80025d2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	8b7b      	ldrh	r3, [r7, #26]
 80025ca:	1ad2      	subs	r2, r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	619a      	str	r2, [r3, #24]
 80025d0:	e002      	b.n	80025d8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d123      	bne.n	8002628 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	83fb      	strh	r3, [r7, #30]
 80025fc:	8bfb      	ldrh	r3, [r7, #30]
 80025fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002602:	83fb      	strh	r3, [r7, #30]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	8bfb      	ldrh	r3, [r7, #30]
 8002614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800261c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	b29b      	uxth	r3, r3
 8002626:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11f      	bne.n	8002672 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	83bb      	strh	r3, [r7, #28]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	441a      	add	r2, r3
 800265c:	8bbb      	ldrh	r3, [r7, #28]
 800265e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800266e:	b29b      	uxth	r3, r3
 8002670:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002672:	8b7b      	ldrh	r3, [r7, #26]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	6959      	ldr	r1, [r3, #20]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	895a      	ldrh	r2, [r3, #10]
 8002684:	8b7b      	ldrh	r3, [r7, #26]
 8002686:	f003 fe38 	bl	80062fa <USB_ReadPMA>
    }
  }

  return count;
 800268a:	8b7b      	ldrh	r3, [r7, #26]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0a2      	sub	sp, #136	; 0x88
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 81c7 	beq.w	8002a3c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	3302      	adds	r3, #2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d907      	bls.n	80026f6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	619a      	str	r2, [r3, #24]
 80026f4:	e002      	b.n	80026fc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	f040 80b9 	bne.w	8002878 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d126      	bne.n	800275c <HAL_PCD_EP_DB_Transmit+0xc8>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271c:	b29b      	uxth	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	4413      	add	r3, r2
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	011a      	lsls	r2, r3, #4
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	4413      	add	r3, r2
 8002730:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002740:	b29a      	uxth	r2, r3
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	801a      	strh	r2, [r3, #0]
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002754:	b29a      	uxth	r2, r3
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	e01a      	b.n	8002792 <HAL_PCD_EP_DB_Transmit+0xfe>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	785b      	ldrb	r3, [r3, #1]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d116      	bne.n	8002792 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	633b      	str	r3, [r7, #48]	; 0x30
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002772:	b29b      	uxth	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	4413      	add	r3, r2
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	011a      	lsls	r2, r3, #4
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	4413      	add	r3, r2
 8002786:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	2200      	movs	r2, #0
 8002790:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	623b      	str	r3, [r7, #32]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d126      	bne.n	80027ee <HAL_PCD_EP_DB_Transmit+0x15a>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	4413      	add	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	011a      	lsls	r2, r3, #4
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4413      	add	r3, r2
 80027c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	801a      	strh	r2, [r3, #0]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	e017      	b.n	800281e <HAL_PCD_EP_DB_Transmit+0x18a>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d113      	bne.n	800281e <HAL_PCD_EP_DB_Transmit+0x18a>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	4413      	add	r3, r2
 8002806:	623b      	str	r3, [r7, #32]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	011a      	lsls	r2, r3, #4
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	4413      	add	r3, r2
 8002812:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2200      	movs	r2, #0
 800281c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	4619      	mov	r1, r3
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f005 fac0 	bl	8007daa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 82d4 	beq.w	8002dde <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	827b      	strh	r3, [r7, #18]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	441a      	add	r2, r3
 8002860:	8a7b      	ldrh	r3, [r7, #18]
 8002862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800286a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800286e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002872:	b29b      	uxth	r3, r3
 8002874:	8013      	strh	r3, [r2, #0]
 8002876:	e2b2      	b.n	8002dde <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d021      	beq.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	441a      	add	r2, r3
 80028ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80028b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f040 8286 	bne.w	8002dde <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028da:	441a      	add	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	69da      	ldr	r2, [r3, #28]
 80028e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028e8:	441a      	add	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	6a1a      	ldr	r2, [r3, #32]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d309      	bcc.n	800290e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002906:	1ad2      	subs	r2, r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	621a      	str	r2, [r3, #32]
 800290c:	e015      	b.n	800293a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d107      	bne.n	8002926 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002916:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800291a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002924:	e009      	b.n	800293a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2200      	movs	r2, #0
 8002938:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	785b      	ldrb	r3, [r3, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d155      	bne.n	80029ee <HAL_PCD_EP_DB_Transmit+0x35a>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	63bb      	str	r3, [r7, #56]	; 0x38
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002950:	b29b      	uxth	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	4413      	add	r3, r2
 8002958:	63bb      	str	r3, [r7, #56]	; 0x38
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	011a      	lsls	r2, r3, #4
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	4413      	add	r3, r2
 8002964:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
 800296a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800296c:	2b00      	cmp	r3, #0
 800296e:	d112      	bne.n	8002996 <HAL_PCD_EP_DB_Transmit+0x302>
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800297a:	b29a      	uxth	r2, r3
 800297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297e:	801a      	strh	r2, [r3, #0]
 8002980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298e:	b29a      	uxth	r2, r3
 8002990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002992:	801a      	strh	r2, [r3, #0]
 8002994:	e047      	b.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x392>
 8002996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002998:	2b3e      	cmp	r3, #62	; 0x3e
 800299a:	d811      	bhi.n	80029c0 <HAL_PCD_EP_DB_Transmit+0x32c>
 800299c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80029a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x31e>
 80029ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ae:	3301      	adds	r3, #1
 80029b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	029b      	lsls	r3, r3, #10
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029bc:	801a      	strh	r2, [r3, #0]
 80029be:	e032      	b.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x392>
 80029c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80029c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x342>
 80029d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d2:	3b01      	subs	r3, #1
 80029d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80029d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d8:	b29b      	uxth	r3, r3
 80029da:	029b      	lsls	r3, r3, #10
 80029dc:	b29b      	uxth	r3, r3
 80029de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ea:	801a      	strh	r2, [r3, #0]
 80029ec:	e01b      	b.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x392>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	785b      	ldrb	r3, [r3, #1]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d117      	bne.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x392>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	643b      	str	r3, [r7, #64]	; 0x40
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a0a:	4413      	add	r3, r2
 8002a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	011a      	lsls	r2, r3, #4
 8002a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a16:	4413      	add	r3, r2
 8002a18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a24:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	6959      	ldr	r1, [r3, #20]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	891a      	ldrh	r2, [r3, #8]
 8002a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f003 fc1b 	bl	8006270 <USB_WritePMA>
 8002a3a:	e1d0      	b.n	8002dde <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3306      	adds	r3, #6
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	699a      	ldr	r2, [r3, #24]
 8002a6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d307      	bcc.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a7c:	1ad2      	subs	r2, r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	619a      	str	r2, [r3, #24]
 8002a82:	e002      	b.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2200      	movs	r2, #0
 8002a88:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 80c4 	bne.w	8002c1c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d126      	bne.n	8002aea <HAL_PCD_EP_DB_Transmit+0x456>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab0:	4413      	add	r3, r2
 8002ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	011a      	lsls	r2, r3, #4
 8002aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abc:	4413      	add	r3, r2
 8002abe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ac4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad2:	801a      	strh	r2, [r3, #0]
 8002ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae6:	801a      	strh	r2, [r3, #0]
 8002ae8:	e01a      	b.n	8002b20 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	785b      	ldrb	r3, [r3, #1]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d116      	bne.n	8002b20 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	677b      	str	r3, [r7, #116]	; 0x74
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b06:	4413      	add	r3, r2
 8002b08:	677b      	str	r3, [r7, #116]	; 0x74
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	011a      	lsls	r2, r3, #4
 8002b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b12:	4413      	add	r3, r2
 8002b14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b18:	673b      	str	r3, [r7, #112]	; 0x70
 8002b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	785b      	ldrb	r3, [r3, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d12f      	bne.n	8002b8e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b46:	4413      	add	r3, r2
 8002b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	011a      	lsls	r2, r3, #4
 8002b52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b56:	4413      	add	r3, r2
 8002b58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b72:	801a      	strh	r2, [r3, #0]
 8002b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b8a:	801a      	strh	r2, [r3, #0]
 8002b8c:	e017      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d113      	bne.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba4:	4413      	add	r3, r2
 8002ba6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	011a      	lsls	r2, r3, #4
 8002bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bba:	2200      	movs	r2, #0
 8002bbc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f005 f8f0 	bl	8007daa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 8104 	bne.w	8002dde <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	441a      	add	r2, r3
 8002c02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8013      	strh	r3, [r2, #0]
 8002c1a:	e0e0      	b.n	8002dde <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d121      	bne.n	8002c6a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c40:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	441a      	add	r2, r3
 8002c52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f040 80b4 	bne.w	8002dde <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c7e:	441a      	add	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d309      	bcc.n	8002cb2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	6a1a      	ldr	r2, [r3, #32]
 8002ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	621a      	str	r2, [r3, #32]
 8002cb0:	e015      	b.n	8002cde <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002cba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cbe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cc8:	e009      	b.n	8002cde <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	785b      	ldrb	r3, [r3, #1]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d155      	bne.n	8002d98 <HAL_PCD_EP_DB_Transmit+0x704>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d00:	4413      	add	r3, r2
 8002d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	011a      	lsls	r2, r3, #4
 8002d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d12:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d112      	bne.n	8002d40 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	e044      	b.n	8002dca <HAL_PCD_EP_DB_Transmit+0x736>
 8002d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d42:	2b3e      	cmp	r3, #62	; 0x3e
 8002d44:	d811      	bhi.n	8002d6a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d58:	3301      	adds	r3, #1
 8002d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	029b      	lsls	r3, r3, #10
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	e02f      	b.n	8002dca <HAL_PCD_EP_DB_Transmit+0x736>
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	029b      	lsls	r3, r3, #10
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	e018      	b.n	8002dca <HAL_PCD_EP_DB_Transmit+0x736>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	785b      	ldrb	r3, [r3, #1]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d114      	bne.n	8002dca <HAL_PCD_EP_DB_Transmit+0x736>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dae:	4413      	add	r3, r2
 8002db0:	667b      	str	r3, [r7, #100]	; 0x64
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	011a      	lsls	r2, r3, #4
 8002db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dba:	4413      	add	r3, r2
 8002dbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	6959      	ldr	r1, [r3, #20]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	895a      	ldrh	r2, [r3, #10]
 8002dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f003 fa49 	bl	8006270 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df8:	823b      	strh	r3, [r7, #16]
 8002dfa:	8a3b      	ldrh	r3, [r7, #16]
 8002dfc:	f083 0310 	eor.w	r3, r3, #16
 8002e00:	823b      	strh	r3, [r7, #16]
 8002e02:	8a3b      	ldrh	r3, [r7, #16]
 8002e04:	f083 0320 	eor.w	r3, r3, #32
 8002e08:	823b      	strh	r3, [r7, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	441a      	add	r2, r3
 8002e18:	8a3b      	ldrh	r3, [r7, #16]
 8002e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3788      	adds	r7, #136	; 0x88
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	817b      	strh	r3, [r7, #10]
 8002e46:	4613      	mov	r3, r2
 8002e48:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e56:	897b      	ldrh	r3, [r7, #10]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4413      	add	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	e009      	b.n	8002e82 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e6e:	897a      	ldrh	r2, [r7, #10]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e82:	893b      	ldrh	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	80da      	strh	r2, [r3, #6]
 8002e96:	e00b      	b.n	8002eb0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e31d      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ece:	4b94      	ldr	r3, [pc, #592]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed8:	4b91      	ldr	r3, [pc, #580]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d07b      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d006      	beq.n	8002f02 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d10f      	bne.n	8002f1a <HAL_RCC_OscConfig+0x5e>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d10b      	bne.n	8002f1a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f02:	4b87      	ldr	r3, [pc, #540]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d06a      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x128>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d166      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e2f7      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d106      	bne.n	8002f30 <HAL_RCC_OscConfig+0x74>
 8002f22:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7e      	ldr	r2, [pc, #504]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e02d      	b.n	8002f8c <HAL_RCC_OscConfig+0xd0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10c      	bne.n	8002f52 <HAL_RCC_OscConfig+0x96>
 8002f38:	4b79      	ldr	r3, [pc, #484]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a78      	ldr	r2, [pc, #480]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b76      	ldr	r3, [pc, #472]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a75      	ldr	r2, [pc, #468]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e01c      	b.n	8002f8c <HAL_RCC_OscConfig+0xd0>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0xb8>
 8002f5a:	4b71      	ldr	r3, [pc, #452]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a70      	ldr	r2, [pc, #448]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b6e      	ldr	r3, [pc, #440]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6d      	ldr	r2, [pc, #436]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0xd0>
 8002f74:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a69      	ldr	r2, [pc, #420]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b67      	ldr	r3, [pc, #412]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a66      	ldr	r2, [pc, #408]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe f89e 	bl	80010d4 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe f89a 	bl	80010d4 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e2ad      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fae:	4b5c      	ldr	r3, [pc, #368]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0xe0>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe f88a 	bl	80010d4 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe f886 	bl	80010d4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e299      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fd6:	4b52      	ldr	r3, [pc, #328]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x108>
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d05a      	beq.n	80030a8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d119      	bne.n	8003032 <HAL_RCC_OscConfig+0x176>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d116      	bne.n	8003032 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003004:	4b46      	ldr	r3, [pc, #280]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_OscConfig+0x160>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d001      	beq.n	800301c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e276      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b40      	ldr	r3, [pc, #256]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	493d      	ldr	r1, [pc, #244]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003030:	e03a      	b.n	80030a8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d020      	beq.n	800307c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303a:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <HAL_RCC_OscConfig+0x268>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe f848 	bl	80010d4 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003048:	f7fe f844 	bl	80010d4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e257      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800305a:	4b31      	ldr	r3, [pc, #196]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	492a      	ldr	r1, [pc, #168]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
 800307a:	e015      	b.n	80030a8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307c:	4b29      	ldr	r3, [pc, #164]	; (8003124 <HAL_RCC_OscConfig+0x268>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7fe f827 	bl	80010d4 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308a:	f7fe f823 	bl	80010d4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e236      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800309c:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f0      	bne.n	800308a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80b8 	beq.w	8003226 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d170      	bne.n	800319e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_OscConfig+0x218>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e21a      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1a      	ldr	r2, [r3, #32]
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d921      	bls.n	8003128 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fc19 	bl	8003920 <RCC_SetFlashLatencyFromMSIRange>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e208      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4906      	ldr	r1, [pc, #24]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	061b      	lsls	r3, r3, #24
 8003118:	4901      	ldr	r1, [pc, #4]	; (8003120 <HAL_RCC_OscConfig+0x264>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
 800311e:	e020      	b.n	8003162 <HAL_RCC_OscConfig+0x2a6>
 8003120:	40023800 	.word	0x40023800
 8003124:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003128:	4ba4      	ldr	r3, [pc, #656]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	49a1      	ldr	r1, [pc, #644]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800313a:	4ba0      	ldr	r3, [pc, #640]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	061b      	lsls	r3, r3, #24
 8003148:	499c      	ldr	r1, [pc, #624]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fbe4 	bl	8003920 <RCC_SetFlashLatencyFromMSIRange>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e1d3      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	0b5b      	lsrs	r3, r3, #13
 8003168:	3301      	adds	r3, #1
 800316a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003172:	4a92      	ldr	r2, [pc, #584]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 8003174:	6892      	ldr	r2, [r2, #8]
 8003176:	0912      	lsrs	r2, r2, #4
 8003178:	f002 020f 	and.w	r2, r2, #15
 800317c:	4990      	ldr	r1, [pc, #576]	; (80033c0 <HAL_RCC_OscConfig+0x504>)
 800317e:	5c8a      	ldrb	r2, [r1, r2]
 8003180:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003182:	4a90      	ldr	r2, [pc, #576]	; (80033c4 <HAL_RCC_OscConfig+0x508>)
 8003184:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003186:	4b90      	ldr	r3, [pc, #576]	; (80033c8 <HAL_RCC_OscConfig+0x50c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd ff56 	bl	800103c <HAL_InitTick>
 8003190:	4603      	mov	r3, r0
 8003192:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d045      	beq.n	8003226 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	e1b5      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d029      	beq.n	80031fa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031a6:	4b89      	ldr	r3, [pc, #548]	; (80033cc <HAL_RCC_OscConfig+0x510>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fd ff92 	bl	80010d4 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b4:	f7fd ff8e 	bl	80010d4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1a1      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031c6:	4b7d      	ldr	r3, [pc, #500]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031d2:	4b7a      	ldr	r3, [pc, #488]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4977      	ldr	r1, [pc, #476]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e4:	4b75      	ldr	r3, [pc, #468]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	061b      	lsls	r3, r3, #24
 80031f2:	4972      	ldr	r1, [pc, #456]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031fa:	4b74      	ldr	r3, [pc, #464]	; (80033cc <HAL_RCC_OscConfig+0x510>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd ff68 	bl	80010d4 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003208:	f7fd ff64 	bl	80010d4 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e177      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800321a:	4b68      	ldr	r3, [pc, #416]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d030      	beq.n	8003294 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d016      	beq.n	8003268 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323a:	4b65      	ldr	r3, [pc, #404]	; (80033d0 <HAL_RCC_OscConfig+0x514>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003240:	f7fd ff48 	bl	80010d4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003248:	f7fd ff44 	bl	80010d4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e157      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800325a:	4b58      	ldr	r3, [pc, #352]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x38c>
 8003266:	e015      	b.n	8003294 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003268:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <HAL_RCC_OscConfig+0x514>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7fd ff31 	bl	80010d4 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003276:	f7fd ff2d 	bl	80010d4 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e140      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003288:	4b4c      	ldr	r3, [pc, #304]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800328a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80b5 	beq.w	800340c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a6:	4b45      	ldr	r3, [pc, #276]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10d      	bne.n	80032ce <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	4b42      	ldr	r3, [pc, #264]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	4a41      	ldr	r2, [pc, #260]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 80032b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032bc:	6253      	str	r3, [r2, #36]	; 0x24
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ca:	2301      	movs	r3, #1
 80032cc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ce:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <HAL_RCC_OscConfig+0x518>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d118      	bne.n	800330c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032da:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <HAL_RCC_OscConfig+0x518>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a3d      	ldr	r2, [pc, #244]	; (80033d4 <HAL_RCC_OscConfig+0x518>)
 80032e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e6:	f7fd fef5 	bl	80010d4 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ee:	f7fd fef1 	bl	80010d4 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b64      	cmp	r3, #100	; 0x64
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e104      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	4b34      	ldr	r3, [pc, #208]	; (80033d4 <HAL_RCC_OscConfig+0x518>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d106      	bne.n	8003322 <HAL_RCC_OscConfig+0x466>
 8003314:	4b29      	ldr	r3, [pc, #164]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 8003316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003318:	4a28      	ldr	r2, [pc, #160]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331e:	6353      	str	r3, [r2, #52]	; 0x34
 8003320:	e02d      	b.n	800337e <HAL_RCC_OscConfig+0x4c2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0x488>
 800332a:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	4a23      	ldr	r2, [pc, #140]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 8003330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003334:	6353      	str	r3, [r2, #52]	; 0x34
 8003336:	4b21      	ldr	r3, [pc, #132]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800333c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003340:	6353      	str	r3, [r2, #52]	; 0x34
 8003342:	e01c      	b.n	800337e <HAL_RCC_OscConfig+0x4c2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b05      	cmp	r3, #5
 800334a:	d10c      	bne.n	8003366 <HAL_RCC_OscConfig+0x4aa>
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800334e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003350:	4a1a      	ldr	r2, [pc, #104]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 8003352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003356:	6353      	str	r3, [r2, #52]	; 0x34
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800335a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335c:	4a17      	ldr	r2, [pc, #92]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	6353      	str	r3, [r2, #52]	; 0x34
 8003364:	e00b      	b.n	800337e <HAL_RCC_OscConfig+0x4c2>
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	4a14      	ldr	r2, [pc, #80]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 800336c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003370:	6353      	str	r3, [r2, #52]	; 0x34
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	4a11      	ldr	r2, [pc, #68]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 8003378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800337c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d015      	beq.n	80033b2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003386:	f7fd fea5 	bl	80010d4 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fd fea1 	bl	80010d4 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e0b2      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCC_OscConfig+0x500>)
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0ee      	beq.n	800338e <HAL_RCC_OscConfig+0x4d2>
 80033b0:	e023      	b.n	80033fa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b2:	f7fd fe8f 	bl	80010d4 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033b8:	e019      	b.n	80033ee <HAL_RCC_OscConfig+0x532>
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	080082f8 	.word	0x080082f8
 80033c4:	20000008 	.word	0x20000008
 80033c8:	2000000c 	.word	0x2000000c
 80033cc:	42470020 	.word	0x42470020
 80033d0:	42470680 	.word	0x42470680
 80033d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fd fe7c 	bl	80010d4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e08d      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033ee:	4b49      	ldr	r3, [pc, #292]	; (8003514 <HAL_RCC_OscConfig+0x658>)
 80033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1ee      	bne.n	80033d8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033fa:	7ffb      	ldrb	r3, [r7, #31]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d105      	bne.n	800340c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003400:	4b44      	ldr	r3, [pc, #272]	; (8003514 <HAL_RCC_OscConfig+0x658>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	4a43      	ldr	r2, [pc, #268]	; (8003514 <HAL_RCC_OscConfig+0x658>)
 8003406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800340a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2b00      	cmp	r3, #0
 8003412:	d079      	beq.n	8003508 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d056      	beq.n	80034c8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	2b02      	cmp	r3, #2
 8003420:	d13b      	bne.n	800349a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <HAL_RCC_OscConfig+0x65c>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fd fe54 	bl	80010d4 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003430:	f7fd fe50 	bl	80010d4 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e063      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_OscConfig+0x658>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800344e:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_OscConfig+0x658>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	4319      	orrs	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	430b      	orrs	r3, r1
 8003466:	492b      	ldr	r1, [pc, #172]	; (8003514 <HAL_RCC_OscConfig+0x658>)
 8003468:	4313      	orrs	r3, r2
 800346a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800346c:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <HAL_RCC_OscConfig+0x65c>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7fd fe2f 	bl	80010d4 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347a:	f7fd fe2b 	bl	80010d4 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e03e      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800348c:	4b21      	ldr	r3, [pc, #132]	; (8003514 <HAL_RCC_OscConfig+0x658>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x5be>
 8003498:	e036      	b.n	8003508 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349a:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <HAL_RCC_OscConfig+0x65c>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7fd fe18 	bl	80010d4 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fd fe14 	bl	80010d4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e027      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ba:	4b16      	ldr	r3, [pc, #88]	; (8003514 <HAL_RCC_OscConfig+0x658>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x5ec>
 80034c6:	e01f      	b.n	8003508 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e01a      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <HAL_RCC_OscConfig+0x658>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d10d      	bne.n	8003504 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d106      	bne.n	8003504 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	42470060 	.word	0x42470060

0800351c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e11a      	b.n	8003766 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003530:	4b8f      	ldr	r3, [pc, #572]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d919      	bls.n	8003572 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_RCC_ClockConfig+0x34>
 8003544:	4b8a      	ldr	r3, [pc, #552]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a89      	ldr	r2, [pc, #548]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 800354a:	f043 0304 	orr.w	r3, r3, #4
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b87      	ldr	r3, [pc, #540]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 0201 	bic.w	r2, r3, #1
 8003558:	4985      	ldr	r1, [pc, #532]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003560:	4b83      	ldr	r3, [pc, #524]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e0f9      	b.n	8003766 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800357e:	4b7d      	ldr	r3, [pc, #500]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	497a      	ldr	r1, [pc, #488]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 800358c:	4313      	orrs	r3, r2
 800358e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 808e 	beq.w	80036ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035a6:	4b73      	ldr	r3, [pc, #460]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d121      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0d7      	b.n	8003766 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035be:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d115      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e0cb      	b.n	8003766 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035d6:	4b67      	ldr	r3, [pc, #412]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0bf      	b.n	8003766 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035e6:	4b63      	ldr	r3, [pc, #396]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0b7      	b.n	8003766 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b5f      	ldr	r3, [pc, #380]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	495c      	ldr	r1, [pc, #368]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003608:	f7fd fd64 	bl	80010d4 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d112      	bne.n	800363c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003616:	e00a      	b.n	800362e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003618:	f7fd fd5c 	bl	80010d4 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e09b      	b.n	8003766 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800362e:	4b51      	ldr	r3, [pc, #324]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b08      	cmp	r3, #8
 8003638:	d1ee      	bne.n	8003618 <HAL_RCC_ClockConfig+0xfc>
 800363a:	e03e      	b.n	80036ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d112      	bne.n	800366a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003644:	e00a      	b.n	800365c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003646:	f7fd fd45 	bl	80010d4 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e084      	b.n	8003766 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800365c:	4b45      	ldr	r3, [pc, #276]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	2b0c      	cmp	r3, #12
 8003666:	d1ee      	bne.n	8003646 <HAL_RCC_ClockConfig+0x12a>
 8003668:	e027      	b.n	80036ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d11d      	bne.n	80036ae <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003672:	e00a      	b.n	800368a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003674:	f7fd fd2e 	bl	80010d4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e06d      	b.n	8003766 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800368a:	4b3a      	ldr	r3, [pc, #232]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b04      	cmp	r3, #4
 8003694:	d1ee      	bne.n	8003674 <HAL_RCC_ClockConfig+0x158>
 8003696:	e010      	b.n	80036ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fd fd1c 	bl	80010d4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e05b      	b.n	8003766 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80036ae:	4b31      	ldr	r3, [pc, #196]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ee      	bne.n	8003698 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ba:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d219      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <HAL_RCC_ClockConfig+0x1be>
 80036ce:	4b28      	ldr	r3, [pc, #160]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a27      	ldr	r2, [pc, #156]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b25      	ldr	r3, [pc, #148]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 0201 	bic.w	r2, r3, #1
 80036e2:	4923      	ldr	r1, [pc, #140]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b21      	ldr	r3, [pc, #132]	; (8003770 <HAL_RCC_ClockConfig+0x254>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e034      	b.n	8003766 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4917      	ldr	r1, [pc, #92]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003726:	4b13      	ldr	r3, [pc, #76]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	490f      	ldr	r1, [pc, #60]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800373a:	f000 f823 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <HAL_RCC_ClockConfig+0x258>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490b      	ldr	r1, [pc, #44]	; (8003778 <HAL_RCC_ClockConfig+0x25c>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <HAL_RCC_ClockConfig+0x260>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <HAL_RCC_ClockConfig+0x264>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fc6e 	bl	800103c <HAL_InitTick>
 8003760:	4603      	mov	r3, r0
 8003762:	72fb      	strb	r3, [r7, #11]

  return status;
 8003764:	7afb      	ldrb	r3, [r7, #11]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023c00 	.word	0x40023c00
 8003774:	40023800 	.word	0x40023800
 8003778:	080082f8 	.word	0x080082f8
 800377c:	20000008 	.word	0x20000008
 8003780:	2000000c 	.word	0x2000000c

08003784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	b5b0      	push	{r4, r5, r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800378a:	4b61      	ldr	r3, [pc, #388]	; (8003910 <HAL_RCC_GetSysClockFreq+0x18c>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d00d      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0x32>
 800379a:	2b0c      	cmp	r3, #12
 800379c:	f200 80a4 	bhi.w	80038e8 <HAL_RCC_GetSysClockFreq+0x164>
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d002      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x26>
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d003      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x2c>
 80037a8:	e09e      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037aa:	4b5a      	ldr	r3, [pc, #360]	; (8003914 <HAL_RCC_GetSysClockFreq+0x190>)
 80037ac:	613b      	str	r3, [r7, #16]
      break;
 80037ae:	e0a9      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037b0:	4b59      	ldr	r3, [pc, #356]	; (8003918 <HAL_RCC_GetSysClockFreq+0x194>)
 80037b2:	613b      	str	r3, [r7, #16]
      break;
 80037b4:	e0a6      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	0c9b      	lsrs	r3, r3, #18
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	4a57      	ldr	r2, [pc, #348]	; (800391c <HAL_RCC_GetSysClockFreq+0x198>)
 80037c0:	5cd3      	ldrb	r3, [r2, r3]
 80037c2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	0d9b      	lsrs	r3, r3, #22
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	3301      	adds	r3, #1
 80037ce:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d0:	4b4f      	ldr	r3, [pc, #316]	; (8003910 <HAL_RCC_GetSysClockFreq+0x18c>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d041      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	461c      	mov	r4, r3
 80037e0:	f04f 0500 	mov.w	r5, #0
 80037e4:	4620      	mov	r0, r4
 80037e6:	4629      	mov	r1, r5
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	014b      	lsls	r3, r1, #5
 80037f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037f6:	0142      	lsls	r2, r0, #5
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	1b00      	subs	r0, r0, r4
 80037fe:	eb61 0105 	sbc.w	r1, r1, r5
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	018b      	lsls	r3, r1, #6
 800380c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003810:	0182      	lsls	r2, r0, #6
 8003812:	1a12      	subs	r2, r2, r0
 8003814:	eb63 0301 	sbc.w	r3, r3, r1
 8003818:	f04f 0000 	mov.w	r0, #0
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	00d9      	lsls	r1, r3, #3
 8003822:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003826:	00d0      	lsls	r0, r2, #3
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	1912      	adds	r2, r2, r4
 800382e:	eb45 0303 	adc.w	r3, r5, r3
 8003832:	f04f 0000 	mov.w	r0, #0
 8003836:	f04f 0100 	mov.w	r1, #0
 800383a:	0259      	lsls	r1, r3, #9
 800383c:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003840:	0250      	lsls	r0, r2, #9
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	461a      	mov	r2, r3
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	f7fc fe03 	bl	800045c <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4613      	mov	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e040      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	461c      	mov	r4, r3
 8003864:	f04f 0500 	mov.w	r5, #0
 8003868:	4620      	mov	r0, r4
 800386a:	4629      	mov	r1, r5
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	014b      	lsls	r3, r1, #5
 8003876:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800387a:	0142      	lsls	r2, r0, #5
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	1b00      	subs	r0, r0, r4
 8003882:	eb61 0105 	sbc.w	r1, r1, r5
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	018b      	lsls	r3, r1, #6
 8003890:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003894:	0182      	lsls	r2, r0, #6
 8003896:	1a12      	subs	r2, r2, r0
 8003898:	eb63 0301 	sbc.w	r3, r3, r1
 800389c:	f04f 0000 	mov.w	r0, #0
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	00d9      	lsls	r1, r3, #3
 80038a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038aa:	00d0      	lsls	r0, r2, #3
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	1912      	adds	r2, r2, r4
 80038b2:	eb45 0303 	adc.w	r3, r5, r3
 80038b6:	f04f 0000 	mov.w	r0, #0
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	0299      	lsls	r1, r3, #10
 80038c0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038c4:	0290      	lsls	r0, r2, #10
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	461a      	mov	r2, r3
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	f7fc fdc1 	bl	800045c <__aeabi_uldivmod>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4613      	mov	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	613b      	str	r3, [r7, #16]
      break;
 80038e6:	e00d      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_GetSysClockFreq+0x18c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0b5b      	lsrs	r3, r3, #13
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	613b      	str	r3, [r7, #16]
      break;
 8003902:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003904:	693b      	ldr	r3, [r7, #16]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bdb0      	pop	{r4, r5, r7, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	00f42400 	.word	0x00f42400
 8003918:	007a1200 	.word	0x007a1200
 800391c:	080082ec 	.word	0x080082ec

08003920 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003928:	2300      	movs	r3, #0
 800392a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800392c:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d12c      	bne.n	8003992 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003938:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003944:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e016      	b.n	800397e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003950:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395a:	6253      	str	r3, [r2, #36]	; 0x24
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003970:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003972:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	4a17      	ldr	r2, [pc, #92]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003984:	d105      	bne.n	8003992 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800398c:	d101      	bne.n	8003992 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800398e:	2301      	movs	r3, #1
 8003990:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d105      	bne.n	80039a4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003998:	4b10      	ldr	r3, [pc, #64]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0f      	ldr	r2, [pc, #60]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800399e:	f043 0304 	orr.w	r3, r3, #4
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 0201 	bic.w	r2, r3, #1
 80039ac:	490b      	ldr	r1, [pc, #44]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d001      	beq.n	80039c6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40007000 	.word	0x40007000
 80039dc:	40023c00 	.word	0x40023c00

080039e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e06e      	b.n	8003ad0 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d108      	bne.n	8003a0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a02:	d009      	beq.n	8003a18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	61da      	str	r2, [r3, #28]
 8003a0a:	e005      	b.n	8003a18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd f9e2 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9c:	ea42 0103 	orr.w	r1, r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	0c1a      	lsrs	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f002 0204 	and.w	r2, r2, #4
 8003abe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_SPI_Transmit+0x22>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e126      	b.n	8003d48 <HAL_SPI_Transmit+0x270>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b02:	f7fd fae7 	bl	80010d4 <HAL_GetTick>
 8003b06:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d002      	beq.n	8003b1e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b1c:	e10b      	b.n	8003d36 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_Transmit+0x52>
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b2e:	e102      	b.n	8003d36 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2203      	movs	r2, #3
 8003b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	88fa      	ldrh	r2, [r7, #6]
 8003b4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b76:	d10f      	bne.n	8003b98 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d007      	beq.n	8003bb6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bbe:	d14b      	bne.n	8003c58 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_SPI_Transmit+0xf6>
 8003bc8:	8afb      	ldrh	r3, [r7, #22]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d13e      	bne.n	8003c4c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	881a      	ldrh	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	1c9a      	adds	r2, r3, #2
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bf2:	e02b      	b.n	8003c4c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d112      	bne.n	8003c28 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	881a      	ldrh	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	1c9a      	adds	r2, r3, #2
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c26:	e011      	b.n	8003c4c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c28:	f7fd fa54 	bl	80010d4 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d803      	bhi.n	8003c40 <HAL_SPI_Transmit+0x168>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	d102      	bne.n	8003c46 <HAL_SPI_Transmit+0x16e>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c4a:	e074      	b.n	8003d36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1ce      	bne.n	8003bf4 <HAL_SPI_Transmit+0x11c>
 8003c56:	e04c      	b.n	8003cf2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <HAL_SPI_Transmit+0x18e>
 8003c60:	8afb      	ldrh	r3, [r7, #22]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d140      	bne.n	8003ce8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	7812      	ldrb	r2, [r2, #0]
 8003c72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c8c:	e02c      	b.n	8003ce8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d113      	bne.n	8003cc4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	7812      	ldrb	r2, [r2, #0]
 8003ca8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cc2:	e011      	b.n	8003ce8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc4:	f7fd fa06 	bl	80010d4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d803      	bhi.n	8003cdc <HAL_SPI_Transmit+0x204>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d102      	bne.n	8003ce2 <HAL_SPI_Transmit+0x20a>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ce6:	e026      	b.n	8003d36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1cd      	bne.n	8003c8e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f8b2 	bl	8003e60 <SPI_EndRxTxTransaction>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e000      	b.n	8003d36 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003d34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d46:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d60:	f7fd f9b8 	bl	80010d4 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d70:	f7fd f9b0 	bl	80010d4 <HAL_GetTick>
 8003d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d76:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	015b      	lsls	r3, r3, #5
 8003d7c:	0d1b      	lsrs	r3, r3, #20
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	fb02 f303 	mul.w	r3, r2, r3
 8003d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d86:	e054      	b.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d050      	beq.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d90:	f7fd f9a0 	bl	80010d4 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d902      	bls.n	8003da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d13d      	bne.n	8003e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dbe:	d111      	bne.n	8003de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc8:	d004      	beq.n	8003dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d107      	bne.n	8003de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dec:	d10f      	bne.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e017      	b.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d19b      	bne.n	8003d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000008 	.word	0x20000008

08003e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <SPI_EndRxTxTransaction+0x7c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <SPI_EndRxTxTransaction+0x80>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	0d5b      	lsrs	r3, r3, #21
 8003e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e7c:	fb02 f303 	mul.w	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e8a:	d112      	bne.n	8003eb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2200      	movs	r2, #0
 8003e94:	2180      	movs	r1, #128	; 0x80
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff ff5a 	bl	8003d50 <SPI_WaitFlagStateUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d016      	beq.n	8003ed0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f043 0220 	orr.w	r2, r3, #32
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e00f      	b.n	8003ed2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec8:	2b80      	cmp	r3, #128	; 0x80
 8003eca:	d0f2      	beq.n	8003eb2 <SPI_EndRxTxTransaction+0x52>
 8003ecc:	e000      	b.n	8003ed0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ece:	bf00      	nop
  }

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000008 	.word	0x20000008
 8003ee0:	165e9f81 	.word	0x165e9f81

08003ee4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ef4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ef8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f18:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	4013      	ands	r3, r2
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f44:	b084      	sub	sp, #16
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	f107 0014 	add.w	r0, r7, #20
 8003f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	b004      	add	sp, #16
 8003f82:	4770      	bx	lr

08003f84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b09b      	sub	sp, #108	; 0x6c
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003faa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	78db      	ldrb	r3, [r3, #3]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d81f      	bhi.n	8003ff6 <USB_ActivateEndpoint+0x72>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <USB_ActivateEndpoint+0x38>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fcd 	.word	0x08003fcd
 8003fc0:	08003fe9 	.word	0x08003fe9
 8003fc4:	08003fff 	.word	0x08003fff
 8003fc8:	08003fdb 	.word	0x08003fdb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003fcc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003fd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fd4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003fd8:	e012      	b.n	8004000 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003fda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003fde:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003fe2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003fe6:	e00b      	b.n	8004000 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003fe8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003fec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ff0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ff4:	e004      	b.n	8004000 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003ffc:	e000      	b.n	8004000 <USB_ActivateEndpoint+0x7c>
      break;
 8003ffe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	441a      	add	r2, r3
 800400a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800400e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800401a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401e:	b29b      	uxth	r3, r3
 8004020:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004038:	b29a      	uxth	r2, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	4313      	orrs	r3, r2
 8004042:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004064:	b29b      	uxth	r3, r3
 8004066:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	7b1b      	ldrb	r3, [r3, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 8149 	bne.w	8004304 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8084 	beq.w	8004184 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004086:	b29b      	uxth	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	4413      	add	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	011a      	lsls	r2, r3, #4
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	88db      	ldrh	r3, [r3, #6]
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	81fb      	strh	r3, [r7, #14]
 80040be:	89fb      	ldrh	r3, [r7, #14]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01b      	beq.n	8004100 <USB_ActivateEndpoint+0x17c>
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	81bb      	strh	r3, [r7, #12]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	89bb      	ldrh	r3, [r7, #12]
 80040ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	78db      	ldrb	r3, [r3, #3]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d020      	beq.n	800414a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411e:	813b      	strh	r3, [r7, #8]
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	f083 0320 	eor.w	r3, r3, #32
 8004126:	813b      	strh	r3, [r7, #8]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	441a      	add	r2, r3
 8004132:	893b      	ldrh	r3, [r7, #8]
 8004134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800413c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004144:	b29b      	uxth	r3, r3
 8004146:	8013      	strh	r3, [r2, #0]
 8004148:	e27f      	b.n	800464a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800415c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004160:	817b      	strh	r3, [r7, #10]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	897b      	ldrh	r3, [r7, #10]
 800416e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800417a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417e:	b29b      	uxth	r3, r3
 8004180:	8013      	strh	r3, [r2, #0]
 8004182:	e262      	b.n	800464a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418e:	b29b      	uxth	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	4413      	add	r3, r2
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	011a      	lsls	r2, r3, #4
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	88db      	ldrh	r3, [r3, #6]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	4413      	add	r3, r2
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	011a      	lsls	r2, r3, #4
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	4413      	add	r3, r2
 80041d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041da:	623b      	str	r3, [r7, #32]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d112      	bne.n	800420a <USB_ActivateEndpoint+0x286>
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	801a      	strh	r2, [r3, #0]
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004202:	b29a      	uxth	r2, r3
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	e02f      	b.n	800426a <USB_ActivateEndpoint+0x2e6>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b3e      	cmp	r3, #62	; 0x3e
 8004210:	d813      	bhi.n	800423a <USB_ActivateEndpoint+0x2b6>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	663b      	str	r3, [r7, #96]	; 0x60
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <USB_ActivateEndpoint+0x2a8>
 8004226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004228:	3301      	adds	r3, #1
 800422a:	663b      	str	r3, [r7, #96]	; 0x60
 800422c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800422e:	b29b      	uxth	r3, r3
 8004230:	029b      	lsls	r3, r3, #10
 8004232:	b29a      	uxth	r2, r3
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	e017      	b.n	800426a <USB_ActivateEndpoint+0x2e6>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	663b      	str	r3, [r7, #96]	; 0x60
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <USB_ActivateEndpoint+0x2d0>
 800424e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004250:	3b01      	subs	r3, #1
 8004252:	663b      	str	r3, [r7, #96]	; 0x60
 8004254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004256:	b29b      	uxth	r3, r3
 8004258:	029b      	lsls	r3, r3, #10
 800425a:	b29b      	uxth	r3, r3
 800425c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004264:	b29a      	uxth	r2, r3
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	83fb      	strh	r3, [r7, #30]
 8004278:	8bfb      	ldrh	r3, [r7, #30]
 800427a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01b      	beq.n	80042ba <USB_ActivateEndpoint+0x336>
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004298:	83bb      	strh	r3, [r7, #28]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	441a      	add	r2, r3
 80042a4:	8bbb      	ldrh	r3, [r7, #28]
 80042a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d0:	837b      	strh	r3, [r7, #26]
 80042d2:	8b7b      	ldrh	r3, [r7, #26]
 80042d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042d8:	837b      	strh	r3, [r7, #26]
 80042da:	8b7b      	ldrh	r3, [r7, #26]
 80042dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042e0:	837b      	strh	r3, [r7, #26]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	441a      	add	r2, r3
 80042ec:	8b7b      	ldrh	r3, [r7, #26]
 80042ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fe:	b29b      	uxth	r3, r3
 8004300:	8013      	strh	r3, [r2, #0]
 8004302:	e1a2      	b.n	800464a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	441a      	add	r2, r3
 8004328:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800432c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004334:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433c:	b29b      	uxth	r3, r3
 800433e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	65bb      	str	r3, [r7, #88]	; 0x58
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434a:	b29b      	uxth	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004350:	4413      	add	r3, r2
 8004352:	65bb      	str	r3, [r7, #88]	; 0x58
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	011a      	lsls	r2, r3, #4
 800435a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800435c:	4413      	add	r3, r2
 800435e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004362:	657b      	str	r3, [r7, #84]	; 0x54
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	891b      	ldrh	r3, [r3, #8]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004372:	801a      	strh	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	653b      	str	r3, [r7, #80]	; 0x50
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437e:	b29b      	uxth	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004384:	4413      	add	r3, r2
 8004386:	653b      	str	r3, [r7, #80]	; 0x50
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	011a      	lsls	r2, r3, #4
 800438e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004390:	4413      	add	r3, r2
 8004392:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	895b      	ldrh	r3, [r3, #10]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	b29b      	uxth	r3, r3
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f040 8091 	bne.w	80044d4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80043c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80043c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01b      	beq.n	8004402 <USB_ActivateEndpoint+0x47e>
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	441a      	add	r2, r3
 80043ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80043ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fe:	b29b      	uxth	r3, r3
 8004400:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004410:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01b      	beq.n	8004452 <USB_ActivateEndpoint+0x4ce>
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004430:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	441a      	add	r2, r3
 800443c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800443e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800444e:	b29b      	uxth	r3, r3
 8004450:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004468:	86bb      	strh	r3, [r7, #52]	; 0x34
 800446a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800446c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004470:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004472:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004474:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004478:	86bb      	strh	r3, [r7, #52]	; 0x34
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	441a      	add	r2, r3
 8004484:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800448e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004496:	b29b      	uxth	r3, r3
 8004498:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b0:	867b      	strh	r3, [r7, #50]	; 0x32
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	441a      	add	r2, r3
 80044bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80044be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8013      	strh	r3, [r2, #0]
 80044d2:	e0ba      	b.n	800464a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80044e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01d      	beq.n	800452c <USB_ActivateEndpoint+0x5a8>
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004506:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	441a      	add	r2, r3
 8004514:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004528:	b29b      	uxth	r3, r3
 800452a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800453c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01d      	beq.n	8004584 <USB_ActivateEndpoint+0x600>
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	441a      	add	r2, r3
 800456c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004580:	b29b      	uxth	r3, r3
 8004582:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	78db      	ldrb	r3, [r3, #3]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d024      	beq.n	80045d6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80045a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045aa:	f083 0320 	eor.w	r3, r3, #32
 80045ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]
 80045d4:	e01d      	b.n	8004612 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80045fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460e:	b29b      	uxth	r3, r3
 8004610:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	441a      	add	r2, r3
 8004634:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004646:	b29b      	uxth	r3, r3
 8004648:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800464a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800464e:	4618      	mov	r0, r3
 8004650:	376c      	adds	r7, #108	; 0x6c
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004658:	b480      	push	{r7}
 800465a:	b08d      	sub	sp, #52	; 0x34
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	7b1b      	ldrb	r3, [r3, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f040 808e 	bne.w	8004788 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	785b      	ldrb	r3, [r3, #1]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d044      	beq.n	80046fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	81bb      	strh	r3, [r7, #12]
 8004682:	89bb      	ldrh	r3, [r7, #12]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01b      	beq.n	80046c4 <USB_DeactivateEndpoint+0x6c>
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	817b      	strh	r3, [r7, #10]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	897b      	ldrh	r3, [r7, #10]
 80046b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046da:	813b      	strh	r3, [r7, #8]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	893b      	ldrh	r3, [r7, #8]
 80046e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	8013      	strh	r3, [r2, #0]
 80046fc:	e192      	b.n	8004a24 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	827b      	strh	r3, [r7, #18]
 800470c:	8a7b      	ldrh	r3, [r7, #18]
 800470e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01b      	beq.n	800474e <USB_DeactivateEndpoint+0xf6>
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	823b      	strh	r3, [r7, #16]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	441a      	add	r2, r3
 8004738:	8a3b      	ldrh	r3, [r7, #16]
 800473a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474a:	b29b      	uxth	r3, r3
 800474c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004764:	81fb      	strh	r3, [r7, #14]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	89fb      	ldrh	r3, [r7, #14]
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]
 8004786:	e14d      	b.n	8004a24 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	785b      	ldrb	r3, [r3, #1]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f040 80a5 	bne.w	80048dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	843b      	strh	r3, [r7, #32]
 80047a0:	8c3b      	ldrh	r3, [r7, #32]
 80047a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01b      	beq.n	80047e2 <USB_DeactivateEndpoint+0x18a>
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c0:	83fb      	strh	r3, [r7, #30]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	441a      	add	r2, r3
 80047cc:	8bfb      	ldrh	r3, [r7, #30]
 80047ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047de:	b29b      	uxth	r3, r3
 80047e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	83bb      	strh	r3, [r7, #28]
 80047f0:	8bbb      	ldrh	r3, [r7, #28]
 80047f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01b      	beq.n	8004832 <USB_DeactivateEndpoint+0x1da>
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004810:	837b      	strh	r3, [r7, #26]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	441a      	add	r2, r3
 800481c:	8b7b      	ldrh	r3, [r7, #26]
 800481e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800482e:	b29b      	uxth	r3, r3
 8004830:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004848:	833b      	strh	r3, [r7, #24]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	441a      	add	r2, r3
 8004854:	8b3b      	ldrh	r3, [r7, #24]
 8004856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004862:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004866:	b29b      	uxth	r3, r3
 8004868:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800487c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004880:	82fb      	strh	r3, [r7, #22]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	8afb      	ldrh	r3, [r7, #22]
 800488e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489e:	b29b      	uxth	r3, r3
 80048a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b8:	82bb      	strh	r3, [r7, #20]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	8abb      	ldrh	r3, [r7, #20]
 80048c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	8013      	strh	r3, [r2, #0]
 80048da:	e0a3      	b.n	8004a24 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01b      	beq.n	800492c <USB_DeactivateEndpoint+0x2d4>
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	441a      	add	r2, r3
 8004916:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004928:	b29b      	uxth	r3, r3
 800492a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	857b      	strh	r3, [r7, #42]	; 0x2a
 800493a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01b      	beq.n	800497c <USB_DeactivateEndpoint+0x324>
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29b      	uxth	r3, r3
 8004952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	853b      	strh	r3, [r7, #40]	; 0x28
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004978:	b29b      	uxth	r3, r3
 800497a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	441a      	add	r2, r3
 800499e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	441a      	add	r2, r3
 8004a0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3734      	adds	r7, #52	; 0x34
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b0cc      	sub	sp, #304	; 0x130
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	6018      	str	r0, [r3, #0]
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a3e:	463b      	mov	r3, r7
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	f040 872e 	bne.w	80058a6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a4a:	463b      	mov	r3, r7
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699a      	ldr	r2, [r3, #24]
 8004a50:	463b      	mov	r3, r7
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d905      	bls.n	8004a66 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004a64:	e004      	b.n	8004a70 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004a66:	463b      	mov	r3, r7
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004a70:	463b      	mov	r3, r7
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	7b1b      	ldrb	r3, [r3, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d134      	bne.n	8004ae4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6959      	ldr	r1, [r3, #20]
 8004a80:	463b      	mov	r3, r7
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	88da      	ldrh	r2, [r3, #6]
 8004a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	1d38      	adds	r0, r7, #4
 8004a8e:	6800      	ldr	r0, [r0, #0]
 8004a90:	f001 fbee 	bl	8006270 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a94:	f107 0310 	add.w	r3, r7, #16
 8004a98:	1d3a      	adds	r2, r7, #4
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	1d3b      	adds	r3, r7, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	f107 0310 	add.w	r3, r7, #16
 8004aae:	f107 0210 	add.w	r2, r7, #16
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	463b      	mov	r3, r7
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	011a      	lsls	r2, r3, #4
 8004ac0:	f107 0310 	add.w	r3, r7, #16
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004acc:	f107 030c 	add.w	r3, r7, #12
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	f000 beac 	b.w	800583c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004ae4:	463b      	mov	r3, r7
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	78db      	ldrb	r3, [r3, #3]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	f040 838c 	bne.w	8005208 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004af0:	463b      	mov	r3, r7
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6a1a      	ldr	r2, [r3, #32]
 8004af6:	463b      	mov	r3, r7
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	f240 8330 	bls.w	8005162 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	463b      	mov	r3, r7
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004b20:	1d3b      	adds	r3, r7, #4
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	463b      	mov	r3, r7
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004b46:	463b      	mov	r3, r7
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a1a      	ldr	r2, [r3, #32]
 8004b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b50:	1ad2      	subs	r2, r2, r3
 8004b52:	463b      	mov	r3, r7
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b58:	1d3b      	adds	r3, r7, #4
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	463b      	mov	r3, r7
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 819e 	beq.w	8004eb0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b78:	1d3a      	adds	r2, r7, #4
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	463b      	mov	r3, r7
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d17a      	bne.n	8004c7e <USB_EPStartXfer+0x24e>
 8004b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b8c:	1d3a      	adds	r2, r7, #4
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	1d3b      	adds	r3, r7, #4
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ba2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	440a      	add	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	463b      	mov	r3, r7
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	011a      	lsls	r2, r3, #4
 8004bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d11a      	bne.n	8004c04 <USB_EPStartXfer+0x1d4>
 8004bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	801a      	strh	r2, [r3, #0]
 8004c02:	e062      	b.n	8004cca <USB_EPStartXfer+0x29a>
 8004c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c08:	2b3e      	cmp	r3, #62	; 0x3e
 8004c0a:	d819      	bhi.n	8004c40 <USB_EPStartXfer+0x210>
 8004c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <USB_EPStartXfer+0x1fc>
 8004c22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c26:	3301      	adds	r3, #1
 8004c28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	029b      	lsls	r3, r3, #10
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	801a      	strh	r2, [r3, #0]
 8004c3e:	e044      	b.n	8004cca <USB_EPStartXfer+0x29a>
 8004c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d104      	bne.n	8004c60 <USB_EPStartXfer+0x230>
 8004c56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	029b      	lsls	r3, r3, #10
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	e025      	b.n	8004cca <USB_EPStartXfer+0x29a>
 8004c7e:	463b      	mov	r3, r7
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d120      	bne.n	8004cca <USB_EPStartXfer+0x29a>
 8004c88:	1d3b      	adds	r3, r7, #4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	4619      	mov	r1, r3
 8004c94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	011a      	lsls	r2, r3, #4
 8004caa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004cca:	463b      	mov	r3, r7
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	895b      	ldrh	r3, [r3, #10]
 8004cd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6959      	ldr	r1, [r3, #20]
 8004cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ce4:	1d38      	adds	r0, r7, #4
 8004ce6:	6800      	ldr	r0, [r0, #0]
 8004ce8:	f001 fac2 	bl	8006270 <USB_WritePMA>
            ep->xfer_buff += len;
 8004cec:	463b      	mov	r3, r7
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf6:	441a      	add	r2, r3
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004cfe:	463b      	mov	r3, r7
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6a1a      	ldr	r2, [r3, #32]
 8004d04:	463b      	mov	r3, r7
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d909      	bls.n	8004d22 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004d0e:	463b      	mov	r3, r7
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6a1a      	ldr	r2, [r3, #32]
 8004d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d18:	1ad2      	subs	r2, r2, r3
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	621a      	str	r2, [r3, #32]
 8004d20:	e008      	b.n	8004d34 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d22:	463b      	mov	r3, r7
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2200      	movs	r2, #0
 8004d32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d34:	463b      	mov	r3, r7
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	785b      	ldrb	r3, [r3, #1]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d17a      	bne.n	8004e34 <USB_EPStartXfer+0x404>
 8004d3e:	f107 0318 	add.w	r3, r7, #24
 8004d42:	1d3a      	adds	r2, r7, #4
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4619      	mov	r1, r3
 8004d54:	f107 0318 	add.w	r3, r7, #24
 8004d58:	f107 0218 	add.w	r2, r7, #24
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	440a      	add	r2, r1
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	463b      	mov	r3, r7
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	011a      	lsls	r2, r3, #4
 8004d6a:	f107 0318 	add.w	r3, r7, #24
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4413      	add	r3, r2
 8004d72:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d76:	f107 0314 	add.w	r3, r7, #20
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d11a      	bne.n	8004dba <USB_EPStartXfer+0x38a>
 8004d84:	f107 0314 	add.w	r3, r7, #20
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	f107 0314 	add.w	r3, r7, #20
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	801a      	strh	r2, [r3, #0]
 8004d9c:	f107 0314 	add.w	r3, r7, #20
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	801a      	strh	r2, [r3, #0]
 8004db8:	e067      	b.n	8004e8a <USB_EPStartXfer+0x45a>
 8004dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8004dc0:	d819      	bhi.n	8004df6 <USB_EPStartXfer+0x3c6>
 8004dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <USB_EPStartXfer+0x3b2>
 8004dd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004de2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	029b      	lsls	r3, r3, #10
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	801a      	strh	r2, [r3, #0]
 8004df4:	e049      	b.n	8004e8a <USB_EPStartXfer+0x45a>
 8004df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <USB_EPStartXfer+0x3e6>
 8004e0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e10:	3b01      	subs	r3, #1
 8004e12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e16:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	029b      	lsls	r3, r3, #10
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	f107 0314 	add.w	r3, r7, #20
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	e02a      	b.n	8004e8a <USB_EPStartXfer+0x45a>
 8004e34:	463b      	mov	r3, r7
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d125      	bne.n	8004e8a <USB_EPStartXfer+0x45a>
 8004e3e:	f107 0320 	add.w	r3, r7, #32
 8004e42:	1d3a      	adds	r2, r7, #4
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	1d3b      	adds	r3, r7, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	4619      	mov	r1, r3
 8004e54:	f107 0320 	add.w	r3, r7, #32
 8004e58:	f107 0220 	add.w	r2, r7, #32
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	440a      	add	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	463b      	mov	r3, r7
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	011a      	lsls	r2, r3, #4
 8004e6a:	f107 0320 	add.w	r3, r7, #32
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4413      	add	r3, r2
 8004e72:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e76:	f107 031c 	add.w	r3, r7, #28
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	f107 031c 	add.w	r3, r7, #28
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	891b      	ldrh	r3, [r3, #8]
 8004e90:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e94:	463b      	mov	r3, r7
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6959      	ldr	r1, [r3, #20]
 8004e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ea4:	1d38      	adds	r0, r7, #4
 8004ea6:	6800      	ldr	r0, [r0, #0]
 8004ea8:	f001 f9e2 	bl	8006270 <USB_WritePMA>
 8004eac:	f000 bcc6 	b.w	800583c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004eb0:	463b      	mov	r3, r7
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d164      	bne.n	8004f84 <USB_EPStartXfer+0x554>
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec0:	1d3b      	adds	r3, r7, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ece:	4413      	add	r3, r2
 8004ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	011a      	lsls	r2, r3, #4
 8004eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004edc:	4413      	add	r3, r2
 8004ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d112      	bne.n	8004f12 <USB_EPStartXfer+0x4e2>
 8004eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e057      	b.n	8004fc2 <USB_EPStartXfer+0x592>
 8004f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f16:	2b3e      	cmp	r3, #62	; 0x3e
 8004f18:	d817      	bhi.n	8004f4a <USB_EPStartXfer+0x51a>
 8004f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <USB_EPStartXfer+0x50a>
 8004f30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f34:	3301      	adds	r3, #1
 8004f36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	029b      	lsls	r3, r3, #10
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f46:	801a      	strh	r2, [r3, #0]
 8004f48:	e03b      	b.n	8004fc2 <USB_EPStartXfer+0x592>
 8004f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <USB_EPStartXfer+0x53a>
 8004f60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f64:	3b01      	subs	r3, #1
 8004f66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	029b      	lsls	r3, r3, #10
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	e01e      	b.n	8004fc2 <USB_EPStartXfer+0x592>
 8004f84:	463b      	mov	r3, r7
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d119      	bne.n	8004fc2 <USB_EPStartXfer+0x592>
 8004f8e:	1d3b      	adds	r3, r7, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	653b      	str	r3, [r7, #80]	; 0x50
 8004f94:	1d3b      	adds	r3, r7, #4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa2:	4413      	add	r3, r2
 8004fa4:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	011a      	lsls	r2, r3, #4
 8004fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fc2:	463b      	mov	r3, r7
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	891b      	ldrh	r3, [r3, #8]
 8004fc8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fcc:	463b      	mov	r3, r7
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6959      	ldr	r1, [r3, #20]
 8004fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fdc:	1d38      	adds	r0, r7, #4
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	f001 f946 	bl	8006270 <USB_WritePMA>
            ep->xfer_buff += len;
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fee:	441a      	add	r2, r3
 8004ff0:	463b      	mov	r3, r7
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6a1a      	ldr	r2, [r3, #32]
 8004ffc:	463b      	mov	r3, r7
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	429a      	cmp	r2, r3
 8005004:	d909      	bls.n	800501a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005006:	463b      	mov	r3, r7
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005010:	1ad2      	subs	r2, r2, r3
 8005012:	463b      	mov	r3, r7
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	621a      	str	r2, [r3, #32]
 8005018:	e008      	b.n	800502c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800501a:	463b      	mov	r3, r7
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005024:	463b      	mov	r3, r7
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2200      	movs	r2, #0
 800502a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	643b      	str	r3, [r7, #64]	; 0x40
 8005032:	463b      	mov	r3, r7
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d164      	bne.n	8005106 <USB_EPStartXfer+0x6d6>
 800503c:	1d3b      	adds	r3, r7, #4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	63bb      	str	r3, [r7, #56]	; 0x38
 8005042:	1d3b      	adds	r3, r7, #4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504a:	b29b      	uxth	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	4413      	add	r3, r2
 8005052:	63bb      	str	r3, [r7, #56]	; 0x38
 8005054:	463b      	mov	r3, r7
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	011a      	lsls	r2, r3, #4
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	4413      	add	r3, r2
 8005060:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005064:	637b      	str	r3, [r7, #52]	; 0x34
 8005066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d112      	bne.n	8005094 <USB_EPStartXfer+0x664>
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005078:	b29a      	uxth	r2, r3
 800507a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508c:	b29a      	uxth	r2, r3
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	e054      	b.n	800513e <USB_EPStartXfer+0x70e>
 8005094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005098:	2b3e      	cmp	r3, #62	; 0x3e
 800509a:	d817      	bhi.n	80050cc <USB_EPStartXfer+0x69c>
 800509c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <USB_EPStartXfer+0x68c>
 80050b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050b6:	3301      	adds	r3, #1
 80050b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	029b      	lsls	r3, r3, #10
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c8:	801a      	strh	r2, [r3, #0]
 80050ca:	e038      	b.n	800513e <USB_EPStartXfer+0x70e>
 80050cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d104      	bne.n	80050ec <USB_EPStartXfer+0x6bc>
 80050e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050e6:	3b01      	subs	r3, #1
 80050e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	029b      	lsls	r3, r3, #10
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	e01b      	b.n	800513e <USB_EPStartXfer+0x70e>
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d116      	bne.n	800513e <USB_EPStartXfer+0x70e>
 8005110:	1d3b      	adds	r3, r7, #4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005118:	b29b      	uxth	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511e:	4413      	add	r3, r2
 8005120:	643b      	str	r3, [r7, #64]	; 0x40
 8005122:	463b      	mov	r3, r7
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	011a      	lsls	r2, r3, #4
 800512a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512c:	4413      	add	r3, r2
 800512e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005138:	b29a      	uxth	r2, r3
 800513a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800513e:	463b      	mov	r3, r7
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	895b      	ldrh	r3, [r3, #10]
 8005144:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6959      	ldr	r1, [r3, #20]
 800514e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005152:	b29b      	uxth	r3, r3
 8005154:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005158:	1d38      	adds	r0, r7, #4
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	f001 f888 	bl	8006270 <USB_WritePMA>
 8005160:	e36c      	b.n	800583c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005162:	463b      	mov	r3, r7
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800516c:	1d3b      	adds	r3, r7, #4
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	463b      	mov	r3, r7
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800518a:	1d3b      	adds	r3, r7, #4
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800519c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051b0:	1d3b      	adds	r3, r7, #4
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051b6:	1d3b      	adds	r3, r7, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051be:	b29b      	uxth	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c4:	4413      	add	r3, r2
 80051c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051c8:	463b      	mov	r3, r7
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	011a      	lsls	r2, r3, #4
 80051d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051d2:	4413      	add	r3, r2
 80051d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80051da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80051e4:	463b      	mov	r3, r7
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	891b      	ldrh	r3, [r3, #8]
 80051ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ee:	463b      	mov	r3, r7
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6959      	ldr	r1, [r3, #20]
 80051f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051fe:	1d38      	adds	r0, r7, #4
 8005200:	6800      	ldr	r0, [r0, #0]
 8005202:	f001 f835 	bl	8006270 <USB_WritePMA>
 8005206:	e319      	b.n	800583c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005208:	1d3b      	adds	r3, r7, #4
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	463b      	mov	r3, r7
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	b29b      	uxth	r3, r3
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005222:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005226:	1d3b      	adds	r3, r7, #4
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	463b      	mov	r3, r7
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	441a      	add	r2, r3
 8005234:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800523c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005240:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800524c:	463b      	mov	r3, r7
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005256:	1ad2      	subs	r2, r2, r3
 8005258:	463b      	mov	r3, r7
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800525e:	1d3b      	adds	r3, r7, #4
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	463b      	mov	r3, r7
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8162 	beq.w	800553e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005282:	463b      	mov	r3, r7
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d164      	bne.n	8005356 <USB_EPStartXfer+0x926>
 800528c:	1d3b      	adds	r3, r7, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	67bb      	str	r3, [r7, #120]	; 0x78
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052a0:	4413      	add	r3, r2
 80052a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80052a4:	463b      	mov	r3, r7
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	011a      	lsls	r2, r3, #4
 80052ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ae:	4413      	add	r3, r2
 80052b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052b4:	677b      	str	r3, [r7, #116]	; 0x74
 80052b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d112      	bne.n	80052e4 <USB_EPStartXfer+0x8b4>
 80052be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052cc:	801a      	strh	r2, [r3, #0]
 80052ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052dc:	b29a      	uxth	r2, r3
 80052de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	e057      	b.n	8005394 <USB_EPStartXfer+0x964>
 80052e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e8:	2b3e      	cmp	r3, #62	; 0x3e
 80052ea:	d817      	bhi.n	800531c <USB_EPStartXfer+0x8ec>
 80052ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80052f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d004      	beq.n	800530c <USB_EPStartXfer+0x8dc>
 8005302:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005306:	3301      	adds	r3, #1
 8005308:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800530c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005310:	b29b      	uxth	r3, r3
 8005312:	029b      	lsls	r3, r3, #10
 8005314:	b29a      	uxth	r2, r3
 8005316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	e03b      	b.n	8005394 <USB_EPStartXfer+0x964>
 800531c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <USB_EPStartXfer+0x90c>
 8005332:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005336:	3b01      	subs	r3, #1
 8005338:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800533c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005340:	b29b      	uxth	r3, r3
 8005342:	029b      	lsls	r3, r3, #10
 8005344:	b29b      	uxth	r3, r3
 8005346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534e:	b29a      	uxth	r2, r3
 8005350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	e01e      	b.n	8005394 <USB_EPStartXfer+0x964>
 8005356:	463b      	mov	r3, r7
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d119      	bne.n	8005394 <USB_EPStartXfer+0x964>
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005368:	b29b      	uxth	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005370:	4413      	add	r3, r2
 8005372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005376:	463b      	mov	r3, r7
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	011a      	lsls	r2, r3, #4
 800537e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005382:	4413      	add	r3, r2
 8005384:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005388:	67fb      	str	r3, [r7, #124]	; 0x7c
 800538a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800538e:	b29a      	uxth	r2, r3
 8005390:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005392:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005394:	463b      	mov	r3, r7
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	895b      	ldrh	r3, [r3, #10]
 800539a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800539e:	463b      	mov	r3, r7
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6959      	ldr	r1, [r3, #20]
 80053a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053ae:	1d38      	adds	r0, r7, #4
 80053b0:	6800      	ldr	r0, [r0, #0]
 80053b2:	f000 ff5d 	bl	8006270 <USB_WritePMA>
          ep->xfer_buff += len;
 80053b6:	463b      	mov	r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695a      	ldr	r2, [r3, #20]
 80053bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c0:	441a      	add	r2, r3
 80053c2:	463b      	mov	r3, r7
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80053c8:	463b      	mov	r3, r7
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6a1a      	ldr	r2, [r3, #32]
 80053ce:	463b      	mov	r3, r7
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d909      	bls.n	80053ec <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80053d8:	463b      	mov	r3, r7
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e2:	1ad2      	subs	r2, r2, r3
 80053e4:	463b      	mov	r3, r7
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	621a      	str	r2, [r3, #32]
 80053ea:	e008      	b.n	80053fe <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80053ec:	463b      	mov	r3, r7
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80053f6:	463b      	mov	r3, r7
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2200      	movs	r2, #0
 80053fc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80053fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 821a 	beq.w	800583c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005408:	463b      	mov	r3, r7
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d164      	bne.n	80054dc <USB_EPStartXfer+0xaac>
 8005412:	1d3b      	adds	r3, r7, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	66bb      	str	r3, [r7, #104]	; 0x68
 8005418:	1d3b      	adds	r3, r7, #4
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005426:	4413      	add	r3, r2
 8005428:	66bb      	str	r3, [r7, #104]	; 0x68
 800542a:	463b      	mov	r3, r7
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	011a      	lsls	r2, r3, #4
 8005432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005434:	4413      	add	r3, r2
 8005436:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800543a:	667b      	str	r3, [r7, #100]	; 0x64
 800543c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d112      	bne.n	800546a <USB_EPStartXfer+0xa3a>
 8005444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800544e:	b29a      	uxth	r2, r3
 8005450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005462:	b29a      	uxth	r2, r3
 8005464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	e057      	b.n	800551a <USB_EPStartXfer+0xaea>
 800546a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800546e:	2b3e      	cmp	r3, #62	; 0x3e
 8005470:	d817      	bhi.n	80054a2 <USB_EPStartXfer+0xa72>
 8005472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800547c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d004      	beq.n	8005492 <USB_EPStartXfer+0xa62>
 8005488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800548c:	3301      	adds	r3, #1
 800548e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005496:	b29b      	uxth	r3, r3
 8005498:	029b      	lsls	r3, r3, #10
 800549a:	b29a      	uxth	r2, r3
 800549c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800549e:	801a      	strh	r2, [r3, #0]
 80054a0:	e03b      	b.n	800551a <USB_EPStartXfer+0xaea>
 80054a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <USB_EPStartXfer+0xa92>
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054bc:	3b01      	subs	r3, #1
 80054be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	029b      	lsls	r3, r3, #10
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	e01e      	b.n	800551a <USB_EPStartXfer+0xaea>
 80054dc:	463b      	mov	r3, r7
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d119      	bne.n	800551a <USB_EPStartXfer+0xaea>
 80054e6:	1d3b      	adds	r3, r7, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	673b      	str	r3, [r7, #112]	; 0x70
 80054ec:	1d3b      	adds	r3, r7, #4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054fa:	4413      	add	r3, r2
 80054fc:	673b      	str	r3, [r7, #112]	; 0x70
 80054fe:	463b      	mov	r3, r7
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	011a      	lsls	r2, r3, #4
 8005506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005508:	4413      	add	r3, r2
 800550a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800550e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005514:	b29a      	uxth	r2, r3
 8005516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005518:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800551a:	463b      	mov	r3, r7
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	891b      	ldrh	r3, [r3, #8]
 8005520:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005524:	463b      	mov	r3, r7
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6959      	ldr	r1, [r3, #20]
 800552a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552e:	b29b      	uxth	r3, r3
 8005530:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005534:	1d38      	adds	r0, r7, #4
 8005536:	6800      	ldr	r0, [r0, #0]
 8005538:	f000 fe9a 	bl	8006270 <USB_WritePMA>
 800553c:	e17e      	b.n	800583c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800553e:	463b      	mov	r3, r7
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d16f      	bne.n	8005628 <USB_EPStartXfer+0xbf8>
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005550:	1d3b      	adds	r3, r7, #4
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005558:	b29b      	uxth	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005560:	4413      	add	r3, r2
 8005562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005566:	463b      	mov	r3, r7
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	011a      	lsls	r2, r3, #4
 800556e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005572:	4413      	add	r3, r2
 8005574:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800557c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d116      	bne.n	80055b2 <USB_EPStartXfer+0xb82>
 8005584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005590:	b29a      	uxth	r2, r3
 8005592:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055ae:	801a      	strh	r2, [r3, #0]
 80055b0:	e05f      	b.n	8005672 <USB_EPStartXfer+0xc42>
 80055b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b6:	2b3e      	cmp	r3, #62	; 0x3e
 80055b8:	d818      	bhi.n	80055ec <USB_EPStartXfer+0xbbc>
 80055ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055be:	085b      	lsrs	r3, r3, #1
 80055c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <USB_EPStartXfer+0xbaa>
 80055d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055d4:	3301      	adds	r3, #1
 80055d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055de:	b29b      	uxth	r3, r3
 80055e0:	029b      	lsls	r3, r3, #10
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	e042      	b.n	8005672 <USB_EPStartXfer+0xc42>
 80055ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <USB_EPStartXfer+0xbdc>
 8005602:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005606:	3b01      	subs	r3, #1
 8005608:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800560c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005610:	b29b      	uxth	r3, r3
 8005612:	029b      	lsls	r3, r3, #10
 8005614:	b29b      	uxth	r3, r3
 8005616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561e:	b29a      	uxth	r2, r3
 8005620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005624:	801a      	strh	r2, [r3, #0]
 8005626:	e024      	b.n	8005672 <USB_EPStartXfer+0xc42>
 8005628:	463b      	mov	r3, r7
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	785b      	ldrb	r3, [r3, #1]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d11f      	bne.n	8005672 <USB_EPStartXfer+0xc42>
 8005632:	1d3b      	adds	r3, r7, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800563a:	1d3b      	adds	r3, r7, #4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005642:	b29b      	uxth	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800564a:	4413      	add	r3, r2
 800564c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005650:	463b      	mov	r3, r7
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	011a      	lsls	r2, r3, #4
 8005658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800565c:	4413      	add	r3, r2
 800565e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566a:	b29a      	uxth	r2, r3
 800566c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005670:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005672:	463b      	mov	r3, r7
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	891b      	ldrh	r3, [r3, #8]
 8005678:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800567c:	463b      	mov	r3, r7
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6959      	ldr	r1, [r3, #20]
 8005682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005686:	b29b      	uxth	r3, r3
 8005688:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800568c:	1d38      	adds	r0, r7, #4
 800568e:	6800      	ldr	r0, [r0, #0]
 8005690:	f000 fdee 	bl	8006270 <USB_WritePMA>
          ep->xfer_buff += len;
 8005694:	463b      	mov	r3, r7
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569e:	441a      	add	r2, r3
 80056a0:	463b      	mov	r3, r7
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80056a6:	463b      	mov	r3, r7
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a1a      	ldr	r2, [r3, #32]
 80056ac:	463b      	mov	r3, r7
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d909      	bls.n	80056ca <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80056b6:	463b      	mov	r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a1a      	ldr	r2, [r3, #32]
 80056bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c0:	1ad2      	subs	r2, r2, r3
 80056c2:	463b      	mov	r3, r7
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	621a      	str	r2, [r3, #32]
 80056c8:	e008      	b.n	80056dc <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80056ca:	463b      	mov	r3, r7
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80056d4:	463b      	mov	r3, r7
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2200      	movs	r2, #0
 80056da:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80056dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80ab 	beq.w	800583c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056ee:	463b      	mov	r3, r7
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d16f      	bne.n	80057d8 <USB_EPStartXfer+0xda8>
 80056f8:	1d3b      	adds	r3, r7, #4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005710:	4413      	add	r3, r2
 8005712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005716:	463b      	mov	r3, r7
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	011a      	lsls	r2, r3, #4
 800571e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005722:	4413      	add	r3, r2
 8005724:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800572c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d116      	bne.n	8005762 <USB_EPStartXfer+0xd32>
 8005734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005740:	b29a      	uxth	r2, r3
 8005742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005746:	801a      	strh	r2, [r3, #0]
 8005748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005758:	b29a      	uxth	r2, r3
 800575a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	e05b      	b.n	800581a <USB_EPStartXfer+0xdea>
 8005762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005766:	2b3e      	cmp	r3, #62	; 0x3e
 8005768:	d818      	bhi.n	800579c <USB_EPStartXfer+0xd6c>
 800576a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <USB_EPStartXfer+0xd5a>
 8005780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005784:	3301      	adds	r3, #1
 8005786:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800578a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578e:	b29b      	uxth	r3, r3
 8005790:	029b      	lsls	r3, r3, #10
 8005792:	b29a      	uxth	r2, r3
 8005794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005798:	801a      	strh	r2, [r3, #0]
 800579a:	e03e      	b.n	800581a <USB_EPStartXfer+0xdea>
 800579c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d104      	bne.n	80057bc <USB_EPStartXfer+0xd8c>
 80057b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b6:	3b01      	subs	r3, #1
 80057b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	029b      	lsls	r3, r3, #10
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057d4:	801a      	strh	r2, [r3, #0]
 80057d6:	e020      	b.n	800581a <USB_EPStartXfer+0xdea>
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d11b      	bne.n	800581a <USB_EPStartXfer+0xdea>
 80057e2:	1d3b      	adds	r3, r7, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057f2:	4413      	add	r3, r2
 80057f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057f8:	463b      	mov	r3, r7
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	011a      	lsls	r2, r3, #4
 8005800:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005804:	4413      	add	r3, r2
 8005806:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800580a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800580e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005812:	b29a      	uxth	r2, r3
 8005814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005818:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800581a:	463b      	mov	r3, r7
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	895b      	ldrh	r3, [r3, #10]
 8005820:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005824:	463b      	mov	r3, r7
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6959      	ldr	r1, [r3, #20]
 800582a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582e:	b29b      	uxth	r3, r3
 8005830:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005834:	1d38      	adds	r0, r7, #4
 8005836:	6800      	ldr	r0, [r0, #0]
 8005838:	f000 fd1a 	bl	8006270 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800583c:	1d3b      	adds	r3, r7, #4
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	463b      	mov	r3, r7
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	f107 020a 	add.w	r2, r7, #10
 8005852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800585a:	8013      	strh	r3, [r2, #0]
 800585c:	f107 030a 	add.w	r3, r7, #10
 8005860:	f107 020a 	add.w	r2, r7, #10
 8005864:	8812      	ldrh	r2, [r2, #0]
 8005866:	f082 0210 	eor.w	r2, r2, #16
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	f107 030a 	add.w	r3, r7, #10
 8005870:	f107 020a 	add.w	r2, r7, #10
 8005874:	8812      	ldrh	r2, [r2, #0]
 8005876:	f082 0220 	eor.w	r2, r2, #32
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	1d3b      	adds	r3, r7, #4
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	441a      	add	r2, r3
 800588a:	f107 030a 	add.w	r3, r7, #10
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	8013      	strh	r3, [r2, #0]
 80058a4:	e3b5      	b.n	8006012 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80058a6:	463b      	mov	r3, r7
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	7b1b      	ldrb	r3, [r3, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f040 8090 	bne.w	80059d2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80058b2:	463b      	mov	r3, r7
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699a      	ldr	r2, [r3, #24]
 80058b8:	463b      	mov	r3, r7
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d90e      	bls.n	80058e0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80058c2:	463b      	mov	r3, r7
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80058cc:	463b      	mov	r3, r7
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d6:	1ad2      	subs	r2, r2, r3
 80058d8:	463b      	mov	r3, r7
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	619a      	str	r2, [r3, #24]
 80058de:	e008      	b.n	80058f2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80058e0:	463b      	mov	r3, r7
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80058ea:	463b      	mov	r3, r7
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2200      	movs	r2, #0
 80058f0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80058f2:	1d3b      	adds	r3, r7, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058fa:	1d3b      	adds	r3, r7, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005902:	b29b      	uxth	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800590a:	4413      	add	r3, r2
 800590c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005910:	463b      	mov	r3, r7
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	011a      	lsls	r2, r3, #4
 8005918:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800591c:	4413      	add	r3, r2
 800591e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d116      	bne.n	800595c <USB_EPStartXfer+0xf2c>
 800592e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800593a:	b29a      	uxth	r2, r3
 800593c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005952:	b29a      	uxth	r2, r3
 8005954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	e32c      	b.n	8005fb6 <USB_EPStartXfer+0x1586>
 800595c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005960:	2b3e      	cmp	r3, #62	; 0x3e
 8005962:	d818      	bhi.n	8005996 <USB_EPStartXfer+0xf66>
 8005964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800596e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <USB_EPStartXfer+0xf54>
 800597a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800597e:	3301      	adds	r3, #1
 8005980:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005984:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005988:	b29b      	uxth	r3, r3
 800598a:	029b      	lsls	r3, r3, #10
 800598c:	b29a      	uxth	r2, r3
 800598e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	e30f      	b.n	8005fb6 <USB_EPStartXfer+0x1586>
 8005996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <USB_EPStartXfer+0xf86>
 80059ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059b0:	3b01      	subs	r3, #1
 80059b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	b29b      	uxth	r3, r3
 80059c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	e2f1      	b.n	8005fb6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	78db      	ldrb	r3, [r3, #3]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	f040 818f 	bne.w	8005cfc <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80059de:	463b      	mov	r3, r7
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d175      	bne.n	8005ad4 <USB_EPStartXfer+0x10a4>
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059f0:	1d3b      	adds	r3, r7, #4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a00:	4413      	add	r3, r2
 8005a02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a06:	463b      	mov	r3, r7
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	011a      	lsls	r2, r3, #4
 8005a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a12:	4413      	add	r3, r2
 8005a14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d116      	bne.n	8005a54 <USB_EPStartXfer+0x1024>
 8005a26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a38:	801a      	strh	r2, [r3, #0]
 8005a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	e065      	b.n	8005b20 <USB_EPStartXfer+0x10f0>
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a5c:	d81a      	bhi.n	8005a94 <USB_EPStartXfer+0x1064>
 8005a5e:	463b      	mov	r3, r7
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <USB_EPStartXfer+0x1052>
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	029b      	lsls	r3, r3, #10
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	e045      	b.n	8005b20 <USB_EPStartXfer+0x10f0>
 8005a94:	463b      	mov	r3, r7
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <USB_EPStartXfer+0x1088>
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ad0:	801a      	strh	r2, [r3, #0]
 8005ad2:	e025      	b.n	8005b20 <USB_EPStartXfer+0x10f0>
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d120      	bne.n	8005b20 <USB_EPStartXfer+0x10f0>
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ae6:	1d3b      	adds	r3, r7, #4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005af6:	4413      	add	r3, r2
 8005af8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	011a      	lsls	r2, r3, #4
 8005b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b08:	4413      	add	r3, r2
 8005b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b12:	463b      	mov	r3, r7
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b28:	463b      	mov	r3, r7
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d175      	bne.n	8005c1e <USB_EPStartXfer+0x11ee>
 8005b32:	1d3b      	adds	r3, r7, #4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b3a:	1d3b      	adds	r3, r7, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b50:	463b      	mov	r3, r7
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	011a      	lsls	r2, r3, #4
 8005b58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b66:	463b      	mov	r3, r7
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d116      	bne.n	8005b9e <USB_EPStartXfer+0x116e>
 8005b70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	e061      	b.n	8005c62 <USB_EPStartXfer+0x1232>
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba6:	d81a      	bhi.n	8005bde <USB_EPStartXfer+0x11ae>
 8005ba8:	463b      	mov	r3, r7
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <USB_EPStartXfer+0x119c>
 8005bc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	029b      	lsls	r3, r3, #10
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bda:	801a      	strh	r2, [r3, #0]
 8005bdc:	e041      	b.n	8005c62 <USB_EPStartXfer+0x1232>
 8005bde:	463b      	mov	r3, r7
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	095b      	lsrs	r3, r3, #5
 8005be6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bea:	463b      	mov	r3, r7
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <USB_EPStartXfer+0x11d2>
 8005bf8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e021      	b.n	8005c62 <USB_EPStartXfer+0x1232>
 8005c1e:	463b      	mov	r3, r7
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d11c      	bne.n	8005c62 <USB_EPStartXfer+0x1232>
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c38:	4413      	add	r3, r2
 8005c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	011a      	lsls	r2, r3, #4
 8005c46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c54:	463b      	mov	r3, r7
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c60:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005c62:	463b      	mov	r3, r7
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 81a4 	beq.w	8005fb6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	463b      	mov	r3, r7
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c82:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <USB_EPStartXfer+0x126a>
 8005c8e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c9a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f040 8187 	bne.w	8005fb6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ca8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f040 8180 	bne.w	8005fb6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005cb6:	1d3b      	adds	r3, r7, #4
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005cd4:	1d3b      	adds	r3, r7, #4
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	463b      	mov	r3, r7
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	8013      	strh	r3, [r2, #0]
 8005cfa:	e15c      	b.n	8005fb6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	78db      	ldrb	r3, [r3, #3]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	f040 8155 	bne.w	8005fb2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d08:	463b      	mov	r3, r7
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	463b      	mov	r3, r7
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d90e      	bls.n	8005d36 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699a      	ldr	r2, [r3, #24]
 8005d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2c:	1ad2      	subs	r2, r2, r3
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	619a      	str	r2, [r3, #24]
 8005d34:	e008      	b.n	8005d48 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005d36:	463b      	mov	r3, r7
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005d40:	463b      	mov	r3, r7
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2200      	movs	r2, #0
 8005d46:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d48:	463b      	mov	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d16f      	bne.n	8005e32 <USB_EPStartXfer+0x1402>
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d5a:	1d3b      	adds	r3, r7, #4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d70:	463b      	mov	r3, r7
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	011a      	lsls	r2, r3, #4
 8005d78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d116      	bne.n	8005dbc <USB_EPStartXfer+0x138c>
 8005d8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005db8:	801a      	strh	r2, [r3, #0]
 8005dba:	e05f      	b.n	8005e7c <USB_EPStartXfer+0x144c>
 8005dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc0:	2b3e      	cmp	r3, #62	; 0x3e
 8005dc2:	d818      	bhi.n	8005df6 <USB_EPStartXfer+0x13c6>
 8005dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc8:	085b      	lsrs	r3, r3, #1
 8005dca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d004      	beq.n	8005de4 <USB_EPStartXfer+0x13b4>
 8005dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dde:	3301      	adds	r3, #1
 8005de0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	029b      	lsls	r3, r3, #10
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005df2:	801a      	strh	r2, [r3, #0]
 8005df4:	e042      	b.n	8005e7c <USB_EPStartXfer+0x144c>
 8005df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d104      	bne.n	8005e16 <USB_EPStartXfer+0x13e6>
 8005e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e10:	3b01      	subs	r3, #1
 8005e12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	029b      	lsls	r3, r3, #10
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e2e:	801a      	strh	r2, [r3, #0]
 8005e30:	e024      	b.n	8005e7c <USB_EPStartXfer+0x144c>
 8005e32:	463b      	mov	r3, r7
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d11f      	bne.n	8005e7c <USB_EPStartXfer+0x144c>
 8005e3c:	1d3b      	adds	r3, r7, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e44:	1d3b      	adds	r3, r7, #4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	4413      	add	r3, r2
 8005e56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	011a      	lsls	r2, r3, #4
 8005e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e66:	4413      	add	r3, r2
 8005e68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	1d3b      	adds	r3, r7, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e84:	463b      	mov	r3, r7
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d16f      	bne.n	8005f6e <USB_EPStartXfer+0x153e>
 8005e8e:	1d3b      	adds	r3, r7, #4
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005eac:	463b      	mov	r3, r7
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	011a      	lsls	r2, r3, #4
 8005eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eb8:	4413      	add	r3, r2
 8005eba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d116      	bne.n	8005ef8 <USB_EPStartXfer+0x14c8>
 8005eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	e05e      	b.n	8005fb6 <USB_EPStartXfer+0x1586>
 8005ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005efc:	2b3e      	cmp	r3, #62	; 0x3e
 8005efe:	d818      	bhi.n	8005f32 <USB_EPStartXfer+0x1502>
 8005f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f04:	085b      	lsrs	r3, r3, #1
 8005f06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d004      	beq.n	8005f20 <USB_EPStartXfer+0x14f0>
 8005f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	029b      	lsls	r3, r3, #10
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	e041      	b.n	8005fb6 <USB_EPStartXfer+0x1586>
 8005f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d104      	bne.n	8005f52 <USB_EPStartXfer+0x1522>
 8005f48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	029b      	lsls	r3, r3, #10
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	e023      	b.n	8005fb6 <USB_EPStartXfer+0x1586>
 8005f6e:	463b      	mov	r3, r7
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d11e      	bne.n	8005fb6 <USB_EPStartXfer+0x1586>
 8005f78:	1d3b      	adds	r3, r7, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f88:	4413      	add	r3, r2
 8005f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f8e:	463b      	mov	r3, r7
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	011a      	lsls	r2, r3, #4
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	e001      	b.n	8005fb6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e02e      	b.n	8006014 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fb6:	1d3b      	adds	r3, r7, #4
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	463b      	mov	r3, r7
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005fd4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005fd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fdc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005fe0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005fe4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fe8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005fec:	1d3b      	adds	r3, r7, #4
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600e:	b29b      	uxth	r3, r3
 8006010:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	785b      	ldrb	r3, [r3, #1]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d020      	beq.n	8006072 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006046:	81bb      	strh	r3, [r7, #12]
 8006048:	89bb      	ldrh	r3, [r7, #12]
 800604a:	f083 0310 	eor.w	r3, r3, #16
 800604e:	81bb      	strh	r3, [r7, #12]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	441a      	add	r2, r3
 800605a:	89bb      	ldrh	r3, [r7, #12]
 800605c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606c:	b29b      	uxth	r3, r3
 800606e:	8013      	strh	r3, [r2, #0]
 8006070:	e01f      	b.n	80060b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006088:	81fb      	strh	r3, [r7, #14]
 800608a:	89fb      	ldrh	r3, [r7, #14]
 800608c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006090:	81fb      	strh	r3, [r7, #14]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	441a      	add	r2, r3
 800609c:	89fb      	ldrh	r3, [r7, #14]
 800609e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bc80      	pop	{r7}
 80060bc:	4770      	bx	lr

080060be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060be:	b480      	push	{r7}
 80060c0:	b087      	sub	sp, #28
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	7b1b      	ldrb	r3, [r3, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f040 809d 	bne.w	800620c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d04c      	beq.n	8006174 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	823b      	strh	r3, [r7, #16]
 80060e8:	8a3b      	ldrh	r3, [r7, #16]
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01b      	beq.n	800612a <USB_EPClearStall+0x6c>
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	81fb      	strh	r3, [r7, #14]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	441a      	add	r2, r3
 8006114:	89fb      	ldrh	r3, [r7, #14]
 8006116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006122:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006126:	b29b      	uxth	r3, r3
 8006128:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	78db      	ldrb	r3, [r3, #3]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d06c      	beq.n	800620c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006148:	81bb      	strh	r3, [r7, #12]
 800614a:	89bb      	ldrh	r3, [r7, #12]
 800614c:	f083 0320 	eor.w	r3, r3, #32
 8006150:	81bb      	strh	r3, [r7, #12]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	441a      	add	r2, r3
 800615c:	89bb      	ldrh	r3, [r7, #12]
 800615e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616e:	b29b      	uxth	r3, r3
 8006170:	8013      	strh	r3, [r2, #0]
 8006172:	e04b      	b.n	800620c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	82fb      	strh	r3, [r7, #22]
 8006182:	8afb      	ldrh	r3, [r7, #22]
 8006184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01b      	beq.n	80061c4 <USB_EPClearStall+0x106>
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b29b      	uxth	r3, r3
 800619a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a2:	82bb      	strh	r3, [r7, #20]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	441a      	add	r2, r3
 80061ae:	8abb      	ldrh	r3, [r7, #20]
 80061b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061da:	827b      	strh	r3, [r7, #18]
 80061dc:	8a7b      	ldrh	r3, [r7, #18]
 80061de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061e2:	827b      	strh	r3, [r7, #18]
 80061e4:	8a7b      	ldrh	r3, [r7, #18]
 80061e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061ea:	827b      	strh	r3, [r7, #18]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	8a7b      	ldrh	r3, [r7, #18]
 80061f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006208:	b29b      	uxth	r3, r3
 800620a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr

08006218 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d103      	bne.n	8006232 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2280      	movs	r2, #128	; 0x80
 800622e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr

08006252 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006260:	b29b      	uxth	r3, r3
 8006262:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006264:	68fb      	ldr	r3, [r7, #12]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	bc80      	pop	{r7}
 800626e:	4770      	bx	lr

08006270 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006270:	b480      	push	{r7}
 8006272:	b08d      	sub	sp, #52	; 0x34
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	4611      	mov	r1, r2
 800627c:	461a      	mov	r2, r3
 800627e:	460b      	mov	r3, r1
 8006280:	80fb      	strh	r3, [r7, #6]
 8006282:	4613      	mov	r3, r2
 8006284:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006286:	88bb      	ldrh	r3, [r7, #4]
 8006288:	3301      	adds	r3, #1
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	005a      	lsls	r2, r3, #1
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062a8:	e01e      	b.n	80062e8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	3301      	adds	r3, #1
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	3302      	adds	r3, #2
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	3302      	adds	r3, #2
 80062da:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	3301      	adds	r3, #1
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	3b01      	subs	r3, #1
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1dd      	bne.n	80062aa <USB_WritePMA+0x3a>
  }
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	3734      	adds	r7, #52	; 0x34
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b08b      	sub	sp, #44	; 0x2c
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	4611      	mov	r1, r2
 8006306:	461a      	mov	r2, r3
 8006308:	460b      	mov	r3, r1
 800630a:	80fb      	strh	r3, [r7, #6]
 800630c:	4613      	mov	r3, r2
 800630e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006310:	88bb      	ldrh	r3, [r7, #4]
 8006312:	085b      	lsrs	r3, r3, #1
 8006314:	b29b      	uxth	r3, r3
 8006316:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	005a      	lsls	r2, r3, #1
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800632c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
 8006332:	e01b      	b.n	800636c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	b29b      	uxth	r3, r3
 800633a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	3302      	adds	r3, #2
 8006340:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3301      	adds	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	0a1b      	lsrs	r3, r3, #8
 8006354:	b2da      	uxtb	r2, r3
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	3301      	adds	r3, #1
 800635e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	3302      	adds	r3, #2
 8006364:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	3b01      	subs	r3, #1
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e0      	bne.n	8006334 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006372:	88bb      	ldrh	r3, [r7, #4]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	701a      	strb	r2, [r3, #0]
  }
}
 800638e:	bf00      	nop
 8006390:	372c      	adds	r7, #44	; 0x2c
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr

08006398 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	7c1b      	ldrb	r3, [r3, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d115      	bne.n	80063dc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063b4:	2202      	movs	r2, #2
 80063b6:	2181      	movs	r1, #129	; 0x81
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 fdda 	bl	8007f72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063c8:	2202      	movs	r2, #2
 80063ca:	2101      	movs	r1, #1
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 fdd0 	bl	8007f72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80063da:	e012      	b.n	8006402 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063dc:	2340      	movs	r3, #64	; 0x40
 80063de:	2202      	movs	r2, #2
 80063e0:	2181      	movs	r1, #129	; 0x81
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fdc5 	bl	8007f72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063ee:	2340      	movs	r3, #64	; 0x40
 80063f0:	2202      	movs	r2, #2
 80063f2:	2101      	movs	r1, #1
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fdbc 	bl	8007f72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006402:	2308      	movs	r3, #8
 8006404:	2203      	movs	r2, #3
 8006406:	2182      	movs	r1, #130	; 0x82
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 fdb2 	bl	8007f72 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006414:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006418:	f001 fed2 	bl	80081c0 <USBD_static_malloc>
 800641c:	4602      	mov	r2, r0
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800642a:	2b00      	cmp	r3, #0
 800642c:	d102      	bne.n	8006434 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800642e:	2301      	movs	r3, #1
 8006430:	73fb      	strb	r3, [r7, #15]
 8006432:	e026      	b.n	8006482 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800643a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2200      	movs	r2, #0
 8006452:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	7c1b      	ldrb	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006468:	2101      	movs	r1, #1
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 fe72 	bl	8008154 <USBD_LL_PrepareReceive>
 8006470:	e007      	b.n	8006482 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006478:	2340      	movs	r3, #64	; 0x40
 800647a:	2101      	movs	r1, #1
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 fe69 	bl	8008154 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006482:	7bfb      	ldrb	r3, [r7, #15]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800649c:	2181      	movs	r1, #129	; 0x81
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fd8d 	bl	8007fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80064aa:	2101      	movs	r1, #1
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 fd86 	bl	8007fbe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80064ba:	2182      	movs	r1, #130	; 0x82
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fd7e 	bl	8007fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00e      	beq.n	80064f0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064e2:	4618      	mov	r0, r3
 80064e4:	f001 fe78 	bl	80081d8 <USBD_static_free>
    pdev->pClassData = NULL;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b086      	sub	sp, #24
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800650a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006520:	2b00      	cmp	r3, #0
 8006522:	d039      	beq.n	8006598 <USBD_CDC_Setup+0x9e>
 8006524:	2b20      	cmp	r3, #32
 8006526:	d17f      	bne.n	8006628 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	88db      	ldrh	r3, [r3, #6]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d029      	beq.n	8006584 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	b25b      	sxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	da11      	bge.n	800655e <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006546:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	88d2      	ldrh	r2, [r2, #6]
 800654c:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800654e:	6939      	ldr	r1, [r7, #16]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	88db      	ldrh	r3, [r3, #6]
 8006554:	461a      	mov	r2, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f965 	bl	8007826 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800655c:	e06b      	b.n	8006636 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	785a      	ldrb	r2, [r3, #1]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	88db      	ldrh	r3, [r3, #6]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006574:	6939      	ldr	r1, [r7, #16]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	88db      	ldrh	r3, [r3, #6]
 800657a:	461a      	mov	r2, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 f980 	bl	8007882 <USBD_CtlPrepareRx>
    break;
 8006582:	e058      	b.n	8006636 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	7850      	ldrb	r0, [r2, #1]
 8006590:	2200      	movs	r2, #0
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	4798      	blx	r3
    break;
 8006596:	e04e      	b.n	8006636 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b0b      	cmp	r3, #11
 800659e:	d02e      	beq.n	80065fe <USBD_CDC_Setup+0x104>
 80065a0:	2b0b      	cmp	r3, #11
 80065a2:	dc38      	bgt.n	8006616 <USBD_CDC_Setup+0x11c>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <USBD_CDC_Setup+0xb4>
 80065a8:	2b0a      	cmp	r3, #10
 80065aa:	d014      	beq.n	80065d6 <USBD_CDC_Setup+0xdc>
 80065ac:	e033      	b.n	8006616 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d107      	bne.n	80065c8 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80065b8:	f107 030c 	add.w	r3, r7, #12
 80065bc:	2202      	movs	r2, #2
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 f930 	bl	8007826 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80065c6:	e02e      	b.n	8006626 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f001 f8c1 	bl	8007752 <USBD_CtlError>
			  ret = USBD_FAIL;
 80065d0:	2302      	movs	r3, #2
 80065d2:	75fb      	strb	r3, [r7, #23]
      break;
 80065d4:	e027      	b.n	8006626 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d107      	bne.n	80065f0 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80065e0:	f107 030f 	add.w	r3, r7, #15
 80065e4:	2201      	movs	r2, #1
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 f91c 	bl	8007826 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80065ee:	e01a      	b.n	8006626 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 f8ad 	bl	8007752 <USBD_CtlError>
			  ret = USBD_FAIL;
 80065f8:	2302      	movs	r3, #2
 80065fa:	75fb      	strb	r3, [r7, #23]
      break;
 80065fc:	e013      	b.n	8006626 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006604:	2b03      	cmp	r3, #3
 8006606:	d00d      	beq.n	8006624 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 f8a1 	bl	8007752 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006610:	2302      	movs	r3, #2
 8006612:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006614:	e006      	b.n	8006624 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 f89a 	bl	8007752 <USBD_CtlError>
      ret = USBD_FAIL;
 800661e:	2302      	movs	r3, #2
 8006620:	75fb      	strb	r3, [r7, #23]
      break;
 8006622:	e000      	b.n	8006626 <USBD_CDC_Setup+0x12c>
      break;
 8006624:	bf00      	nop
    }
    break;
 8006626:	e006      	b.n	8006636 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 f891 	bl	8007752 <USBD_CtlError>
    ret = USBD_FAIL;
 8006630:	2302      	movs	r3, #2
 8006632:	75fb      	strb	r3, [r7, #23]
    break;
 8006634:	bf00      	nop
  }

  return ret;
 8006636:	7dfb      	ldrb	r3, [r7, #23]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006652:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800665a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006662:	2b00      	cmp	r3, #0
 8006664:	d03a      	beq.n	80066dc <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	331c      	adds	r3, #28
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d029      	beq.n	80066d0 <USBD_CDC_DataIn+0x90>
 800667c:	78fa      	ldrb	r2, [r7, #3]
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	331c      	adds	r3, #28
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	78f9      	ldrb	r1, [r7, #3]
 8006690:	68b8      	ldr	r0, [r7, #8]
 8006692:	460b      	mov	r3, r1
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	4403      	add	r3, r0
 800669c:	3338      	adds	r3, #56	; 0x38
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80066a4:	fb03 f301 	mul.w	r3, r3, r1
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d110      	bne.n	80066d0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80066ae:	78fa      	ldrb	r2, [r7, #3]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	331c      	adds	r3, #28
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80066c2:	78f9      	ldrb	r1, [r7, #3]
 80066c4:	2300      	movs	r3, #0
 80066c6:	2200      	movs	r2, #0
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 fd20 	bl	800810e <USBD_LL_Transmit>
 80066ce:	e003      	b.n	80066d8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	e000      	b.n	80066de <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80066dc:	2302      	movs	r3, #2
  }
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	460b      	mov	r3, r1
 80066f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fd4b 	bl	800819a <USBD_LL_GetRxDataSize>
 8006704:	4602      	mov	r2, r0
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00d      	beq.n	8006732 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800672a:	4611      	mov	r1, r2
 800672c:	4798      	blx	r3

    return USBD_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	e000      	b.n	8006734 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006732:	2302      	movs	r3, #2
  }
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800674a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006752:	2b00      	cmp	r3, #0
 8006754:	d015      	beq.n	8006782 <USBD_CDC_EP0_RxReady+0x46>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800675c:	2bff      	cmp	r3, #255	; 0xff
 800675e:	d010      	beq.n	8006782 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800676e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006776:	b292      	uxth	r2, r2
 8006778:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	22ff      	movs	r2, #255	; 0xff
 800677e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2243      	movs	r2, #67	; 0x43
 8006798:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800679a:	4b03      	ldr	r3, [pc, #12]	; (80067a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	2000009c 	.word	0x2000009c

080067ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2243      	movs	r2, #67	; 0x43
 80067b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80067ba:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20000058 	.word	0x20000058

080067cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2243      	movs	r2, #67	; 0x43
 80067d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80067da:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	200000e0 	.word	0x200000e0

080067ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	220a      	movs	r2, #10
 80067f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80067fa:	4b03      	ldr	r3, [pc, #12]	; (8006808 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	20000014 	.word	0x20000014

0800680c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006816:	2302      	movs	r3, #2
 8006818:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr

08006838 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	4613      	mov	r3, r2
 8006844:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800684c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006856:	88fa      	ldrh	r2, [r7, #6]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	371c      	adds	r7, #28
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr

0800686a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800687a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr

08006890 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800689e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d017      	beq.n	80068da <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	7c1b      	ldrb	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068bc:	2101      	movs	r1, #1
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fc48 	bl	8008154 <USBD_LL_PrepareReceive>
 80068c4:	e007      	b.n	80068d6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068cc:	2340      	movs	r3, #64	; 0x40
 80068ce:	2101      	movs	r1, #1
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 fc3f 	bl	8008154 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e000      	b.n	80068dc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80068da:	2302      	movs	r3, #2
  }
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	4613      	mov	r3, r2
 80068f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068f8:	2302      	movs	r3, #2
 80068fa:	e01a      	b.n	8006932 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	79fa      	ldrb	r2, [r7, #7]
 8006928:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f001 faac 	bl	8007e88 <USBD_LL_Init>

  return USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d006      	beq.n	800695c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
 800695a:	e001      	b.n	8006960 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800695c:	2302      	movs	r3, #2
 800695e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	bc80      	pop	{r7}
 800696a:	4770      	bx	lr

0800696c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 fae1 	bl	8007f3c <USBD_LL_Start>

  return USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	bc80      	pop	{r7}
 8006996:	4770      	bx	lr

08006998 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80069a4:	2302      	movs	r3, #2
 80069a6:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00c      	beq.n	80069cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	78fa      	ldrb	r2, [r7, #3]
 80069bc:	4611      	mov	r1, r2
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	78fa      	ldrb	r2, [r7, #3]
 80069ec:	4611      	mov	r1, r2
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
  return USBD_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fe63 	bl	80076da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006a22:	461a      	mov	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006a30:	f003 031f 	and.w	r3, r3, #31
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d016      	beq.n	8006a66 <USBD_LL_SetupStage+0x6a>
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d81c      	bhi.n	8006a76 <USBD_LL_SetupStage+0x7a>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <USBD_LL_SetupStage+0x4a>
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d008      	beq.n	8006a56 <USBD_LL_SetupStage+0x5a>
 8006a44:	e017      	b.n	8006a76 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f9c6 	bl	8006de0 <USBD_StdDevReq>
    break;
 8006a54:	e01a      	b.n	8006a8c <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa28 	bl	8006eb4 <USBD_StdItfReq>
    break;
 8006a64:	e012      	b.n	8006a8c <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa68 	bl	8006f44 <USBD_StdEPReq>
    break;
 8006a74:	e00a      	b.n	8006a8c <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006a7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fab9 	bl	8007ffc <USBD_LL_StallEP>
    break;
 8006a8a:	bf00      	nop
  }

  return USBD_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b086      	sub	sp, #24
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	607a      	str	r2, [r7, #4]
 8006aa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006aa4:	7afb      	ldrb	r3, [r7, #11]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d14b      	bne.n	8006b42 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006ab0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d134      	bne.n	8006b26 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d919      	bls.n	8006afc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	1ad2      	subs	r2, r2, r3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d203      	bcs.n	8006aea <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	e002      	b.n	8006af0 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fee2 	bl	80078be <USBD_CtlContinueRx>
 8006afa:	e038      	b.n	8006b6e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d105      	bne.n	8006b1e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fedf 	bl	80078e2 <USBD_CtlSendStatus>
 8006b24:	e023      	b.n	8006b6e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006b2c:	2b05      	cmp	r3, #5
 8006b2e:	d11e      	bne.n	8006b6e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006b38:	2100      	movs	r1, #0
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 fa5e 	bl	8007ffc <USBD_LL_StallEP>
 8006b40:	e015      	b.n	8006b6e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00d      	beq.n	8006b6a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d108      	bne.n	8006b6a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	7afa      	ldrb	r2, [r7, #11]
 8006b62:	4611      	mov	r1, r2
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	4798      	blx	r3
 8006b68:	e001      	b.n	8006b6e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e000      	b.n	8006b70 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	460b      	mov	r3, r1
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006b86:	7afb      	ldrb	r3, [r7, #11]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d17f      	bne.n	8006c8c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3314      	adds	r3, #20
 8006b90:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d15c      	bne.n	8006c56 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d915      	bls.n	8006bd4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	1ad2      	subs	r2, r2, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 fe4c 	bl	800785e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2100      	movs	r1, #0
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f001 fac1 	bl	8008154 <USBD_LL_PrepareReceive>
 8006bd2:	e04e      	b.n	8006c72 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	6912      	ldr	r2, [r2, #16]
 8006bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006be0:	fb02 f201 	mul.w	r2, r2, r1
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d11c      	bne.n	8006c24 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d316      	bcc.n	8006c24 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d20f      	bcs.n	8006c24 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c04:	2200      	movs	r2, #0
 8006c06:	2100      	movs	r1, #0
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 fe28 	bl	800785e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006c16:	2300      	movs	r3, #0
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f001 fa99 	bl	8008154 <USBD_LL_PrepareReceive>
 8006c22:	e026      	b.n	8006c72 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d105      	bne.n	8006c46 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c46:	2180      	movs	r1, #128	; 0x80
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f001 f9d7 	bl	8007ffc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 fe5a 	bl	8007908 <USBD_CtlReceiveStatus>
 8006c54:	e00d      	b.n	8006c72 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d004      	beq.n	8006c6a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d103      	bne.n	8006c72 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c6a:	2180      	movs	r1, #128	; 0x80
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f001 f9c5 	bl	8007ffc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d11d      	bne.n	8006cb8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f7ff fe81 	bl	8006984 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006c8a:	e015      	b.n	8006cb8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00d      	beq.n	8006cb4 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d108      	bne.n	8006cb4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	7afa      	ldrb	r2, [r7, #11]
 8006cac:	4611      	mov	r1, r2
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	4798      	blx	r3
 8006cb2:	e001      	b.n	8006cb8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e000      	b.n	8006cba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cca:	2340      	movs	r3, #64	; 0x40
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 f94e 	bl	8007f72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2240      	movs	r2, #64	; 0x40
 8006ce2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ce6:	2340      	movs	r3, #64	; 0x40
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2180      	movs	r1, #128	; 0x80
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 f940 	bl	8007f72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2240      	movs	r2, #64	; 0x40
 8006cfc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d009      	beq.n	8006d3a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6852      	ldr	r2, [r2, #4]
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	4611      	mov	r1, r2
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
  }

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	78fa      	ldrb	r2, [r7, #3]
 8006d54:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr

08006d62 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2204      	movs	r2, #4
 8006d7a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr

08006d8a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr

08006daa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d10b      	bne.n	8006dd4 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006df6:	2b40      	cmp	r3, #64	; 0x40
 8006df8:	d005      	beq.n	8006e06 <USBD_StdDevReq+0x26>
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	d84f      	bhi.n	8006e9e <USBD_StdDevReq+0xbe>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d009      	beq.n	8006e16 <USBD_StdDevReq+0x36>
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d14b      	bne.n	8006e9e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
    break;
 8006e14:	e048      	b.n	8006ea8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	2b09      	cmp	r3, #9
 8006e1c:	d839      	bhi.n	8006e92 <USBD_StdDevReq+0xb2>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USBD_StdDevReq+0x44>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e75 	.word	0x08006e75
 8006e28:	08006e89 	.word	0x08006e89
 8006e2c:	08006e93 	.word	0x08006e93
 8006e30:	08006e7f 	.word	0x08006e7f
 8006e34:	08006e93 	.word	0x08006e93
 8006e38:	08006e57 	.word	0x08006e57
 8006e3c:	08006e4d 	.word	0x08006e4d
 8006e40:	08006e93 	.word	0x08006e93
 8006e44:	08006e6b 	.word	0x08006e6b
 8006e48:	08006e61 	.word	0x08006e61
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f9da 	bl	8007208 <USBD_GetDescriptor>
      break;
 8006e54:	e022      	b.n	8006e9c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 facf 	bl	80073fc <USBD_SetAddress>
      break;
 8006e5e:	e01d      	b.n	8006e9c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fb0e 	bl	8007484 <USBD_SetConfig>
      break;
 8006e68:	e018      	b.n	8006e9c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fb97 	bl	80075a0 <USBD_GetConfig>
      break;
 8006e72:	e013      	b.n	8006e9c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fbc7 	bl	800760a <USBD_GetStatus>
      break;
 8006e7c:	e00e      	b.n	8006e9c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fbf5 	bl	8007670 <USBD_SetFeature>
      break;
 8006e86:	e009      	b.n	8006e9c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fc04 	bl	8007698 <USBD_ClrFeature>
      break;
 8006e90:	e004      	b.n	8006e9c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fc5c 	bl	8007752 <USBD_CtlError>
      break;
 8006e9a:	bf00      	nop
    }
    break;
 8006e9c:	e004      	b.n	8006ea8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fc56 	bl	8007752 <USBD_CtlError>
    break;
 8006ea6:	bf00      	nop
  }

  return ret;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop

08006eb4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d005      	beq.n	8006eda <USBD_StdItfReq+0x26>
 8006ece:	2b40      	cmp	r3, #64	; 0x40
 8006ed0:	d82e      	bhi.n	8006f30 <USBD_StdItfReq+0x7c>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <USBD_StdItfReq+0x26>
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d12a      	bne.n	8006f30 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d81d      	bhi.n	8006f22 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	889b      	ldrh	r3, [r3, #4]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d813      	bhi.n	8006f18 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	4798      	blx	r3
 8006efe:	4603      	mov	r3, r0
 8006f00:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	88db      	ldrh	r3, [r3, #6]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d110      	bne.n	8006f2c <USBD_StdItfReq+0x78>
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10d      	bne.n	8006f2c <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fce6 	bl	80078e2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006f16:	e009      	b.n	8006f2c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fc19 	bl	8007752 <USBD_CtlError>
      break;
 8006f20:	e004      	b.n	8006f2c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fc14 	bl	8007752 <USBD_CtlError>
      break;
 8006f2a:	e000      	b.n	8006f2e <USBD_StdItfReq+0x7a>
      break;
 8006f2c:	bf00      	nop
    }
    break;
 8006f2e:	e004      	b.n	8006f3a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fc0d 	bl	8007752 <USBD_CtlError>
    break;
 8006f38:	bf00      	nop
  }

  return USBD_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	889b      	ldrh	r3, [r3, #4]
 8006f56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f60:	2b40      	cmp	r3, #64	; 0x40
 8006f62:	d007      	beq.n	8006f74 <USBD_StdEPReq+0x30>
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	f200 8144 	bhi.w	80071f2 <USBD_StdEPReq+0x2ae>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <USBD_StdEPReq+0x40>
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	f040 813f 	bne.w	80071f2 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
    break;
 8006f82:	e13b      	b.n	80071fc <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d10a      	bne.n	8006fa6 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	e12b      	b.n	80071fe <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	785b      	ldrb	r3, [r3, #1]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d007      	beq.n	8006fbe <USBD_StdEPReq+0x7a>
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	f300 8119 	bgt.w	80071e6 <USBD_StdEPReq+0x2a2>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d072      	beq.n	800709e <USBD_StdEPReq+0x15a>
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d03a      	beq.n	8007032 <USBD_StdEPReq+0xee>
 8006fbc:	e113      	b.n	80071e6 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d002      	beq.n	8006fce <USBD_StdEPReq+0x8a>
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d015      	beq.n	8006ff8 <USBD_StdEPReq+0xb4>
 8006fcc:	e02b      	b.n	8007026 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00c      	beq.n	8006fee <USBD_StdEPReq+0xaa>
 8006fd4:	7bbb      	ldrb	r3, [r7, #14]
 8006fd6:	2b80      	cmp	r3, #128	; 0x80
 8006fd8:	d009      	beq.n	8006fee <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 f80c 	bl	8007ffc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006fe4:	2180      	movs	r1, #128	; 0x80
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 f808 	bl	8007ffc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006fec:	e020      	b.n	8007030 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fbae 	bl	8007752 <USBD_CtlError>
        break;
 8006ff6:	e01b      	b.n	8007030 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	885b      	ldrh	r3, [r3, #2]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10e      	bne.n	800701e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00b      	beq.n	800701e <USBD_StdEPReq+0xda>
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b80      	cmp	r3, #128	; 0x80
 800700a:	d008      	beq.n	800701e <USBD_StdEPReq+0xda>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	88db      	ldrh	r3, [r3, #6]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 ffef 	bl	8007ffc <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fc5f 	bl	80078e2 <USBD_CtlSendStatus>

        break;
 8007024:	e004      	b.n	8007030 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fb92 	bl	8007752 <USBD_CtlError>
        break;
 800702e:	bf00      	nop
      }
      break;
 8007030:	e0de      	b.n	80071f0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007038:	2b02      	cmp	r3, #2
 800703a:	d002      	beq.n	8007042 <USBD_StdEPReq+0xfe>
 800703c:	2b03      	cmp	r3, #3
 800703e:	d015      	beq.n	800706c <USBD_StdEPReq+0x128>
 8007040:	e026      	b.n	8007090 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <USBD_StdEPReq+0x11e>
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b80      	cmp	r3, #128	; 0x80
 800704c:	d009      	beq.n	8007062 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 ffd2 	bl	8007ffc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007058:	2180      	movs	r1, #128	; 0x80
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 ffce 	bl	8007ffc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007060:	e01c      	b.n	800709c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fb74 	bl	8007752 <USBD_CtlError>
        break;
 800706a:	e017      	b.n	800709c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	885b      	ldrh	r3, [r3, #2]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d112      	bne.n	800709a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 ffd9 	bl	800803a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fc2a 	bl	80078e2 <USBD_CtlSendStatus>
        }
        break;
 800708e:	e004      	b.n	800709a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb5d 	bl	8007752 <USBD_CtlError>
        break;
 8007098:	e000      	b.n	800709c <USBD_StdEPReq+0x158>
        break;
 800709a:	bf00      	nop
      }
      break;
 800709c:	e0a8      	b.n	80071f0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d002      	beq.n	80070ae <USBD_StdEPReq+0x16a>
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d031      	beq.n	8007110 <USBD_StdEPReq+0x1cc>
 80070ac:	e095      	b.n	80071da <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d007      	beq.n	80070c4 <USBD_StdEPReq+0x180>
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	2b80      	cmp	r3, #128	; 0x80
 80070b8:	d004      	beq.n	80070c4 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fb48 	bl	8007752 <USBD_CtlError>
          break;
 80070c2:	e08f      	b.n	80071e4 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80070c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	da0b      	bge.n	80070e4 <USBD_StdEPReq+0x1a0>
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	3310      	adds	r3, #16
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	3304      	adds	r3, #4
 80070e2:	e00a      	b.n	80070fa <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	4413      	add	r3, r2
 80070fa:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2202      	movs	r2, #2
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fb8c 	bl	8007826 <USBD_CtlSendData>
          break;
 800710e:	e069      	b.n	80071e4 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	da11      	bge.n	800713c <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	f003 020f 	and.w	r2, r3, #15
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	3318      	adds	r3, #24
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d117      	bne.n	8007162 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fb0c 	bl	8007752 <USBD_CtlError>
            break;
 800713a:	e053      	b.n	80071e4 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	f003 020f 	and.w	r2, r3, #15
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 faf9 	bl	8007752 <USBD_CtlError>
            break;
 8007160:	e040      	b.n	80071e4 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	da0b      	bge.n	8007182 <USBD_StdEPReq+0x23e>
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	3310      	adds	r3, #16
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	4413      	add	r3, r2
 800717e:	3304      	adds	r3, #4
 8007180:	e00a      	b.n	8007198 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <USBD_StdEPReq+0x262>
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b80      	cmp	r3, #128	; 0x80
 80071a4:	d103      	bne.n	80071ae <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	e00e      	b.n	80071cc <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 ff60 	bl	8008078 <USBD_LL_IsStallEP>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2201      	movs	r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	e002      	b.n	80071cc <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2202      	movs	r2, #2
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fb27 	bl	8007826 <USBD_CtlSendData>
          break;
 80071d8:	e004      	b.n	80071e4 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fab8 	bl	8007752 <USBD_CtlError>
        break;
 80071e2:	bf00      	nop
      }
      break;
 80071e4:	e004      	b.n	80071f0 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fab2 	bl	8007752 <USBD_CtlError>
      break;
 80071ee:	bf00      	nop
    }
    break;
 80071f0:	e004      	b.n	80071fc <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 faac 	bl	8007752 <USBD_CtlError>
    break;
 80071fa:	bf00      	nop
  }

  return ret;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	885b      	ldrh	r3, [r3, #2]
 8007216:	0a1b      	lsrs	r3, r3, #8
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	2b06      	cmp	r3, #6
 800721e:	f200 80c9 	bhi.w	80073b4 <USBD_GetDescriptor+0x1ac>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <USBD_GetDescriptor+0x20>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007245 	.word	0x08007245
 800722c:	0800725d 	.word	0x0800725d
 8007230:	0800729d 	.word	0x0800729d
 8007234:	080073b5 	.word	0x080073b5
 8007238:	080073b5 	.word	0x080073b5
 800723c:	08007361 	.word	0x08007361
 8007240:	08007387 	.word	0x08007387
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	7c12      	ldrb	r2, [r2, #16]
 8007250:	f107 010a 	add.w	r1, r7, #10
 8007254:	4610      	mov	r0, r2
 8007256:	4798      	blx	r3
 8007258:	60f8      	str	r0, [r7, #12]
    break;
 800725a:	e0b0      	b.n	80073be <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	7c1b      	ldrb	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10d      	bne.n	8007280 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726c:	f107 020a 	add.w	r2, r7, #10
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
 8007274:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	2202      	movs	r2, #2
 800727c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800727e:	e09e      	b.n	80073be <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	f107 020a 	add.w	r2, r7, #10
 800728c:	4610      	mov	r0, r2
 800728e:	4798      	blx	r3
 8007290:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	2202      	movs	r2, #2
 8007298:	701a      	strb	r2, [r3, #0]
    break;
 800729a:	e090      	b.n	80073be <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	885b      	ldrh	r3, [r3, #2]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d856      	bhi.n	8007354 <USBD_GetDescriptor+0x14c>
 80072a6:	a201      	add	r2, pc, #4	; (adr r2, 80072ac <USBD_GetDescriptor+0xa4>)
 80072a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ac:	080072c5 	.word	0x080072c5
 80072b0:	080072dd 	.word	0x080072dd
 80072b4:	080072f5 	.word	0x080072f5
 80072b8:	0800730d 	.word	0x0800730d
 80072bc:	08007325 	.word	0x08007325
 80072c0:	0800733d 	.word	0x0800733d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7c12      	ldrb	r2, [r2, #16]
 80072d0:	f107 010a 	add.w	r1, r7, #10
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
 80072d8:	60f8      	str	r0, [r7, #12]
      break;
 80072da:	e040      	b.n	800735e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7c12      	ldrb	r2, [r2, #16]
 80072e8:	f107 010a 	add.w	r1, r7, #10
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	60f8      	str	r0, [r7, #12]
      break;
 80072f2:	e034      	b.n	800735e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	7c12      	ldrb	r2, [r2, #16]
 8007300:	f107 010a 	add.w	r1, r7, #10
 8007304:	4610      	mov	r0, r2
 8007306:	4798      	blx	r3
 8007308:	60f8      	str	r0, [r7, #12]
      break;
 800730a:	e028      	b.n	800735e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	7c12      	ldrb	r2, [r2, #16]
 8007318:	f107 010a 	add.w	r1, r7, #10
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
 8007320:	60f8      	str	r0, [r7, #12]
      break;
 8007322:	e01c      	b.n	800735e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	7c12      	ldrb	r2, [r2, #16]
 8007330:	f107 010a 	add.w	r1, r7, #10
 8007334:	4610      	mov	r0, r2
 8007336:	4798      	blx	r3
 8007338:	60f8      	str	r0, [r7, #12]
      break;
 800733a:	e010      	b.n	800735e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	7c12      	ldrb	r2, [r2, #16]
 8007348:	f107 010a 	add.w	r1, r7, #10
 800734c:	4610      	mov	r0, r2
 800734e:	4798      	blx	r3
 8007350:	60f8      	str	r0, [r7, #12]
      break;
 8007352:	e004      	b.n	800735e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f9fb 	bl	8007752 <USBD_CtlError>
      return;
 800735c:	e04b      	b.n	80073f6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800735e:	e02e      	b.n	80073be <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7c1b      	ldrb	r3, [r3, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d109      	bne.n	800737c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800736e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007370:	f107 020a 	add.w	r2, r7, #10
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
 8007378:	60f8      	str	r0, [r7, #12]
      break;
 800737a:	e020      	b.n	80073be <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f9e7 	bl	8007752 <USBD_CtlError>
      return;
 8007384:	e037      	b.n	80073f6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	7c1b      	ldrb	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10d      	bne.n	80073aa <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	f107 020a 	add.w	r2, r7, #10
 800739a:	4610      	mov	r0, r2
 800739c:	4798      	blx	r3
 800739e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	2207      	movs	r2, #7
 80073a6:	701a      	strb	r2, [r3, #0]
      break;
 80073a8:	e009      	b.n	80073be <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f9d0 	bl	8007752 <USBD_CtlError>
      return;
 80073b2:	e020      	b.n	80073f6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f9cb 	bl	8007752 <USBD_CtlError>
    return;
 80073bc:	e01b      	b.n	80073f6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80073be:	897b      	ldrh	r3, [r7, #10]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d011      	beq.n	80073e8 <USBD_GetDescriptor+0x1e0>
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	88db      	ldrh	r3, [r3, #6]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00d      	beq.n	80073e8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	88da      	ldrh	r2, [r3, #6]
 80073d0:	897b      	ldrh	r3, [r7, #10]
 80073d2:	4293      	cmp	r3, r2
 80073d4:	bf28      	it	cs
 80073d6:	4613      	movcs	r3, r2
 80073d8:	b29b      	uxth	r3, r3
 80073da:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80073dc:	897b      	ldrh	r3, [r7, #10]
 80073de:	461a      	mov	r2, r3
 80073e0:	68f9      	ldr	r1, [r7, #12]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa1f 	bl	8007826 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	88db      	ldrh	r3, [r3, #6]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fa76 	bl	80078e2 <USBD_CtlSendStatus>
  }
}
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	889b      	ldrh	r3, [r3, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d130      	bne.n	8007470 <USBD_SetAddress+0x74>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	88db      	ldrh	r3, [r3, #6]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d12c      	bne.n	8007470 <USBD_SetAddress+0x74>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	885b      	ldrh	r3, [r3, #2]
 800741a:	2b7f      	cmp	r3, #127	; 0x7f
 800741c:	d828      	bhi.n	8007470 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	885b      	ldrh	r3, [r3, #2]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007428:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007430:	2b03      	cmp	r3, #3
 8007432:	d104      	bne.n	800743e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f98b 	bl	8007752 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743c:	e01d      	b.n	800747a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	7bfa      	ldrb	r2, [r7, #15]
 8007442:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fe40 	bl	80080d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fa46 	bl	80078e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007464:	e009      	b.n	800747a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800746e:	e004      	b.n	800747a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f96d 	bl	8007752 <USBD_CtlError>
  }
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	885b      	ldrh	r3, [r3, #2]
 8007492:	b2da      	uxtb	r2, r3
 8007494:	4b41      	ldr	r3, [pc, #260]	; (800759c <USBD_SetConfig+0x118>)
 8007496:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007498:	4b40      	ldr	r3, [pc, #256]	; (800759c <USBD_SetConfig+0x118>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d904      	bls.n	80074aa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f955 	bl	8007752 <USBD_CtlError>
 80074a8:	e075      	b.n	8007596 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d002      	beq.n	80074ba <USBD_SetConfig+0x36>
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d023      	beq.n	8007500 <USBD_SetConfig+0x7c>
 80074b8:	e062      	b.n	8007580 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80074ba:	4b38      	ldr	r3, [pc, #224]	; (800759c <USBD_SetConfig+0x118>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d01a      	beq.n	80074f8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80074c2:	4b36      	ldr	r3, [pc, #216]	; (800759c <USBD_SetConfig+0x118>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2203      	movs	r2, #3
 80074d0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074d4:	4b31      	ldr	r3, [pc, #196]	; (800759c <USBD_SetConfig+0x118>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff fa5c 	bl	8006998 <USBD_SetClassConfig>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d104      	bne.n	80074f0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f932 	bl	8007752 <USBD_CtlError>
          return;
 80074ee:	e052      	b.n	8007596 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f9f6 	bl	80078e2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80074f6:	e04e      	b.n	8007596 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f9f2 	bl	80078e2 <USBD_CtlSendStatus>
      break;
 80074fe:	e04a      	b.n	8007596 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007500:	4b26      	ldr	r3, [pc, #152]	; (800759c <USBD_SetConfig+0x118>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d112      	bne.n	800752e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007510:	4b22      	ldr	r3, [pc, #136]	; (800759c <USBD_SetConfig+0x118>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800751a:	4b20      	ldr	r3, [pc, #128]	; (800759c <USBD_SetConfig+0x118>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff fa58 	bl	80069d6 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f9db 	bl	80078e2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800752c:	e033      	b.n	8007596 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800752e:	4b1b      	ldr	r3, [pc, #108]	; (800759c <USBD_SetConfig+0x118>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	429a      	cmp	r2, r3
 800753a:	d01d      	beq.n	8007578 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff fa46 	bl	80069d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800754a:	4b14      	ldr	r3, [pc, #80]	; (800759c <USBD_SetConfig+0x118>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007554:	4b11      	ldr	r3, [pc, #68]	; (800759c <USBD_SetConfig+0x118>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fa1c 	bl	8006998 <USBD_SetClassConfig>
 8007560:	4603      	mov	r3, r0
 8007562:	2b02      	cmp	r3, #2
 8007564:	d104      	bne.n	8007570 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f8f2 	bl	8007752 <USBD_CtlError>
          return;
 800756e:	e012      	b.n	8007596 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f9b6 	bl	80078e2 <USBD_CtlSendStatus>
      break;
 8007576:	e00e      	b.n	8007596 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f9b2 	bl	80078e2 <USBD_CtlSendStatus>
      break;
 800757e:	e00a      	b.n	8007596 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f8e5 	bl	8007752 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007588:	4b04      	ldr	r3, [pc, #16]	; (800759c <USBD_SetConfig+0x118>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fa21 	bl	80069d6 <USBD_ClrClassConfig>
      break;
 8007594:	bf00      	nop
    }
  }
}
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	200001a4 	.word	0x200001a4

080075a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	88db      	ldrh	r3, [r3, #6]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d004      	beq.n	80075bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8cc 	bl	8007752 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80075ba:	e022      	b.n	8007602 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	dc02      	bgt.n	80075cc <USBD_GetConfig+0x2c>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	dc03      	bgt.n	80075d2 <USBD_GetConfig+0x32>
 80075ca:	e015      	b.n	80075f8 <USBD_GetConfig+0x58>
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d00b      	beq.n	80075e8 <USBD_GetConfig+0x48>
 80075d0:	e012      	b.n	80075f8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3308      	adds	r3, #8
 80075dc:	2201      	movs	r2, #1
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f920 	bl	8007826 <USBD_CtlSendData>
      break;
 80075e6:	e00c      	b.n	8007602 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3304      	adds	r3, #4
 80075ec:	2201      	movs	r2, #1
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f918 	bl	8007826 <USBD_CtlSendData>
      break;
 80075f6:	e004      	b.n	8007602 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f8a9 	bl	8007752 <USBD_CtlError>
      break;
 8007600:	bf00      	nop
}
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800761a:	3b01      	subs	r3, #1
 800761c:	2b02      	cmp	r3, #2
 800761e:	d81e      	bhi.n	800765e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	88db      	ldrh	r3, [r3, #6]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d004      	beq.n	8007632 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f891 	bl	8007752 <USBD_CtlError>
      break;
 8007630:	e01a      	b.n	8007668 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f043 0202 	orr.w	r2, r3, #2
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	330c      	adds	r3, #12
 8007652:	2202      	movs	r2, #2
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f8e5 	bl	8007826 <USBD_CtlSendData>
    break;
 800765c:	e004      	b.n	8007668 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f876 	bl	8007752 <USBD_CtlError>
    break;
 8007666:	bf00      	nop
  }
}
 8007668:	bf00      	nop
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	885b      	ldrh	r3, [r3, #2]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d106      	bne.n	8007690 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f929 	bl	80078e2 <USBD_CtlSendStatus>
  }

}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076a8:	3b01      	subs	r3, #1
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d80b      	bhi.n	80076c6 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	885b      	ldrh	r3, [r3, #2]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d10c      	bne.n	80076d0 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f90f 	bl	80078e2 <USBD_CtlSendStatus>
    }
    break;
 80076c4:	e004      	b.n	80076d0 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f842 	bl	8007752 <USBD_CtlError>
    break;
 80076ce:	e000      	b.n	80076d2 <USBD_ClrFeature+0x3a>
    break;
 80076d0:	bf00      	nop
  }
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781a      	ldrb	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	785a      	ldrb	r2, [r3, #1]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	3302      	adds	r3, #2
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	3303      	adds	r3, #3
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	b29b      	uxth	r3, r3
 8007708:	4413      	add	r3, r2
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	3304      	adds	r3, #4
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b29a      	uxth	r2, r3
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	3305      	adds	r3, #5
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	021b      	lsls	r3, r3, #8
 8007722:	b29b      	uxth	r3, r3
 8007724:	4413      	add	r3, r2
 8007726:	b29a      	uxth	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	3306      	adds	r3, #6
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	b29a      	uxth	r2, r3
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	3307      	adds	r3, #7
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	b29b      	uxth	r3, r3
 8007740:	4413      	add	r3, r2
 8007742:	b29a      	uxth	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	80da      	strh	r2, [r3, #6]

}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	bc80      	pop	{r7}
 8007750:	4770      	bx	lr

08007752 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800775c:	2180      	movs	r1, #128	; 0x80
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fc4c 	bl	8007ffc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007764:	2100      	movs	r1, #0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fc48 	bl	8007ffc <USBD_LL_StallEP>
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d032      	beq.n	80077f0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f834 	bl	80077f8 <USBD_GetLen>
 8007790:	4603      	mov	r3, r0
 8007792:	3301      	adds	r3, #1
 8007794:	b29b      	uxth	r3, r3
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	75fa      	strb	r2, [r7, #23]
 80077a4:	461a      	mov	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	4413      	add	r3, r2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	7812      	ldrb	r2, [r2, #0]
 80077ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	75fa      	strb	r2, [r7, #23]
 80077b6:	461a      	mov	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4413      	add	r3, r2
 80077bc:	2203      	movs	r2, #3
 80077be:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80077c0:	e012      	b.n	80077e8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	60fa      	str	r2, [r7, #12]
 80077c8:	7dfa      	ldrb	r2, [r7, #23]
 80077ca:	1c51      	adds	r1, r2, #1
 80077cc:	75f9      	strb	r1, [r7, #23]
 80077ce:	4611      	mov	r1, r2
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	440a      	add	r2, r1
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	75fa      	strb	r2, [r7, #23]
 80077de:	461a      	mov	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4413      	add	r3, r2
 80077e4:	2200      	movs	r2, #0
 80077e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e8      	bne.n	80077c2 <USBD_GetString+0x4e>
    }
  }
}
 80077f0:	bf00      	nop
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007804:	e005      	b.n	8007812 <USBD_GetLen+0x1a>
    {
        len++;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	3301      	adds	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3301      	adds	r3, #1
 8007810:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1f5      	bne.n	8007806 <USBD_GetLen+0xe>
    }

    return len;
 800781a:	7bfb      	ldrb	r3, [r7, #15]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	bc80      	pop	{r7}
 8007824:	4770      	bx	lr

08007826 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	4613      	mov	r3, r2
 8007832:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2202      	movs	r2, #2
 8007838:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800783c:	88fa      	ldrh	r2, [r7, #6]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007842:	88fa      	ldrh	r2, [r7, #6]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007848:	88fb      	ldrh	r3, [r7, #6]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	2100      	movs	r1, #0
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 fc5d 	bl	800810e <USBD_LL_Transmit>

  return USBD_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	4613      	mov	r3, r2
 800786a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800786c:	88fb      	ldrh	r3, [r7, #6]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	2100      	movs	r1, #0
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 fc4b 	bl	800810e <USBD_LL_Transmit>

  return USBD_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	4613      	mov	r3, r2
 800788e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2203      	movs	r2, #3
 8007894:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007898:	88fa      	ldrh	r2, [r7, #6]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80078a0:	88fa      	ldrh	r2, [r7, #6]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80078a8:	88fb      	ldrh	r3, [r7, #6]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	2100      	movs	r1, #0
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 fc50 	bl	8008154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	4613      	mov	r3, r2
 80078ca:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078cc:	88fb      	ldrh	r3, [r7, #6]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	2100      	movs	r1, #0
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 fc3e 	bl	8008154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2204      	movs	r2, #4
 80078ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078f2:	2300      	movs	r3, #0
 80078f4:	2200      	movs	r2, #0
 80078f6:	2100      	movs	r1, #0
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc08 	bl	800810e <USBD_LL_Transmit>

  return USBD_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2205      	movs	r2, #5
 8007914:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007918:	2300      	movs	r3, #0
 800791a:	2200      	movs	r2, #0
 800791c:	2100      	movs	r1, #0
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fc18 	bl	8008154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007934:	2200      	movs	r2, #0
 8007936:	4912      	ldr	r1, [pc, #72]	; (8007980 <MX_USB_DEVICE_Init+0x50>)
 8007938:	4812      	ldr	r0, [pc, #72]	; (8007984 <MX_USB_DEVICE_Init+0x54>)
 800793a:	f7fe ffd3 	bl	80068e4 <USBD_Init>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007944:	f7f9 f9e6 	bl	8000d14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007948:	490f      	ldr	r1, [pc, #60]	; (8007988 <MX_USB_DEVICE_Init+0x58>)
 800794a:	480e      	ldr	r0, [pc, #56]	; (8007984 <MX_USB_DEVICE_Init+0x54>)
 800794c:	f7fe fff5 	bl	800693a <USBD_RegisterClass>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007956:	f7f9 f9dd 	bl	8000d14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800795a:	490c      	ldr	r1, [pc, #48]	; (800798c <MX_USB_DEVICE_Init+0x5c>)
 800795c:	4809      	ldr	r0, [pc, #36]	; (8007984 <MX_USB_DEVICE_Init+0x54>)
 800795e:	f7fe ff55 	bl	800680c <USBD_CDC_RegisterInterface>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007968:	f7f9 f9d4 	bl	8000d14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800796c:	4805      	ldr	r0, [pc, #20]	; (8007984 <MX_USB_DEVICE_Init+0x54>)
 800796e:	f7fe fffd 	bl	800696c <USBD_Start>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007978:	f7f9 f9cc 	bl	8000d14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800797c:	bf00      	nop
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20000134 	.word	0x20000134
 8007984:	200004a8 	.word	0x200004a8
 8007988:	20000020 	.word	0x20000020
 800798c:	20000124 	.word	0x20000124

08007990 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007994:	2200      	movs	r2, #0
 8007996:	4905      	ldr	r1, [pc, #20]	; (80079ac <CDC_Init_FS+0x1c>)
 8007998:	4805      	ldr	r0, [pc, #20]	; (80079b0 <CDC_Init_FS+0x20>)
 800799a:	f7fe ff4d 	bl	8006838 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800799e:	4905      	ldr	r1, [pc, #20]	; (80079b4 <CDC_Init_FS+0x24>)
 80079a0:	4803      	ldr	r0, [pc, #12]	; (80079b0 <CDC_Init_FS+0x20>)
 80079a2:	f7fe ff62 	bl	800686a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20000b2c 	.word	0x20000b2c
 80079b0:	200004a8 	.word	0x200004a8
 80079b4:	20000744 	.word	0x20000744

080079b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079be:	4618      	mov	r0, r3
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr
	...

080079c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
 80079d4:	4613      	mov	r3, r2
 80079d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	2b23      	cmp	r3, #35	; 0x23
 80079dc:	d84a      	bhi.n	8007a74 <CDC_Control_FS+0xac>
 80079de:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <CDC_Control_FS+0x1c>)
 80079e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e4:	08007a75 	.word	0x08007a75
 80079e8:	08007a75 	.word	0x08007a75
 80079ec:	08007a75 	.word	0x08007a75
 80079f0:	08007a75 	.word	0x08007a75
 80079f4:	08007a75 	.word	0x08007a75
 80079f8:	08007a75 	.word	0x08007a75
 80079fc:	08007a75 	.word	0x08007a75
 8007a00:	08007a75 	.word	0x08007a75
 8007a04:	08007a75 	.word	0x08007a75
 8007a08:	08007a75 	.word	0x08007a75
 8007a0c:	08007a75 	.word	0x08007a75
 8007a10:	08007a75 	.word	0x08007a75
 8007a14:	08007a75 	.word	0x08007a75
 8007a18:	08007a75 	.word	0x08007a75
 8007a1c:	08007a75 	.word	0x08007a75
 8007a20:	08007a75 	.word	0x08007a75
 8007a24:	08007a75 	.word	0x08007a75
 8007a28:	08007a75 	.word	0x08007a75
 8007a2c:	08007a75 	.word	0x08007a75
 8007a30:	08007a75 	.word	0x08007a75
 8007a34:	08007a75 	.word	0x08007a75
 8007a38:	08007a75 	.word	0x08007a75
 8007a3c:	08007a75 	.word	0x08007a75
 8007a40:	08007a75 	.word	0x08007a75
 8007a44:	08007a75 	.word	0x08007a75
 8007a48:	08007a75 	.word	0x08007a75
 8007a4c:	08007a75 	.word	0x08007a75
 8007a50:	08007a75 	.word	0x08007a75
 8007a54:	08007a75 	.word	0x08007a75
 8007a58:	08007a75 	.word	0x08007a75
 8007a5c:	08007a75 	.word	0x08007a75
 8007a60:	08007a75 	.word	0x08007a75
 8007a64:	08007a75 	.word	0x08007a75
 8007a68:	08007a75 	.word	0x08007a75
 8007a6c:	08007a75 	.word	0x08007a75
 8007a70:	08007a75 	.word	0x08007a75
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a74:	bf00      	nop
  }

  return (USBD_OK);
 8007a76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop

08007a84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	4805      	ldr	r0, [pc, #20]	; (8007aa8 <CDC_Receive_FS+0x24>)
 8007a92:	f7fe feea 	bl	800686a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a96:	4804      	ldr	r0, [pc, #16]	; (8007aa8 <CDC_Receive_FS+0x24>)
 8007a98:	f7fe fefa 	bl	8006890 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	200004a8 	.word	0x200004a8

08007aac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6039      	str	r1, [r7, #0]
 8007ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2212      	movs	r2, #18
 8007abc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007abe:	4b03      	ldr	r3, [pc, #12]	; (8007acc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20000150 	.word	0x20000150

08007ad0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	6039      	str	r1, [r7, #0]
 8007ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2204      	movs	r2, #4
 8007ae0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ae2:	4b03      	ldr	r3, [pc, #12]	; (8007af0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bc80      	pop	{r7}
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000164 	.word	0x20000164

08007af4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	6039      	str	r1, [r7, #0]
 8007afe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d105      	bne.n	8007b12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	4907      	ldr	r1, [pc, #28]	; (8007b28 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b0a:	4808      	ldr	r0, [pc, #32]	; (8007b2c <USBD_FS_ProductStrDescriptor+0x38>)
 8007b0c:	f7ff fe32 	bl	8007774 <USBD_GetString>
 8007b10:	e004      	b.n	8007b1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	4904      	ldr	r1, [pc, #16]	; (8007b28 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b16:	4805      	ldr	r0, [pc, #20]	; (8007b2c <USBD_FS_ProductStrDescriptor+0x38>)
 8007b18:	f7ff fe2c 	bl	8007774 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b1c:	4b02      	ldr	r3, [pc, #8]	; (8007b28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000f14 	.word	0x20000f14
 8007b2c:	080082b4 	.word	0x080082b4

08007b30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	4904      	ldr	r1, [pc, #16]	; (8007b50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b40:	4804      	ldr	r0, [pc, #16]	; (8007b54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b42:	f7ff fe17 	bl	8007774 <USBD_GetString>
  return USBD_StrDesc;
 8007b46:	4b02      	ldr	r3, [pc, #8]	; (8007b50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20000f14 	.word	0x20000f14
 8007b54:	080082c0 	.word	0x080082c0

08007b58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	221a      	movs	r2, #26
 8007b68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b6a:	f000 f843 	bl	8007bf4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b6e:	4b02      	ldr	r3, [pc, #8]	; (8007b78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20000168 	.word	0x20000168

08007b7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	6039      	str	r1, [r7, #0]
 8007b86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d105      	bne.n	8007b9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	4907      	ldr	r1, [pc, #28]	; (8007bb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b92:	4808      	ldr	r0, [pc, #32]	; (8007bb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b94:	f7ff fdee 	bl	8007774 <USBD_GetString>
 8007b98:	e004      	b.n	8007ba4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	4904      	ldr	r1, [pc, #16]	; (8007bb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b9e:	4805      	ldr	r0, [pc, #20]	; (8007bb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ba0:	f7ff fde8 	bl	8007774 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ba4:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000f14 	.word	0x20000f14
 8007bb4:	080082d0 	.word	0x080082d0

08007bb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	6039      	str	r1, [r7, #0]
 8007bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4907      	ldr	r1, [pc, #28]	; (8007bec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bce:	4808      	ldr	r0, [pc, #32]	; (8007bf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bd0:	f7ff fdd0 	bl	8007774 <USBD_GetString>
 8007bd4:	e004      	b.n	8007be0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	4904      	ldr	r1, [pc, #16]	; (8007bec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bda:	4805      	ldr	r0, [pc, #20]	; (8007bf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bdc:	f7ff fdca 	bl	8007774 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007be0:	4b02      	ldr	r3, [pc, #8]	; (8007bec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20000f14 	.word	0x20000f14
 8007bf0:	080082dc 	.word	0x080082dc

08007bf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <Get_SerialNum+0x44>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c00:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <Get_SerialNum+0x48>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c06:	4b0e      	ldr	r3, [pc, #56]	; (8007c40 <Get_SerialNum+0x4c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4413      	add	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c1a:	2208      	movs	r2, #8
 8007c1c:	4909      	ldr	r1, [pc, #36]	; (8007c44 <Get_SerialNum+0x50>)
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 f814 	bl	8007c4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c24:	2204      	movs	r2, #4
 8007c26:	4908      	ldr	r1, [pc, #32]	; (8007c48 <Get_SerialNum+0x54>)
 8007c28:	68b8      	ldr	r0, [r7, #8]
 8007c2a:	f000 f80f 	bl	8007c4c <IntToUnicode>
  }
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	1ff80050 	.word	0x1ff80050
 8007c3c:	1ff80054 	.word	0x1ff80054
 8007c40:	1ff80058 	.word	0x1ff80058
 8007c44:	2000016a 	.word	0x2000016a
 8007c48:	2000017a 	.word	0x2000017a

08007c4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c5e:	2300      	movs	r3, #0
 8007c60:	75fb      	strb	r3, [r7, #23]
 8007c62:	e027      	b.n	8007cb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	0f1b      	lsrs	r3, r3, #28
 8007c68:	2b09      	cmp	r3, #9
 8007c6a:	d80b      	bhi.n	8007c84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	0f1b      	lsrs	r3, r3, #28
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	4619      	mov	r1, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	440b      	add	r3, r1
 8007c7c:	3230      	adds	r2, #48	; 0x30
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	e00a      	b.n	8007c9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	0f1b      	lsrs	r3, r3, #28
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	4619      	mov	r1, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	440b      	add	r3, r1
 8007c94:	3237      	adds	r2, #55	; 0x37
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	4413      	add	r3, r2
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	75fb      	strb	r3, [r7, #23]
 8007cb4:	7dfa      	ldrb	r2, [r7, #23]
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d3d3      	bcc.n	8007c64 <IntToUnicode+0x18>
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bc80      	pop	{r7}
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d106      	bne.n	8007ce8 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8007cda:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <HAL_PCDEx_SetConnectionState+0x38>)
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	4a08      	ldr	r2, [pc, #32]	; (8007d00 <HAL_PCDEx_SetConnectionState+0x38>)
 8007ce0:	f043 0301 	orr.w	r3, r3, #1
 8007ce4:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8007ce6:	e005      	b.n	8007cf4 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <HAL_PCDEx_SetConnectionState+0x38>)
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	4a04      	ldr	r2, [pc, #16]	; (8007d00 <HAL_PCDEx_SetConnectionState+0x38>)
 8007cee:	f023 0301 	bic.w	r3, r3, #1
 8007cf2:	6053      	str	r3, [r2, #4]
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	40010000 	.word	0x40010000

08007d04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a0d      	ldr	r2, [pc, #52]	; (8007d48 <HAL_PCD_MspInit+0x44>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d113      	bne.n	8007d3e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d16:	4b0d      	ldr	r3, [pc, #52]	; (8007d4c <HAL_PCD_MspInit+0x48>)
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	4a0c      	ldr	r2, [pc, #48]	; (8007d4c <HAL_PCD_MspInit+0x48>)
 8007d1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d20:	6253      	str	r3, [r2, #36]	; 0x24
 8007d22:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <HAL_PCD_MspInit+0x48>)
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	2014      	movs	r0, #20
 8007d34:	f7f9 faaf 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007d38:	2014      	movs	r0, #20
 8007d3a:	f7f9 fac8 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	40005c00 	.word	0x40005c00
 8007d4c:	40023800 	.word	0x40023800

08007d50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007d64:	4619      	mov	r1, r3
 8007d66:	4610      	mov	r0, r2
 8007d68:	f7fe fe48 	bl	80069fc <USBD_LL_SetupStage>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	00db      	lsls	r3, r3, #3
 8007d92:	440b      	add	r3, r1
 8007d94:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7fe fe7a 	bl	8006a96 <USBD_LL_DataOutStage>
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007dbc:	78fa      	ldrb	r2, [r7, #3]
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	440b      	add	r3, r1
 8007dca:	333c      	adds	r3, #60	; 0x3c
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	f7fe fed1 	bl	8006b78 <USBD_LL_DataInStage>
}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe ffdc 	bl	8006daa <USBD_LL_SOF>
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e02:	2301      	movs	r3, #1
 8007e04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d001      	beq.n	8007e12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e0e:	f7f8 ff81 	bl	8000d14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e18:	7bfa      	ldrb	r2, [r7, #15]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe ff91 	bl	8006d44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe ff4a 	bl	8006cc2 <USBD_LL_Reset>
}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
	...

08007e38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe ff8b 	bl	8006d62 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e54:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <HAL_PCD_SuspendCallback+0x30>)
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	4a03      	ldr	r2, [pc, #12]	; (8007e68 <HAL_PCD_SuspendCallback+0x30>)
 8007e5a:	f043 0306 	orr.w	r3, r3, #6
 8007e5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	e000ed00 	.word	0xe000ed00

08007e6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe ff85 	bl	8006d8a <USBD_LL_Resume>
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e90:	4a28      	ldr	r2, [pc, #160]	; (8007f34 <USBD_LL_Init+0xac>)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a26      	ldr	r2, [pc, #152]	; (8007f34 <USBD_LL_Init+0xac>)
 8007e9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8007ea0:	4b24      	ldr	r3, [pc, #144]	; (8007f34 <USBD_LL_Init+0xac>)
 8007ea2:	4a25      	ldr	r2, [pc, #148]	; (8007f38 <USBD_LL_Init+0xb0>)
 8007ea4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007ea6:	4b23      	ldr	r3, [pc, #140]	; (8007f34 <USBD_LL_Init+0xac>)
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007eac:	4b21      	ldr	r3, [pc, #132]	; (8007f34 <USBD_LL_Init+0xac>)
 8007eae:	2202      	movs	r2, #2
 8007eb0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007eb2:	4b20      	ldr	r3, [pc, #128]	; (8007f34 <USBD_LL_Init+0xac>)
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007eb8:	4b1e      	ldr	r3, [pc, #120]	; (8007f34 <USBD_LL_Init+0xac>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007ebe:	4b1d      	ldr	r3, [pc, #116]	; (8007f34 <USBD_LL_Init+0xac>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007ec4:	481b      	ldr	r0, [pc, #108]	; (8007f34 <USBD_LL_Init+0xac>)
 8007ec6:	f7f9 fbcd 	bl	8001664 <HAL_PCD_Init>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007ed0:	f7f8 ff20 	bl	8000d14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007eda:	2318      	movs	r3, #24
 8007edc:	2200      	movs	r2, #0
 8007ede:	2100      	movs	r1, #0
 8007ee0:	f7fa ffaa 	bl	8002e38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007eea:	2358      	movs	r3, #88	; 0x58
 8007eec:	2200      	movs	r2, #0
 8007eee:	2180      	movs	r1, #128	; 0x80
 8007ef0:	f7fa ffa2 	bl	8002e38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007efa:	23c0      	movs	r3, #192	; 0xc0
 8007efc:	2200      	movs	r2, #0
 8007efe:	2181      	movs	r1, #129	; 0x81
 8007f00:	f7fa ff9a 	bl	8002e38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f0a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2101      	movs	r1, #1
 8007f12:	f7fa ff91 	bl	8002e38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f20:	2200      	movs	r2, #0
 8007f22:	2182      	movs	r1, #130	; 0x82
 8007f24:	f7fa ff88 	bl	8002e38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20001114 	.word	0x20001114
 8007f38:	40005c00 	.word	0x40005c00

08007f3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7f9 fc64 	bl	8001820 <HAL_PCD_Start>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f944 	bl	80081ec <USBD_Get_USB_Status>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	4608      	mov	r0, r1
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	461a      	mov	r2, r3
 8007f80:	4603      	mov	r3, r0
 8007f82:	70fb      	strb	r3, [r7, #3]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70bb      	strb	r3, [r7, #2]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f9a:	78bb      	ldrb	r3, [r7, #2]
 8007f9c:	883a      	ldrh	r2, [r7, #0]
 8007f9e:	78f9      	ldrb	r1, [r7, #3]
 8007fa0:	f7f9 fd80 	bl	8001aa4 <HAL_PCD_EP_Open>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 f91e 	bl	80081ec <USBD_Get_USB_Status>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007fd8:	78fa      	ldrb	r2, [r7, #3]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7f9 fdc7 	bl	8001b70 <HAL_PCD_EP_Close>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 f8ff 	bl	80081ec <USBD_Get_USB_Status>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	4611      	mov	r1, r2
 800801a:	4618      	mov	r0, r3
 800801c:	f7f9 fe87 	bl	8001d2e <HAL_PCD_EP_SetStall>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f8e0 	bl	80081ec <USBD_Get_USB_Status>
 800802c:	4603      	mov	r3, r0
 800802e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008030:	7bbb      	ldrb	r3, [r7, #14]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	460b      	mov	r3, r1
 8008044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	4611      	mov	r1, r2
 8008058:	4618      	mov	r0, r3
 800805a:	f7f9 feba 	bl	8001dd2 <HAL_PCD_EP_ClrStall>
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	4618      	mov	r0, r3
 8008066:	f000 f8c1 	bl	80081ec <USBD_Get_USB_Status>
 800806a:	4603      	mov	r3, r0
 800806c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800806e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800808a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800808c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008090:	2b00      	cmp	r3, #0
 8008092:	da0c      	bge.n	80080ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809a:	68f9      	ldr	r1, [r7, #12]
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	440b      	add	r3, r1
 80080a8:	3302      	adds	r3, #2
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	e00b      	b.n	80080c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080b4:	68f9      	ldr	r1, [r7, #12]
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	00db      	lsls	r3, r3, #3
 80080be:	440b      	add	r3, r1
 80080c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80080c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bc80      	pop	{r7}
 80080ce:	4770      	bx	lr

080080d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f9 fcb3 	bl	8001a5a <HAL_PCD_SetAddress>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 f876 	bl	80081ec <USBD_Get_USB_Status>
 8008100:	4603      	mov	r3, r0
 8008102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008104:	7bbb      	ldrb	r3, [r7, #14]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b086      	sub	sp, #24
 8008112:	af00      	add	r7, sp, #0
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	461a      	mov	r2, r3
 800811a:	460b      	mov	r3, r1
 800811c:	72fb      	strb	r3, [r7, #11]
 800811e:	4613      	mov	r3, r2
 8008120:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008130:	893b      	ldrh	r3, [r7, #8]
 8008132:	7af9      	ldrb	r1, [r7, #11]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	f7f9 fdb7 	bl	8001ca8 <HAL_PCD_EP_Transmit>
 800813a:	4603      	mov	r3, r0
 800813c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	4618      	mov	r0, r3
 8008142:	f000 f853 	bl	80081ec <USBD_Get_USB_Status>
 8008146:	4603      	mov	r3, r0
 8008148:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800814a:	7dbb      	ldrb	r3, [r7, #22]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	607a      	str	r2, [r7, #4]
 800815e:	461a      	mov	r2, r3
 8008160:	460b      	mov	r3, r1
 8008162:	72fb      	strb	r3, [r7, #11]
 8008164:	4613      	mov	r3, r2
 8008166:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008176:	893b      	ldrh	r3, [r7, #8]
 8008178:	7af9      	ldrb	r1, [r7, #11]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	f7f9 fd40 	bl	8001c00 <HAL_PCD_EP_Receive>
 8008180:	4603      	mov	r3, r0
 8008182:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008184:	7dfb      	ldrb	r3, [r7, #23]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f830 	bl	80081ec <USBD_Get_USB_Status>
 800818c:	4603      	mov	r3, r0
 800818e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008190:	7dbb      	ldrb	r3, [r7, #22]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80081ac:	78fa      	ldrb	r2, [r7, #3]
 80081ae:	4611      	mov	r1, r2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7f9 fd62 	bl	8001c7a <HAL_PCD_EP_GetRxCount>
 80081b6:	4603      	mov	r3, r0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081c8:	4b02      	ldr	r3, [pc, #8]	; (80081d4 <USBD_static_malloc+0x14>)
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr
 80081d4:	200001a8 	.word	0x200001a8

080081d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]

}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr
	...

080081ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081fa:	79fb      	ldrb	r3, [r7, #7]
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d817      	bhi.n	8008230 <USBD_Get_USB_Status+0x44>
 8008200:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <USBD_Get_USB_Status+0x1c>)
 8008202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008206:	bf00      	nop
 8008208:	08008219 	.word	0x08008219
 800820c:	0800821f 	.word	0x0800821f
 8008210:	08008225 	.word	0x08008225
 8008214:	0800822b 	.word	0x0800822b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
    break;
 800821c:	e00b      	b.n	8008236 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800821e:	2302      	movs	r3, #2
 8008220:	73fb      	strb	r3, [r7, #15]
    break;
 8008222:	e008      	b.n	8008236 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008224:	2301      	movs	r3, #1
 8008226:	73fb      	strb	r3, [r7, #15]
    break;
 8008228:	e005      	b.n	8008236 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800822a:	2302      	movs	r3, #2
 800822c:	73fb      	strb	r3, [r7, #15]
    break;
 800822e:	e002      	b.n	8008236 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008230:	2302      	movs	r3, #2
 8008232:	73fb      	strb	r3, [r7, #15]
    break;
 8008234:	bf00      	nop
  }
  return usb_status;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	bc80      	pop	{r7}
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop

08008244 <__libc_init_array>:
 8008244:	b570      	push	{r4, r5, r6, lr}
 8008246:	2600      	movs	r6, #0
 8008248:	4d0c      	ldr	r5, [pc, #48]	; (800827c <__libc_init_array+0x38>)
 800824a:	4c0d      	ldr	r4, [pc, #52]	; (8008280 <__libc_init_array+0x3c>)
 800824c:	1b64      	subs	r4, r4, r5
 800824e:	10a4      	asrs	r4, r4, #2
 8008250:	42a6      	cmp	r6, r4
 8008252:	d109      	bne.n	8008268 <__libc_init_array+0x24>
 8008254:	f000 f822 	bl	800829c <_init>
 8008258:	2600      	movs	r6, #0
 800825a:	4d0a      	ldr	r5, [pc, #40]	; (8008284 <__libc_init_array+0x40>)
 800825c:	4c0a      	ldr	r4, [pc, #40]	; (8008288 <__libc_init_array+0x44>)
 800825e:	1b64      	subs	r4, r4, r5
 8008260:	10a4      	asrs	r4, r4, #2
 8008262:	42a6      	cmp	r6, r4
 8008264:	d105      	bne.n	8008272 <__libc_init_array+0x2e>
 8008266:	bd70      	pop	{r4, r5, r6, pc}
 8008268:	f855 3b04 	ldr.w	r3, [r5], #4
 800826c:	4798      	blx	r3
 800826e:	3601      	adds	r6, #1
 8008270:	e7ee      	b.n	8008250 <__libc_init_array+0xc>
 8008272:	f855 3b04 	ldr.w	r3, [r5], #4
 8008276:	4798      	blx	r3
 8008278:	3601      	adds	r6, #1
 800827a:	e7f2      	b.n	8008262 <__libc_init_array+0x1e>
 800827c:	08008310 	.word	0x08008310
 8008280:	08008310 	.word	0x08008310
 8008284:	08008310 	.word	0x08008310
 8008288:	08008314 	.word	0x08008314

0800828c <memset>:
 800828c:	4603      	mov	r3, r0
 800828e:	4402      	add	r2, r0
 8008290:	4293      	cmp	r3, r2
 8008292:	d100      	bne.n	8008296 <memset+0xa>
 8008294:	4770      	bx	lr
 8008296:	f803 1b01 	strb.w	r1, [r3], #1
 800829a:	e7f9      	b.n	8008290 <memset+0x4>

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
