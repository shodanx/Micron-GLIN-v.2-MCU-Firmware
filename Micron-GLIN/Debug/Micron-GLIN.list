
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013648  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  08013788  08013788  00023788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014000  08014000  00030b10  2**0
                  CONTENTS
  4 .ARM          00000008  08014000  08014000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014008  08014008  00030b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014008  08014008  00024008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801400c  0801400c  0002400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b10  20000000  08014010  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000efc  20000b10  08014b20  00030b10  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20001a0c  08014b20  00031a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030b10  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b704  00000000  00000000  00030b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d51  00000000  00000000  0004c23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00050f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  000528a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a702  00000000  00000000  00053f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201ed  00000000  00000000  0006e682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088131  00000000  00000000  0008e86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001169a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dc0  00000000  00000000  001169f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000b10 	.word	0x20000b10
 800015c:	00000000 	.word	0x00000000
 8000160:	08013770 	.word	0x08013770

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000b14 	.word	0x20000b14
 800017c:	08013770 	.word	0x08013770

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_frsub>:
 8000bac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	e002      	b.n	8000bb8 <__addsf3>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_fsub>:
 8000bb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb8 <__addsf3>:
 8000bb8:	0042      	lsls	r2, r0, #1
 8000bba:	bf1f      	itttt	ne
 8000bbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc0:	ea92 0f03 	teqne	r2, r3
 8000bc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bcc:	d06a      	beq.n	8000ca4 <__addsf3+0xec>
 8000bce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd6:	bfc1      	itttt	gt
 8000bd8:	18d2      	addgt	r2, r2, r3
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	4048      	eorgt	r0, r1
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	bfb8      	it	lt
 8000be2:	425b      	neglt	r3, r3
 8000be4:	2b19      	cmp	r3, #25
 8000be6:	bf88      	it	hi
 8000be8:	4770      	bxhi	lr
 8000bea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c06:	bf18      	it	ne
 8000c08:	4249      	negne	r1, r1
 8000c0a:	ea92 0f03 	teq	r2, r3
 8000c0e:	d03f      	beq.n	8000c90 <__addsf3+0xd8>
 8000c10:	f1a2 0201 	sub.w	r2, r2, #1
 8000c14:	fa41 fc03 	asr.w	ip, r1, r3
 8000c18:	eb10 000c 	adds.w	r0, r0, ip
 8000c1c:	f1c3 0320 	rsb	r3, r3, #32
 8000c20:	fa01 f103 	lsl.w	r1, r1, r3
 8000c24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__addsf3+0x78>
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c34:	d313      	bcc.n	8000c5e <__addsf3+0xa6>
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3a:	d306      	bcc.n	8000c4a <__addsf3+0x92>
 8000c3c:	0840      	lsrs	r0, r0, #1
 8000c3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c42:	f102 0201 	add.w	r2, r2, #1
 8000c46:	2afe      	cmp	r2, #254	; 0xfe
 8000c48:	d251      	bcs.n	8000cee <__addsf3+0x136>
 8000c4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	ea40 0003 	orr.w	r0, r0, r3
 8000c5c:	4770      	bx	lr
 8000c5e:	0049      	lsls	r1, r1, #1
 8000c60:	eb40 0000 	adc.w	r0, r0, r0
 8000c64:	3a01      	subs	r2, #1
 8000c66:	bf28      	it	cs
 8000c68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c6c:	d2ed      	bcs.n	8000c4a <__addsf3+0x92>
 8000c6e:	fab0 fc80 	clz	ip, r0
 8000c72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c76:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7e:	bfaa      	itet	ge
 8000c80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c84:	4252      	neglt	r2, r2
 8000c86:	4318      	orrge	r0, r3
 8000c88:	bfbc      	itt	lt
 8000c8a:	40d0      	lsrlt	r0, r2
 8000c8c:	4318      	orrlt	r0, r3
 8000c8e:	4770      	bx	lr
 8000c90:	f092 0f00 	teq	r2, #0
 8000c94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c98:	bf06      	itte	eq
 8000c9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9e:	3201      	addeq	r2, #1
 8000ca0:	3b01      	subne	r3, #1
 8000ca2:	e7b5      	b.n	8000c10 <__addsf3+0x58>
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d021      	beq.n	8000cf8 <__addsf3+0x140>
 8000cb4:	ea92 0f03 	teq	r2, r3
 8000cb8:	d004      	beq.n	8000cc4 <__addsf3+0x10c>
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	4608      	moveq	r0, r1
 8000cc2:	4770      	bx	lr
 8000cc4:	ea90 0f01 	teq	r0, r1
 8000cc8:	bf1c      	itt	ne
 8000cca:	2000      	movne	r0, #0
 8000ccc:	4770      	bxne	lr
 8000cce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cd2:	d104      	bne.n	8000cde <__addsf3+0x126>
 8000cd4:	0040      	lsls	r0, r0, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ce2:	bf3c      	itt	cc
 8000ce4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bxcc	lr
 8000cea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf6:	4770      	bx	lr
 8000cf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cfc:	bf16      	itet	ne
 8000cfe:	4608      	movne	r0, r1
 8000d00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d04:	4601      	movne	r1, r0
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	bf06      	itte	eq
 8000d0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0e:	ea90 0f01 	teqeq	r0, r1
 8000d12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_ui2f>:
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e004      	b.n	8000d28 <__aeabi_i2f+0x8>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_i2f>:
 8000d20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	bf48      	it	mi
 8000d26:	4240      	negmi	r0, r0
 8000d28:	ea5f 0c00 	movs.w	ip, r0
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d34:	4601      	mov	r1, r0
 8000d36:	f04f 0000 	mov.w	r0, #0
 8000d3a:	e01c      	b.n	8000d76 <__aeabi_l2f+0x2a>

08000d3c <__aeabi_ul2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e00a      	b.n	8000d60 <__aeabi_l2f+0x14>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_l2f>:
 8000d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d58:	d502      	bpl.n	8000d60 <__aeabi_l2f+0x14>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	ea5f 0c01 	movs.w	ip, r1
 8000d64:	bf02      	ittt	eq
 8000d66:	4684      	moveq	ip, r0
 8000d68:	4601      	moveq	r1, r0
 8000d6a:	2000      	moveq	r0, #0
 8000d6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d70:	bf08      	it	eq
 8000d72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d7a:	fabc f28c 	clz	r2, ip
 8000d7e:	3a08      	subs	r2, #8
 8000d80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d84:	db10      	blt.n	8000da8 <__aeabi_l2f+0x5c>
 8000d86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d90:	f1c2 0220 	rsb	r2, r2, #32
 8000d94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d98:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9c:	eb43 0002 	adc.w	r0, r3, r2
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f102 0220 	add.w	r2, r2, #32
 8000dac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_fmul>:
 8000dc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd0:	bf1e      	ittt	ne
 8000dd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd6:	ea92 0f0c 	teqne	r2, ip
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d06f      	beq.n	8000ec0 <__aeabi_fmul+0xf8>
 8000de0:	441a      	add	r2, r3
 8000de2:	ea80 0c01 	eor.w	ip, r0, r1
 8000de6:	0240      	lsls	r0, r0, #9
 8000de8:	bf18      	it	ne
 8000dea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dee:	d01e      	beq.n	8000e2e <__aeabi_fmul+0x66>
 8000df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000e00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e08:	bf3e      	ittt	cc
 8000e0a:	0049      	lslcc	r1, r1, #1
 8000e0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e10:	005b      	lslcc	r3, r3, #1
 8000e12:	ea40 0001 	orr.w	r0, r0, r1
 8000e16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e1a:	2afd      	cmp	r2, #253	; 0xfd
 8000e1c:	d81d      	bhi.n	8000e5a <__aeabi_fmul+0x92>
 8000e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e26:	bf08      	it	eq
 8000e28:	f020 0001 	biceq.w	r0, r0, #1
 8000e2c:	4770      	bx	lr
 8000e2e:	f090 0f00 	teq	r0, #0
 8000e32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e36:	bf08      	it	eq
 8000e38:	0249      	lsleq	r1, r1, #9
 8000e3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e42:	3a7f      	subs	r2, #127	; 0x7f
 8000e44:	bfc2      	ittt	gt
 8000e46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4e:	4770      	bxgt	lr
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	dc5d      	bgt.n	8000f18 <__aeabi_fmul+0x150>
 8000e5c:	f112 0f19 	cmn.w	r2, #25
 8000e60:	bfdc      	itt	le
 8000e62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e66:	4770      	bxle	lr
 8000e68:	f1c2 0200 	rsb	r2, r2, #0
 8000e6c:	0041      	lsls	r1, r0, #1
 8000e6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e72:	f1c2 0220 	rsb	r2, r2, #32
 8000e76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7e:	f140 0000 	adc.w	r0, r0, #0
 8000e82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e86:	bf08      	it	eq
 8000e88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e8c:	4770      	bx	lr
 8000e8e:	f092 0f00 	teq	r2, #0
 8000e92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e96:	bf02      	ittt	eq
 8000e98:	0040      	lsleq	r0, r0, #1
 8000e9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9e:	3a01      	subeq	r2, #1
 8000ea0:	d0f9      	beq.n	8000e96 <__aeabi_fmul+0xce>
 8000ea2:	ea40 000c 	orr.w	r0, r0, ip
 8000ea6:	f093 0f00 	teq	r3, #0
 8000eaa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0049      	lsleq	r1, r1, #1
 8000eb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb6:	3b01      	subeq	r3, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xe6>
 8000eba:	ea41 010c 	orr.w	r1, r1, ip
 8000ebe:	e78f      	b.n	8000de0 <__aeabi_fmul+0x18>
 8000ec0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	bf18      	it	ne
 8000eca:	ea93 0f0c 	teqne	r3, ip
 8000ece:	d00a      	beq.n	8000ee6 <__aeabi_fmul+0x11e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1d8      	bne.n	8000e8e <__aeabi_fmul+0xc6>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	4770      	bx	lr
 8000ee6:	f090 0f00 	teq	r0, #0
 8000eea:	bf17      	itett	ne
 8000eec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ef0:	4608      	moveq	r0, r1
 8000ef2:	f091 0f00 	teqne	r1, #0
 8000ef6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000efa:	d014      	beq.n	8000f26 <__aeabi_fmul+0x15e>
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d101      	bne.n	8000f06 <__aeabi_fmul+0x13e>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d10f      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f06:	ea93 0f0c 	teq	r3, ip
 8000f0a:	d103      	bne.n	8000f14 <__aeabi_fmul+0x14c>
 8000f0c:	024b      	lsls	r3, r1, #9
 8000f0e:	bf18      	it	ne
 8000f10:	4608      	movne	r0, r1
 8000f12:	d108      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f14:	ea80 0001 	eor.w	r0, r0, r1
 8000f18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f24:	4770      	bx	lr
 8000f26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_fdiv>:
 8000f30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f38:	bf1e      	ittt	ne
 8000f3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3e:	ea92 0f0c 	teqne	r2, ip
 8000f42:	ea93 0f0c 	teqne	r3, ip
 8000f46:	d069      	beq.n	800101c <__aeabi_fdiv+0xec>
 8000f48:	eba2 0203 	sub.w	r2, r2, r3
 8000f4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f56:	d037      	beq.n	8000fc8 <__aeabi_fdiv+0x98>
 8000f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	bf38      	it	cc
 8000f6c:	005b      	lslcc	r3, r3, #1
 8000f6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f76:	428b      	cmp	r3, r1
 8000f78:	bf24      	itt	cs
 8000f7a:	1a5b      	subcs	r3, r3, r1
 8000f7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f84:	bf24      	itt	cs
 8000f86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f92:	bf24      	itt	cs
 8000f94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa0:	bf24      	itt	cs
 8000fa2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	bf18      	it	ne
 8000fae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb2:	d1e0      	bne.n	8000f76 <__aeabi_fdiv+0x46>
 8000fb4:	2afd      	cmp	r2, #253	; 0xfd
 8000fb6:	f63f af50 	bhi.w	8000e5a <__aeabi_fmul+0x92>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc0:	bf08      	it	eq
 8000fc2:	f020 0001 	biceq.w	r0, r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd0:	327f      	adds	r2, #127	; 0x7f
 8000fd2:	bfc2      	ittt	gt
 8000fd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fdc:	4770      	bxgt	lr
 8000fde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	e737      	b.n	8000e5a <__aeabi_fmul+0x92>
 8000fea:	f092 0f00 	teq	r2, #0
 8000fee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ff2:	bf02      	ittt	eq
 8000ff4:	0040      	lsleq	r0, r0, #1
 8000ff6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ffa:	3a01      	subeq	r2, #1
 8000ffc:	d0f9      	beq.n	8000ff2 <__aeabi_fdiv+0xc2>
 8000ffe:	ea40 000c 	orr.w	r0, r0, ip
 8001002:	f093 0f00 	teq	r3, #0
 8001006:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0049      	lsleq	r1, r1, #1
 800100e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001012:	3b01      	subeq	r3, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xda>
 8001016:	ea41 010c 	orr.w	r1, r1, ip
 800101a:	e795      	b.n	8000f48 <__aeabi_fdiv+0x18>
 800101c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001020:	ea92 0f0c 	teq	r2, ip
 8001024:	d108      	bne.n	8001038 <__aeabi_fdiv+0x108>
 8001026:	0242      	lsls	r2, r0, #9
 8001028:	f47f af7d 	bne.w	8000f26 <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	f47f af70 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 8001034:	4608      	mov	r0, r1
 8001036:	e776      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001038:	ea93 0f0c 	teq	r3, ip
 800103c:	d104      	bne.n	8001048 <__aeabi_fdiv+0x118>
 800103e:	024b      	lsls	r3, r1, #9
 8001040:	f43f af4c 	beq.w	8000edc <__aeabi_fmul+0x114>
 8001044:	4608      	mov	r0, r1
 8001046:	e76e      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001048:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800104c:	bf18      	it	ne
 800104e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001052:	d1ca      	bne.n	8000fea <__aeabi_fdiv+0xba>
 8001054:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001058:	f47f af5c 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 800105c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001060:	f47f af3c 	bne.w	8000edc <__aeabi_fmul+0x114>
 8001064:	e75f      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001066:	bf00      	nop

08001068 <__gesf2>:
 8001068:	f04f 3cff 	mov.w	ip, #4294967295
 800106c:	e006      	b.n	800107c <__cmpsf2+0x4>
 800106e:	bf00      	nop

08001070 <__lesf2>:
 8001070:	f04f 0c01 	mov.w	ip, #1
 8001074:	e002      	b.n	800107c <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__cmpsf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	bf18      	it	ne
 800108e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001092:	d011      	beq.n	80010b8 <__cmpsf2+0x40>
 8001094:	b001      	add	sp, #4
 8001096:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800109a:	bf18      	it	ne
 800109c:	ea90 0f01 	teqne	r0, r1
 80010a0:	bf58      	it	pl
 80010a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a6:	bf88      	it	hi
 80010a8:	17c8      	asrhi	r0, r1, #31
 80010aa:	bf38      	it	cc
 80010ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b0:	bf18      	it	ne
 80010b2:	f040 0001 	orrne.w	r0, r0, #1
 80010b6:	4770      	bx	lr
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__cmpsf2+0x4c>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d105      	bne.n	80010d0 <__cmpsf2+0x58>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d1e4      	bne.n	8001094 <__cmpsf2+0x1c>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d0e1      	beq.n	8001094 <__cmpsf2+0x1c>
 80010d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <__aeabi_cfrcmple>:
 80010d8:	4684      	mov	ip, r0
 80010da:	4608      	mov	r0, r1
 80010dc:	4661      	mov	r1, ip
 80010de:	e7ff      	b.n	80010e0 <__aeabi_cfcmpeq>

080010e0 <__aeabi_cfcmpeq>:
 80010e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010e2:	f7ff ffc9 	bl	8001078 <__cmpsf2>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	bf48      	it	mi
 80010ea:	f110 0f00 	cmnmi.w	r0, #0
 80010ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f0 <__aeabi_fcmpeq>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff fff4 	bl	80010e0 <__aeabi_cfcmpeq>
 80010f8:	bf0c      	ite	eq
 80010fa:	2001      	moveq	r0, #1
 80010fc:	2000      	movne	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmplt>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffea 	bl	80010e0 <__aeabi_cfcmpeq>
 800110c:	bf34      	ite	cc
 800110e:	2001      	movcc	r0, #1
 8001110:	2000      	movcs	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmple>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffe0 	bl	80010e0 <__aeabi_cfcmpeq>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpge>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffd2 	bl	80010d8 <__aeabi_cfrcmple>
 8001134:	bf94      	ite	ls
 8001136:	2001      	movls	r0, #1
 8001138:	2000      	movhi	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpgt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffc8 	bl	80010d8 <__aeabi_cfrcmple>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_f2uiz>:
 8001154:	0042      	lsls	r2, r0, #1
 8001156:	d20e      	bcs.n	8001176 <__aeabi_f2uiz+0x22>
 8001158:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800115c:	d30b      	bcc.n	8001176 <__aeabi_f2uiz+0x22>
 800115e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001162:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001166:	d409      	bmi.n	800117c <__aeabi_f2uiz+0x28>
 8001168:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	4770      	bx	lr
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	4770      	bx	lr
 800117c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001180:	d101      	bne.n	8001186 <__aeabi_f2uiz+0x32>
 8001182:	0242      	lsls	r2, r0, #9
 8001184:	d102      	bne.n	800118c <__aeabi_f2uiz+0x38>
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	4770      	bx	lr
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <__aeabi_uldivmod>:
 8001194:	b953      	cbnz	r3, 80011ac <__aeabi_uldivmod+0x18>
 8001196:	b94a      	cbnz	r2, 80011ac <__aeabi_uldivmod+0x18>
 8001198:	2900      	cmp	r1, #0
 800119a:	bf08      	it	eq
 800119c:	2800      	cmpeq	r0, #0
 800119e:	bf1c      	itt	ne
 80011a0:	f04f 31ff 	movne.w	r1, #4294967295
 80011a4:	f04f 30ff 	movne.w	r0, #4294967295
 80011a8:	f000 b9ae 	b.w	8001508 <__aeabi_idiv0>
 80011ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b4:	f000 f83e 	bl	8001234 <__udivmoddi4>
 80011b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c0:	b004      	add	sp, #16
 80011c2:	4770      	bx	lr

080011c4 <__aeabi_d2lz>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4605      	mov	r5, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4628      	mov	r0, r5
 80011d0:	4621      	mov	r1, r4
 80011d2:	f7ff fc15 	bl	8000a00 <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x20>
 80011d8:	4628      	mov	r0, r5
 80011da:	4621      	mov	r1, r4
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4628      	mov	r0, r5
 80011e6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f98b 	bl	800051c <__aeabi_dmul>
 8001206:	f7ff fc61 	bl	8000acc <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f90c 	bl	8000428 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f982 	bl	800051c <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffc4 	bl	80001ac <__aeabi_dsub>
 8001224:	f7ff fc52 	bl	8000acc <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000

08001234 <__udivmoddi4>:
 8001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001238:	9e08      	ldr	r6, [sp, #32]
 800123a:	460d      	mov	r5, r1
 800123c:	4604      	mov	r4, r0
 800123e:	4688      	mov	r8, r1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d14d      	bne.n	80012e0 <__udivmoddi4+0xac>
 8001244:	428a      	cmp	r2, r1
 8001246:	4694      	mov	ip, r2
 8001248:	d968      	bls.n	800131c <__udivmoddi4+0xe8>
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b152      	cbz	r2, 8001266 <__udivmoddi4+0x32>
 8001250:	fa01 f302 	lsl.w	r3, r1, r2
 8001254:	f1c2 0120 	rsb	r1, r2, #32
 8001258:	fa20 f101 	lsr.w	r1, r0, r1
 800125c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001260:	ea41 0803 	orr.w	r8, r1, r3
 8001264:	4094      	lsls	r4, r2
 8001266:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800126a:	fbb8 f7f1 	udiv	r7, r8, r1
 800126e:	fa1f fe8c 	uxth.w	lr, ip
 8001272:	fb01 8817 	mls	r8, r1, r7, r8
 8001276:	fb07 f00e 	mul.w	r0, r7, lr
 800127a:	0c23      	lsrs	r3, r4, #16
 800127c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001280:	4298      	cmp	r0, r3
 8001282:	d90a      	bls.n	800129a <__udivmoddi4+0x66>
 8001284:	eb1c 0303 	adds.w	r3, ip, r3
 8001288:	f107 35ff 	add.w	r5, r7, #4294967295
 800128c:	f080 811e 	bcs.w	80014cc <__udivmoddi4+0x298>
 8001290:	4298      	cmp	r0, r3
 8001292:	f240 811b 	bls.w	80014cc <__udivmoddi4+0x298>
 8001296:	3f02      	subs	r7, #2
 8001298:	4463      	add	r3, ip
 800129a:	1a1b      	subs	r3, r3, r0
 800129c:	fbb3 f0f1 	udiv	r0, r3, r1
 80012a0:	fb01 3310 	mls	r3, r1, r0, r3
 80012a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80012a8:	b2a4      	uxth	r4, r4
 80012aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012ae:	45a6      	cmp	lr, r4
 80012b0:	d90a      	bls.n	80012c8 <__udivmoddi4+0x94>
 80012b2:	eb1c 0404 	adds.w	r4, ip, r4
 80012b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80012ba:	f080 8109 	bcs.w	80014d0 <__udivmoddi4+0x29c>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f240 8106 	bls.w	80014d0 <__udivmoddi4+0x29c>
 80012c4:	4464      	add	r4, ip
 80012c6:	3802      	subs	r0, #2
 80012c8:	2100      	movs	r1, #0
 80012ca:	eba4 040e 	sub.w	r4, r4, lr
 80012ce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012d2:	b11e      	cbz	r6, 80012dc <__udivmoddi4+0xa8>
 80012d4:	2300      	movs	r3, #0
 80012d6:	40d4      	lsrs	r4, r2
 80012d8:	e9c6 4300 	strd	r4, r3, [r6]
 80012dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0xc2>
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	f000 80ee 	beq.w	80014c6 <__udivmoddi4+0x292>
 80012ea:	2100      	movs	r1, #0
 80012ec:	e9c6 0500 	strd	r0, r5, [r6]
 80012f0:	4608      	mov	r0, r1
 80012f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f6:	fab3 f183 	clz	r1, r3
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d14a      	bne.n	8001394 <__udivmoddi4+0x160>
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d302      	bcc.n	8001308 <__udivmoddi4+0xd4>
 8001302:	4282      	cmp	r2, r0
 8001304:	f200 80fc 	bhi.w	8001500 <__udivmoddi4+0x2cc>
 8001308:	1a84      	subs	r4, r0, r2
 800130a:	eb65 0303 	sbc.w	r3, r5, r3
 800130e:	2001      	movs	r0, #1
 8001310:	4698      	mov	r8, r3
 8001312:	2e00      	cmp	r6, #0
 8001314:	d0e2      	beq.n	80012dc <__udivmoddi4+0xa8>
 8001316:	e9c6 4800 	strd	r4, r8, [r6]
 800131a:	e7df      	b.n	80012dc <__udivmoddi4+0xa8>
 800131c:	b902      	cbnz	r2, 8001320 <__udivmoddi4+0xec>
 800131e:	deff      	udf	#255	; 0xff
 8001320:	fab2 f282 	clz	r2, r2
 8001324:	2a00      	cmp	r2, #0
 8001326:	f040 8091 	bne.w	800144c <__udivmoddi4+0x218>
 800132a:	eba1 000c 	sub.w	r0, r1, ip
 800132e:	2101      	movs	r1, #1
 8001330:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001334:	fa1f fe8c 	uxth.w	lr, ip
 8001338:	fbb0 f3f7 	udiv	r3, r0, r7
 800133c:	fb07 0013 	mls	r0, r7, r3, r0
 8001340:	0c25      	lsrs	r5, r4, #16
 8001342:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001346:	fb0e f003 	mul.w	r0, lr, r3
 800134a:	42a8      	cmp	r0, r5
 800134c:	d908      	bls.n	8001360 <__udivmoddi4+0x12c>
 800134e:	eb1c 0505 	adds.w	r5, ip, r5
 8001352:	f103 38ff 	add.w	r8, r3, #4294967295
 8001356:	d202      	bcs.n	800135e <__udivmoddi4+0x12a>
 8001358:	42a8      	cmp	r0, r5
 800135a:	f200 80ce 	bhi.w	80014fa <__udivmoddi4+0x2c6>
 800135e:	4643      	mov	r3, r8
 8001360:	1a2d      	subs	r5, r5, r0
 8001362:	fbb5 f0f7 	udiv	r0, r5, r7
 8001366:	fb07 5510 	mls	r5, r7, r0, r5
 800136a:	fb0e fe00 	mul.w	lr, lr, r0
 800136e:	b2a4      	uxth	r4, r4
 8001370:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001374:	45a6      	cmp	lr, r4
 8001376:	d908      	bls.n	800138a <__udivmoddi4+0x156>
 8001378:	eb1c 0404 	adds.w	r4, ip, r4
 800137c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001380:	d202      	bcs.n	8001388 <__udivmoddi4+0x154>
 8001382:	45a6      	cmp	lr, r4
 8001384:	f200 80b6 	bhi.w	80014f4 <__udivmoddi4+0x2c0>
 8001388:	4628      	mov	r0, r5
 800138a:	eba4 040e 	sub.w	r4, r4, lr
 800138e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001392:	e79e      	b.n	80012d2 <__udivmoddi4+0x9e>
 8001394:	f1c1 0720 	rsb	r7, r1, #32
 8001398:	408b      	lsls	r3, r1
 800139a:	fa22 fc07 	lsr.w	ip, r2, r7
 800139e:	ea4c 0c03 	orr.w	ip, ip, r3
 80013a2:	fa25 fa07 	lsr.w	sl, r5, r7
 80013a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013aa:	fbba f8f9 	udiv	r8, sl, r9
 80013ae:	fa20 f307 	lsr.w	r3, r0, r7
 80013b2:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b6:	408d      	lsls	r5, r1
 80013b8:	fa1f fe8c 	uxth.w	lr, ip
 80013bc:	431d      	orrs	r5, r3
 80013be:	fa00 f301 	lsl.w	r3, r0, r1
 80013c2:	fb08 f00e 	mul.w	r0, r8, lr
 80013c6:	0c2c      	lsrs	r4, r5, #16
 80013c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013cc:	42a0      	cmp	r0, r4
 80013ce:	fa02 f201 	lsl.w	r2, r2, r1
 80013d2:	d90b      	bls.n	80013ec <__udivmoddi4+0x1b8>
 80013d4:	eb1c 0404 	adds.w	r4, ip, r4
 80013d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80013dc:	f080 8088 	bcs.w	80014f0 <__udivmoddi4+0x2bc>
 80013e0:	42a0      	cmp	r0, r4
 80013e2:	f240 8085 	bls.w	80014f0 <__udivmoddi4+0x2bc>
 80013e6:	f1a8 0802 	sub.w	r8, r8, #2
 80013ea:	4464      	add	r4, ip
 80013ec:	1a24      	subs	r4, r4, r0
 80013ee:	fbb4 f0f9 	udiv	r0, r4, r9
 80013f2:	fb09 4410 	mls	r4, r9, r0, r4
 80013f6:	fb00 fe0e 	mul.w	lr, r0, lr
 80013fa:	b2ad      	uxth	r5, r5
 80013fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001400:	45a6      	cmp	lr, r4
 8001402:	d908      	bls.n	8001416 <__udivmoddi4+0x1e2>
 8001404:	eb1c 0404 	adds.w	r4, ip, r4
 8001408:	f100 35ff 	add.w	r5, r0, #4294967295
 800140c:	d26c      	bcs.n	80014e8 <__udivmoddi4+0x2b4>
 800140e:	45a6      	cmp	lr, r4
 8001410:	d96a      	bls.n	80014e8 <__udivmoddi4+0x2b4>
 8001412:	3802      	subs	r0, #2
 8001414:	4464      	add	r4, ip
 8001416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800141a:	fba0 9502 	umull	r9, r5, r0, r2
 800141e:	eba4 040e 	sub.w	r4, r4, lr
 8001422:	42ac      	cmp	r4, r5
 8001424:	46c8      	mov	r8, r9
 8001426:	46ae      	mov	lr, r5
 8001428:	d356      	bcc.n	80014d8 <__udivmoddi4+0x2a4>
 800142a:	d053      	beq.n	80014d4 <__udivmoddi4+0x2a0>
 800142c:	2e00      	cmp	r6, #0
 800142e:	d069      	beq.n	8001504 <__udivmoddi4+0x2d0>
 8001430:	ebb3 0208 	subs.w	r2, r3, r8
 8001434:	eb64 040e 	sbc.w	r4, r4, lr
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	fa04 f707 	lsl.w	r7, r4, r7
 8001440:	431f      	orrs	r7, r3
 8001442:	40cc      	lsrs	r4, r1
 8001444:	e9c6 7400 	strd	r7, r4, [r6]
 8001448:	2100      	movs	r1, #0
 800144a:	e747      	b.n	80012dc <__udivmoddi4+0xa8>
 800144c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001450:	f1c2 0120 	rsb	r1, r2, #32
 8001454:	fa25 f301 	lsr.w	r3, r5, r1
 8001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800145c:	fa20 f101 	lsr.w	r1, r0, r1
 8001460:	4095      	lsls	r5, r2
 8001462:	430d      	orrs	r5, r1
 8001464:	fbb3 f1f7 	udiv	r1, r3, r7
 8001468:	fb07 3311 	mls	r3, r7, r1, r3
 800146c:	fa1f fe8c 	uxth.w	lr, ip
 8001470:	0c28      	lsrs	r0, r5, #16
 8001472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001476:	fb01 f30e 	mul.w	r3, r1, lr
 800147a:	4283      	cmp	r3, r0
 800147c:	fa04 f402 	lsl.w	r4, r4, r2
 8001480:	d908      	bls.n	8001494 <__udivmoddi4+0x260>
 8001482:	eb1c 0000 	adds.w	r0, ip, r0
 8001486:	f101 38ff 	add.w	r8, r1, #4294967295
 800148a:	d22f      	bcs.n	80014ec <__udivmoddi4+0x2b8>
 800148c:	4283      	cmp	r3, r0
 800148e:	d92d      	bls.n	80014ec <__udivmoddi4+0x2b8>
 8001490:	3902      	subs	r1, #2
 8001492:	4460      	add	r0, ip
 8001494:	1ac0      	subs	r0, r0, r3
 8001496:	fbb0 f3f7 	udiv	r3, r0, r7
 800149a:	fb07 0013 	mls	r0, r7, r3, r0
 800149e:	b2ad      	uxth	r5, r5
 80014a0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014a4:	fb03 f00e 	mul.w	r0, r3, lr
 80014a8:	42a8      	cmp	r0, r5
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x28a>
 80014ac:	eb1c 0505 	adds.w	r5, ip, r5
 80014b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80014b4:	d216      	bcs.n	80014e4 <__udivmoddi4+0x2b0>
 80014b6:	42a8      	cmp	r0, r5
 80014b8:	d914      	bls.n	80014e4 <__udivmoddi4+0x2b0>
 80014ba:	3b02      	subs	r3, #2
 80014bc:	4465      	add	r5, ip
 80014be:	1a28      	subs	r0, r5, r0
 80014c0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014c4:	e738      	b.n	8001338 <__udivmoddi4+0x104>
 80014c6:	4631      	mov	r1, r6
 80014c8:	4630      	mov	r0, r6
 80014ca:	e707      	b.n	80012dc <__udivmoddi4+0xa8>
 80014cc:	462f      	mov	r7, r5
 80014ce:	e6e4      	b.n	800129a <__udivmoddi4+0x66>
 80014d0:	4618      	mov	r0, r3
 80014d2:	e6f9      	b.n	80012c8 <__udivmoddi4+0x94>
 80014d4:	454b      	cmp	r3, r9
 80014d6:	d2a9      	bcs.n	800142c <__udivmoddi4+0x1f8>
 80014d8:	ebb9 0802 	subs.w	r8, r9, r2
 80014dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80014e0:	3801      	subs	r0, #1
 80014e2:	e7a3      	b.n	800142c <__udivmoddi4+0x1f8>
 80014e4:	4643      	mov	r3, r8
 80014e6:	e7ea      	b.n	80014be <__udivmoddi4+0x28a>
 80014e8:	4628      	mov	r0, r5
 80014ea:	e794      	b.n	8001416 <__udivmoddi4+0x1e2>
 80014ec:	4641      	mov	r1, r8
 80014ee:	e7d1      	b.n	8001494 <__udivmoddi4+0x260>
 80014f0:	46d0      	mov	r8, sl
 80014f2:	e77b      	b.n	80013ec <__udivmoddi4+0x1b8>
 80014f4:	4464      	add	r4, ip
 80014f6:	3802      	subs	r0, #2
 80014f8:	e747      	b.n	800138a <__udivmoddi4+0x156>
 80014fa:	3b02      	subs	r3, #2
 80014fc:	4465      	add	r5, ip
 80014fe:	e72f      	b.n	8001360 <__udivmoddi4+0x12c>
 8001500:	4608      	mov	r0, r1
 8001502:	e706      	b.n	8001312 <__udivmoddi4+0xde>
 8001504:	4631      	mov	r1, r6
 8001506:	e6e9      	b.n	80012dc <__udivmoddi4+0xa8>

08001508 <__aeabi_idiv0>:
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	889b      	ldrh	r3, [r3, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	88db      	ldrh	r3, [r3, #6]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
	if (total < 0)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da05      	bge.n	8001538 <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	891b      	ldrh	r3, [r3, #8]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4413      	add	r3, r2
 8001536:	617b      	str	r3, [r7, #20]

	if (total == 0)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e031      	b.n	80015a8 <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	88db      	ldrh	r3, [r3, #6]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	8912      	ldrh	r2, [r2, #8]
 8001550:	fbb3 f0f2 	udiv	r0, r3, r2
 8001554:	fb00 f202 	mul.w	r2, r0, r2
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
			* circ_buf->element_size);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	895b      	ldrh	r3, [r3, #10]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001566:	440b      	add	r3, r1
 8001568:	613b      	str	r3, [r7, #16]

	if (elem)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	895b      	ldrh	r3, [r3, #10]
 8001574:	461a      	mov	r2, r3
 8001576:	6939      	ldr	r1, [r7, #16]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f00d fee3 	bl	800f344 <memcpy>

	if (!read_only) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d110      	bne.n	80015a6 <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	88db      	ldrh	r3, [r3, #6]
 8001588:	3301      	adds	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	88db      	ldrh	r3, [r3, #6]
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	429a      	cmp	r2, r3
 800159e:	db02      	blt.n	80015a6 <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	889b      	ldrh	r3, [r3, #4]
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	88db      	ldrh	r3, [r3, #6]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	891b      	ldrh	r3, [r3, #8]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	891b      	ldrh	r3, [r3, #8]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	db02      	blt.n	80015ec <__circ_gbuf_push+0x3c>
		return -1; // Full
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e02b      	b.n	8001644 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	889b      	ldrh	r3, [r3, #4]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	8912      	ldrh	r2, [r2, #8]
 80015f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80015fc:	fb00 f202 	mul.w	r2, r0, r2
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
			* circ_buf->element_size );
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	895b      	ldrh	r3, [r3, #10]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 800160e:	440b      	add	r3, r1
 8001610:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	895b      	ldrh	r3, [r3, #10]
 8001616:	461a      	mov	r2, r3
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f00d fe92 	bl	800f344 <memcpy>
	circ_buf->push_count++;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	891b      	ldrh	r3, [r3, #8]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	429a      	cmp	r2, r3
 800163a:	db02      	blt.n	8001642 <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	809a      	strh	r2, [r3, #4]
	return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <Relay_control>:
extern uint16_t DAC_tx_tmp_buffer[2];
extern float DDS_FTW;


//==============================================================================================
void Relay_control(uint8_t relay,uint8_t state){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
	int Relay_address=0;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
	if(relay>3 || state>1) return;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b03      	cmp	r3, #3
 8001664:	f200 80a3 	bhi.w	80017ae <Relay_control+0x162>
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	2b01      	cmp	r3, #1
 800166c:	f200 809f 	bhi.w	80017ae <Relay_control+0x162>

	if(relay==0x00 && state==0x00)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d141      	bne.n	80016fa <Relay_control+0xae>
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d13e      	bne.n	80016fa <Relay_control+0xae>
	{
		while(Relay_address<=0x5) // Set all OUTx to zero
 800167c:	e039      	b.n	80016f2 <Relay_control+0xa6>
		{
			HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	2102      	movs	r1, #2
 800168c:	484a      	ldr	r0, [pc, #296]	; (80017b8 <Relay_control+0x16c>)
 800168e:	f004 fad4 	bl	8005c3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	105b      	asrs	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	2104      	movs	r1, #4
 80016a2:	4845      	ldr	r0, [pc, #276]	; (80017b8 <Relay_control+0x16c>)
 80016a4:	f004 fac9 	bl	8005c3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	109b      	asrs	r3, r3, #2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	2108      	movs	r1, #8
 80016b8:	483f      	ldr	r0, [pc, #252]	; (80017b8 <Relay_control+0x16c>)
 80016ba:	f004 fabe 	bl	8005c3a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 80016be:	2200      	movs	r2, #0
 80016c0:	2101      	movs	r1, #1
 80016c2:	483d      	ldr	r0, [pc, #244]	; (80017b8 <Relay_control+0x16c>)
 80016c4:	f004 fab9 	bl	8005c3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ce:	483b      	ldr	r0, [pc, #236]	; (80017bc <Relay_control+0x170>)
 80016d0:	f004 fab3 	bl	8005c3a <HAL_GPIO_WritePin>
			HAL_Delay(1); // wait 1ms
 80016d4:	2001      	movs	r0, #1
 80016d6:	f003 fc4b 	bl	8004f70 <HAL_Delay>
			HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e0:	4836      	ldr	r0, [pc, #216]	; (80017bc <Relay_control+0x170>)
 80016e2:	f004 faaa 	bl	8005c3a <HAL_GPIO_WritePin>
			HAL_Delay(1); // wait 1ms
 80016e6:	2001      	movs	r0, #1
 80016e8:	f003 fc42 	bl	8004f70 <HAL_Delay>
			Relay_address++;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
		while(Relay_address<=0x5) // Set all OUTx to zero
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	ddc2      	ble.n	800167e <Relay_control+0x32>
		}
		return;
 80016f8:	e05a      	b.n	80017b0 <Relay_control+0x164>
	}


	switch (relay)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d006      	beq.n	800170e <Relay_control+0xc2>
 8001700:	2b03      	cmp	r3, #3
 8001702:	dc1f      	bgt.n	8001744 <Relay_control+0xf8>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d014      	beq.n	8001732 <Relay_control+0xe6>
 8001708:	2b02      	cmp	r3, #2
 800170a:	d009      	beq.n	8001720 <Relay_control+0xd4>
 800170c:	e01a      	b.n	8001744 <Relay_control+0xf8>
	{
	case 3:
		if (state==1){
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <Relay_control+0xce>
			Relay_address=0x5; //OUT6
 8001714:	2305      	movs	r3, #5
 8001716:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x4; //OUT5
		} break;
 8001718:	e014      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x4; //OUT5
 800171a:	2304      	movs	r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
		} break;
 800171e:	e011      	b.n	8001744 <Relay_control+0xf8>
	case 2:
		if (state==1){
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <Relay_control+0xe0>
			Relay_address=0x3; //OUT4
 8001726:	2303      	movs	r3, #3
 8001728:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x2; //OUT3
		} break;
 800172a:	e00b      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x2; //OUT3
 800172c:	2302      	movs	r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
		} break;
 8001730:	e008      	b.n	8001744 <Relay_control+0xf8>
	case 1:
		if (state==1){
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <Relay_control+0xf2>
			Relay_address=0x1; //OUT2
 8001738:	2301      	movs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x0; //OUT1
		} break;
 800173c:	e001      	b.n	8001742 <Relay_control+0xf6>
			Relay_address=0x0; //OUT1
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
		} break;
 8001742:	bf00      	nop
	}

	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	2102      	movs	r1, #2
 8001752:	4819      	ldr	r0, [pc, #100]	; (80017b8 <Relay_control+0x16c>)
 8001754:	f004 fa71 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	105b      	asrs	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	2104      	movs	r1, #4
 8001768:	4813      	ldr	r0, [pc, #76]	; (80017b8 <Relay_control+0x16c>)
 800176a:	f004 fa66 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	109b      	asrs	r3, r3, #2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	2108      	movs	r1, #8
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <Relay_control+0x16c>)
 8001780:	f004 fa5b 	bl	8005c3a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 1); // LVL 1
 8001784:	2201      	movs	r2, #1
 8001786:	2101      	movs	r1, #1
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <Relay_control+0x16c>)
 800178a:	f004 fa56 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <Relay_control+0x170>)
 8001796:	f004 fa50 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 800179a:	2001      	movs	r0, #1
 800179c:	f003 fbe8 	bl	8004f70 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <Relay_control+0x170>)
 80017a8:	f004 fa47 	bl	8005c3a <HAL_GPIO_WritePin>
 80017ac:	e000      	b.n	80017b0 <Relay_control+0x164>
	if(relay>3 || state>1) return;
 80017ae:	bf00      	nop
}
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020800 	.word	0x40020800

080017c0 <CPLD_control>:
//==============================================================================================



//==============================================================================================
void CPLD_control(FunctionalState state){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	uint8_t send_word=0x00;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]

	// Calculate CPLD divider to expand DDS FTW to 0.1 ppm
	float dds_tmp_calc=DDS_clock_frequecny;
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <CPLD_control+0x10c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
	dds_tmp_calc/=(float)0xFFFFFFFF; // 10MHz / 2^32 = 0.0023283 Hz DDS FTW resolution
 80017d4:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff fba9 	bl	8000f30 <__aeabi_fdiv>
 80017de:	4603      	mov	r3, r0
 80017e0:	60fb      	str	r3, [r7, #12]
	dds_tmp_calc=dds_tmp_calc/(DDS_target_frequecny/(float)1E7); // 0.0023283 Hz / (74.898214 Hz / 1E7) = 310.86 minimum CPLD divider
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <CPLD_control+0x110>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	493b      	ldr	r1, [pc, #236]	; (80018d4 <CPLD_control+0x114>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fba1 	bl	8000f30 <__aeabi_fdiv>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4619      	mov	r1, r3
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f7ff fb9c 	bl	8000f30 <__aeabi_fdiv>
 80017f8:	4603      	mov	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<0x0F; i++) // find CPLD tuning word
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e017      	b.n	8001832 <CPLD_control+0x72>
	{
		if(((1<<i)+1) > dds_tmp_calc)
 8001802:	2201      	movs	r2, #1
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	3301      	adds	r3, #1
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fa87 	bl	8000d20 <__aeabi_i2f>
 8001812:	4603      	mov	r3, r0
 8001814:	4619      	mov	r1, r3
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff fc74 	bl	8001104 <__aeabi_fcmplt>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <CPLD_control+0x6c>
		{
			CPLD_WORD=i;
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <CPLD_control+0x118>)
 8001828:	701a      	strb	r2, [r3, #0]
			break;
 800182a:	e005      	b.n	8001838 <CPLD_control+0x78>
	for(int i=1; i<0x0F; i++) // find CPLD tuning word
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	3301      	adds	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b0e      	cmp	r3, #14
 8001836:	dde4      	ble.n	8001802 <CPLD_control+0x42>
		}
	}

	if(state==CPLD_ON_STATE)send_word=CPLD_WORD;
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <CPLD_control+0x84>
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <CPLD_control+0x118>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin,  send_word & 0x1     );
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	2101      	movs	r1, #1
 8001850:	4822      	ldr	r0, [pc, #136]	; (80018dc <CPLD_control+0x11c>)
 8001852:	f004 f9f2 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin, (send_word & 0x2) >>1);
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	105b      	asrs	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	2102      	movs	r1, #2
 8001866:	481d      	ldr	r0, [pc, #116]	; (80018dc <CPLD_control+0x11c>)
 8001868:	f004 f9e7 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (send_word & 0x4) >>2);
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	109b      	asrs	r3, r3, #2
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	2104      	movs	r1, #4
 800187c:	4817      	ldr	r0, [pc, #92]	; (80018dc <CPLD_control+0x11c>)
 800187e:	f004 f9dc 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (send_word & 0x8) >>3);
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	10db      	asrs	r3, r3, #3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	2108      	movs	r1, #8
 8001892:	4812      	ldr	r0, [pc, #72]	; (80018dc <CPLD_control+0x11c>)
 8001894:	f004 f9d1 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_SET); // Send strobe
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189e:	4810      	ldr	r0, [pc, #64]	; (80018e0 <CPLD_control+0x120>)
 80018a0:	f004 f9cb 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <CPLD_control+0x120>)
 80018ac:	f004 f9c5 	bl	8005c3a <HAL_GPIO_WritePin>

	if(state==CPLD_OFF_STATE)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <CPLD_control+0xfe>
	{
		cfg.LDACMODE=0;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <CPLD_control+0x124>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		cfg.LDACMODE=1;
	}
}
 80018bc:	e002      	b.n	80018c4 <CPLD_control+0x104>
		cfg.LDACMODE=1;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <CPLD_control+0x124>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	709a      	strb	r2, [r3, #2]
}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200007b4 	.word	0x200007b4
 80018d0:	20000d14 	.word	0x20000d14
 80018d4:	4b189680 	.word	0x4b189680
 80018d8:	20000d0e 	.word	0x20000d0e
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020800 	.word	0x40020800
 80018e4:	20000d04 	.word	0x20000d04

080018e8 <DAC_Write>:



//==============================================================================================
void DAC_Write(uint32_t value)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <DAC_Write+0x6c>)
 80018f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	4a13      	ldr	r2, [pc, #76]	; (8001954 <DAC_Write+0x6c>)
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	4413      	add	r3, r2
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <DAC_Write+0x6c>)
 800190c:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <DAC_Write+0x6c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0c1b      	lsrs	r3, r3, #16
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <DAC_Write+0x70>)
 8001918:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <DAC_Write+0x6c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <DAC_Write+0x70>)
 8001922:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2110      	movs	r1, #16
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <DAC_Write+0x74>)
 800192a:	f004 f986 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 800192e:	2302      	movs	r3, #2
 8001930:	2202      	movs	r2, #2
 8001932:	4909      	ldr	r1, [pc, #36]	; (8001958 <DAC_Write+0x70>)
 8001934:	480a      	ldr	r0, [pc, #40]	; (8001960 <DAC_Write+0x78>)
 8001936:	f007 fbcf 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2110      	movs	r1, #16
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <DAC_Write+0x74>)
 8001940:	f004 f97b 	bl	8005c3a <HAL_GPIO_WritePin>
	DAC_code=value;
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <DAC_Write+0x7c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000cfc 	.word	0x20000cfc
 8001958:	20000d00 	.word	0x20000d00
 800195c:	40020000 	.word	0x40020000
 8001960:	20000d38 	.word	0x20000d38
 8001964:	20000d2c 	.word	0x20000d2c

08001968 <DAC_Write_FAST>:

//==============================================================================================
void DAC_Write_FAST(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	2110      	movs	r1, #16
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <DAC_Write_FAST+0x28>)
 8001972:	f004 f962 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001976:	2302      	movs	r3, #2
 8001978:	2202      	movs	r2, #2
 800197a:	4906      	ldr	r1, [pc, #24]	; (8001994 <DAC_Write_FAST+0x2c>)
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <DAC_Write_FAST+0x30>)
 800197e:	f007 fbab 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	2110      	movs	r1, #16
 8001986:	4802      	ldr	r0, [pc, #8]	; (8001990 <DAC_Write_FAST+0x28>)
 8001988:	f004 f957 	bl	8005c3a <HAL_GPIO_WritePin>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40020000 	.word	0x40020000
 8001994:	20000d00 	.word	0x20000d00
 8001998:	20000d38 	.word	0x20000d38

0800199c <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

	DAC_tx_buffer=0x02000000; // Write CONFIG1
 80019a0:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <DAC_SendInit+0xfc>)
 80019a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 80019a8:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <DAC_SendInit+0x100>)
 80019aa:	7a1b      	ldrb	r3, [r3, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	f003 0210 	and.w	r2, r3, #16
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <DAC_SendInit+0xfc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a37      	ldr	r2, [pc, #220]	; (8001a98 <DAC_SendInit+0xfc>)
 80019ba:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x06)<<6;
 80019bc:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <DAC_SendInit+0x100>)
 80019be:	79db      	ldrb	r3, [r3, #7]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <DAC_SendInit+0xfc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <DAC_SendInit+0xfc>)
 80019ce:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 80019d0:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <DAC_SendInit+0x100>)
 80019d2:	799b      	ldrb	r3, [r3, #6]
 80019d4:	029b      	lsls	r3, r3, #10
 80019d6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <DAC_SendInit+0xfc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <DAC_SendInit+0xfc>)
 80019e2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <DAC_SendInit+0x100>)
 80019e6:	795b      	ldrb	r3, [r3, #5]
 80019e8:	02db      	lsls	r3, r3, #11
 80019ea:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <DAC_SendInit+0xfc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <DAC_SendInit+0xfc>)
 80019f6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <DAC_SendInit+0x100>)
 80019fa:	791b      	ldrb	r3, [r3, #4]
 80019fc:	031b      	lsls	r3, r3, #12
 80019fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a0a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <DAC_SendInit+0x100>)
 8001a0e:	78db      	ldrb	r3, [r3, #3]
 8001a10:	035b      	lsls	r3, r3, #13
 8001a12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a1e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <DAC_SendInit+0x100>)
 8001a22:	789b      	ldrb	r3, [r3, #2]
 8001a24:	039b      	lsls	r3, r3, #14
 8001a26:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a32:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <DAC_SendInit+0x100>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	049b      	lsls	r3, r3, #18
 8001a3a:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a46:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <DAC_SendInit+0x100>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	05db      	lsls	r3, r3, #23
 8001a4e:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a5a:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0c1b      	lsrs	r3, r3, #16
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a66:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a70:	805a      	strh	r2, [r3, #2]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2110      	movs	r1, #16
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <DAC_SendInit+0x108>)
 8001a78:	f004 f8df 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a82:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <DAC_SendInit+0x10c>)
 8001a84:	f007 fb28 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <DAC_SendInit+0x108>)
 8001a8e:	f004 f8d4 	bl	8005c3a <HAL_GPIO_WritePin>

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000cfc 	.word	0x20000cfc
 8001a9c:	20000d04 	.word	0x20000d04
 8001aa0:	20000d00 	.word	0x20000d00
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	20000d38 	.word	0x20000d38

08001aac <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
	uint32_t DAC_tx_buffer;
	uint16_t DAC_tx_tmp_buffer[2];

	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	813b      	strh	r3, [r7, #8]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	817b      	strh	r3, [r7, #10]
 8001aba:	2300      	movs	r3, #0
 8001abc:	82fb      	strh	r3, [r7, #22]

	//CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal

	cfg.EN_TMP_CAL=1;
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <DAC_TEMP_CAL+0xd0>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
	DAC_SendInit();
 8001ac4:	f7ff ff6a 	bl	800199c <DAC_SendInit>

	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <DAC_TEMP_CAL+0xd4>)
 8001aca:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	81bb      	strh	r3, [r7, #12]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	81fb      	strh	r3, [r7, #14]

	DAC_tx_buffer=0x85000000; // read status register
 8001ada:	f04f 4305 	mov.w	r3, #2231369728	; 0x85000000
 8001ade:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	80bb      	strh	r3, [r7, #4]
	DAC_tx_tmp_buffer2[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2110      	movs	r1, #16
 8001af2:	4824      	ldr	r0, [pc, #144]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001af4:	f004 f8a1 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001af8:	f107 010c 	add.w	r1, r7, #12
 8001afc:	2302      	movs	r3, #2
 8001afe:	2202      	movs	r2, #2
 8001b00:	4821      	ldr	r0, [pc, #132]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b02:	f007 fae9 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2110      	movs	r1, #16
 8001b0a:	481e      	ldr	r0, [pc, #120]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b0c:	f004 f895 	bl	8005c3a <HAL_GPIO_WritePin>

	do{ // Check complete flag
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2110      	movs	r1, #16
 8001b14:	481b      	ldr	r0, [pc, #108]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b16:	f004 f890 	bl	8005c3a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 8001b1a:	1d39      	adds	r1, r7, #4
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4819      	ldr	r0, [pc, #100]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b22:	f007 fad9 	bl	80090d8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2110      	movs	r1, #16
 8001b2a:	4816      	ldr	r0, [pc, #88]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b2c:	f004 f885 	bl	8005c3a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2110      	movs	r1, #16
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b36:	f004 f880 	bl	8005c3a <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 2, 2);
 8001b3a:	f107 0108 	add.w	r1, r7, #8
 8001b3e:	2302      	movs	r3, #2
 8001b40:	2202      	movs	r2, #2
 8001b42:	4811      	ldr	r0, [pc, #68]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b44:	f007 fc04 	bl	8009350 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b4e:	f004 f874 	bl	8005c3a <HAL_GPIO_WritePin>
		ALM=(spi_receive[1] & 0x1000) >> 12;
 8001b52:	897b      	ldrh	r3, [r7, #10]
 8001b54:	131b      	asrs	r3, r3, #12
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	82fb      	strh	r3, [r7, #22]
		if(ALM!=1)HAL_Delay(10);
 8001b5e:	8afb      	ldrh	r3, [r7, #22]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d002      	beq.n	8001b6a <DAC_TEMP_CAL+0xbe>
 8001b64:	200a      	movs	r0, #10
 8001b66:	f003 fa03 	bl	8004f70 <HAL_Delay>
	}while(ALM!=1);
 8001b6a:	8afb      	ldrh	r3, [r7, #22]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d1cf      	bne.n	8001b10 <DAC_TEMP_CAL+0x64>
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000d04 	.word	0x20000d04
 8001b80:	04000100 	.word	0x04000100
 8001b84:	40020000 	.word	0x40020000
 8001b88:	20000d38 	.word	0x20000d38

08001b8c <DDS_Calculation>:

void DDS_Calculation(void)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
	float hw_limit=1000; // 1kHz hardware optimized limit
 8001b92:	4b86      	ldr	r3, [pc, #536]	; (8001dac <DDS_Calculation+0x220>)
 8001b94:	613b      	str	r3, [r7, #16]
	float dac_counts=DAC_CODE_TOP-1;
 8001b96:	4b86      	ldr	r3, [pc, #536]	; (8001db0 <DDS_Calculation+0x224>)
 8001b98:	60fb      	str	r3, [r7, #12]
	float corr_coeff;
	float dac_tmp=DAC_code;
 8001b9a:	4b86      	ldr	r3, [pc, #536]	; (8001db4 <DDS_Calculation+0x228>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f8ba 	bl	8000d18 <__aeabi_ui2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60bb      	str	r3, [r7, #8]
	float second_left;
	uint32_t codes_left;

	// Linearity correction
	corr_coeff=corr_coeff_1*dac_tmp*dac_tmp;
 8001ba8:	4b83      	ldr	r3, [pc, #524]	; (8001db8 <DDS_Calculation+0x22c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f90a 	bl	8000dc8 <__aeabi_fmul>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68b8      	ldr	r0, [r7, #8]
 8001bba:	f7ff f905 	bl	8000dc8 <__aeabi_fmul>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_2*dac_tmp;
 8001bc2:	4b7e      	ldr	r3, [pc, #504]	; (8001dbc <DDS_Calculation+0x230>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f8fd 	bl	8000dc8 <__aeabi_fmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fff0 	bl	8000bb8 <__addsf3>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_3;
 8001bdc:	4b78      	ldr	r3, [pc, #480]	; (8001dc0 <DDS_Calculation+0x234>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe ffe8 	bl	8000bb8 <__addsf3>
 8001be8:	4603      	mov	r3, r0
 8001bea:	607b      	str	r3, [r7, #4]

	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed); // 1048575 / (14V / 0.01V/s) = 74.898214 Hz
 8001bec:	4b75      	ldr	r3, [pc, #468]	; (8001dc4 <DDS_Calculation+0x238>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a75      	ldr	r2, [pc, #468]	; (8001dc8 <DDS_Calculation+0x23c>)
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f99a 	bl	8000f30 <__aeabi_fdiv>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff f995 	bl	8000f30 <__aeabi_fdiv>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b70      	ldr	r3, [pc, #448]	; (8001dcc <DDS_Calculation+0x240>)
 8001c0c:	601a      	str	r2, [r3, #0]

	if(DDS_target_frequecny>hw_limit)
 8001c0e:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <DDS_Calculation+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	6938      	ldr	r0, [r7, #16]
 8001c16:	f7ff fa75 	bl	8001104 <__aeabi_fcmplt>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d02e      	beq.n	8001c7e <DDS_Calculation+0xf2>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 8001c20:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <DDS_Calculation+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6939      	ldr	r1, [r7, #16]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f982 	bl	8000f30 <__aeabi_fdiv>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fa90 	bl	8001154 <__aeabi_f2uiz>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4a66      	ldr	r2, [pc, #408]	; (8001dd0 <DDS_Calculation+0x244>)
 8001c38:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001c3a:	4b62      	ldr	r3, [pc, #392]	; (8001dc4 <DDS_Calculation+0x238>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a62      	ldr	r2, [pc, #392]	; (8001dc8 <DDS_Calculation+0x23c>)
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f973 	bl	8000f30 <__aeabi_fdiv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff f96e 	bl	8000f30 <__aeabi_fdiv>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <DDS_Calculation+0x240>)
 8001c5a:	601a      	str	r2, [r3, #0]
		DDS_target_frequecny/=(float)DDS_target_multipiller;
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <DDS_Calculation+0x240>)
 8001c5e:	681c      	ldr	r4, [r3, #0]
 8001c60:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <DDS_Calculation+0x244>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f857 	bl	8000d18 <__aeabi_ui2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff f95e 	bl	8000f30 <__aeabi_fdiv>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b54      	ldr	r3, [pc, #336]	; (8001dcc <DDS_Calculation+0x240>)
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e002      	b.n	8001c84 <DDS_Calculation+0xf8>
	} else DDS_target_multipiller = 1;
 8001c7e:	4b54      	ldr	r3, [pc, #336]	; (8001dd0 <DDS_Calculation+0x244>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

	DDS_FTW=(((DDS_target_frequecny/corr_coeff)*((1<<CPLD_WORD)+1))/DDS_clock_frequecny)*(float)0xFFFFFFFF;
 8001c84:	4b51      	ldr	r3, [pc, #324]	; (8001dcc <DDS_Calculation+0x240>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f950 	bl	8000f30 <__aeabi_fdiv>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461c      	mov	r4, r3
 8001c94:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <DDS_Calculation+0x248>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f83d 	bl	8000d20 <__aeabi_i2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff f88c 	bl	8000dc8 <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <DDS_Calculation+0x24c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f7ff f938 	bl	8000f30 <__aeabi_fdiv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f87e 	bl	8000dc8 <__aeabi_fmul>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b42      	ldr	r3, [pc, #264]	; (8001ddc <DDS_Calculation+0x250>)
 8001cd2:	601a      	str	r2, [r3, #0]

	switch(DAC_code_direction)
 8001cd4:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <DDS_Calculation+0x254>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d011      	beq.n	8001d00 <DDS_Calculation+0x174>
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	dc1f      	bgt.n	8001d20 <DDS_Calculation+0x194>
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <DDS_Calculation+0x16c>
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d11b      	bne.n	8001d20 <DDS_Calculation+0x194>
	{
	//----------------------------------------------------------//
	case DIRECTION_UP_STATE:
		codes_left=0xFFFFF-DAC_code;
 8001ce8:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <DDS_Calculation+0x228>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8001cf0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001cf4:	617b      	str	r3, [r7, #20]
		break;
 8001cf6:	e013      	b.n	8001d20 <DDS_Calculation+0x194>
	case DIRECTION_DOWN_STATE:
		codes_left=DAC_code;
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <DDS_Calculation+0x228>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	617b      	str	r3, [r7, #20]
		break;
 8001cfe:	e00f      	b.n	8001d20 <DDS_Calculation+0x194>
	case DIRECTION_CYCLE_STATE:
		if(DAC_code_direction_for_cycle_mode == 1)
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <DDS_Calculation+0x258>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d107      	bne.n	8001d18 <DDS_Calculation+0x18c>
		{
			codes_left=0xFFFFF-DAC_code;
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <DDS_Calculation+0x228>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8001d10:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001d14:	617b      	str	r3, [r7, #20]
		}
		else
		{
			codes_left=DAC_code;
		}
		break;
 8001d16:	e002      	b.n	8001d1e <DDS_Calculation+0x192>
			codes_left=DAC_code;
 8001d18:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <DDS_Calculation+0x228>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	617b      	str	r3, [r7, #20]
		break;
 8001d1e:	bf00      	nop
	}

	second_left=codes_left/DDS_target_multipiller/DDS_target_frequecny;
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <DDS_Calculation+0x244>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fff4 	bl	8000d18 <__aeabi_ui2f>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <DDS_Calculation+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f7ff f8f9 	bl	8000f30 <__aeabi_fdiv>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	603b      	str	r3, [r7, #0]
	eta_second=(uint32_t)second_left % 60;
 8001d42:	6838      	ldr	r0, [r7, #0]
 8001d44:	f7ff fa06 	bl	8001154 <__aeabi_f2uiz>
 8001d48:	4601      	mov	r1, r0
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <DDS_Calculation+0x25c>)
 8001d4c:	fba3 2301 	umull	r2, r3, r3, r1
 8001d50:	095a      	lsrs	r2, r3, #5
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	1aca      	subs	r2, r1, r3
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <DDS_Calculation+0x260>)
 8001d60:	701a      	strb	r2, [r3, #0]
	eta_minute=(uint32_t)(second_left / 60) % 60;
 8001d62:	4923      	ldr	r1, [pc, #140]	; (8001df0 <DDS_Calculation+0x264>)
 8001d64:	6838      	ldr	r0, [r7, #0]
 8001d66:	f7ff f8e3 	bl	8000f30 <__aeabi_fdiv>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f9f1 	bl	8001154 <__aeabi_f2uiz>
 8001d72:	4601      	mov	r1, r0
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <DDS_Calculation+0x25c>)
 8001d76:	fba3 2301 	umull	r2, r3, r3, r1
 8001d7a:	095a      	lsrs	r2, r3, #5
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	1aca      	subs	r2, r1, r3
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <DDS_Calculation+0x268>)
 8001d8a:	701a      	strb	r2, [r3, #0]
	eta_hours=(uint32_t) second_left / 3600;
 8001d8c:	6838      	ldr	r0, [r7, #0]
 8001d8e:	f7ff f9e1 	bl	8001154 <__aeabi_f2uiz>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <DDS_Calculation+0x26c>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0adb      	lsrs	r3, r3, #11
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <DDS_Calculation+0x270>)
 8001da0:	701a      	strb	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	371c      	adds	r7, #28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	447a0000 	.word	0x447a0000
 8001db0:	497fffe0 	.word	0x497fffe0
 8001db4:	20000d2c 	.word	0x20000d2c
 8001db8:	20000b2c 	.word	0x20000b2c
 8001dbc:	20000b30 	.word	0x20000b30
 8001dc0:	20000b34 	.word	0x20000b34
 8001dc4:	20000d1c 	.word	0x20000d1c
 8001dc8:	20000d18 	.word	0x20000d18
 8001dcc:	20000d14 	.word	0x20000d14
 8001dd0:	200007b0 	.word	0x200007b0
 8001dd4:	20000d0e 	.word	0x20000d0e
 8001dd8:	200007b4 	.word	0x200007b4
 8001ddc:	20000d10 	.word	0x20000d10
 8001de0:	20000d30 	.word	0x20000d30
 8001de4:	20000d31 	.word	0x20000d31
 8001de8:	88888889 	.word	0x88888889
 8001dec:	20000cd6 	.word	0x20000cd6
 8001df0:	42700000 	.word	0x42700000
 8001df4:	20000cd5 	.word	0x20000cd5
 8001df8:	91a2b3c5 	.word	0x91a2b3c5
 8001dfc:	20000cd4 	.word	0x20000cd4

08001e00 <DDS_Init>:

//==============================================================================================
void DDS_Init(void)
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];
	DDS_Calculation();
 8001e06:	f7ff fec1 	bl	8001b8c <DDS_Calculation>

	HAL_Delay(100);
 8001e0a:	2064      	movs	r0, #100	; 0x64
 8001e0c:	f003 f8b0 	bl	8004f70 <HAL_Delay>

	//CONTROL REGISTER WRITE SLEEP =1 ,	RESET = 1,	CLR = 1
	DDS_tx_buffer[0]=0xC000; // Control DDS (D15=1, D14=1)
 8001e10:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e14:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=0x7 << 11; //  SLEEP = 1 , RESET = 1,	CLR = 1
 8001e16:	88bb      	ldrh	r3, [r7, #4]
 8001e18:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e26:	4861      	ldr	r0, [pc, #388]	; (8001fac <DDS_Init+0x1ac>)
 8001e28:	f003 ff07 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e2c:	1d39      	adds	r1, r7, #4
 8001e2e:	2305      	movs	r3, #5
 8001e30:	2201      	movs	r2, #1
 8001e32:	485f      	ldr	r0, [pc, #380]	; (8001fb0 <DDS_Init+0x1b0>)
 8001e34:	f007 f950 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3e:	485b      	ldr	r0, [pc, #364]	; (8001fac <DDS_Init+0x1ac>)
 8001e40:	f003 fefb 	bl	8005c3a <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001e44:	2064      	movs	r0, #100	; 0x64
 8001e46:	f003 f893 	bl	8004f70 <HAL_Delay>
	//DO NOT !!! SET SYNC AND/OR SELSRC TO 1

	//WRITE INITIAL DATA

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001e4a:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001e4e:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001e50:	88bc      	ldrh	r4, [r7, #4]
 8001e52:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <DDS_Init+0x1b4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f97c 	bl	8001154 <__aeabi_f2uiz>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	0e1b      	lsrs	r3, r3, #24
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4423      	add	r3, r4
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6e:	484f      	ldr	r0, [pc, #316]	; (8001fac <DDS_Init+0x1ac>)
 8001e70:	f003 fee3 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e74:	1d39      	adds	r1, r7, #4
 8001e76:	2305      	movs	r3, #5
 8001e78:	2201      	movs	r2, #1
 8001e7a:	484d      	ldr	r0, [pc, #308]	; (8001fb0 <DDS_Init+0x1b0>)
 8001e7c:	f007 f92c 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e86:	4849      	ldr	r0, [pc, #292]	; (8001fac <DDS_Init+0x1ac>)
 8001e88:	f003 fed7 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001e8c:	2032      	movs	r0, #50	; 0x32
 8001e8e:	f003 f86f 	bl	8004f70 <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001e92:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001e96:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001e98:	88bc      	ldrh	r4, [r7, #4]
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <DDS_Init+0x1b4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f958 	bl	8001154 <__aeabi_f2uiz>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	4423      	add	r3, r4
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eba:	483c      	ldr	r0, [pc, #240]	; (8001fac <DDS_Init+0x1ac>)
 8001ebc:	f003 febd 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ec0:	1d39      	adds	r1, r7, #4
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	483a      	ldr	r0, [pc, #232]	; (8001fb0 <DDS_Init+0x1b0>)
 8001ec8:	f007 f906 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed2:	4836      	ldr	r0, [pc, #216]	; (8001fac <DDS_Init+0x1ac>)
 8001ed4:	f003 feb1 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001ed8:	2032      	movs	r0, #50	; 0x32
 8001eda:	f003 f849 	bl	8004f70 <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001ede:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001ee2:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001ee4:	88bc      	ldrh	r4, [r7, #4]
 8001ee6:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <DDS_Init+0x1b4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f932 	bl	8001154 <__aeabi_f2uiz>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4423      	add	r3, r4
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f06:	4829      	ldr	r0, [pc, #164]	; (8001fac <DDS_Init+0x1ac>)
 8001f08:	f003 fe97 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f0c:	1d39      	adds	r1, r7, #4
 8001f0e:	2305      	movs	r3, #5
 8001f10:	2201      	movs	r2, #1
 8001f12:	4827      	ldr	r0, [pc, #156]	; (8001fb0 <DDS_Init+0x1b0>)
 8001f14:	f007 f8e0 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1e:	4823      	ldr	r0, [pc, #140]	; (8001fac <DDS_Init+0x1ac>)
 8001f20:	f003 fe8b 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001f24:	2032      	movs	r0, #50	; 0x32
 8001f26:	f003 f823 	bl	8004f70 <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2e:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001f30:	88bc      	ldrh	r4, [r7, #4]
 8001f32:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <DDS_Init+0x1b4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f90c 	bl	8001154 <__aeabi_f2uiz>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4423      	add	r3, r4
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f50:	4816      	ldr	r0, [pc, #88]	; (8001fac <DDS_Init+0x1ac>)
 8001f52:	f003 fe72 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f56:	1d39      	adds	r1, r7, #4
 8001f58:	2305      	movs	r3, #5
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4814      	ldr	r0, [pc, #80]	; (8001fb0 <DDS_Init+0x1b0>)
 8001f5e:	f007 f8bb 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f68:	4810      	ldr	r0, [pc, #64]	; (8001fac <DDS_Init+0x1ac>)
 8001f6a:	f003 fe66 	bl	8005c3a <HAL_GPIO_WritePin>


	HAL_Delay(100);
 8001f6e:	2064      	movs	r0, #100	; 0x64
 8001f70:	f002 fffe 	bl	8004f70 <HAL_Delay>

	// CONTROL REGISTER WRITE, 	SLEEP = 0,	RESET = 0, CLR = 0

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Exit DAC from Sleep+Reset mode
 8001f74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f78:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <DDS_Init+0x1ac>)
 8001f82:	f003 fe5a 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f86:	1d39      	adds	r1, r7, #4
 8001f88:	2305      	movs	r3, #5
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <DDS_Init+0x1b0>)
 8001f8e:	f007 f8a3 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <DDS_Init+0x1ac>)
 8001f9a:	f003 fe4e 	bl	8005c3a <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001f9e:	2064      	movs	r0, #100	; 0x64
 8001fa0:	f002 ffe6 	bl	8004f70 <HAL_Delay>

}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	20000d90 	.word	0x20000d90
 8001fb4:	20000d10 	.word	0x20000d10

08001fb8 <DDS_Update>:

//==============================================================================================
void DDS_Update(void)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001fbe:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001fc2:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001fc4:	88bc      	ldrh	r4, [r7, #4]
 8001fc6:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <DDS_Update+0x120>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f8c2 	bl	8001154 <__aeabi_f2uiz>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	0e1b      	lsrs	r3, r3, #24
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	4423      	add	r3, r4
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe2:	483e      	ldr	r0, [pc, #248]	; (80020dc <DDS_Update+0x124>)
 8001fe4:	f003 fe29 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001fe8:	1d39      	adds	r1, r7, #4
 8001fea:	2305      	movs	r3, #5
 8001fec:	2201      	movs	r2, #1
 8001fee:	483c      	ldr	r0, [pc, #240]	; (80020e0 <DDS_Update+0x128>)
 8001ff0:	f007 f872 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ffa:	4838      	ldr	r0, [pc, #224]	; (80020dc <DDS_Update+0x124>)
 8001ffc:	f003 fe1d 	bl	8005c3a <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8002000:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8002004:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8002006:	88bc      	ldrh	r4, [r7, #4]
 8002008:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <DDS_Update+0x120>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff f8a1 	bl	8001154 <__aeabi_f2uiz>
 8002012:	4603      	mov	r3, r0
 8002014:	0c1b      	lsrs	r3, r3, #16
 8002016:	b29b      	uxth	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	b29b      	uxth	r3, r3
 800201c:	4423      	add	r3, r4
 800201e:	b29b      	uxth	r3, r3
 8002020:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002028:	482c      	ldr	r0, [pc, #176]	; (80020dc <DDS_Update+0x124>)
 800202a:	f003 fe06 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 800202e:	1d39      	adds	r1, r7, #4
 8002030:	2305      	movs	r3, #5
 8002032:	2201      	movs	r2, #1
 8002034:	482a      	ldr	r0, [pc, #168]	; (80020e0 <DDS_Update+0x128>)
 8002036:	f007 f84f 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002040:	4826      	ldr	r0, [pc, #152]	; (80020dc <DDS_Update+0x124>)
 8002042:	f003 fdfa 	bl	8005c3a <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8002046:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 800204a:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 800204c:	88bc      	ldrh	r4, [r7, #4]
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <DDS_Update+0x120>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f87e 	bl	8001154 <__aeabi_f2uiz>
 8002058:	4603      	mov	r3, r0
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	b29b      	uxth	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	b29b      	uxth	r3, r3
 8002062:	4423      	add	r3, r4
 8002064:	b29b      	uxth	r3, r3
 8002066:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800206e:	481b      	ldr	r0, [pc, #108]	; (80020dc <DDS_Update+0x124>)
 8002070:	f003 fde3 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8002074:	1d39      	adds	r1, r7, #4
 8002076:	2305      	movs	r3, #5
 8002078:	2201      	movs	r2, #1
 800207a:	4819      	ldr	r0, [pc, #100]	; (80020e0 <DDS_Update+0x128>)
 800207c:	f007 f82c 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002086:	4815      	ldr	r0, [pc, #84]	; (80020dc <DDS_Update+0x124>)
 8002088:	f003 fdd7 	bl	8005c3a <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 800208c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002090:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8002092:	88bc      	ldrh	r4, [r7, #4]
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <DDS_Update+0x120>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f85b 	bl	8001154 <__aeabi_f2uiz>
 800209e:	4603      	mov	r3, r0
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4423      	add	r3, r4
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020b2:	480a      	ldr	r0, [pc, #40]	; (80020dc <DDS_Update+0x124>)
 80020b4:	f003 fdc1 	bl	8005c3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 80020b8:	1d39      	adds	r1, r7, #4
 80020ba:	2305      	movs	r3, #5
 80020bc:	2201      	movs	r2, #1
 80020be:	4808      	ldr	r0, [pc, #32]	; (80020e0 <DDS_Update+0x128>)
 80020c0:	f007 f80a 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ca:	4804      	ldr	r0, [pc, #16]	; (80020dc <DDS_Update+0x124>)
 80020cc:	f003 fdb5 	bl	8005c3a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
*/
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd90      	pop	{r4, r7, pc}
 80020d8:	20000d10 	.word	0x20000d10
 80020dc:	40020400 	.word	0x40020400
 80020e0:	20000d90 	.word	0x20000d90

080020e4 <LcdSend>:
extern FunctionalState Display_need_wakeup;
extern FunctionalState Display_status;
extern FunctionalState Need_update_Display;

void LcdSend(uint8_t data, uint8_t cmd) //Sends data to display controller
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	460a      	mov	r2, r1
 80020ee:	71fb      	strb	r3, [r7, #7]
 80020f0:	4613      	mov	r3, r2
 80020f2:	71bb      	strb	r3, [r7, #6]
  uint8_t sdata = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]

  lcd44780_RW_0;
 80020f8:	2200      	movs	r2, #0
 80020fa:	2102      	movs	r1, #2
 80020fc:	4811      	ldr	r0, [pc, #68]	; (8002144 <LcdSend+0x60>)
 80020fe:	f003 fd9c 	bl	8005c3a <HAL_GPIO_WritePin>

  sdata = data;
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	73fb      	strb	r3, [r7, #15]
  if(cmd == lcd_CMD)
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <LcdSend+0x34>
  {
	  lcd44780_RS_0;
 800210c:	2201      	movs	r2, #1
 800210e:	2101      	movs	r1, #1
 8002110:	480c      	ldr	r0, [pc, #48]	; (8002144 <LcdSend+0x60>)
 8002112:	f003 fd92 	bl	8005c3a <HAL_GPIO_WritePin>
 8002116:	e004      	b.n	8002122 <LcdSend+0x3e>
  }                             //идентефикатор кода
  else
  {
	  lcd44780_RS_1;
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <LcdSend+0x60>)
 800211e:	f003 fd8c 	bl	8005c3a <HAL_GPIO_WritePin>
  }                             //идентефикатор данных
  send_data(sdata);
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f983 	bl	8002430 <send_data>

  if(cmd == lcd_CMD)while(check_busy_flag());
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <LcdSend+0x58>
 8002130:	bf00      	nop
 8002132:	f000 f9bd 	bl	80024b0 <check_busy_flag>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1fa      	bne.n	8002132 <LcdSend+0x4e>
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40020400 	.word	0x40020400

08002148 <LcdUpdate>:

void LcdUpdate(void)            //Copies the LCD cache into the device RAM
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  int i = 0, j = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	2300      	movs	r3, #0
 8002154:	603b      	str	r3, [r7, #0]

  Need_update_Display=0;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <LcdUpdate+0x6c>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
  LcdSend(HD44780_SET_CGRAM_ADD, lcd_CMD);//Позицианируем курсор на начало координат
 800215c:	2101      	movs	r1, #1
 800215e:	2040      	movs	r0, #64	; 0x40
 8002160:	f7ff ffc0 	bl	80020e4 <LcdSend>
  LcdSend(HD44780_SET_DDRAM_ADD, lcd_CMD);
 8002164:	2101      	movs	r1, #1
 8002166:	2080      	movs	r0, #128	; 0x80
 8002168:	f7ff ffbc 	bl	80020e4 <LcdSend>

  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	e017      	b.n	80021a2 <LcdUpdate+0x5a>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 8002172:	2300      	movs	r3, #0
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	e00e      	b.n	8002196 <LcdUpdate+0x4e>
    {
      LcdSend(LcdCache[((i * LCD_X_RES) + j)], lcd_DATA);       //вычисляем адрес в фрейм буфере, и данные от туда грузим в дисплей.
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2264      	movs	r2, #100	; 0x64
 800217c:	fb03 f202 	mul.w	r2, r3, r2
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <LcdUpdate+0x70>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	2102      	movs	r1, #2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ffaa 	bl	80020e4 <LcdSend>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b63      	cmp	r3, #99	; 0x63
 800219a:	dded      	ble.n	8002178 <LcdUpdate+0x30>
  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3301      	adds	r3, #1
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	dde4      	ble.n	8002172 <LcdUpdate+0x2a>
    }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000d33 	.word	0x20000d33
 80021b8:	20000b54 	.word	0x20000b54

080021bc <LcdClear_massive>:
  LcdUpdate();
}


void LcdClear_massive(void)     //Clears the display
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
  int i = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]

  for (i = 0; i < LCD_CACHSIZE; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	e007      	b.n	80021dc <LcdClear_massive+0x20>
    LcdCache[i] = 0;            //забиваем всю память 0
 80021cc:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <LcdClear_massive+0x34>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < LCD_CACHSIZE; i++)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3301      	adds	r3, #1
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2bc7      	cmp	r3, #199	; 0xc7
 80021e0:	ddf4      	ble.n	80021cc <LcdClear_massive+0x10>
}
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000b54 	.word	0x20000b54

080021f4 <LcdGotoXYFont>:
  }
}


void LcdGotoXYFont(unsigned char x, unsigned char y)    //Sets cursor location to xy location. Range: 1,1 .. 14,6
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
  LcdCacheIdx = ((int) (y) - 1) * Cntr_X_RES + ((int) (x) - 1) * Cntr_Y_RES;
 8002204:	79bb      	ldrb	r3, [r7, #6]
 8002206:	3b01      	subs	r3, #1
 8002208:	2264      	movs	r2, #100	; 0x64
 800220a:	fb03 f202 	mul.w	r2, r3, r2
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	3b01      	subs	r3, #1
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	4413      	add	r3, r2
 8002216:	461a      	mov	r2, r3
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <LcdGotoXYFont+0x34>)
 800221a:	601a      	str	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000c1c 	.word	0x20000c1c

0800222c <clean_lcd_buf>:

void clean_lcd_buf(void)        //очистка текстового буфера
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	71fb      	strb	r3, [r7, #7]

  for (i = 0; i < 20; i++)
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	e006      	b.n	800224a <clean_lcd_buf+0x1e>
    lcd_buf[i] = 0;
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	4a07      	ldr	r2, [pc, #28]	; (800225c <clean_lcd_buf+0x30>)
 8002240:	2100      	movs	r1, #0
 8002242:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 20; i++)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	3301      	adds	r3, #1
 8002248:	71fb      	strb	r3, [r7, #7]
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b13      	cmp	r3, #19
 800224e:	d9f5      	bls.n	800223c <clean_lcd_buf+0x10>
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	20000b40 	.word	0x20000b40

08002260 <LcdChr>:

void LcdChr(int ch)             //Displays a character at current cursor location and increment cursor location
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  char i = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
  if(ch > 0x7f)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b7f      	cmp	r3, #127	; 0x7f
 8002270:	dd1a      	ble.n	80022a8 <LcdChr+0x48>
  {
    for (i = 0; i < 5; i++)
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	e013      	b.n	80022a0 <LcdChr+0x40>
      LcdCache[LcdCacheIdx++] = lcd_font_table_rus[(ch * 5 + (i) - 0x3C0)];     //выделяем байт-столбик из символа и грузим в массив - 5 раз
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	441a      	add	r2, r3
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	4413      	add	r3, r2
 8002284:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <LcdChr+0x98>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1c59      	adds	r1, r3, #1
 800228e:	481a      	ldr	r0, [pc, #104]	; (80022f8 <LcdChr+0x98>)
 8002290:	6001      	str	r1, [r0, #0]
 8002292:	491a      	ldr	r1, [pc, #104]	; (80022fc <LcdChr+0x9c>)
 8002294:	5c89      	ldrb	r1, [r1, r2]
 8002296:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <LcdChr+0xa0>)
 8002298:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	3301      	adds	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d9e8      	bls.n	8002278 <LcdChr+0x18>
 80022a6:	e019      	b.n	80022dc <LcdChr+0x7c>
  } else
  {
    for (i = 0; i < 5; i++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e013      	b.n	80022d6 <LcdChr+0x76>
      LcdCache[LcdCacheIdx++] = lcd_font_table[(ch * 5 + (i) - 0xA0)];  //выделяем байт-столбик из символа и грузим в массив - 5 раз
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	441a      	add	r2, r3
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4413      	add	r3, r2
 80022ba:	f1a3 02a0 	sub.w	r2, r3, #160	; 0xa0
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <LcdChr+0x98>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1c59      	adds	r1, r3, #1
 80022c4:	480c      	ldr	r0, [pc, #48]	; (80022f8 <LcdChr+0x98>)
 80022c6:	6001      	str	r1, [r0, #0]
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <LcdChr+0xa4>)
 80022ca:	5c89      	ldrb	r1, [r1, r2]
 80022cc:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <LcdChr+0xa0>)
 80022ce:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	3301      	adds	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d9e8      	bls.n	80022ae <LcdChr+0x4e>
  }
  LcdCache[LcdCacheIdx++] = 0x00;       //добавляем пробел между символами
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <LcdChr+0x98>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	4905      	ldr	r1, [pc, #20]	; (80022f8 <LcdChr+0x98>)
 80022e4:	600a      	str	r2, [r1, #0]
 80022e6:	4a06      	ldr	r2, [pc, #24]	; (8002300 <LcdChr+0xa0>)
 80022e8:	2100      	movs	r1, #0
 80022ea:	54d1      	strb	r1, [r2, r3]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000c1c 	.word	0x20000c1c
 80022fc:	200001e0 	.word	0x200001e0
 8002300:	20000b54 	.word	0x20000b54
 8002304:	20000000 	.word	0x20000000

08002308 <LcdString>:
  }
  LcdCache[LcdCacheIdx++] = 0xFF;       //добавляем пробел между символами
}

void LcdString(unsigned char x, unsigned char y)        //Displays a string at current cursor location
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	460a      	mov	r2, r1
 8002312:	71fb      	strb	r3, [r7, #7]
 8002314:	4613      	mov	r3, r2
 8002316:	71bb      	strb	r3, [r7, #6]
  unsigned char i = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]

  if(x > 17 || y > 8)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2b11      	cmp	r3, #17
 8002320:	d81f      	bhi.n	8002362 <LcdString+0x5a>
 8002322:	79bb      	ldrb	r3, [r7, #6]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d81c      	bhi.n	8002362 <LcdString+0x5a>
    return;
  LcdGotoXYFont(x, y);
 8002328:	79ba      	ldrb	r2, [r7, #6]
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff60 	bl	80021f4 <LcdGotoXYFont>
  for (i = 0; i < 17; i++)
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e00d      	b.n	8002356 <LcdString+0x4e>
    if(lcd_buf[i])
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <LcdString+0x64>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <LcdString+0x48>
      LcdChr(lcd_buf[i]);
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <LcdString+0x64>)
 8002348:	5cd3      	ldrb	r3, [r2, r3]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff88 	bl	8002260 <LcdChr>
  for (i = 0; i < 17; i++)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	3301      	adds	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b10      	cmp	r3, #16
 800235a:	d9ee      	bls.n	800233a <LcdString+0x32>
  clean_lcd_buf();
 800235c:	f7ff ff66 	bl	800222c <clean_lcd_buf>
 8002360:	e000      	b.n	8002364 <LcdString+0x5c>
    return;
 8002362:	bf00      	nop
}
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000b40 	.word	0x20000b40

08002370 <pulse_e>:
//////////////////////////////////////////////////////////////////////////////////////



void pulse_e() //импульс на вход Е индикатора
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_SET);//    PIN_ON(PIN_E);
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <pulse_e+0x20>)
 800237c:	f003 fc5d 	bl	8005c3a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002386:	4802      	ldr	r0, [pc, #8]	; (8002390 <pulse_e+0x20>)
 8002388:	f003 fc57 	bl	8005c3a <HAL_GPIO_WritePin>
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40020400 	.word	0x40020400

08002394 <send_nibble>:

void send_nibble(unsigned char data) //полубайтовый вывод
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  //выводим половину байта на соответствующие контакты
  if(data & 0x01)
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <send_nibble+0x20>
	HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB4);
 80023a8:	2201      	movs	r2, #1
 80023aa:	2104      	movs	r1, #4
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <send_nibble+0x98>)
 80023ae:	f003 fc44 	bl	8005c3a <HAL_GPIO_WritePin>
 80023b2:	e004      	b.n	80023be <send_nibble+0x2a>
  else
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2104      	movs	r1, #4
 80023b8:	481c      	ldr	r0, [pc, #112]	; (800242c <send_nibble+0x98>)
 80023ba:	f003 fc3e 	bl	8005c3a <HAL_GPIO_WritePin>

  if(data & 0x02)
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <send_nibble+0x40>
		HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB5);
 80023c8:	2201      	movs	r2, #1
 80023ca:	2108      	movs	r1, #8
 80023cc:	4817      	ldr	r0, [pc, #92]	; (800242c <send_nibble+0x98>)
 80023ce:	f003 fc34 	bl	8005c3a <HAL_GPIO_WritePin>
 80023d2:	e004      	b.n	80023de <send_nibble+0x4a>
	  else
	    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2108      	movs	r1, #8
 80023d8:	4814      	ldr	r0, [pc, #80]	; (800242c <send_nibble+0x98>)
 80023da:	f003 fc2e 	bl	8005c3a <HAL_GPIO_WritePin>

  if(data & 0x04)
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <send_nibble+0x60>
		HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB6);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2110      	movs	r1, #16
 80023ec:	480f      	ldr	r0, [pc, #60]	; (800242c <send_nibble+0x98>)
 80023ee:	f003 fc24 	bl	8005c3a <HAL_GPIO_WritePin>
 80023f2:	e004      	b.n	80023fe <send_nibble+0x6a>
	  else
	    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2110      	movs	r1, #16
 80023f8:	480c      	ldr	r0, [pc, #48]	; (800242c <send_nibble+0x98>)
 80023fa:	f003 fc1e 	bl	8005c3a <HAL_GPIO_WritePin>

  if(data & 0x08)
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <send_nibble+0x80>
		HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB7);
 8002408:	2201      	movs	r2, #1
 800240a:	2120      	movs	r1, #32
 800240c:	4807      	ldr	r0, [pc, #28]	; (800242c <send_nibble+0x98>)
 800240e:	f003 fc14 	bl	8005c3a <HAL_GPIO_WritePin>
 8002412:	e004      	b.n	800241e <send_nibble+0x8a>
	  else
	    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 8002414:	2200      	movs	r2, #0
 8002416:	2120      	movs	r1, #32
 8002418:	4804      	ldr	r0, [pc, #16]	; (800242c <send_nibble+0x98>)
 800241a:	f003 fc0e 	bl	8005c3a <HAL_GPIO_WritePin>

  pulse_e(); //чтобы индикатор проглотил данные
 800241e:	f7ff ffa7 	bl	8002370 <pulse_e>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40020400 	.word	0x40020400

08002430 <send_data>:

void send_data(unsigned char data) //вывод 2хполбайта на индикатор
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  //Первым шлем старшие полбайта: по инструкции
  //сначала столбец, потом строка таблицы знакогенератора
  send_nibble((data>>4) & 0x0F);
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ffa7 	bl	8002394 <send_nibble>
  send_nibble(data & 0x0F);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ffa0 	bl	8002394 <send_nibble>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <send_command>:

void send_command(unsigned char data) //вывод 2хполбайта на индикатор
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  lcd44780_RS_0;
 8002466:	2201      	movs	r2, #1
 8002468:	2101      	movs	r1, #1
 800246a:	4810      	ldr	r0, [pc, #64]	; (80024ac <send_command+0x50>)
 800246c:	f003 fbe5 	bl	8005c3a <HAL_GPIO_WritePin>
  lcd44780_RW_0;
 8002470:	2200      	movs	r2, #0
 8002472:	2102      	movs	r1, #2
 8002474:	480d      	ldr	r0, [pc, #52]	; (80024ac <send_command+0x50>)
 8002476:	f003 fbe0 	bl	8005c3a <HAL_GPIO_WritePin>

  //Первым шлем старшие полбайта: по инструкции
  //сначала столбец, потом строка таблицы знакогенератора
  send_nibble((data>>4) & 0x0F);
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	b2db      	uxtb	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff87 	bl	8002394 <send_nibble>
  send_nibble(data & 0x0F);
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff80 	bl	8002394 <send_nibble>

  while(check_busy_flag());
 8002494:	bf00      	nop
 8002496:	f000 f80b 	bl	80024b0 <check_busy_flag>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1fa      	bne.n	8002496 <send_command+0x3a>
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40020400 	.word	0x40020400

080024b0 <check_busy_flag>:

int check_busy_flag(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b6:	463b      	mov	r3, r7
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
	GPIO_PinState status;

	lcd44780_RW_1; // Read
 80024c4:	2201      	movs	r2, #1
 80024c6:	2102      	movs	r1, #2
 80024c8:	4822      	ldr	r0, [pc, #136]	; (8002554 <check_busy_flag+0xa4>)
 80024ca:	f003 fbb6 	bl	8005c3a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 80024ce:	2320      	movs	r3, #32
 80024d0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024da:	2302      	movs	r3, #2
 80024dc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024de:	463b      	mov	r3, r7
 80024e0:	4619      	mov	r1, r3
 80024e2:	481c      	ldr	r0, [pc, #112]	; (8002554 <check_busy_flag+0xa4>)
 80024e4:	f003 fa12 	bl	800590c <HAL_GPIO_Init>

	lcd44780_E_1;
 80024e8:	2201      	movs	r2, #1
 80024ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ee:	4819      	ldr	r0, [pc, #100]	; (8002554 <check_busy_flag+0xa4>)
 80024f0:	f003 fba3 	bl	8005c3a <HAL_GPIO_WritePin>
	status=HAL_GPIO_ReadPin(Display_DB7_GPIO_Port, Display_DB7_Pin);
 80024f4:	2120      	movs	r1, #32
 80024f6:	4817      	ldr	r0, [pc, #92]	; (8002554 <check_busy_flag+0xa4>)
 80024f8:	f003 fb88 	bl	8005c0c <HAL_GPIO_ReadPin>
 80024fc:	4603      	mov	r3, r0
 80024fe:	75fb      	strb	r3, [r7, #23]
	lcd44780_E_0;
 8002500:	2200      	movs	r2, #0
 8002502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002506:	4813      	ldr	r0, [pc, #76]	; (8002554 <check_busy_flag+0xa4>)
 8002508:	f003 fb97 	bl	8005c3a <HAL_GPIO_WritePin>
	lcd44780_E_1;
 800250c:	2201      	movs	r2, #1
 800250e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002512:	4810      	ldr	r0, [pc, #64]	; (8002554 <check_busy_flag+0xa4>)
 8002514:	f003 fb91 	bl	8005c3a <HAL_GPIO_WritePin>
	lcd44780_E_0;
 8002518:	2200      	movs	r2, #0
 800251a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800251e:	480d      	ldr	r0, [pc, #52]	; (8002554 <check_busy_flag+0xa4>)
 8002520:	f003 fb8b 	bl	8005c3a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 8002524:	2320      	movs	r3, #32
 8002526:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002528:	2311      	movs	r3, #17
 800252a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002530:	2302      	movs	r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002534:	463b      	mov	r3, r7
 8002536:	4619      	mov	r1, r3
 8002538:	4806      	ldr	r0, [pc, #24]	; (8002554 <check_busy_flag+0xa4>)
 800253a:	f003 f9e7 	bl	800590c <HAL_GPIO_Init>
	lcd44780_RW_0;
 800253e:	2200      	movs	r2, #0
 8002540:	2102      	movs	r1, #2
 8002542:	4804      	ldr	r0, [pc, #16]	; (8002554 <check_busy_flag+0xa4>)
 8002544:	f003 fb79 	bl	8005c3a <HAL_GPIO_WritePin>
	return status;
 8002548:	7dfb      	ldrb	r3, [r7, #23]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40020400 	.word	0x40020400

08002558 <Poweroff_LCD>:

void Poweroff_LCD() //выключение ЖК
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	Display_status=0;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <Poweroff_LCD+0x20>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]

	send_command(0x01); // очистили от мусора ОЗУ (т.с. что clear())
 8002562:	2001      	movs	r0, #1
 8002564:	f7ff ff7a 	bl	800245c <send_command>
	send_command(0x0A); // Display off
 8002568:	200a      	movs	r0, #10
 800256a:	f7ff ff77 	bl	800245c <send_command>
    send_command(0x1B); // Internal DCDC off
 800256e:	201b      	movs	r0, #27
 8002570:	f7ff ff74 	bl	800245c <send_command>
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000d32 	.word	0x20000d32

0800257c <Poweron_LCD>:

void Poweron_LCD() //включение ЖК
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
	Display_status=1;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <Poweron_LCD+0x20>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]

	send_command(0x0E); // Display on
 8002586:	200e      	movs	r0, #14
 8002588:	f7ff ff68 	bl	800245c <send_command>
    send_command(0x1F); // Internal DCDC on
 800258c:	201f      	movs	r0, #31
 800258e:	f7ff ff65 	bl	800245c <send_command>
    send_command(0x01); // очистили от мусора ОЗУ (т.с. что clear())
 8002592:	2001      	movs	r0, #1
 8002594:	f7ff ff62 	bl	800245c <send_command>
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000d32 	.word	0x20000d32

080025a0 <init_LCD>:


void init_LCD() //инициализация ЖК
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	Display_status=1;
 80025a4:	4b2f      	ldr	r3, [pc, #188]	; (8002664 <init_LCD+0xc4>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Display_Power_GPIO_Port, Display_Power_Pin, GPIO_PIN_RESET); // подаем питание на дисплей
 80025aa:	2200      	movs	r2, #0
 80025ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025b0:	482d      	ldr	r0, [pc, #180]	; (8002668 <init_LCD+0xc8>)
 80025b2:	f003 fb42 	bl	8005c3a <HAL_GPIO_WritePin>
  //Выводы в 0
    HAL_GPIO_WritePin(Display_RS_GPIO_Port, Display_RS_Pin, GPIO_PIN_SET);//  PIN_OFF(PIN_RS); !!!
 80025b6:	2201      	movs	r2, #1
 80025b8:	2101      	movs	r1, #1
 80025ba:	482b      	ldr	r0, [pc, #172]	; (8002668 <init_LCD+0xc8>)
 80025bc:	f003 fb3d 	bl	8005c3a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 80025c0:	2200      	movs	r2, #0
 80025c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025c6:	4828      	ldr	r0, [pc, #160]	; (8002668 <init_LCD+0xc8>)
 80025c8:	f003 fb37 	bl	8005c3a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2104      	movs	r1, #4
 80025d0:	4825      	ldr	r0, [pc, #148]	; (8002668 <init_LCD+0xc8>)
 80025d2:	f003 fb32 	bl	8005c3a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2108      	movs	r1, #8
 80025da:	4823      	ldr	r0, [pc, #140]	; (8002668 <init_LCD+0xc8>)
 80025dc:	f003 fb2d 	bl	8005c3a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2110      	movs	r1, #16
 80025e4:	4820      	ldr	r0, [pc, #128]	; (8002668 <init_LCD+0xc8>)
 80025e6:	f003 fb28 	bl	8005c3a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2120      	movs	r1, #32
 80025ee:	481e      	ldr	r0, [pc, #120]	; (8002668 <init_LCD+0xc8>)
 80025f0:	f003 fb23 	bl	8005c3a <HAL_GPIO_WritePin>

	//Ждем включения ЖКИ
    HAL_Delay(500);
 80025f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025f8:	f002 fcba 	bl	8004f70 <HAL_Delay>
    lcd44780_RS_0;
 80025fc:	2201      	movs	r2, #1
 80025fe:	2101      	movs	r1, #1
 8002600:	4819      	ldr	r0, [pc, #100]	; (8002668 <init_LCD+0xc8>)
 8002602:	f003 fb1a 	bl	8005c3a <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 8002606:	2200      	movs	r2, #0
 8002608:	2102      	movs	r1, #2
 800260a:	4817      	ldr	r0, [pc, #92]	; (8002668 <init_LCD+0xc8>)
 800260c:	f003 fb15 	bl	8005c3a <HAL_GPIO_WritePin>
	send_nibble(0x02);
 8002610:	2002      	movs	r0, #2
 8002612:	f7ff febf 	bl	8002394 <send_nibble>
	send_nibble(0x02);
 8002616:	2002      	movs	r0, #2
 8002618:	f7ff febc 	bl	8002394 <send_nibble>
	send_nibble(0x08);// N=1 F=0
 800261c:	2008      	movs	r0, #8
 800261e:	f7ff feb9 	bl	8002394 <send_nibble>

	while(check_busy_flag());
 8002622:	bf00      	nop
 8002624:	f7ff ff44 	bl	80024b0 <check_busy_flag>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1fa      	bne.n	8002624 <init_LCD+0x84>

	send_command(0x0E);// D=1 C=1 B=0
 800262e:	200e      	movs	r0, #14
 8002630:	f7ff ff14 	bl	800245c <send_command>
	send_command(0x01);
 8002634:	2001      	movs	r0, #1
 8002636:	f7ff ff11 	bl	800245c <send_command>
	send_command(0x06); // I/D=1  S/H=0
 800263a:	2006      	movs	r0, #6
 800263c:	f7ff ff0e 	bl	800245c <send_command>
	send_command(0x2A);// DL=0 N=1 F=0 FT1=1 FT0=0
 8002640:	202a      	movs	r0, #42	; 0x2a
 8002642:	f7ff ff0b 	bl	800245c <send_command>
	send_command(0x1F); //переключение в графику
 8002646:	201f      	movs	r0, #31
 8002648:	f7ff ff08 	bl	800245c <send_command>
    send_command(0x01); //очистили от мусора ОЗУ (т.с. что clear())
 800264c:	2001      	movs	r0, #1
 800264e:	f7ff ff05 	bl	800245c <send_command>

    lcd44780_RS_1;
 8002652:	2200      	movs	r2, #0
 8002654:	2101      	movs	r1, #1
 8002656:	4804      	ldr	r0, [pc, #16]	; (8002668 <init_LCD+0xc8>)
 8002658:	f003 faef 	bl	8005c3a <HAL_GPIO_WritePin>

    LcdClear_massive();
 800265c:	f7ff fdae 	bl	80021bc <LcdClear_massive>

}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000d32 	.word	0x20000d32
 8002668:	40020400 	.word	0x40020400

0800266c <LcdBarLine>:
while(check_busy_flag());

}

void LcdBarLine(uint32_t fill)    // рисуем прогресс-бар в второй строке
{
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	uint16_t i, full_fill_position;
	float y;

	if(fill>0xFFFFF)return;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800267a:	f080 808f 	bcs.w	800279c <LcdBarLine+0x130>

	// поиск свободного места в массиве кеша дисплея
//	for (i = LCD_CACHSIZE-1; i > LCD_X_RES; i--) // поиск свободного места в массиве кеша дисплея, в указанной строке
//		if(LcdCache[i]==0x00)
//			found_free_position=i;
	y=LCD_X_RES;
 800267e:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <LcdBarLine+0x138>)
 8002680:	613b      	str	r3, [r7, #16]
	y*=8; //сколько всего диступно места
 8002682:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002686:	6938      	ldr	r0, [r7, #16]
 8002688:	f7fe fb9e 	bl	8000dc8 <__aeabi_fmul>
 800268c:	4603      	mov	r3, r0
 800268e:	613b      	str	r3, [r7, #16]
	y/=(float)0xFFFFF;
 8002690:	4945      	ldr	r1, [pc, #276]	; (80027a8 <LcdBarLine+0x13c>)
 8002692:	6938      	ldr	r0, [r7, #16]
 8002694:	f7fe fc4c 	bl	8000f30 <__aeabi_fdiv>
 8002698:	4603      	mov	r3, r0
 800269a:	613b      	str	r3, [r7, #16]
	y*=(float)fill;// получаем коэфицент заполнения прогрессбара
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7fe fb3b 	bl	8000d18 <__aeabi_ui2f>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4619      	mov	r1, r3
 80026a6:	6938      	ldr	r0, [r7, #16]
 80026a8:	f7fe fb8e 	bl	8000dc8 <__aeabi_fmul>
 80026ac:	4603      	mov	r3, r0
 80026ae:	613b      	str	r3, [r7, #16]
	full_fill_position=floor(y/8);
 80026b0:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80026b4:	6938      	ldr	r0, [r7, #16]
 80026b6:	f7fe fc3b 	bl	8000f30 <__aeabi_fdiv>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd fed5 	bl	800046c <__aeabi_f2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	f00c fd8d 	bl	800f1e8 <floor>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe f9f9 	bl	8000acc <__aeabi_d2uiz>
 80026da:	4603      	mov	r3, r0
 80026dc:	81fb      	strh	r3, [r7, #14]
	//need_to_be_filled=(LCD_CACHSIZE-1-found_free_position)*8 - ;
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 80026de:	2364      	movs	r3, #100	; 0x64
 80026e0:	82fb      	strh	r3, [r7, #22]
 80026e2:	e057      	b.n	8002794 <LcdBarLine+0x128>
		if(y!=0)
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	6938      	ldr	r0, [r7, #16]
 80026ea:	f7fe fd01 	bl	80010f0 <__aeabi_fcmpeq>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d14c      	bne.n	800278e <LcdBarLine+0x122>
		{
			if(full_fill_position>(i-LCD_X_RES))
 80026f4:	8afb      	ldrh	r3, [r7, #22]
 80026f6:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	dc08      	bgt.n	8002712 <LcdBarLine+0xa6>
			{
				LcdCache[i]=LcdCache[i]^0xFF;
 8002700:	8afb      	ldrh	r3, [r7, #22]
 8002702:	4a2a      	ldr	r2, [pc, #168]	; (80027ac <LcdBarLine+0x140>)
 8002704:	5cd2      	ldrb	r2, [r2, r3]
 8002706:	8afb      	ldrh	r3, [r7, #22]
 8002708:	43d2      	mvns	r2, r2
 800270a:	b2d1      	uxtb	r1, r2
 800270c:	4a27      	ldr	r2, [pc, #156]	; (80027ac <LcdBarLine+0x140>)
 800270e:	54d1      	strb	r1, [r2, r3]
 8002710:	e03d      	b.n	800278e <LcdBarLine+0x122>
			} else
			{
				y-=floor(y/8)*8;
 8002712:	6938      	ldr	r0, [r7, #16]
 8002714:	f7fd feaa 	bl	800046c <__aeabi_f2d>
 8002718:	4604      	mov	r4, r0
 800271a:	460d      	mov	r5, r1
 800271c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002720:	6938      	ldr	r0, [r7, #16]
 8002722:	f7fe fc05 	bl	8000f30 <__aeabi_fdiv>
 8002726:	4603      	mov	r3, r0
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fe9f 	bl	800046c <__aeabi_f2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f00c fd57 	bl	800f1e8 <floor>
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <LcdBarLine+0x144>)
 8002740:	f7fd feec 	bl	800051c <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4620      	mov	r0, r4
 800274a:	4629      	mov	r1, r5
 800274c:	f7fd fd2e 	bl	80001ac <__aeabi_dsub>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f7fe f9d8 	bl	8000b0c <__aeabi_d2f>
 800275c:	4603      	mov	r3, r0
 800275e:	613b      	str	r3, [r7, #16]
				LcdCache[i]=LcdCache[i]^((1<<(uint16_t)y)-1);
 8002760:	8afb      	ldrh	r3, [r7, #22]
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <LcdBarLine+0x140>)
 8002764:	5cd3      	ldrb	r3, [r2, r3]
 8002766:	b25c      	sxtb	r4, r3
 8002768:	6938      	ldr	r0, [r7, #16]
 800276a:	f7fe fcf3 	bl	8001154 <__aeabi_f2uiz>
 800276e:	4603      	mov	r3, r0
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	2301      	movs	r3, #1
 8002776:	4093      	lsls	r3, r2
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	b25b      	sxtb	r3, r3
 8002780:	4063      	eors	r3, r4
 8002782:	b25a      	sxtb	r2, r3
 8002784:	8afb      	ldrh	r3, [r7, #22]
 8002786:	b2d1      	uxtb	r1, r2
 8002788:	4a08      	ldr	r2, [pc, #32]	; (80027ac <LcdBarLine+0x140>)
 800278a:	54d1      	strb	r1, [r2, r3]
				break;
 800278c:	e007      	b.n	800279e <LcdBarLine+0x132>
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 800278e:	8afb      	ldrh	r3, [r7, #22]
 8002790:	3301      	adds	r3, #1
 8002792:	82fb      	strh	r3, [r7, #22]
 8002794:	8afb      	ldrh	r3, [r7, #22]
 8002796:	2bc7      	cmp	r3, #199	; 0xc7
 8002798:	d9a4      	bls.n	80026e4 <LcdBarLine+0x78>
 800279a:	e000      	b.n	800279e <LcdBarLine+0x132>
	if(fill>0xFFFFF)return;
 800279c:	bf00      	nop
			}
		}
	}

}
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bdb0      	pop	{r4, r5, r7, pc}
 80027a4:	42c80000 	.word	0x42c80000
 80027a8:	497ffff0 	.word	0x497ffff0
 80027ac:	20000b54 	.word	0x20000b54
 80027b0:	40200000 	.word	0x40200000

080027b4 <output_state>:
//==============================================================================================


//==============================================================================================
void output_state(uint8_t type)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
	int relay_settling_time_ms=50;
 80027be:	2332      	movs	r3, #50	; 0x32
 80027c0:	60fb      	str	r3, [r7, #12]
	switch(type)
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	f200 80f2 	bhi.w	80029ae <output_state+0x1fa>
 80027ca:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <output_state+0x1c>)
 80027cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d0:	080027e5 	.word	0x080027e5
 80027d4:	0800281d 	.word	0x0800281d
 80027d8:	0800286d 	.word	0x0800286d
 80027dc:	080028cd 	.word	0x080028cd
 80027e0:	0800292d 	.word	0x0800292d
	{
	//----------------------------------------------------------//
	case Output_off_STATE:
	  Relay_control(0,0); // set all coils off
 80027e4:	2100      	movs	r1, #0
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7fe ff30 	bl	800164c <Relay_control>
	  Relay_control(1,0); // x1 mode
 80027ec:	2100      	movs	r1, #0
 80027ee:	2001      	movs	r0, #1
 80027f0:	f7fe ff2c 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 80027f4:	2100      	movs	r1, #0
 80027f6:	2002      	movs	r0, #2
 80027f8:	f7fe ff28 	bl	800164c <Relay_control>
	  Relay_control(3,0); // Output Enable
 80027fc:	2100      	movs	r1, #0
 80027fe:	2003      	movs	r0, #3
 8002800:	f7fe ff24 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4618      	mov	r0, r3
 8002808:	f002 fbb2 	bl	8004f70 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 800280c:	2100      	movs	r1, #0
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe ff1c 	bl	800164c <Relay_control>
	  Current_output_status=Output_off_STATE;
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <output_state+0x204>)
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
	  break;
 800281a:	e0c8      	b.n	80029ae <output_state+0x1fa>

	case Output_x1_STATE:
	  Relay_control(0,0); // set all coils off
 800281c:	2100      	movs	r1, #0
 800281e:	2000      	movs	r0, #0
 8002820:	f7fe ff14 	bl	800164c <Relay_control>
	  Relay_control(1,0); // x1 mode
 8002824:	2100      	movs	r1, #0
 8002826:	2001      	movs	r0, #1
 8002828:	f7fe ff10 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 800282c:	2100      	movs	r1, #0
 800282e:	2002      	movs	r0, #2
 8002830:	f7fe ff0c 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 8002834:	2101      	movs	r1, #1
 8002836:	2003      	movs	r0, #3
 8002838:	f7fe ff08 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4618      	mov	r0, r3
 8002840:	f002 fb96 	bl	8004f70 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 8002844:	2100      	movs	r1, #0
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe ff00 	bl	800164c <Relay_control>
	  Current_output_status=Output_x1_STATE;
 800284c:	4b5a      	ldr	r3, [pc, #360]	; (80029b8 <output_state+0x204>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002852:	4b5a      	ldr	r3, [pc, #360]	; (80029bc <output_state+0x208>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a5a      	ldr	r2, [pc, #360]	; (80029c0 <output_state+0x20c>)
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe f9a9 	bl	8000bb4 <__aeabi_fsub>
 8002862:	4603      	mov	r3, r0
 8002864:	461a      	mov	r2, r3
 8002866:	4b57      	ldr	r3, [pc, #348]	; (80029c4 <output_state+0x210>)
 8002868:	601a      	str	r2, [r3, #0]
	  break;
 800286a:	e0a0      	b.n	80029ae <output_state+0x1fa>

	case Output_x2_STATE:
	  Relay_control(0,0); // set all coils off
 800286c:	2100      	movs	r1, #0
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe feec 	bl	800164c <Relay_control>
	  Relay_control(1,1); // x1 mode
 8002874:	2101      	movs	r1, #1
 8002876:	2001      	movs	r0, #1
 8002878:	f7fe fee8 	bl	800164c <Relay_control>
	  Relay_control(2,1); // x2/x4 mode
 800287c:	2101      	movs	r1, #1
 800287e:	2002      	movs	r0, #2
 8002880:	f7fe fee4 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 8002884:	2101      	movs	r1, #1
 8002886:	2003      	movs	r0, #3
 8002888:	f7fe fee0 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4618      	mov	r0, r3
 8002890:	f002 fb6e 	bl	8004f70 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 8002894:	2100      	movs	r1, #0
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe fed8 	bl	800164c <Relay_control>
	  Current_output_status=Output_x2_STATE;
 800289c:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <output_state+0x204>)
 800289e:	2202      	movs	r2, #2
 80028a0:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x2_coeff;
 80028a2:	4b46      	ldr	r3, [pc, #280]	; (80029bc <output_state+0x208>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a46      	ldr	r2, [pc, #280]	; (80029c0 <output_state+0x20c>)
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe f981 	bl	8000bb4 <__aeabi_fsub>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <output_state+0x214>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f7fe fa83 	bl	8000dc8 <__aeabi_fmul>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <output_state+0x210>)
 80028c8:	601a      	str	r2, [r3, #0]
	  break;
 80028ca:	e070      	b.n	80029ae <output_state+0x1fa>

	case Output_x4_STATE:
	  Relay_control(0,0); // set all coils off
 80028cc:	2100      	movs	r1, #0
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe febc 	bl	800164c <Relay_control>
	  Relay_control(1,1); // x1 mode
 80028d4:	2101      	movs	r1, #1
 80028d6:	2001      	movs	r0, #1
 80028d8:	f7fe feb8 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 80028dc:	2100      	movs	r1, #0
 80028de:	2002      	movs	r0, #2
 80028e0:	f7fe feb4 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 80028e4:	2101      	movs	r1, #1
 80028e6:	2003      	movs	r0, #3
 80028e8:	f7fe feb0 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f002 fb3e 	bl	8004f70 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 80028f4:	2100      	movs	r1, #0
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe fea8 	bl	800164c <Relay_control>
	  Current_output_status=Output_x4_STATE;
 80028fc:	4b2e      	ldr	r3, [pc, #184]	; (80029b8 <output_state+0x204>)
 80028fe:	2203      	movs	r2, #3
 8002900:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x4_coeff;
 8002902:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <output_state+0x208>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2e      	ldr	r2, [pc, #184]	; (80029c0 <output_state+0x20c>)
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe f951 	bl	8000bb4 <__aeabi_fsub>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <output_state+0x218>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4619      	mov	r1, r3
 800291c:	4610      	mov	r0, r2
 800291e:	f7fe fa53 	bl	8000dc8 <__aeabi_fmul>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <output_state+0x210>)
 8002928:	601a      	str	r2, [r3, #0]
	  break;
 800292a:	e040      	b.n	80029ae <output_state+0x1fa>

	case Output_auto_STATE:
		if((cal_DAC_up_voltage-cal_DAC_down_voltage)/DAC_target_speed > 600)
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <output_state+0x208>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <output_state+0x20c>)
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe f93c 	bl	8000bb4 <__aeabi_fsub>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <output_state+0x21c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f7fe faf2 	bl	8000f30 <__aeabi_fdiv>
 800294c:	4603      	mov	r3, r0
 800294e:	4921      	ldr	r1, [pc, #132]	; (80029d4 <output_state+0x220>)
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe fbf5 	bl	8001140 <__aeabi_fcmpgt>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <output_state+0x1b0>
		{
			output_state(Output_x1_STATE);
 800295c:	2001      	movs	r0, #1
 800295e:	f7ff ff29 	bl	80027b4 <output_state>
				output_state(Output_x2_STATE);
			}
			else
				output_state(Output_x4_STATE);

		break;
 8002962:	e023      	b.n	80029ac <output_state+0x1f8>
			if (((cal_DAC_up_voltage-cal_DAC_down_voltage)*2)/DAC_target_speed > 600)
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <output_state+0x208>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <output_state+0x20c>)
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe f920 	bl	8000bb4 <__aeabi_fsub>
 8002974:	4603      	mov	r3, r0
 8002976:	4619      	mov	r1, r3
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe f91d 	bl	8000bb8 <__addsf3>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <output_state+0x21c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f7fe fad1 	bl	8000f30 <__aeabi_fdiv>
 800298e:	4603      	mov	r3, r0
 8002990:	4910      	ldr	r1, [pc, #64]	; (80029d4 <output_state+0x220>)
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fbd4 	bl	8001140 <__aeabi_fcmpgt>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <output_state+0x1f2>
				output_state(Output_x2_STATE);
 800299e:	2002      	movs	r0, #2
 80029a0:	f7ff ff08 	bl	80027b4 <output_state>
		break;
 80029a4:	e002      	b.n	80029ac <output_state+0x1f8>
				output_state(Output_x4_STATE);
 80029a6:	2003      	movs	r0, #3
 80029a8:	f7ff ff04 	bl	80027b4 <output_state>
		break;
 80029ac:	bf00      	nop
}
}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000d28 	.word	0x20000d28
 80029bc:	20000d20 	.word	0x20000d20
 80029c0:	20000d24 	.word	0x20000d24
 80029c4:	20000d1c 	.word	0x20000d1c
 80029c8:	20000b38 	.word	0x20000b38
 80029cc:	20000b3c 	.word	0x20000b3c
 80029d0:	20000d18 	.word	0x20000d18
 80029d4:	44160000 	.word	0x44160000

080029d8 <display_screen>:
//==============================================================================================


//==============================================================================================
void display_screen(uint8_t type)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b087      	sub	sp, #28
 80029dc:	af02      	add	r7, sp, #8
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
	char sign;
	switch(type)
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	f200 8093 	bhi.w	8002b10 <display_screen+0x138>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <display_screen+0x18>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002aab 	.word	0x08002aab
 80029f8:	08002acd 	.word	0x08002acd
 80029fc:	08002aef 	.word	0x08002aef
	{
	//----------------------------------------------------------//
	case dU_dt_SCREEN:
		if(DAC_code_direction==DIRECTION_UP_STATE)
 8002a00:	4b45      	ldr	r3, [pc, #276]	; (8002b18 <display_screen+0x140>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d102      	bne.n	8002a0e <display_screen+0x36>
		{
			sign='+';
 8002a08:	232b      	movs	r3, #43	; 0x2b
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	e008      	b.n	8002a20 <display_screen+0x48>
		}
		else if(DAC_code_direction==DIRECTION_DOWN_STATE)
 8002a0e:	4b42      	ldr	r3, [pc, #264]	; (8002b18 <display_screen+0x140>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <display_screen+0x44>
		{
			sign='-';
 8002a16:	232d      	movs	r3, #45	; 0x2d
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	e001      	b.n	8002a20 <display_screen+0x48>
		} else
		{
			sign='*';
 8002a1c:	232a      	movs	r3, #42	; 0x2a
 8002a1e:	73fb      	strb	r3, [r7, #15]
		}

		sprintf(lcd_buf,"' %c%1.4EV/s",sign, DAC_target_speed);
 8002a20:	7bfc      	ldrb	r4, [r7, #15]
 8002a22:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <display_screen+0x144>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fd20 	bl	800046c <__aeabi_f2d>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	e9cd 2300 	strd	r2, r3, [sp]
 8002a34:	4622      	mov	r2, r4
 8002a36:	493a      	ldr	r1, [pc, #232]	; (8002b20 <display_screen+0x148>)
 8002a38:	483a      	ldr	r0, [pc, #232]	; (8002b24 <display_screen+0x14c>)
 8002a3a:	f00d f8f9 	bl	800fc30 <siprintf>
		LcdString(1, 1);
 8002a3e:	2101      	movs	r1, #1
 8002a40:	2001      	movs	r0, #1
 8002a42:	f7ff fc61 	bl	8002308 <LcdString>

		if(cfg.LDACMODE==1){
 8002a46:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <display_screen+0x150>)
 8002a48:	789b      	ldrb	r3, [r3, #2]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d117      	bne.n	8002a7e <display_screen+0xa6>
			sprintf(lcd_buf,"ARM      %01u:%02u:%02u",eta_hours,eta_minute,eta_second);
 8002a4e:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <display_screen+0x154>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <display_screen+0x158>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <display_screen+0x15c>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	460b      	mov	r3, r1
 8002a62:	4935      	ldr	r1, [pc, #212]	; (8002b38 <display_screen+0x160>)
 8002a64:	482f      	ldr	r0, [pc, #188]	; (8002b24 <display_screen+0x14c>)
 8002a66:	f00d f8e3 	bl	800fc30 <siprintf>
			LcdString(1, 2);
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f7ff fc4b 	bl	8002308 <LcdString>
			LcdBarLine(DAC_code);
 8002a72:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <display_screen+0x164>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fdf8 	bl	800266c <LcdBarLine>
			{
				sprintf(lcd_buf,"READY TO GO");
				LcdString(1, 2);
			}
		}
		break;
 8002a7c:	e048      	b.n	8002b10 <display_screen+0x138>
			if(Current_output_status==Output_off_STATE)
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <display_screen+0x168>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d108      	bne.n	8002a98 <display_screen+0xc0>
				sprintf(lcd_buf,"OUTPUT DISABLED");
 8002a86:	492f      	ldr	r1, [pc, #188]	; (8002b44 <display_screen+0x16c>)
 8002a88:	4826      	ldr	r0, [pc, #152]	; (8002b24 <display_screen+0x14c>)
 8002a8a:	f00d f8d1 	bl	800fc30 <siprintf>
				LcdString(1, 2);
 8002a8e:	2102      	movs	r1, #2
 8002a90:	2001      	movs	r0, #1
 8002a92:	f7ff fc39 	bl	8002308 <LcdString>
		break;
 8002a96:	e03b      	b.n	8002b10 <display_screen+0x138>
				sprintf(lcd_buf,"READY TO GO");
 8002a98:	492b      	ldr	r1, [pc, #172]	; (8002b48 <display_screen+0x170>)
 8002a9a:	4822      	ldr	r0, [pc, #136]	; (8002b24 <display_screen+0x14c>)
 8002a9c:	f00d f8c8 	bl	800fc30 <siprintf>
				LcdString(1, 2);
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f7ff fc30 	bl	8002308 <LcdString>
		break;
 8002aa8:	e032      	b.n	8002b10 <display_screen+0x138>
	//----------------------------------------------------------//
	case Hello_SCREEN:
		sprintf(lcd_buf,"Hello AmpNuts!");
 8002aaa:	4928      	ldr	r1, [pc, #160]	; (8002b4c <display_screen+0x174>)
 8002aac:	481d      	ldr	r0, [pc, #116]	; (8002b24 <display_screen+0x14c>)
 8002aae:	f00d f8bf 	bl	800fc30 <siprintf>
		LcdString(1, 1);
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f7ff fc27 	bl	8002308 <LcdString>
		sprintf(lcd_buf,"I`m Micron-GLIN");
 8002aba:	4925      	ldr	r1, [pc, #148]	; (8002b50 <display_screen+0x178>)
 8002abc:	4819      	ldr	r0, [pc, #100]	; (8002b24 <display_screen+0x14c>)
 8002abe:	f00d f8b7 	bl	800fc30 <siprintf>
		LcdString(1, 2);
 8002ac2:	2102      	movs	r1, #2
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7ff fc1f 	bl	8002308 <LcdString>
		break;
 8002aca:	e021      	b.n	8002b10 <display_screen+0x138>
	//----------------------------------------------------------//
	case Warm_up_SCREEN:
		sprintf(lcd_buf,"need time to");
 8002acc:	4921      	ldr	r1, [pc, #132]	; (8002b54 <display_screen+0x17c>)
 8002ace:	4815      	ldr	r0, [pc, #84]	; (8002b24 <display_screen+0x14c>)
 8002ad0:	f00d f8ae 	bl	800fc30 <siprintf>
		LcdString(1, 1);
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f7ff fc16 	bl	8002308 <LcdString>
		sprintf(lcd_buf,"warm-up my refs");
 8002adc:	491e      	ldr	r1, [pc, #120]	; (8002b58 <display_screen+0x180>)
 8002ade:	4811      	ldr	r0, [pc, #68]	; (8002b24 <display_screen+0x14c>)
 8002ae0:	f00d f8a6 	bl	800fc30 <siprintf>
		LcdString(1, 2);
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f7ff fc0e 	bl	8002308 <LcdString>
		break;
 8002aec:	e010      	b.n	8002b10 <display_screen+0x138>
	//----------------------------------------------------------//
	case Ready_SCREEN:
		sprintf(lcd_buf,"I`m ready...");
 8002aee:	491b      	ldr	r1, [pc, #108]	; (8002b5c <display_screen+0x184>)
 8002af0:	480c      	ldr	r0, [pc, #48]	; (8002b24 <display_screen+0x14c>)
 8002af2:	f00d f89d 	bl	800fc30 <siprintf>
		LcdString(1, 1);
 8002af6:	2101      	movs	r1, #1
 8002af8:	2001      	movs	r0, #1
 8002afa:	f7ff fc05 	bl	8002308 <LcdString>
		sprintf(lcd_buf,"      Let`s start!");
 8002afe:	4918      	ldr	r1, [pc, #96]	; (8002b60 <display_screen+0x188>)
 8002b00:	4808      	ldr	r0, [pc, #32]	; (8002b24 <display_screen+0x14c>)
 8002b02:	f00d f895 	bl	800fc30 <siprintf>
		LcdString(1, 2);
 8002b06:	2102      	movs	r1, #2
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f7ff fbfd 	bl	8002308 <LcdString>
		break;
 8002b0e:	bf00      	nop
	}

}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd90      	pop	{r4, r7, pc}
 8002b18:	20000d30 	.word	0x20000d30
 8002b1c:	20000d18 	.word	0x20000d18
 8002b20:	08013788 	.word	0x08013788
 8002b24:	20000b40 	.word	0x20000b40
 8002b28:	20000d04 	.word	0x20000d04
 8002b2c:	20000cd4 	.word	0x20000cd4
 8002b30:	20000cd5 	.word	0x20000cd5
 8002b34:	20000cd6 	.word	0x20000cd6
 8002b38:	08013798 	.word	0x08013798
 8002b3c:	20000d2c 	.word	0x20000d2c
 8002b40:	20000d28 	.word	0x20000d28
 8002b44:	080137b0 	.word	0x080137b0
 8002b48:	080137c0 	.word	0x080137c0
 8002b4c:	080137cc 	.word	0x080137cc
 8002b50:	080137dc 	.word	0x080137dc
 8002b54:	080137ec 	.word	0x080137ec
 8002b58:	080137fc 	.word	0x080137fc
 8002b5c:	0801380c 	.word	0x0801380c
 8002b60:	0801381c 	.word	0x0801381c

08002b64 <send_answer_to_CDC>:
//==============================================================================================


//==============================================================================================
void send_answer_to_CDC(uint8_t type)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
	uint8_t cdc_counter=0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]

	switch(type)
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	2b0f      	cmp	r3, #15
 8002b76:	f200 80b5 	bhi.w	8002ce4 <send_answer_to_CDC+0x180>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <send_answer_to_CDC+0x1c>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002bc7 	.word	0x08002bc7
 8002b84:	08002bed 	.word	0x08002bed
 8002b88:	08002c13 	.word	0x08002c13
 8002b8c:	08002c39 	.word	0x08002c39
 8002b90:	08002c5f 	.word	0x08002c5f
 8002b94:	08002c85 	.word	0x08002c85
 8002b98:	08002ce5 	.word	0x08002ce5
 8002b9c:	08002ce5 	.word	0x08002ce5
 8002ba0:	08002ce5 	.word	0x08002ce5
 8002ba4:	08002ce5 	.word	0x08002ce5
 8002ba8:	08002ce5 	.word	0x08002ce5
 8002bac:	08002ce5 	.word	0x08002ce5
 8002bb0:	08002ce5 	.word	0x08002ce5
 8002bb4:	08002ce5 	.word	0x08002ce5
 8002bb8:	08002ce5 	.word	0x08002ce5
 8002bbc:	08002cab 	.word	0x08002cab
	{
	case ERROR_TYPE_1:
		while((CDC_Transmit_FS(Error1, strlen((const char *)Error1))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	4849      	ldr	r0, [pc, #292]	; (8002cec <send_answer_to_CDC+0x188>)
 8002bc8:	f7fd fae4 	bl	8000194 <strlen>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4846      	ldr	r0, [pc, #280]	; (8002cec <send_answer_to_CDC+0x188>)
 8002bd4:	f00b ff16 	bl	800ea04 <CDC_Transmit_FS>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d075      	beq.n	8002cca <send_answer_to_CDC+0x166>
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2bff      	cmp	r3, #255	; 0xff
 8002be2:	d1ed      	bne.n	8002bc0 <send_answer_to_CDC+0x5c>
		break;
 8002be4:	e071      	b.n	8002cca <send_answer_to_CDC+0x166>
	case ERROR_TYPE_2:
		while((CDC_Transmit_FS(Error2, strlen((const char *)Error2))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	3301      	adds	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
 8002bec:	4840      	ldr	r0, [pc, #256]	; (8002cf0 <send_answer_to_CDC+0x18c>)
 8002bee:	f7fd fad1 	bl	8000194 <strlen>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	483d      	ldr	r0, [pc, #244]	; (8002cf0 <send_answer_to_CDC+0x18c>)
 8002bfa:	f00b ff03 	bl	800ea04 <CDC_Transmit_FS>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d064      	beq.n	8002cce <send_answer_to_CDC+0x16a>
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2bff      	cmp	r3, #255	; 0xff
 8002c08:	d1ed      	bne.n	8002be6 <send_answer_to_CDC+0x82>
		break;
 8002c0a:	e060      	b.n	8002cce <send_answer_to_CDC+0x16a>
	case OK_TYPE_1:
		while((CDC_Transmit_FS(OK, strlen((const char *)OK))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	4838      	ldr	r0, [pc, #224]	; (8002cf4 <send_answer_to_CDC+0x190>)
 8002c14:	f7fd fabe 	bl	8000194 <strlen>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4835      	ldr	r0, [pc, #212]	; (8002cf4 <send_answer_to_CDC+0x190>)
 8002c20:	f00b fef0 	bl	800ea04 <CDC_Transmit_FS>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d053      	beq.n	8002cd2 <send_answer_to_CDC+0x16e>
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2bff      	cmp	r3, #255	; 0xff
 8002c2e:	d1ed      	bne.n	8002c0c <send_answer_to_CDC+0xa8>
		break;
 8002c30:	e04f      	b.n	8002cd2 <send_answer_to_CDC+0x16e>
	case OK_TYPE_2:
		while((CDC_Transmit_FS(OK_Enter, strlen((const char *)OK_Enter))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	3301      	adds	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	482f      	ldr	r0, [pc, #188]	; (8002cf8 <send_answer_to_CDC+0x194>)
 8002c3a:	f7fd faab 	bl	8000194 <strlen>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	482c      	ldr	r0, [pc, #176]	; (8002cf8 <send_answer_to_CDC+0x194>)
 8002c46:	f00b fedd 	bl	800ea04 <CDC_Transmit_FS>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d042      	beq.n	8002cd6 <send_answer_to_CDC+0x172>
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2bff      	cmp	r3, #255	; 0xff
 8002c54:	d1ed      	bne.n	8002c32 <send_answer_to_CDC+0xce>
		break;
 8002c56:	e03e      	b.n	8002cd6 <send_answer_to_CDC+0x172>
	case CLEAR_TYPE_1:
		while((CDC_Transmit_FS(clear, strlen((const char *)clear))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	4827      	ldr	r0, [pc, #156]	; (8002cfc <send_answer_to_CDC+0x198>)
 8002c60:	f7fd fa98 	bl	8000194 <strlen>
 8002c64:	4603      	mov	r3, r0
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4824      	ldr	r0, [pc, #144]	; (8002cfc <send_answer_to_CDC+0x198>)
 8002c6c:	f00b feca 	bl	800ea04 <CDC_Transmit_FS>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d031      	beq.n	8002cda <send_answer_to_CDC+0x176>
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2bff      	cmp	r3, #255	; 0xff
 8002c7a:	d1ed      	bne.n	8002c58 <send_answer_to_CDC+0xf4>
		break;
 8002c7c:	e02d      	b.n	8002cda <send_answer_to_CDC+0x176>
	case DONE_TYPE_1:
		while((CDC_Transmit_FS(Done, strlen((const char *)Done))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	3301      	adds	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	481e      	ldr	r0, [pc, #120]	; (8002d00 <send_answer_to_CDC+0x19c>)
 8002c86:	f7fd fa85 	bl	8000194 <strlen>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4619      	mov	r1, r3
 8002c90:	481b      	ldr	r0, [pc, #108]	; (8002d00 <send_answer_to_CDC+0x19c>)
 8002c92:	f00b feb7 	bl	800ea04 <CDC_Transmit_FS>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <send_answer_to_CDC+0x17a>
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2bff      	cmp	r3, #255	; 0xff
 8002ca0:	d1ed      	bne.n	8002c7e <send_answer_to_CDC+0x11a>
		break;
 8002ca2:	e01c      	b.n	8002cde <send_answer_to_CDC+0x17a>
	case RUN_CAL_TYPE_TEMP:
		while((CDC_Transmit_FS(run_cal, strlen((const char *)run_cal))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	4816      	ldr	r0, [pc, #88]	; (8002d04 <send_answer_to_CDC+0x1a0>)
 8002cac:	f7fd fa72 	bl	8000194 <strlen>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4813      	ldr	r0, [pc, #76]	; (8002d04 <send_answer_to_CDC+0x1a0>)
 8002cb8:	f00b fea4 	bl	800ea04 <CDC_Transmit_FS>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00f      	beq.n	8002ce2 <send_answer_to_CDC+0x17e>
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	2bff      	cmp	r3, #255	; 0xff
 8002cc6:	d1ed      	bne.n	8002ca4 <send_answer_to_CDC+0x140>
		break;
 8002cc8:	e00b      	b.n	8002ce2 <send_answer_to_CDC+0x17e>
		break;
 8002cca:	bf00      	nop
 8002ccc:	e00a      	b.n	8002ce4 <send_answer_to_CDC+0x180>
		break;
 8002cce:	bf00      	nop
 8002cd0:	e008      	b.n	8002ce4 <send_answer_to_CDC+0x180>
		break;
 8002cd2:	bf00      	nop
 8002cd4:	e006      	b.n	8002ce4 <send_answer_to_CDC+0x180>
		break;
 8002cd6:	bf00      	nop
 8002cd8:	e004      	b.n	8002ce4 <send_answer_to_CDC+0x180>
		break;
 8002cda:	bf00      	nop
 8002cdc:	e002      	b.n	8002ce4 <send_answer_to_CDC+0x180>
		break;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <send_answer_to_CDC+0x180>
		break;
 8002ce2:	bf00      	nop
	}
}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000034c 	.word	0x2000034c
 8002cf0:	20000760 	.word	0x20000760
 8002cf4:	20000320 	.word	0x20000320
 8002cf8:	20000748 	.word	0x20000748
 8002cfc:	20000344 	.word	0x20000344
 8002d00:	2000078c 	.word	0x2000078c
 8002d04:	20000328 	.word	0x20000328

08002d08 <cmd_SWEEP_START>:



//==============================================================================================
void cmd_SWEEP_START()
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
	output_state(Output_auto_STATE);
 8002d0c:	2004      	movs	r0, #4
 8002d0e:	f7ff fd51 	bl	80027b4 <output_state>
	DDS_Calculation();
 8002d12:	f7fe ff3b 	bl	8001b8c <DDS_Calculation>
	DAC_TEMP_CAL();
 8002d16:	f7fe fec9 	bl	8001aac <DAC_TEMP_CAL>
	CPLD_control(CPLD_ON_STATE); // Enable LDAC signal
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7fe fd50 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002d20:	f7fe fe3c 	bl	800199c <DAC_SendInit>
}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <cmd_SWEEP_STOP>:
//==============================================================================================


//==============================================================================================
void cmd_SWEEP_STOP()
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
	CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fe fd47 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002d32:	f7fe fe33 	bl	800199c <DAC_SendInit>
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <cmd_DAC_SET>:
//==============================================================================================


//==============================================================================================
void cmd_DAC_SET(uint32_t code)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	if (code>0xFFFFF)return;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4a:	d21f      	bcs.n	8002d8c <cmd_DAC_SET+0x50>

	if(DAC_code_direction!=DIRECTION_CYCLE_STATE)
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <cmd_DAC_SET+0x58>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d00f      	beq.n	8002d74 <cmd_DAC_SET+0x38>
	{
		switch(code)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <cmd_DAC_SET+0x28>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <cmd_DAC_SET+0x5c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <cmd_DAC_SET+0x30>
 8002d62:	e008      	b.n	8002d76 <cmd_DAC_SET+0x3a>
		{
		case DAC_CODE_DOWN:
			DAC_code_direction=DIRECTION_UP_STATE;
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <cmd_DAC_SET+0x58>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
			break;
 8002d6a:	e004      	b.n	8002d76 <cmd_DAC_SET+0x3a>
		case DAC_CODE_TOP:
			DAC_code_direction=DIRECTION_DOWN_STATE;
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <cmd_DAC_SET+0x58>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
			break;
 8002d72:	e000      	b.n	8002d76 <cmd_DAC_SET+0x3a>
		}
	}
 8002d74:	bf00      	nop

	CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7fe fd22 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002d7c:	f7fe fe0e 	bl	800199c <DAC_SendInit>
	DAC_TEMP_CAL();
 8002d80:	f7fe fe94 	bl	8001aac <DAC_TEMP_CAL>
	DAC_Write(code);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7fe fdaf 	bl	80018e8 <DAC_Write>
 8002d8a:	e000      	b.n	8002d8e <cmd_DAC_SET+0x52>
	if (code>0xFFFFF)return;
 8002d8c:	bf00      	nop
}
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000d30 	.word	0x20000d30
 8002d98:	000fffff 	.word	0x000fffff

08002d9c <cmd_SET_OUTPUT_VOLTAGE>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_SET_OUTPUT_VOLTAGE(float volt)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	float dac_resolution;

	if(volt>=cal_DAC_down_voltage && volt<=cal_DAC_up_voltage)
 8002da4:	4b80      	ldr	r3, [pc, #512]	; (8002fa8 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe f9be 	bl	800112c <__aeabi_fcmpge>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d037      	beq.n	8002e26 <cmd_SET_OUTPUT_VOLTAGE+0x8a>
 8002db6:	4b7d      	ldr	r3, [pc, #500]	; (8002fac <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7fe f9ab 	bl	8001118 <__aeabi_fcmple>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02e      	beq.n	8002e26 <cmd_SET_OUTPUT_VOLTAGE+0x8a>
	{
		if(Current_output_status!=Output_x1_STATE)output_state(Output_x1_STATE);
 8002dc8:	4b79      	ldr	r3, [pc, #484]	; (8002fb0 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d002      	beq.n	8002dd6 <cmd_SET_OUTPUT_VOLTAGE+0x3a>
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f7ff fcef 	bl	80027b4 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 8002dd6:	4b75      	ldr	r3, [pc, #468]	; (8002fac <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a73      	ldr	r2, [pc, #460]	; (8002fa8 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fee7 	bl	8000bb4 <__aeabi_fsub>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4972      	ldr	r1, [pc, #456]	; (8002fb4 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f8a0 	bl	8000f30 <__aeabi_fdiv>
 8002df0:	4603      	mov	r3, r0
 8002df2:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage)/dac_resolution);
 8002df4:	4b6c      	ldr	r3, [pc, #432]	; (8002fa8 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd feda 	bl	8000bb4 <__aeabi_fsub>
 8002e00:	4603      	mov	r3, r0
 8002e02:	68f9      	ldr	r1, [r7, #12]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe f893 	bl	8000f30 <__aeabi_fdiv>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe f9a1 	bl	8001154 <__aeabi_f2uiz>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4a68      	ldr	r2, [pc, #416]	; (8002fb8 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002e16:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002e18:	4b67      	ldr	r3, [pc, #412]	; (8002fb8 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff8d 	bl	8002d3c <cmd_DAC_SET>
		return 1;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0bc      	b.n	8002fa0 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}
	if(volt>=(cal_DAC_down_voltage*gain_x2_coeff) && volt<=(cal_DAC_up_voltage*gain_x2_coeff))
 8002e26:	4b60      	ldr	r3, [pc, #384]	; (8002fa8 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a64      	ldr	r2, [pc, #400]	; (8002fbc <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd ffc9 	bl	8000dc8 <__aeabi_fmul>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe f976 	bl	800112c <__aeabi_fcmpge>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d04d      	beq.n	8002ee2 <cmd_SET_OUTPUT_VOLTAGE+0x146>
 8002e46:	4b59      	ldr	r3, [pc, #356]	; (8002fac <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a5c      	ldr	r2, [pc, #368]	; (8002fbc <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd ffb9 	bl	8000dc8 <__aeabi_fmul>
 8002e56:	4603      	mov	r3, r0
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe f95c 	bl	8001118 <__aeabi_fcmple>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d03d      	beq.n	8002ee2 <cmd_SET_OUTPUT_VOLTAGE+0x146>
	{
		if(Current_output_status!=Output_x2_STATE)output_state(Output_x2_STATE);
 8002e66:	4b52      	ldr	r3, [pc, #328]	; (8002fb0 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d002      	beq.n	8002e74 <cmd_SET_OUTPUT_VOLTAGE+0xd8>
 8002e6e:	2002      	movs	r0, #2
 8002e70:	f7ff fca0 	bl	80027b4 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x2_coeff/0xFFFFF; // Calculate 1 LSB resolution
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a4b      	ldr	r2, [pc, #300]	; (8002fa8 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd fe98 	bl	8000bb4 <__aeabi_fsub>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b4c      	ldr	r3, [pc, #304]	; (8002fbc <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7fd ff9a 	bl	8000dc8 <__aeabi_fmul>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4947      	ldr	r1, [pc, #284]	; (8002fb4 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe f849 	bl	8000f30 <__aeabi_fdiv>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage*gain_x2_coeff)/dac_resolution);
 8002ea2:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a45      	ldr	r2, [pc, #276]	; (8002fbc <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd ff8b 	bl	8000dc8 <__aeabi_fmul>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd fe7c 	bl	8000bb4 <__aeabi_fsub>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	68f9      	ldr	r1, [r7, #12]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe f835 	bl	8000f30 <__aeabi_fdiv>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe f943 	bl	8001154 <__aeabi_f2uiz>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4a39      	ldr	r2, [pc, #228]	; (8002fb8 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002ed2:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002ed4:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff2f 	bl	8002d3c <cmd_DAC_SET>
		return 1;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e05e      	b.n	8002fa0 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}
	if(volt>=(cal_DAC_down_voltage*gain_x4_coeff) && volt<=(cal_DAC_up_voltage*gain_x4_coeff))
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a36      	ldr	r2, [pc, #216]	; (8002fc0 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd ff6b 	bl	8000dc8 <__aeabi_fmul>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe f918 	bl	800112c <__aeabi_fcmpge>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d04d      	beq.n	8002f9e <cmd_SET_OUTPUT_VOLTAGE+0x202>
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2e      	ldr	r2, [pc, #184]	; (8002fc0 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd ff5b 	bl	8000dc8 <__aeabi_fmul>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fe f8fe 	bl	8001118 <__aeabi_fcmple>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d03d      	beq.n	8002f9e <cmd_SET_OUTPUT_VOLTAGE+0x202>
	{
		if(Current_output_status!=Output_x4_STATE)output_state(Output_x4_STATE);
 8002f22:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d002      	beq.n	8002f30 <cmd_SET_OUTPUT_VOLTAGE+0x194>
 8002f2a:	2003      	movs	r0, #3
 8002f2c:	f7ff fc42 	bl	80027b4 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x4_coeff/0xFFFFF; // Calculate 1 LSB resolution
 8002f30:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fe3a 	bl	8000bb4 <__aeabi_fsub>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f7fd ff3c 	bl	8000dc8 <__aeabi_fmul>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4918      	ldr	r1, [pc, #96]	; (8002fb4 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd ffeb 	bl	8000f30 <__aeabi_fdiv>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage*gain_x4_coeff)/dac_resolution);
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd ff2d 	bl	8000dc8 <__aeabi_fmul>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4619      	mov	r1, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fd fe1e 	bl	8000bb4 <__aeabi_fsub>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	68f9      	ldr	r1, [r7, #12]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd ffd7 	bl	8000f30 <__aeabi_fdiv>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe f8e5 	bl	8001154 <__aeabi_f2uiz>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002f8e:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fed1 	bl	8002d3c <cmd_DAC_SET>
		return 1;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}

	return 0;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000d24 	.word	0x20000d24
 8002fac:	20000d20 	.word	0x20000d20
 8002fb0:	20000d28 	.word	0x20000d28
 8002fb4:	497ffff0 	.word	0x497ffff0
 8002fb8:	20000d2c 	.word	0x20000d2c
 8002fbc:	20000b38 	.word	0x20000b38
 8002fc0:	20000b3c 	.word	0x20000b3c
 8002fc4:	00000000 	.word	0x00000000

08002fc8 <cmd_SWEEP_RATE>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_SWEEP_RATE(float rate)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
		if(rate<0.0009 || rate>1.1) // V/s
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7fd fa4b 	bl	800046c <__aeabi_f2d>
 8002fd6:	a316      	add	r3, pc, #88	; (adr r3, 8003030 <cmd_SWEEP_RATE+0x68>)
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	f7fd fd10 	bl	8000a00 <__aeabi_dcmplt>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <cmd_SWEEP_RATE+0x34>
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fa40 	bl	800046c <__aeabi_f2d>
 8002fec:	a312      	add	r3, pc, #72	; (adr r3, 8003038 <cmd_SWEEP_RATE+0x70>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	f7fd fd23 	bl	8000a3c <__aeabi_dcmpgt>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <cmd_SWEEP_RATE+0x38>
		{
			return 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e010      	b.n	8003022 <cmd_SWEEP_RATE+0x5a>
		}
		else
		{
			DAC_target_speed=rate;
 8003000:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <cmd_SWEEP_RATE+0x78>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6013      	str	r3, [r2, #0]
			if(cfg.LDACMODE==0)
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <cmd_SWEEP_RATE+0x7c>)
 8003008:	789b      	ldrb	r3, [r3, #2]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <cmd_SWEEP_RATE+0x4e>
			{
				CPLD_control(CPLD_OFF_STATE);
 800300e:	2000      	movs	r0, #0
 8003010:	f7fe fbd6 	bl	80017c0 <CPLD_control>
 8003014:	e002      	b.n	800301c <cmd_SWEEP_RATE+0x54>
			}
			else
			{
				CPLD_control(CPLD_ON_STATE);
 8003016:	2001      	movs	r0, #1
 8003018:	f7fe fbd2 	bl	80017c0 <CPLD_control>
			}

			DDS_Calculation();
 800301c:	f7fe fdb6 	bl	8001b8c <DDS_Calculation>
			return 1;
 8003020:	2301      	movs	r3, #1
		}
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	f3af 8000 	nop.w
 8003030:	487fcb92 	.word	0x487fcb92
 8003034:	3f4d7dbf 	.word	0x3f4d7dbf
 8003038:	9999999a 	.word	0x9999999a
 800303c:	3ff19999 	.word	0x3ff19999
 8003040:	20000d18 	.word	0x20000d18
 8003044:	20000d04 	.word	0x20000d04

08003048 <cmd_CAL>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_CAL(uint8_t cmd, float coeff)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
	float tmpx;

	tmpx=coeff;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	3b06      	subs	r3, #6
 800305c:	2b07      	cmp	r3, #7
 800305e:	f200 80e7 	bhi.w	8003230 <cmd_CAL+0x1e8>
 8003062:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <cmd_CAL+0x20>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	08003089 	.word	0x08003089
 800306c:	0800309b 	.word	0x0800309b
 8003070:	080030ad 	.word	0x080030ad
 8003074:	080030bf 	.word	0x080030bf
 8003078:	08003155 	.word	0x08003155
 800307c:	080031c3 	.word	0x080031c3
 8003080:	080030d1 	.word	0x080030d1
 8003084:	08003113 	.word	0x08003113
	{
	case DAC_CAL_TEMP:
		DAC_Write(DAC_CODE_MIDDLE);
 8003088:	4885      	ldr	r0, [pc, #532]	; (80032a0 <cmd_CAL+0x258>)
 800308a:	f7fe fc2d 	bl	80018e8 <DAC_Write>
		DAC_TEMP_CAL();
 800308e:	f7fe fd0d 	bl	8001aac <DAC_TEMP_CAL>
		DAC_Write(DAC_CODE_MIDDLE);
 8003092:	4883      	ldr	r0, [pc, #524]	; (80032a0 <cmd_CAL+0x258>)
 8003094:	f7fe fc28 	bl	80018e8 <DAC_Write>
		break;
 8003098:	e0ca      	b.n	8003230 <cmd_CAL+0x1e8>

	case DAC_CAL_POLY_A:
		EEPROM_write(corr_coeff_1_EEPROM_ADDRESS,float_to_binary(tmpx));
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f97b 	bl	8003396 <float_to_binary>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4619      	mov	r1, r3
 80030a4:	2010      	movs	r0, #16
 80030a6:	f000 f9b5 	bl	8003414 <EEPROM_write>
		break;
 80030aa:	e0c1      	b.n	8003230 <cmd_CAL+0x1e8>
	case DAC_CAL_POLY_B:
		EEPROM_write(corr_coeff_2_EEPROM_ADDRESS,float_to_binary(tmpx));
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f972 	bl	8003396 <float_to_binary>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4619      	mov	r1, r3
 80030b6:	2018      	movs	r0, #24
 80030b8:	f000 f9ac 	bl	8003414 <EEPROM_write>
		break;
 80030bc:	e0b8      	b.n	8003230 <cmd_CAL+0x1e8>
	case DAC_CAL_POLY_C:
		EEPROM_write(corr_coeff_3_EEPROM_ADDRESS,float_to_binary(tmpx));
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f969 	bl	8003396 <float_to_binary>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4619      	mov	r1, r3
 80030c8:	2020      	movs	r0, #32
 80030ca:	f000 f9a3 	bl	8003414 <EEPROM_write>
		break;
 80030ce:	e0af      	b.n	8003230 <cmd_CAL+0x1e8>

	case GAIN_X2_CAL:
		if((tmpx<2.1 && tmpx>1.9))
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7fd f9cb 	bl	800046c <__aeabi_f2d>
 80030d6:	a35a      	add	r3, pc, #360	; (adr r3, 8003240 <cmd_CAL+0x1f8>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f7fd fc90 	bl	8000a00 <__aeabi_dcmplt>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d013      	beq.n	800310e <cmd_CAL+0xc6>
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7fd f9c0 	bl	800046c <__aeabi_f2d>
 80030ec:	a356      	add	r3, pc, #344	; (adr r3, 8003248 <cmd_CAL+0x200>)
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f7fd fca3 	bl	8000a3c <__aeabi_dcmpgt>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <cmd_CAL+0xc6>
		{
			EEPROM_write(gain_x2_EEPROM_ADDRESS,float_to_binary(tmpx));
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f94a 	bl	8003396 <float_to_binary>
 8003102:	4603      	mov	r3, r0
 8003104:	4619      	mov	r1, r3
 8003106:	2028      	movs	r0, #40	; 0x28
 8003108:	f000 f984 	bl	8003414 <EEPROM_write>
		}
		else return 0;
		break;
 800310c:	e090      	b.n	8003230 <cmd_CAL+0x1e8>
		else return 0;
 800310e:	2300      	movs	r3, #0
 8003110:	e091      	b.n	8003236 <cmd_CAL+0x1ee>
	case GAIN_X4_CAL:
		if((tmpx<4.1 && tmpx>3.9))
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7fd f9aa 	bl	800046c <__aeabi_f2d>
 8003118:	a34d      	add	r3, pc, #308	; (adr r3, 8003250 <cmd_CAL+0x208>)
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f7fd fc6f 	bl	8000a00 <__aeabi_dcmplt>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d013      	beq.n	8003150 <cmd_CAL+0x108>
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7fd f99f 	bl	800046c <__aeabi_f2d>
 800312e:	a34a      	add	r3, pc, #296	; (adr r3, 8003258 <cmd_CAL+0x210>)
 8003130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003134:	f7fd fc82 	bl	8000a3c <__aeabi_dcmpgt>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d008      	beq.n	8003150 <cmd_CAL+0x108>
		{
			EEPROM_write(gain_x4_EEPROM_ADDRESS,float_to_binary(tmpx));
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f929 	bl	8003396 <float_to_binary>
 8003144:	4603      	mov	r3, r0
 8003146:	4619      	mov	r1, r3
 8003148:	2030      	movs	r0, #48	; 0x30
 800314a:	f000 f963 	bl	8003414 <EEPROM_write>
		}
		else return 0;
		break;
 800314e:	e06f      	b.n	8003230 <cmd_CAL+0x1e8>
		else return 0;
 8003150:	2300      	movs	r3, #0
 8003152:	e070      	b.n	8003236 <cmd_CAL+0x1ee>
	case DAC_CAL_TOP:
		if((tmpx<10.1 && tmpx>9.9) || (tmpx>6.8 && tmpx<7.1))
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f7fd f989 	bl	800046c <__aeabi_f2d>
 800315a:	a341      	add	r3, pc, #260	; (adr r3, 8003260 <cmd_CAL+0x218>)
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f7fd fc4e 	bl	8000a00 <__aeabi_dcmplt>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <cmd_CAL+0x138>
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f7fd f97e 	bl	800046c <__aeabi_f2d>
 8003170:	a33d      	add	r3, pc, #244	; (adr r3, 8003268 <cmd_CAL+0x220>)
 8003172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003176:	f7fd fc61 	bl	8000a3c <__aeabi_dcmpgt>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d115      	bne.n	80031ac <cmd_CAL+0x164>
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7fd f973 	bl	800046c <__aeabi_f2d>
 8003186:	a33a      	add	r3, pc, #232	; (adr r3, 8003270 <cmd_CAL+0x228>)
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f7fd fc56 	bl	8000a3c <__aeabi_dcmpgt>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d013      	beq.n	80031be <cmd_CAL+0x176>
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7fd f968 	bl	800046c <__aeabi_f2d>
 800319c:	a336      	add	r3, pc, #216	; (adr r3, 8003278 <cmd_CAL+0x230>)
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f7fd fc2d 	bl	8000a00 <__aeabi_dcmplt>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <cmd_CAL+0x176>
		{
			EEPROM_write(cal_DAC_up_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f8f2 	bl	8003396 <float_to_binary>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4619      	mov	r1, r3
 80031b6:	2000      	movs	r0, #0
 80031b8:	f000 f92c 	bl	8003414 <EEPROM_write>
		}
		else return 0;
		break;
 80031bc:	e038      	b.n	8003230 <cmd_CAL+0x1e8>
		else return 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	e039      	b.n	8003236 <cmd_CAL+0x1ee>
	case DAC_CAL_DOWN:
		if((tmpx>-10.1 && tmpx<-9.9) || (tmpx<-6.8 && tmpx>-7.1))
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7fd f952 	bl	800046c <__aeabi_f2d>
 80031c8:	a32d      	add	r3, pc, #180	; (adr r3, 8003280 <cmd_CAL+0x238>)
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	f7fd fc35 	bl	8000a3c <__aeabi_dcmpgt>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <cmd_CAL+0x1a6>
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7fd f947 	bl	800046c <__aeabi_f2d>
 80031de:	a32a      	add	r3, pc, #168	; (adr r3, 8003288 <cmd_CAL+0x240>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f7fd fc0c 	bl	8000a00 <__aeabi_dcmplt>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d115      	bne.n	800321a <cmd_CAL+0x1d2>
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7fd f93c 	bl	800046c <__aeabi_f2d>
 80031f4:	a326      	add	r3, pc, #152	; (adr r3, 8003290 <cmd_CAL+0x248>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	f7fd fc01 	bl	8000a00 <__aeabi_dcmplt>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d013      	beq.n	800322c <cmd_CAL+0x1e4>
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7fd f931 	bl	800046c <__aeabi_f2d>
 800320a:	a323      	add	r3, pc, #140	; (adr r3, 8003298 <cmd_CAL+0x250>)
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f7fd fc14 	bl	8000a3c <__aeabi_dcmpgt>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <cmd_CAL+0x1e4>
		{
			EEPROM_write(cal_DAC_down_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f8bb 	bl	8003396 <float_to_binary>
 8003220:	4603      	mov	r3, r0
 8003222:	4619      	mov	r1, r3
 8003224:	2008      	movs	r0, #8
 8003226:	f000 f8f5 	bl	8003414 <EEPROM_write>
		}
		else return 0;
		break;
 800322a:	e001      	b.n	8003230 <cmd_CAL+0x1e8>
		else return 0;
 800322c:	2300      	movs	r3, #0
 800322e:	e002      	b.n	8003236 <cmd_CAL+0x1ee>
	}

	load_data_from_EEPROM();
 8003230:	f000 f838 	bl	80032a4 <load_data_from_EEPROM>
	return 1;
 8003234:	2301      	movs	r3, #1
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	cccccccd 	.word	0xcccccccd
 8003244:	4000cccc 	.word	0x4000cccc
 8003248:	66666666 	.word	0x66666666
 800324c:	3ffe6666 	.word	0x3ffe6666
 8003250:	66666666 	.word	0x66666666
 8003254:	40106666 	.word	0x40106666
 8003258:	33333333 	.word	0x33333333
 800325c:	400f3333 	.word	0x400f3333
 8003260:	33333333 	.word	0x33333333
 8003264:	40243333 	.word	0x40243333
 8003268:	cccccccd 	.word	0xcccccccd
 800326c:	4023cccc 	.word	0x4023cccc
 8003270:	33333333 	.word	0x33333333
 8003274:	401b3333 	.word	0x401b3333
 8003278:	66666666 	.word	0x66666666
 800327c:	401c6666 	.word	0x401c6666
 8003280:	33333333 	.word	0x33333333
 8003284:	c0243333 	.word	0xc0243333
 8003288:	cccccccd 	.word	0xcccccccd
 800328c:	c023cccc 	.word	0xc023cccc
 8003290:	33333333 	.word	0x33333333
 8003294:	c01b3333 	.word	0xc01b3333
 8003298:	66666666 	.word	0x66666666
 800329c:	c01c6666 	.word	0xc01c6666
 80032a0:	0007ffff 	.word	0x0007ffff

080032a4 <load_data_from_EEPROM>:
//==============================================================================================


//==============================================================================================
void load_data_from_EEPROM(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
	cal_DAC_up_voltage=binary_to_float(EEPROM_read(cal_DAC_up_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 80032a8:	2000      	movs	r0, #0
 80032aa:	f000 f899 	bl	80033e0 <EEPROM_read>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f85d 	bl	8003370 <binary_to_float>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4a25      	ldr	r2, [pc, #148]	; (8003350 <load_data_from_EEPROM+0xac>)
 80032ba:	6013      	str	r3, [r2, #0]
	cal_DAC_down_voltage=binary_to_float(EEPROM_read(cal_DAC_down_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 80032bc:	2008      	movs	r0, #8
 80032be:	f000 f88f 	bl	80033e0 <EEPROM_read>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f853 	bl	8003370 <binary_to_float>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4a21      	ldr	r2, [pc, #132]	; (8003354 <load_data_from_EEPROM+0xb0>)
 80032ce:	6013      	str	r3, [r2, #0]
	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 80032d0:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <load_data_from_EEPROM+0xac>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <load_data_from_EEPROM+0xb0>)
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd fc6a 	bl	8000bb4 <__aeabi_fsub>
 80032e0:	4603      	mov	r3, r0
 80032e2:	461a      	mov	r2, r3
 80032e4:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <load_data_from_EEPROM+0xb4>)
 80032e6:	601a      	str	r2, [r3, #0]

	corr_coeff_1=binary_to_float(EEPROM_read(corr_coeff_1_EEPROM_ADDRESS));
 80032e8:	2010      	movs	r0, #16
 80032ea:	f000 f879 	bl	80033e0 <EEPROM_read>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 f83d 	bl	8003370 <binary_to_float>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4a18      	ldr	r2, [pc, #96]	; (800335c <load_data_from_EEPROM+0xb8>)
 80032fa:	6013      	str	r3, [r2, #0]
	corr_coeff_2=binary_to_float(EEPROM_read(corr_coeff_2_EEPROM_ADDRESS));
 80032fc:	2018      	movs	r0, #24
 80032fe:	f000 f86f 	bl	80033e0 <EEPROM_read>
 8003302:	4603      	mov	r3, r0
 8003304:	4618      	mov	r0, r3
 8003306:	f000 f833 	bl	8003370 <binary_to_float>
 800330a:	4603      	mov	r3, r0
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <load_data_from_EEPROM+0xbc>)
 800330e:	6013      	str	r3, [r2, #0]
	corr_coeff_3=binary_to_float(EEPROM_read(corr_coeff_3_EEPROM_ADDRESS));
 8003310:	2020      	movs	r0, #32
 8003312:	f000 f865 	bl	80033e0 <EEPROM_read>
 8003316:	4603      	mov	r3, r0
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f829 	bl	8003370 <binary_to_float>
 800331e:	4603      	mov	r3, r0
 8003320:	4a10      	ldr	r2, [pc, #64]	; (8003364 <load_data_from_EEPROM+0xc0>)
 8003322:	6013      	str	r3, [r2, #0]
	gain_x2_coeff=binary_to_float(EEPROM_read(gain_x2_EEPROM_ADDRESS));
 8003324:	2028      	movs	r0, #40	; 0x28
 8003326:	f000 f85b 	bl	80033e0 <EEPROM_read>
 800332a:	4603      	mov	r3, r0
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f81f 	bl	8003370 <binary_to_float>
 8003332:	4603      	mov	r3, r0
 8003334:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <load_data_from_EEPROM+0xc4>)
 8003336:	6013      	str	r3, [r2, #0]
	gain_x4_coeff=binary_to_float(EEPROM_read(gain_x4_EEPROM_ADDRESS));
 8003338:	2030      	movs	r0, #48	; 0x30
 800333a:	f000 f851 	bl	80033e0 <EEPROM_read>
 800333e:	4603      	mov	r3, r0
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f815 	bl	8003370 <binary_to_float>
 8003346:	4603      	mov	r3, r0
 8003348:	4a08      	ldr	r2, [pc, #32]	; (800336c <load_data_from_EEPROM+0xc8>)
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000d20 	.word	0x20000d20
 8003354:	20000d24 	.word	0x20000d24
 8003358:	20000d1c 	.word	0x20000d1c
 800335c:	20000b2c 	.word	0x20000b2c
 8003360:	20000b30 	.word	0x20000b30
 8003364:	20000b34 	.word	0x20000b34
 8003368:	20000b38 	.word	0x20000b38
 800336c:	20000b3c 	.word	0x20000b3c

08003370 <binary_to_float>:
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC push_options
#pragma GCC optimize ("O0")

float binary_to_float(uint32_t a)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	    int * p;
	    float out=0;
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]

	    p = &out;
 800337e:	f107 0308 	add.w	r3, r7, #8
 8003382:	60fb      	str	r3, [r7, #12]
	    (*p)=a;
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	601a      	str	r2, [r3, #0]
	    return out;
 800338a:	68bb      	ldr	r3, [r7, #8]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <float_to_binary>:


uint32_t float_to_binary(float a)
{
 8003396:	b480      	push	{r7}
 8003398:	b087      	sub	sp, #28
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
	    int i;
	    int * p;
	    uint32_t out=0;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]

	    p = &a;
 80033a2:	1d3b      	adds	r3, r7, #4
 80033a4:	60fb      	str	r3, [r7, #12]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 80033a6:	231f      	movs	r3, #31
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	e010      	b.n	80033ce <float_to_binary+0x38>
	    {
	    	out+=((*p) >> i & 1)<<i;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa42 f303 	asr.w	r3, r2, r3
 80033b6:	f003 0201 	and.w	r2, r3, #1
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	daeb      	bge.n	80033ac <float_to_binary+0x16>
	    }

	    return out;
 80033d4:	693b      	ldr	r3, [r7, #16]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <EEPROM_read>:
//==============================================================================================


//==============================================================================================
uint32_t EEPROM_read(uint32_t address_of_read)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	uint32_t Address;

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80033ee:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80033f2:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a06      	ldr	r2, [pc, #24]	; (8003410 <EEPROM_read+0x30>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d301      	bcc.n	8003400 <EEPROM_read+0x20>
	{
		return 0x00;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e001      	b.n	8003404 <EEPROM_read+0x24>
	}
	return *(__IO uint32_t *) Address;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	08082800 	.word	0x08082800

08003414 <EEPROM_write>:
//==============================================================================================


//==============================================================================================
void EEPROM_write(uint32_t address_of_read, uint32_t data)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
	/* Clear all pending flags */
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR | FLASH_FLAG_OPTVERRUSR);

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
	     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003424:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8003428:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <EEPROM_write+0x50>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d212      	bcs.n	8003458 <EEPROM_write+0x44>
	{
		return;
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 8003432:	f001 ffb3 	bl	800539c <HAL_FLASHEx_DATAEEPROM_Unlock>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	68f9      	ldr	r1, [r7, #12]
 800343a:	2002      	movs	r0, #2
 800343c:	f002 f80c 	bl	8005458 <HAL_FLASHEx_DATAEEPROM_Program>
 8003440:	4603      	mov	r3, r0
 8003442:	72fb      	strb	r3, [r7, #11]
	HAL_FLASHEx_DATAEEPROM_Lock();
 8003444:	f001 ffc6 	bl	80053d4 <HAL_FLASHEx_DATAEEPROM_Lock>

	if(FLASHStatus != HAL_OK)
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <EEPROM_write+0x48>
	{
		return;
	}
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR);

	if(*(__IO uint32_t *) Address != data)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	e002      	b.n	800345e <EEPROM_write+0x4a>
		return;
 8003458:	bf00      	nop
 800345a:	e000      	b.n	800345e <EEPROM_write+0x4a>
		return;
 800345c:	bf00      	nop
	{
		return;
	}

}
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	08082800 	.word	0x08082800

08003468 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346e:	f107 0314 	add.w	r3, r7, #20
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	60da      	str	r2, [r3, #12]
 800347c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800347e:	4b7c      	ldr	r3, [pc, #496]	; (8003670 <MX_GPIO_Init+0x208>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4a7b      	ldr	r2, [pc, #492]	; (8003670 <MX_GPIO_Init+0x208>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	61d3      	str	r3, [r2, #28]
 800348a:	4b79      	ldr	r3, [pc, #484]	; (8003670 <MX_GPIO_Init+0x208>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003496:	4b76      	ldr	r3, [pc, #472]	; (8003670 <MX_GPIO_Init+0x208>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4a75      	ldr	r2, [pc, #468]	; (8003670 <MX_GPIO_Init+0x208>)
 800349c:	f043 0320 	orr.w	r3, r3, #32
 80034a0:	61d3      	str	r3, [r2, #28]
 80034a2:	4b73      	ldr	r3, [pc, #460]	; (8003670 <MX_GPIO_Init+0x208>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	4b70      	ldr	r3, [pc, #448]	; (8003670 <MX_GPIO_Init+0x208>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	4a6f      	ldr	r2, [pc, #444]	; (8003670 <MX_GPIO_Init+0x208>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	61d3      	str	r3, [r2, #28]
 80034ba:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <MX_GPIO_Init+0x208>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <MX_GPIO_Init+0x208>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	4a69      	ldr	r2, [pc, #420]	; (8003670 <MX_GPIO_Init+0x208>)
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	61d3      	str	r3, [r2, #28]
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <MX_GPIO_Init+0x208>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 80034de:	2200      	movs	r2, #0
 80034e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034e4:	4863      	ldr	r0, [pc, #396]	; (8003674 <MX_GPIO_Init+0x20c>)
 80034e6:	f002 fba8 	bl	8005c3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, GPIO_PIN_SET);
 80034ea:	2201      	movs	r2, #1
 80034ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034f0:	4860      	ldr	r0, [pc, #384]	; (8003674 <MX_GPIO_Init+0x20c>)
 80034f2:	f002 fba2 	bl	8005c3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 80034f6:	2201      	movs	r2, #1
 80034f8:	f248 011f 	movw	r1, #32799	; 0x801f
 80034fc:	485e      	ldr	r0, [pc, #376]	; (8003678 <MX_GPIO_Init+0x210>)
 80034fe:	f002 fb9c 	bl	8005c3a <HAL_GPIO_WritePin>
                          |DAC_SYNC_Pin|DAC_CLR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RS_Pin|Display_Power_Pin, GPIO_PIN_RESET);
 8003502:	2200      	movs	r2, #0
 8003504:	f640 0101 	movw	r1, #2049	; 0x801
 8003508:	485c      	ldr	r0, [pc, #368]	; (800367c <MX_GPIO_Init+0x214>)
 800350a:	f002 fb96 	bl	8005c3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|SPI2_NSS_Pin
 800350e:	2201      	movs	r2, #1
 8003510:	f241 413e 	movw	r1, #5182	; 0x143e
 8003514:	4859      	ldr	r0, [pc, #356]	; (800367c <MX_GPIO_Init+0x214>)
 8003516:	f002 fb90 	bl	8005c3a <HAL_GPIO_WritePin>
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Start_button_Pin;
 800351a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800351e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003520:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003526:	2301      	movs	r3, #1
 8003528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Start_button_GPIO_Port, &GPIO_InitStruct);
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	4619      	mov	r1, r3
 8003530:	4850      	ldr	r0, [pc, #320]	; (8003674 <MX_GPIO_Init+0x20c>)
 8003532:	f002 f9eb 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Count_EN_Pin;
 8003536:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800353a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353c:	2301      	movs	r3, #1
 800353e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003544:	2302      	movs	r3, #2
 8003546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Count_EN_GPIO_Port, &GPIO_InitStruct);
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4619      	mov	r1, r3
 800354e:	4849      	ldr	r0, [pc, #292]	; (8003674 <MX_GPIO_Init+0x20c>)
 8003550:	f002 f9dc 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_cs_Pin;
 8003554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355a:	2301      	movs	r3, #1
 800355c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003562:	2303      	movs	r3, #3
 8003564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_cs_GPIO_Port, &GPIO_InitStruct);
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	4619      	mov	r1, r3
 800356c:	4841      	ldr	r0, [pc, #260]	; (8003674 <MX_GPIO_Init+0x20c>)
 800356e:	f002 f9cd 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 8003572:	f248 030f 	movw	r3, #32783	; 0x800f
 8003576:	617b      	str	r3, [r7, #20]
                          |DAC_CLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003578:	2301      	movs	r3, #1
 800357a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003580:	2303      	movs	r3, #3
 8003582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4619      	mov	r1, r3
 800358a:	483b      	ldr	r0, [pc, #236]	; (8003678 <MX_GPIO_Init+0x210>)
 800358c:	f002 f9be 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8003590:	2310      	movs	r3, #16
 8003592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003594:	2301      	movs	r3, #1
 8003596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003598:	2301      	movs	r3, #1
 800359a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359c:	2303      	movs	r3, #3
 800359e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4619      	mov	r1, r3
 80035a6:	4834      	ldr	r0, [pc, #208]	; (8003678 <MX_GPIO_Init+0x210>)
 80035a8:	f002 f9b0 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Display_RS_Pin;
 80035ac:	2301      	movs	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b0:	2301      	movs	r3, #1
 80035b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035b8:	2302      	movs	r3, #2
 80035ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Display_RS_GPIO_Port, &GPIO_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	482e      	ldr	r0, [pc, #184]	; (800367c <MX_GPIO_Init+0x214>)
 80035c4:	f002 f9a2 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|Display_Power_Pin
 80035c8:	f640 433e 	movw	r3, #3134	; 0xc3e
 80035cc:	617b      	str	r3, [r7, #20]
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80035ce:	2311      	movs	r3, #17
 80035d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035d6:	2302      	movs	r3, #2
 80035d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	4619      	mov	r1, r3
 80035e0:	4826      	ldr	r0, [pc, #152]	; (800367c <MX_GPIO_Init+0x214>)
 80035e2:	f002 f993 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80035e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ec:	2301      	movs	r3, #1
 80035ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f4:	2303      	movs	r3, #3
 80035f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4619      	mov	r1, r3
 80035fe:	481f      	ldr	r0, [pc, #124]	; (800367c <MX_GPIO_Init+0x214>)
 8003600:	f002 f984 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encode_Push_Pin;
 8003604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800360a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800360e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003610:	2301      	movs	r3, #1
 8003612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encode_Push_GPIO_Port, &GPIO_InitStruct);
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	4619      	mov	r1, r3
 800361a:	4817      	ldr	r0, [pc, #92]	; (8003678 <MX_GPIO_Init+0x210>)
 800361c:	f002 f976 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003626:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800362a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4619      	mov	r1, r3
 8003636:	4810      	ldr	r0, [pc, #64]	; (8003678 <MX_GPIO_Init+0x210>)
 8003638:	f002 f968 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 800363c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003646:	2301      	movs	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4619      	mov	r1, r3
 8003650:	4809      	ldr	r0, [pc, #36]	; (8003678 <MX_GPIO_Init+0x210>)
 8003652:	f002 f95b 	bl	800590c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003656:	2200      	movs	r2, #0
 8003658:	2101      	movs	r1, #1
 800365a:	2028      	movs	r0, #40	; 0x28
 800365c:	f001 fd81 	bl	8005162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003660:	2028      	movs	r0, #40	; 0x28
 8003662:	f001 fd9a 	bl	800519a <HAL_NVIC_EnableIRQ>

}
 8003666:	bf00      	nop
 8003668:	3728      	adds	r7, #40	; 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	40020800 	.word	0x40020800
 8003678:	40020000 	.word	0x40020000
 800367c:	40020400 	.word	0x40020400

08003680 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003684:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <MX_I2C1_Init+0x50>)
 8003686:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <MX_I2C1_Init+0x54>)
 8003688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800368a:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <MX_I2C1_Init+0x50>)
 800368c:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <MX_I2C1_Init+0x58>)
 800368e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003690:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <MX_I2C1_Init+0x50>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <MX_I2C1_Init+0x50>)
 8003698:	2200      	movs	r2, #0
 800369a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <MX_I2C1_Init+0x50>)
 800369e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <MX_I2C1_Init+0x50>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <MX_I2C1_Init+0x50>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036b0:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <MX_I2C1_Init+0x50>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <MX_I2C1_Init+0x50>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036bc:	4804      	ldr	r0, [pc, #16]	; (80036d0 <MX_I2C1_Init+0x50>)
 80036be:	f002 faed 	bl	8005c9c <HAL_I2C_Init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80036c8:	f000 ff46 	bl	8004558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036cc:	bf00      	nop
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000c44 	.word	0x20000c44
 80036d4:	40005400 	.word	0x40005400
 80036d8:	000186a0 	.word	0x000186a0

080036dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_I2C_MspInit+0x7c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d128      	bne.n	8003750 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fe:	4b17      	ldr	r3, [pc, #92]	; (800375c <HAL_I2C_MspInit+0x80>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_I2C_MspInit+0x80>)
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	61d3      	str	r3, [r2, #28]
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_I2C_MspInit+0x80>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TMP117_SCL_Pin|TMP117_SDA_Pin;
 8003716:	f44f 7340 	mov.w	r3, #768	; 0x300
 800371a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800371c:	2312      	movs	r3, #18
 800371e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003720:	2301      	movs	r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003724:	2303      	movs	r3, #3
 8003726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003728:	2304      	movs	r3, #4
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	4619      	mov	r1, r3
 8003732:	480b      	ldr	r0, [pc, #44]	; (8003760 <HAL_I2C_MspInit+0x84>)
 8003734:	f002 f8ea 	bl	800590c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <HAL_I2C_MspInit+0x80>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	4a07      	ldr	r2, [pc, #28]	; (800375c <HAL_I2C_MspInit+0x80>)
 800373e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003742:	6253      	str	r3, [r2, #36]	; 0x24
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_I2C_MspInit+0x80>)
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003750:	bf00      	nop
 8003752:	3728      	adds	r7, #40	; 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40005400 	.word	0x40005400
 800375c:	40023800 	.word	0x40023800
 8003760:	40020400 	.word	0x40020400

08003764 <USB_rx_command_buffer_push_refd>:
uint8_t eta_hours,eta_minute,eta_second;

int16_t Enc_Counter = 0;
uint32_t Display_timeout=0;

CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4804      	ldr	r0, [pc, #16]	; (8003780 <USB_rx_command_buffer_push_refd+0x1c>)
 8003770:	f7fd ff1e 	bl	80015b0 <__circ_gbuf_push>
 8003774:	4603      	mov	r3, r0
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200007a4 	.word	0x200007a4

08003784 <USB_rx_command_buffer_pop_refd>:
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4803      	ldr	r0, [pc, #12]	; (80037a0 <USB_rx_command_buffer_pop_refd+0x1c>)
 8003792:	f7fd febb 	bl	800150c <__circ_gbuf_pop>
 8003796:	4603      	mov	r3, r0
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	200007a4 	.word	0x200007a4

080037a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b095      	sub	sp, #84	; 0x54
 80037a8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 80037aa:	4b72      	ldr	r3, [pc, #456]	; (8003974 <main+0x1d0>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 80037b0:	4b70      	ldr	r3, [pc, #448]	; (8003974 <main+0x1d0>)
 80037b2:	2208      	movs	r2, #8
 80037b4:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 80037b6:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <main+0x1d0>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 80037bc:	4b6d      	ldr	r3, [pc, #436]	; (8003974 <main+0x1d0>)
 80037be:	2201      	movs	r2, #1
 80037c0:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 80037c2:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <main+0x1d0>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 80037c8:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <main+0x1d0>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 80037ce:	4b69      	ldr	r3, [pc, #420]	; (8003974 <main+0x1d0>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 80037d4:	4b67      	ldr	r3, [pc, #412]	; (8003974 <main+0x1d0>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 80037da:	4b66      	ldr	r3, [pc, #408]	; (8003974 <main+0x1d0>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]

	DAC_target_speed=0.01; //  V/s
 80037e0:	4b65      	ldr	r3, [pc, #404]	; (8003978 <main+0x1d4>)
 80037e2:	4a66      	ldr	r2, [pc, #408]	; (800397c <main+0x1d8>)
 80037e4:	601a      	str	r2, [r3, #0]
	DAC_code=DAC_CODE_MIDDLE;
 80037e6:	4b66      	ldr	r3, [pc, #408]	; (8003980 <main+0x1dc>)
 80037e8:	4a66      	ldr	r2, [pc, #408]	; (8003984 <main+0x1e0>)
 80037ea:	601a      	str	r2, [r3, #0]
	DAC_code_direction=DIRECTION_UP_STATE;
 80037ec:	4b66      	ldr	r3, [pc, #408]	; (8003988 <main+0x1e4>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037f2:	f001 fb4e 	bl	8004e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f6:	f000 f8e7 	bl	80039c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037fa:	f7ff fe35 	bl	8003468 <MX_GPIO_Init>
  MX_SPI1_Init();
 80037fe:	f000 feb1 	bl	8004564 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003802:	f000 fee3 	bl	80045cc <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8003806:	f00a fff9 	bl	800e7fc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800380a:	f001 f959 	bl	8004ac0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800380e:	f001 f9a5 	bl	8004b5c <MX_TIM4_Init>
  MX_I2C1_Init();
 8003812:	f7ff ff35 	bl	8003680 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003816:	f001 f907 	bl	8004a28 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800381a:	f000 f921 	bl	8003a60 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  init_LCD();
 800381e:	f7fe febf 	bl	80025a0 <init_LCD>
  LcdUpdate();
  LcdClear_massive();
  HAL_Delay(3000); //WarmUP
*/

  load_data_from_EEPROM();
 8003822:	f7ff fd3f 	bl	80032a4 <load_data_from_EEPROM>
  TMP117_Initialization(hi2c1);
 8003826:	4c59      	ldr	r4, [pc, #356]	; (800398c <main+0x1e8>)
 8003828:	4668      	mov	r0, sp
 800382a:	f104 0310 	add.w	r3, r4, #16
 800382e:	2244      	movs	r2, #68	; 0x44
 8003830:	4619      	mov	r1, r3
 8003832:	f00b fd87 	bl	800f344 <memcpy>
 8003836:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800383a:	f001 fad3 	bl	8004de4 <TMP117_Initialization>
  DDS_Init();
 800383e:	f7fe fadf 	bl	8001e00 <DDS_Init>
  DAC_SendInit();
 8003842:	f7fe f8ab 	bl	800199c <DAC_SendInit>
  DAC_Write(DAC_code);
 8003846:	4b4e      	ldr	r3, [pc, #312]	; (8003980 <main+0x1dc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe f84c 	bl	80018e8 <DAC_Write>

  HAL_TIM_Base_Start_IT(&htim3);
 8003850:	484f      	ldr	r0, [pc, #316]	; (8003990 <main+0x1ec>)
 8003852:	f006 faa5 	bl	8009da0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8003856:	484f      	ldr	r0, [pc, #316]	; (8003994 <main+0x1f0>)
 8003858:	f006 faa2 	bl	8009da0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800385c:	213c      	movs	r1, #60	; 0x3c
 800385e:	484e      	ldr	r0, [pc, #312]	; (8003998 <main+0x1f4>)
 8003860:	f006 fb8e 	bl	8009f80 <HAL_TIM_Encoder_Start>


  output_state(Output_off_STATE);
 8003864:	2000      	movs	r0, #0
 8003866:	f7fe ffa5 	bl	80027b4 <output_state>
  CPLD_control(CPLD_OFF_STATE);
 800386a:	2000      	movs	r0, #0
 800386c:	f7fd ffa8 	bl	80017c0 <CPLD_control>

  send_answer_to_CDC(CLEAR_TYPE_1);
 8003870:	2004      	movs	r0, #4
 8003872:	f7ff f977 	bl	8002b64 <send_answer_to_CDC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(USB_CDC_End_Line_Received)
 8003876:	4b49      	ldr	r3, [pc, #292]	; (800399c <main+0x1f8>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d028      	beq.n	80038d2 <main+0x12e>
		{
			uint8_t i=0;
 8003880:	2300      	movs	r3, #0
 8003882:	71fb      	strb	r3, [r7, #7]
			USB_CDC_End_Line_Received=0;
 8003884:	4b45      	ldr	r3, [pc, #276]	; (800399c <main+0x1f8>)
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
			while (1) {
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	4a44      	ldr	r2, [pc, #272]	; (80039a0 <main+0x1fc>)
 800388e:	4413      	add	r3, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff77 	bl	8003784 <USB_rx_command_buffer_pop_refd>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <main+0x100>
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	4a40      	ldr	r2, [pc, #256]	; (80039a0 <main+0x1fc>)
 80038a0:	210a      	movs	r1, #10
 80038a2:	54d1      	strb	r1, [r2, r3]
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	4a3e      	ldr	r2, [pc, #248]	; (80039a0 <main+0x1fc>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	2b0a      	cmp	r3, #10
 80038ac:	d008      	beq.n	80038c0 <main+0x11c>
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	4a3b      	ldr	r2, [pc, #236]	; (80039a0 <main+0x1fc>)
 80038b2:	5cd3      	ldrb	r3, [r2, r3]
 80038b4:	2b0d      	cmp	r3, #13
 80038b6:	d003      	beq.n	80038c0 <main+0x11c>
				i++;
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	3301      	adds	r3, #1
 80038bc:	71fb      	strb	r3, [r7, #7]
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 80038be:	e7e4      	b.n	800388a <main+0xe6>
			}
			Parsing_USB_command();
 80038c0:	f000 f9b6 	bl	8003c30 <Parsing_USB_command>
			if(Display_status==0)Display_need_wakeup=1;
 80038c4:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <main+0x200>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <main+0x12e>
 80038cc:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <main+0x204>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
		}

		if(Need_update_DDS)
 80038d2:	4b36      	ldr	r3, [pc, #216]	; (80039ac <main+0x208>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00d      	beq.n	80038f6 <main+0x152>
		{
			if(Ramp_dac_step_complete)
 80038da:	4b35      	ldr	r3, [pc, #212]	; (80039b0 <main+0x20c>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <main+0x14e>
			{
				DDS_Update();
 80038e2:	f7fe fb69 	bl	8001fb8 <DDS_Update>
				Need_update_DDS=0;
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <main+0x208>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
				Ramp_dac_step_complete=0;
 80038ec:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <main+0x20c>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
			}
			DDS_Calculation();
 80038f2:	f7fe f94b 	bl	8001b8c <DDS_Calculation>

		}
		if(Need_update_Display && Display_status)
 80038f6:	4b2f      	ldr	r3, [pc, #188]	; (80039b4 <main+0x210>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <main+0x170>
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <main+0x200>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d006      	beq.n	8003914 <main+0x170>
		{
			display_screen(dU_dt_SCREEN);
 8003906:	2000      	movs	r0, #0
 8003908:	f7ff f866 	bl	80029d8 <display_screen>
			LcdUpdate();
 800390c:	f7fe fc1c 	bl	8002148 <LcdUpdate>
			LcdClear_massive();
 8003910:	f7fe fc54 	bl	80021bc <LcdClear_massive>
		}
		if(Display_need_wakeup)
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <main+0x204>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00b      	beq.n	8003934 <main+0x190>
		{
			Display_need_wakeup=0;
 800391c:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <main+0x204>)
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
			Poweron_LCD();
 8003922:	f7fe fe2b 	bl	800257c <Poweron_LCD>
			Display_timeout=0;
 8003926:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <main+0x214>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
			Need_update_Display=1;
 800392c:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <main+0x210>)
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e7a0      	b.n	8003876 <main+0xd2>
		} else
		{
			if(Display_status==1) // If display on
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <main+0x200>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d117      	bne.n	800396c <main+0x1c8>
			{
				// 1 hour timeout if output is off
				// 1 day timeout if output is on
				if((Display_timeout>72000 && Current_output_status==Output_off_STATE) || (Display_timeout>1728000 && Current_output_status!=Output_off_STATE))
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <main+0x214>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <main+0x218>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d903      	bls.n	800394e <main+0x1aa>
 8003946:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <main+0x21c>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <main+0x1bc>
 800394e:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <main+0x214>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <main+0x220>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d98e      	bls.n	8003876 <main+0xd2>
 8003958:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <main+0x21c>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d08a      	beq.n	8003876 <main+0xd2>
				{
					Poweroff_LCD();
 8003960:	f7fe fdfa 	bl	8002558 <Poweroff_LCD>
					Display_timeout=0;
 8003964:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <main+0x214>)
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e784      	b.n	8003876 <main+0xd2>
				}
			} else Display_timeout=0;
 800396c:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <main+0x214>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
		if(USB_CDC_End_Line_Received)
 8003972:	e780      	b.n	8003876 <main+0xd2>
 8003974:	20000d04 	.word	0x20000d04
 8003978:	20000d18 	.word	0x20000d18
 800397c:	3c23d70a 	.word	0x3c23d70a
 8003980:	20000d2c 	.word	0x20000d2c
 8003984:	0007ffff 	.word	0x0007ffff
 8003988:	20000d30 	.word	0x20000d30
 800398c:	20000c44 	.word	0x20000c44
 8003990:	20000e2c 	.word	0x20000e2c
 8003994:	20000dec 	.word	0x20000dec
 8003998:	20000e6c 	.word	0x20000e6c
 800399c:	20000c20 	.word	0x20000c20
 80039a0:	20000c24 	.word	0x20000c24
 80039a4:	20000d32 	.word	0x20000d32
 80039a8:	200007b8 	.word	0x200007b8
 80039ac:	20000d34 	.word	0x20000d34
 80039b0:	20000d35 	.word	0x20000d35
 80039b4:	20000d33 	.word	0x20000d33
 80039b8:	20000cd8 	.word	0x20000cd8
 80039bc:	00011940 	.word	0x00011940
 80039c0:	20000d28 	.word	0x20000d28
 80039c4:	001a5e00 	.word	0x001a5e00

080039c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b092      	sub	sp, #72	; 0x48
 80039cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	2234      	movs	r2, #52	; 0x34
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f00b fcc2 	bl	800f360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039dc:	463b      	mov	r3, r7
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039ea:	4b1c      	ldr	r3, [pc, #112]	; (8003a5c <SystemClock_Config+0x94>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80039f2:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <SystemClock_Config+0x94>)
 80039f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039f8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039fe:	2301      	movs	r3, #1
 8003a00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a02:	2302      	movs	r3, #2
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003a0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8003a12:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003a16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 fcfd 	bl	800841c <HAL_RCC_OscConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8003a28:	f000 fd96 	bl	8004558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a2c:	230f      	movs	r3, #15
 8003a2e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a30:	2303      	movs	r3, #3
 8003a32:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a40:	463b      	mov	r3, r7
 8003a42:	2101      	movs	r1, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f005 f819 	bl	8008a7c <HAL_RCC_ClockConfig>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003a50:	f000 fd82 	bl	8004558 <Error_Handler>
  }
}
 8003a54:	bf00      	nop
 8003a56:	3748      	adds	r7, #72	; 0x48
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40007000 	.word	0x40007000

08003a60 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003a64:	2200      	movs	r2, #0
 8003a66:	2100      	movs	r1, #0
 8003a68:	2017      	movs	r0, #23
 8003a6a:	f001 fb7a 	bl	8005162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a6e:	2017      	movs	r0, #23
 8003a70:	f001 fb93 	bl	800519a <HAL_NVIC_EnableIRQ>
}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_TIM_PeriodElapsedCallback>:
//==============================================================================================


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3 )// INL correction, each 500ms
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a0d      	ldr	r2, [pc, #52]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d106      	bne.n	8003a96 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		if(cfg.LDACMODE==1)Need_update_DDS=1;
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003a8a:	789b      	ldrb	r3, [r3, #2]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d102      	bne.n	8003a96 <HAL_TIM_PeriodElapsedCallback+0x1e>
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim2 )//User interface workload, each 50ms
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d107      	bne.n	8003aae <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		Need_update_Display=1;
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
		Display_timeout++;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	4a08      	ldr	r2, [pc, #32]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003aac:	6013      	str	r3, [r2, #0]
	}

}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	20000e2c 	.word	0x20000e2c
 8003abc:	20000d04 	.word	0x20000d04
 8003ac0:	20000d34 	.word	0x20000d34
 8003ac4:	20000dec 	.word	0x20000dec
 8003ac8:	20000d33 	.word	0x20000d33
 8003acc:	20000cd8 	.word	0x20000cd8

08003ad0 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
	DAC_Write_FAST();
 8003ada:	f7fd ff45 	bl	8001968 <DAC_Write_FAST>
	Ramp_dac_step_complete=1;
 8003ade:	4b4c      	ldr	r3, [pc, #304]	; (8003c10 <HAL_GPIO_EXTI_Callback+0x140>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]

	if((GPIO_Pin == GPIO_PIN_8) || (GPIO_Pin == GPIO_PIN_13)) Display_need_wakeup=1;
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_EXTI_Callback+0x24>
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af2:	d102      	bne.n	8003afa <HAL_GPIO_EXTI_Callback+0x2a>
 8003af4:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_GPIO_EXTI_Callback+0x144>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_9)
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b00:	f040 8083 	bne.w	8003c0a <HAL_GPIO_EXTI_Callback+0x13a>
	{
		switch(DAC_code_direction)
 8003b04:	4b44      	ldr	r3, [pc, #272]	; (8003c18 <HAL_GPIO_EXTI_Callback+0x148>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d037      	beq.n	8003b7c <HAL_GPIO_EXTI_Callback+0xac>
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	dc61      	bgt.n	8003bd4 <HAL_GPIO_EXTI_Callback+0x104>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01c      	beq.n	8003b4e <HAL_GPIO_EXTI_Callback+0x7e>
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d15d      	bne.n	8003bd4 <HAL_GPIO_EXTI_Callback+0x104>
		{
		//----------------------------------------------------------//
		case DIRECTION_UP_STATE:
			if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 8003b18:	4b40      	ldr	r3, [pc, #256]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8003b20:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003b24:	4a3e      	ldr	r2, [pc, #248]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d307      	bcc.n	8003b3c <HAL_GPIO_EXTI_Callback+0x6c>
			{
				DAC_code+=DDS_target_multipiller;
 8003b2c:	4b3c      	ldr	r3, [pc, #240]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4413      	add	r3, r2
 8003b36:	4a3a      	ldr	r2, [pc, #232]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b38:	6013      	str	r3, [r2, #0]
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
				DAC_SendInit();
				send_answer_to_CDC(DONE_TYPE_1);
				return;
			}
		break;
 8003b3a:	e04b      	b.n	8003bd4 <HAL_GPIO_EXTI_Callback+0x104>
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f7fd fe3f 	bl	80017c0 <CPLD_control>
				DAC_SendInit();
 8003b42:	f7fd ff2b 	bl	800199c <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 8003b46:	2005      	movs	r0, #5
 8003b48:	f7ff f80c 	bl	8002b64 <send_answer_to_CDC>
				return;
 8003b4c:	e05d      	b.n	8003c0a <HAL_GPIO_EXTI_Callback+0x13a>

		case DIRECTION_DOWN_STATE:
			if(DAC_code>=DDS_target_multipiller)
 8003b4e:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b32      	ldr	r3, [pc, #200]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d307      	bcc.n	8003b6a <HAL_GPIO_EXTI_Callback+0x9a>
			{
				DAC_code-=DDS_target_multipiller;
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	4a2e      	ldr	r2, [pc, #184]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b66:	6013      	str	r3, [r2, #0]
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
				DAC_SendInit();
				send_answer_to_CDC(DONE_TYPE_1);
				return;
			}
		break;
 8003b68:	e034      	b.n	8003bd4 <HAL_GPIO_EXTI_Callback+0x104>
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7fd fe28 	bl	80017c0 <CPLD_control>
				DAC_SendInit();
 8003b70:	f7fd ff14 	bl	800199c <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 8003b74:	2005      	movs	r0, #5
 8003b76:	f7fe fff5 	bl	8002b64 <send_answer_to_CDC>
				return;
 8003b7a:	e046      	b.n	8003c0a <HAL_GPIO_EXTI_Callback+0x13a>

		case DIRECTION_CYCLE_STATE:
			if(DAC_code_direction_for_cycle_mode == 1)
 8003b7c:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <HAL_GPIO_EXTI_Callback+0x154>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d115      	bne.n	8003bb0 <HAL_GPIO_EXTI_Callback+0xe0>
			{
				if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 8003b84:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8003b8c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003b90:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d307      	bcc.n	8003ba8 <HAL_GPIO_EXTI_Callback+0xd8>
				{
					DAC_code+=DDS_target_multipiller;
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003ba4:	6013      	str	r3, [r2, #0]
				if(DAC_code>=DDS_target_multipiller)
				{
					DAC_code-=DDS_target_multipiller;
				} else DAC_code_direction_for_cycle_mode=1;
			}
		break;
 8003ba6:	e014      	b.n	8003bd2 <HAL_GPIO_EXTI_Callback+0x102>
				} else  DAC_code_direction_for_cycle_mode=0;
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <HAL_GPIO_EXTI_Callback+0x154>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]
		break;
 8003bae:	e010      	b.n	8003bd2 <HAL_GPIO_EXTI_Callback+0x102>
				if(DAC_code>=DDS_target_multipiller)
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d307      	bcc.n	8003bcc <HAL_GPIO_EXTI_Callback+0xfc>
					DAC_code-=DDS_target_multipiller;
 8003bbc:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003bc8:	6013      	str	r3, [r2, #0]
		break;
 8003bca:	e002      	b.n	8003bd2 <HAL_GPIO_EXTI_Callback+0x102>
				} else DAC_code_direction_for_cycle_mode=1;
 8003bcc:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <HAL_GPIO_EXTI_Callback+0x154>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
		break;
 8003bd2:	bf00      	nop
		}
		DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <HAL_GPIO_EXTI_Callback+0x158>)
 8003bd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bda:	601a      	str	r2, [r3, #0]
		DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <HAL_GPIO_EXTI_Callback+0x150>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003be6:	f023 030f 	bic.w	r3, r3, #15
 8003bea:	4a0f      	ldr	r2, [pc, #60]	; (8003c28 <HAL_GPIO_EXTI_Callback+0x158>)
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	4a0d      	ldr	r2, [pc, #52]	; (8003c28 <HAL_GPIO_EXTI_Callback+0x158>)
 8003bf2:	6013      	str	r3, [r2, #0]
		DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <HAL_GPIO_EXTI_Callback+0x158>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_GPIO_EXTI_Callback+0x15c>)
 8003bfe:	801a      	strh	r2, [r3, #0]
		DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_GPIO_EXTI_Callback+0x158>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_GPIO_EXTI_Callback+0x15c>)
 8003c08:	805a      	strh	r2, [r3, #2]
	}
}
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000d35 	.word	0x20000d35
 8003c14:	200007b8 	.word	0x200007b8
 8003c18:	20000d30 	.word	0x20000d30
 8003c1c:	200007b0 	.word	0x200007b0
 8003c20:	20000d2c 	.word	0x20000d2c
 8003c24:	20000d31 	.word	0x20000d31
 8003c28:	20000cfc 	.word	0x20000cfc
 8003c2c:	20000d00 	.word	0x20000d00

08003c30 <Parsing_USB_command>:

void Parsing_USB_command(void)
{
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b0a7      	sub	sp, #156	; 0x9c
 8003c34:	af12      	add	r7, sp, #72	; 0x48
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];
	uint8_t cdc_counter=0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	found = strtok((char *)command_buffer," ");
 8003c3c:	49c4      	ldr	r1, [pc, #784]	; (8003f50 <Parsing_USB_command+0x320>)
 8003c3e:	48c5      	ldr	r0, [pc, #788]	; (8003f54 <Parsing_USB_command+0x324>)
 8003c40:	f00c fe36 	bl	80108b0 <strtok>
 8003c44:	6478      	str	r0, [r7, #68]	; 0x44
	if(found!=NULL)
 8003c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <Parsing_USB_command+0x3a>
	{
		strcpy(decoded_string_1,found);
 8003c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c52:	4618      	mov	r0, r3
 8003c54:	f00c f80c 	bl	800fc70 <strcpy>
	{
		send_answer_to_CDC(ERROR_TYPE_1);
		return;
	}

	found = strtok(NULL,"\r");
 8003c58:	49bf      	ldr	r1, [pc, #764]	; (8003f58 <Parsing_USB_command+0x328>)
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	f00c fe28 	bl	80108b0 <strtok>
 8003c60:	6478      	str	r0, [r7, #68]	; 0x44
	if(found!=NULL)
 8003c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d024      	beq.n	8003cb2 <Parsing_USB_command+0x82>
 8003c68:	e004      	b.n	8003c74 <Parsing_USB_command+0x44>
		send_answer_to_CDC(ERROR_TYPE_1);
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f7fe ff7a 	bl	8002b64 <send_answer_to_CDC>
		return;
 8003c70:	f000 bc37 	b.w	80044e2 <Parsing_USB_command+0x8b2>
	{
		strcpy(decoded_string_2,found);
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f00b fff9 	bl	800fc70 <strcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 8003c7e:	2300      	movs	r3, #0
 8003c80:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c82:	e00d      	b.n	8003ca0 <Parsing_USB_command+0x70>
 8003c84:	1d3a      	adds	r2, r7, #4
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	4413      	add	r3, r2
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d104      	bne.n	8003c9a <Parsing_USB_command+0x6a>
 8003c90:	1d3a      	adds	r2, r7, #4
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c94:	4413      	add	r3, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca0:	1d3b      	adds	r3, r7, #4
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fa76 	bl	8000194 <strlen>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d8e9      	bhi.n	8003c84 <Parsing_USB_command+0x54>
 8003cb0:	e004      	b.n	8003cbc <Parsing_USB_command+0x8c>
	}
	else
	{
		send_answer_to_CDC(ERROR_TYPE_1);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f7fe ff56 	bl	8002b64 <send_answer_to_CDC>
		return;
 8003cb8:	f000 bc13 	b.w	80044e2 <Parsing_USB_command+0x8b2>
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8003cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc0:	49a6      	ldr	r1, [pc, #664]	; (8003f5c <Parsing_USB_command+0x32c>)
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc fa5c 	bl	8000180 <strcmp>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11f      	bne.n	8003d0e <Parsing_USB_command+0xde>
	{
		if(!(strcmp(decoded_string_2,"START")))
 8003cce:	1d3b      	adds	r3, r7, #4
 8003cd0:	49a3      	ldr	r1, [pc, #652]	; (8003f60 <Parsing_USB_command+0x330>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fc fa54 	bl	8000180 <strcmp>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d105      	bne.n	8003cea <Parsing_USB_command+0xba>
		{
			cmd_SWEEP_START();
 8003cde:	f7ff f813 	bl	8002d08 <cmd_SWEEP_START>
			send_answer_to_CDC(OK_TYPE_2);
 8003ce2:	2003      	movs	r0, #3
 8003ce4:	f7fe ff3e 	bl	8002b64 <send_answer_to_CDC>
			return;
 8003ce8:	e3fb      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP")))
 8003cea:	1d3b      	adds	r3, r7, #4
 8003cec:	499d      	ldr	r1, [pc, #628]	; (8003f64 <Parsing_USB_command+0x334>)
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fc fa46 	bl	8000180 <strcmp>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <Parsing_USB_command+0xd6>
			{
				cmd_SWEEP_STOP();
 8003cfa:	f7ff f815 	bl	8002d28 <cmd_SWEEP_STOP>
				send_answer_to_CDC(OK_TYPE_2);
 8003cfe:	2003      	movs	r0, #3
 8003d00:	f7fe ff30 	bl	8002b64 <send_answer_to_CDC>
				return;
 8003d04:	e3ed      	b.n	80044e2 <Parsing_USB_command+0x8b2>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 8003d06:	2000      	movs	r0, #0
 8003d08:	f7fe ff2c 	bl	8002b64 <send_answer_to_CDC>
				return;
 8003d0c:	e3e9      	b.n	80044e2 <Parsing_USB_command+0x8b2>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 8003d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d12:	4995      	ldr	r1, [pc, #596]	; (8003f68 <Parsing_USB_command+0x338>)
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fa33 	bl	8000180 <strcmp>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d136      	bne.n	8003d8e <Parsing_USB_command+0x15e>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 8003d20:	1d3b      	adds	r3, r7, #4
 8003d22:	4992      	ldr	r1, [pc, #584]	; (8003f6c <Parsing_USB_command+0x33c>)
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fc fa2b 	bl	8000180 <strcmp>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d106      	bne.n	8003d3e <Parsing_USB_command+0x10e>
			cmd_DAC_SET(DAC_CODE_TOP);
 8003d30:	488f      	ldr	r0, [pc, #572]	; (8003f70 <Parsing_USB_command+0x340>)
 8003d32:	f7ff f803 	bl	8002d3c <cmd_DAC_SET>
			send_answer_to_CDC(OK_TYPE_2);
 8003d36:	2003      	movs	r0, #3
 8003d38:	f7fe ff14 	bl	8002b64 <send_answer_to_CDC>
			return;
 8003d3c:	e3d1      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	498c      	ldr	r1, [pc, #560]	; (8003f74 <Parsing_USB_command+0x344>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc fa1c 	bl	8000180 <strcmp>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <Parsing_USB_command+0x12c>
				cmd_DAC_SET(DAC_CODE_DOWN);
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f7fe fff4 	bl	8002d3c <cmd_DAC_SET>
				send_answer_to_CDC(OK_TYPE_2);
 8003d54:	2003      	movs	r0, #3
 8003d56:	f7fe ff05 	bl	8002b64 <send_answer_to_CDC>
				return;
 8003d5a:	e3c2      	b.n	80044e2 <Parsing_USB_command+0x8b2>
			}
			else
			{
				if(cmd_SET_OUTPUT_VOLTAGE(atof(decoded_string_2)))
 8003d5c:	1d3b      	adds	r3, r7, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f00b fac2 	bl	800f2e8 <atof>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f7fc fece 	bl	8000b0c <__aeabi_d2f>
 8003d70:	4603      	mov	r3, r0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff f812 	bl	8002d9c <cmd_SET_OUTPUT_VOLTAGE>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <Parsing_USB_command+0x156>
				{
					send_answer_to_CDC(OK_TYPE_2);
 8003d7e:	2003      	movs	r0, #3
 8003d80:	f7fe fef0 	bl	8002b64 <send_answer_to_CDC>
					return;
 8003d84:	e3ad      	b.n	80044e2 <Parsing_USB_command+0x8b2>
				}
				else
				{
					send_answer_to_CDC(ERROR_TYPE_2);
 8003d86:	2001      	movs	r0, #1
 8003d88:	f7fe feec 	bl	8002b64 <send_answer_to_CDC>
					return;
 8003d8c:	e3a9      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
	}


	// ==== OUTPUT command ====
	if(!(strcmp(decoded_string_1,"OUTPUT")))
 8003d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d92:	4979      	ldr	r1, [pc, #484]	; (8003f78 <Parsing_USB_command+0x348>)
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc f9f3 	bl	8000180 <strcmp>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d13f      	bne.n	8003e20 <Parsing_USB_command+0x1f0>
	{
		if(!(strcmp(decoded_string_2,"OFF"))){
 8003da0:	1d3b      	adds	r3, r7, #4
 8003da2:	4976      	ldr	r1, [pc, #472]	; (8003f7c <Parsing_USB_command+0x34c>)
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fc f9eb 	bl	8000180 <strcmp>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <Parsing_USB_command+0x18e>
			output_state(Output_off_STATE);
 8003db0:	2000      	movs	r0, #0
 8003db2:	f7fe fcff 	bl	80027b4 <output_state>
			send_answer_to_CDC(OK_TYPE_2);
 8003db6:	2003      	movs	r0, #3
 8003db8:	f7fe fed4 	bl	8002b64 <send_answer_to_CDC>
			return;
 8003dbc:	e391      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"X1"))){
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	496f      	ldr	r1, [pc, #444]	; (8003f80 <Parsing_USB_command+0x350>)
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc f9dc 	bl	8000180 <strcmp>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <Parsing_USB_command+0x1ac>
				output_state(Output_x1_STATE);
 8003dce:	2001      	movs	r0, #1
 8003dd0:	f7fe fcf0 	bl	80027b4 <output_state>
				send_answer_to_CDC(OK_TYPE_2);
 8003dd4:	2003      	movs	r0, #3
 8003dd6:	f7fe fec5 	bl	8002b64 <send_answer_to_CDC>
				return;
 8003dda:	e382      	b.n	80044e2 <Parsing_USB_command+0x8b2>
			}
			else
			{
				if(!(strcmp(decoded_string_2,"X2"))){
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	4969      	ldr	r1, [pc, #420]	; (8003f84 <Parsing_USB_command+0x354>)
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fc f9cd 	bl	8000180 <strcmp>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <Parsing_USB_command+0x1ca>
					output_state(Output_x2_STATE);
 8003dec:	2002      	movs	r0, #2
 8003dee:	f7fe fce1 	bl	80027b4 <output_state>
					send_answer_to_CDC(OK_TYPE_2);
 8003df2:	2003      	movs	r0, #3
 8003df4:	f7fe feb6 	bl	8002b64 <send_answer_to_CDC>
					return;
 8003df8:	e373      	b.n	80044e2 <Parsing_USB_command+0x8b2>
				}
				else
				{
					if(!(strcmp(decoded_string_2,"X4"))){
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	4962      	ldr	r1, [pc, #392]	; (8003f88 <Parsing_USB_command+0x358>)
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc f9be 	bl	8000180 <strcmp>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <Parsing_USB_command+0x1e8>
						output_state(Output_x4_STATE);
 8003e0a:	2003      	movs	r0, #3
 8003e0c:	f7fe fcd2 	bl	80027b4 <output_state>
						send_answer_to_CDC(OK_TYPE_2);
 8003e10:	2003      	movs	r0, #3
 8003e12:	f7fe fea7 	bl	8002b64 <send_answer_to_CDC>
						return;
 8003e16:	e364      	b.n	80044e2 <Parsing_USB_command+0x8b2>
					}
					else
					{
						send_answer_to_CDC(ERROR_TYPE_2);
 8003e18:	2001      	movs	r0, #1
 8003e1a:	f7fe fea3 	bl	8002b64 <send_answer_to_CDC>
						return;
 8003e1e:	e360      	b.n	80044e2 <Parsing_USB_command+0x8b2>
			}
		}
	}

	// ==== DAC_CAL_TEMP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TEMP")))
 8003e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e24:	4959      	ldr	r1, [pc, #356]	; (8003f8c <Parsing_USB_command+0x35c>)
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc f9aa 	bl	8000180 <strcmp>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d116      	bne.n	8003e60 <Parsing_USB_command+0x230>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	494a      	ldr	r1, [pc, #296]	; (8003f60 <Parsing_USB_command+0x330>)
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc f9a2 	bl	8000180 <strcmp>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <Parsing_USB_command+0x228>
			send_answer_to_CDC(RUN_CAL_TYPE_TEMP);
 8003e42:	200f      	movs	r0, #15
 8003e44:	f7fe fe8e 	bl	8002b64 <send_answer_to_CDC>
			cmd_CAL(DAC_CAL_TEMP,NONE);
 8003e48:	4951      	ldr	r1, [pc, #324]	; (8003f90 <Parsing_USB_command+0x360>)
 8003e4a:	2006      	movs	r0, #6
 8003e4c:	f7ff f8fc 	bl	8003048 <cmd_CAL>
			send_answer_to_CDC(OK_TYPE_1);
 8003e50:	2002      	movs	r0, #2
 8003e52:	f7fe fe87 	bl	8002b64 <send_answer_to_CDC>
			return;
 8003e56:	e344      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f7fe fe83 	bl	8002b64 <send_answer_to_CDC>
			return;
 8003e5e:	e340      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
	}

	// ==== DAC_CAL_POLY_A command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_A")))
 8003e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e64:	494b      	ldr	r1, [pc, #300]	; (8003f94 <Parsing_USB_command+0x364>)
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fc f98a 	bl	8000180 <strcmp>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d112      	bne.n	8003e98 <Parsing_USB_command+0x268>
	{
		cmd_CAL(DAC_CAL_POLY_A,atof(decoded_string_2));
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	4618      	mov	r0, r3
 8003e76:	f00b fa37 	bl	800f2e8 <atof>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	f7fc fe43 	bl	8000b0c <__aeabi_d2f>
 8003e86:	4603      	mov	r3, r0
 8003e88:	4619      	mov	r1, r3
 8003e8a:	2007      	movs	r0, #7
 8003e8c:	f7ff f8dc 	bl	8003048 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003e90:	2003      	movs	r0, #3
 8003e92:	f7fe fe67 	bl	8002b64 <send_answer_to_CDC>
		return;
 8003e96:	e324      	b.n	80044e2 <Parsing_USB_command+0x8b2>
	}

	// ==== DAC_CAL_POLY_B command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_B")))
 8003e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e9c:	493e      	ldr	r1, [pc, #248]	; (8003f98 <Parsing_USB_command+0x368>)
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc f96e 	bl	8000180 <strcmp>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d112      	bne.n	8003ed0 <Parsing_USB_command+0x2a0>
	{
		cmd_CAL(DAC_CAL_POLY_B,atof(decoded_string_2));
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f00b fa1b 	bl	800f2e8 <atof>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
 8003eba:	f7fc fe27 	bl	8000b0c <__aeabi_d2f>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	2008      	movs	r0, #8
 8003ec4:	f7ff f8c0 	bl	8003048 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003ec8:	2003      	movs	r0, #3
 8003eca:	f7fe fe4b 	bl	8002b64 <send_answer_to_CDC>
		return;
 8003ece:	e308      	b.n	80044e2 <Parsing_USB_command+0x8b2>
	}

	// ==== DAC_CAL_POLY_C command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_C")))
 8003ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed4:	4931      	ldr	r1, [pc, #196]	; (8003f9c <Parsing_USB_command+0x36c>)
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fc f952 	bl	8000180 <strcmp>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d112      	bne.n	8003f08 <Parsing_USB_command+0x2d8>
	{
		cmd_CAL(DAC_CAL_POLY_C,atof(decoded_string_2));
 8003ee2:	1d3b      	adds	r3, r7, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f00b f9ff 	bl	800f2e8 <atof>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f7fc fe0b 	bl	8000b0c <__aeabi_d2f>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4619      	mov	r1, r3
 8003efa:	2009      	movs	r0, #9
 8003efc:	f7ff f8a4 	bl	8003048 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003f00:	2003      	movs	r0, #3
 8003f02:	f7fe fe2f 	bl	8002b64 <send_answer_to_CDC>
		return;
 8003f06:	e2ec      	b.n	80044e2 <Parsing_USB_command+0x8b2>
	}

	// ==== GAIN_X2_CAL command ====
	if(!(strcmp(decoded_string_1,"GAIN_X2_CAL")))
 8003f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f0c:	4924      	ldr	r1, [pc, #144]	; (8003fa0 <Parsing_USB_command+0x370>)
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc f936 	bl	8000180 <strcmp>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d144      	bne.n	8003fa4 <Parsing_USB_command+0x374>
	{
		if(cmd_CAL(GAIN_X2_CAL,atof(decoded_string_2)))
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f00b f9e3 	bl	800f2e8 <atof>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f7fc fdef 	bl	8000b0c <__aeabi_d2f>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4619      	mov	r1, r3
 8003f32:	200c      	movs	r0, #12
 8003f34:	f7ff f888 	bl	8003048 <cmd_CAL>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <Parsing_USB_command+0x316>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003f3e:	2003      	movs	r0, #3
 8003f40:	f7fe fe10 	bl	8002b64 <send_answer_to_CDC>
			return;
 8003f44:	e2cd      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003f46:	2001      	movs	r0, #1
 8003f48:	f7fe fe0c 	bl	8002b64 <send_answer_to_CDC>
			return;
 8003f4c:	e2c9      	b.n	80044e2 <Parsing_USB_command+0x8b2>
 8003f4e:	bf00      	nop
 8003f50:	08013830 	.word	0x08013830
 8003f54:	20000c24 	.word	0x20000c24
 8003f58:	08013834 	.word	0x08013834
 8003f5c:	08013838 	.word	0x08013838
 8003f60:	08013840 	.word	0x08013840
 8003f64:	08013848 	.word	0x08013848
 8003f68:	08013850 	.word	0x08013850
 8003f6c:	08013858 	.word	0x08013858
 8003f70:	000fffff 	.word	0x000fffff
 8003f74:	0801385c 	.word	0x0801385c
 8003f78:	08013864 	.word	0x08013864
 8003f7c:	0801386c 	.word	0x0801386c
 8003f80:	08013870 	.word	0x08013870
 8003f84:	08013874 	.word	0x08013874
 8003f88:	08013878 	.word	0x08013878
 8003f8c:	0801387c 	.word	0x0801387c
 8003f90:	41600000 	.word	0x41600000
 8003f94:	0801388c 	.word	0x0801388c
 8003f98:	0801389c 	.word	0x0801389c
 8003f9c:	080138ac 	.word	0x080138ac
 8003fa0:	080138bc 	.word	0x080138bc
		}
	}

	// ==== GAIN_X4_CAL command ====
	if(!(strcmp(decoded_string_1,"GAIN_X4_CAL")))
 8003fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fa8:	49b6      	ldr	r1, [pc, #728]	; (8004284 <Parsing_USB_command+0x654>)
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fc f8e8 	bl	8000180 <strcmp>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d119      	bne.n	8003fea <Parsing_USB_command+0x3ba>
	{
		if(cmd_CAL(GAIN_X4_CAL,atof(decoded_string_2)))
 8003fb6:	1d3b      	adds	r3, r7, #4
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f00b f995 	bl	800f2e8 <atof>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f7fc fda1 	bl	8000b0c <__aeabi_d2f>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4619      	mov	r1, r3
 8003fce:	200d      	movs	r0, #13
 8003fd0:	f7ff f83a 	bl	8003048 <cmd_CAL>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <Parsing_USB_command+0x3b2>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003fda:	2003      	movs	r0, #3
 8003fdc:	f7fe fdc2 	bl	8002b64 <send_answer_to_CDC>
			return;
 8003fe0:	e27f      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	f7fe fdbe 	bl	8002b64 <send_answer_to_CDC>
			return;
 8003fe8:	e27b      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
	}


	// ==== DAC_CAL_TOP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TOP")))
 8003fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fee:	49a6      	ldr	r1, [pc, #664]	; (8004288 <Parsing_USB_command+0x658>)
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fc f8c5 	bl	8000180 <strcmp>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d119      	bne.n	8004030 <Parsing_USB_command+0x400>
	{
		if(cmd_CAL(DAC_CAL_TOP,atof(decoded_string_2)))
 8003ffc:	1d3b      	adds	r3, r7, #4
 8003ffe:	4618      	mov	r0, r3
 8004000:	f00b f972 	bl	800f2e8 <atof>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4610      	mov	r0, r2
 800400a:	4619      	mov	r1, r3
 800400c:	f7fc fd7e 	bl	8000b0c <__aeabi_d2f>
 8004010:	4603      	mov	r3, r0
 8004012:	4619      	mov	r1, r3
 8004014:	200a      	movs	r0, #10
 8004016:	f7ff f817 	bl	8003048 <cmd_CAL>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <Parsing_USB_command+0x3f8>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8004020:	2003      	movs	r0, #3
 8004022:	f7fe fd9f 	bl	8002b64 <send_answer_to_CDC>
			return;
 8004026:	e25c      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8004028:	2001      	movs	r0, #1
 800402a:	f7fe fd9b 	bl	8002b64 <send_answer_to_CDC>
			return;
 800402e:	e258      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
	}


	// ==== DAC_CAL_DOWN command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_DOWN")))
 8004030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004034:	4995      	ldr	r1, [pc, #596]	; (800428c <Parsing_USB_command+0x65c>)
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc f8a2 	bl	8000180 <strcmp>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d119      	bne.n	8004076 <Parsing_USB_command+0x446>
	{
		if(cmd_CAL(DAC_CAL_DOWN,atof(decoded_string_2)))
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	4618      	mov	r0, r3
 8004046:	f00b f94f 	bl	800f2e8 <atof>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	f7fc fd5b 	bl	8000b0c <__aeabi_d2f>
 8004056:	4603      	mov	r3, r0
 8004058:	4619      	mov	r1, r3
 800405a:	200b      	movs	r0, #11
 800405c:	f7fe fff4 	bl	8003048 <cmd_CAL>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <Parsing_USB_command+0x43e>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8004066:	2003      	movs	r0, #3
 8004068:	f7fe fd7c 	bl	8002b64 <send_answer_to_CDC>
			return;
 800406c:	e239      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 800406e:	2001      	movs	r0, #1
 8004070:	f7fe fd78 	bl	8002b64 <send_answer_to_CDC>
			return;
 8004074:	e235      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 8004076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800407a:	4985      	ldr	r1, [pc, #532]	; (8004290 <Parsing_USB_command+0x660>)
 800407c:	4618      	mov	r0, r3
 800407e:	f7fc f87f 	bl	8000180 <strcmp>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d118      	bne.n	80040ba <Parsing_USB_command+0x48a>
	{
		if(cmd_SWEEP_RATE(atof(decoded_string_2)))
 8004088:	1d3b      	adds	r3, r7, #4
 800408a:	4618      	mov	r0, r3
 800408c:	f00b f92c 	bl	800f2e8 <atof>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	f7fc fd38 	bl	8000b0c <__aeabi_d2f>
 800409c:	4603      	mov	r3, r0
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe ff92 	bl	8002fc8 <cmd_SWEEP_RATE>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <Parsing_USB_command+0x482>
		{
			send_answer_to_CDC(OK_TYPE_2);
 80040aa:	2003      	movs	r0, #3
 80040ac:	f7fe fd5a 	bl	8002b64 <send_answer_to_CDC>
			return;
 80040b0:	e217      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 80040b2:	2000      	movs	r0, #0
 80040b4:	f7fe fd56 	bl	8002b64 <send_answer_to_CDC>
			return;
 80040b8:	e213      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
	}

	// ==== SHOW command ====
	if(!(strcmp(decoded_string_1,"SHOW")))
 80040ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040be:	4975      	ldr	r1, [pc, #468]	; (8004294 <Parsing_USB_command+0x664>)
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fc f85d 	bl	8000180 <strcmp>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f040 81cc 	bne.w	8004466 <Parsing_USB_command+0x836>
	{
	if(!(strcmp(decoded_string_2,"INFO"))){
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	4971      	ldr	r1, [pc, #452]	; (8004298 <Parsing_USB_command+0x668>)
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc f854 	bl	8000180 <strcmp>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f040 81bf 	bne.w	800445e <Parsing_USB_command+0x82e>
		sprintf((char *)large_string_buffer,"\n\rDAC 0xFFFFF voltage calibration constant: %1.6E\n\r",cal_DAC_up_voltage);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80040e0:	4b6e      	ldr	r3, [pc, #440]	; (800429c <Parsing_USB_command+0x66c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fc f9c1 	bl	800046c <__aeabi_f2d>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	496c      	ldr	r1, [pc, #432]	; (80042a0 <Parsing_USB_command+0x670>)
 80040f0:	486c      	ldr	r0, [pc, #432]	; (80042a4 <Parsing_USB_command+0x674>)
 80040f2:	f00b fd9d 	bl	800fc30 <siprintf>
 80040f6:	e004      	b.n	8004102 <Parsing_USB_command+0x4d2>
 80040f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040fc:	3301      	adds	r3, #1
 80040fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004102:	4868      	ldr	r0, [pc, #416]	; (80042a4 <Parsing_USB_command+0x674>)
 8004104:	f7fc f846 	bl	8000194 <strlen>
 8004108:	4603      	mov	r3, r0
 800410a:	b29b      	uxth	r3, r3
 800410c:	4619      	mov	r1, r3
 800410e:	4865      	ldr	r0, [pc, #404]	; (80042a4 <Parsing_USB_command+0x674>)
 8004110:	f00a fc78 	bl	800ea04 <CDC_Transmit_FS>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <Parsing_USB_command+0x4f2>
 800411a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800411e:	2bff      	cmp	r3, #255	; 0xff
 8004120:	d1ea      	bne.n	80040f8 <Parsing_USB_command+0x4c8>
		sprintf((char *)large_string_buffer,"DAC 0x00000 voltage calibration constant: %1.6E\n\r",cal_DAC_down_voltage);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004122:	4b61      	ldr	r3, [pc, #388]	; (80042a8 <Parsing_USB_command+0x678>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fc f9a0 	bl	800046c <__aeabi_f2d>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	495e      	ldr	r1, [pc, #376]	; (80042ac <Parsing_USB_command+0x67c>)
 8004132:	485c      	ldr	r0, [pc, #368]	; (80042a4 <Parsing_USB_command+0x674>)
 8004134:	f00b fd7c 	bl	800fc30 <siprintf>
 8004138:	e004      	b.n	8004144 <Parsing_USB_command+0x514>
 800413a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800413e:	3301      	adds	r3, #1
 8004140:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004144:	4857      	ldr	r0, [pc, #348]	; (80042a4 <Parsing_USB_command+0x674>)
 8004146:	f7fc f825 	bl	8000194 <strlen>
 800414a:	4603      	mov	r3, r0
 800414c:	b29b      	uxth	r3, r3
 800414e:	4619      	mov	r1, r3
 8004150:	4854      	ldr	r0, [pc, #336]	; (80042a4 <Parsing_USB_command+0x674>)
 8004152:	f00a fc57 	bl	800ea04 <CDC_Transmit_FS>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <Parsing_USB_command+0x534>
 800415c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004160:	2bff      	cmp	r3, #255	; 0xff
 8004162:	d1ea      	bne.n	800413a <Parsing_USB_command+0x50a>
		sprintf((char *)large_string_buffer,"Linearity correction A: %1.6E\n\r",corr_coeff_1);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004164:	4b52      	ldr	r3, [pc, #328]	; (80042b0 <Parsing_USB_command+0x680>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7fc f97f 	bl	800046c <__aeabi_f2d>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4950      	ldr	r1, [pc, #320]	; (80042b4 <Parsing_USB_command+0x684>)
 8004174:	484b      	ldr	r0, [pc, #300]	; (80042a4 <Parsing_USB_command+0x674>)
 8004176:	f00b fd5b 	bl	800fc30 <siprintf>
 800417a:	e004      	b.n	8004186 <Parsing_USB_command+0x556>
 800417c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004180:	3301      	adds	r3, #1
 8004182:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004186:	4847      	ldr	r0, [pc, #284]	; (80042a4 <Parsing_USB_command+0x674>)
 8004188:	f7fc f804 	bl	8000194 <strlen>
 800418c:	4603      	mov	r3, r0
 800418e:	b29b      	uxth	r3, r3
 8004190:	4619      	mov	r1, r3
 8004192:	4844      	ldr	r0, [pc, #272]	; (80042a4 <Parsing_USB_command+0x674>)
 8004194:	f00a fc36 	bl	800ea04 <CDC_Transmit_FS>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <Parsing_USB_command+0x576>
 800419e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041a2:	2bff      	cmp	r3, #255	; 0xff
 80041a4:	d1ea      	bne.n	800417c <Parsing_USB_command+0x54c>
		sprintf((char *)large_string_buffer,"Linearity correction B: %1.6E\n\r",corr_coeff_2);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80041a6:	4b44      	ldr	r3, [pc, #272]	; (80042b8 <Parsing_USB_command+0x688>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc f95e 	bl	800046c <__aeabi_f2d>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4941      	ldr	r1, [pc, #260]	; (80042bc <Parsing_USB_command+0x68c>)
 80041b6:	483b      	ldr	r0, [pc, #236]	; (80042a4 <Parsing_USB_command+0x674>)
 80041b8:	f00b fd3a 	bl	800fc30 <siprintf>
 80041bc:	e004      	b.n	80041c8 <Parsing_USB_command+0x598>
 80041be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041c2:	3301      	adds	r3, #1
 80041c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80041c8:	4836      	ldr	r0, [pc, #216]	; (80042a4 <Parsing_USB_command+0x674>)
 80041ca:	f7fb ffe3 	bl	8000194 <strlen>
 80041ce:	4603      	mov	r3, r0
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	4619      	mov	r1, r3
 80041d4:	4833      	ldr	r0, [pc, #204]	; (80042a4 <Parsing_USB_command+0x674>)
 80041d6:	f00a fc15 	bl	800ea04 <CDC_Transmit_FS>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <Parsing_USB_command+0x5b8>
 80041e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041e4:	2bff      	cmp	r3, #255	; 0xff
 80041e6:	d1ea      	bne.n	80041be <Parsing_USB_command+0x58e>
		sprintf((char *)large_string_buffer,"Linearity correction C: %1.6E\n\r",corr_coeff_3);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80041e8:	4b35      	ldr	r3, [pc, #212]	; (80042c0 <Parsing_USB_command+0x690>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fc f93d 	bl	800046c <__aeabi_f2d>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4933      	ldr	r1, [pc, #204]	; (80042c4 <Parsing_USB_command+0x694>)
 80041f8:	482a      	ldr	r0, [pc, #168]	; (80042a4 <Parsing_USB_command+0x674>)
 80041fa:	f00b fd19 	bl	800fc30 <siprintf>
 80041fe:	e004      	b.n	800420a <Parsing_USB_command+0x5da>
 8004200:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004204:	3301      	adds	r3, #1
 8004206:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800420a:	4826      	ldr	r0, [pc, #152]	; (80042a4 <Parsing_USB_command+0x674>)
 800420c:	f7fb ffc2 	bl	8000194 <strlen>
 8004210:	4603      	mov	r3, r0
 8004212:	b29b      	uxth	r3, r3
 8004214:	4619      	mov	r1, r3
 8004216:	4823      	ldr	r0, [pc, #140]	; (80042a4 <Parsing_USB_command+0x674>)
 8004218:	f00a fbf4 	bl	800ea04 <CDC_Transmit_FS>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <Parsing_USB_command+0x5fa>
 8004222:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004226:	2bff      	cmp	r3, #255	; 0xff
 8004228:	d1ea      	bne.n	8004200 <Parsing_USB_command+0x5d0>
		sprintf((char *)large_string_buffer,"LT5400 gain X2 correction: %1.6E\n\r",gain_x2_coeff);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 800422a:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <Parsing_USB_command+0x698>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7fc f91c 	bl	800046c <__aeabi_f2d>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4924      	ldr	r1, [pc, #144]	; (80042cc <Parsing_USB_command+0x69c>)
 800423a:	481a      	ldr	r0, [pc, #104]	; (80042a4 <Parsing_USB_command+0x674>)
 800423c:	f00b fcf8 	bl	800fc30 <siprintf>
 8004240:	e004      	b.n	800424c <Parsing_USB_command+0x61c>
 8004242:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004246:	3301      	adds	r3, #1
 8004248:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800424c:	4815      	ldr	r0, [pc, #84]	; (80042a4 <Parsing_USB_command+0x674>)
 800424e:	f7fb ffa1 	bl	8000194 <strlen>
 8004252:	4603      	mov	r3, r0
 8004254:	b29b      	uxth	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	4812      	ldr	r0, [pc, #72]	; (80042a4 <Parsing_USB_command+0x674>)
 800425a:	f00a fbd3 	bl	800ea04 <CDC_Transmit_FS>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <Parsing_USB_command+0x63c>
 8004264:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004268:	2bff      	cmp	r3, #255	; 0xff
 800426a:	d1ea      	bne.n	8004242 <Parsing_USB_command+0x612>
		sprintf((char *)large_string_buffer,"LT5400 gain X4 correction: %1.6E\n\r\n\r",gain_x4_coeff);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 800426c:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <Parsing_USB_command+0x6a0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7fc f8fb 	bl	800046c <__aeabi_f2d>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4916      	ldr	r1, [pc, #88]	; (80042d4 <Parsing_USB_command+0x6a4>)
 800427c:	4809      	ldr	r0, [pc, #36]	; (80042a4 <Parsing_USB_command+0x674>)
 800427e:	f00b fcd7 	bl	800fc30 <siprintf>
 8004282:	e02e      	b.n	80042e2 <Parsing_USB_command+0x6b2>
 8004284:	080138c8 	.word	0x080138c8
 8004288:	080138d4 	.word	0x080138d4
 800428c:	080138e0 	.word	0x080138e0
 8004290:	080138f0 	.word	0x080138f0
 8004294:	080138fc 	.word	0x080138fc
 8004298:	08013904 	.word	0x08013904
 800429c:	20000d20 	.word	0x20000d20
 80042a0:	0801390c 	.word	0x0801390c
 80042a4:	20000c98 	.word	0x20000c98
 80042a8:	20000d24 	.word	0x20000d24
 80042ac:	08013940 	.word	0x08013940
 80042b0:	20000b2c 	.word	0x20000b2c
 80042b4:	08013974 	.word	0x08013974
 80042b8:	20000b30 	.word	0x20000b30
 80042bc:	08013994 	.word	0x08013994
 80042c0:	20000b34 	.word	0x20000b34
 80042c4:	080139b4 	.word	0x080139b4
 80042c8:	20000b38 	.word	0x20000b38
 80042cc:	080139d4 	.word	0x080139d4
 80042d0:	20000b3c 	.word	0x20000b3c
 80042d4:	080139f8 	.word	0x080139f8
 80042d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80042dc:	3301      	adds	r3, #1
 80042de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80042e2:	4881      	ldr	r0, [pc, #516]	; (80044e8 <Parsing_USB_command+0x8b8>)
 80042e4:	f7fb ff56 	bl	8000194 <strlen>
 80042e8:	4603      	mov	r3, r0
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	4619      	mov	r1, r3
 80042ee:	487e      	ldr	r0, [pc, #504]	; (80044e8 <Parsing_USB_command+0x8b8>)
 80042f0:	f00a fb88 	bl	800ea04 <CDC_Transmit_FS>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <Parsing_USB_command+0x6d2>
 80042fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80042fe:	2bff      	cmp	r3, #255	; 0xff
 8004300:	d1ea      	bne.n	80042d8 <Parsing_USB_command+0x6a8>
		sprintf((char *)large_string_buffer,"DAC code: 0x%x\n\r",(unsigned int)DAC_code);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004302:	4b7a      	ldr	r3, [pc, #488]	; (80044ec <Parsing_USB_command+0x8bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	4979      	ldr	r1, [pc, #484]	; (80044f0 <Parsing_USB_command+0x8c0>)
 800430a:	4877      	ldr	r0, [pc, #476]	; (80044e8 <Parsing_USB_command+0x8b8>)
 800430c:	f00b fc90 	bl	800fc30 <siprintf>
 8004310:	e004      	b.n	800431c <Parsing_USB_command+0x6ec>
 8004312:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004316:	3301      	adds	r3, #1
 8004318:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800431c:	4872      	ldr	r0, [pc, #456]	; (80044e8 <Parsing_USB_command+0x8b8>)
 800431e:	f7fb ff39 	bl	8000194 <strlen>
 8004322:	4603      	mov	r3, r0
 8004324:	b29b      	uxth	r3, r3
 8004326:	4619      	mov	r1, r3
 8004328:	486f      	ldr	r0, [pc, #444]	; (80044e8 <Parsing_USB_command+0x8b8>)
 800432a:	f00a fb6b 	bl	800ea04 <CDC_Transmit_FS>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <Parsing_USB_command+0x70c>
 8004334:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004338:	2bff      	cmp	r3, #255	; 0xff
 800433a:	d1ea      	bne.n	8004312 <Parsing_USB_command+0x6e2>
		sprintf((char *)large_string_buffer,"DDS FTW: 0x%x\n\r",(unsigned int)DDS_FTW);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 800433c:	4b6d      	ldr	r3, [pc, #436]	; (80044f4 <Parsing_USB_command+0x8c4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f7fc ff07 	bl	8001154 <__aeabi_f2uiz>
 8004346:	4603      	mov	r3, r0
 8004348:	461a      	mov	r2, r3
 800434a:	496b      	ldr	r1, [pc, #428]	; (80044f8 <Parsing_USB_command+0x8c8>)
 800434c:	4866      	ldr	r0, [pc, #408]	; (80044e8 <Parsing_USB_command+0x8b8>)
 800434e:	f00b fc6f 	bl	800fc30 <siprintf>
 8004352:	e004      	b.n	800435e <Parsing_USB_command+0x72e>
 8004354:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004358:	3301      	adds	r3, #1
 800435a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800435e:	4862      	ldr	r0, [pc, #392]	; (80044e8 <Parsing_USB_command+0x8b8>)
 8004360:	f7fb ff18 	bl	8000194 <strlen>
 8004364:	4603      	mov	r3, r0
 8004366:	b29b      	uxth	r3, r3
 8004368:	4619      	mov	r1, r3
 800436a:	485f      	ldr	r0, [pc, #380]	; (80044e8 <Parsing_USB_command+0x8b8>)
 800436c:	f00a fb4a 	bl	800ea04 <CDC_Transmit_FS>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <Parsing_USB_command+0x74e>
 8004376:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800437a:	2bff      	cmp	r3, #255	; 0xff
 800437c:	d1ea      	bne.n	8004354 <Parsing_USB_command+0x724>
		sprintf((char *)large_string_buffer,"CPLD control word: 0x%x\n\r",CPLD_WORD);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 800437e:	4b5f      	ldr	r3, [pc, #380]	; (80044fc <Parsing_USB_command+0x8cc>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	495e      	ldr	r1, [pc, #376]	; (8004500 <Parsing_USB_command+0x8d0>)
 8004386:	4858      	ldr	r0, [pc, #352]	; (80044e8 <Parsing_USB_command+0x8b8>)
 8004388:	f00b fc52 	bl	800fc30 <siprintf>
 800438c:	e004      	b.n	8004398 <Parsing_USB_command+0x768>
 800438e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004392:	3301      	adds	r3, #1
 8004394:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004398:	4853      	ldr	r0, [pc, #332]	; (80044e8 <Parsing_USB_command+0x8b8>)
 800439a:	f7fb fefb 	bl	8000194 <strlen>
 800439e:	4603      	mov	r3, r0
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	4619      	mov	r1, r3
 80043a4:	4850      	ldr	r0, [pc, #320]	; (80044e8 <Parsing_USB_command+0x8b8>)
 80043a6:	f00a fb2d 	bl	800ea04 <CDC_Transmit_FS>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <Parsing_USB_command+0x788>
 80043b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043b4:	2bff      	cmp	r3, #255	; 0xff
 80043b6:	d1ea      	bne.n	800438e <Parsing_USB_command+0x75e>
		sprintf((char *)large_string_buffer,"Output mode: 0x%x\n\r",Current_output_status);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80043b8:	4b52      	ldr	r3, [pc, #328]	; (8004504 <Parsing_USB_command+0x8d4>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	4952      	ldr	r1, [pc, #328]	; (8004508 <Parsing_USB_command+0x8d8>)
 80043c0:	4849      	ldr	r0, [pc, #292]	; (80044e8 <Parsing_USB_command+0x8b8>)
 80043c2:	f00b fc35 	bl	800fc30 <siprintf>
 80043c6:	e004      	b.n	80043d2 <Parsing_USB_command+0x7a2>
 80043c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043cc:	3301      	adds	r3, #1
 80043ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80043d2:	4845      	ldr	r0, [pc, #276]	; (80044e8 <Parsing_USB_command+0x8b8>)
 80043d4:	f7fb fede 	bl	8000194 <strlen>
 80043d8:	4603      	mov	r3, r0
 80043da:	b29b      	uxth	r3, r3
 80043dc:	4619      	mov	r1, r3
 80043de:	4842      	ldr	r0, [pc, #264]	; (80044e8 <Parsing_USB_command+0x8b8>)
 80043e0:	f00a fb10 	bl	800ea04 <CDC_Transmit_FS>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <Parsing_USB_command+0x7c2>
 80043ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043ee:	2bff      	cmp	r3, #255	; 0xff
 80043f0:	d1ea      	bne.n	80043c8 <Parsing_USB_command+0x798>
		sprintf((char *)large_string_buffer,"Temperature: %2.3f°C\n\r",TMP117_get_Temperature(hi2c1)*0.0078125);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80043f2:	4c46      	ldr	r4, [pc, #280]	; (800450c <Parsing_USB_command+0x8dc>)
 80043f4:	4668      	mov	r0, sp
 80043f6:	f104 0310 	add.w	r3, r4, #16
 80043fa:	2244      	movs	r2, #68	; 0x44
 80043fc:	4619      	mov	r1, r3
 80043fe:	f00a ffa1 	bl	800f344 <memcpy>
 8004402:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004406:	f000 fc81 	bl	8004d0c <TMP117_get_Temperature>
 800440a:	4603      	mov	r3, r0
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc f81b 	bl	8000448 <__aeabi_i2d>
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800441a:	f7fc f87f 	bl	800051c <__aeabi_dmul>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	493b      	ldr	r1, [pc, #236]	; (8004510 <Parsing_USB_command+0x8e0>)
 8004424:	4830      	ldr	r0, [pc, #192]	; (80044e8 <Parsing_USB_command+0x8b8>)
 8004426:	f00b fc03 	bl	800fc30 <siprintf>
 800442a:	e004      	b.n	8004436 <Parsing_USB_command+0x806>
 800442c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004430:	3301      	adds	r3, #1
 8004432:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004436:	482c      	ldr	r0, [pc, #176]	; (80044e8 <Parsing_USB_command+0x8b8>)
 8004438:	f7fb feac 	bl	8000194 <strlen>
 800443c:	4603      	mov	r3, r0
 800443e:	b29b      	uxth	r3, r3
 8004440:	4619      	mov	r1, r3
 8004442:	4829      	ldr	r0, [pc, #164]	; (80044e8 <Parsing_USB_command+0x8b8>)
 8004444:	f00a fade 	bl	800ea04 <CDC_Transmit_FS>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <Parsing_USB_command+0x826>
 800444e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004452:	2bff      	cmp	r3, #255	; 0xff
 8004454:	d1ea      	bne.n	800442c <Parsing_USB_command+0x7fc>
		send_answer_to_CDC(OK_TYPE_2);
 8004456:	2003      	movs	r0, #3
 8004458:	f7fe fb84 	bl	8002b64 <send_answer_to_CDC>
		return;
 800445c:	e041      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 800445e:	2000      	movs	r0, #0
 8004460:	f7fe fb80 	bl	8002b64 <send_answer_to_CDC>
			return;
 8004464:	e03d      	b.n	80044e2 <Parsing_USB_command+0x8b2>




	// ==== SWEEP_DIRECTION command ====
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 8004466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800446a:	492a      	ldr	r1, [pc, #168]	; (8004514 <Parsing_USB_command+0x8e4>)
 800446c:	4618      	mov	r0, r3
 800446e:	f7fb fe87 	bl	8000180 <strcmp>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d130      	bne.n	80044da <Parsing_USB_command+0x8aa>
	{
		if(!(strcmp(decoded_string_2,"UP"))){
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	4927      	ldr	r1, [pc, #156]	; (8004518 <Parsing_USB_command+0x8e8>)
 800447c:	4618      	mov	r0, r3
 800447e:	f7fb fe7f 	bl	8000180 <strcmp>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <Parsing_USB_command+0x866>
			DAC_code_direction=DIRECTION_UP_STATE;
 8004488:	4b24      	ldr	r3, [pc, #144]	; (800451c <Parsing_USB_command+0x8ec>)
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
			send_answer_to_CDC(OK_TYPE_2);
 800448e:	2003      	movs	r0, #3
 8004490:	f7fe fb68 	bl	8002b64 <send_answer_to_CDC>
			return;
 8004494:	e025      	b.n	80044e2 <Parsing_USB_command+0x8b2>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8004496:	1d3b      	adds	r3, r7, #4
 8004498:	4921      	ldr	r1, [pc, #132]	; (8004520 <Parsing_USB_command+0x8f0>)
 800449a:	4618      	mov	r0, r3
 800449c:	f7fb fe70 	bl	8000180 <strcmp>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <Parsing_USB_command+0x884>
				DAC_code_direction=DIRECTION_DOWN_STATE;
 80044a6:	4b1d      	ldr	r3, [pc, #116]	; (800451c <Parsing_USB_command+0x8ec>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
				send_answer_to_CDC(OK_TYPE_2);
 80044ac:	2003      	movs	r0, #3
 80044ae:	f7fe fb59 	bl	8002b64 <send_answer_to_CDC>
				return;
 80044b2:	e016      	b.n	80044e2 <Parsing_USB_command+0x8b2>
			}
			else
			{
				if(!(strcmp(decoded_string_2,"CYCLE"))){
 80044b4:	1d3b      	adds	r3, r7, #4
 80044b6:	491b      	ldr	r1, [pc, #108]	; (8004524 <Parsing_USB_command+0x8f4>)
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fb fe61 	bl	8000180 <strcmp>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d106      	bne.n	80044d2 <Parsing_USB_command+0x8a2>
					DAC_code_direction=DIRECTION_CYCLE_STATE;
 80044c4:	4b15      	ldr	r3, [pc, #84]	; (800451c <Parsing_USB_command+0x8ec>)
 80044c6:	2202      	movs	r2, #2
 80044c8:	701a      	strb	r2, [r3, #0]
					send_answer_to_CDC(OK_TYPE_2);
 80044ca:	2003      	movs	r0, #3
 80044cc:	f7fe fb4a 	bl	8002b64 <send_answer_to_CDC>
					return;
 80044d0:	e007      	b.n	80044e2 <Parsing_USB_command+0x8b2>
				}
				else
				{
					send_answer_to_CDC(ERROR_TYPE_1);
 80044d2:	2000      	movs	r0, #0
 80044d4:	f7fe fb46 	bl	8002b64 <send_answer_to_CDC>
					return;
 80044d8:	e003      	b.n	80044e2 <Parsing_USB_command+0x8b2>
				}
			}
		}
	}

	send_answer_to_CDC(ERROR_TYPE_1);
 80044da:	2000      	movs	r0, #0
 80044dc:	f7fe fb42 	bl	8002b64 <send_answer_to_CDC>
	return;
 80044e0:	bf00      	nop
}
 80044e2:	3754      	adds	r7, #84	; 0x54
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd90      	pop	{r4, r7, pc}
 80044e8:	20000c98 	.word	0x20000c98
 80044ec:	20000d2c 	.word	0x20000d2c
 80044f0:	08013a20 	.word	0x08013a20
 80044f4:	20000d10 	.word	0x20000d10
 80044f8:	08013a34 	.word	0x08013a34
 80044fc:	20000d0e 	.word	0x20000d0e
 8004500:	08013a44 	.word	0x08013a44
 8004504:	20000d28 	.word	0x20000d28
 8004508:	08013a60 	.word	0x08013a60
 800450c:	20000c44 	.word	0x20000c44
 8004510:	08013a74 	.word	0x08013a74
 8004514:	08013a8c 	.word	0x08013a8c
 8004518:	08013a9c 	.word	0x08013a9c
 800451c:	20000d30 	.word	0x20000d30
 8004520:	0801385c 	.word	0x0801385c
 8004524:	08013aa0 	.word	0x08013aa0

08004528 <Write_to_circ_buffer>:

void Write_to_circ_buffer(uint8_t Buf)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 8004532:	1dfb      	adds	r3, r7, #7
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff f915 	bl	8003764 <USB_rx_command_buffer_push_refd>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <Write_to_circ_buffer+0x24>
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <Write_to_circ_buffer+0x2c>)
 8004542:	2200      	movs	r2, #0
 8004544:	809a      	strh	r2, [r3, #4]
 8004546:	4b03      	ldr	r3, [pc, #12]	; (8004554 <Write_to_circ_buffer+0x2c>)
 8004548:	2200      	movs	r2, #0
 800454a:	80da      	strh	r2, [r3, #6]
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	200007a4 	.word	0x200007a4

08004558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800455c:	b672      	cpsid	i
}
 800455e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004560:	e7fe      	b.n	8004560 <Error_Handler+0x8>
	...

08004564 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004568:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <MX_SPI1_Init+0x60>)
 800456a:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <MX_SPI1_Init+0x64>)
 800456c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800456e:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <MX_SPI1_Init+0x60>)
 8004570:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004576:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <MX_SPI1_Init+0x60>)
 8004578:	2200      	movs	r2, #0
 800457a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800457c:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <MX_SPI1_Init+0x60>)
 800457e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004582:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <MX_SPI1_Init+0x60>)
 8004586:	2200      	movs	r2, #0
 8004588:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <MX_SPI1_Init+0x60>)
 800458c:	2201      	movs	r2, #1
 800458e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <MX_SPI1_Init+0x60>)
 8004592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004596:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <MX_SPI1_Init+0x60>)
 800459a:	2218      	movs	r2, #24
 800459c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <MX_SPI1_Init+0x60>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a4:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <MX_SPI1_Init+0x60>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <MX_SPI1_Init+0x60>)
 80045ac:	220a      	movs	r2, #10
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80045b0:	4804      	ldr	r0, [pc, #16]	; (80045c4 <MX_SPI1_Init+0x60>)
 80045b2:	f004 fd15 	bl	8008fe0 <HAL_SPI_Init>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 80045bc:	f7ff ffcc 	bl	8004558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80045c0:	bf00      	nop
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000d38 	.word	0x20000d38
 80045c8:	40013000 	.word	0x40013000

080045cc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80045d0:	4b16      	ldr	r3, [pc, #88]	; (800462c <MX_SPI2_Init+0x60>)
 80045d2:	4a17      	ldr	r2, [pc, #92]	; (8004630 <MX_SPI2_Init+0x64>)
 80045d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <MX_SPI2_Init+0x60>)
 80045d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <MX_SPI2_Init+0x60>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <MX_SPI2_Init+0x60>)
 80045e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <MX_SPI2_Init+0x60>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <MX_SPI2_Init+0x60>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <MX_SPI2_Init+0x60>)
 80045fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <MX_SPI2_Init+0x60>)
 8004602:	2218      	movs	r2, #24
 8004604:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <MX_SPI2_Init+0x60>)
 8004608:	2200      	movs	r2, #0
 800460a:	621a      	str	r2, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800460c:	4b07      	ldr	r3, [pc, #28]	; (800462c <MX_SPI2_Init+0x60>)
 800460e:	2200      	movs	r2, #0
 8004610:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <MX_SPI2_Init+0x60>)
 8004614:	220a      	movs	r2, #10
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004618:	4804      	ldr	r0, [pc, #16]	; (800462c <MX_SPI2_Init+0x60>)
 800461a:	f004 fce1 	bl	8008fe0 <HAL_SPI_Init>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8004624:	f7ff ff98 	bl	8004558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004628:	bf00      	nop
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000d90 	.word	0x20000d90
 8004630:	40003800 	.word	0x40003800

08004634 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08c      	sub	sp, #48	; 0x30
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463c:	f107 031c 	add.w	r3, r7, #28
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a32      	ldr	r2, [pc, #200]	; (800471c <HAL_SPI_MspInit+0xe8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d130      	bne.n	80046b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004656:	4b32      	ldr	r3, [pc, #200]	; (8004720 <HAL_SPI_MspInit+0xec>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	4a31      	ldr	r2, [pc, #196]	; (8004720 <HAL_SPI_MspInit+0xec>)
 800465c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004660:	6213      	str	r3, [r2, #32]
 8004662:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <HAL_SPI_MspInit+0xec>)
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466e:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <HAL_SPI_MspInit+0xec>)
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	4a2b      	ldr	r2, [pc, #172]	; (8004720 <HAL_SPI_MspInit+0xec>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	61d3      	str	r3, [r2, #28]
 800467a:	4b29      	ldr	r3, [pc, #164]	; (8004720 <HAL_SPI_MspInit+0xec>)
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004686:	23e0      	movs	r3, #224	; 0xe0
 8004688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468a:	2302      	movs	r3, #2
 800468c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2300      	movs	r3, #0
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004692:	2303      	movs	r3, #3
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004696:	2305      	movs	r3, #5
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469a:	f107 031c 	add.w	r3, r7, #28
 800469e:	4619      	mov	r1, r3
 80046a0:	4820      	ldr	r0, [pc, #128]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046a2:	f001 f933 	bl	800590c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2101      	movs	r1, #1
 80046aa:	2023      	movs	r0, #35	; 0x23
 80046ac:	f000 fd59 	bl	8005162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80046b0:	2023      	movs	r0, #35	; 0x23
 80046b2:	f000 fd72 	bl	800519a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80046b6:	e02d      	b.n	8004714 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1a      	ldr	r2, [pc, #104]	; (8004728 <HAL_SPI_MspInit+0xf4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d128      	bne.n	8004714 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046c2:	4b17      	ldr	r3, [pc, #92]	; (8004720 <HAL_SPI_MspInit+0xec>)
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	4a16      	ldr	r2, [pc, #88]	; (8004720 <HAL_SPI_MspInit+0xec>)
 80046c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046cc:	6253      	str	r3, [r2, #36]	; 0x24
 80046ce:	4b14      	ldr	r3, [pc, #80]	; (8004720 <HAL_SPI_MspInit+0xec>)
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046da:	4b11      	ldr	r3, [pc, #68]	; (8004720 <HAL_SPI_MspInit+0xec>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4a10      	ldr	r2, [pc, #64]	; (8004720 <HAL_SPI_MspInit+0xec>)
 80046e0:	f043 0302 	orr.w	r3, r3, #2
 80046e4:	61d3      	str	r3, [r2, #28]
 80046e6:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <HAL_SPI_MspInit+0xec>)
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80046f2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80046f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f8:	2302      	movs	r3, #2
 80046fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004700:	2303      	movs	r3, #3
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004704:	2305      	movs	r3, #5
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004708:	f107 031c 	add.w	r3, r7, #28
 800470c:	4619      	mov	r1, r3
 800470e:	4807      	ldr	r0, [pc, #28]	; (800472c <HAL_SPI_MspInit+0xf8>)
 8004710:	f001 f8fc 	bl	800590c <HAL_GPIO_Init>
}
 8004714:	bf00      	nop
 8004716:	3730      	adds	r7, #48	; 0x30
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40013000 	.word	0x40013000
 8004720:	40023800 	.word	0x40023800
 8004724:	40020000 	.word	0x40020000
 8004728:	40003800 	.word	0x40003800
 800472c:	40020400 	.word	0x40020400

08004730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <HAL_MspInit+0xa0>)
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <HAL_MspInit+0xa0>)
 800473c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004740:	6253      	str	r3, [r2, #36]	; 0x24
 8004742:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <HAL_MspInit+0xa0>)
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_MspInit+0xa0>)
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	4a1f      	ldr	r2, [pc, #124]	; (80047d0 <HAL_MspInit+0xa0>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	6213      	str	r3, [r2, #32]
 800475a:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <HAL_MspInit+0xa0>)
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004766:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <HAL_MspInit+0xa0>)
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	4a19      	ldr	r2, [pc, #100]	; (80047d0 <HAL_MspInit+0xa0>)
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004770:	6253      	str	r3, [r2, #36]	; 0x24
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <HAL_MspInit+0xa0>)
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800477e:	2200      	movs	r2, #0
 8004780:	2101      	movs	r1, #1
 8004782:	f06f 000b 	mvn.w	r0, #11
 8004786:	f000 fcec 	bl	8005162 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800478a:	2200      	movs	r2, #0
 800478c:	2101      	movs	r1, #1
 800478e:	f06f 000a 	mvn.w	r0, #10
 8004792:	f000 fce6 	bl	8005162 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	2101      	movs	r1, #1
 800479a:	f06f 0009 	mvn.w	r0, #9
 800479e:	f000 fce0 	bl	8005162 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 80047a2:	2200      	movs	r2, #0
 80047a4:	2101      	movs	r1, #1
 80047a6:	f06f 0004 	mvn.w	r0, #4
 80047aa:	f000 fcda 	bl	8005162 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80047ae:	2200      	movs	r2, #0
 80047b0:	2101      	movs	r1, #1
 80047b2:	f06f 0003 	mvn.w	r0, #3
 80047b6:	f000 fcd4 	bl	8005162 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	2101      	movs	r1, #1
 80047be:	f06f 0001 	mvn.w	r0, #1
 80047c2:	f000 fcce 	bl	8005162 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800

080047d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047d8:	e7fe      	b.n	80047d8 <NMI_Handler+0x4>

080047da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047da:	b480      	push	{r7}
 80047dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047de:	e7fe      	b.n	80047de <HardFault_Handler+0x4>

080047e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047e4:	e7fe      	b.n	80047e4 <MemManage_Handler+0x4>

080047e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047e6:	b480      	push	{r7}
 80047e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047ea:	e7fe      	b.n	80047ea <BusFault_Handler+0x4>

080047ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047f0:	e7fe      	b.n	80047f0 <UsageFault_Handler+0x4>

080047f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047f2:	b480      	push	{r7}
 80047f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr

0800480a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800480a:	b480      	push	{r7}
 800480c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800480e:	bf00      	nop
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800481a:	f000 fb8d 	bl	8004f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004828:	4802      	ldr	r0, [pc, #8]	; (8004834 <USB_LP_IRQHandler+0x10>)
 800482a:	f002 facf 	bl	8006dcc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	200014f0 	.word	0x200014f0

08004838 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encode_Push_Pin);
 800483c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004840:	f001 fa14 	bl	8005c6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004844:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004848:	f001 fa10 	bl	8005c6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800484c:	bf00      	nop
 800484e:	bd80      	pop	{r7, pc}

08004850 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004854:	4802      	ldr	r0, [pc, #8]	; (8004860 <TIM2_IRQHandler+0x10>)
 8004856:	f005 fbfd 	bl	800a054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800485a:	bf00      	nop
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000dec 	.word	0x20000dec

08004864 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004868:	4802      	ldr	r0, [pc, #8]	; (8004874 <TIM3_IRQHandler+0x10>)
 800486a:	f005 fbf3 	bl	800a054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000e2c 	.word	0x20000e2c

08004878 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800487c:	4802      	ldr	r0, [pc, #8]	; (8004888 <SPI1_IRQHandler+0x10>)
 800487e:	f005 f81b 	bl	80098b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000d38 	.word	0x20000d38

0800488c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Start_button_Pin);
 8004890:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004894:	f001 f9ea 	bl	8005c6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004898:	bf00      	nop
 800489a:	bd80      	pop	{r7, pc}

0800489c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
	return 1;
 80048a0:	2301      	movs	r3, #1
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr

080048aa <_kill>:

int _kill(int pid, int sig)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80048b4:	f00a fd1c 	bl	800f2f0 <__errno>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2216      	movs	r2, #22
 80048bc:	601a      	str	r2, [r3, #0]
	return -1;
 80048be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <_exit>:

void _exit (int status)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80048d2:	f04f 31ff 	mov.w	r1, #4294967295
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ffe7 	bl	80048aa <_kill>
	while (1) {}		/* Make sure we hang here */
 80048dc:	e7fe      	b.n	80048dc <_exit+0x12>

080048de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e00a      	b.n	8004906 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80048f0:	f3af 8000 	nop.w
 80048f4:	4601      	mov	r1, r0
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	60ba      	str	r2, [r7, #8]
 80048fc:	b2ca      	uxtb	r2, r1
 80048fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	3301      	adds	r3, #1
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	dbf0      	blt.n	80048f0 <_read+0x12>
	}

return len;
 800490e:	687b      	ldr	r3, [r7, #4]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	e009      	b.n	800493e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	60ba      	str	r2, [r7, #8]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	3301      	adds	r3, #1
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	dbf1      	blt.n	800492a <_write+0x12>
	}
	return len;
 8004946:	687b      	ldr	r3, [r7, #4]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <_close>:

int _close(int file)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	return -1;
 8004958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr

08004966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004976:	605a      	str	r2, [r3, #4]
	return 0;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <_isatty>:

int _isatty(int file)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	return 1;
 800498c:	2301      	movs	r3, #1
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
	return 0;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <_sbrk+0x5c>)
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <_sbrk+0x60>)
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <_sbrk+0x64>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <_sbrk+0x64>)
 80049ce:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <_sbrk+0x68>)
 80049d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <_sbrk+0x64>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4413      	add	r3, r2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d207      	bcs.n	80049f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049e0:	f00a fc86 	bl	800f2f0 <__errno>
 80049e4:	4603      	mov	r3, r0
 80049e6:	220c      	movs	r2, #12
 80049e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049ea:	f04f 33ff 	mov.w	r3, #4294967295
 80049ee:	e009      	b.n	8004a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049f0:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <_sbrk+0x64>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <_sbrk+0x64>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <_sbrk+0x64>)
 8004a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a02:	68fb      	ldr	r3, [r7, #12]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20004000 	.word	0x20004000
 8004a10:	00000c00 	.word	0x00000c00
 8004a14:	20000de8 	.word	0x20000de8
 8004a18:	20001a10 	.word	0x20001a10

08004a1c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a20:	bf00      	nop
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a2e:	f107 0308 	add.w	r3, r7, #8
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	605a      	str	r2, [r3, #4]
 8004a38:	609a      	str	r2, [r3, #8]
 8004a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a3c:	463b      	mov	r3, r7
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <MX_TIM2_Init+0x94>)
 8004a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 -1;
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <MX_TIM2_Init+0x94>)
 8004a4e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8004a52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a54:	4b19      	ldr	r3, [pc, #100]	; (8004abc <MX_TIM2_Init+0x94>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 8004a5a:	4b18      	ldr	r3, [pc, #96]	; (8004abc <MX_TIM2_Init+0x94>)
 8004a5c:	2231      	movs	r2, #49	; 0x31
 8004a5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a60:	4b16      	ldr	r3, [pc, #88]	; (8004abc <MX_TIM2_Init+0x94>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a66:	4b15      	ldr	r3, [pc, #84]	; (8004abc <MX_TIM2_Init+0x94>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a6c:	4813      	ldr	r0, [pc, #76]	; (8004abc <MX_TIM2_Init+0x94>)
 8004a6e:	f005 f957 	bl	8009d20 <HAL_TIM_Base_Init>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004a78:	f7ff fd6e 	bl	8004558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a82:	f107 0308 	add.w	r3, r7, #8
 8004a86:	4619      	mov	r1, r3
 8004a88:	480c      	ldr	r0, [pc, #48]	; (8004abc <MX_TIM2_Init+0x94>)
 8004a8a:	f005 fbbf 	bl	800a20c <HAL_TIM_ConfigClockSource>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004a94:	f7ff fd60 	bl	8004558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4805      	ldr	r0, [pc, #20]	; (8004abc <MX_TIM2_Init+0x94>)
 8004aa6:	f005 fdb5 	bl	800a614 <HAL_TIMEx_MasterConfigSynchronization>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004ab0:	f7ff fd52 	bl	8004558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ab4:	bf00      	nop
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20000dec 	.word	0x20000dec

08004ac0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ac6:	f107 0308 	add.w	r3, r7, #8
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	605a      	str	r2, [r3, #4]
 8004ad0:	609a      	str	r2, [r3, #8]
 8004ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ad4:	463b      	mov	r3, r7
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004adc:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <MX_TIM3_Init+0x94>)
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <MX_TIM3_Init+0x98>)
 8004ae0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 -1;
 8004ae2:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <MX_TIM3_Init+0x94>)
 8004ae4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8004ae8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aea:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <MX_TIM3_Init+0x94>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 -1;
 8004af0:	4b18      	ldr	r3, [pc, #96]	; (8004b54 <MX_TIM3_Init+0x94>)
 8004af2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004af6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004af8:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <MX_TIM3_Init+0x94>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004afe:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <MX_TIM3_Init+0x94>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b04:	4813      	ldr	r0, [pc, #76]	; (8004b54 <MX_TIM3_Init+0x94>)
 8004b06:	f005 f90b 	bl	8009d20 <HAL_TIM_Base_Init>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004b10:	f7ff fd22 	bl	8004558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b1a:	f107 0308 	add.w	r3, r7, #8
 8004b1e:	4619      	mov	r1, r3
 8004b20:	480c      	ldr	r0, [pc, #48]	; (8004b54 <MX_TIM3_Init+0x94>)
 8004b22:	f005 fb73 	bl	800a20c <HAL_TIM_ConfigClockSource>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004b2c:	f7ff fd14 	bl	8004558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b30:	2300      	movs	r3, #0
 8004b32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b38:	463b      	mov	r3, r7
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4805      	ldr	r0, [pc, #20]	; (8004b54 <MX_TIM3_Init+0x94>)
 8004b3e:	f005 fd69 	bl	800a614 <HAL_TIMEx_MasterConfigSynchronization>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004b48:	f7ff fd06 	bl	8004558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004b4c:	bf00      	nop
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000e2c 	.word	0x20000e2c
 8004b58:	40000400 	.word	0x40000400

08004b5c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08c      	sub	sp, #48	; 0x30
 8004b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004b62:	f107 030c 	add.w	r3, r7, #12
 8004b66:	2224      	movs	r2, #36	; 0x24
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f00a fbf8 	bl	800f360 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b70:	1d3b      	adds	r3, r7, #4
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004b78:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <MX_TIM4_Init+0xa0>)
 8004b7a:	4a21      	ldr	r2, [pc, #132]	; (8004c00 <MX_TIM4_Init+0xa4>)
 8004b7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004b7e:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <MX_TIM4_Init+0xa0>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <MX_TIM4_Init+0xa0>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004b8a:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <MX_TIM4_Init+0xa0>)
 8004b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <MX_TIM4_Init+0xa0>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b98:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <MX_TIM4_Init+0xa0>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004bc2:	f107 030c 	add.w	r3, r7, #12
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	480c      	ldr	r0, [pc, #48]	; (8004bfc <MX_TIM4_Init+0xa0>)
 8004bca:	f005 f93b 	bl	8009e44 <HAL_TIM_Encoder_Init>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004bd4:	f7ff fcc0 	bl	8004558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004be0:	1d3b      	adds	r3, r7, #4
 8004be2:	4619      	mov	r1, r3
 8004be4:	4805      	ldr	r0, [pc, #20]	; (8004bfc <MX_TIM4_Init+0xa0>)
 8004be6:	f005 fd15 	bl	800a614 <HAL_TIMEx_MasterConfigSynchronization>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004bf0:	f7ff fcb2 	bl	8004558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004bf4:	bf00      	nop
 8004bf6:	3730      	adds	r7, #48	; 0x30
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000e6c 	.word	0x20000e6c
 8004c00:	40000800 	.word	0x40000800

08004c04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d114      	bne.n	8004c40 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c16:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <HAL_TIM_Base_MspInit+0x78>)
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <HAL_TIM_Base_MspInit+0x78>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	6253      	str	r3, [r2, #36]	; 0x24
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <HAL_TIM_Base_MspInit+0x78>)
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2101      	movs	r1, #1
 8004c32:	201c      	movs	r0, #28
 8004c34:	f000 fa95 	bl	8005162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c38:	201c      	movs	r0, #28
 8004c3a:	f000 faae 	bl	800519a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004c3e:	e018      	b.n	8004c72 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a0e      	ldr	r2, [pc, #56]	; (8004c80 <HAL_TIM_Base_MspInit+0x7c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d113      	bne.n	8004c72 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <HAL_TIM_Base_MspInit+0x78>)
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	4a0b      	ldr	r2, [pc, #44]	; (8004c7c <HAL_TIM_Base_MspInit+0x78>)
 8004c50:	f043 0302 	orr.w	r3, r3, #2
 8004c54:	6253      	str	r3, [r2, #36]	; 0x24
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_TIM_Base_MspInit+0x78>)
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004c62:	2200      	movs	r2, #0
 8004c64:	2101      	movs	r1, #1
 8004c66:	201d      	movs	r0, #29
 8004c68:	f000 fa7b 	bl	8005162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c6c:	201d      	movs	r0, #29
 8004c6e:	f000 fa94 	bl	800519a <HAL_NVIC_EnableIRQ>
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40000400 	.word	0x40000400

08004c84 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	; 0x28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c8c:	f107 0314 	add.w	r3, r7, #20
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	609a      	str	r2, [r3, #8]
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d127      	bne.n	8004cf6 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ca6:	4b17      	ldr	r3, [pc, #92]	; (8004d04 <HAL_TIM_Encoder_MspInit+0x80>)
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <HAL_TIM_Encoder_MspInit+0x80>)
 8004cac:	f043 0304 	orr.w	r3, r3, #4
 8004cb0:	6253      	str	r3, [r2, #36]	; 0x24
 8004cb2:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <HAL_TIM_Encoder_MspInit+0x80>)
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cbe:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <HAL_TIM_Encoder_MspInit+0x80>)
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <HAL_TIM_Encoder_MspInit+0x80>)
 8004cc4:	f043 0302 	orr.w	r3, r3, #2
 8004cc8:	61d3      	str	r3, [r2, #28]
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <HAL_TIM_Encoder_MspInit+0x80>)
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cd6:	23c0      	movs	r3, #192	; 0xc0
 8004cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cea:	f107 0314 	add.w	r3, r7, #20
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4805      	ldr	r0, [pc, #20]	; (8004d08 <HAL_TIM_Encoder_MspInit+0x84>)
 8004cf2:	f000 fe0b 	bl	800590c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3728      	adds	r7, #40	; 0x28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40000800 	.word	0x40000800
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40020400 	.word	0x40020400

08004d0c <TMP117_get_Temperature>:
   @Description   Function gives to us ambient temperature
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  Float
 */
uint16_t TMP117_get_Temperature             (I2C_HandleTypeDef i2c)
{
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af02      	add	r7, sp, #8
 8004d14:	f107 0c10 	add.w	ip, r7, #16
 8004d18:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      int16_t tmpx=0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	80fb      	strh	r3, [r7, #6]
      buf[0]=TMP117_TemperatureRegister;
 8004d20:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <TMP117_get_Temperature+0x78>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]

//      buf[0]=TMP117_ConfigurationRegister;

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,1,100);
 8004d26:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <TMP117_get_Temperature+0x7c>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	b299      	uxth	r1, r3
 8004d2c:	2364      	movs	r3, #100	; 0x64
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	2301      	movs	r3, #1
 8004d32:	4a14      	ldr	r2, [pc, #80]	; (8004d84 <TMP117_get_Temperature+0x78>)
 8004d34:	f107 0010 	add.w	r0, r7, #16
 8004d38:	f001 f8f4 	bl	8005f24 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	f000 f917 	bl	8004f70 <HAL_Delay>
      HAL_I2C_Master_Receive(&i2c,TMP117_DeviceID,buf,2,1000);
 8004d42:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <TMP117_get_Temperature+0x7c>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	b299      	uxth	r1, r3
 8004d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	2302      	movs	r3, #2
 8004d50:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <TMP117_get_Temperature+0x78>)
 8004d52:	f107 0010 	add.w	r0, r7, #16
 8004d56:	f001 f9e3 	bl	8006120 <HAL_I2C_Master_Receive>
      tmpx=buf[0];
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <TMP117_get_Temperature+0x78>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	80fb      	strh	r3, [r7, #6]
      tmpx<<=8;
 8004d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	80fb      	strh	r3, [r7, #6]
      tmpx|=buf[1];
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <TMP117_get_Temperature+0x78>)
 8004d6a:	785b      	ldrb	r3, [r3, #1]
 8004d6c:	b21a      	sxth	r2, r3
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	80fb      	strh	r3, [r7, #6]

      return tmpx;
 8004d74:	88fb      	ldrh	r3, [r7, #6]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d80:	b004      	add	sp, #16
 8004d82:	4770      	bx	lr
 8004d84:	20000eac 	.word	0x20000eac
 8004d88:	200007c0 	.word	0x200007c0

08004d8c <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second)
{
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af02      	add	r7, sp, #8
 8004d94:	f107 0c08 	add.w	ip, r7, #8
 8004d98:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <TMP117_set_Configuration+0x50>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 8004da2:	4a0e      	ldr	r2, [pc, #56]	; (8004ddc <TMP117_set_Configuration+0x50>)
 8004da4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8004da8:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 8004daa:	4a0c      	ldr	r2, [pc, #48]	; (8004ddc <TMP117_set_Configuration+0x50>)
 8004dac:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8004db0:	7093      	strb	r3, [r2, #2]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,2,100);
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <TMP117_set_Configuration+0x54>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b299      	uxth	r1, r3
 8004db8:	2364      	movs	r3, #100	; 0x64
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	4a07      	ldr	r2, [pc, #28]	; (8004ddc <TMP117_set_Configuration+0x50>)
 8004dc0:	f107 0008 	add.w	r0, r7, #8
 8004dc4:	f001 f8ae 	bl	8005f24 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8004dc8:	2001      	movs	r0, #1
 8004dca:	f000 f8d1 	bl	8004f70 <HAL_Delay>
}
 8004dce:	bf00      	nop
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dd6:	b004      	add	sp, #16
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20000eb0 	.word	0x20000eb0
 8004de0:	200007c0 	.word	0x200007c0

08004de4 <TMP117_Initialization>:
   @Description   Custom Parameters for Sensor
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  void
 */
void TMP117_Initialization               (I2C_HandleTypeDef i2c)
{
 8004de4:	b084      	sub	sp, #16
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b094      	sub	sp, #80	; 0x50
 8004dea:	af14      	add	r7, sp, #80	; 0x50
 8004dec:	f107 0c08 	add.w	ip, r7, #8
 8004df0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    TMP117_set_Configuration(i2c,0x02,0x22);
 8004df4:	2322      	movs	r3, #34	; 0x22
 8004df6:	9312      	str	r3, [sp, #72]	; 0x48
 8004df8:	2302      	movs	r3, #2
 8004dfa:	9311      	str	r3, [sp, #68]	; 0x44
 8004dfc:	4668      	mov	r0, sp
 8004dfe:	f107 0318 	add.w	r3, r7, #24
 8004e02:	2244      	movs	r2, #68	; 0x44
 8004e04:	4619      	mov	r1, r3
 8004e06:	f00a fa9d 	bl	800f344 <memcpy>
 8004e0a:	f107 0308 	add.w	r3, r7, #8
 8004e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e10:	f7ff ffbc 	bl	8004d8c <TMP117_set_Configuration>
	HAL_Delay(2); // wait 2ms
 8004e14:	2002      	movs	r0, #2
 8004e16:	f000 f8ab 	bl	8004f70 <HAL_Delay>
	TMP117_set_Configuration(i2c,0x03,0xA0);
 8004e1a:	23a0      	movs	r3, #160	; 0xa0
 8004e1c:	9312      	str	r3, [sp, #72]	; 0x48
 8004e1e:	2303      	movs	r3, #3
 8004e20:	9311      	str	r3, [sp, #68]	; 0x44
 8004e22:	4668      	mov	r0, sp
 8004e24:	f107 0318 	add.w	r3, r7, #24
 8004e28:	2244      	movs	r2, #68	; 0x44
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	f00a fa8a 	bl	800f344 <memcpy>
 8004e30:	f107 0308 	add.w	r3, r7, #8
 8004e34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e36:	f7ff ffa9 	bl	8004d8c <TMP117_set_Configuration>
	//TMP117_set_Configuration(i2c,0x02,0x20);
//      TMP117_set_Temperature_Offset(i2c,0x00,0x00); //Default Value
//      TMP117_set_LowLimit(i2c,0x12,0x80);           //Set 10 Celcius
//      TMP117_set_HighLimit(i2c,0x51,0x20);          //Set 40 Celcius
}
 8004e3a:	bf00      	nop
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e42:	b004      	add	sp, #16
 8004e44:	4770      	bx	lr
	...

08004e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e48:	480c      	ldr	r0, [pc, #48]	; (8004e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e4a:	490d      	ldr	r1, [pc, #52]	; (8004e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e4c:	4a0d      	ldr	r2, [pc, #52]	; (8004e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e50:	e002      	b.n	8004e58 <LoopCopyDataInit>

08004e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e56:	3304      	adds	r3, #4

08004e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e5c:	d3f9      	bcc.n	8004e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e60:	4c0a      	ldr	r4, [pc, #40]	; (8004e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e64:	e001      	b.n	8004e6a <LoopFillZerobss>

08004e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e68:	3204      	adds	r2, #4

08004e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e6c:	d3fb      	bcc.n	8004e66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004e6e:	f7ff fdd5 	bl	8004a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e72:	f00a fa43 	bl	800f2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e76:	f7fe fc95 	bl	80037a4 <main>
  bx lr
 8004e7a:	4770      	bx	lr
  ldr r0, =_sdata
 8004e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e80:	20000b10 	.word	0x20000b10
  ldr r2, =_sidata
 8004e84:	08014010 	.word	0x08014010
  ldr r2, =_sbss
 8004e88:	20000b10 	.word	0x20000b10
  ldr r4, =_ebss
 8004e8c:	20001a0c 	.word	0x20001a0c

08004e90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e90:	e7fe      	b.n	8004e90 <ADC1_IRQHandler>

08004e92 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e9c:	2003      	movs	r0, #3
 8004e9e:	f000 f955 	bl	800514c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ea2:	200f      	movs	r0, #15
 8004ea4:	f000 f80e 	bl	8004ec4 <HAL_InitTick>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	71fb      	strb	r3, [r7, #7]
 8004eb2:	e001      	b.n	8004eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004eb4:	f7ff fc3c 	bl	8004730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004ed0:	4b16      	ldr	r3, [pc, #88]	; (8004f2c <HAL_InitTick+0x68>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d022      	beq.n	8004f1e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004ed8:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <HAL_InitTick+0x6c>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <HAL_InitTick+0x68>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f962 	bl	80051b6 <HAL_SYSTICK_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10f      	bne.n	8004f18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b0f      	cmp	r3, #15
 8004efc:	d809      	bhi.n	8004f12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004efe:	2200      	movs	r2, #0
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	f04f 30ff 	mov.w	r0, #4294967295
 8004f06:	f000 f92c 	bl	8005162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <HAL_InitTick+0x70>)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	e007      	b.n	8004f22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	73fb      	strb	r3, [r7, #15]
 8004f16:	e004      	b.n	8004f22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
 8004f1c:	e001      	b.n	8004f22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	200007c8 	.word	0x200007c8
 8004f30:	200007bc 	.word	0x200007bc
 8004f34:	200007c4 	.word	0x200007c4

08004f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <HAL_IncTick+0x1c>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <HAL_IncTick+0x20>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4413      	add	r3, r2
 8004f46:	4a03      	ldr	r2, [pc, #12]	; (8004f54 <HAL_IncTick+0x1c>)
 8004f48:	6013      	str	r3, [r2, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000eb4 	.word	0x20000eb4
 8004f58:	200007c8 	.word	0x200007c8

08004f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f60:	4b02      	ldr	r3, [pc, #8]	; (8004f6c <HAL_GetTick+0x10>)
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr
 8004f6c:	20000eb4 	.word	0x20000eb4

08004f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f78:	f7ff fff0 	bl	8004f5c <HAL_GetTick>
 8004f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d004      	beq.n	8004f94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f8a:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <HAL_Delay+0x40>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4413      	add	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f94:	bf00      	nop
 8004f96:	f7ff ffe1 	bl	8004f5c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d8f7      	bhi.n	8004f96 <HAL_Delay+0x26>
  {
  }
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	200007c8 	.word	0x200007c8

08004fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fe6:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	60d3      	str	r3, [r2, #12]
}
 8004fec:	bf00      	nop
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	e000ed00 	.word	0xe000ed00

08004ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <__NVIC_GetPriorityGrouping+0x18>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	0a1b      	lsrs	r3, r3, #8
 8005006:	f003 0307 	and.w	r3, r3, #7
}
 800500a:	4618      	mov	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	e000ed00 	.word	0xe000ed00

08005018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005026:	2b00      	cmp	r3, #0
 8005028:	db0b      	blt.n	8005042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	f003 021f 	and.w	r2, r3, #31
 8005030:	4906      	ldr	r1, [pc, #24]	; (800504c <__NVIC_EnableIRQ+0x34>)
 8005032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	2001      	movs	r0, #1
 800503a:	fa00 f202 	lsl.w	r2, r0, r2
 800503e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	e000e100 	.word	0xe000e100

08005050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	6039      	str	r1, [r7, #0]
 800505a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800505c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005060:	2b00      	cmp	r3, #0
 8005062:	db0a      	blt.n	800507a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	490c      	ldr	r1, [pc, #48]	; (800509c <__NVIC_SetPriority+0x4c>)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	0112      	lsls	r2, r2, #4
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	440b      	add	r3, r1
 8005074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005078:	e00a      	b.n	8005090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4908      	ldr	r1, [pc, #32]	; (80050a0 <__NVIC_SetPriority+0x50>)
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	3b04      	subs	r3, #4
 8005088:	0112      	lsls	r2, r2, #4
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	440b      	add	r3, r1
 800508e:	761a      	strb	r2, [r3, #24]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	e000e100 	.word	0xe000e100
 80050a0:	e000ed00 	.word	0xe000ed00

080050a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b089      	sub	sp, #36	; 0x24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f1c3 0307 	rsb	r3, r3, #7
 80050be:	2b04      	cmp	r3, #4
 80050c0:	bf28      	it	cs
 80050c2:	2304      	movcs	r3, #4
 80050c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3304      	adds	r3, #4
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	d902      	bls.n	80050d4 <NVIC_EncodePriority+0x30>
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	3b03      	subs	r3, #3
 80050d2:	e000      	b.n	80050d6 <NVIC_EncodePriority+0x32>
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d8:	f04f 32ff 	mov.w	r2, #4294967295
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43da      	mvns	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	401a      	ands	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050ec:	f04f 31ff 	mov.w	r1, #4294967295
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	fa01 f303 	lsl.w	r3, r1, r3
 80050f6:	43d9      	mvns	r1, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050fc:	4313      	orrs	r3, r2
         );
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3724      	adds	r7, #36	; 0x24
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr

08005108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3b01      	subs	r3, #1
 8005114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005118:	d301      	bcc.n	800511e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800511a:	2301      	movs	r3, #1
 800511c:	e00f      	b.n	800513e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800511e:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <SysTick_Config+0x40>)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3b01      	subs	r3, #1
 8005124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005126:	210f      	movs	r1, #15
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
 800512c:	f7ff ff90 	bl	8005050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <SysTick_Config+0x40>)
 8005132:	2200      	movs	r2, #0
 8005134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005136:	4b04      	ldr	r3, [pc, #16]	; (8005148 <SysTick_Config+0x40>)
 8005138:	2207      	movs	r2, #7
 800513a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	e000e010 	.word	0xe000e010

0800514c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff ff2d 	bl	8004fb4 <__NVIC_SetPriorityGrouping>
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	4603      	mov	r3, r0
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005174:	f7ff ff42 	bl	8004ffc <__NVIC_GetPriorityGrouping>
 8005178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	6978      	ldr	r0, [r7, #20]
 8005180:	f7ff ff90 	bl	80050a4 <NVIC_EncodePriority>
 8005184:	4602      	mov	r2, r0
 8005186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800518a:	4611      	mov	r1, r2
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff ff5f 	bl	8005050 <__NVIC_SetPriority>
}
 8005192:	bf00      	nop
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	4603      	mov	r3, r0
 80051a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff ff35 	bl	8005018 <__NVIC_EnableIRQ>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ffa2 	bl	8005108 <SysTick_Config>
 80051c4:	4603      	mov	r3, r0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d005      	beq.n	80051f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2204      	movs	r2, #4
 80051ea:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
 80051f0:	e029      	b.n	8005246 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 020e 	bic.w	r2, r2, #14
 8005200:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f003 021c 	and.w	r2, r3, #28
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	2101      	movs	r1, #1
 8005220:	fa01 f202 	lsl.w	r2, r1, r2
 8005224:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	4798      	blx	r3
    }
  }
  return status;
 8005246:	7bfb      	ldrb	r3, [r7, #15]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005258:	f7ff fe80 	bl	8004f5c <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800525e:	e010      	b.n	8005282 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d00c      	beq.n	8005282 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <FLASH_WaitForLastOperation+0x2e>
 800526e:	f7ff fe75 	bl	8004f5c <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	429a      	cmp	r2, r3
 800527c:	d201      	bcs.n	8005282 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e02f      	b.n	80052e2 <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005282:	4b1a      	ldr	r3, [pc, #104]	; (80052ec <FLASH_WaitForLastOperation+0x9c>)
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b01      	cmp	r3, #1
 800528c:	d0e8      	beq.n	8005260 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <FLASH_WaitForLastOperation+0x9c>)
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d102      	bne.n	80052a0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800529a:	4b14      	ldr	r3, [pc, #80]	; (80052ec <FLASH_WaitForLastOperation+0x9c>)
 800529c:	2202      	movs	r2, #2
 800529e:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80052a0:	4b12      	ldr	r3, [pc, #72]	; (80052ec <FLASH_WaitForLastOperation+0x9c>)
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ac:	d014      	beq.n	80052d8 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <FLASH_WaitForLastOperation+0x9c>)
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80052b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ba:	d00d      	beq.n	80052d8 <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <FLASH_WaitForLastOperation+0x9c>)
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80052c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c8:	d006      	beq.n	80052d8 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80052ca:	4b08      	ldr	r3, [pc, #32]	; (80052ec <FLASH_WaitForLastOperation+0x9c>)
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 80052d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d6:	d103      	bne.n	80052e0 <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80052d8:	f000 f80a 	bl	80052f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40023c00 	.word	0x40023c00

080052f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80052fa:	4b26      	ldr	r3, [pc, #152]	; (8005394 <FLASH_SetErrorCode+0xa4>)
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005306:	d109      	bne.n	800531c <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005308:	4b23      	ldr	r3, [pc, #140]	; (8005398 <FLASH_SetErrorCode+0xa8>)
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	f043 0302 	orr.w	r3, r3, #2
 8005310:	4a21      	ldr	r2, [pc, #132]	; (8005398 <FLASH_SetErrorCode+0xa8>)
 8005312:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800531c:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <FLASH_SetErrorCode+0xa4>)
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005328:	d109      	bne.n	800533e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800532a:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <FLASH_SetErrorCode+0xa8>)
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	4a19      	ldr	r2, [pc, #100]	; (8005398 <FLASH_SetErrorCode+0xa8>)
 8005334:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800533c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800533e:	4b15      	ldr	r3, [pc, #84]	; (8005394 <FLASH_SetErrorCode+0xa4>)
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534a:	d109      	bne.n	8005360 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800534c:	4b12      	ldr	r3, [pc, #72]	; (8005398 <FLASH_SetErrorCode+0xa8>)
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	f043 0304 	orr.w	r3, r3, #4
 8005354:	4a10      	ldr	r2, [pc, #64]	; (8005398 <FLASH_SetErrorCode+0xa8>)
 8005356:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800535e:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <FLASH_SetErrorCode+0xa4>)
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536c:	d109      	bne.n	8005382 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <FLASH_SetErrorCode+0xa8>)
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f043 0308 	orr.w	r3, r3, #8
 8005376:	4a08      	ldr	r2, [pc, #32]	; (8005398 <FLASH_SetErrorCode+0xa8>)
 8005378:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005380:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005382:	4a04      	ldr	r2, [pc, #16]	; (8005394 <FLASH_SetErrorCode+0xa4>)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6193      	str	r3, [r2, #24]
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40023c00 	.word	0x40023c00
 8005398:	20000eb8 	.word	0x20000eb8

0800539c <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80053ae:	4a07      	ldr	r2, [pc, #28]	; (80053cc <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 80053b0:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80053b2:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80053b4:	4a06      	ldr	r2, [pc, #24]	; (80053d0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 80053b6:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e000      	b.n	80053be <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
}
 80053be:	4618      	mov	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40023c00 	.word	0x40023c00
 80053cc:	89abcdef 	.word	0x89abcdef
 80053d0:	02030405 	.word	0x02030405

080053d4 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80053d8:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80053de:	f043 0301 	orr.w	r3, r3, #1
 80053e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40023c00 	.word	0x40023c00

080053f4 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005402:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005406:	f7ff ff23 	bl	8005250 <FLASH_WaitForLastOperation>
 800540a:	4603      	mov	r3, r0
 800540c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d11a      	bne.n	800544a <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 8005416:	2200      	movs	r2, #0
 8005418:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d102      	bne.n	8005426 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d102      	bne.n	8005432 <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800543e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005442:	f7ff ff05 	bl	8005250 <FLASH_WaitForLastOperation>
 8005446:	4603      	mov	r3, r0
 8005448:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000eb8 	.word	0x20000eb8

08005458 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005468:	4b31      	ldr	r3, [pc, #196]	; (8005530 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800546a:	7c1b      	ldrb	r3, [r3, #16]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 8005470:	2302      	movs	r3, #2
 8005472:	e058      	b.n	8005526 <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 8005474:	4b2e      	ldr	r3, [pc, #184]	; (8005530 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8005476:	2201      	movs	r2, #1
 8005478:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800547a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800547e:	f7ff fee7 	bl	8005250 <FLASH_WaitForLastOperation>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d148      	bne.n	800551e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800548c:	4b28      	ldr	r3, [pc, #160]	; (8005530 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800548e:	2200      	movs	r2, #0
 8005490:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d106      	bne.n	80054a6 <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	68b8      	ldr	r0, [r7, #8]
 800549c:	f000 fa18 	bl	80058d0 <FLASH_DATAEEPROM_ProgramWord>
 80054a0:	4603      	mov	r3, r0
 80054a2:	75fb      	strb	r3, [r7, #23]
 80054a4:	e03b      	b.n	800551e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d108      	bne.n	80054be <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	4619      	mov	r1, r3
 80054b2:	68b8      	ldr	r0, [r7, #8]
 80054b4:	f000 f99c 	bl	80057f0 <FLASH_DATAEEPROM_ProgramHalfWord>
 80054b8:	4603      	mov	r3, r0
 80054ba:	75fb      	strb	r3, [r7, #23]
 80054bc:	e02f      	b.n	800551e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d108      	bne.n	80054d6 <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	4619      	mov	r1, r3
 80054ca:	68b8      	ldr	r0, [r7, #8]
 80054cc:	f000 f934 	bl	8005738 <FLASH_DATAEEPROM_ProgramByte>
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]
 80054d4:	e023      	b.n	800551e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d108      	bne.n	80054ee <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	4619      	mov	r1, r3
 80054e2:	68b8      	ldr	r0, [r7, #8]
 80054e4:	f000 f826 	bl	8005534 <FLASH_DATAEEPROM_FastProgramByte>
 80054e8:	4603      	mov	r3, r0
 80054ea:	75fb      	strb	r3, [r7, #23]
 80054ec:	e017      	b.n	800551e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d108      	bne.n	8005506 <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4619      	mov	r1, r3
 80054fa:	68b8      	ldr	r0, [r7, #8]
 80054fc:	f000 f87e 	bl	80055fc <FLASH_DATAEEPROM_FastProgramHalfWord>
 8005500:	4603      	mov	r3, r0
 8005502:	75fb      	strb	r3, [r7, #23]
 8005504:	e00b      	b.n	800551e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b10      	cmp	r3, #16
 800550a:	d106      	bne.n	800551a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	68b8      	ldr	r0, [r7, #8]
 8005510:	f000 f8ec 	bl	80056ec <FLASH_DATAEEPROM_FastProgramWord>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]
 8005518:	e001      	b.n	800551e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800551e:	4b04      	ldr	r3, [pc, #16]	; (8005530 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8005520:	2200      	movs	r2, #0
 8005522:	741a      	strb	r2, [r3, #16]

  return status;
 8005524:	7dfb      	ldrb	r3, [r7, #23]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000eb8 	.word	0x20000eb8

08005534 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800554c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005550:	f7ff fe7e 	bl	8005250 <FLASH_WaitForLastOperation>
 8005554:	4603      	mov	r3, r0
 8005556:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d145      	bne.n	80055ea <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800555e:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4a24      	ldr	r2, [pc, #144]	; (80055f4 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8005564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005568:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	78fa      	ldrb	r2, [r7, #3]
 8005574:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005576:	f24c 3050 	movw	r0, #50000	; 0xc350
 800557a:	f7ff fe69 	bl	8005250 <FLASH_WaitForLastOperation>
 800557e:	4603      	mov	r3, r0
 8005580:	75fb      	strb	r3, [r7, #23]
 8005582:	e032      	b.n	80055ea <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	22ff      	movs	r2, #255	; 0xff
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	43db      	mvns	r3, r3
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4013      	ands	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	4619      	mov	r1, r3
 80055b4:	2002      	movs	r0, #2
 80055b6:	f7ff ff1d 	bl	80053f4 <HAL_FLASHEx_DATAEEPROM_Erase>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80055be:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f023 0303 	bic.w	r3, r3, #3
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4619      	mov	r1, r3
 80055ce:	2010      	movs	r0, #16
 80055d0:	f7ff ff42 	bl	8005458 <HAL_FLASHEx_DATAEEPROM_Program>
 80055d4:	4603      	mov	r3, r0
 80055d6:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80055da:	7c1b      	ldrb	r3, [r3, #16]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e003      	b.n	80055ec <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 80055e4:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40023c00 	.word	0x40023c00
 80055f8:	20000eb8 	.word	0x20000eb8

080055fc <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005614:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005618:	f7ff fe1a 	bl	8005250 <FLASH_WaitForLastOperation>
 800561c:	4603      	mov	r3, r0
 800561e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d158      	bne.n	80056d8 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8005626:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	4a2e      	ldr	r2, [pc, #184]	; (80056e4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 800562c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005630:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 8005632:	887b      	ldrh	r3, [r7, #2]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d009      	beq.n	800564c <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	887a      	ldrh	r2, [r7, #2]
 800563c:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800563e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005642:	f7ff fe05 	bl	8005250 <FLASH_WaitForLastOperation>
 8005646:	4603      	mov	r3, r0
 8005648:	75fb      	strb	r3, [r7, #23]
 800564a:	e045      	b.n	80056d8 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800564c:	4b26      	ldr	r3, [pc, #152]	; (80056e8 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 800564e:	2200      	movs	r2, #0
 8005650:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b03      	cmp	r3, #3
 800565a:	d028      	beq.n	80056ae <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	43db      	mvns	r3, r3
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4013      	ands	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f023 0303 	bic.w	r3, r3, #3
 800568c:	4619      	mov	r1, r3
 800568e:	2002      	movs	r0, #2
 8005690:	f7ff feb0 	bl	80053f4 <HAL_FLASHEx_DATAEEPROM_Erase>
 8005694:	4603      	mov	r3, r0
 8005696:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4619      	mov	r1, r3
 80056a2:	2010      	movs	r0, #16
 80056a4:	f7ff fed8 	bl	8005458 <HAL_FLASHEx_DATAEEPROM_Program>
 80056a8:	4603      	mov	r3, r0
 80056aa:	75fb      	strb	r3, [r7, #23]
 80056ac:	e00b      	b.n	80056c6 <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 80056ae:	2200      	movs	r2, #0
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	2004      	movs	r0, #4
 80056b4:	f7ff fed0 	bl	8005458 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3301      	adds	r3, #1
 80056bc:	2200      	movs	r2, #0
 80056be:	4619      	mov	r1, r3
 80056c0:	2004      	movs	r0, #4
 80056c2:	f7ff fec9 	bl	8005458 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80056c6:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 80056c8:	7c1b      	ldrb	r3, [r3, #16]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e003      	b.n	80056da <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40023c00 	.word	0x40023c00
 80056e8:	20000eb8 	.word	0x20000eb8

080056ec <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80056fe:	f7ff fda7 	bl	8005250 <FLASH_WaitForLastOperation>
 8005702:	4603      	mov	r3, r0
 8005704:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10e      	bne.n	800572a <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800570c:	4b09      	ldr	r3, [pc, #36]	; (8005734 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	4a08      	ldr	r2, [pc, #32]	; (8005734 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8005712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005716:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800571e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005722:	f7ff fd95 	bl	8005250 <FLASH_WaitForLastOperation>
 8005726:	4603      	mov	r3, r0
 8005728:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40023c00 	.word	0x40023c00

08005738 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005750:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005754:	f7ff fd7c 	bl	8005250 <FLASH_WaitForLastOperation>
 8005758:	4603      	mov	r3, r0
 800575a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800575c:	7dfb      	ldrb	r3, [r7, #23]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d13f      	bne.n	80057e2 <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d009      	beq.n	800577c <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800576e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005772:	f7ff fd6d 	bl	8005250 <FLASH_WaitForLastOperation>
 8005776:	4603      	mov	r3, r0
 8005778:	75fb      	strb	r3, [r7, #23]
 800577a:	e032      	b.n	80057e2 <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f003 0303 	and.w	r3, r3, #3
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	22ff      	movs	r2, #255	; 0xff
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	43db      	mvns	r3, r3
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f023 0303 	bic.w	r3, r3, #3
 80057aa:	4619      	mov	r1, r3
 80057ac:	2002      	movs	r0, #2
 80057ae:	f7ff fe21 	bl	80053f4 <HAL_FLASHEx_DATAEEPROM_Erase>
 80057b2:	4603      	mov	r3, r0
 80057b4:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80057b6:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4619      	mov	r1, r3
 80057c6:	2010      	movs	r0, #16
 80057c8:	f7ff fe46 	bl	8005458 <HAL_FLASHEx_DATAEEPROM_Program>
 80057cc:	4603      	mov	r3, r0
 80057ce:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 80057d2:	7c1b      	ldrb	r3, [r3, #16]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <FLASH_DATAEEPROM_ProgramByte+0xa4>
 80057d8:	2302      	movs	r3, #2
 80057da:	e003      	b.n	80057e4 <FLASH_DATAEEPROM_ProgramByte+0xac>
 80057dc:	4b03      	ldr	r3, [pc, #12]	; (80057ec <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 80057de:	2201      	movs	r2, #1
 80057e0:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000eb8 	.word	0x20000eb8

080057f0 <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005808:	f24c 3050 	movw	r0, #50000	; 0xc350
 800580c:	f7ff fd20 	bl	8005250 <FLASH_WaitForLastOperation>
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d152      	bne.n	80058c0 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 800581a:	887b      	ldrh	r3, [r7, #2]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d009      	beq.n	8005834 <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	887a      	ldrh	r2, [r7, #2]
 8005824:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005826:	f24c 3050 	movw	r0, #50000	; 0xc350
 800582a:	f7ff fd11 	bl	8005250 <FLASH_WaitForLastOperation>
 800582e:	4603      	mov	r3, r0
 8005830:	75fb      	strb	r3, [r7, #23]
 8005832:	e045      	b.n	80058c0 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8005834:	4b25      	ldr	r3, [pc, #148]	; (80058cc <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8005836:	2200      	movs	r2, #0
 8005838:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	2b03      	cmp	r3, #3
 8005842:	d028      	beq.n	8005896 <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f023 0303 	bic.w	r3, r3, #3
 800584a:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	43db      	mvns	r3, r3
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4013      	ands	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f023 0303 	bic.w	r3, r3, #3
 8005874:	4619      	mov	r1, r3
 8005876:	2002      	movs	r0, #2
 8005878:	f7ff fdbc 	bl	80053f4 <HAL_FLASHEx_DATAEEPROM_Erase>
 800587c:	4603      	mov	r3, r0
 800587e:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4619      	mov	r1, r3
 800588a:	2010      	movs	r0, #16
 800588c:	f7ff fde4 	bl	8005458 <HAL_FLASHEx_DATAEEPROM_Program>
 8005890:	4603      	mov	r3, r0
 8005892:	75fb      	strb	r3, [r7, #23]
 8005894:	e00b      	b.n	80058ae <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 8005896:	2200      	movs	r2, #0
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	2004      	movs	r0, #4
 800589c:	f7ff fddc 	bl	8005458 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3301      	adds	r3, #1
 80058a4:	2200      	movs	r2, #0
 80058a6:	4619      	mov	r1, r3
 80058a8:	2004      	movs	r0, #4
 80058aa:	f7ff fdd5 	bl	8005458 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80058ae:	4b07      	ldr	r3, [pc, #28]	; (80058cc <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 80058b0:	7c1b      	ldrb	r3, [r3, #16]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e003      	b.n	80058c2 <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 80058ba:	4b04      	ldr	r3, [pc, #16]	; (80058cc <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 80058bc:	2201      	movs	r2, #1
 80058be:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000eb8 	.word	0x20000eb8

080058d0 <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80058de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058e2:	f7ff fcb5 	bl	8005250 <FLASH_WaitForLastOperation>
 80058e6:	4603      	mov	r3, r0
 80058e8:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d108      	bne.n	8005902 <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80058f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058fa:	f7ff fca9 	bl	8005250 <FLASH_WaitForLastOperation>
 80058fe:	4603      	mov	r3, r0
 8005900:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005922:	e154      	b.n	8005bce <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	2101      	movs	r1, #1
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	fa01 f303 	lsl.w	r3, r1, r3
 8005930:	4013      	ands	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 8146 	beq.w	8005bc8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d005      	beq.n	8005954 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005950:	2b02      	cmp	r3, #2
 8005952:	d130      	bne.n	80059b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	2203      	movs	r2, #3
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4013      	ands	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800598a:	2201      	movs	r2, #1
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	43db      	mvns	r3, r3
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4013      	ands	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	f003 0201 	and.w	r2, r3, #1
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d017      	beq.n	80059f2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	2203      	movs	r2, #3
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4013      	ands	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d123      	bne.n	8005a46 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	08da      	lsrs	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3208      	adds	r2, #8
 8005a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	220f      	movs	r2, #15
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	08da      	lsrs	r2, r3, #3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3208      	adds	r2, #8
 8005a40:	6939      	ldr	r1, [r7, #16]
 8005a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	2203      	movs	r2, #3
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 0203 	and.w	r2, r3, #3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80a0 	beq.w	8005bc8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a88:	4b58      	ldr	r3, [pc, #352]	; (8005bec <HAL_GPIO_Init+0x2e0>)
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	4a57      	ldr	r2, [pc, #348]	; (8005bec <HAL_GPIO_Init+0x2e0>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6213      	str	r3, [r2, #32]
 8005a94:	4b55      	ldr	r3, [pc, #340]	; (8005bec <HAL_GPIO_Init+0x2e0>)
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8005aa0:	4a53      	ldr	r2, [pc, #332]	; (8005bf0 <HAL_GPIO_Init+0x2e4>)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	089b      	lsrs	r3, r3, #2
 8005aa6:	3302      	adds	r3, #2
 8005aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	220f      	movs	r2, #15
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	43db      	mvns	r3, r3
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a4b      	ldr	r2, [pc, #300]	; (8005bf4 <HAL_GPIO_Init+0x2e8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d019      	beq.n	8005b00 <HAL_GPIO_Init+0x1f4>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a4a      	ldr	r2, [pc, #296]	; (8005bf8 <HAL_GPIO_Init+0x2ec>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d013      	beq.n	8005afc <HAL_GPIO_Init+0x1f0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a49      	ldr	r2, [pc, #292]	; (8005bfc <HAL_GPIO_Init+0x2f0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00d      	beq.n	8005af8 <HAL_GPIO_Init+0x1ec>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a48      	ldr	r2, [pc, #288]	; (8005c00 <HAL_GPIO_Init+0x2f4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <HAL_GPIO_Init+0x1e8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a47      	ldr	r2, [pc, #284]	; (8005c04 <HAL_GPIO_Init+0x2f8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d101      	bne.n	8005af0 <HAL_GPIO_Init+0x1e4>
 8005aec:	2304      	movs	r3, #4
 8005aee:	e008      	b.n	8005b02 <HAL_GPIO_Init+0x1f6>
 8005af0:	2305      	movs	r3, #5
 8005af2:	e006      	b.n	8005b02 <HAL_GPIO_Init+0x1f6>
 8005af4:	2303      	movs	r3, #3
 8005af6:	e004      	b.n	8005b02 <HAL_GPIO_Init+0x1f6>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e002      	b.n	8005b02 <HAL_GPIO_Init+0x1f6>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_GPIO_Init+0x1f6>
 8005b00:	2300      	movs	r3, #0
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	f002 0203 	and.w	r2, r2, #3
 8005b08:	0092      	lsls	r2, r2, #2
 8005b0a:	4093      	lsls	r3, r2
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b12:	4937      	ldr	r1, [pc, #220]	; (8005bf0 <HAL_GPIO_Init+0x2e4>)
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	3302      	adds	r3, #2
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b20:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <HAL_GPIO_Init+0x2fc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005b44:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <HAL_GPIO_Init+0x2fc>)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005b4a:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <HAL_GPIO_Init+0x2fc>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	43db      	mvns	r3, r3
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4013      	ands	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005b6e:	4a26      	ldr	r2, [pc, #152]	; (8005c08 <HAL_GPIO_Init+0x2fc>)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b74:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <HAL_GPIO_Init+0x2fc>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4013      	ands	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <HAL_GPIO_Init+0x2fc>)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b9e:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <HAL_GPIO_Init+0x2fc>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4013      	ands	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005bc2:	4a11      	ldr	r2, [pc, #68]	; (8005c08 <HAL_GPIO_Init+0x2fc>)
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f47f aea3 	bne.w	8005924 <HAL_GPIO_Init+0x18>
  }
}
 8005bde:	bf00      	nop
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40020000 	.word	0x40020000
 8005bf8:	40020400 	.word	0x40020400
 8005bfc:	40020800 	.word	0x40020800
 8005c00:	40020c00 	.word	0x40020c00
 8005c04:	40021000 	.word	0x40021000
 8005c08:	40010400 	.word	0x40010400

08005c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	887b      	ldrh	r3, [r7, #2]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c24:	2301      	movs	r3, #1
 8005c26:	73fb      	strb	r3, [r7, #15]
 8005c28:	e001      	b.n	8005c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr

08005c3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	460b      	mov	r3, r1
 8005c44:	807b      	strh	r3, [r7, #2]
 8005c46:	4613      	mov	r3, r2
 8005c48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c4a:	787b      	ldrb	r3, [r7, #1]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c50:	887a      	ldrh	r2, [r7, #2]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8005c56:	e003      	b.n	8005c60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8005c58:	887b      	ldrh	r3, [r7, #2]
 8005c5a:	041a      	lsls	r2, r3, #16
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	619a      	str	r2, [r3, #24]
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
	...

08005c6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c76:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c78:	695a      	ldr	r2, [r3, #20]
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d006      	beq.n	8005c90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c82:	4a05      	ldr	r2, [pc, #20]	; (8005c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fd ff20 	bl	8003ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40010400 	.word	0x40010400

08005c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e12b      	b.n	8005f06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fd fd0a 	bl	80036dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2224      	movs	r2, #36	; 0x24
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d00:	f003 f8fa 	bl	8008ef8 <HAL_RCC_GetPCLK1Freq>
 8005d04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	4a81      	ldr	r2, [pc, #516]	; (8005f10 <HAL_I2C_Init+0x274>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d807      	bhi.n	8005d20 <HAL_I2C_Init+0x84>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4a80      	ldr	r2, [pc, #512]	; (8005f14 <HAL_I2C_Init+0x278>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	bf94      	ite	ls
 8005d18:	2301      	movls	r3, #1
 8005d1a:	2300      	movhi	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	e006      	b.n	8005d2e <HAL_I2C_Init+0x92>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a7d      	ldr	r2, [pc, #500]	; (8005f18 <HAL_I2C_Init+0x27c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	bf94      	ite	ls
 8005d28:	2301      	movls	r3, #1
 8005d2a:	2300      	movhi	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e0e7      	b.n	8005f06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4a78      	ldr	r2, [pc, #480]	; (8005f1c <HAL_I2C_Init+0x280>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	0c9b      	lsrs	r3, r3, #18
 8005d40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	4a6a      	ldr	r2, [pc, #424]	; (8005f10 <HAL_I2C_Init+0x274>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d802      	bhi.n	8005d70 <HAL_I2C_Init+0xd4>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	e009      	b.n	8005d84 <HAL_I2C_Init+0xe8>
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	4a69      	ldr	r2, [pc, #420]	; (8005f20 <HAL_I2C_Init+0x284>)
 8005d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d80:	099b      	lsrs	r3, r3, #6
 8005d82:	3301      	adds	r3, #1
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	495c      	ldr	r1, [pc, #368]	; (8005f10 <HAL_I2C_Init+0x274>)
 8005da0:	428b      	cmp	r3, r1
 8005da2:	d819      	bhi.n	8005dd8 <HAL_I2C_Init+0x13c>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	1e59      	subs	r1, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8005db2:	1c59      	adds	r1, r3, #1
 8005db4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005db8:	400b      	ands	r3, r1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_I2C_Init+0x138>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1e59      	subs	r1, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dcc:	3301      	adds	r3, #1
 8005dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd2:	e051      	b.n	8005e78 <HAL_I2C_Init+0x1dc>
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	e04f      	b.n	8005e78 <HAL_I2C_Init+0x1dc>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d111      	bne.n	8005e04 <HAL_I2C_Init+0x168>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	1e58      	subs	r0, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6859      	ldr	r1, [r3, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	440b      	add	r3, r1
 8005dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005df2:	3301      	adds	r3, #1
 8005df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	e012      	b.n	8005e2a <HAL_I2C_Init+0x18e>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1e58      	subs	r0, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6859      	ldr	r1, [r3, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	0099      	lsls	r1, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf0c      	ite	eq
 8005e24:	2301      	moveq	r3, #1
 8005e26:	2300      	movne	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_I2C_Init+0x196>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e022      	b.n	8005e78 <HAL_I2C_Init+0x1dc>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10e      	bne.n	8005e58 <HAL_I2C_Init+0x1bc>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1e58      	subs	r0, r3, #1
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6859      	ldr	r1, [r3, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	440b      	add	r3, r1
 8005e48:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e56:	e00f      	b.n	8005e78 <HAL_I2C_Init+0x1dc>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	1e58      	subs	r0, r3, #1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6859      	ldr	r1, [r3, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	0099      	lsls	r1, r3, #2
 8005e68:	440b      	add	r3, r1
 8005e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e6e:	3301      	adds	r3, #1
 8005e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	6809      	ldr	r1, [r1, #0]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69da      	ldr	r2, [r3, #28]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6911      	ldr	r1, [r2, #16]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	68d2      	ldr	r2, [r2, #12]
 8005eb2:	4311      	orrs	r1, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695a      	ldr	r2, [r3, #20]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	000186a0 	.word	0x000186a0
 8005f14:	001e847f 	.word	0x001e847f
 8005f18:	003d08ff 	.word	0x003d08ff
 8005f1c:	431bde83 	.word	0x431bde83
 8005f20:	10624dd3 	.word	0x10624dd3

08005f24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	607a      	str	r2, [r7, #4]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	460b      	mov	r3, r1
 8005f32:	817b      	strh	r3, [r7, #10]
 8005f34:	4613      	mov	r3, r2
 8005f36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f38:	f7ff f810 	bl	8004f5c <HAL_GetTick>
 8005f3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	f040 80e0 	bne.w	800610c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	2319      	movs	r3, #25
 8005f52:	2201      	movs	r2, #1
 8005f54:	4970      	ldr	r1, [pc, #448]	; (8006118 <HAL_I2C_Master_Transmit+0x1f4>)
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 fc58 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005f62:	2302      	movs	r3, #2
 8005f64:	e0d3      	b.n	800610e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_I2C_Master_Transmit+0x50>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e0cc      	b.n	800610e <HAL_I2C_Master_Transmit+0x1ea>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d007      	beq.n	8005f9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0201 	orr.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2221      	movs	r2, #33	; 0x21
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2210      	movs	r2, #16
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	893a      	ldrh	r2, [r7, #8]
 8005fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4a50      	ldr	r2, [pc, #320]	; (800611c <HAL_I2C_Master_Transmit+0x1f8>)
 8005fda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fdc:	8979      	ldrh	r1, [r7, #10]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	6a3a      	ldr	r2, [r7, #32]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fac2 	bl	800656c <I2C_MasterRequestWrite>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e08d      	b.n	800610e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	613b      	str	r3, [r7, #16]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006008:	e066      	b.n	80060d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	6a39      	ldr	r1, [r7, #32]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 fcd2 	bl	80069b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00d      	beq.n	8006036 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	2b04      	cmp	r3, #4
 8006020:	d107      	bne.n	8006032 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006030:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e06b      	b.n	800610e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b04      	cmp	r3, #4
 8006072:	d11b      	bne.n	80060ac <HAL_I2C_Master_Transmit+0x188>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006078:	2b00      	cmp	r3, #0
 800607a:	d017      	beq.n	80060ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	781a      	ldrb	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b01      	subs	r3, #1
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	6a39      	ldr	r1, [r7, #32]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fcc2 	bl	8006a3a <I2C_WaitOnBTFFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00d      	beq.n	80060d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d107      	bne.n	80060d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e01a      	b.n	800610e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d194      	bne.n	800600a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e000      	b.n	800610e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	00100002 	.word	0x00100002
 800611c:	ffff0000 	.word	0xffff0000

08006120 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08c      	sub	sp, #48	; 0x30
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	461a      	mov	r2, r3
 800612c:	460b      	mov	r3, r1
 800612e:	817b      	strh	r3, [r7, #10]
 8006130:	4613      	mov	r3, r2
 8006132:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006134:	f7fe ff12 	bl	8004f5c <HAL_GetTick>
 8006138:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b20      	cmp	r3, #32
 8006144:	f040 820b 	bne.w	800655e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	2319      	movs	r3, #25
 800614e:	2201      	movs	r2, #1
 8006150:	497c      	ldr	r1, [pc, #496]	; (8006344 <HAL_I2C_Master_Receive+0x224>)
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 fb5a 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800615e:	2302      	movs	r3, #2
 8006160:	e1fe      	b.n	8006560 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_I2C_Master_Receive+0x50>
 800616c:	2302      	movs	r3, #2
 800616e:	e1f7      	b.n	8006560 <HAL_I2C_Master_Receive+0x440>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b01      	cmp	r3, #1
 8006184:	d007      	beq.n	8006196 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0201 	orr.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2222      	movs	r2, #34	; 0x22
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2210      	movs	r2, #16
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	893a      	ldrh	r2, [r7, #8]
 80061c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4a5c      	ldr	r2, [pc, #368]	; (8006348 <HAL_I2C_Master_Receive+0x228>)
 80061d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80061d8:	8979      	ldrh	r1, [r7, #10]
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fa46 	bl	8006670 <I2C_MasterRequestRead>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e1b8      	b.n	8006560 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d113      	bne.n	800621e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061f6:	2300      	movs	r3, #0
 80061f8:	623b      	str	r3, [r7, #32]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	623b      	str	r3, [r7, #32]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	623b      	str	r3, [r7, #32]
 800620a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	e18c      	b.n	8006538 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006222:	2b01      	cmp	r3, #1
 8006224:	d11b      	bne.n	800625e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	e16c      	b.n	8006538 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006262:	2b02      	cmp	r3, #2
 8006264:	d11b      	bne.n	800629e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006274:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	e14c      	b.n	8006538 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80062c4:	e138      	b.n	8006538 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	f200 80f1 	bhi.w	80064b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d123      	bne.n	8006320 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 fbed 	bl	8006abc <I2C_WaitOnRXNEFlagUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e139      	b.n	8006560 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691a      	ldr	r2, [r3, #16]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800631e:	e10b      	b.n	8006538 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006324:	2b02      	cmp	r3, #2
 8006326:	d14e      	bne.n	80063c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	2200      	movs	r2, #0
 8006330:	4906      	ldr	r1, [pc, #24]	; (800634c <HAL_I2C_Master_Receive+0x22c>)
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fa6a 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d008      	beq.n	8006350 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e10e      	b.n	8006560 <HAL_I2C_Master_Receive+0x440>
 8006342:	bf00      	nop
 8006344:	00100002 	.word	0x00100002
 8006348:	ffff0000 	.word	0xffff0000
 800634c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691a      	ldr	r2, [r3, #16]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063c4:	e0b8      	b.n	8006538 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	2200      	movs	r2, #0
 80063ce:	4966      	ldr	r1, [pc, #408]	; (8006568 <HAL_I2C_Master_Receive+0x448>)
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fa1b 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e0bf      	b.n	8006560 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691a      	ldr	r2, [r3, #16]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	2200      	movs	r2, #0
 800642a:	494f      	ldr	r1, [pc, #316]	; (8006568 <HAL_I2C_Master_Receive+0x448>)
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f9ed 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e091      	b.n	8006560 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800644a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064b0:	e042      	b.n	8006538 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 fb00 	bl	8006abc <I2C_WaitOnRXNEFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e04c      	b.n	8006560 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	2b04      	cmp	r3, #4
 8006504:	d118      	bne.n	8006538 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653c:	2b00      	cmp	r3, #0
 800653e:	f47f aec2 	bne.w	80062c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2220      	movs	r2, #32
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	e000      	b.n	8006560 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800655e:	2302      	movs	r3, #2
  }
}
 8006560:	4618      	mov	r0, r3
 8006562:	3728      	adds	r7, #40	; 0x28
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	00010004 	.word	0x00010004

0800656c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	607a      	str	r2, [r7, #4]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	460b      	mov	r3, r1
 800657a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b08      	cmp	r3, #8
 8006586:	d006      	beq.n	8006596 <I2C_MasterRequestWrite+0x2a>
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d003      	beq.n	8006596 <I2C_MasterRequestWrite+0x2a>
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006594:	d108      	bne.n	80065a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	e00b      	b.n	80065c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	2b12      	cmp	r3, #18
 80065ae:	d107      	bne.n	80065c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 f91d 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00d      	beq.n	80065f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e6:	d103      	bne.n	80065f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e035      	b.n	8006660 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065fc:	d108      	bne.n	8006610 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065fe:	897b      	ldrh	r3, [r7, #10]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800660c:	611a      	str	r2, [r3, #16]
 800660e:	e01b      	b.n	8006648 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006610:	897b      	ldrh	r3, [r7, #10]
 8006612:	11db      	asrs	r3, r3, #7
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f003 0306 	and.w	r3, r3, #6
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f063 030f 	orn	r3, r3, #15
 8006620:	b2da      	uxtb	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	490e      	ldr	r1, [pc, #56]	; (8006668 <I2C_MasterRequestWrite+0xfc>)
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f943 	bl	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e010      	b.n	8006660 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800663e:	897b      	ldrh	r3, [r7, #10]
 8006640:	b2da      	uxtb	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	4907      	ldr	r1, [pc, #28]	; (800666c <I2C_MasterRequestWrite+0x100>)
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f933 	bl	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	00010008 	.word	0x00010008
 800666c:	00010002 	.word	0x00010002

08006670 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af02      	add	r7, sp, #8
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	607a      	str	r2, [r7, #4]
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	460b      	mov	r3, r1
 800667e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006694:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b08      	cmp	r3, #8
 800669a:	d006      	beq.n	80066aa <I2C_MasterRequestRead+0x3a>
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d003      	beq.n	80066aa <I2C_MasterRequestRead+0x3a>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066a8:	d108      	bne.n	80066bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	e00b      	b.n	80066d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	2b11      	cmp	r3, #17
 80066c2:	d107      	bne.n	80066d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f893 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066fa:	d103      	bne.n	8006704 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006702:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e079      	b.n	80067fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006710:	d108      	bne.n	8006724 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006712:	897b      	ldrh	r3, [r7, #10]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	b2da      	uxtb	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	611a      	str	r2, [r3, #16]
 8006722:	e05f      	b.n	80067e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006724:	897b      	ldrh	r3, [r7, #10]
 8006726:	11db      	asrs	r3, r3, #7
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f003 0306 	and.w	r3, r3, #6
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f063 030f 	orn	r3, r3, #15
 8006734:	b2da      	uxtb	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	4930      	ldr	r1, [pc, #192]	; (8006804 <I2C_MasterRequestRead+0x194>)
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f8b9 	bl	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e054      	b.n	80067fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006752:	897b      	ldrh	r3, [r7, #10]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	4929      	ldr	r1, [pc, #164]	; (8006808 <I2C_MasterRequestRead+0x198>)
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 f8a9 	bl	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e044      	b.n	80067fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006772:	2300      	movs	r3, #0
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006796:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 f831 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00d      	beq.n	80067cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067be:	d103      	bne.n	80067c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e017      	b.n	80067fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80067cc:	897b      	ldrh	r3, [r7, #10]
 80067ce:	11db      	asrs	r3, r3, #7
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	f003 0306 	and.w	r3, r3, #6
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f063 030e 	orn	r3, r3, #14
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4907      	ldr	r1, [pc, #28]	; (8006808 <I2C_MasterRequestRead+0x198>)
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f865 	bl	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e000      	b.n	80067fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	00010008 	.word	0x00010008
 8006808:	00010002 	.word	0x00010002

0800680c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	4613      	mov	r3, r2
 800681a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800681c:	e025      	b.n	800686a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006824:	d021      	beq.n	800686a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006826:	f7fe fb99 	bl	8004f5c <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d302      	bcc.n	800683c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d116      	bne.n	800686a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	f043 0220 	orr.w	r2, r3, #32
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e023      	b.n	80068b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	0c1b      	lsrs	r3, r3, #16
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b01      	cmp	r3, #1
 8006872:	d10d      	bne.n	8006890 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	43da      	mvns	r2, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4013      	ands	r3, r2
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	bf0c      	ite	eq
 8006886:	2301      	moveq	r3, #1
 8006888:	2300      	movne	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	e00c      	b.n	80068aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	43da      	mvns	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4013      	ands	r3, r2
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bf0c      	ite	eq
 80068a2:	2301      	moveq	r3, #1
 80068a4:	2300      	movne	r3, #0
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d0b6      	beq.n	800681e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068c8:	e051      	b.n	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d8:	d123      	bne.n	8006922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	f043 0204 	orr.w	r2, r3, #4
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e046      	b.n	80069b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006928:	d021      	beq.n	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692a:	f7fe fb17 	bl	8004f5c <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	429a      	cmp	r2, r3
 8006938:	d302      	bcc.n	8006940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d116      	bne.n	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	f043 0220 	orr.w	r2, r3, #32
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e020      	b.n	80069b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	0c1b      	lsrs	r3, r3, #16
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	d10c      	bne.n	8006992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	43da      	mvns	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4013      	ands	r3, r2
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	bf14      	ite	ne
 800698a:	2301      	movne	r3, #1
 800698c:	2300      	moveq	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	e00b      	b.n	80069aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	43da      	mvns	r2, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	4013      	ands	r3, r2
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bf14      	ite	ne
 80069a4:	2301      	movne	r3, #1
 80069a6:	2300      	moveq	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d18d      	bne.n	80068ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069c4:	e02d      	b.n	8006a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f8ce 	bl	8006b68 <I2C_IsAcknowledgeFailed>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e02d      	b.n	8006a32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d021      	beq.n	8006a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069de:	f7fe fabd 	bl	8004f5c <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d302      	bcc.n	80069f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d116      	bne.n	8006a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f043 0220 	orr.w	r2, r3, #32
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e007      	b.n	8006a32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2c:	2b80      	cmp	r3, #128	; 0x80
 8006a2e:	d1ca      	bne.n	80069c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a46:	e02d      	b.n	8006aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f88d 	bl	8006b68 <I2C_IsAcknowledgeFailed>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e02d      	b.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5e:	d021      	beq.n	8006aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a60:	f7fe fa7c 	bl	8004f5c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d302      	bcc.n	8006a76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d116      	bne.n	8006aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	f043 0220 	orr.w	r2, r3, #32
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e007      	b.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d1ca      	bne.n	8006a48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ac8:	e042      	b.n	8006b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d119      	bne.n	8006b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0210 	mvn.w	r2, #16
 8006ae0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e029      	b.n	8006b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0c:	f7fe fa26 	bl	8004f5c <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d302      	bcc.n	8006b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d116      	bne.n	8006b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	f043 0220 	orr.w	r2, r3, #32
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e007      	b.n	8006b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5a:	2b40      	cmp	r3, #64	; 0x40
 8006b5c:	d1b5      	bne.n	8006aca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b7e:	d11b      	bne.n	8006bb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	f043 0204 	orr.w	r2, r3, #4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bc80      	pop	{r7}
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc6:	b08b      	sub	sp, #44	; 0x2c
 8006bc8:	af06      	add	r7, sp, #24
 8006bca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e0d0      	b.n	8006d78 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f008 f85c 	bl	800eca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f003 fd7d 	bl	800a6fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c02:	2300      	movs	r3, #0
 8006c04:	73fb      	strb	r3, [r7, #15]
 8006c06:	e04c      	b.n	8006ca2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	440b      	add	r3, r1
 8006c18:	3301      	adds	r3, #1
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	440b      	add	r3, r1
 8006c2e:	7bfa      	ldrb	r2, [r7, #15]
 8006c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c32:	7bfa      	ldrb	r2, [r7, #15]
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	b298      	uxth	r0, r3
 8006c38:	6879      	ldr	r1, [r7, #4]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	440b      	add	r3, r1
 8006c44:	3336      	adds	r3, #54	; 0x36
 8006c46:	4602      	mov	r2, r0
 8006c48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	440b      	add	r3, r1
 8006c5a:	3303      	adds	r3, #3
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	440b      	add	r3, r1
 8006c6e:	3338      	adds	r3, #56	; 0x38
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c74:	7bfa      	ldrb	r2, [r7, #15]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	440b      	add	r3, r1
 8006c82:	333c      	adds	r3, #60	; 0x3c
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c88:	7bfa      	ldrb	r2, [r7, #15]
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	440b      	add	r3, r1
 8006c96:	3340      	adds	r3, #64	; 0x40
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	73fb      	strb	r3, [r7, #15]
 8006ca2:	7bfa      	ldrb	r2, [r7, #15]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d3ad      	bcc.n	8006c08 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
 8006cb0:	e044      	b.n	8006d3c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006cb2:	7bfa      	ldrb	r2, [r7, #15]
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	440b      	add	r3, r1
 8006cc0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cc8:	7bfa      	ldrb	r2, [r7, #15]
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	440b      	add	r3, r1
 8006cd6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006cda:	7bfa      	ldrb	r2, [r7, #15]
 8006cdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006cde:	7bfa      	ldrb	r2, [r7, #15]
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	440b      	add	r3, r1
 8006cec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006cf4:	7bfa      	ldrb	r2, [r7, #15]
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	440b      	add	r3, r1
 8006d02:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d0a:	7bfa      	ldrb	r2, [r7, #15]
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	440b      	add	r3, r1
 8006d18:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d20:	7bfa      	ldrb	r2, [r7, #15]
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	440b      	add	r3, r1
 8006d2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
 8006d3c:	7bfa      	ldrb	r2, [r7, #15]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d3b5      	bcc.n	8006cb2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	687e      	ldr	r6, [r7, #4]
 8006d4e:	466d      	mov	r5, sp
 8006d50:	f106 0410 	add.w	r4, r6, #16
 8006d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	602b      	str	r3, [r5, #0]
 8006d5c:	1d33      	adds	r3, r6, #4
 8006d5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d60:	6838      	ldr	r0, [r7, #0]
 8006d62:	f003 fce5 	bl	800a730 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <HAL_PCD_Start+0x16>
 8006d92:	2302      	movs	r3, #2
 8006d94:	e016      	b.n	8006dc4 <HAL_PCD_Start+0x44>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f003 fc94 	bl	800a6d0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006da8:	2101      	movs	r1, #1
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f007 ff5e 	bl	800ec6c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f006 f979 	bl	800d0ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f006 f971 	bl	800d0c0 <USB_ReadInterrupts>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de8:	d102      	bne.n	8006df0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 faf5 	bl	80073da <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f006 f963 	bl	800d0c0 <USB_ReadInterrupts>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e04:	d112      	bne.n	8006e2c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e18:	b292      	uxth	r2, r2
 8006e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f007 ffbd 	bl	800ed9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006e24:	2100      	movs	r1, #0
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f8c7 	bl	8006fba <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f006 f945 	bl	800d0c0 <USB_ReadInterrupts>
 8006e36:	4603      	mov	r3, r0
 8006e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e40:	d10b      	bne.n	8006e5a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e54:	b292      	uxth	r2, r2
 8006e56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f006 f92e 	bl	800d0c0 <USB_ReadInterrupts>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e6e:	d10b      	bne.n	8006e88 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e82:	b292      	uxth	r2, r2
 8006e84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f006 f917 	bl	800d0c0 <USB_ReadInterrupts>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e9c:	d126      	bne.n	8006eec <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0204 	bic.w	r2, r2, #4
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0208 	bic.w	r2, r2, #8
 8006ec8:	b292      	uxth	r2, r2
 8006eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f007 ff9e 	bl	800ee10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ee6:	b292      	uxth	r2, r2
 8006ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f006 f8e5 	bl	800d0c0 <USB_ReadInterrupts>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f00:	d126      	bne.n	8006f50 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0208 	orr.w	r2, r2, #8
 8006f14:	b292      	uxth	r2, r2
 8006f16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f2c:	b292      	uxth	r2, r2
 8006f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0204 	orr.w	r2, r2, #4
 8006f44:	b292      	uxth	r2, r2
 8006f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f007 ff46 	bl	800eddc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f006 f8b3 	bl	800d0c0 <USB_ReadInterrupts>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f64:	d10e      	bne.n	8006f84 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f78:	b292      	uxth	r2, r2
 8006f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f007 feff 	bl	800ed82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f006 f899 	bl	800d0c0 <USB_ReadInterrupts>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f98:	d10b      	bne.n	8006fb2 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fac:	b292      	uxth	r2, r2
 8006fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_PCD_SetAddress+0x1a>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e013      	b.n	8006ffc <HAL_PCD_SetAddress+0x42>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	78fa      	ldrb	r2, [r7, #3]
 8006fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	78fa      	ldrb	r2, [r7, #3]
 8006fea:	4611      	mov	r1, r2
 8006fec:	4618      	mov	r0, r3
 8006fee:	f006 f84a 	bl	800d086 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	4608      	mov	r0, r1
 800700e:	4611      	mov	r1, r2
 8007010:	461a      	mov	r2, r3
 8007012:	4603      	mov	r3, r0
 8007014:	70fb      	strb	r3, [r7, #3]
 8007016:	460b      	mov	r3, r1
 8007018:	803b      	strh	r3, [r7, #0]
 800701a:	4613      	mov	r3, r2
 800701c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007026:	2b00      	cmp	r3, #0
 8007028:	da0e      	bge.n	8007048 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	705a      	strb	r2, [r3, #1]
 8007046:	e00e      	b.n	8007066 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	f003 0207 	and.w	r2, r3, #7
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	4413      	add	r3, r2
 800705e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007066:	78fb      	ldrb	r3, [r7, #3]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	b2da      	uxtb	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007072:	883a      	ldrh	r2, [r7, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	78ba      	ldrb	r2, [r7, #2]
 800707c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007090:	78bb      	ldrb	r3, [r7, #2]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d102      	bne.n	800709c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_PCD_EP_Open+0xa6>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e00e      	b.n	80070c8 <HAL_PCD_EP_Open+0xc4>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68f9      	ldr	r1, [r7, #12]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f003 fb59 	bl	800a770 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80070c6:	7afb      	ldrb	r3, [r7, #11]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da0e      	bge.n	8007102 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	4613      	mov	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	705a      	strb	r2, [r3, #1]
 8007100:	e00e      	b.n	8007120 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	f003 0207 	and.w	r2, r3, #7
 8007108:	4613      	mov	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	4413      	add	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	b2da      	uxtb	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_PCD_EP_Close+0x6a>
 8007136:	2302      	movs	r3, #2
 8007138:	e00e      	b.n	8007158 <HAL_PCD_EP_Close+0x88>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	4618      	mov	r0, r3
 800714a:	f003 fe7b 	bl	800ae44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	607a      	str	r2, [r7, #4]
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	460b      	mov	r3, r1
 800716e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007170:	7afb      	ldrb	r3, [r7, #11]
 8007172:	f003 0207 	and.w	r2, r3, #7
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2200      	movs	r2, #0
 8007198:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2200      	movs	r2, #0
 800719e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d106      	bne.n	80071c4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6979      	ldr	r1, [r7, #20]
 80071bc:	4618      	mov	r0, r3
 80071be:	f004 f82d 	bl	800b21c <USB_EPStartXfer>
 80071c2:	e005      	b.n	80071d0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6979      	ldr	r1, [r7, #20]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f004 f826 	bl	800b21c <USB_EPStartXfer>
  }

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	f003 0207 	and.w	r2, r3, #7
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	00db      	lsls	r3, r3, #3
 80071f6:	440b      	add	r3, r1
 80071f8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80071fc:	681b      	ldr	r3, [r3, #0]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr

08007208 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	460b      	mov	r3, r1
 8007216:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	4613      	mov	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2200      	movs	r2, #0
 800724c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2201      	movs	r2, #1
 8007252:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	b2da      	uxtb	r2, r3
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6979      	ldr	r1, [r7, #20]
 8007270:	4618      	mov	r0, r3
 8007272:	f003 ffd3 	bl	800b21c <USB_EPStartXfer>
 8007276:	e005      	b.n	8007284 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6979      	ldr	r1, [r7, #20]
 800727e:	4618      	mov	r0, r3
 8007280:	f003 ffcc 	bl	800b21c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	f003 0207 	and.w	r2, r3, #7
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d901      	bls.n	80072ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e03e      	b.n	800732a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	da0e      	bge.n	80072d2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	00db      	lsls	r3, r3, #3
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	4413      	add	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2201      	movs	r2, #1
 80072ce:	705a      	strb	r2, [r3, #1]
 80072d0:	e00c      	b.n	80072ec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80072d2:	78fa      	ldrb	r2, [r7, #3]
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	4413      	add	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072f2:	78fb      	ldrb	r3, [r7, #3]
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_PCD_EP_SetStall+0x7e>
 8007308:	2302      	movs	r3, #2
 800730a:	e00e      	b.n	800732a <HAL_PCD_EP_SetStall+0x9c>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68f9      	ldr	r1, [r7, #12]
 800731a:	4618      	mov	r0, r3
 800731c:	f005 fdb6 	bl	800ce8c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	f003 020f 	and.w	r2, r3, #15
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	429a      	cmp	r2, r3
 800734a:	d901      	bls.n	8007350 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e040      	b.n	80073d2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007354:	2b00      	cmp	r3, #0
 8007356:	da0e      	bge.n	8007376 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2201      	movs	r2, #1
 8007372:	705a      	strb	r2, [r3, #1]
 8007374:	e00e      	b.n	8007394 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	f003 0207 	and.w	r2, r3, #7
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	4413      	add	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_PCD_EP_ClrStall+0x82>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e00e      	b.n	80073d2 <HAL_PCD_EP_ClrStall+0xa0>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68f9      	ldr	r1, [r7, #12]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f005 fdb2 	bl	800cf2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b08e      	sub	sp, #56	; 0x38
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80073e2:	e2ec      	b.n	80079be <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073ec:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80073ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f003 030f 	and.w	r3, r3, #15
 80073f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80073fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f040 8161 	bne.w	80076c6 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007404:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b00      	cmp	r3, #0
 800740c:	d152      	bne.n	80074b4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800741a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741e:	81fb      	strh	r3, [r7, #14]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	89fb      	ldrh	r3, [r7, #14]
 8007426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3328      	adds	r3, #40	; 0x28
 8007436:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007440:	b29b      	uxth	r3, r3
 8007442:	461a      	mov	r2, r3
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	4413      	add	r3, r2
 800744c:	3302      	adds	r3, #2
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6812      	ldr	r2, [r2, #0]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	695a      	ldr	r2, [r3, #20]
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	441a      	add	r2, r3
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007472:	2100      	movs	r1, #0
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f007 fc6a 	bl	800ed4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 829b 	beq.w	80079be <PCD_EP_ISR_Handler+0x5e4>
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 8296 	bne.w	80079be <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	b292      	uxth	r2, r2
 80074a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80074b2:	e284      	b.n	80079be <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80074c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80074c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d034      	beq.n	8007538 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	4413      	add	r3, r2
 80074e2:	3306      	adds	r3, #6
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6812      	ldr	r2, [r2, #0]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800750c:	b29b      	uxth	r3, r3
 800750e:	f005 fe2b 	bl	800d168 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29a      	uxth	r2, r3
 800751a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800751e:	4013      	ands	r3, r2
 8007520:	823b      	strh	r3, [r7, #16]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	8a3a      	ldrh	r2, [r7, #16]
 8007528:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800752c:	b292      	uxth	r2, r2
 800752e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f007 fbdf 	bl	800ecf4 <HAL_PCD_SetupStageCallback>
 8007536:	e242      	b.n	80079be <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007538:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800753c:	2b00      	cmp	r3, #0
 800753e:	f280 823e 	bge.w	80079be <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29a      	uxth	r2, r3
 800754a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800754e:	4013      	ands	r3, r2
 8007550:	83bb      	strh	r3, [r7, #28]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	8bba      	ldrh	r2, [r7, #28]
 8007558:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800755c:	b292      	uxth	r2, r2
 800755e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007568:	b29b      	uxth	r3, r3
 800756a:	461a      	mov	r2, r3
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	4413      	add	r3, r2
 8007574:	3306      	adds	r3, #6
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6812      	ldr	r2, [r2, #0]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d019      	beq.n	80075c8 <PCD_EP_ISR_Handler+0x1ee>
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d015      	beq.n	80075c8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6818      	ldr	r0, [r3, #0]
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	6959      	ldr	r1, [r3, #20]
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f005 fddb 	bl	800d168 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	695a      	ldr	r2, [r3, #20]
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	441a      	add	r2, r3
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80075c0:	2100      	movs	r1, #0
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f007 fba8 	bl	800ed18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f040 81f2 	bne.w	80079be <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	61bb      	str	r3, [r7, #24]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	4413      	add	r3, r2
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d112      	bne.n	8007628 <PCD_EP_ISR_Handler+0x24e>
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800760c:	b29a      	uxth	r2, r3
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	801a      	strh	r2, [r3, #0]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007620:	b29a      	uxth	r2, r3
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	e02f      	b.n	8007688 <PCD_EP_ISR_Handler+0x2ae>
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	2b3e      	cmp	r3, #62	; 0x3e
 800762e:	d813      	bhi.n	8007658 <PCD_EP_ISR_Handler+0x27e>
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	085b      	lsrs	r3, r3, #1
 8007636:	633b      	str	r3, [r7, #48]	; 0x30
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <PCD_EP_ISR_Handler+0x270>
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	3301      	adds	r3, #1
 8007648:	633b      	str	r3, [r7, #48]	; 0x30
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	b29b      	uxth	r3, r3
 800764e:	029b      	lsls	r3, r3, #10
 8007650:	b29a      	uxth	r2, r3
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	e017      	b.n	8007688 <PCD_EP_ISR_Handler+0x2ae>
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	633b      	str	r3, [r7, #48]	; 0x30
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <PCD_EP_ISR_Handler+0x298>
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	3b01      	subs	r3, #1
 8007670:	633b      	str	r3, [r7, #48]	; 0x30
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	b29b      	uxth	r3, r3
 8007676:	029b      	lsls	r3, r3, #10
 8007678:	b29b      	uxth	r3, r3
 800767a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007682:	b29a      	uxth	r2, r3
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007698:	827b      	strh	r3, [r7, #18]
 800769a:	8a7b      	ldrh	r3, [r7, #18]
 800769c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076a0:	827b      	strh	r3, [r7, #18]
 80076a2:	8a7b      	ldrh	r3, [r7, #18]
 80076a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076a8:	827b      	strh	r3, [r7, #18]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	8a7b      	ldrh	r3, [r7, #18]
 80076b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	8013      	strh	r3, [r2, #0]
 80076c4:	e17b      	b.n	80079be <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80076d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f280 80ea 	bge.w	80078b6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80076f8:	4013      	ands	r3, r2
 80076fa:	853b      	strh	r3, [r7, #40]	; 0x28
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800770c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007710:	b292      	uxth	r2, r2
 8007712:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007714:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	7b1b      	ldrb	r3, [r3, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d122      	bne.n	8007778 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800773a:	b29b      	uxth	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4413      	add	r3, r2
 8007746:	3306      	adds	r3, #6
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6812      	ldr	r2, [r2, #0]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800775a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800775c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 8087 	beq.w	8007872 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	6959      	ldr	r1, [r3, #20]
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	88da      	ldrh	r2, [r3, #6]
 8007770:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007772:	f005 fcf9 	bl	800d168 <USB_ReadPMA>
 8007776:	e07c      	b.n	8007872 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	78db      	ldrb	r3, [r3, #3]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d108      	bne.n	8007792 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007780:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007782:	461a      	mov	r2, r3
 8007784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f927 	bl	80079da <HAL_PCD_EP_DB_Receive>
 800778c:	4603      	mov	r3, r0
 800778e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007790:	e06f      	b.n	8007872 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ac:	847b      	strh	r3, [r7, #34]	; 0x22
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	441a      	add	r2, r3
 80077bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	881b      	ldrh	r3, [r3, #0]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d021      	beq.n	8007830 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	4413      	add	r3, r2
 8007800:	3302      	adds	r3, #2
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6812      	ldr	r2, [r2, #0]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007814:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8007816:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007818:	2b00      	cmp	r3, #0
 800781a:	d02a      	beq.n	8007872 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	6959      	ldr	r1, [r3, #20]
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	891a      	ldrh	r2, [r3, #8]
 8007828:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800782a:	f005 fc9d 	bl	800d168 <USB_ReadPMA>
 800782e:	e020      	b.n	8007872 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007838:	b29b      	uxth	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	4413      	add	r3, r2
 8007844:	3306      	adds	r3, #6
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6812      	ldr	r2, [r2, #0]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007858:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800785a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800785c:	2b00      	cmp	r3, #0
 800785e:	d008      	beq.n	8007872 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	6959      	ldr	r1, [r3, #20]
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	895a      	ldrh	r2, [r3, #10]
 800786c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800786e:	f005 fc7b 	bl	800d168 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	69da      	ldr	r2, [r3, #28]
 8007876:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007878:	441a      	add	r2, r3
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	695a      	ldr	r2, [r3, #20]
 8007882:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007884:	441a      	add	r2, r3
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d004      	beq.n	800789c <PCD_EP_ISR_Handler+0x4c2>
 8007892:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	429a      	cmp	r2, r3
 800789a:	d206      	bcs.n	80078aa <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f007 fa38 	bl	800ed18 <HAL_PCD_DataOutStageCallback>
 80078a8:	e005      	b.n	80078b6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078b0:	4618      	mov	r0, r3
 80078b2:	f003 fcb3 	bl	800b21c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80078b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80078b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d07e      	beq.n	80079be <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80078c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	4413      	add	r3, r2
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80078ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ee:	843b      	strh	r3, [r7, #32]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	441a      	add	r2, r3
 80078fe:	8c3b      	ldrh	r3, [r7, #32]
 8007900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007908:	b29b      	uxth	r3, r3
 800790a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	78db      	ldrb	r3, [r3, #3]
 8007910:	2b03      	cmp	r3, #3
 8007912:	d00c      	beq.n	800792e <PCD_EP_ISR_Handler+0x554>
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	78db      	ldrb	r3, [r3, #3]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d008      	beq.n	800792e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007920:	2b02      	cmp	r3, #2
 8007922:	d146      	bne.n	80079b2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007924:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792a:	2b00      	cmp	r3, #0
 800792c:	d141      	bne.n	80079b2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	4413      	add	r3, r2
 8007942:	3302      	adds	r3, #2
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6812      	ldr	r2, [r2, #0]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007956:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	699a      	ldr	r2, [r3, #24]
 800795c:	8bfb      	ldrh	r3, [r7, #30]
 800795e:	429a      	cmp	r2, r3
 8007960:	d906      	bls.n	8007970 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	8bfb      	ldrh	r3, [r7, #30]
 8007968:	1ad2      	subs	r2, r2, r3
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	619a      	str	r2, [r3, #24]
 800796e:	e002      	b.n	8007976 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	2200      	movs	r2, #0
 8007974:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d106      	bne.n	800798c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f007 f9e2 	bl	800ed4e <HAL_PCD_DataInStageCallback>
 800798a:	e018      	b.n	80079be <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	695a      	ldr	r2, [r3, #20]
 8007990:	8bfb      	ldrh	r3, [r7, #30]
 8007992:	441a      	add	r2, r3
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	8bfb      	ldrh	r3, [r7, #30]
 800799e:	441a      	add	r2, r3
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079aa:	4618      	mov	r0, r3
 80079ac:	f003 fc36 	bl	800b21c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80079b0:	e005      	b.n	80079be <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80079b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80079b4:	461a      	mov	r2, r3
 80079b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f91b 	bl	8007bf4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	b21b      	sxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f6ff ad0a 	blt.w	80073e4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3738      	adds	r7, #56	; 0x38
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b088      	sub	sp, #32
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	4613      	mov	r3, r2
 80079e6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80079e8:	88fb      	ldrh	r3, [r7, #6]
 80079ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d07e      	beq.n	8007af0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	4413      	add	r3, r2
 8007a06:	3302      	adds	r3, #2
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	6812      	ldr	r2, [r2, #0]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	699a      	ldr	r2, [r3, #24]
 8007a20:	8b7b      	ldrh	r3, [r7, #26]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d306      	bcc.n	8007a34 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	8b7b      	ldrh	r3, [r7, #26]
 8007a2c:	1ad2      	subs	r2, r2, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	619a      	str	r2, [r3, #24]
 8007a32:	e002      	b.n	8007a3a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2200      	movs	r2, #0
 8007a38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d123      	bne.n	8007a8a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5c:	833b      	strh	r3, [r7, #24]
 8007a5e:	8b3b      	ldrh	r3, [r7, #24]
 8007a60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a64:	833b      	strh	r3, [r7, #24]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	441a      	add	r2, r3
 8007a74:	8b3b      	ldrh	r3, [r7, #24]
 8007a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01f      	beq.n	8007ad4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aae:	82fb      	strh	r3, [r7, #22]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	441a      	add	r2, r3
 8007abe:	8afb      	ldrh	r3, [r7, #22]
 8007ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007acc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007ad4:	8b7b      	ldrh	r3, [r7, #26]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 8087 	beq.w	8007bea <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	6959      	ldr	r1, [r3, #20]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	891a      	ldrh	r2, [r3, #8]
 8007ae8:	8b7b      	ldrh	r3, [r7, #26]
 8007aea:	f005 fb3d 	bl	800d168 <USB_ReadPMA>
 8007aee:	e07c      	b.n	8007bea <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	00db      	lsls	r3, r3, #3
 8007b02:	4413      	add	r3, r2
 8007b04:	3306      	adds	r3, #6
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b18:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	8b7b      	ldrh	r3, [r7, #26]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d306      	bcc.n	8007b32 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	699a      	ldr	r2, [r3, #24]
 8007b28:	8b7b      	ldrh	r3, [r7, #26]
 8007b2a:	1ad2      	subs	r2, r2, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	619a      	str	r2, [r3, #24]
 8007b30:	e002      	b.n	8007b38 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2200      	movs	r2, #0
 8007b36:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d123      	bne.n	8007b88 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5a:	83fb      	strh	r3, [r7, #30]
 8007b5c:	8bfb      	ldrh	r3, [r7, #30]
 8007b5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b62:	83fb      	strh	r3, [r7, #30]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	441a      	add	r2, r3
 8007b72:	8bfb      	ldrh	r3, [r7, #30]
 8007b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d11f      	bne.n	8007bd2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bac:	83bb      	strh	r3, [r7, #28]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	441a      	add	r2, r3
 8007bbc:	8bbb      	ldrh	r3, [r7, #28]
 8007bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007bd2:	8b7b      	ldrh	r3, [r7, #26]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d008      	beq.n	8007bea <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6818      	ldr	r0, [r3, #0]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	6959      	ldr	r1, [r3, #20]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	895a      	ldrh	r2, [r3, #10]
 8007be4:	8b7b      	ldrh	r3, [r7, #26]
 8007be6:	f005 fabf 	bl	800d168 <USB_ReadPMA>
    }
  }

  return count;
 8007bea:	8b7b      	ldrh	r3, [r7, #26]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3720      	adds	r7, #32
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b0a2      	sub	sp, #136	; 0x88
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c02:	88fb      	ldrh	r3, [r7, #6]
 8007c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 81c7 	beq.w	8007f9c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	4413      	add	r3, r2
 8007c22:	3302      	adds	r3, #2
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	699a      	ldr	r2, [r3, #24]
 8007c3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d907      	bls.n	8007c56 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	699a      	ldr	r2, [r3, #24]
 8007c4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	619a      	str	r2, [r3, #24]
 8007c54:	e002      	b.n	8007c5c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f040 80b9 	bne.w	8007dd8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	785b      	ldrb	r3, [r3, #1]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d126      	bne.n	8007cbc <HAL_PCD_EP_DB_Transmit+0xc8>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	4413      	add	r3, r2
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	011a      	lsls	r2, r3, #4
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	4413      	add	r3, r2
 8007c90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	e01a      	b.n	8007cf2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d116      	bne.n	8007cf2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	4413      	add	r3, r2
 8007cda:	633b      	str	r3, [r7, #48]	; 0x30
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	011a      	lsls	r2, r3, #4
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	2200      	movs	r2, #0
 8007cf0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	623b      	str	r3, [r7, #32]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d126      	bne.n	8007d4e <HAL_PCD_EP_DB_Transmit+0x15a>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	61bb      	str	r3, [r7, #24]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	461a      	mov	r2, r3
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	4413      	add	r3, r2
 8007d16:	61bb      	str	r3, [r7, #24]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	011a      	lsls	r2, r3, #4
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	4413      	add	r3, r2
 8007d22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	801a      	strh	r2, [r3, #0]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	e017      	b.n	8007d7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	785b      	ldrb	r3, [r3, #1]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d113      	bne.n	8007d7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	4413      	add	r3, r2
 8007d66:	623b      	str	r3, [r7, #32]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	011a      	lsls	r2, r3, #4
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	4413      	add	r3, r2
 8007d72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d76:	61fb      	str	r3, [r7, #28]
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	4619      	mov	r1, r3
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f006 ffe2 	bl	800ed4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007d8a:	88fb      	ldrh	r3, [r7, #6]
 8007d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 82d4 	beq.w	800833e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db0:	827b      	strh	r3, [r7, #18]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	441a      	add	r2, r3
 8007dc0:	8a7b      	ldrh	r3, [r7, #18]
 8007dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	8013      	strh	r3, [r2, #0]
 8007dd6:	e2b2      	b.n	800833e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007dd8:	88fb      	ldrh	r3, [r7, #6]
 8007dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d021      	beq.n	8007e26 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	461a      	mov	r2, r3
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	441a      	add	r2, r3
 8007e0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	f040 8286 	bne.w	800833e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	695a      	ldr	r2, [r3, #20]
 8007e36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e3a:	441a      	add	r2, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	69da      	ldr	r2, [r3, #28]
 8007e44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e48:	441a      	add	r2, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	6a1a      	ldr	r2, [r3, #32]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d309      	bcc.n	8007e6e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	6a1a      	ldr	r2, [r3, #32]
 8007e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e66:	1ad2      	subs	r2, r2, r3
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	621a      	str	r2, [r3, #32]
 8007e6c:	e015      	b.n	8007e9a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d107      	bne.n	8007e86 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8007e76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e7a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007e84:	e009      	b.n	8007e9a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2200      	movs	r2, #0
 8007e98:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	785b      	ldrb	r3, [r3, #1]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d155      	bne.n	8007f4e <HAL_PCD_EP_DB_Transmit+0x35a>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	4413      	add	r3, r2
 8007eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	011a      	lsls	r2, r3, #4
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d112      	bne.n	8007ef6 <HAL_PCD_EP_DB_Transmit+0x302>
 8007ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	801a      	strh	r2, [r3, #0]
 8007ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef2:	801a      	strh	r2, [r3, #0]
 8007ef4:	e047      	b.n	8007f86 <HAL_PCD_EP_DB_Transmit+0x392>
 8007ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef8:	2b3e      	cmp	r3, #62	; 0x3e
 8007efa:	d811      	bhi.n	8007f20 <HAL_PCD_EP_DB_Transmit+0x32c>
 8007efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007efe:	085b      	lsrs	r3, r3, #1
 8007f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <HAL_PCD_EP_DB_Transmit+0x31e>
 8007f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f0e:	3301      	adds	r3, #1
 8007f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	029b      	lsls	r3, r3, #10
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1c:	801a      	strh	r2, [r3, #0]
 8007f1e:	e032      	b.n	8007f86 <HAL_PCD_EP_DB_Transmit+0x392>
 8007f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f28:	f003 031f 	and.w	r3, r3, #31
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <HAL_PCD_EP_DB_Transmit+0x342>
 8007f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f32:	3b01      	subs	r3, #1
 8007f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	029b      	lsls	r3, r3, #10
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f4a:	801a      	strh	r2, [r3, #0]
 8007f4c:	e01b      	b.n	8007f86 <HAL_PCD_EP_DB_Transmit+0x392>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d117      	bne.n	8007f86 <HAL_PCD_EP_DB_Transmit+0x392>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	461a      	mov	r2, r3
 8007f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f6a:	4413      	add	r3, r2
 8007f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	011a      	lsls	r2, r3, #4
 8007f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f76:	4413      	add	r3, r2
 8007f78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f84:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	6959      	ldr	r1, [r3, #20]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	891a      	ldrh	r2, [r3, #8]
 8007f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f005 f8a2 	bl	800d0de <USB_WritePMA>
 8007f9a:	e1d0      	b.n	800833e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	4413      	add	r3, r2
 8007fb0:	3306      	adds	r3, #6
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	6812      	ldr	r2, [r2, #0]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	699a      	ldr	r2, [r3, #24]
 8007fcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d307      	bcc.n	8007fe4 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	699a      	ldr	r2, [r3, #24]
 8007fd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007fdc:	1ad2      	subs	r2, r2, r3
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	619a      	str	r2, [r3, #24]
 8007fe2:	e002      	b.n	8007fea <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f040 80c4 	bne.w	800817c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	785b      	ldrb	r3, [r3, #1]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d126      	bne.n	800804a <HAL_PCD_EP_DB_Transmit+0x456>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800800a:	b29b      	uxth	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008010:	4413      	add	r3, r2
 8008012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	011a      	lsls	r2, r3, #4
 800801a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801c:	4413      	add	r3, r2
 800801e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008022:	66bb      	str	r3, [r7, #104]	; 0x68
 8008024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	b29b      	uxth	r3, r3
 800802a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800802e:	b29a      	uxth	r2, r3
 8008030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008032:	801a      	strh	r2, [r3, #0]
 8008034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008042:	b29a      	uxth	r2, r3
 8008044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008046:	801a      	strh	r2, [r3, #0]
 8008048:	e01a      	b.n	8008080 <HAL_PCD_EP_DB_Transmit+0x48c>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d116      	bne.n	8008080 <HAL_PCD_EP_DB_Transmit+0x48c>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	677b      	str	r3, [r7, #116]	; 0x74
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008060:	b29b      	uxth	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008066:	4413      	add	r3, r2
 8008068:	677b      	str	r3, [r7, #116]	; 0x74
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	011a      	lsls	r2, r3, #4
 8008070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008072:	4413      	add	r3, r2
 8008074:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008078:	673b      	str	r3, [r7, #112]	; 0x70
 800807a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800807c:	2200      	movs	r2, #0
 800807e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	67bb      	str	r3, [r7, #120]	; 0x78
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	785b      	ldrb	r3, [r3, #1]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d12f      	bne.n	80080ee <HAL_PCD_EP_DB_Transmit+0x4fa>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809e:	b29b      	uxth	r3, r3
 80080a0:	461a      	mov	r2, r3
 80080a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080a6:	4413      	add	r3, r2
 80080a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	011a      	lsls	r2, r3, #4
 80080b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080b6:	4413      	add	r3, r2
 80080b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080d2:	801a      	strh	r2, [r3, #0]
 80080d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	e017      	b.n	800811e <HAL_PCD_EP_DB_Transmit+0x52a>
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d113      	bne.n	800811e <HAL_PCD_EP_DB_Transmit+0x52a>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080fe:	b29b      	uxth	r3, r3
 8008100:	461a      	mov	r2, r3
 8008102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008104:	4413      	add	r3, r2
 8008106:	67bb      	str	r3, [r7, #120]	; 0x78
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	011a      	lsls	r2, r3, #4
 800810e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008110:	4413      	add	r3, r2
 8008112:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008116:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800811a:	2200      	movs	r2, #0
 800811c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	4619      	mov	r1, r3
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f006 fe12 	bl	800ed4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800812a:	88fb      	ldrh	r3, [r7, #6]
 800812c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008130:	2b00      	cmp	r3, #0
 8008132:	f040 8104 	bne.w	800833e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29b      	uxth	r3, r3
 8008148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800814c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008150:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	441a      	add	r2, r3
 8008162:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800816e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008176:	b29b      	uxth	r3, r3
 8008178:	8013      	strh	r3, [r2, #0]
 800817a:	e0e0      	b.n	800833e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800817c:	88fb      	ldrh	r3, [r7, #6]
 800817e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d121      	bne.n	80081ca <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	b29b      	uxth	r3, r3
 8008198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	461a      	mov	r2, r3
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	441a      	add	r2, r3
 80081b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80081b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	f040 80b4 	bne.w	800833e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	695a      	ldr	r2, [r3, #20]
 80081da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80081de:	441a      	add	r2, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	69da      	ldr	r2, [r3, #28]
 80081e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80081ec:	441a      	add	r2, r3
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	6a1a      	ldr	r2, [r3, #32]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d309      	bcc.n	8008212 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6a1a      	ldr	r2, [r3, #32]
 8008208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800820a:	1ad2      	subs	r2, r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	621a      	str	r2, [r3, #32]
 8008210:	e015      	b.n	800823e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d107      	bne.n	800822a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800821a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800821e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008228:	e009      	b.n	800823e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2200      	movs	r2, #0
 8008234:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	667b      	str	r3, [r7, #100]	; 0x64
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	785b      	ldrb	r3, [r3, #1]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d155      	bne.n	80082f8 <HAL_PCD_EP_DB_Transmit+0x704>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800825a:	b29b      	uxth	r3, r3
 800825c:	461a      	mov	r2, r3
 800825e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008260:	4413      	add	r3, r2
 8008262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	011a      	lsls	r2, r3, #4
 800826a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800826c:	4413      	add	r3, r2
 800826e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008272:	65bb      	str	r3, [r7, #88]	; 0x58
 8008274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008276:	2b00      	cmp	r3, #0
 8008278:	d112      	bne.n	80082a0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800827a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008284:	b29a      	uxth	r2, r3
 8008286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008288:	801a      	strh	r2, [r3, #0]
 800828a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008298:	b29a      	uxth	r2, r3
 800829a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800829c:	801a      	strh	r2, [r3, #0]
 800829e:	e044      	b.n	800832a <HAL_PCD_EP_DB_Transmit+0x736>
 80082a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a2:	2b3e      	cmp	r3, #62	; 0x3e
 80082a4:	d811      	bhi.n	80082ca <HAL_PCD_EP_DB_Transmit+0x6d6>
 80082a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a8:	085b      	lsrs	r3, r3, #1
 80082aa:	657b      	str	r3, [r7, #84]	; 0x54
 80082ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <HAL_PCD_EP_DB_Transmit+0x6c8>
 80082b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b8:	3301      	adds	r3, #1
 80082ba:	657b      	str	r3, [r7, #84]	; 0x54
 80082bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082be:	b29b      	uxth	r3, r3
 80082c0:	029b      	lsls	r3, r3, #10
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	e02f      	b.n	800832a <HAL_PCD_EP_DB_Transmit+0x736>
 80082ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082cc:	095b      	lsrs	r3, r3, #5
 80082ce:	657b      	str	r3, [r7, #84]	; 0x54
 80082d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082d2:	f003 031f 	and.w	r3, r3, #31
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d102      	bne.n	80082e0 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80082da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082dc:	3b01      	subs	r3, #1
 80082de:	657b      	str	r3, [r7, #84]	; 0x54
 80082e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	029b      	lsls	r3, r3, #10
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082f4:	801a      	strh	r2, [r3, #0]
 80082f6:	e018      	b.n	800832a <HAL_PCD_EP_DB_Transmit+0x736>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	785b      	ldrb	r3, [r3, #1]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d114      	bne.n	800832a <HAL_PCD_EP_DB_Transmit+0x736>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008308:	b29b      	uxth	r3, r3
 800830a:	461a      	mov	r2, r3
 800830c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800830e:	4413      	add	r3, r2
 8008310:	667b      	str	r3, [r7, #100]	; 0x64
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	011a      	lsls	r2, r3, #4
 8008318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800831a:	4413      	add	r3, r2
 800831c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008320:	663b      	str	r3, [r7, #96]	; 0x60
 8008322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008324:	b29a      	uxth	r2, r3
 8008326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008328:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	6959      	ldr	r1, [r3, #20]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	895a      	ldrh	r2, [r3, #10]
 8008336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008338:	b29b      	uxth	r3, r3
 800833a:	f004 fed0 	bl	800d0de <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008358:	823b      	strh	r3, [r7, #16]
 800835a:	8a3b      	ldrh	r3, [r7, #16]
 800835c:	f083 0310 	eor.w	r3, r3, #16
 8008360:	823b      	strh	r3, [r7, #16]
 8008362:	8a3b      	ldrh	r3, [r7, #16]
 8008364:	f083 0320 	eor.w	r3, r3, #32
 8008368:	823b      	strh	r3, [r7, #16]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	441a      	add	r2, r3
 8008378:	8a3b      	ldrh	r3, [r7, #16]
 800837a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800837e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838a:	b29b      	uxth	r3, r3
 800838c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3788      	adds	r7, #136	; 0x88
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	607b      	str	r3, [r7, #4]
 80083a2:	460b      	mov	r3, r1
 80083a4:	817b      	strh	r3, [r7, #10]
 80083a6:	4613      	mov	r3, r2
 80083a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80083aa:	897b      	ldrh	r3, [r7, #10]
 80083ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083b6:	897b      	ldrh	r3, [r7, #10]
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	00db      	lsls	r3, r3, #3
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	4413      	add	r3, r2
 80083ca:	617b      	str	r3, [r7, #20]
 80083cc:	e009      	b.n	80083e2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80083ce:	897a      	ldrh	r2, [r7, #10]
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80083e2:	893b      	ldrh	r3, [r7, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d107      	bne.n	80083f8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2200      	movs	r2, #0
 80083ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	80da      	strh	r2, [r3, #6]
 80083f6:	e00b      	b.n	8008410 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2201      	movs	r2, #1
 80083fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	b29a      	uxth	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	0c1b      	lsrs	r3, r3, #16
 800840a:	b29a      	uxth	r2, r3
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	bc80      	pop	{r7}
 800841a:	4770      	bx	lr

0800841c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e31d      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800842e:	4b94      	ldr	r3, [pc, #592]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 030c 	and.w	r3, r3, #12
 8008436:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008438:	4b91      	ldr	r3, [pc, #580]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008440:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d07b      	beq.n	8008546 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b08      	cmp	r3, #8
 8008452:	d006      	beq.n	8008462 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	2b0c      	cmp	r3, #12
 8008458:	d10f      	bne.n	800847a <HAL_RCC_OscConfig+0x5e>
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008460:	d10b      	bne.n	800847a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008462:	4b87      	ldr	r3, [pc, #540]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d06a      	beq.n	8008544 <HAL_RCC_OscConfig+0x128>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d166      	bne.n	8008544 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e2f7      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d106      	bne.n	8008490 <HAL_RCC_OscConfig+0x74>
 8008482:	4b7f      	ldr	r3, [pc, #508]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a7e      	ldr	r2, [pc, #504]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 8008488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	e02d      	b.n	80084ec <HAL_RCC_OscConfig+0xd0>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10c      	bne.n	80084b2 <HAL_RCC_OscConfig+0x96>
 8008498:	4b79      	ldr	r3, [pc, #484]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a78      	ldr	r2, [pc, #480]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 800849e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	4b76      	ldr	r3, [pc, #472]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a75      	ldr	r2, [pc, #468]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80084aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	e01c      	b.n	80084ec <HAL_RCC_OscConfig+0xd0>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	2b05      	cmp	r3, #5
 80084b8:	d10c      	bne.n	80084d4 <HAL_RCC_OscConfig+0xb8>
 80084ba:	4b71      	ldr	r3, [pc, #452]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a70      	ldr	r2, [pc, #448]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80084c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	4b6e      	ldr	r3, [pc, #440]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a6d      	ldr	r2, [pc, #436]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80084cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	e00b      	b.n	80084ec <HAL_RCC_OscConfig+0xd0>
 80084d4:	4b6a      	ldr	r3, [pc, #424]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a69      	ldr	r2, [pc, #420]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80084da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084de:	6013      	str	r3, [r2, #0]
 80084e0:	4b67      	ldr	r3, [pc, #412]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a66      	ldr	r2, [pc, #408]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80084e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d013      	beq.n	800851c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084f4:	f7fc fd32 	bl	8004f5c <HAL_GetTick>
 80084f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084fa:	e008      	b.n	800850e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084fc:	f7fc fd2e 	bl	8004f5c <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b64      	cmp	r3, #100	; 0x64
 8008508:	d901      	bls.n	800850e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e2ad      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800850e:	4b5c      	ldr	r3, [pc, #368]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d0f0      	beq.n	80084fc <HAL_RCC_OscConfig+0xe0>
 800851a:	e014      	b.n	8008546 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800851c:	f7fc fd1e 	bl	8004f5c <HAL_GetTick>
 8008520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008522:	e008      	b.n	8008536 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008524:	f7fc fd1a 	bl	8004f5c <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b64      	cmp	r3, #100	; 0x64
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e299      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008536:	4b52      	ldr	r3, [pc, #328]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1f0      	bne.n	8008524 <HAL_RCC_OscConfig+0x108>
 8008542:	e000      	b.n	8008546 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d05a      	beq.n	8008608 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	2b04      	cmp	r3, #4
 8008556:	d005      	beq.n	8008564 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	2b0c      	cmp	r3, #12
 800855c:	d119      	bne.n	8008592 <HAL_RCC_OscConfig+0x176>
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d116      	bne.n	8008592 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008564:	4b46      	ldr	r3, [pc, #280]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <HAL_RCC_OscConfig+0x160>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d001      	beq.n	800857c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e276      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800857c:	4b40      	ldr	r3, [pc, #256]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	493d      	ldr	r1, [pc, #244]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 800858c:	4313      	orrs	r3, r2
 800858e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008590:	e03a      	b.n	8008608 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d020      	beq.n	80085dc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800859a:	4b3a      	ldr	r3, [pc, #232]	; (8008684 <HAL_RCC_OscConfig+0x268>)
 800859c:	2201      	movs	r2, #1
 800859e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085a0:	f7fc fcdc 	bl	8004f5c <HAL_GetTick>
 80085a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085a6:	e008      	b.n	80085ba <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085a8:	f7fc fcd8 	bl	8004f5c <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d901      	bls.n	80085ba <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e257      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085ba:	4b31      	ldr	r3, [pc, #196]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0f0      	beq.n	80085a8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085c6:	4b2e      	ldr	r3, [pc, #184]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	021b      	lsls	r3, r3, #8
 80085d4:	492a      	ldr	r1, [pc, #168]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	604b      	str	r3, [r1, #4]
 80085da:	e015      	b.n	8008608 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085dc:	4b29      	ldr	r3, [pc, #164]	; (8008684 <HAL_RCC_OscConfig+0x268>)
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085e2:	f7fc fcbb 	bl	8004f5c <HAL_GetTick>
 80085e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085e8:	e008      	b.n	80085fc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085ea:	f7fc fcb7 	bl	8004f5c <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d901      	bls.n	80085fc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e236      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085fc:	4b20      	ldr	r3, [pc, #128]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1f0      	bne.n	80085ea <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 80b8 	beq.w	8008786 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d170      	bne.n	80086fe <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800861c:	4b18      	ldr	r3, [pc, #96]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <HAL_RCC_OscConfig+0x218>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d101      	bne.n	8008634 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e21a      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a1a      	ldr	r2, [r3, #32]
 8008638:	4b11      	ldr	r3, [pc, #68]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008640:	429a      	cmp	r2, r3
 8008642:	d921      	bls.n	8008688 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fc69 	bl	8008f20 <RCC_SetFlashLatencyFromMSIRange>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e208      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008658:	4b09      	ldr	r3, [pc, #36]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	4906      	ldr	r1, [pc, #24]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 8008666:	4313      	orrs	r3, r2
 8008668:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800866a:	4b05      	ldr	r3, [pc, #20]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	061b      	lsls	r3, r3, #24
 8008678:	4901      	ldr	r1, [pc, #4]	; (8008680 <HAL_RCC_OscConfig+0x264>)
 800867a:	4313      	orrs	r3, r2
 800867c:	604b      	str	r3, [r1, #4]
 800867e:	e020      	b.n	80086c2 <HAL_RCC_OscConfig+0x2a6>
 8008680:	40023800 	.word	0x40023800
 8008684:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008688:	4b99      	ldr	r3, [pc, #612]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	4996      	ldr	r1, [pc, #600]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008696:	4313      	orrs	r3, r2
 8008698:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800869a:	4b95      	ldr	r3, [pc, #596]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	061b      	lsls	r3, r3, #24
 80086a8:	4991      	ldr	r1, [pc, #580]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fc34 	bl	8008f20 <RCC_SetFlashLatencyFromMSIRange>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e1d3      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	0b5b      	lsrs	r3, r3, #13
 80086c8:	3301      	adds	r3, #1
 80086ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80086ce:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80086d2:	4a87      	ldr	r2, [pc, #540]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80086d4:	6892      	ldr	r2, [r2, #8]
 80086d6:	0912      	lsrs	r2, r2, #4
 80086d8:	f002 020f 	and.w	r2, r2, #15
 80086dc:	4985      	ldr	r1, [pc, #532]	; (80088f4 <HAL_RCC_OscConfig+0x4d8>)
 80086de:	5c8a      	ldrb	r2, [r1, r2]
 80086e0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80086e2:	4a85      	ldr	r2, [pc, #532]	; (80088f8 <HAL_RCC_OscConfig+0x4dc>)
 80086e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80086e6:	4b85      	ldr	r3, [pc, #532]	; (80088fc <HAL_RCC_OscConfig+0x4e0>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fc fbea 	bl	8004ec4 <HAL_InitTick>
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d045      	beq.n	8008786 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	e1b5      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d029      	beq.n	800875a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008706:	4b7e      	ldr	r3, [pc, #504]	; (8008900 <HAL_RCC_OscConfig+0x4e4>)
 8008708:	2201      	movs	r2, #1
 800870a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800870c:	f7fc fc26 	bl	8004f5c <HAL_GetTick>
 8008710:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008714:	f7fc fc22 	bl	8004f5c <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b02      	cmp	r3, #2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e1a1      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008726:	4b72      	ldr	r3, [pc, #456]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0f0      	beq.n	8008714 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008732:	4b6f      	ldr	r3, [pc, #444]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	496c      	ldr	r1, [pc, #432]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008740:	4313      	orrs	r3, r2
 8008742:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008744:	4b6a      	ldr	r3, [pc, #424]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	061b      	lsls	r3, r3, #24
 8008752:	4967      	ldr	r1, [pc, #412]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008754:	4313      	orrs	r3, r2
 8008756:	604b      	str	r3, [r1, #4]
 8008758:	e015      	b.n	8008786 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800875a:	4b69      	ldr	r3, [pc, #420]	; (8008900 <HAL_RCC_OscConfig+0x4e4>)
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008760:	f7fc fbfc 	bl	8004f5c <HAL_GetTick>
 8008764:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008768:	f7fc fbf8 	bl	8004f5c <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e177      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800877a:	4b5d      	ldr	r3, [pc, #372]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1f0      	bne.n	8008768 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0308 	and.w	r3, r3, #8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d030      	beq.n	80087f4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d016      	beq.n	80087c8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800879a:	4b5a      	ldr	r3, [pc, #360]	; (8008904 <HAL_RCC_OscConfig+0x4e8>)
 800879c:	2201      	movs	r2, #1
 800879e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087a0:	f7fc fbdc 	bl	8004f5c <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087a8:	f7fc fbd8 	bl	8004f5c <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e157      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087ba:	4b4d      	ldr	r3, [pc, #308]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80087bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0f0      	beq.n	80087a8 <HAL_RCC_OscConfig+0x38c>
 80087c6:	e015      	b.n	80087f4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087c8:	4b4e      	ldr	r3, [pc, #312]	; (8008904 <HAL_RCC_OscConfig+0x4e8>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087ce:	f7fc fbc5 	bl	8004f5c <HAL_GetTick>
 80087d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087d4:	e008      	b.n	80087e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087d6:	f7fc fbc1 	bl	8004f5c <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d901      	bls.n	80087e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e140      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087e8:	4b41      	ldr	r3, [pc, #260]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80087ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ec:	f003 0302 	and.w	r3, r3, #2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f0      	bne.n	80087d6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80b5 	beq.w	800896c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008802:	2300      	movs	r3, #0
 8008804:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008806:	4b3a      	ldr	r3, [pc, #232]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10d      	bne.n	800882e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008812:	4b37      	ldr	r3, [pc, #220]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008816:	4a36      	ldr	r2, [pc, #216]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800881c:	6253      	str	r3, [r2, #36]	; 0x24
 800881e:	4b34      	ldr	r3, [pc, #208]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008826:	60bb      	str	r3, [r7, #8]
 8008828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800882a:	2301      	movs	r3, #1
 800882c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800882e:	4b36      	ldr	r3, [pc, #216]	; (8008908 <HAL_RCC_OscConfig+0x4ec>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008836:	2b00      	cmp	r3, #0
 8008838:	d118      	bne.n	800886c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800883a:	4b33      	ldr	r3, [pc, #204]	; (8008908 <HAL_RCC_OscConfig+0x4ec>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a32      	ldr	r2, [pc, #200]	; (8008908 <HAL_RCC_OscConfig+0x4ec>)
 8008840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008846:	f7fc fb89 	bl	8004f5c <HAL_GetTick>
 800884a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800884c:	e008      	b.n	8008860 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800884e:	f7fc fb85 	bl	8004f5c <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b64      	cmp	r3, #100	; 0x64
 800885a:	d901      	bls.n	8008860 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e104      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008860:	4b29      	ldr	r3, [pc, #164]	; (8008908 <HAL_RCC_OscConfig+0x4ec>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008868:	2b00      	cmp	r3, #0
 800886a:	d0f0      	beq.n	800884e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d106      	bne.n	8008882 <HAL_RCC_OscConfig+0x466>
 8008874:	4b1e      	ldr	r3, [pc, #120]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008878:	4a1d      	ldr	r2, [pc, #116]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 800887a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800887e:	6353      	str	r3, [r2, #52]	; 0x34
 8008880:	e02d      	b.n	80088de <HAL_RCC_OscConfig+0x4c2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10c      	bne.n	80088a4 <HAL_RCC_OscConfig+0x488>
 800888a:	4b19      	ldr	r3, [pc, #100]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 800888c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888e:	4a18      	ldr	r2, [pc, #96]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008894:	6353      	str	r3, [r2, #52]	; 0x34
 8008896:	4b16      	ldr	r3, [pc, #88]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 8008898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889a:	4a15      	ldr	r2, [pc, #84]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 800889c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088a0:	6353      	str	r3, [r2, #52]	; 0x34
 80088a2:	e01c      	b.n	80088de <HAL_RCC_OscConfig+0x4c2>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	2b05      	cmp	r3, #5
 80088aa:	d10c      	bne.n	80088c6 <HAL_RCC_OscConfig+0x4aa>
 80088ac:	4b10      	ldr	r3, [pc, #64]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80088ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b0:	4a0f      	ldr	r2, [pc, #60]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80088b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088b6:	6353      	str	r3, [r2, #52]	; 0x34
 80088b8:	4b0d      	ldr	r3, [pc, #52]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80088ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088bc:	4a0c      	ldr	r2, [pc, #48]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80088be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088c2:	6353      	str	r3, [r2, #52]	; 0x34
 80088c4:	e00b      	b.n	80088de <HAL_RCC_OscConfig+0x4c2>
 80088c6:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80088c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ca:	4a09      	ldr	r2, [pc, #36]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80088cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088d0:	6353      	str	r3, [r2, #52]	; 0x34
 80088d2:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80088d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d6:	4a06      	ldr	r2, [pc, #24]	; (80088f0 <HAL_RCC_OscConfig+0x4d4>)
 80088d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088dc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d024      	beq.n	8008930 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088e6:	f7fc fb39 	bl	8004f5c <HAL_GetTick>
 80088ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088ec:	e019      	b.n	8008922 <HAL_RCC_OscConfig+0x506>
 80088ee:	bf00      	nop
 80088f0:	40023800 	.word	0x40023800
 80088f4:	08013aec 	.word	0x08013aec
 80088f8:	200007bc 	.word	0x200007bc
 80088fc:	200007c4 	.word	0x200007c4
 8008900:	42470020 	.word	0x42470020
 8008904:	42470680 	.word	0x42470680
 8008908:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800890c:	f7fc fb26 	bl	8004f5c <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	f241 3288 	movw	r2, #5000	; 0x1388
 800891a:	4293      	cmp	r3, r2
 800891c:	d901      	bls.n	8008922 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e0a3      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008922:	4b54      	ldr	r3, [pc, #336]	; (8008a74 <HAL_RCC_OscConfig+0x658>)
 8008924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800892a:	2b00      	cmp	r3, #0
 800892c:	d0ee      	beq.n	800890c <HAL_RCC_OscConfig+0x4f0>
 800892e:	e014      	b.n	800895a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008930:	f7fc fb14 	bl	8004f5c <HAL_GetTick>
 8008934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008936:	e00a      	b.n	800894e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008938:	f7fc fb10 	bl	8004f5c <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	f241 3288 	movw	r2, #5000	; 0x1388
 8008946:	4293      	cmp	r3, r2
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e08d      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800894e:	4b49      	ldr	r3, [pc, #292]	; (8008a74 <HAL_RCC_OscConfig+0x658>)
 8008950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1ee      	bne.n	8008938 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800895a:	7ffb      	ldrb	r3, [r7, #31]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d105      	bne.n	800896c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008960:	4b44      	ldr	r3, [pc, #272]	; (8008a74 <HAL_RCC_OscConfig+0x658>)
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	4a43      	ldr	r2, [pc, #268]	; (8008a74 <HAL_RCC_OscConfig+0x658>)
 8008966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800896a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	d079      	beq.n	8008a68 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	2b0c      	cmp	r3, #12
 8008978:	d056      	beq.n	8008a28 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	2b02      	cmp	r3, #2
 8008980:	d13b      	bne.n	80089fa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008982:	4b3d      	ldr	r3, [pc, #244]	; (8008a78 <HAL_RCC_OscConfig+0x65c>)
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008988:	f7fc fae8 	bl	8004f5c <HAL_GetTick>
 800898c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008990:	f7fc fae4 	bl	8004f5c <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e063      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089a2:	4b34      	ldr	r3, [pc, #208]	; (8008a74 <HAL_RCC_OscConfig+0x658>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1f0      	bne.n	8008990 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089ae:	4b31      	ldr	r3, [pc, #196]	; (8008a74 <HAL_RCC_OscConfig+0x658>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089be:	4319      	orrs	r1, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	430b      	orrs	r3, r1
 80089c6:	492b      	ldr	r1, [pc, #172]	; (8008a74 <HAL_RCC_OscConfig+0x658>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089cc:	4b2a      	ldr	r3, [pc, #168]	; (8008a78 <HAL_RCC_OscConfig+0x65c>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089d2:	f7fc fac3 	bl	8004f5c <HAL_GetTick>
 80089d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089d8:	e008      	b.n	80089ec <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089da:	f7fc fabf 	bl	8004f5c <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d901      	bls.n	80089ec <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e03e      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089ec:	4b21      	ldr	r3, [pc, #132]	; (8008a74 <HAL_RCC_OscConfig+0x658>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d0f0      	beq.n	80089da <HAL_RCC_OscConfig+0x5be>
 80089f8:	e036      	b.n	8008a68 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089fa:	4b1f      	ldr	r3, [pc, #124]	; (8008a78 <HAL_RCC_OscConfig+0x65c>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a00:	f7fc faac 	bl	8004f5c <HAL_GetTick>
 8008a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a06:	e008      	b.n	8008a1a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a08:	f7fc faa8 	bl	8004f5c <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d901      	bls.n	8008a1a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e027      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a1a:	4b16      	ldr	r3, [pc, #88]	; (8008a74 <HAL_RCC_OscConfig+0x658>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1f0      	bne.n	8008a08 <HAL_RCC_OscConfig+0x5ec>
 8008a26:	e01f      	b.n	8008a68 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d101      	bne.n	8008a34 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e01a      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008a34:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <HAL_RCC_OscConfig+0x658>)
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d10d      	bne.n	8008a64 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d106      	bne.n	8008a64 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d001      	beq.n	8008a68 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e000      	b.n	8008a6a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3720      	adds	r7, #32
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	40023800 	.word	0x40023800
 8008a78:	42470060 	.word	0x42470060

08008a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e11a      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a90:	4b8f      	ldr	r3, [pc, #572]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d919      	bls.n	8008ad2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d105      	bne.n	8008ab0 <HAL_RCC_ClockConfig+0x34>
 8008aa4:	4b8a      	ldr	r3, [pc, #552]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a89      	ldr	r2, [pc, #548]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008aaa:	f043 0304 	orr.w	r3, r3, #4
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	4b87      	ldr	r3, [pc, #540]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f023 0201 	bic.w	r2, r3, #1
 8008ab8:	4985      	ldr	r1, [pc, #532]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ac0:	4b83      	ldr	r3, [pc, #524]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d001      	beq.n	8008ad2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e0f9      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0302 	and.w	r3, r3, #2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d008      	beq.n	8008af0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ade:	4b7d      	ldr	r3, [pc, #500]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	497a      	ldr	r1, [pc, #488]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 808e 	beq.w	8008c1a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d107      	bne.n	8008b16 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b06:	4b73      	ldr	r3, [pc, #460]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d121      	bne.n	8008b56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e0d7      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d107      	bne.n	8008b2e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b1e:	4b6d      	ldr	r3, [pc, #436]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d115      	bne.n	8008b56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e0cb      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d107      	bne.n	8008b46 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b36:	4b67      	ldr	r3, [pc, #412]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d109      	bne.n	8008b56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e0bf      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008b46:	4b63      	ldr	r3, [pc, #396]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e0b7      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b56:	4b5f      	ldr	r3, [pc, #380]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f023 0203 	bic.w	r2, r3, #3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	495c      	ldr	r1, [pc, #368]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b68:	f7fc f9f8 	bl	8004f5c <HAL_GetTick>
 8008b6c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d112      	bne.n	8008b9c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b76:	e00a      	b.n	8008b8e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b78:	f7fc f9f0 	bl	8004f5c <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d901      	bls.n	8008b8e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e09b      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b8e:	4b51      	ldr	r3, [pc, #324]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 030c 	and.w	r3, r3, #12
 8008b96:	2b08      	cmp	r3, #8
 8008b98:	d1ee      	bne.n	8008b78 <HAL_RCC_ClockConfig+0xfc>
 8008b9a:	e03e      	b.n	8008c1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d112      	bne.n	8008bca <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ba4:	e00a      	b.n	8008bbc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ba6:	f7fc f9d9 	bl	8004f5c <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d901      	bls.n	8008bbc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e084      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bbc:	4b45      	ldr	r3, [pc, #276]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f003 030c 	and.w	r3, r3, #12
 8008bc4:	2b0c      	cmp	r3, #12
 8008bc6:	d1ee      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0x12a>
 8008bc8:	e027      	b.n	8008c1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d11d      	bne.n	8008c0e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008bd2:	e00a      	b.n	8008bea <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bd4:	f7fc f9c2 	bl	8004f5c <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d901      	bls.n	8008bea <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e06d      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008bea:	4b3a      	ldr	r3, [pc, #232]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 030c 	and.w	r3, r3, #12
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	d1ee      	bne.n	8008bd4 <HAL_RCC_ClockConfig+0x158>
 8008bf6:	e010      	b.n	8008c1a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bf8:	f7fc f9b0 	bl	8004f5c <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e05b      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008c0e:	4b31      	ldr	r3, [pc, #196]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f003 030c 	and.w	r3, r3, #12
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1ee      	bne.n	8008bf8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c1a:	4b2d      	ldr	r3, [pc, #180]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d219      	bcs.n	8008c5c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d105      	bne.n	8008c3a <HAL_RCC_ClockConfig+0x1be>
 8008c2e:	4b28      	ldr	r3, [pc, #160]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a27      	ldr	r2, [pc, #156]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008c34:	f043 0304 	orr.w	r3, r3, #4
 8008c38:	6013      	str	r3, [r2, #0]
 8008c3a:	4b25      	ldr	r3, [pc, #148]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f023 0201 	bic.w	r2, r3, #1
 8008c42:	4923      	ldr	r1, [pc, #140]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c4a:	4b21      	ldr	r3, [pc, #132]	; (8008cd0 <HAL_RCC_ClockConfig+0x254>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d001      	beq.n	8008c5c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e034      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d008      	beq.n	8008c7a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c68:	4b1a      	ldr	r3, [pc, #104]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	4917      	ldr	r1, [pc, #92]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0308 	and.w	r3, r3, #8
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d009      	beq.n	8008c9a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c86:	4b13      	ldr	r3, [pc, #76]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	490f      	ldr	r1, [pc, #60]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c9a:	f000 f823 	bl	8008ce4 <HAL_RCC_GetSysClockFreq>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	4b0c      	ldr	r3, [pc, #48]	; (8008cd4 <HAL_RCC_ClockConfig+0x258>)
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	091b      	lsrs	r3, r3, #4
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	490b      	ldr	r1, [pc, #44]	; (8008cd8 <HAL_RCC_ClockConfig+0x25c>)
 8008cac:	5ccb      	ldrb	r3, [r1, r3]
 8008cae:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb2:	4a0a      	ldr	r2, [pc, #40]	; (8008cdc <HAL_RCC_ClockConfig+0x260>)
 8008cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008cb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ce0 <HAL_RCC_ClockConfig+0x264>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fc f902 	bl	8004ec4 <HAL_InitTick>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8008cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	40023c00 	.word	0x40023c00
 8008cd4:	40023800 	.word	0x40023800
 8008cd8:	08013aec 	.word	0x08013aec
 8008cdc:	200007bc 	.word	0x200007bc
 8008ce0:	200007c4 	.word	0x200007c4

08008ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ce8:	b092      	sub	sp, #72	; 0x48
 8008cea:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8008cec:	4b79      	ldr	r3, [pc, #484]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf4:	f003 030c 	and.w	r3, r3, #12
 8008cf8:	2b0c      	cmp	r3, #12
 8008cfa:	d00d      	beq.n	8008d18 <HAL_RCC_GetSysClockFreq+0x34>
 8008cfc:	2b0c      	cmp	r3, #12
 8008cfe:	f200 80d5 	bhi.w	8008eac <HAL_RCC_GetSysClockFreq+0x1c8>
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d002      	beq.n	8008d0c <HAL_RCC_GetSysClockFreq+0x28>
 8008d06:	2b08      	cmp	r3, #8
 8008d08:	d003      	beq.n	8008d12 <HAL_RCC_GetSysClockFreq+0x2e>
 8008d0a:	e0cf      	b.n	8008eac <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d0c:	4b72      	ldr	r3, [pc, #456]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008d0e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008d10:	e0da      	b.n	8008ec8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008d12:	4b72      	ldr	r3, [pc, #456]	; (8008edc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008d14:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008d16:	e0d7      	b.n	8008ec8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d1a:	0c9b      	lsrs	r3, r3, #18
 8008d1c:	f003 020f 	and.w	r2, r3, #15
 8008d20:	4b6f      	ldr	r3, [pc, #444]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008d22:	5c9b      	ldrb	r3, [r3, r2]
 8008d24:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d28:	0d9b      	lsrs	r3, r3, #22
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	3301      	adds	r3, #1
 8008d30:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d32:	4b68      	ldr	r3, [pc, #416]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d05d      	beq.n	8008dfa <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d40:	2200      	movs	r2, #0
 8008d42:	4618      	mov	r0, r3
 8008d44:	4611      	mov	r1, r2
 8008d46:	4604      	mov	r4, r0
 8008d48:	460d      	mov	r5, r1
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	f04f 0000 	mov.w	r0, #0
 8008d52:	f04f 0100 	mov.w	r1, #0
 8008d56:	0159      	lsls	r1, r3, #5
 8008d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d5c:	0150      	lsls	r0, r2, #5
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4621      	mov	r1, r4
 8008d64:	1a51      	subs	r1, r2, r1
 8008d66:	6139      	str	r1, [r7, #16]
 8008d68:	4629      	mov	r1, r5
 8008d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8008d6e:	617b      	str	r3, [r7, #20]
 8008d70:	f04f 0200 	mov.w	r2, #0
 8008d74:	f04f 0300 	mov.w	r3, #0
 8008d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	018b      	lsls	r3, r1, #6
 8008d80:	4651      	mov	r1, sl
 8008d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008d86:	4651      	mov	r1, sl
 8008d88:	018a      	lsls	r2, r1, #6
 8008d8a:	46d4      	mov	ip, sl
 8008d8c:	ebb2 080c 	subs.w	r8, r2, ip
 8008d90:	4659      	mov	r1, fp
 8008d92:	eb63 0901 	sbc.w	r9, r3, r1
 8008d96:	f04f 0200 	mov.w	r2, #0
 8008d9a:	f04f 0300 	mov.w	r3, #0
 8008d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008daa:	4690      	mov	r8, r2
 8008dac:	4699      	mov	r9, r3
 8008dae:	4623      	mov	r3, r4
 8008db0:	eb18 0303 	adds.w	r3, r8, r3
 8008db4:	60bb      	str	r3, [r7, #8]
 8008db6:	462b      	mov	r3, r5
 8008db8:	eb49 0303 	adc.w	r3, r9, r3
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	f04f 0300 	mov.w	r3, #0
 8008dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008dca:	4629      	mov	r1, r5
 8008dcc:	024b      	lsls	r3, r1, #9
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8008dd8:	4601      	mov	r1, r0
 8008dda:	024a      	lsls	r2, r1, #9
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4619      	mov	r1, r3
 8008de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de2:	2200      	movs	r2, #0
 8008de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dec:	f7f8 f9d2 	bl	8001194 <__aeabi_uldivmod>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4613      	mov	r3, r2
 8008df6:	647b      	str	r3, [r7, #68]	; 0x44
 8008df8:	e055      	b.n	8008ea6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	623b      	str	r3, [r7, #32]
 8008e00:	627a      	str	r2, [r7, #36]	; 0x24
 8008e02:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e06:	4642      	mov	r2, r8
 8008e08:	464b      	mov	r3, r9
 8008e0a:	f04f 0000 	mov.w	r0, #0
 8008e0e:	f04f 0100 	mov.w	r1, #0
 8008e12:	0159      	lsls	r1, r3, #5
 8008e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e18:	0150      	lsls	r0, r2, #5
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	46c4      	mov	ip, r8
 8008e20:	ebb2 0a0c 	subs.w	sl, r2, ip
 8008e24:	4640      	mov	r0, r8
 8008e26:	4649      	mov	r1, r9
 8008e28:	468c      	mov	ip, r1
 8008e2a:	eb63 0b0c 	sbc.w	fp, r3, ip
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008e3a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008e3e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008e42:	ebb2 040a 	subs.w	r4, r2, sl
 8008e46:	eb63 050b 	sbc.w	r5, r3, fp
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	f04f 0300 	mov.w	r3, #0
 8008e52:	00eb      	lsls	r3, r5, #3
 8008e54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e58:	00e2      	lsls	r2, r4, #3
 8008e5a:	4614      	mov	r4, r2
 8008e5c:	461d      	mov	r5, r3
 8008e5e:	4603      	mov	r3, r0
 8008e60:	18e3      	adds	r3, r4, r3
 8008e62:	603b      	str	r3, [r7, #0]
 8008e64:	460b      	mov	r3, r1
 8008e66:	eb45 0303 	adc.w	r3, r5, r3
 8008e6a:	607b      	str	r3, [r7, #4]
 8008e6c:	f04f 0200 	mov.w	r2, #0
 8008e70:	f04f 0300 	mov.w	r3, #0
 8008e74:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e78:	4629      	mov	r1, r5
 8008e7a:	028b      	lsls	r3, r1, #10
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4604      	mov	r4, r0
 8008e82:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8008e86:	4601      	mov	r1, r0
 8008e88:	028a      	lsls	r2, r1, #10
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e90:	2200      	movs	r2, #0
 8008e92:	61bb      	str	r3, [r7, #24]
 8008e94:	61fa      	str	r2, [r7, #28]
 8008e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e9a:	f7f8 f97b 	bl	8001194 <__aeabi_uldivmod>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8008ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008eaa:	e00d      	b.n	8008ec8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008eac:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	0b5b      	lsrs	r3, r3, #13
 8008eb2:	f003 0307 	and.w	r3, r3, #7
 8008eb6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eba:	3301      	adds	r3, #1
 8008ebc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008ec6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3748      	adds	r7, #72	; 0x48
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ed4:	40023800 	.word	0x40023800
 8008ed8:	00f42400 	.word	0x00f42400
 8008edc:	007a1200 	.word	0x007a1200
 8008ee0:	08013ae0 	.word	0x08013ae0

08008ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ee8:	4b02      	ldr	r3, [pc, #8]	; (8008ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8008eea:	681b      	ldr	r3, [r3, #0]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr
 8008ef4:	200007bc 	.word	0x200007bc

08008ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008efc:	f7ff fff2 	bl	8008ee4 <HAL_RCC_GetHCLKFreq>
 8008f00:	4602      	mov	r2, r0
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	4903      	ldr	r1, [pc, #12]	; (8008f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f0e:	5ccb      	ldrb	r3, [r1, r3]
 8008f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40023800 	.word	0x40023800
 8008f1c:	08013afc 	.word	0x08013afc

08008f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008f2c:	4b29      	ldr	r3, [pc, #164]	; (8008fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d12c      	bne.n	8008f92 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008f38:	4b26      	ldr	r3, [pc, #152]	; (8008fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008f44:	4b24      	ldr	r3, [pc, #144]	; (8008fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	e016      	b.n	8008f7e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f50:	4b20      	ldr	r3, [pc, #128]	; (8008fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	4a1f      	ldr	r2, [pc, #124]	; (8008fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f5a:	6253      	str	r3, [r2, #36]	; 0x24
 8008f5c:	4b1d      	ldr	r3, [pc, #116]	; (8008fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f64:	60fb      	str	r3, [r7, #12]
 8008f66:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008f68:	4b1b      	ldr	r3, [pc, #108]	; (8008fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008f70:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f72:	4b18      	ldr	r3, [pc, #96]	; (8008fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	4a17      	ldr	r2, [pc, #92]	; (8008fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f7c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008f84:	d105      	bne.n	8008f92 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008f8c:	d101      	bne.n	8008f92 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8008f8e:	2301      	movs	r3, #1
 8008f90:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d105      	bne.n	8008fa4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8008f98:	4b10      	ldr	r3, [pc, #64]	; (8008fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a0f      	ldr	r2, [pc, #60]	; (8008fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f9e:	f043 0304 	orr.w	r3, r3, #4
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f023 0201 	bic.w	r2, r3, #1
 8008fac:	490b      	ldr	r1, [pc, #44]	; (8008fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008fb4:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d001      	beq.n	8008fc6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e000      	b.n	8008fc8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	371c      	adds	r7, #28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bc80      	pop	{r7}
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	40023800 	.word	0x40023800
 8008fd8:	40007000 	.word	0x40007000
 8008fdc:	40023c00 	.word	0x40023c00

08008fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e06e      	b.n	80090d0 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d108      	bne.n	800900c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009002:	d009      	beq.n	8009018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	61da      	str	r2, [r3, #28]
 800900a:	e005      	b.n	8009018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fb fafe 	bl	8004634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800904e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009060:	431a      	orrs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009088:	431a      	orrs	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009092:	431a      	orrs	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909c:	ea42 0103 	orr.w	r1, r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	0c1a      	lsrs	r2, r3, #16
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f002 0204 	and.w	r2, r2, #4
 80090be:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	603b      	str	r3, [r7, #0]
 80090e4:	4613      	mov	r3, r2
 80090e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <HAL_SPI_Transmit+0x22>
 80090f6:	2302      	movs	r3, #2
 80090f8:	e126      	b.n	8009348 <HAL_SPI_Transmit+0x270>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009102:	f7fb ff2b 	bl	8004f5c <HAL_GetTick>
 8009106:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009108:	88fb      	ldrh	r3, [r7, #6]
 800910a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b01      	cmp	r3, #1
 8009116:	d002      	beq.n	800911e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009118:	2302      	movs	r3, #2
 800911a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800911c:	e10b      	b.n	8009336 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <HAL_SPI_Transmit+0x52>
 8009124:	88fb      	ldrh	r3, [r7, #6]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800912e:	e102      	b.n	8009336 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2203      	movs	r2, #3
 8009134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	88fa      	ldrh	r2, [r7, #6]
 8009148:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	88fa      	ldrh	r2, [r7, #6]
 800914e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009176:	d10f      	bne.n	8009198 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009186:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009196:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a2:	2b40      	cmp	r3, #64	; 0x40
 80091a4:	d007      	beq.n	80091b6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091be:	d14b      	bne.n	8009258 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <HAL_SPI_Transmit+0xf6>
 80091c8:	8afb      	ldrh	r3, [r7, #22]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d13e      	bne.n	800924c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d2:	881a      	ldrh	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091de:	1c9a      	adds	r2, r3, #2
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80091f2:	e02b      	b.n	800924c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d112      	bne.n	8009228 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	881a      	ldrh	r2, [r3, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009212:	1c9a      	adds	r2, r3, #2
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800921c:	b29b      	uxth	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	b29a      	uxth	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	86da      	strh	r2, [r3, #54]	; 0x36
 8009226:	e011      	b.n	800924c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009228:	f7fb fe98 	bl	8004f5c <HAL_GetTick>
 800922c:	4602      	mov	r2, r0
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	429a      	cmp	r2, r3
 8009236:	d803      	bhi.n	8009240 <HAL_SPI_Transmit+0x168>
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923e:	d102      	bne.n	8009246 <HAL_SPI_Transmit+0x16e>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d102      	bne.n	800924c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	77fb      	strb	r3, [r7, #31]
          goto error;
 800924a:	e074      	b.n	8009336 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009250:	b29b      	uxth	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1ce      	bne.n	80091f4 <HAL_SPI_Transmit+0x11c>
 8009256:	e04c      	b.n	80092f2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <HAL_SPI_Transmit+0x18e>
 8009260:	8afb      	ldrh	r3, [r7, #22]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d140      	bne.n	80092e8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	330c      	adds	r3, #12
 8009270:	7812      	ldrb	r2, [r2, #0]
 8009272:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009282:	b29b      	uxth	r3, r3
 8009284:	3b01      	subs	r3, #1
 8009286:	b29a      	uxth	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800928c:	e02c      	b.n	80092e8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b02      	cmp	r3, #2
 800929a:	d113      	bne.n	80092c4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	330c      	adds	r3, #12
 80092a6:	7812      	ldrb	r2, [r2, #0]
 80092a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	3b01      	subs	r3, #1
 80092bc:	b29a      	uxth	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80092c2:	e011      	b.n	80092e8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092c4:	f7fb fe4a 	bl	8004f5c <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d803      	bhi.n	80092dc <HAL_SPI_Transmit+0x204>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092da:	d102      	bne.n	80092e2 <HAL_SPI_Transmit+0x20a>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d102      	bne.n	80092e8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80092e6:	e026      	b.n	8009336 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1cd      	bne.n	800928e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 fcd0 	bl	8009c9c <SPI_EndRxTxTransaction>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2220      	movs	r2, #32
 8009306:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10a      	bne.n	8009326 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009310:	2300      	movs	r3, #0
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	613b      	str	r3, [r7, #16]
 8009324:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	77fb      	strb	r3, [r7, #31]
 8009332:	e000      	b.n	8009336 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009334:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009346:	7ffb      	ldrb	r3, [r7, #31]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3720      	adds	r7, #32
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af02      	add	r7, sp, #8
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	603b      	str	r3, [r7, #0]
 800935c:	4613      	mov	r3, r2
 800935e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800936c:	d112      	bne.n	8009394 <HAL_SPI_Receive+0x44>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10e      	bne.n	8009394 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2204      	movs	r2, #4
 800937a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800937e:	88fa      	ldrh	r2, [r7, #6]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	4613      	mov	r3, r2
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	68b9      	ldr	r1, [r7, #8]
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 f8f1 	bl	8009572 <HAL_SPI_TransmitReceive>
 8009390:	4603      	mov	r3, r0
 8009392:	e0ea      	b.n	800956a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800939a:	2b01      	cmp	r3, #1
 800939c:	d101      	bne.n	80093a2 <HAL_SPI_Receive+0x52>
 800939e:	2302      	movs	r3, #2
 80093a0:	e0e3      	b.n	800956a <HAL_SPI_Receive+0x21a>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093aa:	f7fb fdd7 	bl	8004f5c <HAL_GetTick>
 80093ae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d002      	beq.n	80093c2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80093bc:	2302      	movs	r3, #2
 80093be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093c0:	e0ca      	b.n	8009558 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <HAL_SPI_Receive+0x7e>
 80093c8:	88fb      	ldrh	r3, [r7, #6]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093d2:	e0c1      	b.n	8009558 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2204      	movs	r2, #4
 80093d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	88fa      	ldrh	r2, [r7, #6]
 80093ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	88fa      	ldrh	r2, [r7, #6]
 80093f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800941a:	d10f      	bne.n	800943c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800942a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800943a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009446:	2b40      	cmp	r3, #64	; 0x40
 8009448:	d007      	beq.n	800945a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009458:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d162      	bne.n	8009528 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009462:	e02e      	b.n	80094c2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b01      	cmp	r3, #1
 8009470:	d115      	bne.n	800949e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f103 020c 	add.w	r2, r3, #12
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	7812      	ldrb	r2, [r2, #0]
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009492:	b29b      	uxth	r3, r3
 8009494:	3b01      	subs	r3, #1
 8009496:	b29a      	uxth	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800949c:	e011      	b.n	80094c2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800949e:	f7fb fd5d 	bl	8004f5c <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d803      	bhi.n	80094b6 <HAL_SPI_Receive+0x166>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b4:	d102      	bne.n	80094bc <HAL_SPI_Receive+0x16c>
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80094c0:	e04a      	b.n	8009558 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1cb      	bne.n	8009464 <HAL_SPI_Receive+0x114>
 80094cc:	e031      	b.n	8009532 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d113      	bne.n	8009504 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68da      	ldr	r2, [r3, #12]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e6:	b292      	uxth	r2, r2
 80094e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ee:	1c9a      	adds	r2, r3, #2
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	3b01      	subs	r3, #1
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009502:	e011      	b.n	8009528 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009504:	f7fb fd2a 	bl	8004f5c <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	429a      	cmp	r2, r3
 8009512:	d803      	bhi.n	800951c <HAL_SPI_Receive+0x1cc>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951a:	d102      	bne.n	8009522 <HAL_SPI_Receive+0x1d2>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d102      	bne.n	8009528 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009526:	e017      	b.n	8009558 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800952c:	b29b      	uxth	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1cd      	bne.n	80094ce <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 fb4a 	bl	8009bd0 <SPI_EndRxTransaction>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2220      	movs	r2, #32
 8009546:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	75fb      	strb	r3, [r7, #23]
 8009554:	e000      	b.n	8009558 <HAL_SPI_Receive+0x208>
  }

error :
 8009556:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b08c      	sub	sp, #48	; 0x30
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
 800957e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009580:	2301      	movs	r3, #1
 8009582:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009590:	2b01      	cmp	r3, #1
 8009592:	d101      	bne.n	8009598 <HAL_SPI_TransmitReceive+0x26>
 8009594:	2302      	movs	r3, #2
 8009596:	e18a      	b.n	80098ae <HAL_SPI_TransmitReceive+0x33c>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095a0:	f7fb fcdc 	bl	8004f5c <HAL_GetTick>
 80095a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80095b6:	887b      	ldrh	r3, [r7, #2]
 80095b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80095ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d00f      	beq.n	80095e2 <HAL_SPI_TransmitReceive+0x70>
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095c8:	d107      	bne.n	80095da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d103      	bne.n	80095da <HAL_SPI_TransmitReceive+0x68>
 80095d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d003      	beq.n	80095e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80095da:	2302      	movs	r3, #2
 80095dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80095e0:	e15b      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d005      	beq.n	80095f4 <HAL_SPI_TransmitReceive+0x82>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <HAL_SPI_TransmitReceive+0x82>
 80095ee:	887b      	ldrh	r3, [r7, #2]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d103      	bne.n	80095fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80095fa:	e14e      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b04      	cmp	r3, #4
 8009606:	d003      	beq.n	8009610 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2205      	movs	r2, #5
 800960c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	887a      	ldrh	r2, [r7, #2]
 8009620:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	887a      	ldrh	r2, [r7, #2]
 8009626:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	887a      	ldrh	r2, [r7, #2]
 8009632:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	887a      	ldrh	r2, [r7, #2]
 8009638:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009650:	2b40      	cmp	r3, #64	; 0x40
 8009652:	d007      	beq.n	8009664 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800966c:	d178      	bne.n	8009760 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <HAL_SPI_TransmitReceive+0x10a>
 8009676:	8b7b      	ldrh	r3, [r7, #26]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d166      	bne.n	800974a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009680:	881a      	ldrh	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968c:	1c9a      	adds	r2, r3, #2
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096a0:	e053      	b.n	800974a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f003 0302 	and.w	r3, r3, #2
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d11b      	bne.n	80096e8 <HAL_SPI_TransmitReceive+0x176>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d016      	beq.n	80096e8 <HAL_SPI_TransmitReceive+0x176>
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d113      	bne.n	80096e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c4:	881a      	ldrh	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	1c9a      	adds	r2, r3, #2
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096da:	b29b      	uxth	r3, r3
 80096dc:	3b01      	subs	r3, #1
 80096de:	b29a      	uxth	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096e4:	2300      	movs	r3, #0
 80096e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d119      	bne.n	800972a <HAL_SPI_TransmitReceive+0x1b8>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d014      	beq.n	800972a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	b292      	uxth	r2, r2
 800970c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009712:	1c9a      	adds	r2, r3, #2
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800971c:	b29b      	uxth	r3, r3
 800971e:	3b01      	subs	r3, #1
 8009720:	b29a      	uxth	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009726:	2301      	movs	r3, #1
 8009728:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800972a:	f7fb fc17 	bl	8004f5c <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009736:	429a      	cmp	r2, r3
 8009738:	d807      	bhi.n	800974a <HAL_SPI_TransmitReceive+0x1d8>
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009740:	d003      	beq.n	800974a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009748:	e0a7      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800974e:	b29b      	uxth	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1a6      	bne.n	80096a2 <HAL_SPI_TransmitReceive+0x130>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009758:	b29b      	uxth	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1a1      	bne.n	80096a2 <HAL_SPI_TransmitReceive+0x130>
 800975e:	e07c      	b.n	800985a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <HAL_SPI_TransmitReceive+0x1fc>
 8009768:	8b7b      	ldrh	r3, [r7, #26]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d16b      	bne.n	8009846 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	330c      	adds	r3, #12
 8009778:	7812      	ldrb	r2, [r2, #0]
 800977a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800978a:	b29b      	uxth	r3, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009794:	e057      	b.n	8009846 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d11c      	bne.n	80097de <HAL_SPI_TransmitReceive+0x26c>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d017      	beq.n	80097de <HAL_SPI_TransmitReceive+0x26c>
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d114      	bne.n	80097de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	330c      	adds	r3, #12
 80097be:	7812      	ldrb	r2, [r2, #0]
 80097c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	3b01      	subs	r3, #1
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f003 0301 	and.w	r3, r3, #1
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d119      	bne.n	8009820 <HAL_SPI_TransmitReceive+0x2ae>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d014      	beq.n	8009820 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68da      	ldr	r2, [r3, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009800:	b2d2      	uxtb	r2, r2
 8009802:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009812:	b29b      	uxth	r3, r3
 8009814:	3b01      	subs	r3, #1
 8009816:	b29a      	uxth	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800981c:	2301      	movs	r3, #1
 800981e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009820:	f7fb fb9c 	bl	8004f5c <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800982c:	429a      	cmp	r2, r3
 800982e:	d803      	bhi.n	8009838 <HAL_SPI_TransmitReceive+0x2c6>
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009836:	d102      	bne.n	800983e <HAL_SPI_TransmitReceive+0x2cc>
 8009838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983a:	2b00      	cmp	r3, #0
 800983c:	d103      	bne.n	8009846 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009844:	e029      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800984a:	b29b      	uxth	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1a2      	bne.n	8009796 <HAL_SPI_TransmitReceive+0x224>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009854:	b29b      	uxth	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d19d      	bne.n	8009796 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800985a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 fa1c 	bl	8009c9c <SPI_EndRxTxTransaction>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d006      	beq.n	8009878 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2220      	movs	r2, #32
 8009874:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009876:	e010      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10b      	bne.n	8009898 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009880:	2300      	movs	r3, #0
 8009882:	617b      	str	r3, [r7, #20]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	e000      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009898:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3730      	adds	r7, #48	; 0x30
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	099b      	lsrs	r3, r3, #6
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10f      	bne.n	80098fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	099b      	lsrs	r3, r3, #6
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d004      	beq.n	80098fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
    return;
 80098fa:	e0be      	b.n	8009a7a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	085b      	lsrs	r3, r3, #1
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00a      	beq.n	800991e <HAL_SPI_IRQHandler+0x66>
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	09db      	lsrs	r3, r3, #7
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	d004      	beq.n	800991e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	4798      	blx	r3
    return;
 800991c:	e0ad      	b.n	8009a7a <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	095b      	lsrs	r3, r3, #5
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d106      	bne.n	8009938 <HAL_SPI_IRQHandler+0x80>
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	099b      	lsrs	r3, r3, #6
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 80a1 	beq.w	8009a7a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	095b      	lsrs	r3, r3, #5
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 809a 	beq.w	8009a7a <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	099b      	lsrs	r3, r3, #6
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d023      	beq.n	800999a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b03      	cmp	r3, #3
 800995c:	d011      	beq.n	8009982 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009962:	f043 0204 	orr.w	r2, r3, #4
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800996a:	2300      	movs	r3, #0
 800996c:	617b      	str	r3, [r7, #20]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	617b      	str	r3, [r7, #20]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	617b      	str	r3, [r7, #20]
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	e00b      	b.n	800999a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009982:	2300      	movs	r3, #0
 8009984:	613b      	str	r3, [r7, #16]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	613b      	str	r3, [r7, #16]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	613b      	str	r3, [r7, #16]
 8009996:	693b      	ldr	r3, [r7, #16]
        return;
 8009998:	e06f      	b.n	8009a7a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	095b      	lsrs	r3, r3, #5
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d014      	beq.n	80099d0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099aa:	f043 0201 	orr.w	r2, r3, #1
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099b2:	2300      	movs	r3, #0
 80099b4:	60fb      	str	r3, [r7, #12]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d04f      	beq.n	8009a78 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099e6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	f003 0302 	and.w	r3, r3, #2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d104      	bne.n	8009a04 <HAL_SPI_IRQHandler+0x14c>
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d034      	beq.n	8009a6e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f022 0203 	bic.w	r2, r2, #3
 8009a12:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d011      	beq.n	8009a40 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a20:	4a17      	ldr	r2, [pc, #92]	; (8009a80 <HAL_SPI_IRQHandler+0x1c8>)
 8009a22:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fb fbd0 	bl	80051ce <HAL_DMA_Abort_IT>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d005      	beq.n	8009a40 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d016      	beq.n	8009a76 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a4c:	4a0c      	ldr	r2, [pc, #48]	; (8009a80 <HAL_SPI_IRQHandler+0x1c8>)
 8009a4e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fb fbba 	bl	80051ce <HAL_DMA_Abort_IT>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00a      	beq.n	8009a76 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009a6c:	e003      	b.n	8009a76 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f808 	bl	8009a84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009a74:	e000      	b.n	8009a78 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8009a76:	bf00      	nop
    return;
 8009a78:	bf00      	nop
  }
}
 8009a7a:	3720      	adds	r7, #32
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	08009a97 	.word	0x08009a97

08009a84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bc80      	pop	{r7}
 8009a94:	4770      	bx	lr

08009a96 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f7ff ffe7 	bl	8009a84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ab6:	bf00      	nop
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	603b      	str	r3, [r7, #0]
 8009acc:	4613      	mov	r3, r2
 8009ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ad0:	f7fb fa44 	bl	8004f5c <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad8:	1a9b      	subs	r3, r3, r2
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4413      	add	r3, r2
 8009ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009ae0:	f7fb fa3c 	bl	8004f5c <HAL_GetTick>
 8009ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009ae6:	4b39      	ldr	r3, [pc, #228]	; (8009bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	015b      	lsls	r3, r3, #5
 8009aec:	0d1b      	lsrs	r3, r3, #20
 8009aee:	69fa      	ldr	r2, [r7, #28]
 8009af0:	fb02 f303 	mul.w	r3, r2, r3
 8009af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009af6:	e054      	b.n	8009ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009afe:	d050      	beq.n	8009ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b00:	f7fb fa2c 	bl	8004f5c <HAL_GetTick>
 8009b04:	4602      	mov	r2, r0
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	69fa      	ldr	r2, [r7, #28]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d902      	bls.n	8009b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d13d      	bne.n	8009b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b2e:	d111      	bne.n	8009b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b38:	d004      	beq.n	8009b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b42:	d107      	bne.n	8009b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b5c:	d10f      	bne.n	8009b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e017      	b.n	8009bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d101      	bne.n	8009b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689a      	ldr	r2, [r3, #8]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	4013      	ands	r3, r2
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	bf0c      	ite	eq
 8009bb2:	2301      	moveq	r3, #1
 8009bb4:	2300      	movne	r3, #0
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	461a      	mov	r2, r3
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d19b      	bne.n	8009af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3720      	adds	r7, #32
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	200007bc 	.word	0x200007bc

08009bd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af02      	add	r7, sp, #8
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009be4:	d111      	bne.n	8009c0a <SPI_EndRxTransaction+0x3a>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bee:	d004      	beq.n	8009bfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bf8:	d107      	bne.n	8009c0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c12:	d12a      	bne.n	8009c6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c1c:	d012      	beq.n	8009c44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2200      	movs	r2, #0
 8009c26:	2180      	movs	r1, #128	; 0x80
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f7ff ff49 	bl	8009ac0 <SPI_WaitFlagStateUntilTimeout>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d02d      	beq.n	8009c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c38:	f043 0220 	orr.w	r2, r3, #32
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e026      	b.n	8009c92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7ff ff36 	bl	8009ac0 <SPI_WaitFlagStateUntilTimeout>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d01a      	beq.n	8009c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5e:	f043 0220 	orr.w	r2, r3, #32
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e013      	b.n	8009c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2200      	movs	r2, #0
 8009c72:	2101      	movs	r1, #1
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f7ff ff23 	bl	8009ac0 <SPI_WaitFlagStateUntilTimeout>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d007      	beq.n	8009c90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c84:	f043 0220 	orr.w	r2, r3, #32
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e000      	b.n	8009c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b088      	sub	sp, #32
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ca8:	4b1b      	ldr	r3, [pc, #108]	; (8009d18 <SPI_EndRxTxTransaction+0x7c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a1b      	ldr	r2, [pc, #108]	; (8009d1c <SPI_EndRxTxTransaction+0x80>)
 8009cae:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb2:	0d5b      	lsrs	r3, r3, #21
 8009cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cb8:	fb02 f303 	mul.w	r3, r2, r3
 8009cbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cc6:	d112      	bne.n	8009cee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	2180      	movs	r1, #128	; 0x80
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7ff fef4 	bl	8009ac0 <SPI_WaitFlagStateUntilTimeout>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d016      	beq.n	8009d0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce2:	f043 0220 	orr.w	r2, r3, #32
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009cea:	2303      	movs	r3, #3
 8009cec:	e00f      	b.n	8009d0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00a      	beq.n	8009d0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d04:	2b80      	cmp	r3, #128	; 0x80
 8009d06:	d0f2      	beq.n	8009cee <SPI_EndRxTxTransaction+0x52>
 8009d08:	e000      	b.n	8009d0c <SPI_EndRxTxTransaction+0x70>
        break;
 8009d0a:	bf00      	nop
  }

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	200007bc 	.word	0x200007bc
 8009d1c:	165e9f81 	.word	0x165e9f81

08009d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e031      	b.n	8009d96 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d106      	bne.n	8009d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7fa ff5c 	bl	8004c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f000 fb3c 	bl	800a3dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d001      	beq.n	8009db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e03a      	b.n	8009e2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f042 0201 	orr.w	r2, r2, #1
 8009dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd8:	d00e      	beq.n	8009df8 <HAL_TIM_Base_Start_IT+0x58>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a16      	ldr	r2, [pc, #88]	; (8009e38 <HAL_TIM_Base_Start_IT+0x98>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d009      	beq.n	8009df8 <HAL_TIM_Base_Start_IT+0x58>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a14      	ldr	r2, [pc, #80]	; (8009e3c <HAL_TIM_Base_Start_IT+0x9c>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d004      	beq.n	8009df8 <HAL_TIM_Base_Start_IT+0x58>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a13      	ldr	r2, [pc, #76]	; (8009e40 <HAL_TIM_Base_Start_IT+0xa0>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d111      	bne.n	8009e1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f003 0307 	and.w	r3, r3, #7
 8009e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b06      	cmp	r3, #6
 8009e08:	d010      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f042 0201 	orr.w	r2, r2, #1
 8009e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e1a:	e007      	b.n	8009e2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0201 	orr.w	r2, r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bc80      	pop	{r7}
 8009e36:	4770      	bx	lr
 8009e38:	40000400 	.word	0x40000400
 8009e3c:	40000800 	.word	0x40000800
 8009e40:	40010800 	.word	0x40010800

08009e44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e08f      	b.n	8009f78 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d106      	bne.n	8009e72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7fa ff09 	bl	8004c84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2202      	movs	r2, #2
 8009e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	6812      	ldr	r2, [r2, #0]
 8009e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e88:	f023 0307 	bic.w	r3, r3, #7
 8009e8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	3304      	adds	r3, #4
 8009e96:	4619      	mov	r1, r3
 8009e98:	4610      	mov	r0, r2
 8009e9a:	f000 fa9f 	bl	800a3dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6a1b      	ldr	r3, [r3, #32]
 8009eb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ec6:	f023 0303 	bic.w	r3, r3, #3
 8009eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	689a      	ldr	r2, [r3, #8]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	021b      	lsls	r3, r3, #8
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009ee4:	f023 030c 	bic.w	r3, r3, #12
 8009ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	021b      	lsls	r3, r3, #8
 8009f00:	4313      	orrs	r3, r2
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	011a      	lsls	r2, r3, #4
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	031b      	lsls	r3, r3, #12
 8009f14:	4313      	orrs	r3, r2
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	4313      	orrs	r3, r2
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009f90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009f98:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <HAL_TIM_Encoder_Start+0x34>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d001      	beq.n	8009faa <HAL_TIM_Encoder_Start+0x2a>
    {
      return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e050      	b.n	800a04c <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2202      	movs	r2, #2
 8009fae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009fb2:	e01c      	b.n	8009fee <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	d109      	bne.n	8009fce <HAL_TIM_Encoder_Start+0x4e>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fba:	7bbb      	ldrb	r3, [r7, #14]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d001      	beq.n	8009fc4 <HAL_TIM_Encoder_Start+0x44>
    {
      return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e043      	b.n	800a04c <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009fcc:	e00f      	b.n	8009fee <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d102      	bne.n	8009fda <HAL_TIM_Encoder_Start+0x5a>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d001      	beq.n	8009fde <HAL_TIM_Encoder_Start+0x5e>
    {
      return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e036      	b.n	800a04c <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <HAL_TIM_Encoder_Start+0x7c>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2b04      	cmp	r3, #4
 8009ff8:	d008      	beq.n	800a00c <HAL_TIM_Encoder_Start+0x8c>
 8009ffa:	e00f      	b.n	800a01c <HAL_TIM_Encoder_Start+0x9c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2201      	movs	r2, #1
 800a002:	2100      	movs	r1, #0
 800a004:	4618      	mov	r0, r3
 800a006:	f000 fae1 	bl	800a5cc <TIM_CCxChannelCmd>
      break;
 800a00a:	e016      	b.n	800a03a <HAL_TIM_Encoder_Start+0xba>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2201      	movs	r2, #1
 800a012:	2104      	movs	r1, #4
 800a014:	4618      	mov	r0, r3
 800a016:	f000 fad9 	bl	800a5cc <TIM_CCxChannelCmd>
      break;
 800a01a:	e00e      	b.n	800a03a <HAL_TIM_Encoder_Start+0xba>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2201      	movs	r2, #1
 800a022:	2100      	movs	r1, #0
 800a024:	4618      	mov	r0, r3
 800a026:	f000 fad1 	bl	800a5cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2201      	movs	r2, #1
 800a030:	2104      	movs	r1, #4
 800a032:	4618      	mov	r0, r3
 800a034:	f000 faca 	bl	800a5cc <TIM_CCxChannelCmd>
      break;
 800a038:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f042 0201 	orr.w	r2, r2, #1
 800a048:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b02      	cmp	r3, #2
 800a068:	d122      	bne.n	800a0b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b02      	cmp	r3, #2
 800a076:	d11b      	bne.n	800a0b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f06f 0202 	mvn.w	r2, #2
 800a080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	f003 0303 	and.w	r3, r3, #3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d003      	beq.n	800a09e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f985 	bl	800a3a6 <HAL_TIM_IC_CaptureCallback>
 800a09c:	e005      	b.n	800a0aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f978 	bl	800a394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f987 	bl	800a3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	f003 0304 	and.w	r3, r3, #4
 800a0ba:	2b04      	cmp	r3, #4
 800a0bc:	d122      	bne.n	800a104 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	f003 0304 	and.w	r3, r3, #4
 800a0c8:	2b04      	cmp	r3, #4
 800a0ca:	d11b      	bne.n	800a104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f06f 0204 	mvn.w	r2, #4
 800a0d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2202      	movs	r2, #2
 800a0da:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d003      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f95b 	bl	800a3a6 <HAL_TIM_IC_CaptureCallback>
 800a0f0:	e005      	b.n	800a0fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f94e 	bl	800a394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f95d 	bl	800a3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	f003 0308 	and.w	r3, r3, #8
 800a10e:	2b08      	cmp	r3, #8
 800a110:	d122      	bne.n	800a158 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	f003 0308 	and.w	r3, r3, #8
 800a11c:	2b08      	cmp	r3, #8
 800a11e:	d11b      	bne.n	800a158 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f06f 0208 	mvn.w	r2, #8
 800a128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2204      	movs	r2, #4
 800a12e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	69db      	ldr	r3, [r3, #28]
 800a136:	f003 0303 	and.w	r3, r3, #3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d003      	beq.n	800a146 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f931 	bl	800a3a6 <HAL_TIM_IC_CaptureCallback>
 800a144:	e005      	b.n	800a152 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f924 	bl	800a394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f933 	bl	800a3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	f003 0310 	and.w	r3, r3, #16
 800a162:	2b10      	cmp	r3, #16
 800a164:	d122      	bne.n	800a1ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	f003 0310 	and.w	r3, r3, #16
 800a170:	2b10      	cmp	r3, #16
 800a172:	d11b      	bne.n	800a1ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f06f 0210 	mvn.w	r2, #16
 800a17c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2208      	movs	r2, #8
 800a182:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	69db      	ldr	r3, [r3, #28]
 800a18a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f907 	bl	800a3a6 <HAL_TIM_IC_CaptureCallback>
 800a198:	e005      	b.n	800a1a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f8fa 	bl	800a394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f909 	bl	800a3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	f003 0301 	and.w	r3, r3, #1
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d10e      	bne.n	800a1d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d107      	bne.n	800a1d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f06f 0201 	mvn.w	r2, #1
 800a1d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7f9 fc50 	bl	8003a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e2:	2b40      	cmp	r3, #64	; 0x40
 800a1e4:	d10e      	bne.n	800a204 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f0:	2b40      	cmp	r3, #64	; 0x40
 800a1f2:	d107      	bne.n	800a204 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f8e3 	bl	800a3ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d101      	bne.n	800a224 <HAL_TIM_ConfigClockSource+0x18>
 800a220:	2302      	movs	r3, #2
 800a222:	e0b3      	b.n	800a38c <HAL_TIM_ConfigClockSource+0x180>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2202      	movs	r2, #2
 800a230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a242:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a24a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a25c:	d03e      	beq.n	800a2dc <HAL_TIM_ConfigClockSource+0xd0>
 800a25e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a262:	f200 8087 	bhi.w	800a374 <HAL_TIM_ConfigClockSource+0x168>
 800a266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a26a:	f000 8085 	beq.w	800a378 <HAL_TIM_ConfigClockSource+0x16c>
 800a26e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a272:	d87f      	bhi.n	800a374 <HAL_TIM_ConfigClockSource+0x168>
 800a274:	2b70      	cmp	r3, #112	; 0x70
 800a276:	d01a      	beq.n	800a2ae <HAL_TIM_ConfigClockSource+0xa2>
 800a278:	2b70      	cmp	r3, #112	; 0x70
 800a27a:	d87b      	bhi.n	800a374 <HAL_TIM_ConfigClockSource+0x168>
 800a27c:	2b60      	cmp	r3, #96	; 0x60
 800a27e:	d050      	beq.n	800a322 <HAL_TIM_ConfigClockSource+0x116>
 800a280:	2b60      	cmp	r3, #96	; 0x60
 800a282:	d877      	bhi.n	800a374 <HAL_TIM_ConfigClockSource+0x168>
 800a284:	2b50      	cmp	r3, #80	; 0x50
 800a286:	d03c      	beq.n	800a302 <HAL_TIM_ConfigClockSource+0xf6>
 800a288:	2b50      	cmp	r3, #80	; 0x50
 800a28a:	d873      	bhi.n	800a374 <HAL_TIM_ConfigClockSource+0x168>
 800a28c:	2b40      	cmp	r3, #64	; 0x40
 800a28e:	d058      	beq.n	800a342 <HAL_TIM_ConfigClockSource+0x136>
 800a290:	2b40      	cmp	r3, #64	; 0x40
 800a292:	d86f      	bhi.n	800a374 <HAL_TIM_ConfigClockSource+0x168>
 800a294:	2b30      	cmp	r3, #48	; 0x30
 800a296:	d064      	beq.n	800a362 <HAL_TIM_ConfigClockSource+0x156>
 800a298:	2b30      	cmp	r3, #48	; 0x30
 800a29a:	d86b      	bhi.n	800a374 <HAL_TIM_ConfigClockSource+0x168>
 800a29c:	2b20      	cmp	r3, #32
 800a29e:	d060      	beq.n	800a362 <HAL_TIM_ConfigClockSource+0x156>
 800a2a0:	2b20      	cmp	r3, #32
 800a2a2:	d867      	bhi.n	800a374 <HAL_TIM_ConfigClockSource+0x168>
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d05c      	beq.n	800a362 <HAL_TIM_ConfigClockSource+0x156>
 800a2a8:	2b10      	cmp	r3, #16
 800a2aa:	d05a      	beq.n	800a362 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a2ac:	e062      	b.n	800a374 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	6899      	ldr	r1, [r3, #8]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	f000 f966 	bl	800a58e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	609a      	str	r2, [r3, #8]
      break;
 800a2da:	e04e      	b.n	800a37a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6818      	ldr	r0, [r3, #0]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	6899      	ldr	r1, [r3, #8]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f000 f94f 	bl	800a58e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689a      	ldr	r2, [r3, #8]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2fe:	609a      	str	r2, [r3, #8]
      break;
 800a300:	e03b      	b.n	800a37a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	6859      	ldr	r1, [r3, #4]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	461a      	mov	r2, r3
 800a310:	f000 f8c6 	bl	800a4a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2150      	movs	r1, #80	; 0x50
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 f91d 	bl	800a55a <TIM_ITRx_SetConfig>
      break;
 800a320:	e02b      	b.n	800a37a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6818      	ldr	r0, [r3, #0]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	6859      	ldr	r1, [r3, #4]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	461a      	mov	r2, r3
 800a330:	f000 f8e4 	bl	800a4fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2160      	movs	r1, #96	; 0x60
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 f90d 	bl	800a55a <TIM_ITRx_SetConfig>
      break;
 800a340:	e01b      	b.n	800a37a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6818      	ldr	r0, [r3, #0]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	6859      	ldr	r1, [r3, #4]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	461a      	mov	r2, r3
 800a350:	f000 f8a6 	bl	800a4a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2140      	movs	r1, #64	; 0x40
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 f8fd 	bl	800a55a <TIM_ITRx_SetConfig>
      break;
 800a360:	e00b      	b.n	800a37a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4619      	mov	r1, r3
 800a36c:	4610      	mov	r0, r2
 800a36e:	f000 f8f4 	bl	800a55a <TIM_ITRx_SetConfig>
        break;
 800a372:	e002      	b.n	800a37a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a374:	bf00      	nop
 800a376:	e000      	b.n	800a37a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a378:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bc80      	pop	{r7}
 800a3a4:	4770      	bx	lr

0800a3a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bc80      	pop	{r7}
 800a3b6:	4770      	bx	lr

0800a3b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bc80      	pop	{r7}
 800a3c8:	4770      	bx	lr

0800a3ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3d2:	bf00      	nop
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bc80      	pop	{r7}
 800a3da:	4770      	bx	lr

0800a3dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3f2:	d007      	beq.n	800a404 <TIM_Base_SetConfig+0x28>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a25      	ldr	r2, [pc, #148]	; (800a48c <TIM_Base_SetConfig+0xb0>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d003      	beq.n	800a404 <TIM_Base_SetConfig+0x28>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a24      	ldr	r2, [pc, #144]	; (800a490 <TIM_Base_SetConfig+0xb4>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d108      	bne.n	800a416 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a40a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4313      	orrs	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a41c:	d013      	beq.n	800a446 <TIM_Base_SetConfig+0x6a>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a1a      	ldr	r2, [pc, #104]	; (800a48c <TIM_Base_SetConfig+0xb0>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d00f      	beq.n	800a446 <TIM_Base_SetConfig+0x6a>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a19      	ldr	r2, [pc, #100]	; (800a490 <TIM_Base_SetConfig+0xb4>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00b      	beq.n	800a446 <TIM_Base_SetConfig+0x6a>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a18      	ldr	r2, [pc, #96]	; (800a494 <TIM_Base_SetConfig+0xb8>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d007      	beq.n	800a446 <TIM_Base_SetConfig+0x6a>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a17      	ldr	r2, [pc, #92]	; (800a498 <TIM_Base_SetConfig+0xbc>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d003      	beq.n	800a446 <TIM_Base_SetConfig+0x6a>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a16      	ldr	r2, [pc, #88]	; (800a49c <TIM_Base_SetConfig+0xc0>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d108      	bne.n	800a458 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a44c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	4313      	orrs	r3, r2
 800a456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	4313      	orrs	r3, r2
 800a464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	689a      	ldr	r2, [r3, #8]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	615a      	str	r2, [r3, #20]
}
 800a482:	bf00      	nop
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	bc80      	pop	{r7}
 800a48a:	4770      	bx	lr
 800a48c:	40000400 	.word	0x40000400
 800a490:	40000800 	.word	0x40000800
 800a494:	40010800 	.word	0x40010800
 800a498:	40010c00 	.word	0x40010c00
 800a49c:	40011000 	.word	0x40011000

0800a4a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6a1b      	ldr	r3, [r3, #32]
 800a4b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6a1b      	ldr	r3, [r3, #32]
 800a4b6:	f023 0201 	bic.w	r2, r3, #1
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	011b      	lsls	r3, r3, #4
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	f023 030a 	bic.w	r3, r3, #10
 800a4dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	621a      	str	r2, [r3, #32]
}
 800a4f2:	bf00      	nop
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bc80      	pop	{r7}
 800a4fa:	4770      	bx	lr

0800a4fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b087      	sub	sp, #28
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	f023 0210 	bic.w	r2, r3, #16
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6a1b      	ldr	r3, [r3, #32]
 800a51e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a526:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	031b      	lsls	r3, r3, #12
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	4313      	orrs	r3, r2
 800a530:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a538:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	011b      	lsls	r3, r3, #4
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	4313      	orrs	r3, r2
 800a542:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	621a      	str	r2, [r3, #32]
}
 800a550:	bf00      	nop
 800a552:	371c      	adds	r7, #28
 800a554:	46bd      	mov	sp, r7
 800a556:	bc80      	pop	{r7}
 800a558:	4770      	bx	lr

0800a55a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b085      	sub	sp, #20
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4313      	orrs	r3, r2
 800a578:	f043 0307 	orr.w	r3, r3, #7
 800a57c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	609a      	str	r2, [r3, #8]
}
 800a584:	bf00      	nop
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	bc80      	pop	{r7}
 800a58c:	4770      	bx	lr

0800a58e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a58e:	b480      	push	{r7}
 800a590:	b087      	sub	sp, #28
 800a592:	af00      	add	r7, sp, #0
 800a594:	60f8      	str	r0, [r7, #12]
 800a596:	60b9      	str	r1, [r7, #8]
 800a598:	607a      	str	r2, [r7, #4]
 800a59a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	021a      	lsls	r2, r3, #8
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	431a      	orrs	r2, r3
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	609a      	str	r2, [r3, #8]
}
 800a5c2:	bf00      	nop
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bc80      	pop	{r7}
 800a5ca:	4770      	bx	lr

0800a5cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f003 031f 	and.w	r3, r3, #31
 800a5de:	2201      	movs	r2, #1
 800a5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6a1a      	ldr	r2, [r3, #32]
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	43db      	mvns	r3, r3
 800a5ee:	401a      	ands	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6a1a      	ldr	r2, [r3, #32]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f003 031f 	and.w	r3, r3, #31
 800a5fe:	6879      	ldr	r1, [r7, #4]
 800a600:	fa01 f303 	lsl.w	r3, r1, r3
 800a604:	431a      	orrs	r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	621a      	str	r2, [r3, #32]
}
 800a60a:	bf00      	nop
 800a60c:	371c      	adds	r7, #28
 800a60e:	46bd      	mov	sp, r7
 800a610:	bc80      	pop	{r7}
 800a612:	4770      	bx	lr

0800a614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a624:	2b01      	cmp	r3, #1
 800a626:	d101      	bne.n	800a62c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a628:	2302      	movs	r3, #2
 800a62a:	e046      	b.n	800a6ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a66e:	d00e      	beq.n	800a68e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a13      	ldr	r2, [pc, #76]	; (800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d009      	beq.n	800a68e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a12      	ldr	r2, [pc, #72]	; (800a6c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d004      	beq.n	800a68e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a10      	ldr	r2, [pc, #64]	; (800a6cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d10c      	bne.n	800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bc80      	pop	{r7}
 800a6c2:	4770      	bx	lr
 800a6c4:	40000400 	.word	0x40000400
 800a6c8:	40000800 	.word	0x40000800
 800a6cc:	40010800 	.word	0x40010800

0800a6d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a6e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a6e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bc80      	pop	{r7}
 800a6fa:	4770      	bx	lr

0800a6fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a704:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a708:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a710:	b29a      	uxth	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	b29b      	uxth	r3, r3
 800a716:	43db      	mvns	r3, r3
 800a718:	b29b      	uxth	r3, r3
 800a71a:	4013      	ands	r3, r2
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bc80      	pop	{r7}
 800a72e:	4770      	bx	lr

0800a730 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a730:	b084      	sub	sp, #16
 800a732:	b480      	push	{r7}
 800a734:	b083      	sub	sp, #12
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	f107 0014 	add.w	r0, r7, #20
 800a73e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	bc80      	pop	{r7}
 800a76c:	b004      	add	sp, #16
 800a76e:	4770      	bx	lr

0800a770 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a770:	b480      	push	{r7}
 800a772:	b09b      	sub	sp, #108	; 0x6c
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	881b      	ldrh	r3, [r3, #0]
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a796:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	78db      	ldrb	r3, [r3, #3]
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d81f      	bhi.n	800a7e2 <USB_ActivateEndpoint+0x72>
 800a7a2:	a201      	add	r2, pc, #4	; (adr r2, 800a7a8 <USB_ActivateEndpoint+0x38>)
 800a7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a8:	0800a7b9 	.word	0x0800a7b9
 800a7ac:	0800a7d5 	.word	0x0800a7d5
 800a7b0:	0800a7eb 	.word	0x0800a7eb
 800a7b4:	0800a7c7 	.word	0x0800a7c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a7b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a7bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a7c4:	e012      	b.n	800a7ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a7c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a7ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a7ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a7d2:	e00b      	b.n	800a7ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a7d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a7d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a7e0:	e004      	b.n	800a7ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800a7e8:	e000      	b.n	800a7ec <USB_ActivateEndpoint+0x7c>
      break;
 800a7ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	441a      	add	r2, r3
 800a7f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a7fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	881b      	ldrh	r3, [r3, #0]
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a824:	b29a      	uxth	r2, r3
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	4313      	orrs	r3, r2
 800a82e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	441a      	add	r2, r3
 800a83c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a84c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a850:	b29b      	uxth	r3, r3
 800a852:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	7b1b      	ldrb	r3, [r3, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f040 8149 	bne.w	800aaf0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	785b      	ldrb	r3, [r3, #1]
 800a862:	2b00      	cmp	r3, #0
 800a864:	f000 8084 	beq.w	800a970 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	617b      	str	r3, [r7, #20]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a872:	b29b      	uxth	r3, r3
 800a874:	461a      	mov	r2, r3
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	4413      	add	r3, r2
 800a87a:	617b      	str	r3, [r7, #20]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	011a      	lsls	r2, r3, #4
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	4413      	add	r3, r2
 800a886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a88a:	613b      	str	r3, [r7, #16]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	88db      	ldrh	r3, [r3, #6]
 800a890:	085b      	lsrs	r3, r3, #1
 800a892:	b29b      	uxth	r3, r3
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	b29a      	uxth	r2, r3
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	81fb      	strh	r3, [r7, #14]
 800a8aa:	89fb      	ldrh	r3, [r7, #14]
 800a8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01b      	beq.n	800a8ec <USB_ActivateEndpoint+0x17c>
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ca:	81bb      	strh	r3, [r7, #12]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	441a      	add	r2, r3
 800a8d6:	89bb      	ldrh	r3, [r7, #12]
 800a8d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	78db      	ldrb	r3, [r3, #3]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d020      	beq.n	800a936 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4413      	add	r3, r2
 800a8fe:	881b      	ldrh	r3, [r3, #0]
 800a900:	b29b      	uxth	r3, r3
 800a902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a90a:	813b      	strh	r3, [r7, #8]
 800a90c:	893b      	ldrh	r3, [r7, #8]
 800a90e:	f083 0320 	eor.w	r3, r3, #32
 800a912:	813b      	strh	r3, [r7, #8]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	441a      	add	r2, r3
 800a91e:	893b      	ldrh	r3, [r7, #8]
 800a920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a92c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a930:	b29b      	uxth	r3, r3
 800a932:	8013      	strh	r3, [r2, #0]
 800a934:	e27f      	b.n	800ae36 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	b29b      	uxth	r3, r3
 800a944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a94c:	817b      	strh	r3, [r7, #10]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	441a      	add	r2, r3
 800a958:	897b      	ldrh	r3, [r7, #10]
 800a95a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a95e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	8013      	strh	r3, [r2, #0]
 800a96e:	e262      	b.n	800ae36 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	461a      	mov	r2, r3
 800a97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a980:	4413      	add	r3, r2
 800a982:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	011a      	lsls	r2, r3, #4
 800a98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98c:	4413      	add	r3, r2
 800a98e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a992:	62bb      	str	r3, [r7, #40]	; 0x28
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	88db      	ldrh	r3, [r3, #6]
 800a998:	085b      	lsrs	r3, r3, #1
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	005b      	lsls	r3, r3, #1
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	4413      	add	r3, r2
 800a9b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	011a      	lsls	r2, r3, #4
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	4413      	add	r3, r2
 800a9c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a9c6:	623b      	str	r3, [r7, #32]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d112      	bne.n	800a9f6 <USB_ActivateEndpoint+0x286>
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	801a      	strh	r2, [r3, #0]
 800a9e0:	6a3b      	ldr	r3, [r7, #32]
 800a9e2:	881b      	ldrh	r3, [r3, #0]
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	801a      	strh	r2, [r3, #0]
 800a9f4:	e02f      	b.n	800aa56 <USB_ActivateEndpoint+0x2e6>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	2b3e      	cmp	r3, #62	; 0x3e
 800a9fc:	d813      	bhi.n	800aa26 <USB_ActivateEndpoint+0x2b6>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	085b      	lsrs	r3, r3, #1
 800aa04:	663b      	str	r3, [r7, #96]	; 0x60
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <USB_ActivateEndpoint+0x2a8>
 800aa12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa14:	3301      	adds	r3, #1
 800aa16:	663b      	str	r3, [r7, #96]	; 0x60
 800aa18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	029b      	lsls	r3, r3, #10
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	801a      	strh	r2, [r3, #0]
 800aa24:	e017      	b.n	800aa56 <USB_ActivateEndpoint+0x2e6>
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	095b      	lsrs	r3, r3, #5
 800aa2c:	663b      	str	r3, [r7, #96]	; 0x60
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	f003 031f 	and.w	r3, r3, #31
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d102      	bne.n	800aa40 <USB_ActivateEndpoint+0x2d0>
 800aa3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	663b      	str	r3, [r7, #96]	; 0x60
 800aa40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	029b      	lsls	r3, r3, #10
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	83fb      	strh	r3, [r7, #30]
 800aa64:	8bfb      	ldrh	r3, [r7, #30]
 800aa66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d01b      	beq.n	800aaa6 <USB_ActivateEndpoint+0x336>
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa84:	83bb      	strh	r3, [r7, #28]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	441a      	add	r2, r3
 800aa90:	8bbb      	ldrh	r3, [r7, #28]
 800aa92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	881b      	ldrh	r3, [r3, #0]
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aabc:	837b      	strh	r3, [r7, #26]
 800aabe:	8b7b      	ldrh	r3, [r7, #26]
 800aac0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aac4:	837b      	strh	r3, [r7, #26]
 800aac6:	8b7b      	ldrh	r3, [r7, #26]
 800aac8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aacc:	837b      	strh	r3, [r7, #26]
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	441a      	add	r2, r3
 800aad8:	8b7b      	ldrh	r3, [r7, #26]
 800aada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	8013      	strh	r3, [r2, #0]
 800aaee:	e1a2      	b.n	800ae36 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	441a      	add	r2, r3
 800ab14:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800ab18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ab24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	461a      	mov	r2, r3
 800ab3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab3c:	4413      	add	r3, r2
 800ab3e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	011a      	lsls	r2, r3, #4
 800ab46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab48:	4413      	add	r3, r2
 800ab4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab4e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	891b      	ldrh	r3, [r3, #8]
 800ab54:	085b      	lsrs	r3, r3, #1
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab5e:	801a      	strh	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	653b      	str	r3, [r7, #80]	; 0x50
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab70:	4413      	add	r3, r2
 800ab72:	653b      	str	r3, [r7, #80]	; 0x50
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	011a      	lsls	r2, r3, #4
 800ab7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab7c:	4413      	add	r3, r2
 800ab7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ab82:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	895b      	ldrh	r3, [r3, #10]
 800ab88:	085b      	lsrs	r3, r3, #1
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	785b      	ldrb	r3, [r3, #1]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f040 8091 	bne.w	800acc0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800abac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800abae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d01b      	beq.n	800abee <USB_ActivateEndpoint+0x47e>
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abcc:	877b      	strh	r3, [r7, #58]	; 0x3a
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	441a      	add	r2, r3
 800abd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800abda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abea:	b29b      	uxth	r3, r3
 800abec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	873b      	strh	r3, [r7, #56]	; 0x38
 800abfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800abfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d01b      	beq.n	800ac3e <USB_ActivateEndpoint+0x4ce>
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	441a      	add	r2, r3
 800ac28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac54:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ac56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ac5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac64:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	441a      	add	r2, r3
 800ac70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac9c:	867b      	strh	r3, [r7, #50]	; 0x32
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	441a      	add	r2, r3
 800aca8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800acaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acba:	b29b      	uxth	r3, r3
 800acbc:	8013      	strh	r3, [r2, #0]
 800acbe:	e0ba      	b.n	800ae36 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	881b      	ldrh	r3, [r3, #0]
 800accc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800acd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800acd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01d      	beq.n	800ad18 <USB_ActivateEndpoint+0x5a8>
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acf2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	441a      	add	r2, r3
 800ad00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ad04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ad28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ad2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d01d      	beq.n	800ad70 <USB_ActivateEndpoint+0x600>
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	441a      	add	r2, r3
 800ad58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ad5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	78db      	ldrb	r3, [r3, #3]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d024      	beq.n	800adc2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ad92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ad96:	f083 0320 	eor.w	r3, r3, #32
 800ad9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	441a      	add	r2, r3
 800ada8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800adac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	8013      	strh	r3, [r2, #0]
 800adc0:	e01d      	b.n	800adfe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	b29b      	uxth	r3, r3
 800add0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800add4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800add8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	441a      	add	r2, r3
 800ade6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800adea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	441a      	add	r2, r3
 800ae20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800ae36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	376c      	adds	r7, #108	; 0x6c
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bc80      	pop	{r7}
 800ae42:	4770      	bx	lr

0800ae44 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b08d      	sub	sp, #52	; 0x34
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	7b1b      	ldrb	r3, [r3, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f040 808e 	bne.w	800af74 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	785b      	ldrb	r3, [r3, #1]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d044      	beq.n	800aeea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	81bb      	strh	r3, [r7, #12]
 800ae6e:	89bb      	ldrh	r3, [r7, #12]
 800ae70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d01b      	beq.n	800aeb0 <USB_DeactivateEndpoint+0x6c>
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8e:	817b      	strh	r3, [r7, #10]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	441a      	add	r2, r3
 800ae9a:	897b      	ldrh	r3, [r7, #10]
 800ae9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aea8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	881b      	ldrh	r3, [r3, #0]
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aec6:	813b      	strh	r3, [r7, #8]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	441a      	add	r2, r3
 800aed2:	893b      	ldrh	r3, [r7, #8]
 800aed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aedc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	8013      	strh	r3, [r2, #0]
 800aee8:	e192      	b.n	800b210 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	827b      	strh	r3, [r7, #18]
 800aef8:	8a7b      	ldrh	r3, [r7, #18]
 800aefa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d01b      	beq.n	800af3a <USB_DeactivateEndpoint+0xf6>
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4413      	add	r3, r2
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af18:	823b      	strh	r3, [r7, #16]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	441a      	add	r2, r3
 800af24:	8a3b      	ldrh	r3, [r7, #16]
 800af26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af36:	b29b      	uxth	r3, r3
 800af38:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	b29b      	uxth	r3, r3
 800af48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af50:	81fb      	strh	r3, [r7, #14]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	441a      	add	r2, r3
 800af5c:	89fb      	ldrh	r3, [r7, #14]
 800af5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af6e:	b29b      	uxth	r3, r3
 800af70:	8013      	strh	r3, [r2, #0]
 800af72:	e14d      	b.n	800b210 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	785b      	ldrb	r3, [r3, #1]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f040 80a5 	bne.w	800b0c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	843b      	strh	r3, [r7, #32]
 800af8c:	8c3b      	ldrh	r3, [r7, #32]
 800af8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af92:	2b00      	cmp	r3, #0
 800af94:	d01b      	beq.n	800afce <USB_DeactivateEndpoint+0x18a>
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afac:	83fb      	strh	r3, [r7, #30]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	441a      	add	r2, r3
 800afb8:	8bfb      	ldrh	r3, [r7, #30]
 800afba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afca:	b29b      	uxth	r3, r3
 800afcc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	83bb      	strh	r3, [r7, #28]
 800afdc:	8bbb      	ldrh	r3, [r7, #28]
 800afde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d01b      	beq.n	800b01e <USB_DeactivateEndpoint+0x1da>
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800affc:	837b      	strh	r3, [r7, #26]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	441a      	add	r2, r3
 800b008:	8b7b      	ldrh	r3, [r7, #26]
 800b00a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b00e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b016:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4413      	add	r3, r2
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b034:	833b      	strh	r3, [r7, #24]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	441a      	add	r2, r3
 800b040:	8b3b      	ldrh	r3, [r7, #24]
 800b042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b04a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b04e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b052:	b29b      	uxth	r3, r3
 800b054:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	4413      	add	r3, r2
 800b060:	881b      	ldrh	r3, [r3, #0]
 800b062:	b29b      	uxth	r3, r3
 800b064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b06c:	82fb      	strh	r3, [r7, #22]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	441a      	add	r2, r3
 800b078:	8afb      	ldrh	r3, [r7, #22]
 800b07a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b07e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	881b      	ldrh	r3, [r3, #0]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0a4:	82bb      	strh	r3, [r7, #20]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	441a      	add	r2, r3
 800b0b0:	8abb      	ldrh	r3, [r7, #20]
 800b0b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	8013      	strh	r3, [r2, #0]
 800b0c6:	e0a3      	b.n	800b210 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b0d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d01b      	beq.n	800b118 <USB_DeactivateEndpoint+0x2d4>
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	881b      	ldrh	r3, [r3, #0]
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	441a      	add	r2, r3
 800b102:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b10c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b114:	b29b      	uxth	r3, r3
 800b116:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b126:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d01b      	beq.n	800b168 <USB_DeactivateEndpoint+0x324>
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b146:	853b      	strh	r3, [r7, #40]	; 0x28
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	441a      	add	r2, r3
 800b152:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b15c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b160:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b164:	b29b      	uxth	r3, r3
 800b166:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	b29b      	uxth	r3, r3
 800b176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b17a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b17e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	441a      	add	r2, r3
 800b18a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b18c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	441a      	add	r2, r3
 800b1c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ee:	847b      	strh	r3, [r7, #34]	; 0x22
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	441a      	add	r2, r3
 800b1fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3734      	adds	r7, #52	; 0x34
 800b216:	46bd      	mov	sp, r7
 800b218:	bc80      	pop	{r7}
 800b21a:	4770      	bx	lr

0800b21c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b0cc      	sub	sp, #304	; 0x130
 800b220:	af00      	add	r7, sp, #0
 800b222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b22a:	6018      	str	r0, [r3, #0]
 800b22c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b234:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b23a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	785b      	ldrb	r3, [r3, #1]
 800b242:	2b01      	cmp	r3, #1
 800b244:	f041 817d 	bne.w	800c542 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b24c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	699a      	ldr	r2, [r3, #24]
 800b254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	429a      	cmp	r2, r3
 800b262:	d908      	bls.n	800b276 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b274:	e007      	b.n	800b286 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b27a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b28a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	7b1b      	ldrb	r3, [r3, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d152      	bne.n	800b33c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b29a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6959      	ldr	r1, [r3, #20]
 800b2a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	88da      	ldrh	r2, [r3, #6]
 800b2ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b2b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b2bc:	6800      	ldr	r0, [r0, #0]
 800b2be:	f001 ff0e 	bl	800d0de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b2c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b2ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b2ce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b2d2:	6812      	ldr	r2, [r2, #0]
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b2f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b2f4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800b2f8:	6812      	ldr	r2, [r2, #0]
 800b2fa:	440a      	add	r2, r1
 800b2fc:	601a      	str	r2, [r3, #0]
 800b2fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	011a      	lsls	r2, r3, #4
 800b30c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b310:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4413      	add	r3, r2
 800b318:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b31c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b320:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b330:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	801a      	strh	r2, [r3, #0]
 800b338:	f001 b8b5 	b.w	800c4a6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b33c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	78db      	ldrb	r3, [r3, #3]
 800b348:	2b02      	cmp	r3, #2
 800b34a:	f040 84c6 	bne.w	800bcda <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b34e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6a1a      	ldr	r2, [r3, #32]
 800b35a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b35e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	429a      	cmp	r2, r3
 800b368:	f240 8443 	bls.w	800bbf2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800b36c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b370:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b37a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b392:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b39a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	441a      	add	r2, r3
 800b3b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b3b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b3c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b3c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6a1a      	ldr	r2, [r3, #32]
 800b3d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3d8:	1ad2      	subs	r2, r2, r3
 800b3da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b3e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	b29b      	uxth	r3, r3
 800b404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 823e 	beq.w	800b88a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b40e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b412:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b416:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b41a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b41e:	6812      	ldr	r2, [r2, #0]
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	785b      	ldrb	r3, [r3, #1]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f040 809a 	bne.w	800b568 <USB_EPStartXfer+0x34c>
 800b434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b43c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b440:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b444:	6812      	ldr	r2, [r2, #0]
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b44c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b456:	b29b      	uxth	r3, r3
 800b458:	4619      	mov	r1, r3
 800b45a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b462:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b466:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800b46a:	6812      	ldr	r2, [r2, #0]
 800b46c:	440a      	add	r2, r1
 800b46e:	601a      	str	r2, [r3, #0]
 800b470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	011a      	lsls	r2, r3, #4
 800b47e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4413      	add	r3, r2
 800b48a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800b48e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b492:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d122      	bne.n	800b4e6 <USB_EPStartXfer+0x2ca>
 800b4a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	881b      	ldrh	r3, [r3, #0]
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	801a      	strh	r2, [r3, #0]
 800b4c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	881b      	ldrh	r3, [r3, #0]
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	801a      	strh	r2, [r3, #0]
 800b4e4:	e079      	b.n	800b5da <USB_EPStartXfer+0x3be>
 800b4e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4ea:	2b3e      	cmp	r3, #62	; 0x3e
 800b4ec:	d81b      	bhi.n	800b526 <USB_EPStartXfer+0x30a>
 800b4ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4f2:	085b      	lsrs	r3, r3, #1
 800b4f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b4f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b00      	cmp	r3, #0
 800b502:	d004      	beq.n	800b50e <USB_EPStartXfer+0x2f2>
 800b504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b508:	3301      	adds	r3, #1
 800b50a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b50e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b512:	b29b      	uxth	r3, r3
 800b514:	029b      	lsls	r3, r3, #10
 800b516:	b29a      	uxth	r2, r3
 800b518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b51c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	801a      	strh	r2, [r3, #0]
 800b524:	e059      	b.n	800b5da <USB_EPStartXfer+0x3be>
 800b526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b52a:	095b      	lsrs	r3, r3, #5
 800b52c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b534:	f003 031f 	and.w	r3, r3, #31
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d104      	bne.n	800b546 <USB_EPStartXfer+0x32a>
 800b53c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b540:	3b01      	subs	r3, #1
 800b542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	029b      	lsls	r3, r3, #10
 800b54e:	b29b      	uxth	r3, r3
 800b550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b558:	b29a      	uxth	r2, r3
 800b55a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b55e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	801a      	strh	r2, [r3, #0]
 800b566:	e038      	b.n	800b5da <USB_EPStartXfer+0x3be>
 800b568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b56c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	785b      	ldrb	r3, [r3, #1]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d130      	bne.n	800b5da <USB_EPStartXfer+0x3be>
 800b578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b57c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b586:	b29b      	uxth	r3, r3
 800b588:	4619      	mov	r1, r3
 800b58a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b58e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b592:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b596:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800b59a:	6812      	ldr	r2, [r2, #0]
 800b59c:	440a      	add	r2, r1
 800b59e:	601a      	str	r2, [r3, #0]
 800b5a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	011a      	lsls	r2, r3, #4
 800b5ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800b5be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5c6:	601a      	str	r2, [r3, #0]
 800b5c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b5da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	895b      	ldrh	r3, [r3, #10]
 800b5e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6959      	ldr	r1, [r3, #20]
 800b5f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b600:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b604:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b608:	6800      	ldr	r0, [r0, #0]
 800b60a:	f001 fd68 	bl	800d0de <USB_WritePMA>
            ep->xfer_buff += len;
 800b60e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	695a      	ldr	r2, [r3, #20]
 800b61a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b61e:	441a      	add	r2, r3
 800b620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b62c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6a1a      	ldr	r2, [r3, #32]
 800b638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b63c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	429a      	cmp	r2, r3
 800b646:	d90f      	bls.n	800b668 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800b648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b64c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6a1a      	ldr	r2, [r3, #32]
 800b654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b658:	1ad2      	subs	r2, r2, r3
 800b65a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b65e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	621a      	str	r2, [r3, #32]
 800b666:	e00e      	b.n	800b686 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800b668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b66c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	6a1b      	ldr	r3, [r3, #32]
 800b674:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800b678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b67c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2200      	movs	r2, #0
 800b684:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b68a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	785b      	ldrb	r3, [r3, #1]
 800b692:	2b00      	cmp	r3, #0
 800b694:	f040 809a 	bne.w	800b7cc <USB_EPStartXfer+0x5b0>
 800b698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b69c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b6a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b6a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b6a8:	6812      	ldr	r2, [r2, #0]
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	4619      	mov	r1, r3
 800b6be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b6c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b6ca:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800b6ce:	6812      	ldr	r2, [r2, #0]
 800b6d0:	440a      	add	r2, r1
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	011a      	lsls	r2, r3, #4
 800b6e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b6f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b700:	2b00      	cmp	r3, #0
 800b702:	d122      	bne.n	800b74a <USB_EPStartXfer+0x52e>
 800b704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b708:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	881b      	ldrh	r3, [r3, #0]
 800b710:	b29b      	uxth	r3, r3
 800b712:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b716:	b29a      	uxth	r2, r3
 800b718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b71c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	801a      	strh	r2, [r3, #0]
 800b724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b728:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	881b      	ldrh	r3, [r3, #0]
 800b730:	b29b      	uxth	r3, r3
 800b732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b73a:	b29a      	uxth	r2, r3
 800b73c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b740:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	801a      	strh	r2, [r3, #0]
 800b748:	e083      	b.n	800b852 <USB_EPStartXfer+0x636>
 800b74a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b74e:	2b3e      	cmp	r3, #62	; 0x3e
 800b750:	d81b      	bhi.n	800b78a <USB_EPStartXfer+0x56e>
 800b752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b756:	085b      	lsrs	r3, r3, #1
 800b758:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b75c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b760:	f003 0301 	and.w	r3, r3, #1
 800b764:	2b00      	cmp	r3, #0
 800b766:	d004      	beq.n	800b772 <USB_EPStartXfer+0x556>
 800b768:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b76c:	3301      	adds	r3, #1
 800b76e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b772:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b776:	b29b      	uxth	r3, r3
 800b778:	029b      	lsls	r3, r3, #10
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b780:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	801a      	strh	r2, [r3, #0]
 800b788:	e063      	b.n	800b852 <USB_EPStartXfer+0x636>
 800b78a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b78e:	095b      	lsrs	r3, r3, #5
 800b790:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b798:	f003 031f 	and.w	r3, r3, #31
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d104      	bne.n	800b7aa <USB_EPStartXfer+0x58e>
 800b7a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b7aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	029b      	lsls	r3, r3, #10
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	801a      	strh	r2, [r3, #0]
 800b7ca:	e042      	b.n	800b852 <USB_EPStartXfer+0x636>
 800b7cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	785b      	ldrb	r3, [r3, #1]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d13a      	bne.n	800b852 <USB_EPStartXfer+0x636>
 800b7dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b7e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b7e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b7ec:	6812      	ldr	r2, [r2, #0]
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	4619      	mov	r1, r3
 800b802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b806:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b80a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b80e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800b812:	6812      	ldr	r2, [r2, #0]
 800b814:	440a      	add	r2, r1
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b81c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	011a      	lsls	r2, r3, #4
 800b826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b82a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4413      	add	r3, r2
 800b832:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b83a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b844:	b29a      	uxth	r2, r3
 800b846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b84a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	891b      	ldrh	r3, [r3, #8]
 800b85e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	6959      	ldr	r1, [r3, #20]
 800b86e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b872:	b29b      	uxth	r3, r3
 800b874:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b878:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b87c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b880:	6800      	ldr	r0, [r0, #0]
 800b882:	f001 fc2c 	bl	800d0de <USB_WritePMA>
 800b886:	f000 be0e 	b.w	800c4a6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b88a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b88e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	785b      	ldrb	r3, [r3, #1]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d16d      	bne.n	800b976 <USB_EPStartXfer+0x75a>
 800b89a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b89e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8ba:	4413      	add	r3, r2
 800b8bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	011a      	lsls	r2, r3, #4
 800b8cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8ce:	4413      	add	r3, r2
 800b8d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b8d4:	647b      	str	r3, [r7, #68]	; 0x44
 800b8d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d112      	bne.n	800b904 <USB_EPStartXfer+0x6e8>
 800b8de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8e0:	881b      	ldrh	r3, [r3, #0]
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b8e8:	b29a      	uxth	r2, r3
 800b8ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ec:	801a      	strh	r2, [r3, #0]
 800b8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8f0:	881b      	ldrh	r3, [r3, #0]
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b900:	801a      	strh	r2, [r3, #0]
 800b902:	e063      	b.n	800b9cc <USB_EPStartXfer+0x7b0>
 800b904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b908:	2b3e      	cmp	r3, #62	; 0x3e
 800b90a:	d817      	bhi.n	800b93c <USB_EPStartXfer+0x720>
 800b90c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b910:	085b      	lsrs	r3, r3, #1
 800b912:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b91a:	f003 0301 	and.w	r3, r3, #1
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d004      	beq.n	800b92c <USB_EPStartXfer+0x710>
 800b922:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b926:	3301      	adds	r3, #1
 800b928:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b92c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b930:	b29b      	uxth	r3, r3
 800b932:	029b      	lsls	r3, r3, #10
 800b934:	b29a      	uxth	r2, r3
 800b936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b938:	801a      	strh	r2, [r3, #0]
 800b93a:	e047      	b.n	800b9cc <USB_EPStartXfer+0x7b0>
 800b93c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b940:	095b      	lsrs	r3, r3, #5
 800b942:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b94a:	f003 031f 	and.w	r3, r3, #31
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d104      	bne.n	800b95c <USB_EPStartXfer+0x740>
 800b952:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b956:	3b01      	subs	r3, #1
 800b958:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b95c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b960:	b29b      	uxth	r3, r3
 800b962:	029b      	lsls	r3, r3, #10
 800b964:	b29b      	uxth	r3, r3
 800b966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b96a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b96e:	b29a      	uxth	r2, r3
 800b970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b972:	801a      	strh	r2, [r3, #0]
 800b974:	e02a      	b.n	800b9cc <USB_EPStartXfer+0x7b0>
 800b976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b97a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	785b      	ldrb	r3, [r3, #1]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d122      	bne.n	800b9cc <USB_EPStartXfer+0x7b0>
 800b986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b98a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	653b      	str	r3, [r7, #80]	; 0x50
 800b992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a6:	4413      	add	r3, r2
 800b9a8:	653b      	str	r3, [r7, #80]	; 0x50
 800b9aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	011a      	lsls	r2, r3, #4
 800b9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ba:	4413      	add	r3, r2
 800b9bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b9c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b9cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	891b      	ldrh	r3, [r3, #8]
 800b9d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	6959      	ldr	r1, [r3, #20]
 800b9e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b9f2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b9f6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b9fa:	6800      	ldr	r0, [r0, #0]
 800b9fc:	f001 fb6f 	bl	800d0de <USB_WritePMA>
            ep->xfer_buff += len;
 800ba00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	695a      	ldr	r2, [r3, #20]
 800ba0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba10:	441a      	add	r2, r3
 800ba12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ba1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	6a1a      	ldr	r2, [r3, #32]
 800ba2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d90f      	bls.n	800ba5a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800ba3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6a1a      	ldr	r2, [r3, #32]
 800ba46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba4a:	1ad2      	subs	r2, r2, r3
 800ba4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	621a      	str	r2, [r3, #32]
 800ba58:	e00e      	b.n	800ba78 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800ba5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6a1b      	ldr	r3, [r3, #32]
 800ba66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800ba6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2200      	movs	r2, #0
 800ba76:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	643b      	str	r3, [r7, #64]	; 0x40
 800ba84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	785b      	ldrb	r3, [r3, #1]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d16d      	bne.n	800bb70 <USB_EPStartXfer+0x954>
 800ba94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800baa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800baa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baae:	b29b      	uxth	r3, r3
 800bab0:	461a      	mov	r2, r3
 800bab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab4:	4413      	add	r3, r2
 800bab6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800babc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	011a      	lsls	r2, r3, #4
 800bac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac8:	4413      	add	r3, r2
 800baca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bace:	637b      	str	r3, [r7, #52]	; 0x34
 800bad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d112      	bne.n	800bafe <USB_EPStartXfer+0x8e2>
 800bad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bada:	881b      	ldrh	r3, [r3, #0]
 800badc:	b29b      	uxth	r3, r3
 800bade:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae6:	801a      	strh	r2, [r3, #0]
 800bae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baea:	881b      	ldrh	r3, [r3, #0]
 800baec:	b29b      	uxth	r3, r3
 800baee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafa:	801a      	strh	r2, [r3, #0]
 800bafc:	e05d      	b.n	800bbba <USB_EPStartXfer+0x99e>
 800bafe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb02:	2b3e      	cmp	r3, #62	; 0x3e
 800bb04:	d817      	bhi.n	800bb36 <USB_EPStartXfer+0x91a>
 800bb06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb0a:	085b      	lsrs	r3, r3, #1
 800bb0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800bb10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d004      	beq.n	800bb26 <USB_EPStartXfer+0x90a>
 800bb1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bb20:	3301      	adds	r3, #1
 800bb22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800bb26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	029b      	lsls	r3, r3, #10
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb32:	801a      	strh	r2, [r3, #0]
 800bb34:	e041      	b.n	800bbba <USB_EPStartXfer+0x99e>
 800bb36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb3a:	095b      	lsrs	r3, r3, #5
 800bb3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800bb40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb44:	f003 031f 	and.w	r3, r3, #31
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d104      	bne.n	800bb56 <USB_EPStartXfer+0x93a>
 800bb4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bb50:	3b01      	subs	r3, #1
 800bb52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800bb56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	029b      	lsls	r3, r3, #10
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb6c:	801a      	strh	r2, [r3, #0]
 800bb6e:	e024      	b.n	800bbba <USB_EPStartXfer+0x99e>
 800bb70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	785b      	ldrb	r3, [r3, #1]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d11c      	bne.n	800bbba <USB_EPStartXfer+0x99e>
 800bb80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	461a      	mov	r2, r3
 800bb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb94:	4413      	add	r3, r2
 800bb96:	643b      	str	r3, [r7, #64]	; 0x40
 800bb98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	011a      	lsls	r2, r3, #4
 800bba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bba8:	4413      	add	r3, r2
 800bbaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bbae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bbba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	895b      	ldrh	r3, [r3, #10]
 800bbc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6959      	ldr	r1, [r3, #20]
 800bbd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800bbe0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800bbe4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800bbe8:	6800      	ldr	r0, [r0, #0]
 800bbea:	f001 fa78 	bl	800d0de <USB_WritePMA>
 800bbee:	f000 bc5a 	b.w	800c4a6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bbf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800bc02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4413      	add	r3, r2
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bc24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc28:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bc2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	441a      	add	r2, r3
 800bc46:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bc4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bc5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc7e:	4413      	add	r3, r2
 800bc80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	011a      	lsls	r2, r3, #4
 800bc90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc92:	4413      	add	r3, r2
 800bc94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bc98:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bca2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	891b      	ldrh	r3, [r3, #8]
 800bcb0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bcb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	6959      	ldr	r1, [r3, #20]
 800bcc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800bcca:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800bcce:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800bcd2:	6800      	ldr	r0, [r0, #0]
 800bcd4:	f001 fa03 	bl	800d0de <USB_WritePMA>
 800bcd8:	e3e5      	b.n	800c4a6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bcda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	4413      	add	r3, r2
 800bcf4:	881b      	ldrh	r3, [r3, #0]
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd00:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800bd04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	441a      	add	r2, r3
 800bd1e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800bd22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bd2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bd36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6a1a      	ldr	r2, [r3, #32]
 800bd42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd46:	1ad2      	subs	r2, r2, r3
 800bd48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bd54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4413      	add	r3, r2
 800bd6e:	881b      	ldrh	r3, [r3, #0]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 81bc 	beq.w	800c0f4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bd7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	785b      	ldrb	r3, [r3, #1]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d16d      	bne.n	800be76 <USB_EPStartXfer+0xc5a>
 800bd9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bda6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdba:	4413      	add	r3, r2
 800bdbc:	67bb      	str	r3, [r7, #120]	; 0x78
 800bdbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	011a      	lsls	r2, r3, #4
 800bdcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdce:	4413      	add	r3, r2
 800bdd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bdd4:	677b      	str	r3, [r7, #116]	; 0x74
 800bdd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d112      	bne.n	800be04 <USB_EPStartXfer+0xbe8>
 800bdde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdec:	801a      	strh	r2, [r3, #0]
 800bdee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be00:	801a      	strh	r2, [r3, #0]
 800be02:	e060      	b.n	800bec6 <USB_EPStartXfer+0xcaa>
 800be04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be08:	2b3e      	cmp	r3, #62	; 0x3e
 800be0a:	d817      	bhi.n	800be3c <USB_EPStartXfer+0xc20>
 800be0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be10:	085b      	lsrs	r3, r3, #1
 800be12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800be16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d004      	beq.n	800be2c <USB_EPStartXfer+0xc10>
 800be22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800be26:	3301      	adds	r3, #1
 800be28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800be2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800be30:	b29b      	uxth	r3, r3
 800be32:	029b      	lsls	r3, r3, #10
 800be34:	b29a      	uxth	r2, r3
 800be36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be38:	801a      	strh	r2, [r3, #0]
 800be3a:	e044      	b.n	800bec6 <USB_EPStartXfer+0xcaa>
 800be3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be40:	095b      	lsrs	r3, r3, #5
 800be42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800be46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be4a:	f003 031f 	and.w	r3, r3, #31
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d104      	bne.n	800be5c <USB_EPStartXfer+0xc40>
 800be52:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800be56:	3b01      	subs	r3, #1
 800be58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800be5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800be60:	b29b      	uxth	r3, r3
 800be62:	029b      	lsls	r3, r3, #10
 800be64:	b29b      	uxth	r3, r3
 800be66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be6e:	b29a      	uxth	r2, r3
 800be70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be72:	801a      	strh	r2, [r3, #0]
 800be74:	e027      	b.n	800bec6 <USB_EPStartXfer+0xcaa>
 800be76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	785b      	ldrb	r3, [r3, #1]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d11f      	bne.n	800bec6 <USB_EPStartXfer+0xcaa>
 800be86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be94:	b29b      	uxth	r3, r3
 800be96:	461a      	mov	r2, r3
 800be98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be9c:	4413      	add	r3, r2
 800be9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	011a      	lsls	r2, r3, #4
 800beb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800beb4:	4413      	add	r3, r2
 800beb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800beba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bec4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800beca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	895b      	ldrh	r3, [r3, #10]
 800bed2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800beda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6959      	ldr	r1, [r3, #20]
 800bee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800beec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800bef0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800bef4:	6800      	ldr	r0, [r0, #0]
 800bef6:	f001 f8f2 	bl	800d0de <USB_WritePMA>
          ep->xfer_buff += len;
 800befa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800befe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	695a      	ldr	r2, [r3, #20]
 800bf06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf0a:	441a      	add	r2, r3
 800bf0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800bf18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6a1a      	ldr	r2, [r3, #32]
 800bf24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d90f      	bls.n	800bf54 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800bf34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	6a1a      	ldr	r2, [r3, #32]
 800bf40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf44:	1ad2      	subs	r2, r2, r3
 800bf46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	621a      	str	r2, [r3, #32]
 800bf52:	e00e      	b.n	800bf72 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800bf54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	6a1b      	ldr	r3, [r3, #32]
 800bf60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800bf64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800bf72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 8295 	beq.w	800c4a6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bf7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	785b      	ldrb	r3, [r3, #1]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d16d      	bne.n	800c068 <USB_EPStartXfer+0xe4c>
 800bf8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfac:	4413      	add	r3, r2
 800bfae:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bfb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	011a      	lsls	r2, r3, #4
 800bfbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfc0:	4413      	add	r3, r2
 800bfc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bfc6:	667b      	str	r3, [r7, #100]	; 0x64
 800bfc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d112      	bne.n	800bff6 <USB_EPStartXfer+0xdda>
 800bfd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfde:	801a      	strh	r2, [r3, #0]
 800bfe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfe2:	881b      	ldrh	r3, [r3, #0]
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bff2:	801a      	strh	r2, [r3, #0]
 800bff4:	e063      	b.n	800c0be <USB_EPStartXfer+0xea2>
 800bff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bffa:	2b3e      	cmp	r3, #62	; 0x3e
 800bffc:	d817      	bhi.n	800c02e <USB_EPStartXfer+0xe12>
 800bffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c002:	085b      	lsrs	r3, r3, #1
 800c004:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d004      	beq.n	800c01e <USB_EPStartXfer+0xe02>
 800c014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c018:	3301      	adds	r3, #1
 800c01a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c022:	b29b      	uxth	r3, r3
 800c024:	029b      	lsls	r3, r3, #10
 800c026:	b29a      	uxth	r2, r3
 800c028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c02a:	801a      	strh	r2, [r3, #0]
 800c02c:	e047      	b.n	800c0be <USB_EPStartXfer+0xea2>
 800c02e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c032:	095b      	lsrs	r3, r3, #5
 800c034:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c03c:	f003 031f 	and.w	r3, r3, #31
 800c040:	2b00      	cmp	r3, #0
 800c042:	d104      	bne.n	800c04e <USB_EPStartXfer+0xe32>
 800c044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c048:	3b01      	subs	r3, #1
 800c04a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c052:	b29b      	uxth	r3, r3
 800c054:	029b      	lsls	r3, r3, #10
 800c056:	b29b      	uxth	r3, r3
 800c058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c05c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c060:	b29a      	uxth	r2, r3
 800c062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c064:	801a      	strh	r2, [r3, #0]
 800c066:	e02a      	b.n	800c0be <USB_EPStartXfer+0xea2>
 800c068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c06c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	785b      	ldrb	r3, [r3, #1]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d122      	bne.n	800c0be <USB_EPStartXfer+0xea2>
 800c078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c07c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	673b      	str	r3, [r7, #112]	; 0x70
 800c084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c092:	b29b      	uxth	r3, r3
 800c094:	461a      	mov	r2, r3
 800c096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c098:	4413      	add	r3, r2
 800c09a:	673b      	str	r3, [r7, #112]	; 0x70
 800c09c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	011a      	lsls	r2, r3, #4
 800c0aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0ac:	4413      	add	r3, r2
 800c0ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c0b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c0be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	891b      	ldrh	r3, [r3, #8]
 800c0ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c0ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	6959      	ldr	r1, [r3, #20]
 800c0da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c0e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800c0e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800c0ec:	6800      	ldr	r0, [r0, #0]
 800c0ee:	f000 fff6 	bl	800d0de <USB_WritePMA>
 800c0f2:	e1d8      	b.n	800c4a6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c0f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	785b      	ldrb	r3, [r3, #1]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d178      	bne.n	800c1f6 <USB_EPStartXfer+0xfda>
 800c104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c108:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c116:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c120:	b29b      	uxth	r3, r3
 800c122:	461a      	mov	r2, r3
 800c124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c128:	4413      	add	r3, r2
 800c12a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c12e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	011a      	lsls	r2, r3, #4
 800c13c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c140:	4413      	add	r3, r2
 800c142:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c146:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c14a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d116      	bne.n	800c180 <USB_EPStartXfer+0xf64>
 800c152:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c156:	881b      	ldrh	r3, [r3, #0]
 800c158:	b29b      	uxth	r3, r3
 800c15a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c15e:	b29a      	uxth	r2, r3
 800c160:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c164:	801a      	strh	r2, [r3, #0]
 800c166:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c16a:	881b      	ldrh	r3, [r3, #0]
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c176:	b29a      	uxth	r2, r3
 800c178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c17c:	801a      	strh	r2, [r3, #0]
 800c17e:	e06b      	b.n	800c258 <USB_EPStartXfer+0x103c>
 800c180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c184:	2b3e      	cmp	r3, #62	; 0x3e
 800c186:	d818      	bhi.n	800c1ba <USB_EPStartXfer+0xf9e>
 800c188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c18c:	085b      	lsrs	r3, r3, #1
 800c18e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d004      	beq.n	800c1a8 <USB_EPStartXfer+0xf8c>
 800c19e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c1a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	029b      	lsls	r3, r3, #10
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1b6:	801a      	strh	r2, [r3, #0]
 800c1b8:	e04e      	b.n	800c258 <USB_EPStartXfer+0x103c>
 800c1ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1be:	095b      	lsrs	r3, r3, #5
 800c1c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c1c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1c8:	f003 031f 	and.w	r3, r3, #31
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d104      	bne.n	800c1da <USB_EPStartXfer+0xfbe>
 800c1d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c1da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	029b      	lsls	r3, r3, #10
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1f2:	801a      	strh	r2, [r3, #0]
 800c1f4:	e030      	b.n	800c258 <USB_EPStartXfer+0x103c>
 800c1f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c1fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	785b      	ldrb	r3, [r3, #1]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d128      	bne.n	800c258 <USB_EPStartXfer+0x103c>
 800c206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c20a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c222:	b29b      	uxth	r3, r3
 800c224:	461a      	mov	r2, r3
 800c226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c22a:	4413      	add	r3, r2
 800c22c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	011a      	lsls	r2, r3, #4
 800c23e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c242:	4413      	add	r3, r2
 800c244:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c248:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c24c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c250:	b29a      	uxth	r2, r3
 800c252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c256:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c25c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	891b      	ldrh	r3, [r3, #8]
 800c264:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c26c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	6959      	ldr	r1, [r3, #20]
 800c274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c278:	b29b      	uxth	r3, r3
 800c27a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c27e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800c282:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800c286:	6800      	ldr	r0, [r0, #0]
 800c288:	f000 ff29 	bl	800d0de <USB_WritePMA>
          ep->xfer_buff += len;
 800c28c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	695a      	ldr	r2, [r3, #20]
 800c298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c29c:	441a      	add	r2, r3
 800c29e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800c2aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6a1a      	ldr	r2, [r3, #32]
 800c2b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d90f      	bls.n	800c2e6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800c2c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	6a1a      	ldr	r2, [r3, #32]
 800c2d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c2d6:	1ad2      	subs	r2, r2, r3
 800c2d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	621a      	str	r2, [r3, #32]
 800c2e4:	e00e      	b.n	800c304 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800c2e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6a1b      	ldr	r3, [r3, #32]
 800c2f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800c2f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2200      	movs	r2, #0
 800c302:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800c304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f000 80cc 	beq.w	800c4a6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c30e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c312:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c31c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	785b      	ldrb	r3, [r3, #1]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d178      	bne.n	800c41e <USB_EPStartXfer+0x1202>
 800c32c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c330:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c33a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c33e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c348:	b29b      	uxth	r3, r3
 800c34a:	461a      	mov	r2, r3
 800c34c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c350:	4413      	add	r3, r2
 800c352:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c35a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	011a      	lsls	r2, r3, #4
 800c364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c368:	4413      	add	r3, r2
 800c36a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c36e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c376:	2b00      	cmp	r3, #0
 800c378:	d116      	bne.n	800c3a8 <USB_EPStartXfer+0x118c>
 800c37a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	b29b      	uxth	r3, r3
 800c382:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c386:	b29a      	uxth	r2, r3
 800c388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c38c:	801a      	strh	r2, [r3, #0]
 800c38e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c392:	881b      	ldrh	r3, [r3, #0]
 800c394:	b29b      	uxth	r3, r3
 800c396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c39a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3a4:	801a      	strh	r2, [r3, #0]
 800c3a6:	e064      	b.n	800c472 <USB_EPStartXfer+0x1256>
 800c3a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3ac:	2b3e      	cmp	r3, #62	; 0x3e
 800c3ae:	d818      	bhi.n	800c3e2 <USB_EPStartXfer+0x11c6>
 800c3b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3b4:	085b      	lsrs	r3, r3, #1
 800c3b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c3ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3be:	f003 0301 	and.w	r3, r3, #1
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d004      	beq.n	800c3d0 <USB_EPStartXfer+0x11b4>
 800c3c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c3d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	029b      	lsls	r3, r3, #10
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3de:	801a      	strh	r2, [r3, #0]
 800c3e0:	e047      	b.n	800c472 <USB_EPStartXfer+0x1256>
 800c3e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3e6:	095b      	lsrs	r3, r3, #5
 800c3e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c3ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3f0:	f003 031f 	and.w	r3, r3, #31
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d104      	bne.n	800c402 <USB_EPStartXfer+0x11e6>
 800c3f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c406:	b29b      	uxth	r3, r3
 800c408:	029b      	lsls	r3, r3, #10
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c414:	b29a      	uxth	r2, r3
 800c416:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c41a:	801a      	strh	r2, [r3, #0]
 800c41c:	e029      	b.n	800c472 <USB_EPStartXfer+0x1256>
 800c41e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	785b      	ldrb	r3, [r3, #1]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d121      	bne.n	800c472 <USB_EPStartXfer+0x1256>
 800c42e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	461a      	mov	r2, r3
 800c440:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c444:	4413      	add	r3, r2
 800c446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c44a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c44e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	011a      	lsls	r2, r3, #4
 800c458:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c45c:	4413      	add	r3, r2
 800c45e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c470:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	895b      	ldrh	r3, [r3, #10]
 800c47e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	6959      	ldr	r1, [r3, #20]
 800c48e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c492:	b29b      	uxth	r3, r3
 800c494:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c498:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800c49c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800c4a0:	6800      	ldr	r0, [r0, #0]
 800c4a2:	f000 fe1c 	bl	800d0de <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c4a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	4413      	add	r3, r2
 800c4c0:	881b      	ldrh	r3, [r3, #0]
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c4c8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800c4cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4d4:	8013      	strh	r3, [r2, #0]
 800c4d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4da:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800c4de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c4e2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800c4e6:	8812      	ldrh	r2, [r2, #0]
 800c4e8:	f082 0210 	eor.w	r2, r2, #16
 800c4ec:	801a      	strh	r2, [r3, #0]
 800c4ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4f2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800c4f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c4fa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800c4fe:	8812      	ldrh	r2, [r2, #0]
 800c500:	f082 0220 	eor.w	r2, r2, #32
 800c504:	801a      	strh	r2, [r3, #0]
 800c506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c50a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	441a      	add	r2, r3
 800c520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c524:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c52e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	8013      	strh	r3, [r2, #0]
 800c53e:	f000 bc9f 	b.w	800ce80 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	7b1b      	ldrb	r3, [r3, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f040 80ae 	bne.w	800c6b0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	699a      	ldr	r2, [r3, #24]
 800c560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d917      	bls.n	800c5a0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800c570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800c580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	699a      	ldr	r2, [r3, #24]
 800c58c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c590:	1ad2      	subs	r2, r2, r3
 800c592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	619a      	str	r2, [r3, #24]
 800c59e:	e00e      	b.n	800c5be <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800c5a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c5a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	699b      	ldr	r3, [r3, #24]
 800c5ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800c5b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c5b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c5be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c5c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c5cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c5d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	461a      	mov	r2, r3
 800c5de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c5e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c5ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	011a      	lsls	r2, r3, #4
 800c5f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c5fa:	4413      	add	r3, r2
 800c5fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d116      	bne.n	800c63a <USB_EPStartXfer+0x141e>
 800c60c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	b29b      	uxth	r3, r3
 800c614:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c618:	b29a      	uxth	r2, r3
 800c61a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c61e:	801a      	strh	r2, [r3, #0]
 800c620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c624:	881b      	ldrh	r3, [r3, #0]
 800c626:	b29b      	uxth	r3, r3
 800c628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c62c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c630:	b29a      	uxth	r2, r3
 800c632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c636:	801a      	strh	r2, [r3, #0]
 800c638:	e3e8      	b.n	800ce0c <USB_EPStartXfer+0x1bf0>
 800c63a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c63e:	2b3e      	cmp	r3, #62	; 0x3e
 800c640:	d818      	bhi.n	800c674 <USB_EPStartXfer+0x1458>
 800c642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c646:	085b      	lsrs	r3, r3, #1
 800c648:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c64c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c650:	f003 0301 	and.w	r3, r3, #1
 800c654:	2b00      	cmp	r3, #0
 800c656:	d004      	beq.n	800c662 <USB_EPStartXfer+0x1446>
 800c658:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c65c:	3301      	adds	r3, #1
 800c65e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c662:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c666:	b29b      	uxth	r3, r3
 800c668:	029b      	lsls	r3, r3, #10
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c670:	801a      	strh	r2, [r3, #0]
 800c672:	e3cb      	b.n	800ce0c <USB_EPStartXfer+0x1bf0>
 800c674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c678:	095b      	lsrs	r3, r3, #5
 800c67a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c67e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c682:	f003 031f 	and.w	r3, r3, #31
 800c686:	2b00      	cmp	r3, #0
 800c688:	d104      	bne.n	800c694 <USB_EPStartXfer+0x1478>
 800c68a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c68e:	3b01      	subs	r3, #1
 800c690:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c694:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c698:	b29b      	uxth	r3, r3
 800c69a:	029b      	lsls	r3, r3, #10
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c6ac:	801a      	strh	r2, [r3, #0]
 800c6ae:	e3ad      	b.n	800ce0c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c6b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	78db      	ldrb	r3, [r3, #3]
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	f040 8200 	bne.w	800cac2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c6c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	785b      	ldrb	r3, [r3, #1]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f040 8091 	bne.w	800c7f6 <USB_EPStartXfer+0x15da>
 800c6d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c6e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c6f8:	4413      	add	r3, r2
 800c6fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c6fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	011a      	lsls	r2, r3, #4
 800c70c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c710:	4413      	add	r3, r2
 800c712:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c71a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c71e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d116      	bne.n	800c758 <USB_EPStartXfer+0x153c>
 800c72a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c72e:	881b      	ldrh	r3, [r3, #0]
 800c730:	b29b      	uxth	r3, r3
 800c732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c736:	b29a      	uxth	r2, r3
 800c738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c73c:	801a      	strh	r2, [r3, #0]
 800c73e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c742:	881b      	ldrh	r3, [r3, #0]
 800c744:	b29b      	uxth	r3, r3
 800c746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c74a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c74e:	b29a      	uxth	r2, r3
 800c750:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c754:	801a      	strh	r2, [r3, #0]
 800c756:	e083      	b.n	800c860 <USB_EPStartXfer+0x1644>
 800c758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c75c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	2b3e      	cmp	r3, #62	; 0x3e
 800c766:	d820      	bhi.n	800c7aa <USB_EPStartXfer+0x158e>
 800c768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c76c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	085b      	lsrs	r3, r3, #1
 800c776:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c77a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c77e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	f003 0301 	and.w	r3, r3, #1
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d004      	beq.n	800c798 <USB_EPStartXfer+0x157c>
 800c78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c792:	3301      	adds	r3, #1
 800c794:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	029b      	lsls	r3, r3, #10
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7a6:	801a      	strh	r2, [r3, #0]
 800c7a8:	e05a      	b.n	800c860 <USB_EPStartXfer+0x1644>
 800c7aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	095b      	lsrs	r3, r3, #5
 800c7b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c7bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	f003 031f 	and.w	r3, r3, #31
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d104      	bne.n	800c7da <USB_EPStartXfer+0x15be>
 800c7d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	029b      	lsls	r3, r3, #10
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7f2:	801a      	strh	r2, [r3, #0]
 800c7f4:	e034      	b.n	800c860 <USB_EPStartXfer+0x1644>
 800c7f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	785b      	ldrb	r3, [r3, #1]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d12c      	bne.n	800c860 <USB_EPStartXfer+0x1644>
 800c806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c80a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c818:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c822:	b29b      	uxth	r3, r3
 800c824:	461a      	mov	r2, r3
 800c826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c82a:	4413      	add	r3, r2
 800c82c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	011a      	lsls	r2, r3, #4
 800c83e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c842:	4413      	add	r3, r2
 800c844:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c84c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	b29a      	uxth	r2, r3
 800c85a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c85e:	801a      	strh	r2, [r3, #0]
 800c860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c864:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c86e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	785b      	ldrb	r3, [r3, #1]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f040 8091 	bne.w	800c9a2 <USB_EPStartXfer+0x1786>
 800c880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c88e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c892:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	461a      	mov	r2, r3
 800c8a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c8aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c8ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	011a      	lsls	r2, r3, #4
 800c8b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c8bc:	4413      	add	r3, r2
 800c8be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c8c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c8c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c8ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d116      	bne.n	800c904 <USB_EPStartXfer+0x16e8>
 800c8d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8da:	881b      	ldrh	r3, [r3, #0]
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8e8:	801a      	strh	r2, [r3, #0]
 800c8ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c900:	801a      	strh	r2, [r3, #0]
 800c902:	e07c      	b.n	800c9fe <USB_EPStartXfer+0x17e2>
 800c904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	2b3e      	cmp	r3, #62	; 0x3e
 800c912:	d820      	bhi.n	800c956 <USB_EPStartXfer+0x173a>
 800c914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	691b      	ldr	r3, [r3, #16]
 800c920:	085b      	lsrs	r3, r3, #1
 800c922:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c92a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	691b      	ldr	r3, [r3, #16]
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	2b00      	cmp	r3, #0
 800c938:	d004      	beq.n	800c944 <USB_EPStartXfer+0x1728>
 800c93a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c93e:	3301      	adds	r3, #1
 800c940:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c944:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c948:	b29b      	uxth	r3, r3
 800c94a:	029b      	lsls	r3, r3, #10
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c952:	801a      	strh	r2, [r3, #0]
 800c954:	e053      	b.n	800c9fe <USB_EPStartXfer+0x17e2>
 800c956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c95a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	095b      	lsrs	r3, r3, #5
 800c964:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c96c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	f003 031f 	and.w	r3, r3, #31
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d104      	bne.n	800c986 <USB_EPStartXfer+0x176a>
 800c97c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c980:	3b01      	subs	r3, #1
 800c982:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c986:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	029b      	lsls	r3, r3, #10
 800c98e:	b29b      	uxth	r3, r3
 800c990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c998:	b29a      	uxth	r2, r3
 800c99a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c99e:	801a      	strh	r2, [r3, #0]
 800c9a0:	e02d      	b.n	800c9fe <USB_EPStartXfer+0x17e2>
 800c9a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	785b      	ldrb	r3, [r3, #1]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d125      	bne.n	800c9fe <USB_EPStartXfer+0x17e2>
 800c9b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c9c8:	4413      	add	r3, r2
 800c9ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	011a      	lsls	r2, r3, #4
 800c9dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c9e0:	4413      	add	r3, r2
 800c9e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c9e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c9ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c9fc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c9fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	69db      	ldr	r3, [r3, #28]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f000 81fe 	beq.w	800ce0c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ca10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	881b      	ldrh	r3, [r3, #0]
 800ca2c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ca30:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800ca34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d005      	beq.n	800ca48 <USB_EPStartXfer+0x182c>
 800ca3c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800ca40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10d      	bne.n	800ca64 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ca48:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800ca4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f040 81db 	bne.w	800ce0c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ca56:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800ca5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f040 81d4 	bne.w	800ce0c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800ca64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	4413      	add	r3, r2
 800ca7e:	881b      	ldrh	r3, [r3, #0]
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca8a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800ca8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	441a      	add	r2, r3
 800caa8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800caac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cab8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	8013      	strh	r3, [r2, #0]
 800cac0:	e1a4      	b.n	800ce0c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	78db      	ldrb	r3, [r3, #3]
 800cace:	2b01      	cmp	r3, #1
 800cad0:	f040 819a 	bne.w	800ce08 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800cad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	699a      	ldr	r2, [r3, #24]
 800cae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	691b      	ldr	r3, [r3, #16]
 800caec:	429a      	cmp	r2, r3
 800caee:	d917      	bls.n	800cb20 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800caf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800caf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800cb00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	699a      	ldr	r2, [r3, #24]
 800cb0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb10:	1ad2      	subs	r2, r2, r3
 800cb12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	619a      	str	r2, [r3, #24]
 800cb1e:	e00e      	b.n	800cb3e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800cb20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	699b      	ldr	r3, [r3, #24]
 800cb2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800cb30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800cb3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	785b      	ldrb	r3, [r3, #1]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d178      	bne.n	800cc40 <USB_EPStartXfer+0x1a24>
 800cb4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cb72:	4413      	add	r3, r2
 800cb74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	011a      	lsls	r2, r3, #4
 800cb86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cb8a:	4413      	add	r3, r2
 800cb8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cb90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d116      	bne.n	800cbca <USB_EPStartXfer+0x19ae>
 800cb9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cba0:	881b      	ldrh	r3, [r3, #0]
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cbae:	801a      	strh	r2, [r3, #0]
 800cbb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cbb4:	881b      	ldrh	r3, [r3, #0]
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cbc6:	801a      	strh	r2, [r3, #0]
 800cbc8:	e06b      	b.n	800cca2 <USB_EPStartXfer+0x1a86>
 800cbca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbce:	2b3e      	cmp	r3, #62	; 0x3e
 800cbd0:	d818      	bhi.n	800cc04 <USB_EPStartXfer+0x19e8>
 800cbd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbd6:	085b      	lsrs	r3, r3, #1
 800cbd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cbdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d004      	beq.n	800cbf2 <USB_EPStartXfer+0x19d6>
 800cbe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbec:	3301      	adds	r3, #1
 800cbee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cbf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	029b      	lsls	r3, r3, #10
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cc00:	801a      	strh	r2, [r3, #0]
 800cc02:	e04e      	b.n	800cca2 <USB_EPStartXfer+0x1a86>
 800cc04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc08:	095b      	lsrs	r3, r3, #5
 800cc0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cc0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc12:	f003 031f 	and.w	r3, r3, #31
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d104      	bne.n	800cc24 <USB_EPStartXfer+0x1a08>
 800cc1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cc24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	029b      	lsls	r3, r3, #10
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cc3c:	801a      	strh	r2, [r3, #0]
 800cc3e:	e030      	b.n	800cca2 <USB_EPStartXfer+0x1a86>
 800cc40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	785b      	ldrb	r3, [r3, #1]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d128      	bne.n	800cca2 <USB_EPStartXfer+0x1a86>
 800cc50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cc5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	461a      	mov	r2, r3
 800cc70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc74:	4413      	add	r3, r2
 800cc76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cc7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	011a      	lsls	r2, r3, #4
 800cc88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc8c:	4413      	add	r3, r2
 800cc8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cc92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cc96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cca0:	801a      	strh	r2, [r3, #0]
 800cca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ccb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ccb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	785b      	ldrb	r3, [r3, #1]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d178      	bne.n	800cdb2 <USB_EPStartXfer+0x1b96>
 800ccc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ccc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ccce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ccd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	461a      	mov	r2, r3
 800cce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cce4:	4413      	add	r3, r2
 800cce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ccea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ccee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	011a      	lsls	r2, r3, #4
 800ccf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccfc:	4413      	add	r3, r2
 800ccfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cd02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cd06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d116      	bne.n	800cd3c <USB_EPStartXfer+0x1b20>
 800cd0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd12:	881b      	ldrh	r3, [r3, #0]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd20:	801a      	strh	r2, [r3, #0]
 800cd22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd38:	801a      	strh	r2, [r3, #0]
 800cd3a:	e067      	b.n	800ce0c <USB_EPStartXfer+0x1bf0>
 800cd3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd40:	2b3e      	cmp	r3, #62	; 0x3e
 800cd42:	d818      	bhi.n	800cd76 <USB_EPStartXfer+0x1b5a>
 800cd44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd48:	085b      	lsrs	r3, r3, #1
 800cd4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cd4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d004      	beq.n	800cd64 <USB_EPStartXfer+0x1b48>
 800cd5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd5e:	3301      	adds	r3, #1
 800cd60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cd64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	029b      	lsls	r3, r3, #10
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd72:	801a      	strh	r2, [r3, #0]
 800cd74:	e04a      	b.n	800ce0c <USB_EPStartXfer+0x1bf0>
 800cd76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd7a:	095b      	lsrs	r3, r3, #5
 800cd7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cd80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd84:	f003 031f 	and.w	r3, r3, #31
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d104      	bne.n	800cd96 <USB_EPStartXfer+0x1b7a>
 800cd8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd90:	3b01      	subs	r3, #1
 800cd92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cd96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	029b      	lsls	r3, r3, #10
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cda4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cdae:	801a      	strh	r2, [r3, #0]
 800cdb0:	e02c      	b.n	800ce0c <USB_EPStartXfer+0x1bf0>
 800cdb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	785b      	ldrb	r3, [r3, #1]
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d124      	bne.n	800ce0c <USB_EPStartXfer+0x1bf0>
 800cdc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdd8:	4413      	add	r3, r2
 800cdda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cdde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cde2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	011a      	lsls	r2, r3, #4
 800cdec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cdf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cdfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce04:	801a      	strh	r2, [r3, #0]
 800ce06:	e001      	b.n	800ce0c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e03a      	b.n	800ce82 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ce0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	4413      	add	r3, r2
 800ce26:	881b      	ldrh	r3, [r3, #0]
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce32:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800ce36:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ce3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ce3e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800ce42:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ce46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ce4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800ce4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	441a      	add	r2, r3
 800ce68:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ce6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	785b      	ldrb	r3, [r3, #1]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d020      	beq.n	800cee0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4413      	add	r3, r2
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ceb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceb4:	81bb      	strh	r3, [r7, #12]
 800ceb6:	89bb      	ldrh	r3, [r7, #12]
 800ceb8:	f083 0310 	eor.w	r3, r3, #16
 800cebc:	81bb      	strh	r3, [r7, #12]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	441a      	add	r2, r3
 800cec8:	89bb      	ldrh	r3, [r7, #12]
 800ceca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ced2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ced6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	8013      	strh	r3, [r2, #0]
 800cede:	e01f      	b.n	800cf20 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	4413      	add	r3, r2
 800ceea:	881b      	ldrh	r3, [r3, #0]
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cef6:	81fb      	strh	r3, [r7, #14]
 800cef8:	89fb      	ldrh	r3, [r7, #14]
 800cefa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cefe:	81fb      	strh	r3, [r7, #14]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	441a      	add	r2, r3
 800cf0a:	89fb      	ldrh	r3, [r7, #14]
 800cf0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3714      	adds	r7, #20
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bc80      	pop	{r7}
 800cf2a:	4770      	bx	lr

0800cf2c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b087      	sub	sp, #28
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	7b1b      	ldrb	r3, [r3, #12]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f040 809d 	bne.w	800d07a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	785b      	ldrb	r3, [r3, #1]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d04c      	beq.n	800cfe2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	823b      	strh	r3, [r7, #16]
 800cf56:	8a3b      	ldrh	r3, [r7, #16]
 800cf58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d01b      	beq.n	800cf98 <USB_EPClearStall+0x6c>
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	4413      	add	r3, r2
 800cf6a:	881b      	ldrh	r3, [r3, #0]
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf76:	81fb      	strh	r3, [r7, #14]
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	441a      	add	r2, r3
 800cf82:	89fb      	ldrh	r3, [r7, #14]
 800cf84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	78db      	ldrb	r3, [r3, #3]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d06c      	beq.n	800d07a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	881b      	ldrh	r3, [r3, #0]
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfb6:	81bb      	strh	r3, [r7, #12]
 800cfb8:	89bb      	ldrh	r3, [r7, #12]
 800cfba:	f083 0320 	eor.w	r3, r3, #32
 800cfbe:	81bb      	strh	r3, [r7, #12]
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	441a      	add	r2, r3
 800cfca:	89bb      	ldrh	r3, [r7, #12]
 800cfcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	8013      	strh	r3, [r2, #0]
 800cfe0:	e04b      	b.n	800d07a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	4413      	add	r3, r2
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	82fb      	strh	r3, [r7, #22]
 800cff0:	8afb      	ldrh	r3, [r7, #22]
 800cff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d01b      	beq.n	800d032 <USB_EPClearStall+0x106>
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	4413      	add	r3, r2
 800d004:	881b      	ldrh	r3, [r3, #0]
 800d006:	b29b      	uxth	r3, r3
 800d008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d00c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d010:	82bb      	strh	r3, [r7, #20]
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	441a      	add	r2, r3
 800d01c:	8abb      	ldrh	r3, [r7, #20]
 800d01e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d02a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d02e:	b29b      	uxth	r3, r3
 800d030:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4413      	add	r3, r2
 800d03c:	881b      	ldrh	r3, [r3, #0]
 800d03e:	b29b      	uxth	r3, r3
 800d040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d048:	827b      	strh	r3, [r7, #18]
 800d04a:	8a7b      	ldrh	r3, [r7, #18]
 800d04c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d050:	827b      	strh	r3, [r7, #18]
 800d052:	8a7b      	ldrh	r3, [r7, #18]
 800d054:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d058:	827b      	strh	r3, [r7, #18]
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	441a      	add	r2, r3
 800d064:	8a7b      	ldrh	r3, [r7, #18]
 800d066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d06a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d06e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d076:	b29b      	uxth	r3, r3
 800d078:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	371c      	adds	r7, #28
 800d080:	46bd      	mov	sp, r7
 800d082:	bc80      	pop	{r7}
 800d084:	4770      	bx	lr

0800d086 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d086:	b480      	push	{r7}
 800d088:	b083      	sub	sp, #12
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	460b      	mov	r3, r1
 800d090:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d092:	78fb      	ldrb	r3, [r7, #3]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d103      	bne.n	800d0a0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2280      	movs	r2, #128	; 0x80
 800d09c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	370c      	adds	r7, #12
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bc80      	pop	{r7}
 800d0aa:	4770      	bx	lr

0800d0ac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bc80      	pop	{r7}
 800d0be:	4770      	bx	lr

0800d0c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bc80      	pop	{r7}
 800d0dc:	4770      	bx	lr

0800d0de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d0de:	b480      	push	{r7}
 800d0e0:	b08d      	sub	sp, #52	; 0x34
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	60f8      	str	r0, [r7, #12]
 800d0e6:	60b9      	str	r1, [r7, #8]
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	80fb      	strh	r3, [r7, #6]
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d0f4:	88bb      	ldrh	r3, [r7, #4]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	085b      	lsrs	r3, r3, #1
 800d0fa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d104:	88fb      	ldrh	r3, [r7, #6]
 800d106:	005a      	lsls	r2, r3, #1
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	4413      	add	r3, r2
 800d10c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d110:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800d112:	6a3b      	ldr	r3, [r7, #32]
 800d114:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d116:	e01e      	b.n	800d156 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	3301      	adds	r3, #1
 800d122:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800d124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	b29b      	uxth	r3, r3
 800d12a:	021b      	lsls	r3, r3, #8
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	461a      	mov	r2, r3
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	4313      	orrs	r3, r2
 800d134:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	b29a      	uxth	r2, r3
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d140:	3302      	adds	r3, #2
 800d142:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800d144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d146:	3302      	adds	r3, #2
 800d148:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800d14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14c:	3301      	adds	r3, #1
 800d14e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	3b01      	subs	r3, #1
 800d154:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1dd      	bne.n	800d118 <USB_WritePMA+0x3a>
  }
}
 800d15c:	bf00      	nop
 800d15e:	bf00      	nop
 800d160:	3734      	adds	r7, #52	; 0x34
 800d162:	46bd      	mov	sp, r7
 800d164:	bc80      	pop	{r7}
 800d166:	4770      	bx	lr

0800d168 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d168:	b480      	push	{r7}
 800d16a:	b08b      	sub	sp, #44	; 0x2c
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	4611      	mov	r1, r2
 800d174:	461a      	mov	r2, r3
 800d176:	460b      	mov	r3, r1
 800d178:	80fb      	strh	r3, [r7, #6]
 800d17a:	4613      	mov	r3, r2
 800d17c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d17e:	88bb      	ldrh	r3, [r7, #4]
 800d180:	085b      	lsrs	r3, r3, #1
 800d182:	b29b      	uxth	r3, r3
 800d184:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d18e:	88fb      	ldrh	r3, [r7, #6]
 800d190:	005a      	lsls	r2, r3, #1
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	4413      	add	r3, r2
 800d196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d19a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	627b      	str	r3, [r7, #36]	; 0x24
 800d1a0:	e01b      	b.n	800d1da <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800d1a2:	6a3b      	ldr	r3, [r7, #32]
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	3302      	adds	r3, #2
 800d1ae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	0a1b      	lsrs	r3, r3, #8
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	3302      	adds	r3, #2
 800d1d2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	627b      	str	r3, [r7, #36]	; 0x24
 800d1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1e0      	bne.n	800d1a2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800d1e0:	88bb      	ldrh	r3, [r7, #4]
 800d1e2:	f003 0301 	and.w	r3, r3, #1
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d007      	beq.n	800d1fc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800d1ec:	6a3b      	ldr	r3, [r7, #32]
 800d1ee:	881b      	ldrh	r3, [r3, #0]
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	701a      	strb	r2, [r3, #0]
  }
}
 800d1fc:	bf00      	nop
 800d1fe:	372c      	adds	r7, #44	; 0x2c
 800d200:	46bd      	mov	sp, r7
 800d202:	bc80      	pop	{r7}
 800d204:	4770      	bx	lr

0800d206 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d206:	b580      	push	{r7, lr}
 800d208:	b084      	sub	sp, #16
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
 800d20e:	460b      	mov	r3, r1
 800d210:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d212:	2300      	movs	r3, #0
 800d214:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	7c1b      	ldrb	r3, [r3, #16]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d115      	bne.n	800d24a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d21e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d222:	2202      	movs	r2, #2
 800d224:	2181      	movs	r1, #129	; 0x81
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f001 fe75 	bl	800ef16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d232:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d236:	2202      	movs	r2, #2
 800d238:	2101      	movs	r1, #1
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f001 fe6b 	bl	800ef16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800d248:	e012      	b.n	800d270 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d24a:	2340      	movs	r3, #64	; 0x40
 800d24c:	2202      	movs	r2, #2
 800d24e:	2181      	movs	r1, #129	; 0x81
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f001 fe60 	bl	800ef16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2201      	movs	r2, #1
 800d25a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d25c:	2340      	movs	r3, #64	; 0x40
 800d25e:	2202      	movs	r2, #2
 800d260:	2101      	movs	r1, #1
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f001 fe57 	bl	800ef16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d270:	2308      	movs	r3, #8
 800d272:	2203      	movs	r2, #3
 800d274:	2182      	movs	r1, #130	; 0x82
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f001 fe4d 	bl	800ef16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2201      	movs	r2, #1
 800d280:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800d282:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d286:	f001 ff6d 	bl	800f164 <USBD_static_malloc>
 800d28a:	4602      	mov	r2, r0
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d102      	bne.n	800d2a2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800d29c:	2301      	movs	r3, #1
 800d29e:	73fb      	strb	r3, [r7, #15]
 800d2a0:	e026      	b.n	800d2f0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d2a8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	7c1b      	ldrb	r3, [r3, #16]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d109      	bne.n	800d2e0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2d6:	2101      	movs	r1, #1
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f001 ff0d 	bl	800f0f8 <USBD_LL_PrepareReceive>
 800d2de:	e007      	b.n	800d2f0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2e6:	2340      	movs	r3, #64	; 0x40
 800d2e8:	2101      	movs	r1, #1
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f001 ff04 	bl	800f0f8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b084      	sub	sp, #16
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
 800d302:	460b      	mov	r3, r1
 800d304:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d306:	2300      	movs	r3, #0
 800d308:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d30a:	2181      	movs	r1, #129	; 0x81
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f001 fe28 	bl	800ef62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d318:	2101      	movs	r1, #1
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f001 fe21 	bl	800ef62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d328:	2182      	movs	r1, #130	; 0x82
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f001 fe19 	bl	800ef62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00e      	beq.n	800d35e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d350:	4618      	mov	r0, r3
 800d352:	f001 ff13 	bl	800f17c <USBD_static_free>
    pdev->pClassData = NULL;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800d35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d378:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d37a:	2300      	movs	r3, #0
 800d37c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d37e:	2300      	movs	r3, #0
 800d380:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d382:	2300      	movs	r3, #0
 800d384:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d039      	beq.n	800d406 <USBD_CDC_Setup+0x9e>
 800d392:	2b20      	cmp	r3, #32
 800d394:	d17f      	bne.n	800d496 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	88db      	ldrh	r3, [r3, #6]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d029      	beq.n	800d3f2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	b25b      	sxtb	r3, r3
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	da11      	bge.n	800d3cc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800d3b4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d3b6:	683a      	ldr	r2, [r7, #0]
 800d3b8:	88d2      	ldrh	r2, [r2, #6]
 800d3ba:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d3bc:	6939      	ldr	r1, [r7, #16]
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	88db      	ldrh	r3, [r3, #6]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f001 f994 	bl	800e6f2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800d3ca:	e06b      	b.n	800d4a4 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	785a      	ldrb	r2, [r3, #1]
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	88db      	ldrh	r3, [r3, #6]
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d3e2:	6939      	ldr	r1, [r7, #16]
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	88db      	ldrh	r3, [r3, #6]
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f001 f9af 	bl	800e74e <USBD_CtlPrepareRx>
    break;
 800d3f0:	e058      	b.n	800d4a4 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d3f8:	689b      	ldr	r3, [r3, #8]
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	7850      	ldrb	r0, [r2, #1]
 800d3fe:	2200      	movs	r2, #0
 800d400:	6839      	ldr	r1, [r7, #0]
 800d402:	4798      	blx	r3
    break;
 800d404:	e04e      	b.n	800d4a4 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	785b      	ldrb	r3, [r3, #1]
 800d40a:	2b0b      	cmp	r3, #11
 800d40c:	d02e      	beq.n	800d46c <USBD_CDC_Setup+0x104>
 800d40e:	2b0b      	cmp	r3, #11
 800d410:	dc38      	bgt.n	800d484 <USBD_CDC_Setup+0x11c>
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <USBD_CDC_Setup+0xb4>
 800d416:	2b0a      	cmp	r3, #10
 800d418:	d014      	beq.n	800d444 <USBD_CDC_Setup+0xdc>
 800d41a:	e033      	b.n	800d484 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d422:	2b03      	cmp	r3, #3
 800d424:	d107      	bne.n	800d436 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800d426:	f107 030c 	add.w	r3, r7, #12
 800d42a:	2202      	movs	r2, #2
 800d42c:	4619      	mov	r1, r3
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f001 f95f 	bl	800e6f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d434:	e02e      	b.n	800d494 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800d436:	6839      	ldr	r1, [r7, #0]
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f001 f8f0 	bl	800e61e <USBD_CtlError>
			  ret = USBD_FAIL;
 800d43e:	2302      	movs	r3, #2
 800d440:	75fb      	strb	r3, [r7, #23]
      break;
 800d442:	e027      	b.n	800d494 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d44a:	2b03      	cmp	r3, #3
 800d44c:	d107      	bne.n	800d45e <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800d44e:	f107 030f 	add.w	r3, r7, #15
 800d452:	2201      	movs	r2, #1
 800d454:	4619      	mov	r1, r3
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f001 f94b 	bl	800e6f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d45c:	e01a      	b.n	800d494 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800d45e:	6839      	ldr	r1, [r7, #0]
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f001 f8dc 	bl	800e61e <USBD_CtlError>
			  ret = USBD_FAIL;
 800d466:	2302      	movs	r3, #2
 800d468:	75fb      	strb	r3, [r7, #23]
      break;
 800d46a:	e013      	b.n	800d494 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d472:	2b03      	cmp	r3, #3
 800d474:	d00d      	beq.n	800d492 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800d476:	6839      	ldr	r1, [r7, #0]
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f001 f8d0 	bl	800e61e <USBD_CtlError>
			  ret = USBD_FAIL;
 800d47e:	2302      	movs	r3, #2
 800d480:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d482:	e006      	b.n	800d492 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800d484:	6839      	ldr	r1, [r7, #0]
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f001 f8c9 	bl	800e61e <USBD_CtlError>
      ret = USBD_FAIL;
 800d48c:	2302      	movs	r3, #2
 800d48e:	75fb      	strb	r3, [r7, #23]
      break;
 800d490:	e000      	b.n	800d494 <USBD_CDC_Setup+0x12c>
      break;
 800d492:	bf00      	nop
    }
    break;
 800d494:	e006      	b.n	800d4a4 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800d496:	6839      	ldr	r1, [r7, #0]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f001 f8c0 	bl	800e61e <USBD_CtlError>
    ret = USBD_FAIL;
 800d49e:	2302      	movs	r3, #2
 800d4a0:	75fb      	strb	r3, [r7, #23]
    break;
 800d4a2:	bf00      	nop
  }

  return ret;
 800d4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3718      	adds	r7, #24
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b084      	sub	sp, #16
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d4c0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d4c8:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d03a      	beq.n	800d54a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d4d4:	78fa      	ldrb	r2, [r7, #3]
 800d4d6:	6879      	ldr	r1, [r7, #4]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	440b      	add	r3, r1
 800d4e2:	331c      	adds	r3, #28
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d029      	beq.n	800d53e <USBD_CDC_DataIn+0x90>
 800d4ea:	78fa      	ldrb	r2, [r7, #3]
 800d4ec:	6879      	ldr	r1, [r7, #4]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	4413      	add	r3, r2
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	440b      	add	r3, r1
 800d4f8:	331c      	adds	r3, #28
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	78f9      	ldrb	r1, [r7, #3]
 800d4fe:	68b8      	ldr	r0, [r7, #8]
 800d500:	460b      	mov	r3, r1
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	440b      	add	r3, r1
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	4403      	add	r3, r0
 800d50a:	3338      	adds	r3, #56	; 0x38
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	fbb2 f1f3 	udiv	r1, r2, r3
 800d512:	fb01 f303 	mul.w	r3, r1, r3
 800d516:	1ad3      	subs	r3, r2, r3
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d110      	bne.n	800d53e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d51c:	78fa      	ldrb	r2, [r7, #3]
 800d51e:	6879      	ldr	r1, [r7, #4]
 800d520:	4613      	mov	r3, r2
 800d522:	009b      	lsls	r3, r3, #2
 800d524:	4413      	add	r3, r2
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	440b      	add	r3, r1
 800d52a:	331c      	adds	r3, #28
 800d52c:	2200      	movs	r2, #0
 800d52e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800d530:	78f9      	ldrb	r1, [r7, #3]
 800d532:	2300      	movs	r3, #0
 800d534:	2200      	movs	r2, #0
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f001 fdbb 	bl	800f0b2 <USBD_LL_Transmit>
 800d53c:	e003      	b.n	800d546 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2200      	movs	r2, #0
 800d542:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800d546:	2300      	movs	r3, #0
 800d548:	e000      	b.n	800d54c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d54a:	2302      	movs	r3, #2
  }
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	460b      	mov	r3, r1
 800d55e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d566:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800d568:	78fb      	ldrb	r3, [r7, #3]
 800d56a:	4619      	mov	r1, r3
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f001 fde6 	bl	800f13e <USBD_LL_GetRxDataSize>
 800d572:	4602      	mov	r2, r0
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00d      	beq.n	800d5a0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d598:	4611      	mov	r1, r2
 800d59a:	4798      	blx	r3

    return USBD_OK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	e000      	b.n	800d5a2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d5a0:	2302      	movs	r3, #2
  }
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b084      	sub	sp, #16
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d5b8:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d015      	beq.n	800d5f0 <USBD_CDC_EP0_RxReady+0x46>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d5ca:	2bff      	cmp	r3, #255	; 0xff
 800d5cc:	d010      	beq.n	800d5f0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d5dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d5e4:	b292      	uxth	r2, r2
 800d5e6:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	22ff      	movs	r2, #255	; 0xff
 800d5ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d5f0:	2300      	movs	r3, #0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
	...

0800d5fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2243      	movs	r2, #67	; 0x43
 800d608:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d60a:	4b03      	ldr	r3, [pc, #12]	; (800d618 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	bc80      	pop	{r7}
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	20000854 	.word	0x20000854

0800d61c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2243      	movs	r2, #67	; 0x43
 800d628:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d62a:	4b03      	ldr	r3, [pc, #12]	; (800d638 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	bc80      	pop	{r7}
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	20000810 	.word	0x20000810

0800d63c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2243      	movs	r2, #67	; 0x43
 800d648:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d64a:	4b03      	ldr	r3, [pc, #12]	; (800d658 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	bc80      	pop	{r7}
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	20000898 	.word	0x20000898

0800d65c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	220a      	movs	r2, #10
 800d668:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d66a:	4b03      	ldr	r3, [pc, #12]	; (800d678 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	bc80      	pop	{r7}
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	200007cc 	.word	0x200007cc

0800d67c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d686:	2302      	movs	r3, #2
 800d688:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d005      	beq.n	800d69c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800d698:	2300      	movs	r3, #0
 800d69a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bc80      	pop	{r7}
 800d6a6:	4770      	bx	lr

0800d6a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b087      	sub	sp, #28
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d6bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	68ba      	ldr	r2, [r7, #8]
 800d6c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d6c6:	88fa      	ldrh	r2, [r7, #6]
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	371c      	adds	r7, #28
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bc80      	pop	{r7}
 800d6d8:	4770      	bx	lr

0800d6da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b085      	sub	sp, #20
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d6ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d6f4:	2300      	movs	r3, #0
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3714      	adds	r7, #20
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bc80      	pop	{r7}
 800d6fe:	4770      	bx	lr

0800d700 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d70e:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d716:	2b00      	cmp	r3, #0
 800d718:	d01c      	beq.n	800d754 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d720:	2b00      	cmp	r3, #0
 800d722:	d115      	bne.n	800d750 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2201      	movs	r2, #1
 800d728:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d742:	b29b      	uxth	r3, r3
 800d744:	2181      	movs	r1, #129	; 0x81
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f001 fcb3 	bl	800f0b2 <USBD_LL_Transmit>

      return USBD_OK;
 800d74c:	2300      	movs	r3, #0
 800d74e:	e002      	b.n	800d756 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d750:	2301      	movs	r3, #1
 800d752:	e000      	b.n	800d756 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d754:	2302      	movs	r3, #2
  }
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b084      	sub	sp, #16
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d76c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d774:	2b00      	cmp	r3, #0
 800d776:	d017      	beq.n	800d7a8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	7c1b      	ldrb	r3, [r3, #16]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d109      	bne.n	800d794 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d78a:	2101      	movs	r1, #1
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f001 fcb3 	bl	800f0f8 <USBD_LL_PrepareReceive>
 800d792:	e007      	b.n	800d7a4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d79a:	2340      	movs	r3, #64	; 0x40
 800d79c:	2101      	movs	r1, #1
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f001 fcaa 	bl	800f0f8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	e000      	b.n	800d7aa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d7a8:	2302      	movs	r3, #2
  }
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b084      	sub	sp, #16
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	60f8      	str	r0, [r7, #12]
 800d7ba:	60b9      	str	r1, [r7, #8]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d101      	bne.n	800d7ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d7c6:	2302      	movs	r3, #2
 800d7c8:	e01a      	b.n	800d800 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d003      	beq.n	800d7dc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d003      	beq.n	800d7ea <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	79fa      	ldrb	r2, [r7, #7]
 800d7f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	f001 fb17 	bl	800ee2c <USBD_LL_Init>

  return USBD_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800d812:	2300      	movs	r3, #0
 800d814:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d006      	beq.n	800d82a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	683a      	ldr	r2, [r7, #0]
 800d820:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800d824:	2300      	movs	r3, #0
 800d826:	73fb      	strb	r3, [r7, #15]
 800d828:	e001      	b.n	800d82e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d82a:	2302      	movs	r3, #2
 800d82c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3714      	adds	r7, #20
 800d834:	46bd      	mov	sp, r7
 800d836:	bc80      	pop	{r7}
 800d838:	4770      	bx	lr

0800d83a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b082      	sub	sp, #8
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f001 fb4c 	bl	800eee0 <USBD_LL_Start>

  return USBD_OK;
 800d848:	2300      	movs	r3, #0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800d852:	b480      	push	{r7}
 800d854:	b083      	sub	sp, #12
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d85a:	2300      	movs	r3, #0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	bc80      	pop	{r7}
 800d864:	4770      	bx	lr

0800d866 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b084      	sub	sp, #16
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	460b      	mov	r3, r1
 800d870:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800d872:	2302      	movs	r3, #2
 800d874:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00c      	beq.n	800d89a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	78fa      	ldrb	r2, [r7, #3]
 800d88a:	4611      	mov	r1, r2
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	4798      	blx	r3
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d101      	bne.n	800d89a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d896:	2300      	movs	r3, #0
 800d898:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	78fa      	ldrb	r2, [r7, #3]
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	4798      	blx	r3
  return USBD_OK;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b082      	sub	sp, #8
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
 800d8d2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d8da:	6839      	ldr	r1, [r7, #0]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 fe62 	bl	800e5a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d8fe:	f003 031f 	and.w	r3, r3, #31
 800d902:	2b02      	cmp	r3, #2
 800d904:	d016      	beq.n	800d934 <USBD_LL_SetupStage+0x6a>
 800d906:	2b02      	cmp	r3, #2
 800d908:	d81c      	bhi.n	800d944 <USBD_LL_SetupStage+0x7a>
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d002      	beq.n	800d914 <USBD_LL_SetupStage+0x4a>
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d008      	beq.n	800d924 <USBD_LL_SetupStage+0x5a>
 800d912:	e017      	b.n	800d944 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d91a:	4619      	mov	r1, r3
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 f9c5 	bl	800dcac <USBD_StdDevReq>
    break;
 800d922:	e01a      	b.n	800d95a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fa27 	bl	800dd80 <USBD_StdItfReq>
    break;
 800d932:	e012      	b.n	800d95a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d93a:	4619      	mov	r1, r3
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 fa67 	bl	800de10 <USBD_StdEPReq>
    break;
 800d942:	e00a      	b.n	800d95a <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d94a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	4619      	mov	r1, r3
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f001 fb24 	bl	800efa0 <USBD_LL_StallEP>
    break;
 800d958:	bf00      	nop
  }

  return USBD_OK;
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b086      	sub	sp, #24
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	460b      	mov	r3, r1
 800d96e:	607a      	str	r2, [r7, #4]
 800d970:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800d972:	7afb      	ldrb	r3, [r7, #11]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d14b      	bne.n	800da10 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d97e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d986:	2b03      	cmp	r3, #3
 800d988:	d134      	bne.n	800d9f4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	68da      	ldr	r2, [r3, #12]
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	429a      	cmp	r2, r3
 800d994:	d919      	bls.n	800d9ca <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	68da      	ldr	r2, [r3, #12]
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	1ad2      	subs	r2, r2, r3
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	68da      	ldr	r2, [r3, #12]
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d203      	bcs.n	800d9b8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	e002      	b.n	800d9be <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	461a      	mov	r2, r3
 800d9c0:	6879      	ldr	r1, [r7, #4]
 800d9c2:	68f8      	ldr	r0, [r7, #12]
 800d9c4:	f000 fee1 	bl	800e78a <USBD_CtlContinueRx>
 800d9c8:	e038      	b.n	800da3c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d9d0:	691b      	ldr	r3, [r3, #16]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00a      	beq.n	800d9ec <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d9dc:	2b03      	cmp	r3, #3
 800d9de:	d105      	bne.n	800d9ec <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d9e6:	691b      	ldr	r3, [r3, #16]
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f000 fede 	bl	800e7ae <USBD_CtlSendStatus>
 800d9f2:	e023      	b.n	800da3c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d9fa:	2b05      	cmp	r3, #5
 800d9fc:	d11e      	bne.n	800da3c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2200      	movs	r2, #0
 800da02:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800da06:	2100      	movs	r1, #0
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	f001 fac9 	bl	800efa0 <USBD_LL_StallEP>
 800da0e:	e015      	b.n	800da3c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da16:	699b      	ldr	r3, [r3, #24]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d00d      	beq.n	800da38 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800da22:	2b03      	cmp	r3, #3
 800da24:	d108      	bne.n	800da38 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da2c:	699b      	ldr	r3, [r3, #24]
 800da2e:	7afa      	ldrb	r2, [r7, #11]
 800da30:	4611      	mov	r1, r2
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	4798      	blx	r3
 800da36:	e001      	b.n	800da3c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800da38:	2302      	movs	r3, #2
 800da3a:	e000      	b.n	800da3e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3718      	adds	r7, #24
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}

0800da46 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b086      	sub	sp, #24
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	60f8      	str	r0, [r7, #12]
 800da4e:	460b      	mov	r3, r1
 800da50:	607a      	str	r2, [r7, #4]
 800da52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800da54:	7afb      	ldrb	r3, [r7, #11]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d17f      	bne.n	800db5a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	3314      	adds	r3, #20
 800da5e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800da66:	2b02      	cmp	r3, #2
 800da68:	d15c      	bne.n	800db24 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	68da      	ldr	r2, [r3, #12]
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	429a      	cmp	r2, r3
 800da74:	d915      	bls.n	800daa2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	68da      	ldr	r2, [r3, #12]
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	1ad2      	subs	r2, r2, r3
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	b29b      	uxth	r3, r3
 800da8a:	461a      	mov	r2, r3
 800da8c:	6879      	ldr	r1, [r7, #4]
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f000 fe4b 	bl	800e72a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800da94:	2300      	movs	r3, #0
 800da96:	2200      	movs	r2, #0
 800da98:	2100      	movs	r1, #0
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f001 fb2c 	bl	800f0f8 <USBD_LL_PrepareReceive>
 800daa0:	e04e      	b.n	800db40 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	697a      	ldr	r2, [r7, #20]
 800daa8:	6912      	ldr	r2, [r2, #16]
 800daaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800daae:	fb01 f202 	mul.w	r2, r1, r2
 800dab2:	1a9b      	subs	r3, r3, r2
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d11c      	bne.n	800daf2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	689a      	ldr	r2, [r3, #8]
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d316      	bcc.n	800daf2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	689a      	ldr	r2, [r3, #8]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800dace:	429a      	cmp	r2, r3
 800dad0:	d20f      	bcs.n	800daf2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dad2:	2200      	movs	r2, #0
 800dad4:	2100      	movs	r1, #0
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f000 fe27 	bl	800e72a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2200      	movs	r2, #0
 800dae0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800dae4:	2300      	movs	r3, #0
 800dae6:	2200      	movs	r2, #0
 800dae8:	2100      	movs	r1, #0
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f001 fb04 	bl	800f0f8 <USBD_LL_PrepareReceive>
 800daf0:	e026      	b.n	800db40 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00a      	beq.n	800db14 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800db04:	2b03      	cmp	r3, #3
 800db06:	d105      	bne.n	800db14 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800db14:	2180      	movs	r1, #128	; 0x80
 800db16:	68f8      	ldr	r0, [r7, #12]
 800db18:	f001 fa42 	bl	800efa0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f000 fe59 	bl	800e7d4 <USBD_CtlReceiveStatus>
 800db22:	e00d      	b.n	800db40 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800db2a:	2b04      	cmp	r3, #4
 800db2c:	d004      	beq.n	800db38 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800db34:	2b00      	cmp	r3, #0
 800db36:	d103      	bne.n	800db40 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800db38:	2180      	movs	r1, #128	; 0x80
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f001 fa30 	bl	800efa0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800db46:	2b01      	cmp	r3, #1
 800db48:	d11d      	bne.n	800db86 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f7ff fe81 	bl	800d852 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2200      	movs	r2, #0
 800db54:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800db58:	e015      	b.n	800db86 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d00d      	beq.n	800db82 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800db6c:	2b03      	cmp	r3, #3
 800db6e:	d108      	bne.n	800db82 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	7afa      	ldrb	r2, [r7, #11]
 800db7a:	4611      	mov	r1, r2
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	4798      	blx	r3
 800db80:	e001      	b.n	800db86 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800db82:	2302      	movs	r3, #2
 800db84:	e000      	b.n	800db88 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3718      	adds	r7, #24
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db98:	2340      	movs	r3, #64	; 0x40
 800db9a:	2200      	movs	r2, #0
 800db9c:	2100      	movs	r1, #0
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f001 f9b9 	bl	800ef16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2201      	movs	r2, #1
 800dba8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2240      	movs	r2, #64	; 0x40
 800dbb0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbb4:	2340      	movs	r3, #64	; 0x40
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	2180      	movs	r1, #128	; 0x80
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f001 f9ab 	bl	800ef16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2240      	movs	r2, #64	; 0x40
 800dbca:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d009      	beq.n	800dc08 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	6852      	ldr	r2, [r2, #4]
 800dc00:	b2d2      	uxtb	r2, r2
 800dc02:	4611      	mov	r1, r2
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	4798      	blx	r3
  }

  return USBD_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800dc12:	b480      	push	{r7}
 800dc14:	b083      	sub	sp, #12
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	78fa      	ldrb	r2, [r7, #3]
 800dc22:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800dc24:	2300      	movs	r3, #0
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bc80      	pop	{r7}
 800dc2e:	4770      	bx	lr

0800dc30 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2204      	movs	r2, #4
 800dc48:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	370c      	adds	r7, #12
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bc80      	pop	{r7}
 800dc56:	4770      	bx	lr

0800dc58 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800dc6c:	2300      	movs	r3, #0
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	370c      	adds	r7, #12
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bc80      	pop	{r7}
 800dc76:	4770      	bx	lr

0800dc78 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dc86:	2b03      	cmp	r3, #3
 800dc88:	d10b      	bne.n	800dca2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc90:	69db      	ldr	r3, [r3, #28]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d005      	beq.n	800dca2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc9c:	69db      	ldr	r3, [r3, #28]
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800dca2:	2300      	movs	r3, #0
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dcc2:	2b40      	cmp	r3, #64	; 0x40
 800dcc4:	d005      	beq.n	800dcd2 <USBD_StdDevReq+0x26>
 800dcc6:	2b40      	cmp	r3, #64	; 0x40
 800dcc8:	d84f      	bhi.n	800dd6a <USBD_StdDevReq+0xbe>
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d009      	beq.n	800dce2 <USBD_StdDevReq+0x36>
 800dcce:	2b20      	cmp	r3, #32
 800dcd0:	d14b      	bne.n	800dd6a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	6839      	ldr	r1, [r7, #0]
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	4798      	blx	r3
    break;
 800dce0:	e048      	b.n	800dd74 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	785b      	ldrb	r3, [r3, #1]
 800dce6:	2b09      	cmp	r3, #9
 800dce8:	d839      	bhi.n	800dd5e <USBD_StdDevReq+0xb2>
 800dcea:	a201      	add	r2, pc, #4	; (adr r2, 800dcf0 <USBD_StdDevReq+0x44>)
 800dcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf0:	0800dd41 	.word	0x0800dd41
 800dcf4:	0800dd55 	.word	0x0800dd55
 800dcf8:	0800dd5f 	.word	0x0800dd5f
 800dcfc:	0800dd4b 	.word	0x0800dd4b
 800dd00:	0800dd5f 	.word	0x0800dd5f
 800dd04:	0800dd23 	.word	0x0800dd23
 800dd08:	0800dd19 	.word	0x0800dd19
 800dd0c:	0800dd5f 	.word	0x0800dd5f
 800dd10:	0800dd37 	.word	0x0800dd37
 800dd14:	0800dd2d 	.word	0x0800dd2d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800dd18:	6839      	ldr	r1, [r7, #0]
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f000 f9da 	bl	800e0d4 <USBD_GetDescriptor>
      break;
 800dd20:	e022      	b.n	800dd68 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800dd22:	6839      	ldr	r1, [r7, #0]
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 facf 	bl	800e2c8 <USBD_SetAddress>
      break;
 800dd2a:	e01d      	b.n	800dd68 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800dd2c:	6839      	ldr	r1, [r7, #0]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fb0e 	bl	800e350 <USBD_SetConfig>
      break;
 800dd34:	e018      	b.n	800dd68 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800dd36:	6839      	ldr	r1, [r7, #0]
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 fb97 	bl	800e46c <USBD_GetConfig>
      break;
 800dd3e:	e013      	b.n	800dd68 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800dd40:	6839      	ldr	r1, [r7, #0]
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 fbc7 	bl	800e4d6 <USBD_GetStatus>
      break;
 800dd48:	e00e      	b.n	800dd68 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800dd4a:	6839      	ldr	r1, [r7, #0]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 fbf5 	bl	800e53c <USBD_SetFeature>
      break;
 800dd52:	e009      	b.n	800dd68 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800dd54:	6839      	ldr	r1, [r7, #0]
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fc04 	bl	800e564 <USBD_ClrFeature>
      break;
 800dd5c:	e004      	b.n	800dd68 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800dd5e:	6839      	ldr	r1, [r7, #0]
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 fc5c 	bl	800e61e <USBD_CtlError>
      break;
 800dd66:	bf00      	nop
    }
    break;
 800dd68:	e004      	b.n	800dd74 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fc56 	bl	800e61e <USBD_CtlError>
    break;
 800dd72:	bf00      	nop
  }

  return ret;
 800dd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop

0800dd80 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd96:	2b40      	cmp	r3, #64	; 0x40
 800dd98:	d005      	beq.n	800dda6 <USBD_StdItfReq+0x26>
 800dd9a:	2b40      	cmp	r3, #64	; 0x40
 800dd9c:	d82e      	bhi.n	800ddfc <USBD_StdItfReq+0x7c>
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <USBD_StdItfReq+0x26>
 800dda2:	2b20      	cmp	r3, #32
 800dda4:	d12a      	bne.n	800ddfc <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ddac:	3b01      	subs	r3, #1
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	d81d      	bhi.n	800ddee <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	889b      	ldrh	r3, [r3, #4]
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d813      	bhi.n	800dde4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	6839      	ldr	r1, [r7, #0]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	4798      	blx	r3
 800ddca:	4603      	mov	r3, r0
 800ddcc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	88db      	ldrh	r3, [r3, #6]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d110      	bne.n	800ddf8 <USBD_StdItfReq+0x78>
 800ddd6:	7bfb      	ldrb	r3, [r7, #15]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d10d      	bne.n	800ddf8 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 fce6 	bl	800e7ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800dde2:	e009      	b.n	800ddf8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800dde4:	6839      	ldr	r1, [r7, #0]
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fc19 	bl	800e61e <USBD_CtlError>
      break;
 800ddec:	e004      	b.n	800ddf8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800ddee:	6839      	ldr	r1, [r7, #0]
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 fc14 	bl	800e61e <USBD_CtlError>
      break;
 800ddf6:	e000      	b.n	800ddfa <USBD_StdItfReq+0x7a>
      break;
 800ddf8:	bf00      	nop
    }
    break;
 800ddfa:	e004      	b.n	800de06 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 fc0d 	bl	800e61e <USBD_CtlError>
    break;
 800de04:	bf00      	nop
  }

  return USBD_OK;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800de1a:	2300      	movs	r3, #0
 800de1c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	889b      	ldrh	r3, [r3, #4]
 800de22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de2c:	2b40      	cmp	r3, #64	; 0x40
 800de2e:	d007      	beq.n	800de40 <USBD_StdEPReq+0x30>
 800de30:	2b40      	cmp	r3, #64	; 0x40
 800de32:	f200 8144 	bhi.w	800e0be <USBD_StdEPReq+0x2ae>
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00a      	beq.n	800de50 <USBD_StdEPReq+0x40>
 800de3a:	2b20      	cmp	r3, #32
 800de3c:	f040 813f 	bne.w	800e0be <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	4798      	blx	r3
    break;
 800de4e:	e13b      	b.n	800e0c8 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de58:	2b20      	cmp	r3, #32
 800de5a:	d10a      	bne.n	800de72 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	6839      	ldr	r1, [r7, #0]
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	4798      	blx	r3
 800de6a:	4603      	mov	r3, r0
 800de6c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800de6e:	7bfb      	ldrb	r3, [r7, #15]
 800de70:	e12b      	b.n	800e0ca <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	785b      	ldrb	r3, [r3, #1]
 800de76:	2b03      	cmp	r3, #3
 800de78:	d007      	beq.n	800de8a <USBD_StdEPReq+0x7a>
 800de7a:	2b03      	cmp	r3, #3
 800de7c:	f300 8119 	bgt.w	800e0b2 <USBD_StdEPReq+0x2a2>
 800de80:	2b00      	cmp	r3, #0
 800de82:	d072      	beq.n	800df6a <USBD_StdEPReq+0x15a>
 800de84:	2b01      	cmp	r3, #1
 800de86:	d03a      	beq.n	800defe <USBD_StdEPReq+0xee>
 800de88:	e113      	b.n	800e0b2 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800de90:	2b02      	cmp	r3, #2
 800de92:	d002      	beq.n	800de9a <USBD_StdEPReq+0x8a>
 800de94:	2b03      	cmp	r3, #3
 800de96:	d015      	beq.n	800dec4 <USBD_StdEPReq+0xb4>
 800de98:	e02b      	b.n	800def2 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de9a:	7bbb      	ldrb	r3, [r7, #14]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00c      	beq.n	800deba <USBD_StdEPReq+0xaa>
 800dea0:	7bbb      	ldrb	r3, [r7, #14]
 800dea2:	2b80      	cmp	r3, #128	; 0x80
 800dea4:	d009      	beq.n	800deba <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800dea6:	7bbb      	ldrb	r3, [r7, #14]
 800dea8:	4619      	mov	r1, r3
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f001 f878 	bl	800efa0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800deb0:	2180      	movs	r1, #128	; 0x80
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f001 f874 	bl	800efa0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800deb8:	e020      	b.n	800defc <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800deba:	6839      	ldr	r1, [r7, #0]
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 fbae 	bl	800e61e <USBD_CtlError>
        break;
 800dec2:	e01b      	b.n	800defc <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	885b      	ldrh	r3, [r3, #2]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10e      	bne.n	800deea <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800decc:	7bbb      	ldrb	r3, [r7, #14]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d00b      	beq.n	800deea <USBD_StdEPReq+0xda>
 800ded2:	7bbb      	ldrb	r3, [r7, #14]
 800ded4:	2b80      	cmp	r3, #128	; 0x80
 800ded6:	d008      	beq.n	800deea <USBD_StdEPReq+0xda>
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	88db      	ldrh	r3, [r3, #6]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d104      	bne.n	800deea <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800dee0:	7bbb      	ldrb	r3, [r7, #14]
 800dee2:	4619      	mov	r1, r3
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f001 f85b 	bl	800efa0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fc5f 	bl	800e7ae <USBD_CtlSendStatus>

        break;
 800def0:	e004      	b.n	800defc <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fb92 	bl	800e61e <USBD_CtlError>
        break;
 800defa:	bf00      	nop
      }
      break;
 800defc:	e0de      	b.n	800e0bc <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800df04:	2b02      	cmp	r3, #2
 800df06:	d002      	beq.n	800df0e <USBD_StdEPReq+0xfe>
 800df08:	2b03      	cmp	r3, #3
 800df0a:	d015      	beq.n	800df38 <USBD_StdEPReq+0x128>
 800df0c:	e026      	b.n	800df5c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00c      	beq.n	800df2e <USBD_StdEPReq+0x11e>
 800df14:	7bbb      	ldrb	r3, [r7, #14]
 800df16:	2b80      	cmp	r3, #128	; 0x80
 800df18:	d009      	beq.n	800df2e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800df1a:	7bbb      	ldrb	r3, [r7, #14]
 800df1c:	4619      	mov	r1, r3
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f001 f83e 	bl	800efa0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800df24:	2180      	movs	r1, #128	; 0x80
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f001 f83a 	bl	800efa0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800df2c:	e01c      	b.n	800df68 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800df2e:	6839      	ldr	r1, [r7, #0]
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 fb74 	bl	800e61e <USBD_CtlError>
        break;
 800df36:	e017      	b.n	800df68 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	885b      	ldrh	r3, [r3, #2]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d112      	bne.n	800df66 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800df40:	7bbb      	ldrb	r3, [r7, #14]
 800df42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df46:	2b00      	cmp	r3, #0
 800df48:	d004      	beq.n	800df54 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800df4a:	7bbb      	ldrb	r3, [r7, #14]
 800df4c:	4619      	mov	r1, r3
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f001 f845 	bl	800efde <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 fc2a 	bl	800e7ae <USBD_CtlSendStatus>
        }
        break;
 800df5a:	e004      	b.n	800df66 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800df5c:	6839      	ldr	r1, [r7, #0]
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 fb5d 	bl	800e61e <USBD_CtlError>
        break;
 800df64:	e000      	b.n	800df68 <USBD_StdEPReq+0x158>
        break;
 800df66:	bf00      	nop
      }
      break;
 800df68:	e0a8      	b.n	800e0bc <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800df70:	2b02      	cmp	r3, #2
 800df72:	d002      	beq.n	800df7a <USBD_StdEPReq+0x16a>
 800df74:	2b03      	cmp	r3, #3
 800df76:	d031      	beq.n	800dfdc <USBD_StdEPReq+0x1cc>
 800df78:	e095      	b.n	800e0a6 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df7a:	7bbb      	ldrb	r3, [r7, #14]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d007      	beq.n	800df90 <USBD_StdEPReq+0x180>
 800df80:	7bbb      	ldrb	r3, [r7, #14]
 800df82:	2b80      	cmp	r3, #128	; 0x80
 800df84:	d004      	beq.n	800df90 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800df86:	6839      	ldr	r1, [r7, #0]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 fb48 	bl	800e61e <USBD_CtlError>
          break;
 800df8e:	e08f      	b.n	800e0b0 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800df90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df94:	2b00      	cmp	r3, #0
 800df96:	da0b      	bge.n	800dfb0 <USBD_StdEPReq+0x1a0>
 800df98:	7bbb      	ldrb	r3, [r7, #14]
 800df9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df9e:	4613      	mov	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	4413      	add	r3, r2
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	3310      	adds	r3, #16
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	4413      	add	r3, r2
 800dfac:	3304      	adds	r3, #4
 800dfae:	e00a      	b.n	800dfc6 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800dfb0:	7bbb      	ldrb	r3, [r7, #14]
 800dfb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	4413      	add	r3, r2
 800dfc6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 fb8c 	bl	800e6f2 <USBD_CtlSendData>
          break;
 800dfda:	e069      	b.n	800e0b0 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800dfdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	da11      	bge.n	800e008 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dfe4:	7bbb      	ldrb	r3, [r7, #14]
 800dfe6:	f003 020f 	and.w	r2, r3, #15
 800dfea:	6879      	ldr	r1, [r7, #4]
 800dfec:	4613      	mov	r3, r2
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	4413      	add	r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	440b      	add	r3, r1
 800dff6:	3318      	adds	r3, #24
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d117      	bne.n	800e02e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800dffe:	6839      	ldr	r1, [r7, #0]
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f000 fb0c 	bl	800e61e <USBD_CtlError>
            break;
 800e006:	e053      	b.n	800e0b0 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e008:	7bbb      	ldrb	r3, [r7, #14]
 800e00a:	f003 020f 	and.w	r2, r3, #15
 800e00e:	6879      	ldr	r1, [r7, #4]
 800e010:	4613      	mov	r3, r2
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	4413      	add	r3, r2
 800e016:	009b      	lsls	r3, r3, #2
 800e018:	440b      	add	r3, r1
 800e01a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d104      	bne.n	800e02e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800e024:	6839      	ldr	r1, [r7, #0]
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 faf9 	bl	800e61e <USBD_CtlError>
            break;
 800e02c:	e040      	b.n	800e0b0 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800e02e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e032:	2b00      	cmp	r3, #0
 800e034:	da0b      	bge.n	800e04e <USBD_StdEPReq+0x23e>
 800e036:	7bbb      	ldrb	r3, [r7, #14]
 800e038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e03c:	4613      	mov	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	4413      	add	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	3310      	adds	r3, #16
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	4413      	add	r3, r2
 800e04a:	3304      	adds	r3, #4
 800e04c:	e00a      	b.n	800e064 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800e04e:	7bbb      	ldrb	r3, [r7, #14]
 800e050:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800e054:	4613      	mov	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	4413      	add	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	4413      	add	r3, r2
 800e064:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e066:	7bbb      	ldrb	r3, [r7, #14]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d002      	beq.n	800e072 <USBD_StdEPReq+0x262>
 800e06c:	7bbb      	ldrb	r3, [r7, #14]
 800e06e:	2b80      	cmp	r3, #128	; 0x80
 800e070:	d103      	bne.n	800e07a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	2200      	movs	r2, #0
 800e076:	601a      	str	r2, [r3, #0]
 800e078:	e00e      	b.n	800e098 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800e07a:	7bbb      	ldrb	r3, [r7, #14]
 800e07c:	4619      	mov	r1, r3
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 ffcc 	bl	800f01c <USBD_LL_IsStallEP>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d003      	beq.n	800e092 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	2201      	movs	r2, #1
 800e08e:	601a      	str	r2, [r3, #0]
 800e090:	e002      	b.n	800e098 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	2200      	movs	r2, #0
 800e096:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	2202      	movs	r2, #2
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 fb27 	bl	800e6f2 <USBD_CtlSendData>
          break;
 800e0a4:	e004      	b.n	800e0b0 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fab8 	bl	800e61e <USBD_CtlError>
        break;
 800e0ae:	bf00      	nop
      }
      break;
 800e0b0:	e004      	b.n	800e0bc <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800e0b2:	6839      	ldr	r1, [r7, #0]
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 fab2 	bl	800e61e <USBD_CtlError>
      break;
 800e0ba:	bf00      	nop
    }
    break;
 800e0bc:	e004      	b.n	800e0c8 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800e0be:	6839      	ldr	r1, [r7, #0]
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 faac 	bl	800e61e <USBD_CtlError>
    break;
 800e0c6:	bf00      	nop
  }

  return ret;
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
	...

0800e0d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	885b      	ldrh	r3, [r3, #2]
 800e0e2:	0a1b      	lsrs	r3, r3, #8
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	2b06      	cmp	r3, #6
 800e0ea:	f200 80c9 	bhi.w	800e280 <USBD_GetDescriptor+0x1ac>
 800e0ee:	a201      	add	r2, pc, #4	; (adr r2, 800e0f4 <USBD_GetDescriptor+0x20>)
 800e0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f4:	0800e111 	.word	0x0800e111
 800e0f8:	0800e129 	.word	0x0800e129
 800e0fc:	0800e169 	.word	0x0800e169
 800e100:	0800e281 	.word	0x0800e281
 800e104:	0800e281 	.word	0x0800e281
 800e108:	0800e22d 	.word	0x0800e22d
 800e10c:	0800e253 	.word	0x0800e253
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	7c12      	ldrb	r2, [r2, #16]
 800e11c:	f107 010a 	add.w	r1, r7, #10
 800e120:	4610      	mov	r0, r2
 800e122:	4798      	blx	r3
 800e124:	60f8      	str	r0, [r7, #12]
    break;
 800e126:	e0b0      	b.n	800e28a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	7c1b      	ldrb	r3, [r3, #16]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10d      	bne.n	800e14c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e138:	f107 020a 	add.w	r2, r7, #10
 800e13c:	4610      	mov	r0, r2
 800e13e:	4798      	blx	r3
 800e140:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	3301      	adds	r3, #1
 800e146:	2202      	movs	r2, #2
 800e148:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e14a:	e09e      	b.n	800e28a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e154:	f107 020a 	add.w	r2, r7, #10
 800e158:	4610      	mov	r0, r2
 800e15a:	4798      	blx	r3
 800e15c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	3301      	adds	r3, #1
 800e162:	2202      	movs	r2, #2
 800e164:	701a      	strb	r2, [r3, #0]
    break;
 800e166:	e090      	b.n	800e28a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	885b      	ldrh	r3, [r3, #2]
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	2b05      	cmp	r3, #5
 800e170:	d856      	bhi.n	800e220 <USBD_GetDescriptor+0x14c>
 800e172:	a201      	add	r2, pc, #4	; (adr r2, 800e178 <USBD_GetDescriptor+0xa4>)
 800e174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e178:	0800e191 	.word	0x0800e191
 800e17c:	0800e1a9 	.word	0x0800e1a9
 800e180:	0800e1c1 	.word	0x0800e1c1
 800e184:	0800e1d9 	.word	0x0800e1d9
 800e188:	0800e1f1 	.word	0x0800e1f1
 800e18c:	0800e209 	.word	0x0800e209
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	7c12      	ldrb	r2, [r2, #16]
 800e19c:	f107 010a 	add.w	r1, r7, #10
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	4798      	blx	r3
 800e1a4:	60f8      	str	r0, [r7, #12]
      break;
 800e1a6:	e040      	b.n	800e22a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	7c12      	ldrb	r2, [r2, #16]
 800e1b4:	f107 010a 	add.w	r1, r7, #10
 800e1b8:	4610      	mov	r0, r2
 800e1ba:	4798      	blx	r3
 800e1bc:	60f8      	str	r0, [r7, #12]
      break;
 800e1be:	e034      	b.n	800e22a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	7c12      	ldrb	r2, [r2, #16]
 800e1cc:	f107 010a 	add.w	r1, r7, #10
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	4798      	blx	r3
 800e1d4:	60f8      	str	r0, [r7, #12]
      break;
 800e1d6:	e028      	b.n	800e22a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e1de:	691b      	ldr	r3, [r3, #16]
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	7c12      	ldrb	r2, [r2, #16]
 800e1e4:	f107 010a 	add.w	r1, r7, #10
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	4798      	blx	r3
 800e1ec:	60f8      	str	r0, [r7, #12]
      break;
 800e1ee:	e01c      	b.n	800e22a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e1f6:	695b      	ldr	r3, [r3, #20]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	7c12      	ldrb	r2, [r2, #16]
 800e1fc:	f107 010a 	add.w	r1, r7, #10
 800e200:	4610      	mov	r0, r2
 800e202:	4798      	blx	r3
 800e204:	60f8      	str	r0, [r7, #12]
      break;
 800e206:	e010      	b.n	800e22a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e20e:	699b      	ldr	r3, [r3, #24]
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	7c12      	ldrb	r2, [r2, #16]
 800e214:	f107 010a 	add.w	r1, r7, #10
 800e218:	4610      	mov	r0, r2
 800e21a:	4798      	blx	r3
 800e21c:	60f8      	str	r0, [r7, #12]
      break;
 800e21e:	e004      	b.n	800e22a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800e220:	6839      	ldr	r1, [r7, #0]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f9fb 	bl	800e61e <USBD_CtlError>
      return;
 800e228:	e04b      	b.n	800e2c2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800e22a:	e02e      	b.n	800e28a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	7c1b      	ldrb	r3, [r3, #16]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d109      	bne.n	800e248 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e23c:	f107 020a 	add.w	r2, r7, #10
 800e240:	4610      	mov	r0, r2
 800e242:	4798      	blx	r3
 800e244:	60f8      	str	r0, [r7, #12]
      break;
 800e246:	e020      	b.n	800e28a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f9e7 	bl	800e61e <USBD_CtlError>
      return;
 800e250:	e037      	b.n	800e2c2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	7c1b      	ldrb	r3, [r3, #16]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d10d      	bne.n	800e276 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e262:	f107 020a 	add.w	r2, r7, #10
 800e266:	4610      	mov	r0, r2
 800e268:	4798      	blx	r3
 800e26a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	3301      	adds	r3, #1
 800e270:	2207      	movs	r2, #7
 800e272:	701a      	strb	r2, [r3, #0]
      break;
 800e274:	e009      	b.n	800e28a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e276:	6839      	ldr	r1, [r7, #0]
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f000 f9d0 	bl	800e61e <USBD_CtlError>
      return;
 800e27e:	e020      	b.n	800e2c2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800e280:	6839      	ldr	r1, [r7, #0]
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 f9cb 	bl	800e61e <USBD_CtlError>
    return;
 800e288:	e01b      	b.n	800e2c2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800e28a:	897b      	ldrh	r3, [r7, #10]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d011      	beq.n	800e2b4 <USBD_GetDescriptor+0x1e0>
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	88db      	ldrh	r3, [r3, #6]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00d      	beq.n	800e2b4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	88da      	ldrh	r2, [r3, #6]
 800e29c:	897b      	ldrh	r3, [r7, #10]
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	bf28      	it	cs
 800e2a2:	4613      	movcs	r3, r2
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800e2a8:	897b      	ldrh	r3, [r7, #10]
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	68f9      	ldr	r1, [r7, #12]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 fa1f 	bl	800e6f2 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	88db      	ldrh	r3, [r3, #6]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d102      	bne.n	800e2c2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fa76 	bl	800e7ae <USBD_CtlSendStatus>
  }
}
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	889b      	ldrh	r3, [r3, #4]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d130      	bne.n	800e33c <USBD_SetAddress+0x74>
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	88db      	ldrh	r3, [r3, #6]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d12c      	bne.n	800e33c <USBD_SetAddress+0x74>
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	885b      	ldrh	r3, [r3, #2]
 800e2e6:	2b7f      	cmp	r3, #127	; 0x7f
 800e2e8:	d828      	bhi.n	800e33c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	885b      	ldrh	r3, [r3, #2]
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e2fc:	2b03      	cmp	r3, #3
 800e2fe:	d104      	bne.n	800e30a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800e300:	6839      	ldr	r1, [r7, #0]
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f98b 	bl	800e61e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e308:	e01d      	b.n	800e346 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	7bfa      	ldrb	r2, [r7, #15]
 800e30e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e312:	7bfb      	ldrb	r3, [r7, #15]
 800e314:	4619      	mov	r1, r3
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 feac 	bl	800f074 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 fa46 	bl	800e7ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e322:	7bfb      	ldrb	r3, [r7, #15]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d004      	beq.n	800e332 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2202      	movs	r2, #2
 800e32c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e330:	e009      	b.n	800e346 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2201      	movs	r2, #1
 800e336:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e33a:	e004      	b.n	800e346 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 f96d 	bl	800e61e <USBD_CtlError>
  }
}
 800e344:	bf00      	nop
 800e346:	bf00      	nop
 800e348:	3710      	adds	r7, #16
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
	...

0800e350 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	885b      	ldrh	r3, [r3, #2]
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	4b41      	ldr	r3, [pc, #260]	; (800e468 <USBD_SetConfig+0x118>)
 800e362:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e364:	4b40      	ldr	r3, [pc, #256]	; (800e468 <USBD_SetConfig+0x118>)
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d904      	bls.n	800e376 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e36c:	6839      	ldr	r1, [r7, #0]
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f955 	bl	800e61e <USBD_CtlError>
 800e374:	e075      	b.n	800e462 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d002      	beq.n	800e386 <USBD_SetConfig+0x36>
 800e380:	2b03      	cmp	r3, #3
 800e382:	d023      	beq.n	800e3cc <USBD_SetConfig+0x7c>
 800e384:	e062      	b.n	800e44c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800e386:	4b38      	ldr	r3, [pc, #224]	; (800e468 <USBD_SetConfig+0x118>)
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d01a      	beq.n	800e3c4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800e38e:	4b36      	ldr	r3, [pc, #216]	; (800e468 <USBD_SetConfig+0x118>)
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	461a      	mov	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2203      	movs	r2, #3
 800e39c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e3a0:	4b31      	ldr	r3, [pc, #196]	; (800e468 <USBD_SetConfig+0x118>)
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f7ff fa5d 	bl	800d866 <USBD_SetClassConfig>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b02      	cmp	r3, #2
 800e3b0:	d104      	bne.n	800e3bc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800e3b2:	6839      	ldr	r1, [r7, #0]
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 f932 	bl	800e61e <USBD_CtlError>
          return;
 800e3ba:	e052      	b.n	800e462 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 f9f6 	bl	800e7ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e3c2:	e04e      	b.n	800e462 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f000 f9f2 	bl	800e7ae <USBD_CtlSendStatus>
      break;
 800e3ca:	e04a      	b.n	800e462 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e3cc:	4b26      	ldr	r3, [pc, #152]	; (800e468 <USBD_SetConfig+0x118>)
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d112      	bne.n	800e3fa <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2202      	movs	r2, #2
 800e3d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800e3dc:	4b22      	ldr	r3, [pc, #136]	; (800e468 <USBD_SetConfig+0x118>)
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800e3e6:	4b20      	ldr	r3, [pc, #128]	; (800e468 <USBD_SetConfig+0x118>)
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff fa59 	bl	800d8a4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 f9db 	bl	800e7ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e3f8:	e033      	b.n	800e462 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800e3fa:	4b1b      	ldr	r3, [pc, #108]	; (800e468 <USBD_SetConfig+0x118>)
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	461a      	mov	r2, r3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	429a      	cmp	r2, r3
 800e406:	d01d      	beq.n	800e444 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	4619      	mov	r1, r3
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7ff fa47 	bl	800d8a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e416:	4b14      	ldr	r3, [pc, #80]	; (800e468 <USBD_SetConfig+0x118>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	461a      	mov	r2, r3
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e420:	4b11      	ldr	r3, [pc, #68]	; (800e468 <USBD_SetConfig+0x118>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	4619      	mov	r1, r3
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7ff fa1d 	bl	800d866 <USBD_SetClassConfig>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d104      	bne.n	800e43c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800e432:	6839      	ldr	r1, [r7, #0]
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 f8f2 	bl	800e61e <USBD_CtlError>
          return;
 800e43a:	e012      	b.n	800e462 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 f9b6 	bl	800e7ae <USBD_CtlSendStatus>
      break;
 800e442:	e00e      	b.n	800e462 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 f9b2 	bl	800e7ae <USBD_CtlSendStatus>
      break;
 800e44a:	e00a      	b.n	800e462 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800e44c:	6839      	ldr	r1, [r7, #0]
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 f8e5 	bl	800e61e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800e454:	4b04      	ldr	r3, [pc, #16]	; (800e468 <USBD_SetConfig+0x118>)
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	4619      	mov	r1, r3
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7ff fa22 	bl	800d8a4 <USBD_ClrClassConfig>
      break;
 800e460:	bf00      	nop
    }
  }
}
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	20000ed0 	.word	0x20000ed0

0800e46c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	88db      	ldrh	r3, [r3, #6]
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d004      	beq.n	800e488 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 f8cc 	bl	800e61e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800e486:	e022      	b.n	800e4ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e48e:	2b02      	cmp	r3, #2
 800e490:	dc02      	bgt.n	800e498 <USBD_GetConfig+0x2c>
 800e492:	2b00      	cmp	r3, #0
 800e494:	dc03      	bgt.n	800e49e <USBD_GetConfig+0x32>
 800e496:	e015      	b.n	800e4c4 <USBD_GetConfig+0x58>
 800e498:	2b03      	cmp	r3, #3
 800e49a:	d00b      	beq.n	800e4b4 <USBD_GetConfig+0x48>
 800e49c:	e012      	b.n	800e4c4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	3308      	adds	r3, #8
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 f920 	bl	800e6f2 <USBD_CtlSendData>
      break;
 800e4b2:	e00c      	b.n	800e4ce <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	3304      	adds	r3, #4
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 f918 	bl	800e6f2 <USBD_CtlSendData>
      break;
 800e4c2:	e004      	b.n	800e4ce <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800e4c4:	6839      	ldr	r1, [r7, #0]
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 f8a9 	bl	800e61e <USBD_CtlError>
      break;
 800e4cc:	bf00      	nop
}
 800e4ce:	bf00      	nop
 800e4d0:	3708      	adds	r7, #8
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b082      	sub	sp, #8
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e4e6:	3b01      	subs	r3, #1
 800e4e8:	2b02      	cmp	r3, #2
 800e4ea:	d81e      	bhi.n	800e52a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	88db      	ldrh	r3, [r3, #6]
 800e4f0:	2b02      	cmp	r3, #2
 800e4f2:	d004      	beq.n	800e4fe <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e4f4:	6839      	ldr	r1, [r7, #0]
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f891 	bl	800e61e <USBD_CtlError>
      break;
 800e4fc:	e01a      	b.n	800e534 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2201      	movs	r2, #1
 800e502:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d005      	beq.n	800e51a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	f043 0202 	orr.w	r2, r3, #2
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	330c      	adds	r3, #12
 800e51e:	2202      	movs	r2, #2
 800e520:	4619      	mov	r1, r3
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 f8e5 	bl	800e6f2 <USBD_CtlSendData>
    break;
 800e528:	e004      	b.n	800e534 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800e52a:	6839      	ldr	r1, [r7, #0]
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f000 f876 	bl	800e61e <USBD_CtlError>
    break;
 800e532:	bf00      	nop
  }
}
 800e534:	bf00      	nop
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	885b      	ldrh	r3, [r3, #2]
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d106      	bne.n	800e55c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2201      	movs	r2, #1
 800e552:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 f929 	bl	800e7ae <USBD_CtlSendStatus>
  }

}
 800e55c:	bf00      	nop
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e574:	3b01      	subs	r3, #1
 800e576:	2b02      	cmp	r3, #2
 800e578:	d80b      	bhi.n	800e592 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	885b      	ldrh	r3, [r3, #2]
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d10c      	bne.n	800e59c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 f90f 	bl	800e7ae <USBD_CtlSendStatus>
    }
    break;
 800e590:	e004      	b.n	800e59c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800e592:	6839      	ldr	r1, [r7, #0]
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 f842 	bl	800e61e <USBD_CtlError>
    break;
 800e59a:	e000      	b.n	800e59e <USBD_ClrFeature+0x3a>
    break;
 800e59c:	bf00      	nop
  }
}
 800e59e:	bf00      	nop
 800e5a0:	3708      	adds	r7, #8
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e5a6:	b480      	push	{r7}
 800e5a8:	b083      	sub	sp, #12
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
 800e5ae:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	781a      	ldrb	r2, [r3, #0]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	785a      	ldrb	r2, [r3, #1]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	3302      	adds	r3, #2
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	b29a      	uxth	r2, r3
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	3303      	adds	r3, #3
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	021b      	lsls	r3, r3, #8
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	4413      	add	r3, r2
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	3304      	adds	r3, #4
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	b29a      	uxth	r2, r3
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	3305      	adds	r3, #5
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	021b      	lsls	r3, r3, #8
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	4413      	add	r3, r2
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	3306      	adds	r3, #6
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	3307      	adds	r3, #7
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	b29b      	uxth	r3, r3
 800e608:	021b      	lsls	r3, r3, #8
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	4413      	add	r3, r2
 800e60e:	b29a      	uxth	r2, r3
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	80da      	strh	r2, [r3, #6]

}
 800e614:	bf00      	nop
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	bc80      	pop	{r7}
 800e61c:	4770      	bx	lr

0800e61e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b082      	sub	sp, #8
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
 800e626:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800e628:	2180      	movs	r1, #128	; 0x80
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 fcb8 	bl	800efa0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800e630:	2100      	movs	r1, #0
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f000 fcb4 	bl	800efa0 <USBD_LL_StallEP>
}
 800e638:	bf00      	nop
 800e63a:	3708      	adds	r7, #8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e64c:	2300      	movs	r3, #0
 800e64e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d032      	beq.n	800e6bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e656:	68f8      	ldr	r0, [r7, #12]
 800e658:	f000 f834 	bl	800e6c4 <USBD_GetLen>
 800e65c:	4603      	mov	r3, r0
 800e65e:	3301      	adds	r3, #1
 800e660:	b29b      	uxth	r3, r3
 800e662:	005b      	lsls	r3, r3, #1
 800e664:	b29a      	uxth	r2, r3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e66a:	7dfb      	ldrb	r3, [r7, #23]
 800e66c:	1c5a      	adds	r2, r3, #1
 800e66e:	75fa      	strb	r2, [r7, #23]
 800e670:	461a      	mov	r2, r3
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	4413      	add	r3, r2
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	7812      	ldrb	r2, [r2, #0]
 800e67a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e67c:	7dfb      	ldrb	r3, [r7, #23]
 800e67e:	1c5a      	adds	r2, r3, #1
 800e680:	75fa      	strb	r2, [r7, #23]
 800e682:	461a      	mov	r2, r3
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	4413      	add	r3, r2
 800e688:	2203      	movs	r2, #3
 800e68a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e68c:	e012      	b.n	800e6b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	1c5a      	adds	r2, r3, #1
 800e692:	60fa      	str	r2, [r7, #12]
 800e694:	7dfa      	ldrb	r2, [r7, #23]
 800e696:	1c51      	adds	r1, r2, #1
 800e698:	75f9      	strb	r1, [r7, #23]
 800e69a:	4611      	mov	r1, r2
 800e69c:	68ba      	ldr	r2, [r7, #8]
 800e69e:	440a      	add	r2, r1
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e6a4:	7dfb      	ldrb	r3, [r7, #23]
 800e6a6:	1c5a      	adds	r2, r3, #1
 800e6a8:	75fa      	strb	r2, [r7, #23]
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1e8      	bne.n	800e68e <USBD_GetString+0x4e>
    }
  }
}
 800e6bc:	bf00      	nop
 800e6be:	3718      	adds	r7, #24
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b085      	sub	sp, #20
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800e6d0:	e005      	b.n	800e6de <USBD_GetLen+0x1a>
    {
        len++;
 800e6d2:	7bfb      	ldrb	r3, [r7, #15]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	73fb      	strb	r3, [r7, #15]
        buf++;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1f5      	bne.n	800e6d2 <USBD_GetLen+0xe>
    }

    return len;
 800e6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3714      	adds	r7, #20
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bc80      	pop	{r7}
 800e6f0:	4770      	bx	lr

0800e6f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b084      	sub	sp, #16
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	60f8      	str	r0, [r7, #12]
 800e6fa:	60b9      	str	r1, [r7, #8]
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2202      	movs	r2, #2
 800e704:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800e708:	88fa      	ldrh	r2, [r7, #6]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e70e:	88fa      	ldrh	r2, [r7, #6]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e714:	88fb      	ldrh	r3, [r7, #6]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	2100      	movs	r1, #0
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	f000 fcc9 	bl	800f0b2 <USBD_LL_Transmit>

  return USBD_OK;
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	3710      	adds	r7, #16
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b084      	sub	sp, #16
 800e72e:	af00      	add	r7, sp, #0
 800e730:	60f8      	str	r0, [r7, #12]
 800e732:	60b9      	str	r1, [r7, #8]
 800e734:	4613      	mov	r3, r2
 800e736:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e738:	88fb      	ldrh	r3, [r7, #6]
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	2100      	movs	r1, #0
 800e73e:	68f8      	ldr	r0, [r7, #12]
 800e740:	f000 fcb7 	bl	800f0b2 <USBD_LL_Transmit>

  return USBD_OK;
 800e744:	2300      	movs	r3, #0
}
 800e746:	4618      	mov	r0, r3
 800e748:	3710      	adds	r7, #16
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800e74e:	b580      	push	{r7, lr}
 800e750:	b084      	sub	sp, #16
 800e752:	af00      	add	r7, sp, #0
 800e754:	60f8      	str	r0, [r7, #12]
 800e756:	60b9      	str	r1, [r7, #8]
 800e758:	4613      	mov	r3, r2
 800e75a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2203      	movs	r2, #3
 800e760:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800e764:	88fa      	ldrh	r2, [r7, #6]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800e76c:	88fa      	ldrh	r2, [r7, #6]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800e774:	88fb      	ldrh	r3, [r7, #6]
 800e776:	68ba      	ldr	r2, [r7, #8]
 800e778:	2100      	movs	r1, #0
 800e77a:	68f8      	ldr	r0, [r7, #12]
 800e77c:	f000 fcbc 	bl	800f0f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e780:	2300      	movs	r3, #0
}
 800e782:	4618      	mov	r0, r3
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b084      	sub	sp, #16
 800e78e:	af00      	add	r7, sp, #0
 800e790:	60f8      	str	r0, [r7, #12]
 800e792:	60b9      	str	r1, [r7, #8]
 800e794:	4613      	mov	r3, r2
 800e796:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e798:	88fb      	ldrh	r3, [r7, #6]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	2100      	movs	r1, #0
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f000 fcaa 	bl	800f0f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7a4:	2300      	movs	r3, #0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b082      	sub	sp, #8
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2204      	movs	r2, #4
 800e7ba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e7be:	2300      	movs	r3, #0
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	2100      	movs	r1, #0
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 fc74 	bl	800f0b2 <USBD_LL_Transmit>

  return USBD_OK;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3708      	adds	r7, #8
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2205      	movs	r2, #5
 800e7e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 fc84 	bl	800f0f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7f0:	2300      	movs	r3, #0
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3708      	adds	r7, #8
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
	...

0800e7fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e800:	2200      	movs	r2, #0
 800e802:	4912      	ldr	r1, [pc, #72]	; (800e84c <MX_USB_DEVICE_Init+0x50>)
 800e804:	4812      	ldr	r0, [pc, #72]	; (800e850 <MX_USB_DEVICE_Init+0x54>)
 800e806:	f7fe ffd4 	bl	800d7b2 <USBD_Init>
 800e80a:	4603      	mov	r3, r0
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d001      	beq.n	800e814 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e810:	f7f5 fea2 	bl	8004558 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e814:	490f      	ldr	r1, [pc, #60]	; (800e854 <MX_USB_DEVICE_Init+0x58>)
 800e816:	480e      	ldr	r0, [pc, #56]	; (800e850 <MX_USB_DEVICE_Init+0x54>)
 800e818:	f7fe fff6 	bl	800d808 <USBD_RegisterClass>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d001      	beq.n	800e826 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e822:	f7f5 fe99 	bl	8004558 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e826:	490c      	ldr	r1, [pc, #48]	; (800e858 <MX_USB_DEVICE_Init+0x5c>)
 800e828:	4809      	ldr	r0, [pc, #36]	; (800e850 <MX_USB_DEVICE_Init+0x54>)
 800e82a:	f7fe ff27 	bl	800d67c <USBD_CDC_RegisterInterface>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d001      	beq.n	800e838 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e834:	f7f5 fe90 	bl	8004558 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e838:	4805      	ldr	r0, [pc, #20]	; (800e850 <MX_USB_DEVICE_Init+0x54>)
 800e83a:	f7fe fffe 	bl	800d83a <USBD_Start>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d001      	beq.n	800e848 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e844:	f7f5 fe88 	bl	8004558 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e848:	bf00      	nop
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	200008ec 	.word	0x200008ec
 800e850:	20000ed4 	.word	0x20000ed4
 800e854:	200007d8 	.word	0x200007d8
 800e858:	200008dc 	.word	0x200008dc

0800e85c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e860:	2200      	movs	r2, #0
 800e862:	4905      	ldr	r1, [pc, #20]	; (800e878 <CDC_Init_FS+0x1c>)
 800e864:	4805      	ldr	r0, [pc, #20]	; (800e87c <CDC_Init_FS+0x20>)
 800e866:	f7fe ff1f 	bl	800d6a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e86a:	4905      	ldr	r1, [pc, #20]	; (800e880 <CDC_Init_FS+0x24>)
 800e86c:	4803      	ldr	r0, [pc, #12]	; (800e87c <CDC_Init_FS+0x20>)
 800e86e:	f7fe ff34 	bl	800d6da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e872:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e874:	4618      	mov	r0, r3
 800e876:	bd80      	pop	{r7, pc}
 800e878:	200011f0 	.word	0x200011f0
 800e87c:	20000ed4 	.word	0x20000ed4
 800e880:	20001170 	.word	0x20001170

0800e884 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e884:	b480      	push	{r7}
 800e886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e888:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bc80      	pop	{r7}
 800e890:	4770      	bx	lr
	...

0800e894 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	4603      	mov	r3, r0
 800e89c:	6039      	str	r1, [r7, #0]
 800e89e:	71fb      	strb	r3, [r7, #7]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e8a4:	79fb      	ldrb	r3, [r7, #7]
 800e8a6:	2b23      	cmp	r3, #35	; 0x23
 800e8a8:	d866      	bhi.n	800e978 <CDC_Control_FS+0xe4>
 800e8aa:	a201      	add	r2, pc, #4	; (adr r2, 800e8b0 <CDC_Control_FS+0x1c>)
 800e8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b0:	0800e979 	.word	0x0800e979
 800e8b4:	0800e979 	.word	0x0800e979
 800e8b8:	0800e979 	.word	0x0800e979
 800e8bc:	0800e979 	.word	0x0800e979
 800e8c0:	0800e979 	.word	0x0800e979
 800e8c4:	0800e979 	.word	0x0800e979
 800e8c8:	0800e979 	.word	0x0800e979
 800e8cc:	0800e979 	.word	0x0800e979
 800e8d0:	0800e979 	.word	0x0800e979
 800e8d4:	0800e979 	.word	0x0800e979
 800e8d8:	0800e979 	.word	0x0800e979
 800e8dc:	0800e979 	.word	0x0800e979
 800e8e0:	0800e979 	.word	0x0800e979
 800e8e4:	0800e979 	.word	0x0800e979
 800e8e8:	0800e979 	.word	0x0800e979
 800e8ec:	0800e979 	.word	0x0800e979
 800e8f0:	0800e979 	.word	0x0800e979
 800e8f4:	0800e979 	.word	0x0800e979
 800e8f8:	0800e979 	.word	0x0800e979
 800e8fc:	0800e979 	.word	0x0800e979
 800e900:	0800e979 	.word	0x0800e979
 800e904:	0800e979 	.word	0x0800e979
 800e908:	0800e979 	.word	0x0800e979
 800e90c:	0800e979 	.word	0x0800e979
 800e910:	0800e979 	.word	0x0800e979
 800e914:	0800e979 	.word	0x0800e979
 800e918:	0800e979 	.word	0x0800e979
 800e91c:	0800e979 	.word	0x0800e979
 800e920:	0800e979 	.word	0x0800e979
 800e924:	0800e979 	.word	0x0800e979
 800e928:	0800e979 	.word	0x0800e979
 800e92c:	0800e979 	.word	0x0800e979
 800e930:	0800e979 	.word	0x0800e979
 800e934:	0800e941 	.word	0x0800e941
 800e938:	0800e979 	.word	0x0800e979
 800e93c:	0800e979 	.word	0x0800e979
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	2220      	movs	r2, #32
 800e944:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	3301      	adds	r3, #1
 800e94a:	22c2      	movs	r2, #194	; 0xc2
 800e94c:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	3302      	adds	r3, #2
 800e952:	2201      	movs	r2, #1
 800e954:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	3303      	adds	r3, #3
 800e95a:	2200      	movs	r2, #0
 800e95c:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	3304      	adds	r3, #4
 800e962:	2200      	movs	r2, #0
 800e964:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	3305      	adds	r3, #5
 800e96a:	2200      	movs	r2, #0
 800e96c:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	3306      	adds	r3, #6
 800e972:	2208      	movs	r2, #8
 800e974:	701a      	strb	r2, [r3, #0]
    break;
 800e976:	e000      	b.n	800e97a <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e978:	bf00      	nop
  }

  return (USBD_OK);
 800e97a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	bc80      	pop	{r7}
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop

0800e988 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b084      	sub	sp, #16
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800e992:	2300      	movs	r3, #0
 800e994:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800e996:	e018      	b.n	800e9ca <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	4413      	add	r3, r2
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	2b0a      	cmp	r3, #10
 800e9a2:	d005      	beq.n	800e9b0 <CDC_Receive_FS+0x28>
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	2b0d      	cmp	r3, #13
 800e9ae:	d102      	bne.n	800e9b6 <CDC_Receive_FS+0x2e>
 800e9b0:	4b12      	ldr	r3, [pc, #72]	; (800e9fc <CDC_Receive_FS+0x74>)
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7f5 fdb2 	bl	8004528 <Write_to_circ_buffer>
	  i++;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d3e1      	bcc.n	800e998 <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	4619      	mov	r1, r3
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f000 f811 	bl	800ea04 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e9e2:	6879      	ldr	r1, [r7, #4]
 800e9e4:	4806      	ldr	r0, [pc, #24]	; (800ea00 <CDC_Receive_FS+0x78>)
 800e9e6:	f7fe fe78 	bl	800d6da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e9ea:	4805      	ldr	r0, [pc, #20]	; (800ea00 <CDC_Receive_FS+0x78>)
 800e9ec:	f7fe feb7 	bl	800d75e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e9f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20000c20 	.word	0x20000c20
 800ea00:	20000ed4 	.word	0x20000ed4

0800ea04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ea10:	2300      	movs	r3, #0
 800ea12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ea14:	4b0d      	ldr	r3, [pc, #52]	; (800ea4c <CDC_Transmit_FS+0x48>)
 800ea16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ea1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d001      	beq.n	800ea2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ea26:	2301      	movs	r3, #1
 800ea28:	e00b      	b.n	800ea42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea2a:	887b      	ldrh	r3, [r7, #2]
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	6879      	ldr	r1, [r7, #4]
 800ea30:	4806      	ldr	r0, [pc, #24]	; (800ea4c <CDC_Transmit_FS+0x48>)
 800ea32:	f7fe fe39 	bl	800d6a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea36:	4805      	ldr	r0, [pc, #20]	; (800ea4c <CDC_Transmit_FS+0x48>)
 800ea38:	f7fe fe62 	bl	800d700 <USBD_CDC_TransmitPacket>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ea40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	20000ed4 	.word	0x20000ed4

0800ea50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	4603      	mov	r3, r0
 800ea58:	6039      	str	r1, [r7, #0]
 800ea5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	2212      	movs	r2, #18
 800ea60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ea62:	4b03      	ldr	r3, [pc, #12]	; (800ea70 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bc80      	pop	{r7}
 800ea6c:	4770      	bx	lr
 800ea6e:	bf00      	nop
 800ea70:	20000908 	.word	0x20000908

0800ea74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	6039      	str	r1, [r7, #0]
 800ea7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	2204      	movs	r2, #4
 800ea84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ea86:	4b03      	ldr	r3, [pc, #12]	; (800ea94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bc80      	pop	{r7}
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	2000091c 	.word	0x2000091c

0800ea98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	6039      	str	r1, [r7, #0]
 800eaa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eaa4:	79fb      	ldrb	r3, [r7, #7]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d105      	bne.n	800eab6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eaaa:	683a      	ldr	r2, [r7, #0]
 800eaac:	4907      	ldr	r1, [pc, #28]	; (800eacc <USBD_FS_ProductStrDescriptor+0x34>)
 800eaae:	4808      	ldr	r0, [pc, #32]	; (800ead0 <USBD_FS_ProductStrDescriptor+0x38>)
 800eab0:	f7ff fdc6 	bl	800e640 <USBD_GetString>
 800eab4:	e004      	b.n	800eac0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eab6:	683a      	ldr	r2, [r7, #0]
 800eab8:	4904      	ldr	r1, [pc, #16]	; (800eacc <USBD_FS_ProductStrDescriptor+0x34>)
 800eaba:	4805      	ldr	r0, [pc, #20]	; (800ead0 <USBD_FS_ProductStrDescriptor+0x38>)
 800eabc:	f7ff fdc0 	bl	800e640 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eac0:	4b02      	ldr	r3, [pc, #8]	; (800eacc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3708      	adds	r7, #8
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	200012f0 	.word	0x200012f0
 800ead0:	08013aa8 	.word	0x08013aa8

0800ead4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	4603      	mov	r3, r0
 800eadc:	6039      	str	r1, [r7, #0]
 800eade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eae0:	683a      	ldr	r2, [r7, #0]
 800eae2:	4904      	ldr	r1, [pc, #16]	; (800eaf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eae4:	4804      	ldr	r0, [pc, #16]	; (800eaf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eae6:	f7ff fdab 	bl	800e640 <USBD_GetString>
  return USBD_StrDesc;
 800eaea:	4b02      	ldr	r3, [pc, #8]	; (800eaf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	200012f0 	.word	0x200012f0
 800eaf8:	08013ab4 	.word	0x08013ab4

0800eafc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	4603      	mov	r3, r0
 800eb04:	6039      	str	r1, [r7, #0]
 800eb06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	221a      	movs	r2, #26
 800eb0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb0e:	f000 f843 	bl	800eb98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb12:	4b02      	ldr	r3, [pc, #8]	; (800eb1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	20000920 	.word	0x20000920

0800eb20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	4603      	mov	r3, r0
 800eb28:	6039      	str	r1, [r7, #0]
 800eb2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb2c:	79fb      	ldrb	r3, [r7, #7]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d105      	bne.n	800eb3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb32:	683a      	ldr	r2, [r7, #0]
 800eb34:	4907      	ldr	r1, [pc, #28]	; (800eb54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb36:	4808      	ldr	r0, [pc, #32]	; (800eb58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb38:	f7ff fd82 	bl	800e640 <USBD_GetString>
 800eb3c:	e004      	b.n	800eb48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb3e:	683a      	ldr	r2, [r7, #0]
 800eb40:	4904      	ldr	r1, [pc, #16]	; (800eb54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb42:	4805      	ldr	r0, [pc, #20]	; (800eb58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb44:	f7ff fd7c 	bl	800e640 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb48:	4b02      	ldr	r3, [pc, #8]	; (800eb54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	200012f0 	.word	0x200012f0
 800eb58:	08013ac4 	.word	0x08013ac4

0800eb5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	4603      	mov	r3, r0
 800eb64:	6039      	str	r1, [r7, #0]
 800eb66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb68:	79fb      	ldrb	r3, [r7, #7]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d105      	bne.n	800eb7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	4907      	ldr	r1, [pc, #28]	; (800eb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb72:	4808      	ldr	r0, [pc, #32]	; (800eb94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb74:	f7ff fd64 	bl	800e640 <USBD_GetString>
 800eb78:	e004      	b.n	800eb84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb7a:	683a      	ldr	r2, [r7, #0]
 800eb7c:	4904      	ldr	r1, [pc, #16]	; (800eb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb7e:	4805      	ldr	r0, [pc, #20]	; (800eb94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb80:	f7ff fd5e 	bl	800e640 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb84:	4b02      	ldr	r3, [pc, #8]	; (800eb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3708      	adds	r7, #8
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	200012f0 	.word	0x200012f0
 800eb94:	08013ad0 	.word	0x08013ad0

0800eb98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eb9e:	4b0f      	ldr	r3, [pc, #60]	; (800ebdc <Get_SerialNum+0x44>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eba4:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <Get_SerialNum+0x48>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ebaa:	4b0e      	ldr	r3, [pc, #56]	; (800ebe4 <Get_SerialNum+0x4c>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d009      	beq.n	800ebd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ebbe:	2208      	movs	r2, #8
 800ebc0:	4909      	ldr	r1, [pc, #36]	; (800ebe8 <Get_SerialNum+0x50>)
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	f000 f814 	bl	800ebf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ebc8:	2204      	movs	r2, #4
 800ebca:	4908      	ldr	r1, [pc, #32]	; (800ebec <Get_SerialNum+0x54>)
 800ebcc:	68b8      	ldr	r0, [r7, #8]
 800ebce:	f000 f80f 	bl	800ebf0 <IntToUnicode>
  }
}
 800ebd2:	bf00      	nop
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	1ff80050 	.word	0x1ff80050
 800ebe0:	1ff80054 	.word	0x1ff80054
 800ebe4:	1ff80058 	.word	0x1ff80058
 800ebe8:	20000922 	.word	0x20000922
 800ebec:	20000932 	.word	0x20000932

0800ebf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b087      	sub	sp, #28
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec02:	2300      	movs	r3, #0
 800ec04:	75fb      	strb	r3, [r7, #23]
 800ec06:	e027      	b.n	800ec58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	0f1b      	lsrs	r3, r3, #28
 800ec0c:	2b09      	cmp	r3, #9
 800ec0e:	d80b      	bhi.n	800ec28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	0f1b      	lsrs	r3, r3, #28
 800ec14:	b2da      	uxtb	r2, r3
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	005b      	lsls	r3, r3, #1
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	440b      	add	r3, r1
 800ec20:	3230      	adds	r2, #48	; 0x30
 800ec22:	b2d2      	uxtb	r2, r2
 800ec24:	701a      	strb	r2, [r3, #0]
 800ec26:	e00a      	b.n	800ec3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	0f1b      	lsrs	r3, r3, #28
 800ec2c:	b2da      	uxtb	r2, r3
 800ec2e:	7dfb      	ldrb	r3, [r7, #23]
 800ec30:	005b      	lsls	r3, r3, #1
 800ec32:	4619      	mov	r1, r3
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	440b      	add	r3, r1
 800ec38:	3237      	adds	r2, #55	; 0x37
 800ec3a:	b2d2      	uxtb	r2, r2
 800ec3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	011b      	lsls	r3, r3, #4
 800ec42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ec44:	7dfb      	ldrb	r3, [r7, #23]
 800ec46:	005b      	lsls	r3, r3, #1
 800ec48:	3301      	adds	r3, #1
 800ec4a:	68ba      	ldr	r2, [r7, #8]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	2200      	movs	r2, #0
 800ec50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ec52:	7dfb      	ldrb	r3, [r7, #23]
 800ec54:	3301      	adds	r3, #1
 800ec56:	75fb      	strb	r3, [r7, #23]
 800ec58:	7dfa      	ldrb	r2, [r7, #23]
 800ec5a:	79fb      	ldrb	r3, [r7, #7]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d3d3      	bcc.n	800ec08 <IntToUnicode+0x18>
  }
}
 800ec60:	bf00      	nop
 800ec62:	bf00      	nop
 800ec64:	371c      	adds	r7, #28
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bc80      	pop	{r7}
 800ec6a:	4770      	bx	lr

0800ec6c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	460b      	mov	r3, r1
 800ec76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800ec78:	78fb      	ldrb	r3, [r7, #3]
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d106      	bne.n	800ec8c <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800ec7e:	4b09      	ldr	r3, [pc, #36]	; (800eca4 <HAL_PCDEx_SetConnectionState+0x38>)
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	4a08      	ldr	r2, [pc, #32]	; (800eca4 <HAL_PCDEx_SetConnectionState+0x38>)
 800ec84:	f043 0301 	orr.w	r3, r3, #1
 800ec88:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800ec8a:	e005      	b.n	800ec98 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800ec8c:	4b05      	ldr	r3, [pc, #20]	; (800eca4 <HAL_PCDEx_SetConnectionState+0x38>)
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	4a04      	ldr	r2, [pc, #16]	; (800eca4 <HAL_PCDEx_SetConnectionState+0x38>)
 800ec92:	f023 0301 	bic.w	r3, r3, #1
 800ec96:	6053      	str	r3, [r2, #4]
}
 800ec98:	bf00      	nop
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bc80      	pop	{r7}
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop
 800eca4:	40010000 	.word	0x40010000

0800eca8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a0d      	ldr	r2, [pc, #52]	; (800ecec <HAL_PCD_MspInit+0x44>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d113      	bne.n	800ece2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ecba:	4b0d      	ldr	r3, [pc, #52]	; (800ecf0 <HAL_PCD_MspInit+0x48>)
 800ecbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecbe:	4a0c      	ldr	r2, [pc, #48]	; (800ecf0 <HAL_PCD_MspInit+0x48>)
 800ecc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ecc4:	6253      	str	r3, [r2, #36]	; 0x24
 800ecc6:	4b0a      	ldr	r3, [pc, #40]	; (800ecf0 <HAL_PCD_MspInit+0x48>)
 800ecc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecce:	60fb      	str	r3, [r7, #12]
 800ecd0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	2101      	movs	r1, #1
 800ecd6:	2014      	movs	r0, #20
 800ecd8:	f7f6 fa43 	bl	8005162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ecdc:	2014      	movs	r0, #20
 800ecde:	f7f6 fa5c 	bl	800519a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ece2:	bf00      	nop
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	40005c00 	.word	0x40005c00
 800ecf0:	40023800 	.word	0x40023800

0800ecf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ed08:	4619      	mov	r1, r3
 800ed0a:	4610      	mov	r0, r2
 800ed0c:	f7fe fddd 	bl	800d8ca <USBD_LL_SetupStage>
}
 800ed10:	bf00      	nop
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	460b      	mov	r3, r1
 800ed22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ed2a:	78fa      	ldrb	r2, [r7, #3]
 800ed2c:	6879      	ldr	r1, [r7, #4]
 800ed2e:	4613      	mov	r3, r2
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	4413      	add	r3, r2
 800ed34:	00db      	lsls	r3, r3, #3
 800ed36:	440b      	add	r3, r1
 800ed38:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	78fb      	ldrb	r3, [r7, #3]
 800ed40:	4619      	mov	r1, r3
 800ed42:	f7fe fe0f 	bl	800d964 <USBD_LL_DataOutStage>
}
 800ed46:	bf00      	nop
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b082      	sub	sp, #8
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
 800ed56:	460b      	mov	r3, r1
 800ed58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ed60:	78fa      	ldrb	r2, [r7, #3]
 800ed62:	6879      	ldr	r1, [r7, #4]
 800ed64:	4613      	mov	r3, r2
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	4413      	add	r3, r2
 800ed6a:	00db      	lsls	r3, r3, #3
 800ed6c:	440b      	add	r3, r1
 800ed6e:	333c      	adds	r3, #60	; 0x3c
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	78fb      	ldrb	r3, [r7, #3]
 800ed74:	4619      	mov	r1, r3
 800ed76:	f7fe fe66 	bl	800da46 <USBD_LL_DataInStage>
}
 800ed7a:	bf00      	nop
 800ed7c:	3708      	adds	r7, #8
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b082      	sub	sp, #8
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7fe ff71 	bl	800dc78 <USBD_LL_SOF>
}
 800ed96:	bf00      	nop
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b084      	sub	sp, #16
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eda6:	2301      	movs	r3, #1
 800eda8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	689b      	ldr	r3, [r3, #8]
 800edae:	2b02      	cmp	r3, #2
 800edb0:	d001      	beq.n	800edb6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800edb2:	f7f5 fbd1 	bl	8004558 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800edbc:	7bfa      	ldrb	r2, [r7, #15]
 800edbe:	4611      	mov	r1, r2
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fe ff26 	bl	800dc12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fe fedf 	bl	800db90 <USBD_LL_Reset>
}
 800edd2:	bf00      	nop
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
	...

0800eddc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800edea:	4618      	mov	r0, r3
 800edec:	f7fe ff20 	bl	800dc30 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	699b      	ldr	r3, [r3, #24]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d005      	beq.n	800ee04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800edf8:	4b04      	ldr	r3, [pc, #16]	; (800ee0c <HAL_PCD_SuspendCallback+0x30>)
 800edfa:	691b      	ldr	r3, [r3, #16]
 800edfc:	4a03      	ldr	r2, [pc, #12]	; (800ee0c <HAL_PCD_SuspendCallback+0x30>)
 800edfe:	f043 0306 	orr.w	r3, r3, #6
 800ee02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ee04:	bf00      	nop
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	e000ed00 	.word	0xe000ed00

0800ee10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fe ff1a 	bl	800dc58 <USBD_LL_Resume>
}
 800ee24:	bf00      	nop
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ee34:	4a28      	ldr	r2, [pc, #160]	; (800eed8 <USBD_LL_Init+0xac>)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4a26      	ldr	r2, [pc, #152]	; (800eed8 <USBD_LL_Init+0xac>)
 800ee40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800ee44:	4b24      	ldr	r3, [pc, #144]	; (800eed8 <USBD_LL_Init+0xac>)
 800ee46:	4a25      	ldr	r2, [pc, #148]	; (800eedc <USBD_LL_Init+0xb0>)
 800ee48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ee4a:	4b23      	ldr	r3, [pc, #140]	; (800eed8 <USBD_LL_Init+0xac>)
 800ee4c:	2208      	movs	r2, #8
 800ee4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ee50:	4b21      	ldr	r3, [pc, #132]	; (800eed8 <USBD_LL_Init+0xac>)
 800ee52:	2202      	movs	r2, #2
 800ee54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ee56:	4b20      	ldr	r3, [pc, #128]	; (800eed8 <USBD_LL_Init+0xac>)
 800ee58:	2202      	movs	r2, #2
 800ee5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ee5c:	4b1e      	ldr	r3, [pc, #120]	; (800eed8 <USBD_LL_Init+0xac>)
 800ee5e:	2200      	movs	r2, #0
 800ee60:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ee62:	4b1d      	ldr	r3, [pc, #116]	; (800eed8 <USBD_LL_Init+0xac>)
 800ee64:	2200      	movs	r2, #0
 800ee66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ee68:	481b      	ldr	r0, [pc, #108]	; (800eed8 <USBD_LL_Init+0xac>)
 800ee6a:	f7f7 feab 	bl	8006bc4 <HAL_PCD_Init>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d001      	beq.n	800ee78 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ee74:	f7f5 fb70 	bl	8004558 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ee7e:	2318      	movs	r3, #24
 800ee80:	2200      	movs	r2, #0
 800ee82:	2100      	movs	r1, #0
 800ee84:	f7f9 fa88 	bl	8008398 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ee8e:	2358      	movs	r3, #88	; 0x58
 800ee90:	2200      	movs	r2, #0
 800ee92:	2180      	movs	r1, #128	; 0x80
 800ee94:	f7f9 fa80 	bl	8008398 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ee9e:	23c0      	movs	r3, #192	; 0xc0
 800eea0:	2200      	movs	r2, #0
 800eea2:	2181      	movs	r1, #129	; 0x81
 800eea4:	f7f9 fa78 	bl	8008398 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800eeae:	f44f 7388 	mov.w	r3, #272	; 0x110
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	2101      	movs	r1, #1
 800eeb6:	f7f9 fa6f 	bl	8008398 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800eec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eec4:	2200      	movs	r2, #0
 800eec6:	2182      	movs	r1, #130	; 0x82
 800eec8:	f7f9 fa66 	bl	8008398 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	200014f0 	.word	0x200014f0
 800eedc:	40005c00 	.word	0x40005c00

0800eee0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eee8:	2300      	movs	r3, #0
 800eeea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeec:	2300      	movs	r3, #0
 800eeee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7f7 ff42 	bl	8006d80 <HAL_PCD_Start>
 800eefc:	4603      	mov	r3, r0
 800eefe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef00:	7bfb      	ldrb	r3, [r7, #15]
 800ef02:	4618      	mov	r0, r3
 800ef04:	f000 f944 	bl	800f190 <USBD_Get_USB_Status>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b084      	sub	sp, #16
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
 800ef1e:	4608      	mov	r0, r1
 800ef20:	4611      	mov	r1, r2
 800ef22:	461a      	mov	r2, r3
 800ef24:	4603      	mov	r3, r0
 800ef26:	70fb      	strb	r3, [r7, #3]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	70bb      	strb	r3, [r7, #2]
 800ef2c:	4613      	mov	r3, r2
 800ef2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef30:	2300      	movs	r3, #0
 800ef32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ef3e:	78bb      	ldrb	r3, [r7, #2]
 800ef40:	883a      	ldrh	r2, [r7, #0]
 800ef42:	78f9      	ldrb	r1, [r7, #3]
 800ef44:	f7f8 f85e 	bl	8007004 <HAL_PCD_EP_Open>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef4c:	7bfb      	ldrb	r3, [r7, #15]
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f000 f91e 	bl	800f190 <USBD_Get_USB_Status>
 800ef54:	4603      	mov	r3, r0
 800ef56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b084      	sub	sp, #16
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef72:	2300      	movs	r3, #0
 800ef74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ef7c:	78fa      	ldrb	r2, [r7, #3]
 800ef7e:	4611      	mov	r1, r2
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7f8 f8a5 	bl	80070d0 <HAL_PCD_EP_Close>
 800ef86:	4603      	mov	r3, r0
 800ef88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef8a:	7bfb      	ldrb	r3, [r7, #15]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f000 f8ff 	bl	800f190 <USBD_Get_USB_Status>
 800ef92:	4603      	mov	r3, r0
 800ef94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3710      	adds	r7, #16
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	460b      	mov	r3, r1
 800efaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efac:	2300      	movs	r3, #0
 800efae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efb0:	2300      	movs	r3, #0
 800efb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800efba:	78fa      	ldrb	r2, [r7, #3]
 800efbc:	4611      	mov	r1, r2
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7f8 f965 	bl	800728e <HAL_PCD_EP_SetStall>
 800efc4:	4603      	mov	r3, r0
 800efc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efc8:	7bfb      	ldrb	r3, [r7, #15]
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 f8e0 	bl	800f190 <USBD_Get_USB_Status>
 800efd0:	4603      	mov	r3, r0
 800efd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efde:	b580      	push	{r7, lr}
 800efe0:	b084      	sub	sp, #16
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
 800efe6:	460b      	mov	r3, r1
 800efe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efea:	2300      	movs	r3, #0
 800efec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efee:	2300      	movs	r3, #0
 800eff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800eff8:	78fa      	ldrb	r2, [r7, #3]
 800effa:	4611      	mov	r1, r2
 800effc:	4618      	mov	r0, r3
 800effe:	f7f8 f998 	bl	8007332 <HAL_PCD_EP_ClrStall>
 800f002:	4603      	mov	r3, r0
 800f004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f006:	7bfb      	ldrb	r3, [r7, #15]
 800f008:	4618      	mov	r0, r3
 800f00a:	f000 f8c1 	bl	800f190 <USBD_Get_USB_Status>
 800f00e:	4603      	mov	r3, r0
 800f010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f012:	7bbb      	ldrb	r3, [r7, #14]
}
 800f014:	4618      	mov	r0, r3
 800f016:	3710      	adds	r7, #16
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b085      	sub	sp, #20
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	460b      	mov	r3, r1
 800f026:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f02e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f034:	2b00      	cmp	r3, #0
 800f036:	da0c      	bge.n	800f052 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f038:	78fb      	ldrb	r3, [r7, #3]
 800f03a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f03e:	68f9      	ldr	r1, [r7, #12]
 800f040:	1c5a      	adds	r2, r3, #1
 800f042:	4613      	mov	r3, r2
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	4413      	add	r3, r2
 800f048:	00db      	lsls	r3, r3, #3
 800f04a:	440b      	add	r3, r1
 800f04c:	3302      	adds	r3, #2
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	e00b      	b.n	800f06a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f052:	78fb      	ldrb	r3, [r7, #3]
 800f054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f058:	68f9      	ldr	r1, [r7, #12]
 800f05a:	4613      	mov	r3, r2
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	4413      	add	r3, r2
 800f060:	00db      	lsls	r3, r3, #3
 800f062:	440b      	add	r3, r1
 800f064:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800f068:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3714      	adds	r7, #20
 800f06e:	46bd      	mov	sp, r7
 800f070:	bc80      	pop	{r7}
 800f072:	4770      	bx	lr

0800f074 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	460b      	mov	r3, r1
 800f07e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f080:	2300      	movs	r3, #0
 800f082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f08e:	78fa      	ldrb	r2, [r7, #3]
 800f090:	4611      	mov	r1, r2
 800f092:	4618      	mov	r0, r3
 800f094:	f7f7 ff91 	bl	8006fba <HAL_PCD_SetAddress>
 800f098:	4603      	mov	r3, r0
 800f09a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f09c:	7bfb      	ldrb	r3, [r7, #15]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f000 f876 	bl	800f190 <USBD_Get_USB_Status>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b086      	sub	sp, #24
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	60f8      	str	r0, [r7, #12]
 800f0ba:	607a      	str	r2, [r7, #4]
 800f0bc:	461a      	mov	r2, r3
 800f0be:	460b      	mov	r3, r1
 800f0c0:	72fb      	strb	r3, [r7, #11]
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f0d4:	893b      	ldrh	r3, [r7, #8]
 800f0d6:	7af9      	ldrb	r1, [r7, #11]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	f7f8 f895 	bl	8007208 <HAL_PCD_EP_Transmit>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0e2:	7dfb      	ldrb	r3, [r7, #23]
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f000 f853 	bl	800f190 <USBD_Get_USB_Status>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f0ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3718      	adds	r7, #24
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b086      	sub	sp, #24
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	607a      	str	r2, [r7, #4]
 800f102:	461a      	mov	r2, r3
 800f104:	460b      	mov	r3, r1
 800f106:	72fb      	strb	r3, [r7, #11]
 800f108:	4613      	mov	r3, r2
 800f10a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f10c:	2300      	movs	r3, #0
 800f10e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f110:	2300      	movs	r3, #0
 800f112:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f11a:	893b      	ldrh	r3, [r7, #8]
 800f11c:	7af9      	ldrb	r1, [r7, #11]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	f7f8 f81e 	bl	8007160 <HAL_PCD_EP_Receive>
 800f124:	4603      	mov	r3, r0
 800f126:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f128:	7dfb      	ldrb	r3, [r7, #23]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 f830 	bl	800f190 <USBD_Get_USB_Status>
 800f130:	4603      	mov	r3, r0
 800f132:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f134:	7dbb      	ldrb	r3, [r7, #22]
}
 800f136:	4618      	mov	r0, r3
 800f138:	3718      	adds	r7, #24
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f13e:	b580      	push	{r7, lr}
 800f140:	b082      	sub	sp, #8
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
 800f146:	460b      	mov	r3, r1
 800f148:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f150:	78fa      	ldrb	r2, [r7, #3]
 800f152:	4611      	mov	r1, r2
 800f154:	4618      	mov	r0, r3
 800f156:	f7f8 f840 	bl	80071da <HAL_PCD_EP_GetRxCount>
 800f15a:	4603      	mov	r3, r0
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3708      	adds	r7, #8
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f164:	b480      	push	{r7}
 800f166:	b083      	sub	sp, #12
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f16c:	4b02      	ldr	r3, [pc, #8]	; (800f178 <USBD_static_malloc+0x14>)
}
 800f16e:	4618      	mov	r0, r3
 800f170:	370c      	adds	r7, #12
 800f172:	46bd      	mov	sp, r7
 800f174:	bc80      	pop	{r7}
 800f176:	4770      	bx	lr
 800f178:	200017dc 	.word	0x200017dc

0800f17c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b083      	sub	sp, #12
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]

}
 800f184:	bf00      	nop
 800f186:	370c      	adds	r7, #12
 800f188:	46bd      	mov	sp, r7
 800f18a:	bc80      	pop	{r7}
 800f18c:	4770      	bx	lr
	...

0800f190 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f190:	b480      	push	{r7}
 800f192:	b085      	sub	sp, #20
 800f194:	af00      	add	r7, sp, #0
 800f196:	4603      	mov	r3, r0
 800f198:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f19a:	2300      	movs	r3, #0
 800f19c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f19e:	79fb      	ldrb	r3, [r7, #7]
 800f1a0:	2b03      	cmp	r3, #3
 800f1a2:	d817      	bhi.n	800f1d4 <USBD_Get_USB_Status+0x44>
 800f1a4:	a201      	add	r2, pc, #4	; (adr r2, 800f1ac <USBD_Get_USB_Status+0x1c>)
 800f1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1aa:	bf00      	nop
 800f1ac:	0800f1bd 	.word	0x0800f1bd
 800f1b0:	0800f1c3 	.word	0x0800f1c3
 800f1b4:	0800f1c9 	.word	0x0800f1c9
 800f1b8:	0800f1cf 	.word	0x0800f1cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	73fb      	strb	r3, [r7, #15]
    break;
 800f1c0:	e00b      	b.n	800f1da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f1c2:	2302      	movs	r3, #2
 800f1c4:	73fb      	strb	r3, [r7, #15]
    break;
 800f1c6:	e008      	b.n	800f1da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	73fb      	strb	r3, [r7, #15]
    break;
 800f1cc:	e005      	b.n	800f1da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f1ce:	2302      	movs	r3, #2
 800f1d0:	73fb      	strb	r3, [r7, #15]
    break;
 800f1d2:	e002      	b.n	800f1da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f1d4:	2302      	movs	r3, #2
 800f1d6:	73fb      	strb	r3, [r7, #15]
    break;
 800f1d8:	bf00      	nop
  }
  return usb_status;
 800f1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3714      	adds	r7, #20
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bc80      	pop	{r7}
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop

0800f1e8 <floor>:
 800f1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1ec:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f1f0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f1f4:	2e13      	cmp	r6, #19
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	4607      	mov	r7, r0
 800f1fc:	460c      	mov	r4, r1
 800f1fe:	4605      	mov	r5, r0
 800f200:	dc33      	bgt.n	800f26a <floor+0x82>
 800f202:	2e00      	cmp	r6, #0
 800f204:	da14      	bge.n	800f230 <floor+0x48>
 800f206:	a334      	add	r3, pc, #208	; (adr r3, 800f2d8 <floor+0xf0>)
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	f7f0 ffd0 	bl	80001b0 <__adddf3>
 800f210:	2200      	movs	r2, #0
 800f212:	2300      	movs	r3, #0
 800f214:	f7f1 fc12 	bl	8000a3c <__aeabi_dcmpgt>
 800f218:	b138      	cbz	r0, 800f22a <floor+0x42>
 800f21a:	2c00      	cmp	r4, #0
 800f21c:	da58      	bge.n	800f2d0 <floor+0xe8>
 800f21e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f222:	431d      	orrs	r5, r3
 800f224:	d001      	beq.n	800f22a <floor+0x42>
 800f226:	2500      	movs	r5, #0
 800f228:	4c2d      	ldr	r4, [pc, #180]	; (800f2e0 <floor+0xf8>)
 800f22a:	4623      	mov	r3, r4
 800f22c:	462f      	mov	r7, r5
 800f22e:	e025      	b.n	800f27c <floor+0x94>
 800f230:	4a2c      	ldr	r2, [pc, #176]	; (800f2e4 <floor+0xfc>)
 800f232:	fa42 f806 	asr.w	r8, r2, r6
 800f236:	ea01 0208 	and.w	r2, r1, r8
 800f23a:	4302      	orrs	r2, r0
 800f23c:	d01e      	beq.n	800f27c <floor+0x94>
 800f23e:	a326      	add	r3, pc, #152	; (adr r3, 800f2d8 <floor+0xf0>)
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	f7f0 ffb4 	bl	80001b0 <__adddf3>
 800f248:	2200      	movs	r2, #0
 800f24a:	2300      	movs	r3, #0
 800f24c:	f7f1 fbf6 	bl	8000a3c <__aeabi_dcmpgt>
 800f250:	2800      	cmp	r0, #0
 800f252:	d0ea      	beq.n	800f22a <floor+0x42>
 800f254:	2c00      	cmp	r4, #0
 800f256:	bfbe      	ittt	lt
 800f258:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f25c:	fa43 f606 	asrlt.w	r6, r3, r6
 800f260:	19a4      	addlt	r4, r4, r6
 800f262:	2500      	movs	r5, #0
 800f264:	ea24 0408 	bic.w	r4, r4, r8
 800f268:	e7df      	b.n	800f22a <floor+0x42>
 800f26a:	2e33      	cmp	r6, #51	; 0x33
 800f26c:	dd0a      	ble.n	800f284 <floor+0x9c>
 800f26e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f272:	d103      	bne.n	800f27c <floor+0x94>
 800f274:	f7f0 ff9c 	bl	80001b0 <__adddf3>
 800f278:	4607      	mov	r7, r0
 800f27a:	460b      	mov	r3, r1
 800f27c:	4638      	mov	r0, r7
 800f27e:	4619      	mov	r1, r3
 800f280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f284:	f04f 32ff 	mov.w	r2, #4294967295
 800f288:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800f28c:	fa22 f808 	lsr.w	r8, r2, r8
 800f290:	ea18 0f00 	tst.w	r8, r0
 800f294:	d0f2      	beq.n	800f27c <floor+0x94>
 800f296:	a310      	add	r3, pc, #64	; (adr r3, 800f2d8 <floor+0xf0>)
 800f298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29c:	f7f0 ff88 	bl	80001b0 <__adddf3>
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	f7f1 fbca 	bl	8000a3c <__aeabi_dcmpgt>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d0be      	beq.n	800f22a <floor+0x42>
 800f2ac:	2c00      	cmp	r4, #0
 800f2ae:	da02      	bge.n	800f2b6 <floor+0xce>
 800f2b0:	2e14      	cmp	r6, #20
 800f2b2:	d103      	bne.n	800f2bc <floor+0xd4>
 800f2b4:	3401      	adds	r4, #1
 800f2b6:	ea25 0508 	bic.w	r5, r5, r8
 800f2ba:	e7b6      	b.n	800f22a <floor+0x42>
 800f2bc:	2301      	movs	r3, #1
 800f2be:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f2c2:	fa03 f606 	lsl.w	r6, r3, r6
 800f2c6:	4435      	add	r5, r6
 800f2c8:	42bd      	cmp	r5, r7
 800f2ca:	bf38      	it	cc
 800f2cc:	18e4      	addcc	r4, r4, r3
 800f2ce:	e7f2      	b.n	800f2b6 <floor+0xce>
 800f2d0:	2500      	movs	r5, #0
 800f2d2:	462c      	mov	r4, r5
 800f2d4:	e7a9      	b.n	800f22a <floor+0x42>
 800f2d6:	bf00      	nop
 800f2d8:	8800759c 	.word	0x8800759c
 800f2dc:	7e37e43c 	.word	0x7e37e43c
 800f2e0:	bff00000 	.word	0xbff00000
 800f2e4:	000fffff 	.word	0x000fffff

0800f2e8 <atof>:
 800f2e8:	2100      	movs	r1, #0
 800f2ea:	f001 bad5 	b.w	8010898 <strtod>
	...

0800f2f0 <__errno>:
 800f2f0:	4b01      	ldr	r3, [pc, #4]	; (800f2f8 <__errno+0x8>)
 800f2f2:	6818      	ldr	r0, [r3, #0]
 800f2f4:	4770      	bx	lr
 800f2f6:	bf00      	nop
 800f2f8:	2000093c 	.word	0x2000093c

0800f2fc <__libc_init_array>:
 800f2fc:	b570      	push	{r4, r5, r6, lr}
 800f2fe:	2600      	movs	r6, #0
 800f300:	4d0c      	ldr	r5, [pc, #48]	; (800f334 <__libc_init_array+0x38>)
 800f302:	4c0d      	ldr	r4, [pc, #52]	; (800f338 <__libc_init_array+0x3c>)
 800f304:	1b64      	subs	r4, r4, r5
 800f306:	10a4      	asrs	r4, r4, #2
 800f308:	42a6      	cmp	r6, r4
 800f30a:	d109      	bne.n	800f320 <__libc_init_array+0x24>
 800f30c:	f004 fa30 	bl	8013770 <_init>
 800f310:	2600      	movs	r6, #0
 800f312:	4d0a      	ldr	r5, [pc, #40]	; (800f33c <__libc_init_array+0x40>)
 800f314:	4c0a      	ldr	r4, [pc, #40]	; (800f340 <__libc_init_array+0x44>)
 800f316:	1b64      	subs	r4, r4, r5
 800f318:	10a4      	asrs	r4, r4, #2
 800f31a:	42a6      	cmp	r6, r4
 800f31c:	d105      	bne.n	800f32a <__libc_init_array+0x2e>
 800f31e:	bd70      	pop	{r4, r5, r6, pc}
 800f320:	f855 3b04 	ldr.w	r3, [r5], #4
 800f324:	4798      	blx	r3
 800f326:	3601      	adds	r6, #1
 800f328:	e7ee      	b.n	800f308 <__libc_init_array+0xc>
 800f32a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f32e:	4798      	blx	r3
 800f330:	3601      	adds	r6, #1
 800f332:	e7f2      	b.n	800f31a <__libc_init_array+0x1e>
 800f334:	08014008 	.word	0x08014008
 800f338:	08014008 	.word	0x08014008
 800f33c:	08014008 	.word	0x08014008
 800f340:	0801400c 	.word	0x0801400c

0800f344 <memcpy>:
 800f344:	440a      	add	r2, r1
 800f346:	4291      	cmp	r1, r2
 800f348:	f100 33ff 	add.w	r3, r0, #4294967295
 800f34c:	d100      	bne.n	800f350 <memcpy+0xc>
 800f34e:	4770      	bx	lr
 800f350:	b510      	push	{r4, lr}
 800f352:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f356:	4291      	cmp	r1, r2
 800f358:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f35c:	d1f9      	bne.n	800f352 <memcpy+0xe>
 800f35e:	bd10      	pop	{r4, pc}

0800f360 <memset>:
 800f360:	4603      	mov	r3, r0
 800f362:	4402      	add	r2, r0
 800f364:	4293      	cmp	r3, r2
 800f366:	d100      	bne.n	800f36a <memset+0xa>
 800f368:	4770      	bx	lr
 800f36a:	f803 1b01 	strb.w	r1, [r3], #1
 800f36e:	e7f9      	b.n	800f364 <memset+0x4>

0800f370 <__cvt>:
 800f370:	2b00      	cmp	r3, #0
 800f372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f376:	461f      	mov	r7, r3
 800f378:	bfbb      	ittet	lt
 800f37a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800f37e:	461f      	movlt	r7, r3
 800f380:	2300      	movge	r3, #0
 800f382:	232d      	movlt	r3, #45	; 0x2d
 800f384:	b088      	sub	sp, #32
 800f386:	4614      	mov	r4, r2
 800f388:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f38a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f38c:	7013      	strb	r3, [r2, #0]
 800f38e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f390:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800f394:	f023 0820 	bic.w	r8, r3, #32
 800f398:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f39c:	d005      	beq.n	800f3aa <__cvt+0x3a>
 800f39e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f3a2:	d100      	bne.n	800f3a6 <__cvt+0x36>
 800f3a4:	3501      	adds	r5, #1
 800f3a6:	2302      	movs	r3, #2
 800f3a8:	e000      	b.n	800f3ac <__cvt+0x3c>
 800f3aa:	2303      	movs	r3, #3
 800f3ac:	aa07      	add	r2, sp, #28
 800f3ae:	9204      	str	r2, [sp, #16]
 800f3b0:	aa06      	add	r2, sp, #24
 800f3b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800f3b6:	e9cd 3500 	strd	r3, r5, [sp]
 800f3ba:	4622      	mov	r2, r4
 800f3bc:	463b      	mov	r3, r7
 800f3be:	f001 fb7f 	bl	8010ac0 <_dtoa_r>
 800f3c2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f3c6:	4606      	mov	r6, r0
 800f3c8:	d102      	bne.n	800f3d0 <__cvt+0x60>
 800f3ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3cc:	07db      	lsls	r3, r3, #31
 800f3ce:	d522      	bpl.n	800f416 <__cvt+0xa6>
 800f3d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f3d4:	eb06 0905 	add.w	r9, r6, r5
 800f3d8:	d110      	bne.n	800f3fc <__cvt+0x8c>
 800f3da:	7833      	ldrb	r3, [r6, #0]
 800f3dc:	2b30      	cmp	r3, #48	; 0x30
 800f3de:	d10a      	bne.n	800f3f6 <__cvt+0x86>
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	4639      	mov	r1, r7
 800f3e8:	f7f1 fb00 	bl	80009ec <__aeabi_dcmpeq>
 800f3ec:	b918      	cbnz	r0, 800f3f6 <__cvt+0x86>
 800f3ee:	f1c5 0501 	rsb	r5, r5, #1
 800f3f2:	f8ca 5000 	str.w	r5, [sl]
 800f3f6:	f8da 3000 	ldr.w	r3, [sl]
 800f3fa:	4499      	add	r9, r3
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	2300      	movs	r3, #0
 800f400:	4620      	mov	r0, r4
 800f402:	4639      	mov	r1, r7
 800f404:	f7f1 faf2 	bl	80009ec <__aeabi_dcmpeq>
 800f408:	b108      	cbz	r0, 800f40e <__cvt+0x9e>
 800f40a:	f8cd 901c 	str.w	r9, [sp, #28]
 800f40e:	2230      	movs	r2, #48	; 0x30
 800f410:	9b07      	ldr	r3, [sp, #28]
 800f412:	454b      	cmp	r3, r9
 800f414:	d307      	bcc.n	800f426 <__cvt+0xb6>
 800f416:	4630      	mov	r0, r6
 800f418:	9b07      	ldr	r3, [sp, #28]
 800f41a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f41c:	1b9b      	subs	r3, r3, r6
 800f41e:	6013      	str	r3, [r2, #0]
 800f420:	b008      	add	sp, #32
 800f422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f426:	1c59      	adds	r1, r3, #1
 800f428:	9107      	str	r1, [sp, #28]
 800f42a:	701a      	strb	r2, [r3, #0]
 800f42c:	e7f0      	b.n	800f410 <__cvt+0xa0>

0800f42e <__exponent>:
 800f42e:	4603      	mov	r3, r0
 800f430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f432:	2900      	cmp	r1, #0
 800f434:	f803 2b02 	strb.w	r2, [r3], #2
 800f438:	bfb6      	itet	lt
 800f43a:	222d      	movlt	r2, #45	; 0x2d
 800f43c:	222b      	movge	r2, #43	; 0x2b
 800f43e:	4249      	neglt	r1, r1
 800f440:	2909      	cmp	r1, #9
 800f442:	7042      	strb	r2, [r0, #1]
 800f444:	dd2b      	ble.n	800f49e <__exponent+0x70>
 800f446:	f10d 0407 	add.w	r4, sp, #7
 800f44a:	46a4      	mov	ip, r4
 800f44c:	270a      	movs	r7, #10
 800f44e:	fb91 f6f7 	sdiv	r6, r1, r7
 800f452:	460a      	mov	r2, r1
 800f454:	46a6      	mov	lr, r4
 800f456:	fb07 1516 	mls	r5, r7, r6, r1
 800f45a:	2a63      	cmp	r2, #99	; 0x63
 800f45c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800f460:	4631      	mov	r1, r6
 800f462:	f104 34ff 	add.w	r4, r4, #4294967295
 800f466:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f46a:	dcf0      	bgt.n	800f44e <__exponent+0x20>
 800f46c:	3130      	adds	r1, #48	; 0x30
 800f46e:	f1ae 0502 	sub.w	r5, lr, #2
 800f472:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f476:	4629      	mov	r1, r5
 800f478:	1c44      	adds	r4, r0, #1
 800f47a:	4561      	cmp	r1, ip
 800f47c:	d30a      	bcc.n	800f494 <__exponent+0x66>
 800f47e:	f10d 0209 	add.w	r2, sp, #9
 800f482:	eba2 020e 	sub.w	r2, r2, lr
 800f486:	4565      	cmp	r5, ip
 800f488:	bf88      	it	hi
 800f48a:	2200      	movhi	r2, #0
 800f48c:	4413      	add	r3, r2
 800f48e:	1a18      	subs	r0, r3, r0
 800f490:	b003      	add	sp, #12
 800f492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f494:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f498:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f49c:	e7ed      	b.n	800f47a <__exponent+0x4c>
 800f49e:	2330      	movs	r3, #48	; 0x30
 800f4a0:	3130      	adds	r1, #48	; 0x30
 800f4a2:	7083      	strb	r3, [r0, #2]
 800f4a4:	70c1      	strb	r1, [r0, #3]
 800f4a6:	1d03      	adds	r3, r0, #4
 800f4a8:	e7f1      	b.n	800f48e <__exponent+0x60>
	...

0800f4ac <_printf_float>:
 800f4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b0:	b091      	sub	sp, #68	; 0x44
 800f4b2:	460c      	mov	r4, r1
 800f4b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800f4b8:	4616      	mov	r6, r2
 800f4ba:	461f      	mov	r7, r3
 800f4bc:	4605      	mov	r5, r0
 800f4be:	f002 fc65 	bl	8011d8c <_localeconv_r>
 800f4c2:	6803      	ldr	r3, [r0, #0]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f4c8:	f7f0 fe64 	bl	8000194 <strlen>
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	930e      	str	r3, [sp, #56]	; 0x38
 800f4d0:	f8d8 3000 	ldr.w	r3, [r8]
 800f4d4:	900a      	str	r0, [sp, #40]	; 0x28
 800f4d6:	3307      	adds	r3, #7
 800f4d8:	f023 0307 	bic.w	r3, r3, #7
 800f4dc:	f103 0208 	add.w	r2, r3, #8
 800f4e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f4e4:	f8d4 b000 	ldr.w	fp, [r4]
 800f4e8:	f8c8 2000 	str.w	r2, [r8]
 800f4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f4f4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800f4f8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800f4fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f502:	4640      	mov	r0, r8
 800f504:	4b9c      	ldr	r3, [pc, #624]	; (800f778 <_printf_float+0x2cc>)
 800f506:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f508:	f7f1 faa2 	bl	8000a50 <__aeabi_dcmpun>
 800f50c:	bb70      	cbnz	r0, 800f56c <_printf_float+0xc0>
 800f50e:	f04f 32ff 	mov.w	r2, #4294967295
 800f512:	4640      	mov	r0, r8
 800f514:	4b98      	ldr	r3, [pc, #608]	; (800f778 <_printf_float+0x2cc>)
 800f516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f518:	f7f1 fa7c 	bl	8000a14 <__aeabi_dcmple>
 800f51c:	bb30      	cbnz	r0, 800f56c <_printf_float+0xc0>
 800f51e:	2200      	movs	r2, #0
 800f520:	2300      	movs	r3, #0
 800f522:	4640      	mov	r0, r8
 800f524:	4651      	mov	r1, sl
 800f526:	f7f1 fa6b 	bl	8000a00 <__aeabi_dcmplt>
 800f52a:	b110      	cbz	r0, 800f532 <_printf_float+0x86>
 800f52c:	232d      	movs	r3, #45	; 0x2d
 800f52e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f532:	4b92      	ldr	r3, [pc, #584]	; (800f77c <_printf_float+0x2d0>)
 800f534:	4892      	ldr	r0, [pc, #584]	; (800f780 <_printf_float+0x2d4>)
 800f536:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f53a:	bf94      	ite	ls
 800f53c:	4698      	movls	r8, r3
 800f53e:	4680      	movhi	r8, r0
 800f540:	2303      	movs	r3, #3
 800f542:	f04f 0a00 	mov.w	sl, #0
 800f546:	6123      	str	r3, [r4, #16]
 800f548:	f02b 0304 	bic.w	r3, fp, #4
 800f54c:	6023      	str	r3, [r4, #0]
 800f54e:	4633      	mov	r3, r6
 800f550:	4621      	mov	r1, r4
 800f552:	4628      	mov	r0, r5
 800f554:	9700      	str	r7, [sp, #0]
 800f556:	aa0f      	add	r2, sp, #60	; 0x3c
 800f558:	f000 f9d4 	bl	800f904 <_printf_common>
 800f55c:	3001      	adds	r0, #1
 800f55e:	f040 8090 	bne.w	800f682 <_printf_float+0x1d6>
 800f562:	f04f 30ff 	mov.w	r0, #4294967295
 800f566:	b011      	add	sp, #68	; 0x44
 800f568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56c:	4642      	mov	r2, r8
 800f56e:	4653      	mov	r3, sl
 800f570:	4640      	mov	r0, r8
 800f572:	4651      	mov	r1, sl
 800f574:	f7f1 fa6c 	bl	8000a50 <__aeabi_dcmpun>
 800f578:	b148      	cbz	r0, 800f58e <_printf_float+0xe2>
 800f57a:	f1ba 0f00 	cmp.w	sl, #0
 800f57e:	bfb8      	it	lt
 800f580:	232d      	movlt	r3, #45	; 0x2d
 800f582:	4880      	ldr	r0, [pc, #512]	; (800f784 <_printf_float+0x2d8>)
 800f584:	bfb8      	it	lt
 800f586:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f58a:	4b7f      	ldr	r3, [pc, #508]	; (800f788 <_printf_float+0x2dc>)
 800f58c:	e7d3      	b.n	800f536 <_printf_float+0x8a>
 800f58e:	6863      	ldr	r3, [r4, #4]
 800f590:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f594:	1c5a      	adds	r2, r3, #1
 800f596:	d142      	bne.n	800f61e <_printf_float+0x172>
 800f598:	2306      	movs	r3, #6
 800f59a:	6063      	str	r3, [r4, #4]
 800f59c:	2200      	movs	r2, #0
 800f59e:	9206      	str	r2, [sp, #24]
 800f5a0:	aa0e      	add	r2, sp, #56	; 0x38
 800f5a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800f5a6:	aa0d      	add	r2, sp, #52	; 0x34
 800f5a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800f5ac:	9203      	str	r2, [sp, #12]
 800f5ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800f5b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f5b6:	6023      	str	r3, [r4, #0]
 800f5b8:	6863      	ldr	r3, [r4, #4]
 800f5ba:	4642      	mov	r2, r8
 800f5bc:	9300      	str	r3, [sp, #0]
 800f5be:	4628      	mov	r0, r5
 800f5c0:	4653      	mov	r3, sl
 800f5c2:	910b      	str	r1, [sp, #44]	; 0x2c
 800f5c4:	f7ff fed4 	bl	800f370 <__cvt>
 800f5c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5ca:	4680      	mov	r8, r0
 800f5cc:	2947      	cmp	r1, #71	; 0x47
 800f5ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f5d0:	d108      	bne.n	800f5e4 <_printf_float+0x138>
 800f5d2:	1cc8      	adds	r0, r1, #3
 800f5d4:	db02      	blt.n	800f5dc <_printf_float+0x130>
 800f5d6:	6863      	ldr	r3, [r4, #4]
 800f5d8:	4299      	cmp	r1, r3
 800f5da:	dd40      	ble.n	800f65e <_printf_float+0x1b2>
 800f5dc:	f1a9 0902 	sub.w	r9, r9, #2
 800f5e0:	fa5f f989 	uxtb.w	r9, r9
 800f5e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f5e8:	d81f      	bhi.n	800f62a <_printf_float+0x17e>
 800f5ea:	464a      	mov	r2, r9
 800f5ec:	3901      	subs	r1, #1
 800f5ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f5f2:	910d      	str	r1, [sp, #52]	; 0x34
 800f5f4:	f7ff ff1b 	bl	800f42e <__exponent>
 800f5f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5fa:	4682      	mov	sl, r0
 800f5fc:	1813      	adds	r3, r2, r0
 800f5fe:	2a01      	cmp	r2, #1
 800f600:	6123      	str	r3, [r4, #16]
 800f602:	dc02      	bgt.n	800f60a <_printf_float+0x15e>
 800f604:	6822      	ldr	r2, [r4, #0]
 800f606:	07d2      	lsls	r2, r2, #31
 800f608:	d501      	bpl.n	800f60e <_printf_float+0x162>
 800f60a:	3301      	adds	r3, #1
 800f60c:	6123      	str	r3, [r4, #16]
 800f60e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f612:	2b00      	cmp	r3, #0
 800f614:	d09b      	beq.n	800f54e <_printf_float+0xa2>
 800f616:	232d      	movs	r3, #45	; 0x2d
 800f618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f61c:	e797      	b.n	800f54e <_printf_float+0xa2>
 800f61e:	2947      	cmp	r1, #71	; 0x47
 800f620:	d1bc      	bne.n	800f59c <_printf_float+0xf0>
 800f622:	2b00      	cmp	r3, #0
 800f624:	d1ba      	bne.n	800f59c <_printf_float+0xf0>
 800f626:	2301      	movs	r3, #1
 800f628:	e7b7      	b.n	800f59a <_printf_float+0xee>
 800f62a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f62e:	d118      	bne.n	800f662 <_printf_float+0x1b6>
 800f630:	2900      	cmp	r1, #0
 800f632:	6863      	ldr	r3, [r4, #4]
 800f634:	dd0b      	ble.n	800f64e <_printf_float+0x1a2>
 800f636:	6121      	str	r1, [r4, #16]
 800f638:	b913      	cbnz	r3, 800f640 <_printf_float+0x194>
 800f63a:	6822      	ldr	r2, [r4, #0]
 800f63c:	07d0      	lsls	r0, r2, #31
 800f63e:	d502      	bpl.n	800f646 <_printf_float+0x19a>
 800f640:	3301      	adds	r3, #1
 800f642:	440b      	add	r3, r1
 800f644:	6123      	str	r3, [r4, #16]
 800f646:	f04f 0a00 	mov.w	sl, #0
 800f64a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f64c:	e7df      	b.n	800f60e <_printf_float+0x162>
 800f64e:	b913      	cbnz	r3, 800f656 <_printf_float+0x1aa>
 800f650:	6822      	ldr	r2, [r4, #0]
 800f652:	07d2      	lsls	r2, r2, #31
 800f654:	d501      	bpl.n	800f65a <_printf_float+0x1ae>
 800f656:	3302      	adds	r3, #2
 800f658:	e7f4      	b.n	800f644 <_printf_float+0x198>
 800f65a:	2301      	movs	r3, #1
 800f65c:	e7f2      	b.n	800f644 <_printf_float+0x198>
 800f65e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f664:	4299      	cmp	r1, r3
 800f666:	db05      	blt.n	800f674 <_printf_float+0x1c8>
 800f668:	6823      	ldr	r3, [r4, #0]
 800f66a:	6121      	str	r1, [r4, #16]
 800f66c:	07d8      	lsls	r0, r3, #31
 800f66e:	d5ea      	bpl.n	800f646 <_printf_float+0x19a>
 800f670:	1c4b      	adds	r3, r1, #1
 800f672:	e7e7      	b.n	800f644 <_printf_float+0x198>
 800f674:	2900      	cmp	r1, #0
 800f676:	bfcc      	ite	gt
 800f678:	2201      	movgt	r2, #1
 800f67a:	f1c1 0202 	rsble	r2, r1, #2
 800f67e:	4413      	add	r3, r2
 800f680:	e7e0      	b.n	800f644 <_printf_float+0x198>
 800f682:	6823      	ldr	r3, [r4, #0]
 800f684:	055a      	lsls	r2, r3, #21
 800f686:	d407      	bmi.n	800f698 <_printf_float+0x1ec>
 800f688:	6923      	ldr	r3, [r4, #16]
 800f68a:	4642      	mov	r2, r8
 800f68c:	4631      	mov	r1, r6
 800f68e:	4628      	mov	r0, r5
 800f690:	47b8      	blx	r7
 800f692:	3001      	adds	r0, #1
 800f694:	d12b      	bne.n	800f6ee <_printf_float+0x242>
 800f696:	e764      	b.n	800f562 <_printf_float+0xb6>
 800f698:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f69c:	f240 80dd 	bls.w	800f85a <_printf_float+0x3ae>
 800f6a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	f7f1 f9a0 	bl	80009ec <__aeabi_dcmpeq>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	d033      	beq.n	800f718 <_printf_float+0x26c>
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	4631      	mov	r1, r6
 800f6b4:	4628      	mov	r0, r5
 800f6b6:	4a35      	ldr	r2, [pc, #212]	; (800f78c <_printf_float+0x2e0>)
 800f6b8:	47b8      	blx	r7
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	f43f af51 	beq.w	800f562 <_printf_float+0xb6>
 800f6c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	db02      	blt.n	800f6ce <_printf_float+0x222>
 800f6c8:	6823      	ldr	r3, [r4, #0]
 800f6ca:	07d8      	lsls	r0, r3, #31
 800f6cc:	d50f      	bpl.n	800f6ee <_printf_float+0x242>
 800f6ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6d2:	4631      	mov	r1, r6
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	47b8      	blx	r7
 800f6d8:	3001      	adds	r0, #1
 800f6da:	f43f af42 	beq.w	800f562 <_printf_float+0xb6>
 800f6de:	f04f 0800 	mov.w	r8, #0
 800f6e2:	f104 091a 	add.w	r9, r4, #26
 800f6e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	4543      	cmp	r3, r8
 800f6ec:	dc09      	bgt.n	800f702 <_printf_float+0x256>
 800f6ee:	6823      	ldr	r3, [r4, #0]
 800f6f0:	079b      	lsls	r3, r3, #30
 800f6f2:	f100 8102 	bmi.w	800f8fa <_printf_float+0x44e>
 800f6f6:	68e0      	ldr	r0, [r4, #12]
 800f6f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6fa:	4298      	cmp	r0, r3
 800f6fc:	bfb8      	it	lt
 800f6fe:	4618      	movlt	r0, r3
 800f700:	e731      	b.n	800f566 <_printf_float+0xba>
 800f702:	2301      	movs	r3, #1
 800f704:	464a      	mov	r2, r9
 800f706:	4631      	mov	r1, r6
 800f708:	4628      	mov	r0, r5
 800f70a:	47b8      	blx	r7
 800f70c:	3001      	adds	r0, #1
 800f70e:	f43f af28 	beq.w	800f562 <_printf_float+0xb6>
 800f712:	f108 0801 	add.w	r8, r8, #1
 800f716:	e7e6      	b.n	800f6e6 <_printf_float+0x23a>
 800f718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	dc38      	bgt.n	800f790 <_printf_float+0x2e4>
 800f71e:	2301      	movs	r3, #1
 800f720:	4631      	mov	r1, r6
 800f722:	4628      	mov	r0, r5
 800f724:	4a19      	ldr	r2, [pc, #100]	; (800f78c <_printf_float+0x2e0>)
 800f726:	47b8      	blx	r7
 800f728:	3001      	adds	r0, #1
 800f72a:	f43f af1a 	beq.w	800f562 <_printf_float+0xb6>
 800f72e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f732:	4313      	orrs	r3, r2
 800f734:	d102      	bne.n	800f73c <_printf_float+0x290>
 800f736:	6823      	ldr	r3, [r4, #0]
 800f738:	07d9      	lsls	r1, r3, #31
 800f73a:	d5d8      	bpl.n	800f6ee <_printf_float+0x242>
 800f73c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f740:	4631      	mov	r1, r6
 800f742:	4628      	mov	r0, r5
 800f744:	47b8      	blx	r7
 800f746:	3001      	adds	r0, #1
 800f748:	f43f af0b 	beq.w	800f562 <_printf_float+0xb6>
 800f74c:	f04f 0900 	mov.w	r9, #0
 800f750:	f104 0a1a 	add.w	sl, r4, #26
 800f754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f756:	425b      	negs	r3, r3
 800f758:	454b      	cmp	r3, r9
 800f75a:	dc01      	bgt.n	800f760 <_printf_float+0x2b4>
 800f75c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f75e:	e794      	b.n	800f68a <_printf_float+0x1de>
 800f760:	2301      	movs	r3, #1
 800f762:	4652      	mov	r2, sl
 800f764:	4631      	mov	r1, r6
 800f766:	4628      	mov	r0, r5
 800f768:	47b8      	blx	r7
 800f76a:	3001      	adds	r0, #1
 800f76c:	f43f aef9 	beq.w	800f562 <_printf_float+0xb6>
 800f770:	f109 0901 	add.w	r9, r9, #1
 800f774:	e7ee      	b.n	800f754 <_printf_float+0x2a8>
 800f776:	bf00      	nop
 800f778:	7fefffff 	.word	0x7fefffff
 800f77c:	08013b08 	.word	0x08013b08
 800f780:	08013b0c 	.word	0x08013b0c
 800f784:	08013b14 	.word	0x08013b14
 800f788:	08013b10 	.word	0x08013b10
 800f78c:	08013b18 	.word	0x08013b18
 800f790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f792:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f794:	429a      	cmp	r2, r3
 800f796:	bfa8      	it	ge
 800f798:	461a      	movge	r2, r3
 800f79a:	2a00      	cmp	r2, #0
 800f79c:	4691      	mov	r9, r2
 800f79e:	dc37      	bgt.n	800f810 <_printf_float+0x364>
 800f7a0:	f04f 0b00 	mov.w	fp, #0
 800f7a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7a8:	f104 021a 	add.w	r2, r4, #26
 800f7ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f7b0:	ebaa 0309 	sub.w	r3, sl, r9
 800f7b4:	455b      	cmp	r3, fp
 800f7b6:	dc33      	bgt.n	800f820 <_printf_float+0x374>
 800f7b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	db3b      	blt.n	800f838 <_printf_float+0x38c>
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	07da      	lsls	r2, r3, #31
 800f7c4:	d438      	bmi.n	800f838 <_printf_float+0x38c>
 800f7c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f7ca:	eba3 020a 	sub.w	r2, r3, sl
 800f7ce:	eba3 0901 	sub.w	r9, r3, r1
 800f7d2:	4591      	cmp	r9, r2
 800f7d4:	bfa8      	it	ge
 800f7d6:	4691      	movge	r9, r2
 800f7d8:	f1b9 0f00 	cmp.w	r9, #0
 800f7dc:	dc34      	bgt.n	800f848 <_printf_float+0x39c>
 800f7de:	f04f 0800 	mov.w	r8, #0
 800f7e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7e6:	f104 0a1a 	add.w	sl, r4, #26
 800f7ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f7ee:	1a9b      	subs	r3, r3, r2
 800f7f0:	eba3 0309 	sub.w	r3, r3, r9
 800f7f4:	4543      	cmp	r3, r8
 800f7f6:	f77f af7a 	ble.w	800f6ee <_printf_float+0x242>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	4652      	mov	r2, sl
 800f7fe:	4631      	mov	r1, r6
 800f800:	4628      	mov	r0, r5
 800f802:	47b8      	blx	r7
 800f804:	3001      	adds	r0, #1
 800f806:	f43f aeac 	beq.w	800f562 <_printf_float+0xb6>
 800f80a:	f108 0801 	add.w	r8, r8, #1
 800f80e:	e7ec      	b.n	800f7ea <_printf_float+0x33e>
 800f810:	4613      	mov	r3, r2
 800f812:	4631      	mov	r1, r6
 800f814:	4642      	mov	r2, r8
 800f816:	4628      	mov	r0, r5
 800f818:	47b8      	blx	r7
 800f81a:	3001      	adds	r0, #1
 800f81c:	d1c0      	bne.n	800f7a0 <_printf_float+0x2f4>
 800f81e:	e6a0      	b.n	800f562 <_printf_float+0xb6>
 800f820:	2301      	movs	r3, #1
 800f822:	4631      	mov	r1, r6
 800f824:	4628      	mov	r0, r5
 800f826:	920b      	str	r2, [sp, #44]	; 0x2c
 800f828:	47b8      	blx	r7
 800f82a:	3001      	adds	r0, #1
 800f82c:	f43f ae99 	beq.w	800f562 <_printf_float+0xb6>
 800f830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f832:	f10b 0b01 	add.w	fp, fp, #1
 800f836:	e7b9      	b.n	800f7ac <_printf_float+0x300>
 800f838:	4631      	mov	r1, r6
 800f83a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f83e:	4628      	mov	r0, r5
 800f840:	47b8      	blx	r7
 800f842:	3001      	adds	r0, #1
 800f844:	d1bf      	bne.n	800f7c6 <_printf_float+0x31a>
 800f846:	e68c      	b.n	800f562 <_printf_float+0xb6>
 800f848:	464b      	mov	r3, r9
 800f84a:	4631      	mov	r1, r6
 800f84c:	4628      	mov	r0, r5
 800f84e:	eb08 020a 	add.w	r2, r8, sl
 800f852:	47b8      	blx	r7
 800f854:	3001      	adds	r0, #1
 800f856:	d1c2      	bne.n	800f7de <_printf_float+0x332>
 800f858:	e683      	b.n	800f562 <_printf_float+0xb6>
 800f85a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f85c:	2a01      	cmp	r2, #1
 800f85e:	dc01      	bgt.n	800f864 <_printf_float+0x3b8>
 800f860:	07db      	lsls	r3, r3, #31
 800f862:	d537      	bpl.n	800f8d4 <_printf_float+0x428>
 800f864:	2301      	movs	r3, #1
 800f866:	4642      	mov	r2, r8
 800f868:	4631      	mov	r1, r6
 800f86a:	4628      	mov	r0, r5
 800f86c:	47b8      	blx	r7
 800f86e:	3001      	adds	r0, #1
 800f870:	f43f ae77 	beq.w	800f562 <_printf_float+0xb6>
 800f874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f878:	4631      	mov	r1, r6
 800f87a:	4628      	mov	r0, r5
 800f87c:	47b8      	blx	r7
 800f87e:	3001      	adds	r0, #1
 800f880:	f43f ae6f 	beq.w	800f562 <_printf_float+0xb6>
 800f884:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f888:	2200      	movs	r2, #0
 800f88a:	2300      	movs	r3, #0
 800f88c:	f7f1 f8ae 	bl	80009ec <__aeabi_dcmpeq>
 800f890:	b9d8      	cbnz	r0, 800f8ca <_printf_float+0x41e>
 800f892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f894:	f108 0201 	add.w	r2, r8, #1
 800f898:	3b01      	subs	r3, #1
 800f89a:	4631      	mov	r1, r6
 800f89c:	4628      	mov	r0, r5
 800f89e:	47b8      	blx	r7
 800f8a0:	3001      	adds	r0, #1
 800f8a2:	d10e      	bne.n	800f8c2 <_printf_float+0x416>
 800f8a4:	e65d      	b.n	800f562 <_printf_float+0xb6>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	464a      	mov	r2, r9
 800f8aa:	4631      	mov	r1, r6
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	47b8      	blx	r7
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	f43f ae56 	beq.w	800f562 <_printf_float+0xb6>
 800f8b6:	f108 0801 	add.w	r8, r8, #1
 800f8ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8bc:	3b01      	subs	r3, #1
 800f8be:	4543      	cmp	r3, r8
 800f8c0:	dcf1      	bgt.n	800f8a6 <_printf_float+0x3fa>
 800f8c2:	4653      	mov	r3, sl
 800f8c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f8c8:	e6e0      	b.n	800f68c <_printf_float+0x1e0>
 800f8ca:	f04f 0800 	mov.w	r8, #0
 800f8ce:	f104 091a 	add.w	r9, r4, #26
 800f8d2:	e7f2      	b.n	800f8ba <_printf_float+0x40e>
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	4642      	mov	r2, r8
 800f8d8:	e7df      	b.n	800f89a <_printf_float+0x3ee>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	464a      	mov	r2, r9
 800f8de:	4631      	mov	r1, r6
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	47b8      	blx	r7
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	f43f ae3c 	beq.w	800f562 <_printf_float+0xb6>
 800f8ea:	f108 0801 	add.w	r8, r8, #1
 800f8ee:	68e3      	ldr	r3, [r4, #12]
 800f8f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f8f2:	1a5b      	subs	r3, r3, r1
 800f8f4:	4543      	cmp	r3, r8
 800f8f6:	dcf0      	bgt.n	800f8da <_printf_float+0x42e>
 800f8f8:	e6fd      	b.n	800f6f6 <_printf_float+0x24a>
 800f8fa:	f04f 0800 	mov.w	r8, #0
 800f8fe:	f104 0919 	add.w	r9, r4, #25
 800f902:	e7f4      	b.n	800f8ee <_printf_float+0x442>

0800f904 <_printf_common>:
 800f904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f908:	4616      	mov	r6, r2
 800f90a:	4699      	mov	r9, r3
 800f90c:	688a      	ldr	r2, [r1, #8]
 800f90e:	690b      	ldr	r3, [r1, #16]
 800f910:	4607      	mov	r7, r0
 800f912:	4293      	cmp	r3, r2
 800f914:	bfb8      	it	lt
 800f916:	4613      	movlt	r3, r2
 800f918:	6033      	str	r3, [r6, #0]
 800f91a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f91e:	460c      	mov	r4, r1
 800f920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f924:	b10a      	cbz	r2, 800f92a <_printf_common+0x26>
 800f926:	3301      	adds	r3, #1
 800f928:	6033      	str	r3, [r6, #0]
 800f92a:	6823      	ldr	r3, [r4, #0]
 800f92c:	0699      	lsls	r1, r3, #26
 800f92e:	bf42      	ittt	mi
 800f930:	6833      	ldrmi	r3, [r6, #0]
 800f932:	3302      	addmi	r3, #2
 800f934:	6033      	strmi	r3, [r6, #0]
 800f936:	6825      	ldr	r5, [r4, #0]
 800f938:	f015 0506 	ands.w	r5, r5, #6
 800f93c:	d106      	bne.n	800f94c <_printf_common+0x48>
 800f93e:	f104 0a19 	add.w	sl, r4, #25
 800f942:	68e3      	ldr	r3, [r4, #12]
 800f944:	6832      	ldr	r2, [r6, #0]
 800f946:	1a9b      	subs	r3, r3, r2
 800f948:	42ab      	cmp	r3, r5
 800f94a:	dc28      	bgt.n	800f99e <_printf_common+0x9a>
 800f94c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f950:	1e13      	subs	r3, r2, #0
 800f952:	6822      	ldr	r2, [r4, #0]
 800f954:	bf18      	it	ne
 800f956:	2301      	movne	r3, #1
 800f958:	0692      	lsls	r2, r2, #26
 800f95a:	d42d      	bmi.n	800f9b8 <_printf_common+0xb4>
 800f95c:	4649      	mov	r1, r9
 800f95e:	4638      	mov	r0, r7
 800f960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f964:	47c0      	blx	r8
 800f966:	3001      	adds	r0, #1
 800f968:	d020      	beq.n	800f9ac <_printf_common+0xa8>
 800f96a:	6823      	ldr	r3, [r4, #0]
 800f96c:	68e5      	ldr	r5, [r4, #12]
 800f96e:	f003 0306 	and.w	r3, r3, #6
 800f972:	2b04      	cmp	r3, #4
 800f974:	bf18      	it	ne
 800f976:	2500      	movne	r5, #0
 800f978:	6832      	ldr	r2, [r6, #0]
 800f97a:	f04f 0600 	mov.w	r6, #0
 800f97e:	68a3      	ldr	r3, [r4, #8]
 800f980:	bf08      	it	eq
 800f982:	1aad      	subeq	r5, r5, r2
 800f984:	6922      	ldr	r2, [r4, #16]
 800f986:	bf08      	it	eq
 800f988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f98c:	4293      	cmp	r3, r2
 800f98e:	bfc4      	itt	gt
 800f990:	1a9b      	subgt	r3, r3, r2
 800f992:	18ed      	addgt	r5, r5, r3
 800f994:	341a      	adds	r4, #26
 800f996:	42b5      	cmp	r5, r6
 800f998:	d11a      	bne.n	800f9d0 <_printf_common+0xcc>
 800f99a:	2000      	movs	r0, #0
 800f99c:	e008      	b.n	800f9b0 <_printf_common+0xac>
 800f99e:	2301      	movs	r3, #1
 800f9a0:	4652      	mov	r2, sl
 800f9a2:	4649      	mov	r1, r9
 800f9a4:	4638      	mov	r0, r7
 800f9a6:	47c0      	blx	r8
 800f9a8:	3001      	adds	r0, #1
 800f9aa:	d103      	bne.n	800f9b4 <_printf_common+0xb0>
 800f9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9b4:	3501      	adds	r5, #1
 800f9b6:	e7c4      	b.n	800f942 <_printf_common+0x3e>
 800f9b8:	2030      	movs	r0, #48	; 0x30
 800f9ba:	18e1      	adds	r1, r4, r3
 800f9bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f9c0:	1c5a      	adds	r2, r3, #1
 800f9c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f9c6:	4422      	add	r2, r4
 800f9c8:	3302      	adds	r3, #2
 800f9ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9ce:	e7c5      	b.n	800f95c <_printf_common+0x58>
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	4622      	mov	r2, r4
 800f9d4:	4649      	mov	r1, r9
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	47c0      	blx	r8
 800f9da:	3001      	adds	r0, #1
 800f9dc:	d0e6      	beq.n	800f9ac <_printf_common+0xa8>
 800f9de:	3601      	adds	r6, #1
 800f9e0:	e7d9      	b.n	800f996 <_printf_common+0x92>
	...

0800f9e4 <_printf_i>:
 800f9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f9e8:	7e0f      	ldrb	r7, [r1, #24]
 800f9ea:	4691      	mov	r9, r2
 800f9ec:	2f78      	cmp	r7, #120	; 0x78
 800f9ee:	4680      	mov	r8, r0
 800f9f0:	460c      	mov	r4, r1
 800f9f2:	469a      	mov	sl, r3
 800f9f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f9f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f9fa:	d807      	bhi.n	800fa0c <_printf_i+0x28>
 800f9fc:	2f62      	cmp	r7, #98	; 0x62
 800f9fe:	d80a      	bhi.n	800fa16 <_printf_i+0x32>
 800fa00:	2f00      	cmp	r7, #0
 800fa02:	f000 80d9 	beq.w	800fbb8 <_printf_i+0x1d4>
 800fa06:	2f58      	cmp	r7, #88	; 0x58
 800fa08:	f000 80a4 	beq.w	800fb54 <_printf_i+0x170>
 800fa0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa14:	e03a      	b.n	800fa8c <_printf_i+0xa8>
 800fa16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa1a:	2b15      	cmp	r3, #21
 800fa1c:	d8f6      	bhi.n	800fa0c <_printf_i+0x28>
 800fa1e:	a101      	add	r1, pc, #4	; (adr r1, 800fa24 <_printf_i+0x40>)
 800fa20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa24:	0800fa7d 	.word	0x0800fa7d
 800fa28:	0800fa91 	.word	0x0800fa91
 800fa2c:	0800fa0d 	.word	0x0800fa0d
 800fa30:	0800fa0d 	.word	0x0800fa0d
 800fa34:	0800fa0d 	.word	0x0800fa0d
 800fa38:	0800fa0d 	.word	0x0800fa0d
 800fa3c:	0800fa91 	.word	0x0800fa91
 800fa40:	0800fa0d 	.word	0x0800fa0d
 800fa44:	0800fa0d 	.word	0x0800fa0d
 800fa48:	0800fa0d 	.word	0x0800fa0d
 800fa4c:	0800fa0d 	.word	0x0800fa0d
 800fa50:	0800fb9f 	.word	0x0800fb9f
 800fa54:	0800fac1 	.word	0x0800fac1
 800fa58:	0800fb81 	.word	0x0800fb81
 800fa5c:	0800fa0d 	.word	0x0800fa0d
 800fa60:	0800fa0d 	.word	0x0800fa0d
 800fa64:	0800fbc1 	.word	0x0800fbc1
 800fa68:	0800fa0d 	.word	0x0800fa0d
 800fa6c:	0800fac1 	.word	0x0800fac1
 800fa70:	0800fa0d 	.word	0x0800fa0d
 800fa74:	0800fa0d 	.word	0x0800fa0d
 800fa78:	0800fb89 	.word	0x0800fb89
 800fa7c:	682b      	ldr	r3, [r5, #0]
 800fa7e:	1d1a      	adds	r2, r3, #4
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	602a      	str	r2, [r5, #0]
 800fa84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	e0a4      	b.n	800fbda <_printf_i+0x1f6>
 800fa90:	6820      	ldr	r0, [r4, #0]
 800fa92:	6829      	ldr	r1, [r5, #0]
 800fa94:	0606      	lsls	r6, r0, #24
 800fa96:	f101 0304 	add.w	r3, r1, #4
 800fa9a:	d50a      	bpl.n	800fab2 <_printf_i+0xce>
 800fa9c:	680e      	ldr	r6, [r1, #0]
 800fa9e:	602b      	str	r3, [r5, #0]
 800faa0:	2e00      	cmp	r6, #0
 800faa2:	da03      	bge.n	800faac <_printf_i+0xc8>
 800faa4:	232d      	movs	r3, #45	; 0x2d
 800faa6:	4276      	negs	r6, r6
 800faa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800faac:	230a      	movs	r3, #10
 800faae:	485e      	ldr	r0, [pc, #376]	; (800fc28 <_printf_i+0x244>)
 800fab0:	e019      	b.n	800fae6 <_printf_i+0x102>
 800fab2:	680e      	ldr	r6, [r1, #0]
 800fab4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fab8:	602b      	str	r3, [r5, #0]
 800faba:	bf18      	it	ne
 800fabc:	b236      	sxthne	r6, r6
 800fabe:	e7ef      	b.n	800faa0 <_printf_i+0xbc>
 800fac0:	682b      	ldr	r3, [r5, #0]
 800fac2:	6820      	ldr	r0, [r4, #0]
 800fac4:	1d19      	adds	r1, r3, #4
 800fac6:	6029      	str	r1, [r5, #0]
 800fac8:	0601      	lsls	r1, r0, #24
 800faca:	d501      	bpl.n	800fad0 <_printf_i+0xec>
 800facc:	681e      	ldr	r6, [r3, #0]
 800face:	e002      	b.n	800fad6 <_printf_i+0xf2>
 800fad0:	0646      	lsls	r6, r0, #25
 800fad2:	d5fb      	bpl.n	800facc <_printf_i+0xe8>
 800fad4:	881e      	ldrh	r6, [r3, #0]
 800fad6:	2f6f      	cmp	r7, #111	; 0x6f
 800fad8:	bf0c      	ite	eq
 800fada:	2308      	moveq	r3, #8
 800fadc:	230a      	movne	r3, #10
 800fade:	4852      	ldr	r0, [pc, #328]	; (800fc28 <_printf_i+0x244>)
 800fae0:	2100      	movs	r1, #0
 800fae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fae6:	6865      	ldr	r5, [r4, #4]
 800fae8:	2d00      	cmp	r5, #0
 800faea:	bfa8      	it	ge
 800faec:	6821      	ldrge	r1, [r4, #0]
 800faee:	60a5      	str	r5, [r4, #8]
 800faf0:	bfa4      	itt	ge
 800faf2:	f021 0104 	bicge.w	r1, r1, #4
 800faf6:	6021      	strge	r1, [r4, #0]
 800faf8:	b90e      	cbnz	r6, 800fafe <_printf_i+0x11a>
 800fafa:	2d00      	cmp	r5, #0
 800fafc:	d04d      	beq.n	800fb9a <_printf_i+0x1b6>
 800fafe:	4615      	mov	r5, r2
 800fb00:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb04:	fb03 6711 	mls	r7, r3, r1, r6
 800fb08:	5dc7      	ldrb	r7, [r0, r7]
 800fb0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb0e:	4637      	mov	r7, r6
 800fb10:	42bb      	cmp	r3, r7
 800fb12:	460e      	mov	r6, r1
 800fb14:	d9f4      	bls.n	800fb00 <_printf_i+0x11c>
 800fb16:	2b08      	cmp	r3, #8
 800fb18:	d10b      	bne.n	800fb32 <_printf_i+0x14e>
 800fb1a:	6823      	ldr	r3, [r4, #0]
 800fb1c:	07de      	lsls	r6, r3, #31
 800fb1e:	d508      	bpl.n	800fb32 <_printf_i+0x14e>
 800fb20:	6923      	ldr	r3, [r4, #16]
 800fb22:	6861      	ldr	r1, [r4, #4]
 800fb24:	4299      	cmp	r1, r3
 800fb26:	bfde      	ittt	le
 800fb28:	2330      	movle	r3, #48	; 0x30
 800fb2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb32:	1b52      	subs	r2, r2, r5
 800fb34:	6122      	str	r2, [r4, #16]
 800fb36:	464b      	mov	r3, r9
 800fb38:	4621      	mov	r1, r4
 800fb3a:	4640      	mov	r0, r8
 800fb3c:	f8cd a000 	str.w	sl, [sp]
 800fb40:	aa03      	add	r2, sp, #12
 800fb42:	f7ff fedf 	bl	800f904 <_printf_common>
 800fb46:	3001      	adds	r0, #1
 800fb48:	d14c      	bne.n	800fbe4 <_printf_i+0x200>
 800fb4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb4e:	b004      	add	sp, #16
 800fb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb54:	4834      	ldr	r0, [pc, #208]	; (800fc28 <_printf_i+0x244>)
 800fb56:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fb5a:	6829      	ldr	r1, [r5, #0]
 800fb5c:	6823      	ldr	r3, [r4, #0]
 800fb5e:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb62:	6029      	str	r1, [r5, #0]
 800fb64:	061d      	lsls	r5, r3, #24
 800fb66:	d514      	bpl.n	800fb92 <_printf_i+0x1ae>
 800fb68:	07df      	lsls	r7, r3, #31
 800fb6a:	bf44      	itt	mi
 800fb6c:	f043 0320 	orrmi.w	r3, r3, #32
 800fb70:	6023      	strmi	r3, [r4, #0]
 800fb72:	b91e      	cbnz	r6, 800fb7c <_printf_i+0x198>
 800fb74:	6823      	ldr	r3, [r4, #0]
 800fb76:	f023 0320 	bic.w	r3, r3, #32
 800fb7a:	6023      	str	r3, [r4, #0]
 800fb7c:	2310      	movs	r3, #16
 800fb7e:	e7af      	b.n	800fae0 <_printf_i+0xfc>
 800fb80:	6823      	ldr	r3, [r4, #0]
 800fb82:	f043 0320 	orr.w	r3, r3, #32
 800fb86:	6023      	str	r3, [r4, #0]
 800fb88:	2378      	movs	r3, #120	; 0x78
 800fb8a:	4828      	ldr	r0, [pc, #160]	; (800fc2c <_printf_i+0x248>)
 800fb8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb90:	e7e3      	b.n	800fb5a <_printf_i+0x176>
 800fb92:	0659      	lsls	r1, r3, #25
 800fb94:	bf48      	it	mi
 800fb96:	b2b6      	uxthmi	r6, r6
 800fb98:	e7e6      	b.n	800fb68 <_printf_i+0x184>
 800fb9a:	4615      	mov	r5, r2
 800fb9c:	e7bb      	b.n	800fb16 <_printf_i+0x132>
 800fb9e:	682b      	ldr	r3, [r5, #0]
 800fba0:	6826      	ldr	r6, [r4, #0]
 800fba2:	1d18      	adds	r0, r3, #4
 800fba4:	6961      	ldr	r1, [r4, #20]
 800fba6:	6028      	str	r0, [r5, #0]
 800fba8:	0635      	lsls	r5, r6, #24
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	d501      	bpl.n	800fbb2 <_printf_i+0x1ce>
 800fbae:	6019      	str	r1, [r3, #0]
 800fbb0:	e002      	b.n	800fbb8 <_printf_i+0x1d4>
 800fbb2:	0670      	lsls	r0, r6, #25
 800fbb4:	d5fb      	bpl.n	800fbae <_printf_i+0x1ca>
 800fbb6:	8019      	strh	r1, [r3, #0]
 800fbb8:	2300      	movs	r3, #0
 800fbba:	4615      	mov	r5, r2
 800fbbc:	6123      	str	r3, [r4, #16]
 800fbbe:	e7ba      	b.n	800fb36 <_printf_i+0x152>
 800fbc0:	682b      	ldr	r3, [r5, #0]
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	1d1a      	adds	r2, r3, #4
 800fbc6:	602a      	str	r2, [r5, #0]
 800fbc8:	681d      	ldr	r5, [r3, #0]
 800fbca:	6862      	ldr	r2, [r4, #4]
 800fbcc:	4628      	mov	r0, r5
 800fbce:	f002 f8fb 	bl	8011dc8 <memchr>
 800fbd2:	b108      	cbz	r0, 800fbd8 <_printf_i+0x1f4>
 800fbd4:	1b40      	subs	r0, r0, r5
 800fbd6:	6060      	str	r0, [r4, #4]
 800fbd8:	6863      	ldr	r3, [r4, #4]
 800fbda:	6123      	str	r3, [r4, #16]
 800fbdc:	2300      	movs	r3, #0
 800fbde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbe2:	e7a8      	b.n	800fb36 <_printf_i+0x152>
 800fbe4:	462a      	mov	r2, r5
 800fbe6:	4649      	mov	r1, r9
 800fbe8:	4640      	mov	r0, r8
 800fbea:	6923      	ldr	r3, [r4, #16]
 800fbec:	47d0      	blx	sl
 800fbee:	3001      	adds	r0, #1
 800fbf0:	d0ab      	beq.n	800fb4a <_printf_i+0x166>
 800fbf2:	6823      	ldr	r3, [r4, #0]
 800fbf4:	079b      	lsls	r3, r3, #30
 800fbf6:	d413      	bmi.n	800fc20 <_printf_i+0x23c>
 800fbf8:	68e0      	ldr	r0, [r4, #12]
 800fbfa:	9b03      	ldr	r3, [sp, #12]
 800fbfc:	4298      	cmp	r0, r3
 800fbfe:	bfb8      	it	lt
 800fc00:	4618      	movlt	r0, r3
 800fc02:	e7a4      	b.n	800fb4e <_printf_i+0x16a>
 800fc04:	2301      	movs	r3, #1
 800fc06:	4632      	mov	r2, r6
 800fc08:	4649      	mov	r1, r9
 800fc0a:	4640      	mov	r0, r8
 800fc0c:	47d0      	blx	sl
 800fc0e:	3001      	adds	r0, #1
 800fc10:	d09b      	beq.n	800fb4a <_printf_i+0x166>
 800fc12:	3501      	adds	r5, #1
 800fc14:	68e3      	ldr	r3, [r4, #12]
 800fc16:	9903      	ldr	r1, [sp, #12]
 800fc18:	1a5b      	subs	r3, r3, r1
 800fc1a:	42ab      	cmp	r3, r5
 800fc1c:	dcf2      	bgt.n	800fc04 <_printf_i+0x220>
 800fc1e:	e7eb      	b.n	800fbf8 <_printf_i+0x214>
 800fc20:	2500      	movs	r5, #0
 800fc22:	f104 0619 	add.w	r6, r4, #25
 800fc26:	e7f5      	b.n	800fc14 <_printf_i+0x230>
 800fc28:	08013b1a 	.word	0x08013b1a
 800fc2c:	08013b2b 	.word	0x08013b2b

0800fc30 <siprintf>:
 800fc30:	b40e      	push	{r1, r2, r3}
 800fc32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fc36:	b500      	push	{lr}
 800fc38:	b09c      	sub	sp, #112	; 0x70
 800fc3a:	ab1d      	add	r3, sp, #116	; 0x74
 800fc3c:	9002      	str	r0, [sp, #8]
 800fc3e:	9006      	str	r0, [sp, #24]
 800fc40:	9107      	str	r1, [sp, #28]
 800fc42:	9104      	str	r1, [sp, #16]
 800fc44:	4808      	ldr	r0, [pc, #32]	; (800fc68 <siprintf+0x38>)
 800fc46:	4909      	ldr	r1, [pc, #36]	; (800fc6c <siprintf+0x3c>)
 800fc48:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc4c:	9105      	str	r1, [sp, #20]
 800fc4e:	6800      	ldr	r0, [r0, #0]
 800fc50:	a902      	add	r1, sp, #8
 800fc52:	9301      	str	r3, [sp, #4]
 800fc54:	f002 feca 	bl	80129ec <_svfiprintf_r>
 800fc58:	2200      	movs	r2, #0
 800fc5a:	9b02      	ldr	r3, [sp, #8]
 800fc5c:	701a      	strb	r2, [r3, #0]
 800fc5e:	b01c      	add	sp, #112	; 0x70
 800fc60:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc64:	b003      	add	sp, #12
 800fc66:	4770      	bx	lr
 800fc68:	2000093c 	.word	0x2000093c
 800fc6c:	ffff0208 	.word	0xffff0208

0800fc70 <strcpy>:
 800fc70:	4603      	mov	r3, r0
 800fc72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc76:	f803 2b01 	strb.w	r2, [r3], #1
 800fc7a:	2a00      	cmp	r2, #0
 800fc7c:	d1f9      	bne.n	800fc72 <strcpy+0x2>
 800fc7e:	4770      	bx	lr

0800fc80 <sulp>:
 800fc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc84:	460f      	mov	r7, r1
 800fc86:	4690      	mov	r8, r2
 800fc88:	f002 fc1c 	bl	80124c4 <__ulp>
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	460d      	mov	r5, r1
 800fc90:	f1b8 0f00 	cmp.w	r8, #0
 800fc94:	d011      	beq.n	800fcba <sulp+0x3a>
 800fc96:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800fc9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	dd0b      	ble.n	800fcba <sulp+0x3a>
 800fca2:	2400      	movs	r4, #0
 800fca4:	051b      	lsls	r3, r3, #20
 800fca6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fcaa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fcae:	4622      	mov	r2, r4
 800fcb0:	462b      	mov	r3, r5
 800fcb2:	f7f0 fc33 	bl	800051c <__aeabi_dmul>
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	460d      	mov	r5, r1
 800fcba:	4620      	mov	r0, r4
 800fcbc:	4629      	mov	r1, r5
 800fcbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc2:	0000      	movs	r0, r0
 800fcc4:	0000      	movs	r0, r0
	...

0800fcc8 <_strtod_l>:
 800fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fccc:	469b      	mov	fp, r3
 800fcce:	2300      	movs	r3, #0
 800fcd0:	b09f      	sub	sp, #124	; 0x7c
 800fcd2:	931a      	str	r3, [sp, #104]	; 0x68
 800fcd4:	4b9e      	ldr	r3, [pc, #632]	; (800ff50 <_strtod_l+0x288>)
 800fcd6:	4682      	mov	sl, r0
 800fcd8:	681f      	ldr	r7, [r3, #0]
 800fcda:	460e      	mov	r6, r1
 800fcdc:	4638      	mov	r0, r7
 800fcde:	9215      	str	r2, [sp, #84]	; 0x54
 800fce0:	f7f0 fa58 	bl	8000194 <strlen>
 800fce4:	f04f 0800 	mov.w	r8, #0
 800fce8:	4604      	mov	r4, r0
 800fcea:	f04f 0900 	mov.w	r9, #0
 800fcee:	9619      	str	r6, [sp, #100]	; 0x64
 800fcf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fcf2:	781a      	ldrb	r2, [r3, #0]
 800fcf4:	2a2b      	cmp	r2, #43	; 0x2b
 800fcf6:	d04c      	beq.n	800fd92 <_strtod_l+0xca>
 800fcf8:	d83a      	bhi.n	800fd70 <_strtod_l+0xa8>
 800fcfa:	2a0d      	cmp	r2, #13
 800fcfc:	d833      	bhi.n	800fd66 <_strtod_l+0x9e>
 800fcfe:	2a08      	cmp	r2, #8
 800fd00:	d833      	bhi.n	800fd6a <_strtod_l+0xa2>
 800fd02:	2a00      	cmp	r2, #0
 800fd04:	d03d      	beq.n	800fd82 <_strtod_l+0xba>
 800fd06:	2300      	movs	r3, #0
 800fd08:	930a      	str	r3, [sp, #40]	; 0x28
 800fd0a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800fd0c:	782b      	ldrb	r3, [r5, #0]
 800fd0e:	2b30      	cmp	r3, #48	; 0x30
 800fd10:	f040 80aa 	bne.w	800fe68 <_strtod_l+0x1a0>
 800fd14:	786b      	ldrb	r3, [r5, #1]
 800fd16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fd1a:	2b58      	cmp	r3, #88	; 0x58
 800fd1c:	d166      	bne.n	800fdec <_strtod_l+0x124>
 800fd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd20:	4650      	mov	r0, sl
 800fd22:	9301      	str	r3, [sp, #4]
 800fd24:	ab1a      	add	r3, sp, #104	; 0x68
 800fd26:	9300      	str	r3, [sp, #0]
 800fd28:	4a8a      	ldr	r2, [pc, #552]	; (800ff54 <_strtod_l+0x28c>)
 800fd2a:	f8cd b008 	str.w	fp, [sp, #8]
 800fd2e:	ab1b      	add	r3, sp, #108	; 0x6c
 800fd30:	a919      	add	r1, sp, #100	; 0x64
 800fd32:	f001 fd2d 	bl	8011790 <__gethex>
 800fd36:	f010 0607 	ands.w	r6, r0, #7
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	d005      	beq.n	800fd4a <_strtod_l+0x82>
 800fd3e:	2e06      	cmp	r6, #6
 800fd40:	d129      	bne.n	800fd96 <_strtod_l+0xce>
 800fd42:	2300      	movs	r3, #0
 800fd44:	3501      	adds	r5, #1
 800fd46:	9519      	str	r5, [sp, #100]	; 0x64
 800fd48:	930a      	str	r3, [sp, #40]	; 0x28
 800fd4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	f040 858a 	bne.w	8010866 <_strtod_l+0xb9e>
 800fd52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd54:	b1d3      	cbz	r3, 800fd8c <_strtod_l+0xc4>
 800fd56:	4642      	mov	r2, r8
 800fd58:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fd5c:	4610      	mov	r0, r2
 800fd5e:	4619      	mov	r1, r3
 800fd60:	b01f      	add	sp, #124	; 0x7c
 800fd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd66:	2a20      	cmp	r2, #32
 800fd68:	d1cd      	bne.n	800fd06 <_strtod_l+0x3e>
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	9319      	str	r3, [sp, #100]	; 0x64
 800fd6e:	e7bf      	b.n	800fcf0 <_strtod_l+0x28>
 800fd70:	2a2d      	cmp	r2, #45	; 0x2d
 800fd72:	d1c8      	bne.n	800fd06 <_strtod_l+0x3e>
 800fd74:	2201      	movs	r2, #1
 800fd76:	920a      	str	r2, [sp, #40]	; 0x28
 800fd78:	1c5a      	adds	r2, r3, #1
 800fd7a:	9219      	str	r2, [sp, #100]	; 0x64
 800fd7c:	785b      	ldrb	r3, [r3, #1]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d1c3      	bne.n	800fd0a <_strtod_l+0x42>
 800fd82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd84:	9619      	str	r6, [sp, #100]	; 0x64
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	f040 856b 	bne.w	8010862 <_strtod_l+0xb9a>
 800fd8c:	4642      	mov	r2, r8
 800fd8e:	464b      	mov	r3, r9
 800fd90:	e7e4      	b.n	800fd5c <_strtod_l+0x94>
 800fd92:	2200      	movs	r2, #0
 800fd94:	e7ef      	b.n	800fd76 <_strtod_l+0xae>
 800fd96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fd98:	b13a      	cbz	r2, 800fdaa <_strtod_l+0xe2>
 800fd9a:	2135      	movs	r1, #53	; 0x35
 800fd9c:	a81c      	add	r0, sp, #112	; 0x70
 800fd9e:	f002 fc95 	bl	80126cc <__copybits>
 800fda2:	4650      	mov	r0, sl
 800fda4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800fda6:	f002 f85d 	bl	8011e64 <_Bfree>
 800fdaa:	3e01      	subs	r6, #1
 800fdac:	2e04      	cmp	r6, #4
 800fdae:	d806      	bhi.n	800fdbe <_strtod_l+0xf6>
 800fdb0:	e8df f006 	tbb	[pc, r6]
 800fdb4:	1714030a 	.word	0x1714030a
 800fdb8:	0a          	.byte	0x0a
 800fdb9:	00          	.byte	0x00
 800fdba:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800fdbe:	0721      	lsls	r1, r4, #28
 800fdc0:	d5c3      	bpl.n	800fd4a <_strtod_l+0x82>
 800fdc2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800fdc6:	e7c0      	b.n	800fd4a <_strtod_l+0x82>
 800fdc8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fdca:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800fdce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fdd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fdd6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800fdda:	e7f0      	b.n	800fdbe <_strtod_l+0xf6>
 800fddc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ff58 <_strtod_l+0x290>
 800fde0:	e7ed      	b.n	800fdbe <_strtod_l+0xf6>
 800fde2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fde6:	f04f 38ff 	mov.w	r8, #4294967295
 800fdea:	e7e8      	b.n	800fdbe <_strtod_l+0xf6>
 800fdec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fdee:	1c5a      	adds	r2, r3, #1
 800fdf0:	9219      	str	r2, [sp, #100]	; 0x64
 800fdf2:	785b      	ldrb	r3, [r3, #1]
 800fdf4:	2b30      	cmp	r3, #48	; 0x30
 800fdf6:	d0f9      	beq.n	800fdec <_strtod_l+0x124>
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d0a6      	beq.n	800fd4a <_strtod_l+0x82>
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	9307      	str	r3, [sp, #28]
 800fe00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe02:	220a      	movs	r2, #10
 800fe04:	9308      	str	r3, [sp, #32]
 800fe06:	2300      	movs	r3, #0
 800fe08:	469b      	mov	fp, r3
 800fe0a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800fe0e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fe10:	7805      	ldrb	r5, [r0, #0]
 800fe12:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800fe16:	b2d9      	uxtb	r1, r3
 800fe18:	2909      	cmp	r1, #9
 800fe1a:	d927      	bls.n	800fe6c <_strtod_l+0x1a4>
 800fe1c:	4622      	mov	r2, r4
 800fe1e:	4639      	mov	r1, r7
 800fe20:	f003 f852 	bl	8012ec8 <strncmp>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d033      	beq.n	800fe90 <_strtod_l+0x1c8>
 800fe28:	2000      	movs	r0, #0
 800fe2a:	462a      	mov	r2, r5
 800fe2c:	465c      	mov	r4, fp
 800fe2e:	4603      	mov	r3, r0
 800fe30:	9004      	str	r0, [sp, #16]
 800fe32:	2a65      	cmp	r2, #101	; 0x65
 800fe34:	d001      	beq.n	800fe3a <_strtod_l+0x172>
 800fe36:	2a45      	cmp	r2, #69	; 0x45
 800fe38:	d114      	bne.n	800fe64 <_strtod_l+0x19c>
 800fe3a:	b91c      	cbnz	r4, 800fe44 <_strtod_l+0x17c>
 800fe3c:	9a07      	ldr	r2, [sp, #28]
 800fe3e:	4302      	orrs	r2, r0
 800fe40:	d09f      	beq.n	800fd82 <_strtod_l+0xba>
 800fe42:	2400      	movs	r4, #0
 800fe44:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800fe46:	1c72      	adds	r2, r6, #1
 800fe48:	9219      	str	r2, [sp, #100]	; 0x64
 800fe4a:	7872      	ldrb	r2, [r6, #1]
 800fe4c:	2a2b      	cmp	r2, #43	; 0x2b
 800fe4e:	d079      	beq.n	800ff44 <_strtod_l+0x27c>
 800fe50:	2a2d      	cmp	r2, #45	; 0x2d
 800fe52:	f000 8083 	beq.w	800ff5c <_strtod_l+0x294>
 800fe56:	2700      	movs	r7, #0
 800fe58:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fe5c:	2909      	cmp	r1, #9
 800fe5e:	f240 8083 	bls.w	800ff68 <_strtod_l+0x2a0>
 800fe62:	9619      	str	r6, [sp, #100]	; 0x64
 800fe64:	2500      	movs	r5, #0
 800fe66:	e09f      	b.n	800ffa8 <_strtod_l+0x2e0>
 800fe68:	2300      	movs	r3, #0
 800fe6a:	e7c8      	b.n	800fdfe <_strtod_l+0x136>
 800fe6c:	f1bb 0f08 	cmp.w	fp, #8
 800fe70:	bfd5      	itete	le
 800fe72:	9906      	ldrle	r1, [sp, #24]
 800fe74:	9905      	ldrgt	r1, [sp, #20]
 800fe76:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe7a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fe7e:	f100 0001 	add.w	r0, r0, #1
 800fe82:	bfd4      	ite	le
 800fe84:	9306      	strle	r3, [sp, #24]
 800fe86:	9305      	strgt	r3, [sp, #20]
 800fe88:	f10b 0b01 	add.w	fp, fp, #1
 800fe8c:	9019      	str	r0, [sp, #100]	; 0x64
 800fe8e:	e7be      	b.n	800fe0e <_strtod_l+0x146>
 800fe90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe92:	191a      	adds	r2, r3, r4
 800fe94:	9219      	str	r2, [sp, #100]	; 0x64
 800fe96:	5d1a      	ldrb	r2, [r3, r4]
 800fe98:	f1bb 0f00 	cmp.w	fp, #0
 800fe9c:	d036      	beq.n	800ff0c <_strtod_l+0x244>
 800fe9e:	465c      	mov	r4, fp
 800fea0:	9004      	str	r0, [sp, #16]
 800fea2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fea6:	2b09      	cmp	r3, #9
 800fea8:	d912      	bls.n	800fed0 <_strtod_l+0x208>
 800feaa:	2301      	movs	r3, #1
 800feac:	e7c1      	b.n	800fe32 <_strtod_l+0x16a>
 800feae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800feb0:	3001      	adds	r0, #1
 800feb2:	1c5a      	adds	r2, r3, #1
 800feb4:	9219      	str	r2, [sp, #100]	; 0x64
 800feb6:	785a      	ldrb	r2, [r3, #1]
 800feb8:	2a30      	cmp	r2, #48	; 0x30
 800feba:	d0f8      	beq.n	800feae <_strtod_l+0x1e6>
 800febc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fec0:	2b08      	cmp	r3, #8
 800fec2:	f200 84d5 	bhi.w	8010870 <_strtod_l+0xba8>
 800fec6:	9004      	str	r0, [sp, #16]
 800fec8:	2000      	movs	r0, #0
 800feca:	4604      	mov	r4, r0
 800fecc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fece:	9308      	str	r3, [sp, #32]
 800fed0:	3a30      	subs	r2, #48	; 0x30
 800fed2:	f100 0301 	add.w	r3, r0, #1
 800fed6:	d013      	beq.n	800ff00 <_strtod_l+0x238>
 800fed8:	9904      	ldr	r1, [sp, #16]
 800feda:	1905      	adds	r5, r0, r4
 800fedc:	4419      	add	r1, r3
 800fede:	9104      	str	r1, [sp, #16]
 800fee0:	4623      	mov	r3, r4
 800fee2:	210a      	movs	r1, #10
 800fee4:	42ab      	cmp	r3, r5
 800fee6:	d113      	bne.n	800ff10 <_strtod_l+0x248>
 800fee8:	1823      	adds	r3, r4, r0
 800feea:	2b08      	cmp	r3, #8
 800feec:	f104 0401 	add.w	r4, r4, #1
 800fef0:	4404      	add	r4, r0
 800fef2:	dc1b      	bgt.n	800ff2c <_strtod_l+0x264>
 800fef4:	230a      	movs	r3, #10
 800fef6:	9906      	ldr	r1, [sp, #24]
 800fef8:	fb03 2301 	mla	r3, r3, r1, r2
 800fefc:	9306      	str	r3, [sp, #24]
 800fefe:	2300      	movs	r3, #0
 800ff00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ff02:	4618      	mov	r0, r3
 800ff04:	1c51      	adds	r1, r2, #1
 800ff06:	9119      	str	r1, [sp, #100]	; 0x64
 800ff08:	7852      	ldrb	r2, [r2, #1]
 800ff0a:	e7ca      	b.n	800fea2 <_strtod_l+0x1da>
 800ff0c:	4658      	mov	r0, fp
 800ff0e:	e7d3      	b.n	800feb8 <_strtod_l+0x1f0>
 800ff10:	2b08      	cmp	r3, #8
 800ff12:	dc04      	bgt.n	800ff1e <_strtod_l+0x256>
 800ff14:	9f06      	ldr	r7, [sp, #24]
 800ff16:	434f      	muls	r7, r1
 800ff18:	9706      	str	r7, [sp, #24]
 800ff1a:	3301      	adds	r3, #1
 800ff1c:	e7e2      	b.n	800fee4 <_strtod_l+0x21c>
 800ff1e:	1c5f      	adds	r7, r3, #1
 800ff20:	2f10      	cmp	r7, #16
 800ff22:	bfde      	ittt	le
 800ff24:	9f05      	ldrle	r7, [sp, #20]
 800ff26:	434f      	mulle	r7, r1
 800ff28:	9705      	strle	r7, [sp, #20]
 800ff2a:	e7f6      	b.n	800ff1a <_strtod_l+0x252>
 800ff2c:	2c10      	cmp	r4, #16
 800ff2e:	bfdf      	itttt	le
 800ff30:	230a      	movle	r3, #10
 800ff32:	9905      	ldrle	r1, [sp, #20]
 800ff34:	fb03 2301 	mlale	r3, r3, r1, r2
 800ff38:	9305      	strle	r3, [sp, #20]
 800ff3a:	e7e0      	b.n	800fefe <_strtod_l+0x236>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	9304      	str	r3, [sp, #16]
 800ff40:	2301      	movs	r3, #1
 800ff42:	e77b      	b.n	800fe3c <_strtod_l+0x174>
 800ff44:	2700      	movs	r7, #0
 800ff46:	1cb2      	adds	r2, r6, #2
 800ff48:	9219      	str	r2, [sp, #100]	; 0x64
 800ff4a:	78b2      	ldrb	r2, [r6, #2]
 800ff4c:	e784      	b.n	800fe58 <_strtod_l+0x190>
 800ff4e:	bf00      	nop
 800ff50:	08013d20 	.word	0x08013d20
 800ff54:	08013b3c 	.word	0x08013b3c
 800ff58:	7ff00000 	.word	0x7ff00000
 800ff5c:	2701      	movs	r7, #1
 800ff5e:	e7f2      	b.n	800ff46 <_strtod_l+0x27e>
 800ff60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ff62:	1c51      	adds	r1, r2, #1
 800ff64:	9119      	str	r1, [sp, #100]	; 0x64
 800ff66:	7852      	ldrb	r2, [r2, #1]
 800ff68:	2a30      	cmp	r2, #48	; 0x30
 800ff6a:	d0f9      	beq.n	800ff60 <_strtod_l+0x298>
 800ff6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ff70:	2908      	cmp	r1, #8
 800ff72:	f63f af77 	bhi.w	800fe64 <_strtod_l+0x19c>
 800ff76:	f04f 0e0a 	mov.w	lr, #10
 800ff7a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ff7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ff80:	9209      	str	r2, [sp, #36]	; 0x24
 800ff82:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ff84:	1c51      	adds	r1, r2, #1
 800ff86:	9119      	str	r1, [sp, #100]	; 0x64
 800ff88:	7852      	ldrb	r2, [r2, #1]
 800ff8a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ff8e:	2d09      	cmp	r5, #9
 800ff90:	d935      	bls.n	800fffe <_strtod_l+0x336>
 800ff92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ff94:	1b49      	subs	r1, r1, r5
 800ff96:	2908      	cmp	r1, #8
 800ff98:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ff9c:	dc02      	bgt.n	800ffa4 <_strtod_l+0x2dc>
 800ff9e:	4565      	cmp	r5, ip
 800ffa0:	bfa8      	it	ge
 800ffa2:	4665      	movge	r5, ip
 800ffa4:	b107      	cbz	r7, 800ffa8 <_strtod_l+0x2e0>
 800ffa6:	426d      	negs	r5, r5
 800ffa8:	2c00      	cmp	r4, #0
 800ffaa:	d14c      	bne.n	8010046 <_strtod_l+0x37e>
 800ffac:	9907      	ldr	r1, [sp, #28]
 800ffae:	4301      	orrs	r1, r0
 800ffb0:	f47f aecb 	bne.w	800fd4a <_strtod_l+0x82>
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	f47f aee4 	bne.w	800fd82 <_strtod_l+0xba>
 800ffba:	2a69      	cmp	r2, #105	; 0x69
 800ffbc:	d026      	beq.n	801000c <_strtod_l+0x344>
 800ffbe:	dc23      	bgt.n	8010008 <_strtod_l+0x340>
 800ffc0:	2a49      	cmp	r2, #73	; 0x49
 800ffc2:	d023      	beq.n	801000c <_strtod_l+0x344>
 800ffc4:	2a4e      	cmp	r2, #78	; 0x4e
 800ffc6:	f47f aedc 	bne.w	800fd82 <_strtod_l+0xba>
 800ffca:	499d      	ldr	r1, [pc, #628]	; (8010240 <_strtod_l+0x578>)
 800ffcc:	a819      	add	r0, sp, #100	; 0x64
 800ffce:	f001 fe2d 	bl	8011c2c <__match>
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	f43f aed5 	beq.w	800fd82 <_strtod_l+0xba>
 800ffd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	2b28      	cmp	r3, #40	; 0x28
 800ffde:	d12c      	bne.n	801003a <_strtod_l+0x372>
 800ffe0:	4998      	ldr	r1, [pc, #608]	; (8010244 <_strtod_l+0x57c>)
 800ffe2:	aa1c      	add	r2, sp, #112	; 0x70
 800ffe4:	a819      	add	r0, sp, #100	; 0x64
 800ffe6:	f001 fe35 	bl	8011c54 <__hexnan>
 800ffea:	2805      	cmp	r0, #5
 800ffec:	d125      	bne.n	801003a <_strtod_l+0x372>
 800ffee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fff0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800fff4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800fff8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800fffc:	e6a5      	b.n	800fd4a <_strtod_l+0x82>
 800fffe:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8010002:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8010006:	e7bc      	b.n	800ff82 <_strtod_l+0x2ba>
 8010008:	2a6e      	cmp	r2, #110	; 0x6e
 801000a:	e7dc      	b.n	800ffc6 <_strtod_l+0x2fe>
 801000c:	498e      	ldr	r1, [pc, #568]	; (8010248 <_strtod_l+0x580>)
 801000e:	a819      	add	r0, sp, #100	; 0x64
 8010010:	f001 fe0c 	bl	8011c2c <__match>
 8010014:	2800      	cmp	r0, #0
 8010016:	f43f aeb4 	beq.w	800fd82 <_strtod_l+0xba>
 801001a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801001c:	498b      	ldr	r1, [pc, #556]	; (801024c <_strtod_l+0x584>)
 801001e:	3b01      	subs	r3, #1
 8010020:	a819      	add	r0, sp, #100	; 0x64
 8010022:	9319      	str	r3, [sp, #100]	; 0x64
 8010024:	f001 fe02 	bl	8011c2c <__match>
 8010028:	b910      	cbnz	r0, 8010030 <_strtod_l+0x368>
 801002a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801002c:	3301      	adds	r3, #1
 801002e:	9319      	str	r3, [sp, #100]	; 0x64
 8010030:	f04f 0800 	mov.w	r8, #0
 8010034:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8010250 <_strtod_l+0x588>
 8010038:	e687      	b.n	800fd4a <_strtod_l+0x82>
 801003a:	4886      	ldr	r0, [pc, #536]	; (8010254 <_strtod_l+0x58c>)
 801003c:	f002 ff2e 	bl	8012e9c <nan>
 8010040:	4680      	mov	r8, r0
 8010042:	4689      	mov	r9, r1
 8010044:	e681      	b.n	800fd4a <_strtod_l+0x82>
 8010046:	9b04      	ldr	r3, [sp, #16]
 8010048:	f1bb 0f00 	cmp.w	fp, #0
 801004c:	bf08      	it	eq
 801004e:	46a3      	moveq	fp, r4
 8010050:	1aeb      	subs	r3, r5, r3
 8010052:	2c10      	cmp	r4, #16
 8010054:	9806      	ldr	r0, [sp, #24]
 8010056:	4626      	mov	r6, r4
 8010058:	9307      	str	r3, [sp, #28]
 801005a:	bfa8      	it	ge
 801005c:	2610      	movge	r6, #16
 801005e:	f7f0 f9e3 	bl	8000428 <__aeabi_ui2d>
 8010062:	2c09      	cmp	r4, #9
 8010064:	4680      	mov	r8, r0
 8010066:	4689      	mov	r9, r1
 8010068:	dd13      	ble.n	8010092 <_strtod_l+0x3ca>
 801006a:	4b7b      	ldr	r3, [pc, #492]	; (8010258 <_strtod_l+0x590>)
 801006c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010070:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010074:	f7f0 fa52 	bl	800051c <__aeabi_dmul>
 8010078:	4680      	mov	r8, r0
 801007a:	9805      	ldr	r0, [sp, #20]
 801007c:	4689      	mov	r9, r1
 801007e:	f7f0 f9d3 	bl	8000428 <__aeabi_ui2d>
 8010082:	4602      	mov	r2, r0
 8010084:	460b      	mov	r3, r1
 8010086:	4640      	mov	r0, r8
 8010088:	4649      	mov	r1, r9
 801008a:	f7f0 f891 	bl	80001b0 <__adddf3>
 801008e:	4680      	mov	r8, r0
 8010090:	4689      	mov	r9, r1
 8010092:	2c0f      	cmp	r4, #15
 8010094:	dc36      	bgt.n	8010104 <_strtod_l+0x43c>
 8010096:	9b07      	ldr	r3, [sp, #28]
 8010098:	2b00      	cmp	r3, #0
 801009a:	f43f ae56 	beq.w	800fd4a <_strtod_l+0x82>
 801009e:	dd22      	ble.n	80100e6 <_strtod_l+0x41e>
 80100a0:	2b16      	cmp	r3, #22
 80100a2:	dc09      	bgt.n	80100b8 <_strtod_l+0x3f0>
 80100a4:	496c      	ldr	r1, [pc, #432]	; (8010258 <_strtod_l+0x590>)
 80100a6:	4642      	mov	r2, r8
 80100a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100ac:	464b      	mov	r3, r9
 80100ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100b2:	f7f0 fa33 	bl	800051c <__aeabi_dmul>
 80100b6:	e7c3      	b.n	8010040 <_strtod_l+0x378>
 80100b8:	9a07      	ldr	r2, [sp, #28]
 80100ba:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80100be:	4293      	cmp	r3, r2
 80100c0:	db20      	blt.n	8010104 <_strtod_l+0x43c>
 80100c2:	4d65      	ldr	r5, [pc, #404]	; (8010258 <_strtod_l+0x590>)
 80100c4:	f1c4 040f 	rsb	r4, r4, #15
 80100c8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80100cc:	4642      	mov	r2, r8
 80100ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100d2:	464b      	mov	r3, r9
 80100d4:	f7f0 fa22 	bl	800051c <__aeabi_dmul>
 80100d8:	9b07      	ldr	r3, [sp, #28]
 80100da:	1b1c      	subs	r4, r3, r4
 80100dc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80100e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80100e4:	e7e5      	b.n	80100b2 <_strtod_l+0x3ea>
 80100e6:	9b07      	ldr	r3, [sp, #28]
 80100e8:	3316      	adds	r3, #22
 80100ea:	db0b      	blt.n	8010104 <_strtod_l+0x43c>
 80100ec:	9b04      	ldr	r3, [sp, #16]
 80100ee:	4640      	mov	r0, r8
 80100f0:	1b5d      	subs	r5, r3, r5
 80100f2:	4b59      	ldr	r3, [pc, #356]	; (8010258 <_strtod_l+0x590>)
 80100f4:	4649      	mov	r1, r9
 80100f6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80100fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80100fe:	f7f0 fb37 	bl	8000770 <__aeabi_ddiv>
 8010102:	e79d      	b.n	8010040 <_strtod_l+0x378>
 8010104:	9b07      	ldr	r3, [sp, #28]
 8010106:	1ba6      	subs	r6, r4, r6
 8010108:	441e      	add	r6, r3
 801010a:	2e00      	cmp	r6, #0
 801010c:	dd74      	ble.n	80101f8 <_strtod_l+0x530>
 801010e:	f016 030f 	ands.w	r3, r6, #15
 8010112:	d00a      	beq.n	801012a <_strtod_l+0x462>
 8010114:	4950      	ldr	r1, [pc, #320]	; (8010258 <_strtod_l+0x590>)
 8010116:	4642      	mov	r2, r8
 8010118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801011c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010120:	464b      	mov	r3, r9
 8010122:	f7f0 f9fb 	bl	800051c <__aeabi_dmul>
 8010126:	4680      	mov	r8, r0
 8010128:	4689      	mov	r9, r1
 801012a:	f036 060f 	bics.w	r6, r6, #15
 801012e:	d052      	beq.n	80101d6 <_strtod_l+0x50e>
 8010130:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8010134:	dd27      	ble.n	8010186 <_strtod_l+0x4be>
 8010136:	f04f 0b00 	mov.w	fp, #0
 801013a:	f8cd b010 	str.w	fp, [sp, #16]
 801013e:	f8cd b020 	str.w	fp, [sp, #32]
 8010142:	f8cd b018 	str.w	fp, [sp, #24]
 8010146:	2322      	movs	r3, #34	; 0x22
 8010148:	f04f 0800 	mov.w	r8, #0
 801014c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8010250 <_strtod_l+0x588>
 8010150:	f8ca 3000 	str.w	r3, [sl]
 8010154:	9b08      	ldr	r3, [sp, #32]
 8010156:	2b00      	cmp	r3, #0
 8010158:	f43f adf7 	beq.w	800fd4a <_strtod_l+0x82>
 801015c:	4650      	mov	r0, sl
 801015e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010160:	f001 fe80 	bl	8011e64 <_Bfree>
 8010164:	4650      	mov	r0, sl
 8010166:	9906      	ldr	r1, [sp, #24]
 8010168:	f001 fe7c 	bl	8011e64 <_Bfree>
 801016c:	4650      	mov	r0, sl
 801016e:	9904      	ldr	r1, [sp, #16]
 8010170:	f001 fe78 	bl	8011e64 <_Bfree>
 8010174:	4650      	mov	r0, sl
 8010176:	9908      	ldr	r1, [sp, #32]
 8010178:	f001 fe74 	bl	8011e64 <_Bfree>
 801017c:	4659      	mov	r1, fp
 801017e:	4650      	mov	r0, sl
 8010180:	f001 fe70 	bl	8011e64 <_Bfree>
 8010184:	e5e1      	b.n	800fd4a <_strtod_l+0x82>
 8010186:	4b35      	ldr	r3, [pc, #212]	; (801025c <_strtod_l+0x594>)
 8010188:	4640      	mov	r0, r8
 801018a:	9305      	str	r3, [sp, #20]
 801018c:	2300      	movs	r3, #0
 801018e:	4649      	mov	r1, r9
 8010190:	461f      	mov	r7, r3
 8010192:	1136      	asrs	r6, r6, #4
 8010194:	2e01      	cmp	r6, #1
 8010196:	dc21      	bgt.n	80101dc <_strtod_l+0x514>
 8010198:	b10b      	cbz	r3, 801019e <_strtod_l+0x4d6>
 801019a:	4680      	mov	r8, r0
 801019c:	4689      	mov	r9, r1
 801019e:	4b2f      	ldr	r3, [pc, #188]	; (801025c <_strtod_l+0x594>)
 80101a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80101a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80101a8:	4642      	mov	r2, r8
 80101aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80101ae:	464b      	mov	r3, r9
 80101b0:	f7f0 f9b4 	bl	800051c <__aeabi_dmul>
 80101b4:	4b26      	ldr	r3, [pc, #152]	; (8010250 <_strtod_l+0x588>)
 80101b6:	460a      	mov	r2, r1
 80101b8:	400b      	ands	r3, r1
 80101ba:	4929      	ldr	r1, [pc, #164]	; (8010260 <_strtod_l+0x598>)
 80101bc:	4680      	mov	r8, r0
 80101be:	428b      	cmp	r3, r1
 80101c0:	d8b9      	bhi.n	8010136 <_strtod_l+0x46e>
 80101c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80101c6:	428b      	cmp	r3, r1
 80101c8:	bf86      	itte	hi
 80101ca:	f04f 38ff 	movhi.w	r8, #4294967295
 80101ce:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8010264 <_strtod_l+0x59c>
 80101d2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80101d6:	2300      	movs	r3, #0
 80101d8:	9305      	str	r3, [sp, #20]
 80101da:	e07f      	b.n	80102dc <_strtod_l+0x614>
 80101dc:	07f2      	lsls	r2, r6, #31
 80101de:	d505      	bpl.n	80101ec <_strtod_l+0x524>
 80101e0:	9b05      	ldr	r3, [sp, #20]
 80101e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e6:	f7f0 f999 	bl	800051c <__aeabi_dmul>
 80101ea:	2301      	movs	r3, #1
 80101ec:	9a05      	ldr	r2, [sp, #20]
 80101ee:	3701      	adds	r7, #1
 80101f0:	3208      	adds	r2, #8
 80101f2:	1076      	asrs	r6, r6, #1
 80101f4:	9205      	str	r2, [sp, #20]
 80101f6:	e7cd      	b.n	8010194 <_strtod_l+0x4cc>
 80101f8:	d0ed      	beq.n	80101d6 <_strtod_l+0x50e>
 80101fa:	4276      	negs	r6, r6
 80101fc:	f016 020f 	ands.w	r2, r6, #15
 8010200:	d00a      	beq.n	8010218 <_strtod_l+0x550>
 8010202:	4b15      	ldr	r3, [pc, #84]	; (8010258 <_strtod_l+0x590>)
 8010204:	4640      	mov	r0, r8
 8010206:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801020a:	4649      	mov	r1, r9
 801020c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010210:	f7f0 faae 	bl	8000770 <__aeabi_ddiv>
 8010214:	4680      	mov	r8, r0
 8010216:	4689      	mov	r9, r1
 8010218:	1136      	asrs	r6, r6, #4
 801021a:	d0dc      	beq.n	80101d6 <_strtod_l+0x50e>
 801021c:	2e1f      	cmp	r6, #31
 801021e:	dd23      	ble.n	8010268 <_strtod_l+0x5a0>
 8010220:	f04f 0b00 	mov.w	fp, #0
 8010224:	f8cd b010 	str.w	fp, [sp, #16]
 8010228:	f8cd b020 	str.w	fp, [sp, #32]
 801022c:	f8cd b018 	str.w	fp, [sp, #24]
 8010230:	2322      	movs	r3, #34	; 0x22
 8010232:	f04f 0800 	mov.w	r8, #0
 8010236:	f04f 0900 	mov.w	r9, #0
 801023a:	f8ca 3000 	str.w	r3, [sl]
 801023e:	e789      	b.n	8010154 <_strtod_l+0x48c>
 8010240:	08013b15 	.word	0x08013b15
 8010244:	08013b50 	.word	0x08013b50
 8010248:	08013b0d 	.word	0x08013b0d
 801024c:	08013c43 	.word	0x08013c43
 8010250:	7ff00000 	.word	0x7ff00000
 8010254:	08013c3f 	.word	0x08013c3f
 8010258:	08013db8 	.word	0x08013db8
 801025c:	08013d90 	.word	0x08013d90
 8010260:	7ca00000 	.word	0x7ca00000
 8010264:	7fefffff 	.word	0x7fefffff
 8010268:	f016 0310 	ands.w	r3, r6, #16
 801026c:	bf18      	it	ne
 801026e:	236a      	movne	r3, #106	; 0x6a
 8010270:	4640      	mov	r0, r8
 8010272:	9305      	str	r3, [sp, #20]
 8010274:	4649      	mov	r1, r9
 8010276:	2300      	movs	r3, #0
 8010278:	4fb0      	ldr	r7, [pc, #704]	; (801053c <_strtod_l+0x874>)
 801027a:	07f2      	lsls	r2, r6, #31
 801027c:	d504      	bpl.n	8010288 <_strtod_l+0x5c0>
 801027e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010282:	f7f0 f94b 	bl	800051c <__aeabi_dmul>
 8010286:	2301      	movs	r3, #1
 8010288:	1076      	asrs	r6, r6, #1
 801028a:	f107 0708 	add.w	r7, r7, #8
 801028e:	d1f4      	bne.n	801027a <_strtod_l+0x5b2>
 8010290:	b10b      	cbz	r3, 8010296 <_strtod_l+0x5ce>
 8010292:	4680      	mov	r8, r0
 8010294:	4689      	mov	r9, r1
 8010296:	9b05      	ldr	r3, [sp, #20]
 8010298:	b1c3      	cbz	r3, 80102cc <_strtod_l+0x604>
 801029a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801029e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	4649      	mov	r1, r9
 80102a6:	dd11      	ble.n	80102cc <_strtod_l+0x604>
 80102a8:	2b1f      	cmp	r3, #31
 80102aa:	f340 8127 	ble.w	80104fc <_strtod_l+0x834>
 80102ae:	2b34      	cmp	r3, #52	; 0x34
 80102b0:	bfd8      	it	le
 80102b2:	f04f 33ff 	movle.w	r3, #4294967295
 80102b6:	f04f 0800 	mov.w	r8, #0
 80102ba:	bfcf      	iteee	gt
 80102bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80102c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80102c4:	fa03 f202 	lslle.w	r2, r3, r2
 80102c8:	ea02 0901 	andle.w	r9, r2, r1
 80102cc:	2200      	movs	r2, #0
 80102ce:	2300      	movs	r3, #0
 80102d0:	4640      	mov	r0, r8
 80102d2:	4649      	mov	r1, r9
 80102d4:	f7f0 fb8a 	bl	80009ec <__aeabi_dcmpeq>
 80102d8:	2800      	cmp	r0, #0
 80102da:	d1a1      	bne.n	8010220 <_strtod_l+0x558>
 80102dc:	9b06      	ldr	r3, [sp, #24]
 80102de:	465a      	mov	r2, fp
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	4650      	mov	r0, sl
 80102e4:	4623      	mov	r3, r4
 80102e6:	9908      	ldr	r1, [sp, #32]
 80102e8:	f001 fe24 	bl	8011f34 <__s2b>
 80102ec:	9008      	str	r0, [sp, #32]
 80102ee:	2800      	cmp	r0, #0
 80102f0:	f43f af21 	beq.w	8010136 <_strtod_l+0x46e>
 80102f4:	9b04      	ldr	r3, [sp, #16]
 80102f6:	f04f 0b00 	mov.w	fp, #0
 80102fa:	1b5d      	subs	r5, r3, r5
 80102fc:	9b07      	ldr	r3, [sp, #28]
 80102fe:	f8cd b010 	str.w	fp, [sp, #16]
 8010302:	2b00      	cmp	r3, #0
 8010304:	bfb4      	ite	lt
 8010306:	462b      	movlt	r3, r5
 8010308:	2300      	movge	r3, #0
 801030a:	930e      	str	r3, [sp, #56]	; 0x38
 801030c:	9b07      	ldr	r3, [sp, #28]
 801030e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010312:	9314      	str	r3, [sp, #80]	; 0x50
 8010314:	9b08      	ldr	r3, [sp, #32]
 8010316:	4650      	mov	r0, sl
 8010318:	6859      	ldr	r1, [r3, #4]
 801031a:	f001 fd63 	bl	8011de4 <_Balloc>
 801031e:	9006      	str	r0, [sp, #24]
 8010320:	2800      	cmp	r0, #0
 8010322:	f43f af10 	beq.w	8010146 <_strtod_l+0x47e>
 8010326:	9b08      	ldr	r3, [sp, #32]
 8010328:	300c      	adds	r0, #12
 801032a:	691a      	ldr	r2, [r3, #16]
 801032c:	f103 010c 	add.w	r1, r3, #12
 8010330:	3202      	adds	r2, #2
 8010332:	0092      	lsls	r2, r2, #2
 8010334:	f7ff f806 	bl	800f344 <memcpy>
 8010338:	ab1c      	add	r3, sp, #112	; 0x70
 801033a:	9301      	str	r3, [sp, #4]
 801033c:	ab1b      	add	r3, sp, #108	; 0x6c
 801033e:	9300      	str	r3, [sp, #0]
 8010340:	4642      	mov	r2, r8
 8010342:	464b      	mov	r3, r9
 8010344:	4650      	mov	r0, sl
 8010346:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 801034a:	f002 f935 	bl	80125b8 <__d2b>
 801034e:	901a      	str	r0, [sp, #104]	; 0x68
 8010350:	2800      	cmp	r0, #0
 8010352:	f43f aef8 	beq.w	8010146 <_strtod_l+0x47e>
 8010356:	2101      	movs	r1, #1
 8010358:	4650      	mov	r0, sl
 801035a:	f001 fe83 	bl	8012064 <__i2b>
 801035e:	4603      	mov	r3, r0
 8010360:	9004      	str	r0, [sp, #16]
 8010362:	2800      	cmp	r0, #0
 8010364:	f43f aeef 	beq.w	8010146 <_strtod_l+0x47e>
 8010368:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801036a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801036c:	2d00      	cmp	r5, #0
 801036e:	bfab      	itete	ge
 8010370:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8010372:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8010374:	18ee      	addge	r6, r5, r3
 8010376:	1b5c      	sublt	r4, r3, r5
 8010378:	9b05      	ldr	r3, [sp, #20]
 801037a:	bfa8      	it	ge
 801037c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 801037e:	eba5 0503 	sub.w	r5, r5, r3
 8010382:	4415      	add	r5, r2
 8010384:	4b6e      	ldr	r3, [pc, #440]	; (8010540 <_strtod_l+0x878>)
 8010386:	f105 35ff 	add.w	r5, r5, #4294967295
 801038a:	bfb8      	it	lt
 801038c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 801038e:	429d      	cmp	r5, r3
 8010390:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010394:	f280 80c4 	bge.w	8010520 <_strtod_l+0x858>
 8010398:	1b5b      	subs	r3, r3, r5
 801039a:	2b1f      	cmp	r3, #31
 801039c:	f04f 0701 	mov.w	r7, #1
 80103a0:	eba2 0203 	sub.w	r2, r2, r3
 80103a4:	f300 80b1 	bgt.w	801050a <_strtod_l+0x842>
 80103a8:	2500      	movs	r5, #0
 80103aa:	fa07 f303 	lsl.w	r3, r7, r3
 80103ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80103b0:	18b7      	adds	r7, r6, r2
 80103b2:	9b05      	ldr	r3, [sp, #20]
 80103b4:	42be      	cmp	r6, r7
 80103b6:	4414      	add	r4, r2
 80103b8:	441c      	add	r4, r3
 80103ba:	4633      	mov	r3, r6
 80103bc:	bfa8      	it	ge
 80103be:	463b      	movge	r3, r7
 80103c0:	42a3      	cmp	r3, r4
 80103c2:	bfa8      	it	ge
 80103c4:	4623      	movge	r3, r4
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	bfc2      	ittt	gt
 80103ca:	1aff      	subgt	r7, r7, r3
 80103cc:	1ae4      	subgt	r4, r4, r3
 80103ce:	1af6      	subgt	r6, r6, r3
 80103d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	dd17      	ble.n	8010406 <_strtod_l+0x73e>
 80103d6:	461a      	mov	r2, r3
 80103d8:	4650      	mov	r0, sl
 80103da:	9904      	ldr	r1, [sp, #16]
 80103dc:	f001 ff00 	bl	80121e0 <__pow5mult>
 80103e0:	9004      	str	r0, [sp, #16]
 80103e2:	2800      	cmp	r0, #0
 80103e4:	f43f aeaf 	beq.w	8010146 <_strtod_l+0x47e>
 80103e8:	4601      	mov	r1, r0
 80103ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80103ec:	4650      	mov	r0, sl
 80103ee:	f001 fe4f 	bl	8012090 <__multiply>
 80103f2:	9009      	str	r0, [sp, #36]	; 0x24
 80103f4:	2800      	cmp	r0, #0
 80103f6:	f43f aea6 	beq.w	8010146 <_strtod_l+0x47e>
 80103fa:	4650      	mov	r0, sl
 80103fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80103fe:	f001 fd31 	bl	8011e64 <_Bfree>
 8010402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010404:	931a      	str	r3, [sp, #104]	; 0x68
 8010406:	2f00      	cmp	r7, #0
 8010408:	f300 808e 	bgt.w	8010528 <_strtod_l+0x860>
 801040c:	9b07      	ldr	r3, [sp, #28]
 801040e:	2b00      	cmp	r3, #0
 8010410:	dd08      	ble.n	8010424 <_strtod_l+0x75c>
 8010412:	4650      	mov	r0, sl
 8010414:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010416:	9906      	ldr	r1, [sp, #24]
 8010418:	f001 fee2 	bl	80121e0 <__pow5mult>
 801041c:	9006      	str	r0, [sp, #24]
 801041e:	2800      	cmp	r0, #0
 8010420:	f43f ae91 	beq.w	8010146 <_strtod_l+0x47e>
 8010424:	2c00      	cmp	r4, #0
 8010426:	dd08      	ble.n	801043a <_strtod_l+0x772>
 8010428:	4622      	mov	r2, r4
 801042a:	4650      	mov	r0, sl
 801042c:	9906      	ldr	r1, [sp, #24]
 801042e:	f001 ff31 	bl	8012294 <__lshift>
 8010432:	9006      	str	r0, [sp, #24]
 8010434:	2800      	cmp	r0, #0
 8010436:	f43f ae86 	beq.w	8010146 <_strtod_l+0x47e>
 801043a:	2e00      	cmp	r6, #0
 801043c:	dd08      	ble.n	8010450 <_strtod_l+0x788>
 801043e:	4632      	mov	r2, r6
 8010440:	4650      	mov	r0, sl
 8010442:	9904      	ldr	r1, [sp, #16]
 8010444:	f001 ff26 	bl	8012294 <__lshift>
 8010448:	9004      	str	r0, [sp, #16]
 801044a:	2800      	cmp	r0, #0
 801044c:	f43f ae7b 	beq.w	8010146 <_strtod_l+0x47e>
 8010450:	4650      	mov	r0, sl
 8010452:	9a06      	ldr	r2, [sp, #24]
 8010454:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010456:	f001 ffa9 	bl	80123ac <__mdiff>
 801045a:	4683      	mov	fp, r0
 801045c:	2800      	cmp	r0, #0
 801045e:	f43f ae72 	beq.w	8010146 <_strtod_l+0x47e>
 8010462:	2400      	movs	r4, #0
 8010464:	68c3      	ldr	r3, [r0, #12]
 8010466:	9904      	ldr	r1, [sp, #16]
 8010468:	60c4      	str	r4, [r0, #12]
 801046a:	930b      	str	r3, [sp, #44]	; 0x2c
 801046c:	f001 ff82 	bl	8012374 <__mcmp>
 8010470:	42a0      	cmp	r0, r4
 8010472:	da6b      	bge.n	801054c <_strtod_l+0x884>
 8010474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010476:	ea53 0308 	orrs.w	r3, r3, r8
 801047a:	f040 8091 	bne.w	80105a0 <_strtod_l+0x8d8>
 801047e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010482:	2b00      	cmp	r3, #0
 8010484:	f040 808c 	bne.w	80105a0 <_strtod_l+0x8d8>
 8010488:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801048c:	0d1b      	lsrs	r3, r3, #20
 801048e:	051b      	lsls	r3, r3, #20
 8010490:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010494:	f240 8084 	bls.w	80105a0 <_strtod_l+0x8d8>
 8010498:	f8db 3014 	ldr.w	r3, [fp, #20]
 801049c:	b91b      	cbnz	r3, 80104a6 <_strtod_l+0x7de>
 801049e:	f8db 3010 	ldr.w	r3, [fp, #16]
 80104a2:	2b01      	cmp	r3, #1
 80104a4:	dd7c      	ble.n	80105a0 <_strtod_l+0x8d8>
 80104a6:	4659      	mov	r1, fp
 80104a8:	2201      	movs	r2, #1
 80104aa:	4650      	mov	r0, sl
 80104ac:	f001 fef2 	bl	8012294 <__lshift>
 80104b0:	9904      	ldr	r1, [sp, #16]
 80104b2:	4683      	mov	fp, r0
 80104b4:	f001 ff5e 	bl	8012374 <__mcmp>
 80104b8:	2800      	cmp	r0, #0
 80104ba:	dd71      	ble.n	80105a0 <_strtod_l+0x8d8>
 80104bc:	9905      	ldr	r1, [sp, #20]
 80104be:	464b      	mov	r3, r9
 80104c0:	4a20      	ldr	r2, [pc, #128]	; (8010544 <_strtod_l+0x87c>)
 80104c2:	2900      	cmp	r1, #0
 80104c4:	f000 808c 	beq.w	80105e0 <_strtod_l+0x918>
 80104c8:	ea02 0109 	and.w	r1, r2, r9
 80104cc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80104d0:	f300 8086 	bgt.w	80105e0 <_strtod_l+0x918>
 80104d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80104d8:	f77f aeaa 	ble.w	8010230 <_strtod_l+0x568>
 80104dc:	4640      	mov	r0, r8
 80104de:	4649      	mov	r1, r9
 80104e0:	4b19      	ldr	r3, [pc, #100]	; (8010548 <_strtod_l+0x880>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	f7f0 f81a 	bl	800051c <__aeabi_dmul>
 80104e8:	460b      	mov	r3, r1
 80104ea:	4303      	orrs	r3, r0
 80104ec:	bf08      	it	eq
 80104ee:	2322      	moveq	r3, #34	; 0x22
 80104f0:	4680      	mov	r8, r0
 80104f2:	4689      	mov	r9, r1
 80104f4:	bf08      	it	eq
 80104f6:	f8ca 3000 	streq.w	r3, [sl]
 80104fa:	e62f      	b.n	801015c <_strtod_l+0x494>
 80104fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010500:	fa02 f303 	lsl.w	r3, r2, r3
 8010504:	ea03 0808 	and.w	r8, r3, r8
 8010508:	e6e0      	b.n	80102cc <_strtod_l+0x604>
 801050a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 801050e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8010512:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8010516:	35e2      	adds	r5, #226	; 0xe2
 8010518:	fa07 f505 	lsl.w	r5, r7, r5
 801051c:	970f      	str	r7, [sp, #60]	; 0x3c
 801051e:	e747      	b.n	80103b0 <_strtod_l+0x6e8>
 8010520:	2301      	movs	r3, #1
 8010522:	2500      	movs	r5, #0
 8010524:	930f      	str	r3, [sp, #60]	; 0x3c
 8010526:	e743      	b.n	80103b0 <_strtod_l+0x6e8>
 8010528:	463a      	mov	r2, r7
 801052a:	4650      	mov	r0, sl
 801052c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801052e:	f001 feb1 	bl	8012294 <__lshift>
 8010532:	901a      	str	r0, [sp, #104]	; 0x68
 8010534:	2800      	cmp	r0, #0
 8010536:	f47f af69 	bne.w	801040c <_strtod_l+0x744>
 801053a:	e604      	b.n	8010146 <_strtod_l+0x47e>
 801053c:	08013b68 	.word	0x08013b68
 8010540:	fffffc02 	.word	0xfffffc02
 8010544:	7ff00000 	.word	0x7ff00000
 8010548:	39500000 	.word	0x39500000
 801054c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010550:	d165      	bne.n	801061e <_strtod_l+0x956>
 8010552:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010554:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010558:	b35a      	cbz	r2, 80105b2 <_strtod_l+0x8ea>
 801055a:	4a99      	ldr	r2, [pc, #612]	; (80107c0 <_strtod_l+0xaf8>)
 801055c:	4293      	cmp	r3, r2
 801055e:	d12b      	bne.n	80105b8 <_strtod_l+0x8f0>
 8010560:	9b05      	ldr	r3, [sp, #20]
 8010562:	4641      	mov	r1, r8
 8010564:	b303      	cbz	r3, 80105a8 <_strtod_l+0x8e0>
 8010566:	464a      	mov	r2, r9
 8010568:	4b96      	ldr	r3, [pc, #600]	; (80107c4 <_strtod_l+0xafc>)
 801056a:	4013      	ands	r3, r2
 801056c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010570:	f04f 32ff 	mov.w	r2, #4294967295
 8010574:	d81b      	bhi.n	80105ae <_strtod_l+0x8e6>
 8010576:	0d1b      	lsrs	r3, r3, #20
 8010578:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801057c:	fa02 f303 	lsl.w	r3, r2, r3
 8010580:	4299      	cmp	r1, r3
 8010582:	d119      	bne.n	80105b8 <_strtod_l+0x8f0>
 8010584:	4b90      	ldr	r3, [pc, #576]	; (80107c8 <_strtod_l+0xb00>)
 8010586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010588:	429a      	cmp	r2, r3
 801058a:	d102      	bne.n	8010592 <_strtod_l+0x8ca>
 801058c:	3101      	adds	r1, #1
 801058e:	f43f adda 	beq.w	8010146 <_strtod_l+0x47e>
 8010592:	f04f 0800 	mov.w	r8, #0
 8010596:	4b8b      	ldr	r3, [pc, #556]	; (80107c4 <_strtod_l+0xafc>)
 8010598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801059a:	401a      	ands	r2, r3
 801059c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80105a0:	9b05      	ldr	r3, [sp, #20]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d19a      	bne.n	80104dc <_strtod_l+0x814>
 80105a6:	e5d9      	b.n	801015c <_strtod_l+0x494>
 80105a8:	f04f 33ff 	mov.w	r3, #4294967295
 80105ac:	e7e8      	b.n	8010580 <_strtod_l+0x8b8>
 80105ae:	4613      	mov	r3, r2
 80105b0:	e7e6      	b.n	8010580 <_strtod_l+0x8b8>
 80105b2:	ea53 0308 	orrs.w	r3, r3, r8
 80105b6:	d081      	beq.n	80104bc <_strtod_l+0x7f4>
 80105b8:	b1e5      	cbz	r5, 80105f4 <_strtod_l+0x92c>
 80105ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105bc:	421d      	tst	r5, r3
 80105be:	d0ef      	beq.n	80105a0 <_strtod_l+0x8d8>
 80105c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105c2:	4640      	mov	r0, r8
 80105c4:	4649      	mov	r1, r9
 80105c6:	9a05      	ldr	r2, [sp, #20]
 80105c8:	b1c3      	cbz	r3, 80105fc <_strtod_l+0x934>
 80105ca:	f7ff fb59 	bl	800fc80 <sulp>
 80105ce:	4602      	mov	r2, r0
 80105d0:	460b      	mov	r3, r1
 80105d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80105d6:	f7ef fdeb 	bl	80001b0 <__adddf3>
 80105da:	4680      	mov	r8, r0
 80105dc:	4689      	mov	r9, r1
 80105de:	e7df      	b.n	80105a0 <_strtod_l+0x8d8>
 80105e0:	4013      	ands	r3, r2
 80105e2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80105e6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80105ea:	f04f 38ff 	mov.w	r8, #4294967295
 80105ee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80105f2:	e7d5      	b.n	80105a0 <_strtod_l+0x8d8>
 80105f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105f6:	ea13 0f08 	tst.w	r3, r8
 80105fa:	e7e0      	b.n	80105be <_strtod_l+0x8f6>
 80105fc:	f7ff fb40 	bl	800fc80 <sulp>
 8010600:	4602      	mov	r2, r0
 8010602:	460b      	mov	r3, r1
 8010604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010608:	f7ef fdd0 	bl	80001ac <__aeabi_dsub>
 801060c:	2200      	movs	r2, #0
 801060e:	2300      	movs	r3, #0
 8010610:	4680      	mov	r8, r0
 8010612:	4689      	mov	r9, r1
 8010614:	f7f0 f9ea 	bl	80009ec <__aeabi_dcmpeq>
 8010618:	2800      	cmp	r0, #0
 801061a:	d0c1      	beq.n	80105a0 <_strtod_l+0x8d8>
 801061c:	e608      	b.n	8010230 <_strtod_l+0x568>
 801061e:	4658      	mov	r0, fp
 8010620:	9904      	ldr	r1, [sp, #16]
 8010622:	f002 f825 	bl	8012670 <__ratio>
 8010626:	2200      	movs	r2, #0
 8010628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801062c:	4606      	mov	r6, r0
 801062e:	460f      	mov	r7, r1
 8010630:	f7f0 f9f0 	bl	8000a14 <__aeabi_dcmple>
 8010634:	2800      	cmp	r0, #0
 8010636:	d070      	beq.n	801071a <_strtod_l+0xa52>
 8010638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801063a:	2b00      	cmp	r3, #0
 801063c:	d042      	beq.n	80106c4 <_strtod_l+0x9fc>
 801063e:	2600      	movs	r6, #0
 8010640:	4f62      	ldr	r7, [pc, #392]	; (80107cc <_strtod_l+0xb04>)
 8010642:	4d62      	ldr	r5, [pc, #392]	; (80107cc <_strtod_l+0xb04>)
 8010644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801064a:	0d1b      	lsrs	r3, r3, #20
 801064c:	051b      	lsls	r3, r3, #20
 801064e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010652:	4b5f      	ldr	r3, [pc, #380]	; (80107d0 <_strtod_l+0xb08>)
 8010654:	429a      	cmp	r2, r3
 8010656:	f040 80c3 	bne.w	80107e0 <_strtod_l+0xb18>
 801065a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801065c:	4640      	mov	r0, r8
 801065e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8010662:	4649      	mov	r1, r9
 8010664:	f001 ff2e 	bl	80124c4 <__ulp>
 8010668:	4602      	mov	r2, r0
 801066a:	460b      	mov	r3, r1
 801066c:	4630      	mov	r0, r6
 801066e:	4639      	mov	r1, r7
 8010670:	f7ef ff54 	bl	800051c <__aeabi_dmul>
 8010674:	4642      	mov	r2, r8
 8010676:	464b      	mov	r3, r9
 8010678:	f7ef fd9a 	bl	80001b0 <__adddf3>
 801067c:	460b      	mov	r3, r1
 801067e:	4951      	ldr	r1, [pc, #324]	; (80107c4 <_strtod_l+0xafc>)
 8010680:	4a54      	ldr	r2, [pc, #336]	; (80107d4 <_strtod_l+0xb0c>)
 8010682:	4019      	ands	r1, r3
 8010684:	4291      	cmp	r1, r2
 8010686:	4680      	mov	r8, r0
 8010688:	d95d      	bls.n	8010746 <_strtod_l+0xa7e>
 801068a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801068c:	4b4e      	ldr	r3, [pc, #312]	; (80107c8 <_strtod_l+0xb00>)
 801068e:	429a      	cmp	r2, r3
 8010690:	d103      	bne.n	801069a <_strtod_l+0x9d2>
 8010692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010694:	3301      	adds	r3, #1
 8010696:	f43f ad56 	beq.w	8010146 <_strtod_l+0x47e>
 801069a:	f04f 38ff 	mov.w	r8, #4294967295
 801069e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80107c8 <_strtod_l+0xb00>
 80106a2:	4650      	mov	r0, sl
 80106a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80106a6:	f001 fbdd 	bl	8011e64 <_Bfree>
 80106aa:	4650      	mov	r0, sl
 80106ac:	9906      	ldr	r1, [sp, #24]
 80106ae:	f001 fbd9 	bl	8011e64 <_Bfree>
 80106b2:	4650      	mov	r0, sl
 80106b4:	9904      	ldr	r1, [sp, #16]
 80106b6:	f001 fbd5 	bl	8011e64 <_Bfree>
 80106ba:	4659      	mov	r1, fp
 80106bc:	4650      	mov	r0, sl
 80106be:	f001 fbd1 	bl	8011e64 <_Bfree>
 80106c2:	e627      	b.n	8010314 <_strtod_l+0x64c>
 80106c4:	f1b8 0f00 	cmp.w	r8, #0
 80106c8:	d119      	bne.n	80106fe <_strtod_l+0xa36>
 80106ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106d0:	b9e3      	cbnz	r3, 801070c <_strtod_l+0xa44>
 80106d2:	2200      	movs	r2, #0
 80106d4:	4630      	mov	r0, r6
 80106d6:	4639      	mov	r1, r7
 80106d8:	4b3c      	ldr	r3, [pc, #240]	; (80107cc <_strtod_l+0xb04>)
 80106da:	f7f0 f991 	bl	8000a00 <__aeabi_dcmplt>
 80106de:	b9c8      	cbnz	r0, 8010714 <_strtod_l+0xa4c>
 80106e0:	2200      	movs	r2, #0
 80106e2:	4630      	mov	r0, r6
 80106e4:	4639      	mov	r1, r7
 80106e6:	4b3c      	ldr	r3, [pc, #240]	; (80107d8 <_strtod_l+0xb10>)
 80106e8:	f7ef ff18 	bl	800051c <__aeabi_dmul>
 80106ec:	4604      	mov	r4, r0
 80106ee:	460d      	mov	r5, r1
 80106f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80106f4:	9416      	str	r4, [sp, #88]	; 0x58
 80106f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80106f8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80106fc:	e7a2      	b.n	8010644 <_strtod_l+0x97c>
 80106fe:	f1b8 0f01 	cmp.w	r8, #1
 8010702:	d103      	bne.n	801070c <_strtod_l+0xa44>
 8010704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010706:	2b00      	cmp	r3, #0
 8010708:	f43f ad92 	beq.w	8010230 <_strtod_l+0x568>
 801070c:	2600      	movs	r6, #0
 801070e:	2400      	movs	r4, #0
 8010710:	4f32      	ldr	r7, [pc, #200]	; (80107dc <_strtod_l+0xb14>)
 8010712:	e796      	b.n	8010642 <_strtod_l+0x97a>
 8010714:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010716:	4d30      	ldr	r5, [pc, #192]	; (80107d8 <_strtod_l+0xb10>)
 8010718:	e7ea      	b.n	80106f0 <_strtod_l+0xa28>
 801071a:	4b2f      	ldr	r3, [pc, #188]	; (80107d8 <_strtod_l+0xb10>)
 801071c:	2200      	movs	r2, #0
 801071e:	4630      	mov	r0, r6
 8010720:	4639      	mov	r1, r7
 8010722:	f7ef fefb 	bl	800051c <__aeabi_dmul>
 8010726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010728:	4604      	mov	r4, r0
 801072a:	460d      	mov	r5, r1
 801072c:	b933      	cbnz	r3, 801073c <_strtod_l+0xa74>
 801072e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010732:	9010      	str	r0, [sp, #64]	; 0x40
 8010734:	9311      	str	r3, [sp, #68]	; 0x44
 8010736:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801073a:	e783      	b.n	8010644 <_strtod_l+0x97c>
 801073c:	4602      	mov	r2, r0
 801073e:	460b      	mov	r3, r1
 8010740:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8010744:	e7f7      	b.n	8010736 <_strtod_l+0xa6e>
 8010746:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801074a:	9b05      	ldr	r3, [sp, #20]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d1a8      	bne.n	80106a2 <_strtod_l+0x9da>
 8010750:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010756:	0d1b      	lsrs	r3, r3, #20
 8010758:	051b      	lsls	r3, r3, #20
 801075a:	429a      	cmp	r2, r3
 801075c:	d1a1      	bne.n	80106a2 <_strtod_l+0x9da>
 801075e:	4620      	mov	r0, r4
 8010760:	4629      	mov	r1, r5
 8010762:	f7f0 fd2f 	bl	80011c4 <__aeabi_d2lz>
 8010766:	f7ef feab 	bl	80004c0 <__aeabi_l2d>
 801076a:	4602      	mov	r2, r0
 801076c:	460b      	mov	r3, r1
 801076e:	4620      	mov	r0, r4
 8010770:	4629      	mov	r1, r5
 8010772:	f7ef fd1b 	bl	80001ac <__aeabi_dsub>
 8010776:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801077c:	ea43 0308 	orr.w	r3, r3, r8
 8010780:	4313      	orrs	r3, r2
 8010782:	4604      	mov	r4, r0
 8010784:	460d      	mov	r5, r1
 8010786:	d066      	beq.n	8010856 <_strtod_l+0xb8e>
 8010788:	a309      	add	r3, pc, #36	; (adr r3, 80107b0 <_strtod_l+0xae8>)
 801078a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078e:	f7f0 f937 	bl	8000a00 <__aeabi_dcmplt>
 8010792:	2800      	cmp	r0, #0
 8010794:	f47f ace2 	bne.w	801015c <_strtod_l+0x494>
 8010798:	a307      	add	r3, pc, #28	; (adr r3, 80107b8 <_strtod_l+0xaf0>)
 801079a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079e:	4620      	mov	r0, r4
 80107a0:	4629      	mov	r1, r5
 80107a2:	f7f0 f94b 	bl	8000a3c <__aeabi_dcmpgt>
 80107a6:	2800      	cmp	r0, #0
 80107a8:	f43f af7b 	beq.w	80106a2 <_strtod_l+0x9da>
 80107ac:	e4d6      	b.n	801015c <_strtod_l+0x494>
 80107ae:	bf00      	nop
 80107b0:	94a03595 	.word	0x94a03595
 80107b4:	3fdfffff 	.word	0x3fdfffff
 80107b8:	35afe535 	.word	0x35afe535
 80107bc:	3fe00000 	.word	0x3fe00000
 80107c0:	000fffff 	.word	0x000fffff
 80107c4:	7ff00000 	.word	0x7ff00000
 80107c8:	7fefffff 	.word	0x7fefffff
 80107cc:	3ff00000 	.word	0x3ff00000
 80107d0:	7fe00000 	.word	0x7fe00000
 80107d4:	7c9fffff 	.word	0x7c9fffff
 80107d8:	3fe00000 	.word	0x3fe00000
 80107dc:	bff00000 	.word	0xbff00000
 80107e0:	9b05      	ldr	r3, [sp, #20]
 80107e2:	b313      	cbz	r3, 801082a <_strtod_l+0xb62>
 80107e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80107e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80107ea:	d81e      	bhi.n	801082a <_strtod_l+0xb62>
 80107ec:	a326      	add	r3, pc, #152	; (adr r3, 8010888 <_strtod_l+0xbc0>)
 80107ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f2:	4620      	mov	r0, r4
 80107f4:	4629      	mov	r1, r5
 80107f6:	f7f0 f90d 	bl	8000a14 <__aeabi_dcmple>
 80107fa:	b190      	cbz	r0, 8010822 <_strtod_l+0xb5a>
 80107fc:	4629      	mov	r1, r5
 80107fe:	4620      	mov	r0, r4
 8010800:	f7f0 f964 	bl	8000acc <__aeabi_d2uiz>
 8010804:	2801      	cmp	r0, #1
 8010806:	bf38      	it	cc
 8010808:	2001      	movcc	r0, #1
 801080a:	f7ef fe0d 	bl	8000428 <__aeabi_ui2d>
 801080e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010810:	4604      	mov	r4, r0
 8010812:	460d      	mov	r5, r1
 8010814:	b9d3      	cbnz	r3, 801084c <_strtod_l+0xb84>
 8010816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801081a:	9012      	str	r0, [sp, #72]	; 0x48
 801081c:	9313      	str	r3, [sp, #76]	; 0x4c
 801081e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8010822:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010824:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8010828:	1a9f      	subs	r7, r3, r2
 801082a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801082e:	f001 fe49 	bl	80124c4 <__ulp>
 8010832:	4602      	mov	r2, r0
 8010834:	460b      	mov	r3, r1
 8010836:	4630      	mov	r0, r6
 8010838:	4639      	mov	r1, r7
 801083a:	f7ef fe6f 	bl	800051c <__aeabi_dmul>
 801083e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010842:	f7ef fcb5 	bl	80001b0 <__adddf3>
 8010846:	4680      	mov	r8, r0
 8010848:	4689      	mov	r9, r1
 801084a:	e77e      	b.n	801074a <_strtod_l+0xa82>
 801084c:	4602      	mov	r2, r0
 801084e:	460b      	mov	r3, r1
 8010850:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8010854:	e7e3      	b.n	801081e <_strtod_l+0xb56>
 8010856:	a30e      	add	r3, pc, #56	; (adr r3, 8010890 <_strtod_l+0xbc8>)
 8010858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085c:	f7f0 f8d0 	bl	8000a00 <__aeabi_dcmplt>
 8010860:	e7a1      	b.n	80107a6 <_strtod_l+0xade>
 8010862:	2300      	movs	r3, #0
 8010864:	930a      	str	r3, [sp, #40]	; 0x28
 8010866:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010868:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801086a:	6013      	str	r3, [r2, #0]
 801086c:	f7ff ba71 	b.w	800fd52 <_strtod_l+0x8a>
 8010870:	2a65      	cmp	r2, #101	; 0x65
 8010872:	f43f ab63 	beq.w	800ff3c <_strtod_l+0x274>
 8010876:	2a45      	cmp	r2, #69	; 0x45
 8010878:	f43f ab60 	beq.w	800ff3c <_strtod_l+0x274>
 801087c:	2301      	movs	r3, #1
 801087e:	f7ff bb95 	b.w	800ffac <_strtod_l+0x2e4>
 8010882:	bf00      	nop
 8010884:	f3af 8000 	nop.w
 8010888:	ffc00000 	.word	0xffc00000
 801088c:	41dfffff 	.word	0x41dfffff
 8010890:	94a03595 	.word	0x94a03595
 8010894:	3fcfffff 	.word	0x3fcfffff

08010898 <strtod>:
 8010898:	460a      	mov	r2, r1
 801089a:	4601      	mov	r1, r0
 801089c:	4802      	ldr	r0, [pc, #8]	; (80108a8 <strtod+0x10>)
 801089e:	4b03      	ldr	r3, [pc, #12]	; (80108ac <strtod+0x14>)
 80108a0:	6800      	ldr	r0, [r0, #0]
 80108a2:	f7ff ba11 	b.w	800fcc8 <_strtod_l>
 80108a6:	bf00      	nop
 80108a8:	2000093c 	.word	0x2000093c
 80108ac:	200009a4 	.word	0x200009a4

080108b0 <strtok>:
 80108b0:	4b16      	ldr	r3, [pc, #88]	; (801090c <strtok+0x5c>)
 80108b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108b6:	681f      	ldr	r7, [r3, #0]
 80108b8:	4605      	mov	r5, r0
 80108ba:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80108bc:	460e      	mov	r6, r1
 80108be:	b9ec      	cbnz	r4, 80108fc <strtok+0x4c>
 80108c0:	2050      	movs	r0, #80	; 0x50
 80108c2:	f001 fa67 	bl	8011d94 <malloc>
 80108c6:	4602      	mov	r2, r0
 80108c8:	65b8      	str	r0, [r7, #88]	; 0x58
 80108ca:	b920      	cbnz	r0, 80108d6 <strtok+0x26>
 80108cc:	2157      	movs	r1, #87	; 0x57
 80108ce:	4b10      	ldr	r3, [pc, #64]	; (8010910 <strtok+0x60>)
 80108d0:	4810      	ldr	r0, [pc, #64]	; (8010914 <strtok+0x64>)
 80108d2:	f000 f849 	bl	8010968 <__assert_func>
 80108d6:	e9c0 4400 	strd	r4, r4, [r0]
 80108da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80108de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80108e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80108e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80108ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80108ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80108f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80108f6:	6184      	str	r4, [r0, #24]
 80108f8:	7704      	strb	r4, [r0, #28]
 80108fa:	6244      	str	r4, [r0, #36]	; 0x24
 80108fc:	4631      	mov	r1, r6
 80108fe:	4628      	mov	r0, r5
 8010900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010902:	2301      	movs	r3, #1
 8010904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010908:	f000 b806 	b.w	8010918 <__strtok_r>
 801090c:	2000093c 	.word	0x2000093c
 8010910:	08013b90 	.word	0x08013b90
 8010914:	08013ba7 	.word	0x08013ba7

08010918 <__strtok_r>:
 8010918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801091a:	b908      	cbnz	r0, 8010920 <__strtok_r+0x8>
 801091c:	6810      	ldr	r0, [r2, #0]
 801091e:	b188      	cbz	r0, 8010944 <__strtok_r+0x2c>
 8010920:	4604      	mov	r4, r0
 8010922:	460f      	mov	r7, r1
 8010924:	4620      	mov	r0, r4
 8010926:	f814 5b01 	ldrb.w	r5, [r4], #1
 801092a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801092e:	b91e      	cbnz	r6, 8010938 <__strtok_r+0x20>
 8010930:	b965      	cbnz	r5, 801094c <__strtok_r+0x34>
 8010932:	4628      	mov	r0, r5
 8010934:	6015      	str	r5, [r2, #0]
 8010936:	e005      	b.n	8010944 <__strtok_r+0x2c>
 8010938:	42b5      	cmp	r5, r6
 801093a:	d1f6      	bne.n	801092a <__strtok_r+0x12>
 801093c:	2b00      	cmp	r3, #0
 801093e:	d1f0      	bne.n	8010922 <__strtok_r+0xa>
 8010940:	6014      	str	r4, [r2, #0]
 8010942:	7003      	strb	r3, [r0, #0]
 8010944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010946:	461c      	mov	r4, r3
 8010948:	e00c      	b.n	8010964 <__strtok_r+0x4c>
 801094a:	b915      	cbnz	r5, 8010952 <__strtok_r+0x3a>
 801094c:	460e      	mov	r6, r1
 801094e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010952:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010956:	42ab      	cmp	r3, r5
 8010958:	d1f7      	bne.n	801094a <__strtok_r+0x32>
 801095a:	2b00      	cmp	r3, #0
 801095c:	d0f3      	beq.n	8010946 <__strtok_r+0x2e>
 801095e:	2300      	movs	r3, #0
 8010960:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010964:	6014      	str	r4, [r2, #0]
 8010966:	e7ed      	b.n	8010944 <__strtok_r+0x2c>

08010968 <__assert_func>:
 8010968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801096a:	4614      	mov	r4, r2
 801096c:	461a      	mov	r2, r3
 801096e:	4b09      	ldr	r3, [pc, #36]	; (8010994 <__assert_func+0x2c>)
 8010970:	4605      	mov	r5, r0
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	68d8      	ldr	r0, [r3, #12]
 8010976:	b14c      	cbz	r4, 801098c <__assert_func+0x24>
 8010978:	4b07      	ldr	r3, [pc, #28]	; (8010998 <__assert_func+0x30>)
 801097a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801097e:	9100      	str	r1, [sp, #0]
 8010980:	462b      	mov	r3, r5
 8010982:	4906      	ldr	r1, [pc, #24]	; (801099c <__assert_func+0x34>)
 8010984:	f000 fe8a 	bl	801169c <fiprintf>
 8010988:	f002 fb80 	bl	801308c <abort>
 801098c:	4b04      	ldr	r3, [pc, #16]	; (80109a0 <__assert_func+0x38>)
 801098e:	461c      	mov	r4, r3
 8010990:	e7f3      	b.n	801097a <__assert_func+0x12>
 8010992:	bf00      	nop
 8010994:	2000093c 	.word	0x2000093c
 8010998:	08013c04 	.word	0x08013c04
 801099c:	08013c11 	.word	0x08013c11
 80109a0:	08013c3f 	.word	0x08013c3f

080109a4 <quorem>:
 80109a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a8:	6903      	ldr	r3, [r0, #16]
 80109aa:	690c      	ldr	r4, [r1, #16]
 80109ac:	4607      	mov	r7, r0
 80109ae:	42a3      	cmp	r3, r4
 80109b0:	f2c0 8082 	blt.w	8010ab8 <quorem+0x114>
 80109b4:	3c01      	subs	r4, #1
 80109b6:	f100 0514 	add.w	r5, r0, #20
 80109ba:	f101 0814 	add.w	r8, r1, #20
 80109be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109c2:	9301      	str	r3, [sp, #4]
 80109c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80109c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109cc:	3301      	adds	r3, #1
 80109ce:	429a      	cmp	r2, r3
 80109d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80109d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80109d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80109dc:	d331      	bcc.n	8010a42 <quorem+0x9e>
 80109de:	f04f 0e00 	mov.w	lr, #0
 80109e2:	4640      	mov	r0, r8
 80109e4:	46ac      	mov	ip, r5
 80109e6:	46f2      	mov	sl, lr
 80109e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80109ec:	b293      	uxth	r3, r2
 80109ee:	fb06 e303 	mla	r3, r6, r3, lr
 80109f2:	0c12      	lsrs	r2, r2, #16
 80109f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	fb06 e202 	mla	r2, r6, r2, lr
 80109fe:	ebaa 0303 	sub.w	r3, sl, r3
 8010a02:	f8dc a000 	ldr.w	sl, [ip]
 8010a06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010a0a:	fa1f fa8a 	uxth.w	sl, sl
 8010a0e:	4453      	add	r3, sl
 8010a10:	f8dc a000 	ldr.w	sl, [ip]
 8010a14:	b292      	uxth	r2, r2
 8010a16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010a1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a24:	4581      	cmp	r9, r0
 8010a26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010a2a:	f84c 3b04 	str.w	r3, [ip], #4
 8010a2e:	d2db      	bcs.n	80109e8 <quorem+0x44>
 8010a30:	f855 300b 	ldr.w	r3, [r5, fp]
 8010a34:	b92b      	cbnz	r3, 8010a42 <quorem+0x9e>
 8010a36:	9b01      	ldr	r3, [sp, #4]
 8010a38:	3b04      	subs	r3, #4
 8010a3a:	429d      	cmp	r5, r3
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	d32f      	bcc.n	8010aa0 <quorem+0xfc>
 8010a40:	613c      	str	r4, [r7, #16]
 8010a42:	4638      	mov	r0, r7
 8010a44:	f001 fc96 	bl	8012374 <__mcmp>
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	db25      	blt.n	8010a98 <quorem+0xf4>
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	f04f 0c00 	mov.w	ip, #0
 8010a52:	3601      	adds	r6, #1
 8010a54:	f858 1b04 	ldr.w	r1, [r8], #4
 8010a58:	f8d0 e000 	ldr.w	lr, [r0]
 8010a5c:	b28b      	uxth	r3, r1
 8010a5e:	ebac 0303 	sub.w	r3, ip, r3
 8010a62:	fa1f f28e 	uxth.w	r2, lr
 8010a66:	4413      	add	r3, r2
 8010a68:	0c0a      	lsrs	r2, r1, #16
 8010a6a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010a6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a72:	b29b      	uxth	r3, r3
 8010a74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a78:	45c1      	cmp	r9, r8
 8010a7a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010a7e:	f840 3b04 	str.w	r3, [r0], #4
 8010a82:	d2e7      	bcs.n	8010a54 <quorem+0xb0>
 8010a84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a8c:	b922      	cbnz	r2, 8010a98 <quorem+0xf4>
 8010a8e:	3b04      	subs	r3, #4
 8010a90:	429d      	cmp	r5, r3
 8010a92:	461a      	mov	r2, r3
 8010a94:	d30a      	bcc.n	8010aac <quorem+0x108>
 8010a96:	613c      	str	r4, [r7, #16]
 8010a98:	4630      	mov	r0, r6
 8010a9a:	b003      	add	sp, #12
 8010a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aa0:	6812      	ldr	r2, [r2, #0]
 8010aa2:	3b04      	subs	r3, #4
 8010aa4:	2a00      	cmp	r2, #0
 8010aa6:	d1cb      	bne.n	8010a40 <quorem+0x9c>
 8010aa8:	3c01      	subs	r4, #1
 8010aaa:	e7c6      	b.n	8010a3a <quorem+0x96>
 8010aac:	6812      	ldr	r2, [r2, #0]
 8010aae:	3b04      	subs	r3, #4
 8010ab0:	2a00      	cmp	r2, #0
 8010ab2:	d1f0      	bne.n	8010a96 <quorem+0xf2>
 8010ab4:	3c01      	subs	r4, #1
 8010ab6:	e7eb      	b.n	8010a90 <quorem+0xec>
 8010ab8:	2000      	movs	r0, #0
 8010aba:	e7ee      	b.n	8010a9a <quorem+0xf6>
 8010abc:	0000      	movs	r0, r0
	...

08010ac0 <_dtoa_r>:
 8010ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac4:	4616      	mov	r6, r2
 8010ac6:	461f      	mov	r7, r3
 8010ac8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010aca:	b099      	sub	sp, #100	; 0x64
 8010acc:	4605      	mov	r5, r0
 8010ace:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010ad2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8010ad6:	b974      	cbnz	r4, 8010af6 <_dtoa_r+0x36>
 8010ad8:	2010      	movs	r0, #16
 8010ada:	f001 f95b 	bl	8011d94 <malloc>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	6268      	str	r0, [r5, #36]	; 0x24
 8010ae2:	b920      	cbnz	r0, 8010aee <_dtoa_r+0x2e>
 8010ae4:	21ea      	movs	r1, #234	; 0xea
 8010ae6:	4ba8      	ldr	r3, [pc, #672]	; (8010d88 <_dtoa_r+0x2c8>)
 8010ae8:	48a8      	ldr	r0, [pc, #672]	; (8010d8c <_dtoa_r+0x2cc>)
 8010aea:	f7ff ff3d 	bl	8010968 <__assert_func>
 8010aee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010af2:	6004      	str	r4, [r0, #0]
 8010af4:	60c4      	str	r4, [r0, #12]
 8010af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010af8:	6819      	ldr	r1, [r3, #0]
 8010afa:	b151      	cbz	r1, 8010b12 <_dtoa_r+0x52>
 8010afc:	685a      	ldr	r2, [r3, #4]
 8010afe:	2301      	movs	r3, #1
 8010b00:	4093      	lsls	r3, r2
 8010b02:	604a      	str	r2, [r1, #4]
 8010b04:	608b      	str	r3, [r1, #8]
 8010b06:	4628      	mov	r0, r5
 8010b08:	f001 f9ac 	bl	8011e64 <_Bfree>
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b10:	601a      	str	r2, [r3, #0]
 8010b12:	1e3b      	subs	r3, r7, #0
 8010b14:	bfaf      	iteee	ge
 8010b16:	2300      	movge	r3, #0
 8010b18:	2201      	movlt	r2, #1
 8010b1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010b1e:	9305      	strlt	r3, [sp, #20]
 8010b20:	bfa8      	it	ge
 8010b22:	f8c8 3000 	strge.w	r3, [r8]
 8010b26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010b2a:	4b99      	ldr	r3, [pc, #612]	; (8010d90 <_dtoa_r+0x2d0>)
 8010b2c:	bfb8      	it	lt
 8010b2e:	f8c8 2000 	strlt.w	r2, [r8]
 8010b32:	ea33 0309 	bics.w	r3, r3, r9
 8010b36:	d119      	bne.n	8010b6c <_dtoa_r+0xac>
 8010b38:	f242 730f 	movw	r3, #9999	; 0x270f
 8010b3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010b3e:	6013      	str	r3, [r2, #0]
 8010b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b44:	4333      	orrs	r3, r6
 8010b46:	f000 857f 	beq.w	8011648 <_dtoa_r+0xb88>
 8010b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010b4c:	b953      	cbnz	r3, 8010b64 <_dtoa_r+0xa4>
 8010b4e:	4b91      	ldr	r3, [pc, #580]	; (8010d94 <_dtoa_r+0x2d4>)
 8010b50:	e022      	b.n	8010b98 <_dtoa_r+0xd8>
 8010b52:	4b91      	ldr	r3, [pc, #580]	; (8010d98 <_dtoa_r+0x2d8>)
 8010b54:	9303      	str	r3, [sp, #12]
 8010b56:	3308      	adds	r3, #8
 8010b58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010b5a:	6013      	str	r3, [r2, #0]
 8010b5c:	9803      	ldr	r0, [sp, #12]
 8010b5e:	b019      	add	sp, #100	; 0x64
 8010b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b64:	4b8b      	ldr	r3, [pc, #556]	; (8010d94 <_dtoa_r+0x2d4>)
 8010b66:	9303      	str	r3, [sp, #12]
 8010b68:	3303      	adds	r3, #3
 8010b6a:	e7f5      	b.n	8010b58 <_dtoa_r+0x98>
 8010b6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010b70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8010b74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010b78:	2200      	movs	r2, #0
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	f7ef ff36 	bl	80009ec <__aeabi_dcmpeq>
 8010b80:	4680      	mov	r8, r0
 8010b82:	b158      	cbz	r0, 8010b9c <_dtoa_r+0xdc>
 8010b84:	2301      	movs	r3, #1
 8010b86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010b88:	6013      	str	r3, [r2, #0]
 8010b8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	f000 8558 	beq.w	8011642 <_dtoa_r+0xb82>
 8010b92:	4882      	ldr	r0, [pc, #520]	; (8010d9c <_dtoa_r+0x2dc>)
 8010b94:	6018      	str	r0, [r3, #0]
 8010b96:	1e43      	subs	r3, r0, #1
 8010b98:	9303      	str	r3, [sp, #12]
 8010b9a:	e7df      	b.n	8010b5c <_dtoa_r+0x9c>
 8010b9c:	ab16      	add	r3, sp, #88	; 0x58
 8010b9e:	9301      	str	r3, [sp, #4]
 8010ba0:	ab17      	add	r3, sp, #92	; 0x5c
 8010ba2:	9300      	str	r3, [sp, #0]
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010baa:	f001 fd05 	bl	80125b8 <__d2b>
 8010bae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010bb2:	4683      	mov	fp, r0
 8010bb4:	2c00      	cmp	r4, #0
 8010bb6:	d07f      	beq.n	8010cb8 <_dtoa_r+0x1f8>
 8010bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010bc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010bc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8010bca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010bce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	4b72      	ldr	r3, [pc, #456]	; (8010da0 <_dtoa_r+0x2e0>)
 8010bd6:	f7ef fae9 	bl	80001ac <__aeabi_dsub>
 8010bda:	a365      	add	r3, pc, #404	; (adr r3, 8010d70 <_dtoa_r+0x2b0>)
 8010bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be0:	f7ef fc9c 	bl	800051c <__aeabi_dmul>
 8010be4:	a364      	add	r3, pc, #400	; (adr r3, 8010d78 <_dtoa_r+0x2b8>)
 8010be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bea:	f7ef fae1 	bl	80001b0 <__adddf3>
 8010bee:	4606      	mov	r6, r0
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	460f      	mov	r7, r1
 8010bf4:	f7ef fc28 	bl	8000448 <__aeabi_i2d>
 8010bf8:	a361      	add	r3, pc, #388	; (adr r3, 8010d80 <_dtoa_r+0x2c0>)
 8010bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfe:	f7ef fc8d 	bl	800051c <__aeabi_dmul>
 8010c02:	4602      	mov	r2, r0
 8010c04:	460b      	mov	r3, r1
 8010c06:	4630      	mov	r0, r6
 8010c08:	4639      	mov	r1, r7
 8010c0a:	f7ef fad1 	bl	80001b0 <__adddf3>
 8010c0e:	4606      	mov	r6, r0
 8010c10:	460f      	mov	r7, r1
 8010c12:	f7ef ff33 	bl	8000a7c <__aeabi_d2iz>
 8010c16:	2200      	movs	r2, #0
 8010c18:	4682      	mov	sl, r0
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	4639      	mov	r1, r7
 8010c20:	f7ef feee 	bl	8000a00 <__aeabi_dcmplt>
 8010c24:	b148      	cbz	r0, 8010c3a <_dtoa_r+0x17a>
 8010c26:	4650      	mov	r0, sl
 8010c28:	f7ef fc0e 	bl	8000448 <__aeabi_i2d>
 8010c2c:	4632      	mov	r2, r6
 8010c2e:	463b      	mov	r3, r7
 8010c30:	f7ef fedc 	bl	80009ec <__aeabi_dcmpeq>
 8010c34:	b908      	cbnz	r0, 8010c3a <_dtoa_r+0x17a>
 8010c36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c3a:	f1ba 0f16 	cmp.w	sl, #22
 8010c3e:	d858      	bhi.n	8010cf2 <_dtoa_r+0x232>
 8010c40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c44:	4b57      	ldr	r3, [pc, #348]	; (8010da4 <_dtoa_r+0x2e4>)
 8010c46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	f7ef fed7 	bl	8000a00 <__aeabi_dcmplt>
 8010c52:	2800      	cmp	r0, #0
 8010c54:	d04f      	beq.n	8010cf6 <_dtoa_r+0x236>
 8010c56:	2300      	movs	r3, #0
 8010c58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010c60:	1b1c      	subs	r4, r3, r4
 8010c62:	1e63      	subs	r3, r4, #1
 8010c64:	9309      	str	r3, [sp, #36]	; 0x24
 8010c66:	bf49      	itett	mi
 8010c68:	f1c4 0301 	rsbmi	r3, r4, #1
 8010c6c:	2300      	movpl	r3, #0
 8010c6e:	9306      	strmi	r3, [sp, #24]
 8010c70:	2300      	movmi	r3, #0
 8010c72:	bf54      	ite	pl
 8010c74:	9306      	strpl	r3, [sp, #24]
 8010c76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010c78:	f1ba 0f00 	cmp.w	sl, #0
 8010c7c:	db3d      	blt.n	8010cfa <_dtoa_r+0x23a>
 8010c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c80:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010c84:	4453      	add	r3, sl
 8010c86:	9309      	str	r3, [sp, #36]	; 0x24
 8010c88:	2300      	movs	r3, #0
 8010c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8010c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c8e:	2b09      	cmp	r3, #9
 8010c90:	f200 808c 	bhi.w	8010dac <_dtoa_r+0x2ec>
 8010c94:	2b05      	cmp	r3, #5
 8010c96:	bfc4      	itt	gt
 8010c98:	3b04      	subgt	r3, #4
 8010c9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8010c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c9e:	bfc8      	it	gt
 8010ca0:	2400      	movgt	r4, #0
 8010ca2:	f1a3 0302 	sub.w	r3, r3, #2
 8010ca6:	bfd8      	it	le
 8010ca8:	2401      	movle	r4, #1
 8010caa:	2b03      	cmp	r3, #3
 8010cac:	f200 808a 	bhi.w	8010dc4 <_dtoa_r+0x304>
 8010cb0:	e8df f003 	tbb	[pc, r3]
 8010cb4:	5b4d4f2d 	.word	0x5b4d4f2d
 8010cb8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8010cbc:	441c      	add	r4, r3
 8010cbe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010cc2:	2b20      	cmp	r3, #32
 8010cc4:	bfc3      	ittte	gt
 8010cc6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010cca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8010cce:	fa09 f303 	lslgt.w	r3, r9, r3
 8010cd2:	f1c3 0320 	rsble	r3, r3, #32
 8010cd6:	bfc6      	itte	gt
 8010cd8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010cdc:	4318      	orrgt	r0, r3
 8010cde:	fa06 f003 	lslle.w	r0, r6, r3
 8010ce2:	f7ef fba1 	bl	8000428 <__aeabi_ui2d>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010cec:	3c01      	subs	r4, #1
 8010cee:	9313      	str	r3, [sp, #76]	; 0x4c
 8010cf0:	e76f      	b.n	8010bd2 <_dtoa_r+0x112>
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	e7b2      	b.n	8010c5c <_dtoa_r+0x19c>
 8010cf6:	900f      	str	r0, [sp, #60]	; 0x3c
 8010cf8:	e7b1      	b.n	8010c5e <_dtoa_r+0x19e>
 8010cfa:	9b06      	ldr	r3, [sp, #24]
 8010cfc:	eba3 030a 	sub.w	r3, r3, sl
 8010d00:	9306      	str	r3, [sp, #24]
 8010d02:	f1ca 0300 	rsb	r3, sl, #0
 8010d06:	930a      	str	r3, [sp, #40]	; 0x28
 8010d08:	2300      	movs	r3, #0
 8010d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8010d0c:	e7be      	b.n	8010c8c <_dtoa_r+0x1cc>
 8010d0e:	2300      	movs	r3, #0
 8010d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	dc58      	bgt.n	8010dca <_dtoa_r+0x30a>
 8010d18:	f04f 0901 	mov.w	r9, #1
 8010d1c:	464b      	mov	r3, r9
 8010d1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8010d22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8010d26:	2200      	movs	r2, #0
 8010d28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8010d2a:	6042      	str	r2, [r0, #4]
 8010d2c:	2204      	movs	r2, #4
 8010d2e:	f102 0614 	add.w	r6, r2, #20
 8010d32:	429e      	cmp	r6, r3
 8010d34:	6841      	ldr	r1, [r0, #4]
 8010d36:	d94e      	bls.n	8010dd6 <_dtoa_r+0x316>
 8010d38:	4628      	mov	r0, r5
 8010d3a:	f001 f853 	bl	8011de4 <_Balloc>
 8010d3e:	9003      	str	r0, [sp, #12]
 8010d40:	2800      	cmp	r0, #0
 8010d42:	d14c      	bne.n	8010dde <_dtoa_r+0x31e>
 8010d44:	4602      	mov	r2, r0
 8010d46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010d4a:	4b17      	ldr	r3, [pc, #92]	; (8010da8 <_dtoa_r+0x2e8>)
 8010d4c:	e6cc      	b.n	8010ae8 <_dtoa_r+0x28>
 8010d4e:	2301      	movs	r3, #1
 8010d50:	e7de      	b.n	8010d10 <_dtoa_r+0x250>
 8010d52:	2300      	movs	r3, #0
 8010d54:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010d58:	eb0a 0903 	add.w	r9, sl, r3
 8010d5c:	f109 0301 	add.w	r3, r9, #1
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	9308      	str	r3, [sp, #32]
 8010d64:	bfb8      	it	lt
 8010d66:	2301      	movlt	r3, #1
 8010d68:	e7dd      	b.n	8010d26 <_dtoa_r+0x266>
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	e7f2      	b.n	8010d54 <_dtoa_r+0x294>
 8010d6e:	bf00      	nop
 8010d70:	636f4361 	.word	0x636f4361
 8010d74:	3fd287a7 	.word	0x3fd287a7
 8010d78:	8b60c8b3 	.word	0x8b60c8b3
 8010d7c:	3fc68a28 	.word	0x3fc68a28
 8010d80:	509f79fb 	.word	0x509f79fb
 8010d84:	3fd34413 	.word	0x3fd34413
 8010d88:	08013b90 	.word	0x08013b90
 8010d8c:	08013c4d 	.word	0x08013c4d
 8010d90:	7ff00000 	.word	0x7ff00000
 8010d94:	08013c49 	.word	0x08013c49
 8010d98:	08013c40 	.word	0x08013c40
 8010d9c:	08013b19 	.word	0x08013b19
 8010da0:	3ff80000 	.word	0x3ff80000
 8010da4:	08013db8 	.word	0x08013db8
 8010da8:	08013ca8 	.word	0x08013ca8
 8010dac:	2401      	movs	r4, #1
 8010dae:	2300      	movs	r3, #0
 8010db0:	940b      	str	r4, [sp, #44]	; 0x2c
 8010db2:	9322      	str	r3, [sp, #136]	; 0x88
 8010db4:	f04f 39ff 	mov.w	r9, #4294967295
 8010db8:	2200      	movs	r2, #0
 8010dba:	2312      	movs	r3, #18
 8010dbc:	f8cd 9020 	str.w	r9, [sp, #32]
 8010dc0:	9223      	str	r2, [sp, #140]	; 0x8c
 8010dc2:	e7b0      	b.n	8010d26 <_dtoa_r+0x266>
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010dc8:	e7f4      	b.n	8010db4 <_dtoa_r+0x2f4>
 8010dca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8010dce:	464b      	mov	r3, r9
 8010dd0:	f8cd 9020 	str.w	r9, [sp, #32]
 8010dd4:	e7a7      	b.n	8010d26 <_dtoa_r+0x266>
 8010dd6:	3101      	adds	r1, #1
 8010dd8:	6041      	str	r1, [r0, #4]
 8010dda:	0052      	lsls	r2, r2, #1
 8010ddc:	e7a7      	b.n	8010d2e <_dtoa_r+0x26e>
 8010dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010de0:	9a03      	ldr	r2, [sp, #12]
 8010de2:	601a      	str	r2, [r3, #0]
 8010de4:	9b08      	ldr	r3, [sp, #32]
 8010de6:	2b0e      	cmp	r3, #14
 8010de8:	f200 80a8 	bhi.w	8010f3c <_dtoa_r+0x47c>
 8010dec:	2c00      	cmp	r4, #0
 8010dee:	f000 80a5 	beq.w	8010f3c <_dtoa_r+0x47c>
 8010df2:	f1ba 0f00 	cmp.w	sl, #0
 8010df6:	dd34      	ble.n	8010e62 <_dtoa_r+0x3a2>
 8010df8:	4a9a      	ldr	r2, [pc, #616]	; (8011064 <_dtoa_r+0x5a4>)
 8010dfa:	f00a 030f 	and.w	r3, sl, #15
 8010dfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e02:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010e06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010e0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010e0e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8010e12:	d016      	beq.n	8010e42 <_dtoa_r+0x382>
 8010e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010e18:	4b93      	ldr	r3, [pc, #588]	; (8011068 <_dtoa_r+0x5a8>)
 8010e1a:	2703      	movs	r7, #3
 8010e1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e20:	f7ef fca6 	bl	8000770 <__aeabi_ddiv>
 8010e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e28:	f004 040f 	and.w	r4, r4, #15
 8010e2c:	4e8e      	ldr	r6, [pc, #568]	; (8011068 <_dtoa_r+0x5a8>)
 8010e2e:	b954      	cbnz	r4, 8010e46 <_dtoa_r+0x386>
 8010e30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e38:	f7ef fc9a 	bl	8000770 <__aeabi_ddiv>
 8010e3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e40:	e029      	b.n	8010e96 <_dtoa_r+0x3d6>
 8010e42:	2702      	movs	r7, #2
 8010e44:	e7f2      	b.n	8010e2c <_dtoa_r+0x36c>
 8010e46:	07e1      	lsls	r1, r4, #31
 8010e48:	d508      	bpl.n	8010e5c <_dtoa_r+0x39c>
 8010e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010e4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e52:	f7ef fb63 	bl	800051c <__aeabi_dmul>
 8010e56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010e5a:	3701      	adds	r7, #1
 8010e5c:	1064      	asrs	r4, r4, #1
 8010e5e:	3608      	adds	r6, #8
 8010e60:	e7e5      	b.n	8010e2e <_dtoa_r+0x36e>
 8010e62:	f000 80a5 	beq.w	8010fb0 <_dtoa_r+0x4f0>
 8010e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010e6a:	f1ca 0400 	rsb	r4, sl, #0
 8010e6e:	4b7d      	ldr	r3, [pc, #500]	; (8011064 <_dtoa_r+0x5a4>)
 8010e70:	f004 020f 	and.w	r2, r4, #15
 8010e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7c:	f7ef fb4e 	bl	800051c <__aeabi_dmul>
 8010e80:	2702      	movs	r7, #2
 8010e82:	2300      	movs	r3, #0
 8010e84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e88:	4e77      	ldr	r6, [pc, #476]	; (8011068 <_dtoa_r+0x5a8>)
 8010e8a:	1124      	asrs	r4, r4, #4
 8010e8c:	2c00      	cmp	r4, #0
 8010e8e:	f040 8084 	bne.w	8010f9a <_dtoa_r+0x4da>
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d1d2      	bne.n	8010e3c <_dtoa_r+0x37c>
 8010e96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	f000 808b 	beq.w	8010fb4 <_dtoa_r+0x4f4>
 8010e9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010ea2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010ea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010eaa:	2200      	movs	r2, #0
 8010eac:	4b6f      	ldr	r3, [pc, #444]	; (801106c <_dtoa_r+0x5ac>)
 8010eae:	f7ef fda7 	bl	8000a00 <__aeabi_dcmplt>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	d07e      	beq.n	8010fb4 <_dtoa_r+0x4f4>
 8010eb6:	9b08      	ldr	r3, [sp, #32]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d07b      	beq.n	8010fb4 <_dtoa_r+0x4f4>
 8010ebc:	f1b9 0f00 	cmp.w	r9, #0
 8010ec0:	dd38      	ble.n	8010f34 <_dtoa_r+0x474>
 8010ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	4b69      	ldr	r3, [pc, #420]	; (8011070 <_dtoa_r+0x5b0>)
 8010eca:	f7ef fb27 	bl	800051c <__aeabi_dmul>
 8010ece:	464c      	mov	r4, r9
 8010ed0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ed4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8010ed8:	3701      	adds	r7, #1
 8010eda:	4638      	mov	r0, r7
 8010edc:	f7ef fab4 	bl	8000448 <__aeabi_i2d>
 8010ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ee4:	f7ef fb1a 	bl	800051c <__aeabi_dmul>
 8010ee8:	2200      	movs	r2, #0
 8010eea:	4b62      	ldr	r3, [pc, #392]	; (8011074 <_dtoa_r+0x5b4>)
 8010eec:	f7ef f960 	bl	80001b0 <__adddf3>
 8010ef0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010ef4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010ef8:	9611      	str	r6, [sp, #68]	; 0x44
 8010efa:	2c00      	cmp	r4, #0
 8010efc:	d15d      	bne.n	8010fba <_dtoa_r+0x4fa>
 8010efe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f02:	2200      	movs	r2, #0
 8010f04:	4b5c      	ldr	r3, [pc, #368]	; (8011078 <_dtoa_r+0x5b8>)
 8010f06:	f7ef f951 	bl	80001ac <__aeabi_dsub>
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f12:	4633      	mov	r3, r6
 8010f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010f16:	f7ef fd91 	bl	8000a3c <__aeabi_dcmpgt>
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	f040 829c 	bne.w	8011458 <_dtoa_r+0x998>
 8010f20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010f26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010f2a:	f7ef fd69 	bl	8000a00 <__aeabi_dcmplt>
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	f040 8290 	bne.w	8011454 <_dtoa_r+0x994>
 8010f34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8010f38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010f3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	f2c0 8152 	blt.w	80111e8 <_dtoa_r+0x728>
 8010f44:	f1ba 0f0e 	cmp.w	sl, #14
 8010f48:	f300 814e 	bgt.w	80111e8 <_dtoa_r+0x728>
 8010f4c:	4b45      	ldr	r3, [pc, #276]	; (8011064 <_dtoa_r+0x5a4>)
 8010f4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010f52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010f56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8010f5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f280 80db 	bge.w	8011118 <_dtoa_r+0x658>
 8010f62:	9b08      	ldr	r3, [sp, #32]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	f300 80d7 	bgt.w	8011118 <_dtoa_r+0x658>
 8010f6a:	f040 8272 	bne.w	8011452 <_dtoa_r+0x992>
 8010f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f72:	2200      	movs	r2, #0
 8010f74:	4b40      	ldr	r3, [pc, #256]	; (8011078 <_dtoa_r+0x5b8>)
 8010f76:	f7ef fad1 	bl	800051c <__aeabi_dmul>
 8010f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f7e:	f7ef fd53 	bl	8000a28 <__aeabi_dcmpge>
 8010f82:	9c08      	ldr	r4, [sp, #32]
 8010f84:	4626      	mov	r6, r4
 8010f86:	2800      	cmp	r0, #0
 8010f88:	f040 8248 	bne.w	801141c <_dtoa_r+0x95c>
 8010f8c:	2331      	movs	r3, #49	; 0x31
 8010f8e:	9f03      	ldr	r7, [sp, #12]
 8010f90:	f10a 0a01 	add.w	sl, sl, #1
 8010f94:	f807 3b01 	strb.w	r3, [r7], #1
 8010f98:	e244      	b.n	8011424 <_dtoa_r+0x964>
 8010f9a:	07e2      	lsls	r2, r4, #31
 8010f9c:	d505      	bpl.n	8010faa <_dtoa_r+0x4ea>
 8010f9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010fa2:	f7ef fabb 	bl	800051c <__aeabi_dmul>
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	3701      	adds	r7, #1
 8010faa:	1064      	asrs	r4, r4, #1
 8010fac:	3608      	adds	r6, #8
 8010fae:	e76d      	b.n	8010e8c <_dtoa_r+0x3cc>
 8010fb0:	2702      	movs	r7, #2
 8010fb2:	e770      	b.n	8010e96 <_dtoa_r+0x3d6>
 8010fb4:	46d0      	mov	r8, sl
 8010fb6:	9c08      	ldr	r4, [sp, #32]
 8010fb8:	e78f      	b.n	8010eda <_dtoa_r+0x41a>
 8010fba:	9903      	ldr	r1, [sp, #12]
 8010fbc:	4b29      	ldr	r3, [pc, #164]	; (8011064 <_dtoa_r+0x5a4>)
 8010fbe:	4421      	add	r1, r4
 8010fc0:	9112      	str	r1, [sp, #72]	; 0x48
 8010fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010fc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010fc8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010fcc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010fd0:	2900      	cmp	r1, #0
 8010fd2:	d055      	beq.n	8011080 <_dtoa_r+0x5c0>
 8010fd4:	2000      	movs	r0, #0
 8010fd6:	4929      	ldr	r1, [pc, #164]	; (801107c <_dtoa_r+0x5bc>)
 8010fd8:	f7ef fbca 	bl	8000770 <__aeabi_ddiv>
 8010fdc:	463b      	mov	r3, r7
 8010fde:	4632      	mov	r2, r6
 8010fe0:	f7ef f8e4 	bl	80001ac <__aeabi_dsub>
 8010fe4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010fe8:	9f03      	ldr	r7, [sp, #12]
 8010fea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010fee:	f7ef fd45 	bl	8000a7c <__aeabi_d2iz>
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	f7ef fa28 	bl	8000448 <__aeabi_i2d>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	460b      	mov	r3, r1
 8010ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011000:	f7ef f8d4 	bl	80001ac <__aeabi_dsub>
 8011004:	4602      	mov	r2, r0
 8011006:	460b      	mov	r3, r1
 8011008:	3430      	adds	r4, #48	; 0x30
 801100a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801100e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011012:	f807 4b01 	strb.w	r4, [r7], #1
 8011016:	f7ef fcf3 	bl	8000a00 <__aeabi_dcmplt>
 801101a:	2800      	cmp	r0, #0
 801101c:	d174      	bne.n	8011108 <_dtoa_r+0x648>
 801101e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011022:	2000      	movs	r0, #0
 8011024:	4911      	ldr	r1, [pc, #68]	; (801106c <_dtoa_r+0x5ac>)
 8011026:	f7ef f8c1 	bl	80001ac <__aeabi_dsub>
 801102a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801102e:	f7ef fce7 	bl	8000a00 <__aeabi_dcmplt>
 8011032:	2800      	cmp	r0, #0
 8011034:	f040 80b7 	bne.w	80111a6 <_dtoa_r+0x6e6>
 8011038:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801103a:	429f      	cmp	r7, r3
 801103c:	f43f af7a 	beq.w	8010f34 <_dtoa_r+0x474>
 8011040:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011044:	2200      	movs	r2, #0
 8011046:	4b0a      	ldr	r3, [pc, #40]	; (8011070 <_dtoa_r+0x5b0>)
 8011048:	f7ef fa68 	bl	800051c <__aeabi_dmul>
 801104c:	2200      	movs	r2, #0
 801104e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011056:	4b06      	ldr	r3, [pc, #24]	; (8011070 <_dtoa_r+0x5b0>)
 8011058:	f7ef fa60 	bl	800051c <__aeabi_dmul>
 801105c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011060:	e7c3      	b.n	8010fea <_dtoa_r+0x52a>
 8011062:	bf00      	nop
 8011064:	08013db8 	.word	0x08013db8
 8011068:	08013d90 	.word	0x08013d90
 801106c:	3ff00000 	.word	0x3ff00000
 8011070:	40240000 	.word	0x40240000
 8011074:	401c0000 	.word	0x401c0000
 8011078:	40140000 	.word	0x40140000
 801107c:	3fe00000 	.word	0x3fe00000
 8011080:	4630      	mov	r0, r6
 8011082:	4639      	mov	r1, r7
 8011084:	f7ef fa4a 	bl	800051c <__aeabi_dmul>
 8011088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801108a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801108e:	9c03      	ldr	r4, [sp, #12]
 8011090:	9314      	str	r3, [sp, #80]	; 0x50
 8011092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011096:	f7ef fcf1 	bl	8000a7c <__aeabi_d2iz>
 801109a:	9015      	str	r0, [sp, #84]	; 0x54
 801109c:	f7ef f9d4 	bl	8000448 <__aeabi_i2d>
 80110a0:	4602      	mov	r2, r0
 80110a2:	460b      	mov	r3, r1
 80110a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80110a8:	f7ef f880 	bl	80001ac <__aeabi_dsub>
 80110ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110ae:	4606      	mov	r6, r0
 80110b0:	3330      	adds	r3, #48	; 0x30
 80110b2:	f804 3b01 	strb.w	r3, [r4], #1
 80110b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80110b8:	460f      	mov	r7, r1
 80110ba:	429c      	cmp	r4, r3
 80110bc:	f04f 0200 	mov.w	r2, #0
 80110c0:	d124      	bne.n	801110c <_dtoa_r+0x64c>
 80110c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80110c6:	4bb0      	ldr	r3, [pc, #704]	; (8011388 <_dtoa_r+0x8c8>)
 80110c8:	f7ef f872 	bl	80001b0 <__adddf3>
 80110cc:	4602      	mov	r2, r0
 80110ce:	460b      	mov	r3, r1
 80110d0:	4630      	mov	r0, r6
 80110d2:	4639      	mov	r1, r7
 80110d4:	f7ef fcb2 	bl	8000a3c <__aeabi_dcmpgt>
 80110d8:	2800      	cmp	r0, #0
 80110da:	d163      	bne.n	80111a4 <_dtoa_r+0x6e4>
 80110dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80110e0:	2000      	movs	r0, #0
 80110e2:	49a9      	ldr	r1, [pc, #676]	; (8011388 <_dtoa_r+0x8c8>)
 80110e4:	f7ef f862 	bl	80001ac <__aeabi_dsub>
 80110e8:	4602      	mov	r2, r0
 80110ea:	460b      	mov	r3, r1
 80110ec:	4630      	mov	r0, r6
 80110ee:	4639      	mov	r1, r7
 80110f0:	f7ef fc86 	bl	8000a00 <__aeabi_dcmplt>
 80110f4:	2800      	cmp	r0, #0
 80110f6:	f43f af1d 	beq.w	8010f34 <_dtoa_r+0x474>
 80110fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80110fc:	1e7b      	subs	r3, r7, #1
 80110fe:	9314      	str	r3, [sp, #80]	; 0x50
 8011100:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8011104:	2b30      	cmp	r3, #48	; 0x30
 8011106:	d0f8      	beq.n	80110fa <_dtoa_r+0x63a>
 8011108:	46c2      	mov	sl, r8
 801110a:	e03b      	b.n	8011184 <_dtoa_r+0x6c4>
 801110c:	4b9f      	ldr	r3, [pc, #636]	; (801138c <_dtoa_r+0x8cc>)
 801110e:	f7ef fa05 	bl	800051c <__aeabi_dmul>
 8011112:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011116:	e7bc      	b.n	8011092 <_dtoa_r+0x5d2>
 8011118:	9f03      	ldr	r7, [sp, #12]
 801111a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801111e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011122:	4640      	mov	r0, r8
 8011124:	4649      	mov	r1, r9
 8011126:	f7ef fb23 	bl	8000770 <__aeabi_ddiv>
 801112a:	f7ef fca7 	bl	8000a7c <__aeabi_d2iz>
 801112e:	4604      	mov	r4, r0
 8011130:	f7ef f98a 	bl	8000448 <__aeabi_i2d>
 8011134:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011138:	f7ef f9f0 	bl	800051c <__aeabi_dmul>
 801113c:	4602      	mov	r2, r0
 801113e:	460b      	mov	r3, r1
 8011140:	4640      	mov	r0, r8
 8011142:	4649      	mov	r1, r9
 8011144:	f7ef f832 	bl	80001ac <__aeabi_dsub>
 8011148:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801114c:	f807 6b01 	strb.w	r6, [r7], #1
 8011150:	9e03      	ldr	r6, [sp, #12]
 8011152:	f8dd c020 	ldr.w	ip, [sp, #32]
 8011156:	1bbe      	subs	r6, r7, r6
 8011158:	45b4      	cmp	ip, r6
 801115a:	4602      	mov	r2, r0
 801115c:	460b      	mov	r3, r1
 801115e:	d136      	bne.n	80111ce <_dtoa_r+0x70e>
 8011160:	f7ef f826 	bl	80001b0 <__adddf3>
 8011164:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011168:	4680      	mov	r8, r0
 801116a:	4689      	mov	r9, r1
 801116c:	f7ef fc66 	bl	8000a3c <__aeabi_dcmpgt>
 8011170:	bb58      	cbnz	r0, 80111ca <_dtoa_r+0x70a>
 8011172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011176:	4640      	mov	r0, r8
 8011178:	4649      	mov	r1, r9
 801117a:	f7ef fc37 	bl	80009ec <__aeabi_dcmpeq>
 801117e:	b108      	cbz	r0, 8011184 <_dtoa_r+0x6c4>
 8011180:	07e1      	lsls	r1, r4, #31
 8011182:	d422      	bmi.n	80111ca <_dtoa_r+0x70a>
 8011184:	4628      	mov	r0, r5
 8011186:	4659      	mov	r1, fp
 8011188:	f000 fe6c 	bl	8011e64 <_Bfree>
 801118c:	2300      	movs	r3, #0
 801118e:	703b      	strb	r3, [r7, #0]
 8011190:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011192:	f10a 0001 	add.w	r0, sl, #1
 8011196:	6018      	str	r0, [r3, #0]
 8011198:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801119a:	2b00      	cmp	r3, #0
 801119c:	f43f acde 	beq.w	8010b5c <_dtoa_r+0x9c>
 80111a0:	601f      	str	r7, [r3, #0]
 80111a2:	e4db      	b.n	8010b5c <_dtoa_r+0x9c>
 80111a4:	4627      	mov	r7, r4
 80111a6:	463b      	mov	r3, r7
 80111a8:	461f      	mov	r7, r3
 80111aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111ae:	2a39      	cmp	r2, #57	; 0x39
 80111b0:	d107      	bne.n	80111c2 <_dtoa_r+0x702>
 80111b2:	9a03      	ldr	r2, [sp, #12]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d1f7      	bne.n	80111a8 <_dtoa_r+0x6e8>
 80111b8:	2230      	movs	r2, #48	; 0x30
 80111ba:	9903      	ldr	r1, [sp, #12]
 80111bc:	f108 0801 	add.w	r8, r8, #1
 80111c0:	700a      	strb	r2, [r1, #0]
 80111c2:	781a      	ldrb	r2, [r3, #0]
 80111c4:	3201      	adds	r2, #1
 80111c6:	701a      	strb	r2, [r3, #0]
 80111c8:	e79e      	b.n	8011108 <_dtoa_r+0x648>
 80111ca:	46d0      	mov	r8, sl
 80111cc:	e7eb      	b.n	80111a6 <_dtoa_r+0x6e6>
 80111ce:	2200      	movs	r2, #0
 80111d0:	4b6e      	ldr	r3, [pc, #440]	; (801138c <_dtoa_r+0x8cc>)
 80111d2:	f7ef f9a3 	bl	800051c <__aeabi_dmul>
 80111d6:	2200      	movs	r2, #0
 80111d8:	2300      	movs	r3, #0
 80111da:	4680      	mov	r8, r0
 80111dc:	4689      	mov	r9, r1
 80111de:	f7ef fc05 	bl	80009ec <__aeabi_dcmpeq>
 80111e2:	2800      	cmp	r0, #0
 80111e4:	d09b      	beq.n	801111e <_dtoa_r+0x65e>
 80111e6:	e7cd      	b.n	8011184 <_dtoa_r+0x6c4>
 80111e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111ea:	2a00      	cmp	r2, #0
 80111ec:	f000 80d0 	beq.w	8011390 <_dtoa_r+0x8d0>
 80111f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80111f2:	2a01      	cmp	r2, #1
 80111f4:	f300 80ae 	bgt.w	8011354 <_dtoa_r+0x894>
 80111f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80111fa:	2a00      	cmp	r2, #0
 80111fc:	f000 80a6 	beq.w	801134c <_dtoa_r+0x88c>
 8011200:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011204:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011206:	9f06      	ldr	r7, [sp, #24]
 8011208:	9a06      	ldr	r2, [sp, #24]
 801120a:	2101      	movs	r1, #1
 801120c:	441a      	add	r2, r3
 801120e:	9206      	str	r2, [sp, #24]
 8011210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011212:	4628      	mov	r0, r5
 8011214:	441a      	add	r2, r3
 8011216:	9209      	str	r2, [sp, #36]	; 0x24
 8011218:	f000 ff24 	bl	8012064 <__i2b>
 801121c:	4606      	mov	r6, r0
 801121e:	2f00      	cmp	r7, #0
 8011220:	dd0c      	ble.n	801123c <_dtoa_r+0x77c>
 8011222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011224:	2b00      	cmp	r3, #0
 8011226:	dd09      	ble.n	801123c <_dtoa_r+0x77c>
 8011228:	42bb      	cmp	r3, r7
 801122a:	bfa8      	it	ge
 801122c:	463b      	movge	r3, r7
 801122e:	9a06      	ldr	r2, [sp, #24]
 8011230:	1aff      	subs	r7, r7, r3
 8011232:	1ad2      	subs	r2, r2, r3
 8011234:	9206      	str	r2, [sp, #24]
 8011236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	9309      	str	r3, [sp, #36]	; 0x24
 801123c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801123e:	b1f3      	cbz	r3, 801127e <_dtoa_r+0x7be>
 8011240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011242:	2b00      	cmp	r3, #0
 8011244:	f000 80a8 	beq.w	8011398 <_dtoa_r+0x8d8>
 8011248:	2c00      	cmp	r4, #0
 801124a:	dd10      	ble.n	801126e <_dtoa_r+0x7ae>
 801124c:	4631      	mov	r1, r6
 801124e:	4622      	mov	r2, r4
 8011250:	4628      	mov	r0, r5
 8011252:	f000 ffc5 	bl	80121e0 <__pow5mult>
 8011256:	465a      	mov	r2, fp
 8011258:	4601      	mov	r1, r0
 801125a:	4606      	mov	r6, r0
 801125c:	4628      	mov	r0, r5
 801125e:	f000 ff17 	bl	8012090 <__multiply>
 8011262:	4680      	mov	r8, r0
 8011264:	4659      	mov	r1, fp
 8011266:	4628      	mov	r0, r5
 8011268:	f000 fdfc 	bl	8011e64 <_Bfree>
 801126c:	46c3      	mov	fp, r8
 801126e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011270:	1b1a      	subs	r2, r3, r4
 8011272:	d004      	beq.n	801127e <_dtoa_r+0x7be>
 8011274:	4659      	mov	r1, fp
 8011276:	4628      	mov	r0, r5
 8011278:	f000 ffb2 	bl	80121e0 <__pow5mult>
 801127c:	4683      	mov	fp, r0
 801127e:	2101      	movs	r1, #1
 8011280:	4628      	mov	r0, r5
 8011282:	f000 feef 	bl	8012064 <__i2b>
 8011286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011288:	4604      	mov	r4, r0
 801128a:	2b00      	cmp	r3, #0
 801128c:	f340 8086 	ble.w	801139c <_dtoa_r+0x8dc>
 8011290:	461a      	mov	r2, r3
 8011292:	4601      	mov	r1, r0
 8011294:	4628      	mov	r0, r5
 8011296:	f000 ffa3 	bl	80121e0 <__pow5mult>
 801129a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801129c:	4604      	mov	r4, r0
 801129e:	2b01      	cmp	r3, #1
 80112a0:	dd7f      	ble.n	80113a2 <_dtoa_r+0x8e2>
 80112a2:	f04f 0800 	mov.w	r8, #0
 80112a6:	6923      	ldr	r3, [r4, #16]
 80112a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80112ac:	6918      	ldr	r0, [r3, #16]
 80112ae:	f000 fe8b 	bl	8011fc8 <__hi0bits>
 80112b2:	f1c0 0020 	rsb	r0, r0, #32
 80112b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112b8:	4418      	add	r0, r3
 80112ba:	f010 001f 	ands.w	r0, r0, #31
 80112be:	f000 8092 	beq.w	80113e6 <_dtoa_r+0x926>
 80112c2:	f1c0 0320 	rsb	r3, r0, #32
 80112c6:	2b04      	cmp	r3, #4
 80112c8:	f340 808a 	ble.w	80113e0 <_dtoa_r+0x920>
 80112cc:	f1c0 001c 	rsb	r0, r0, #28
 80112d0:	9b06      	ldr	r3, [sp, #24]
 80112d2:	4407      	add	r7, r0
 80112d4:	4403      	add	r3, r0
 80112d6:	9306      	str	r3, [sp, #24]
 80112d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112da:	4403      	add	r3, r0
 80112dc:	9309      	str	r3, [sp, #36]	; 0x24
 80112de:	9b06      	ldr	r3, [sp, #24]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	dd05      	ble.n	80112f0 <_dtoa_r+0x830>
 80112e4:	4659      	mov	r1, fp
 80112e6:	461a      	mov	r2, r3
 80112e8:	4628      	mov	r0, r5
 80112ea:	f000 ffd3 	bl	8012294 <__lshift>
 80112ee:	4683      	mov	fp, r0
 80112f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	dd05      	ble.n	8011302 <_dtoa_r+0x842>
 80112f6:	4621      	mov	r1, r4
 80112f8:	461a      	mov	r2, r3
 80112fa:	4628      	mov	r0, r5
 80112fc:	f000 ffca 	bl	8012294 <__lshift>
 8011300:	4604      	mov	r4, r0
 8011302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011304:	2b00      	cmp	r3, #0
 8011306:	d070      	beq.n	80113ea <_dtoa_r+0x92a>
 8011308:	4621      	mov	r1, r4
 801130a:	4658      	mov	r0, fp
 801130c:	f001 f832 	bl	8012374 <__mcmp>
 8011310:	2800      	cmp	r0, #0
 8011312:	da6a      	bge.n	80113ea <_dtoa_r+0x92a>
 8011314:	2300      	movs	r3, #0
 8011316:	4659      	mov	r1, fp
 8011318:	220a      	movs	r2, #10
 801131a:	4628      	mov	r0, r5
 801131c:	f000 fdc4 	bl	8011ea8 <__multadd>
 8011320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011322:	4683      	mov	fp, r0
 8011324:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011328:	2b00      	cmp	r3, #0
 801132a:	f000 8194 	beq.w	8011656 <_dtoa_r+0xb96>
 801132e:	4631      	mov	r1, r6
 8011330:	2300      	movs	r3, #0
 8011332:	220a      	movs	r2, #10
 8011334:	4628      	mov	r0, r5
 8011336:	f000 fdb7 	bl	8011ea8 <__multadd>
 801133a:	f1b9 0f00 	cmp.w	r9, #0
 801133e:	4606      	mov	r6, r0
 8011340:	f300 8093 	bgt.w	801146a <_dtoa_r+0x9aa>
 8011344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011346:	2b02      	cmp	r3, #2
 8011348:	dc57      	bgt.n	80113fa <_dtoa_r+0x93a>
 801134a:	e08e      	b.n	801146a <_dtoa_r+0x9aa>
 801134c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801134e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011352:	e757      	b.n	8011204 <_dtoa_r+0x744>
 8011354:	9b08      	ldr	r3, [sp, #32]
 8011356:	1e5c      	subs	r4, r3, #1
 8011358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801135a:	42a3      	cmp	r3, r4
 801135c:	bfb7      	itett	lt
 801135e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011360:	1b1c      	subge	r4, r3, r4
 8011362:	1ae2      	sublt	r2, r4, r3
 8011364:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011366:	bfbe      	ittt	lt
 8011368:	940a      	strlt	r4, [sp, #40]	; 0x28
 801136a:	189b      	addlt	r3, r3, r2
 801136c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801136e:	9b08      	ldr	r3, [sp, #32]
 8011370:	bfb8      	it	lt
 8011372:	2400      	movlt	r4, #0
 8011374:	2b00      	cmp	r3, #0
 8011376:	bfbb      	ittet	lt
 8011378:	9b06      	ldrlt	r3, [sp, #24]
 801137a:	9a08      	ldrlt	r2, [sp, #32]
 801137c:	9f06      	ldrge	r7, [sp, #24]
 801137e:	1a9f      	sublt	r7, r3, r2
 8011380:	bfac      	ite	ge
 8011382:	9b08      	ldrge	r3, [sp, #32]
 8011384:	2300      	movlt	r3, #0
 8011386:	e73f      	b.n	8011208 <_dtoa_r+0x748>
 8011388:	3fe00000 	.word	0x3fe00000
 801138c:	40240000 	.word	0x40240000
 8011390:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011392:	9f06      	ldr	r7, [sp, #24]
 8011394:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011396:	e742      	b.n	801121e <_dtoa_r+0x75e>
 8011398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801139a:	e76b      	b.n	8011274 <_dtoa_r+0x7b4>
 801139c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801139e:	2b01      	cmp	r3, #1
 80113a0:	dc19      	bgt.n	80113d6 <_dtoa_r+0x916>
 80113a2:	9b04      	ldr	r3, [sp, #16]
 80113a4:	b9bb      	cbnz	r3, 80113d6 <_dtoa_r+0x916>
 80113a6:	9b05      	ldr	r3, [sp, #20]
 80113a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80113ac:	b99b      	cbnz	r3, 80113d6 <_dtoa_r+0x916>
 80113ae:	9b05      	ldr	r3, [sp, #20]
 80113b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80113b4:	0d1b      	lsrs	r3, r3, #20
 80113b6:	051b      	lsls	r3, r3, #20
 80113b8:	b183      	cbz	r3, 80113dc <_dtoa_r+0x91c>
 80113ba:	f04f 0801 	mov.w	r8, #1
 80113be:	9b06      	ldr	r3, [sp, #24]
 80113c0:	3301      	adds	r3, #1
 80113c2:	9306      	str	r3, [sp, #24]
 80113c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113c6:	3301      	adds	r3, #1
 80113c8:	9309      	str	r3, [sp, #36]	; 0x24
 80113ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	f47f af6a 	bne.w	80112a6 <_dtoa_r+0x7e6>
 80113d2:	2001      	movs	r0, #1
 80113d4:	e76f      	b.n	80112b6 <_dtoa_r+0x7f6>
 80113d6:	f04f 0800 	mov.w	r8, #0
 80113da:	e7f6      	b.n	80113ca <_dtoa_r+0x90a>
 80113dc:	4698      	mov	r8, r3
 80113de:	e7f4      	b.n	80113ca <_dtoa_r+0x90a>
 80113e0:	f43f af7d 	beq.w	80112de <_dtoa_r+0x81e>
 80113e4:	4618      	mov	r0, r3
 80113e6:	301c      	adds	r0, #28
 80113e8:	e772      	b.n	80112d0 <_dtoa_r+0x810>
 80113ea:	9b08      	ldr	r3, [sp, #32]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	dc36      	bgt.n	801145e <_dtoa_r+0x99e>
 80113f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80113f2:	2b02      	cmp	r3, #2
 80113f4:	dd33      	ble.n	801145e <_dtoa_r+0x99e>
 80113f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80113fa:	f1b9 0f00 	cmp.w	r9, #0
 80113fe:	d10d      	bne.n	801141c <_dtoa_r+0x95c>
 8011400:	4621      	mov	r1, r4
 8011402:	464b      	mov	r3, r9
 8011404:	2205      	movs	r2, #5
 8011406:	4628      	mov	r0, r5
 8011408:	f000 fd4e 	bl	8011ea8 <__multadd>
 801140c:	4601      	mov	r1, r0
 801140e:	4604      	mov	r4, r0
 8011410:	4658      	mov	r0, fp
 8011412:	f000 ffaf 	bl	8012374 <__mcmp>
 8011416:	2800      	cmp	r0, #0
 8011418:	f73f adb8 	bgt.w	8010f8c <_dtoa_r+0x4cc>
 801141c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801141e:	9f03      	ldr	r7, [sp, #12]
 8011420:	ea6f 0a03 	mvn.w	sl, r3
 8011424:	f04f 0800 	mov.w	r8, #0
 8011428:	4621      	mov	r1, r4
 801142a:	4628      	mov	r0, r5
 801142c:	f000 fd1a 	bl	8011e64 <_Bfree>
 8011430:	2e00      	cmp	r6, #0
 8011432:	f43f aea7 	beq.w	8011184 <_dtoa_r+0x6c4>
 8011436:	f1b8 0f00 	cmp.w	r8, #0
 801143a:	d005      	beq.n	8011448 <_dtoa_r+0x988>
 801143c:	45b0      	cmp	r8, r6
 801143e:	d003      	beq.n	8011448 <_dtoa_r+0x988>
 8011440:	4641      	mov	r1, r8
 8011442:	4628      	mov	r0, r5
 8011444:	f000 fd0e 	bl	8011e64 <_Bfree>
 8011448:	4631      	mov	r1, r6
 801144a:	4628      	mov	r0, r5
 801144c:	f000 fd0a 	bl	8011e64 <_Bfree>
 8011450:	e698      	b.n	8011184 <_dtoa_r+0x6c4>
 8011452:	2400      	movs	r4, #0
 8011454:	4626      	mov	r6, r4
 8011456:	e7e1      	b.n	801141c <_dtoa_r+0x95c>
 8011458:	46c2      	mov	sl, r8
 801145a:	4626      	mov	r6, r4
 801145c:	e596      	b.n	8010f8c <_dtoa_r+0x4cc>
 801145e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011464:	2b00      	cmp	r3, #0
 8011466:	f000 80fd 	beq.w	8011664 <_dtoa_r+0xba4>
 801146a:	2f00      	cmp	r7, #0
 801146c:	dd05      	ble.n	801147a <_dtoa_r+0x9ba>
 801146e:	4631      	mov	r1, r6
 8011470:	463a      	mov	r2, r7
 8011472:	4628      	mov	r0, r5
 8011474:	f000 ff0e 	bl	8012294 <__lshift>
 8011478:	4606      	mov	r6, r0
 801147a:	f1b8 0f00 	cmp.w	r8, #0
 801147e:	d05c      	beq.n	801153a <_dtoa_r+0xa7a>
 8011480:	4628      	mov	r0, r5
 8011482:	6871      	ldr	r1, [r6, #4]
 8011484:	f000 fcae 	bl	8011de4 <_Balloc>
 8011488:	4607      	mov	r7, r0
 801148a:	b928      	cbnz	r0, 8011498 <_dtoa_r+0x9d8>
 801148c:	4602      	mov	r2, r0
 801148e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011492:	4b7f      	ldr	r3, [pc, #508]	; (8011690 <_dtoa_r+0xbd0>)
 8011494:	f7ff bb28 	b.w	8010ae8 <_dtoa_r+0x28>
 8011498:	6932      	ldr	r2, [r6, #16]
 801149a:	f106 010c 	add.w	r1, r6, #12
 801149e:	3202      	adds	r2, #2
 80114a0:	0092      	lsls	r2, r2, #2
 80114a2:	300c      	adds	r0, #12
 80114a4:	f7fd ff4e 	bl	800f344 <memcpy>
 80114a8:	2201      	movs	r2, #1
 80114aa:	4639      	mov	r1, r7
 80114ac:	4628      	mov	r0, r5
 80114ae:	f000 fef1 	bl	8012294 <__lshift>
 80114b2:	46b0      	mov	r8, r6
 80114b4:	4606      	mov	r6, r0
 80114b6:	9b03      	ldr	r3, [sp, #12]
 80114b8:	3301      	adds	r3, #1
 80114ba:	9308      	str	r3, [sp, #32]
 80114bc:	9b03      	ldr	r3, [sp, #12]
 80114be:	444b      	add	r3, r9
 80114c0:	930a      	str	r3, [sp, #40]	; 0x28
 80114c2:	9b04      	ldr	r3, [sp, #16]
 80114c4:	f003 0301 	and.w	r3, r3, #1
 80114c8:	9309      	str	r3, [sp, #36]	; 0x24
 80114ca:	9b08      	ldr	r3, [sp, #32]
 80114cc:	4621      	mov	r1, r4
 80114ce:	3b01      	subs	r3, #1
 80114d0:	4658      	mov	r0, fp
 80114d2:	9304      	str	r3, [sp, #16]
 80114d4:	f7ff fa66 	bl	80109a4 <quorem>
 80114d8:	4603      	mov	r3, r0
 80114da:	4641      	mov	r1, r8
 80114dc:	3330      	adds	r3, #48	; 0x30
 80114de:	9006      	str	r0, [sp, #24]
 80114e0:	4658      	mov	r0, fp
 80114e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80114e4:	f000 ff46 	bl	8012374 <__mcmp>
 80114e8:	4632      	mov	r2, r6
 80114ea:	4681      	mov	r9, r0
 80114ec:	4621      	mov	r1, r4
 80114ee:	4628      	mov	r0, r5
 80114f0:	f000 ff5c 	bl	80123ac <__mdiff>
 80114f4:	68c2      	ldr	r2, [r0, #12]
 80114f6:	4607      	mov	r7, r0
 80114f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114fa:	bb02      	cbnz	r2, 801153e <_dtoa_r+0xa7e>
 80114fc:	4601      	mov	r1, r0
 80114fe:	4658      	mov	r0, fp
 8011500:	f000 ff38 	bl	8012374 <__mcmp>
 8011504:	4602      	mov	r2, r0
 8011506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011508:	4639      	mov	r1, r7
 801150a:	4628      	mov	r0, r5
 801150c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8011510:	f000 fca8 	bl	8011e64 <_Bfree>
 8011514:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011518:	9f08      	ldr	r7, [sp, #32]
 801151a:	ea43 0102 	orr.w	r1, r3, r2
 801151e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011520:	430b      	orrs	r3, r1
 8011522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011524:	d10d      	bne.n	8011542 <_dtoa_r+0xa82>
 8011526:	2b39      	cmp	r3, #57	; 0x39
 8011528:	d029      	beq.n	801157e <_dtoa_r+0xabe>
 801152a:	f1b9 0f00 	cmp.w	r9, #0
 801152e:	dd01      	ble.n	8011534 <_dtoa_r+0xa74>
 8011530:	9b06      	ldr	r3, [sp, #24]
 8011532:	3331      	adds	r3, #49	; 0x31
 8011534:	9a04      	ldr	r2, [sp, #16]
 8011536:	7013      	strb	r3, [r2, #0]
 8011538:	e776      	b.n	8011428 <_dtoa_r+0x968>
 801153a:	4630      	mov	r0, r6
 801153c:	e7b9      	b.n	80114b2 <_dtoa_r+0x9f2>
 801153e:	2201      	movs	r2, #1
 8011540:	e7e2      	b.n	8011508 <_dtoa_r+0xa48>
 8011542:	f1b9 0f00 	cmp.w	r9, #0
 8011546:	db06      	blt.n	8011556 <_dtoa_r+0xa96>
 8011548:	9922      	ldr	r1, [sp, #136]	; 0x88
 801154a:	ea41 0909 	orr.w	r9, r1, r9
 801154e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011550:	ea59 0101 	orrs.w	r1, r9, r1
 8011554:	d120      	bne.n	8011598 <_dtoa_r+0xad8>
 8011556:	2a00      	cmp	r2, #0
 8011558:	ddec      	ble.n	8011534 <_dtoa_r+0xa74>
 801155a:	4659      	mov	r1, fp
 801155c:	2201      	movs	r2, #1
 801155e:	4628      	mov	r0, r5
 8011560:	9308      	str	r3, [sp, #32]
 8011562:	f000 fe97 	bl	8012294 <__lshift>
 8011566:	4621      	mov	r1, r4
 8011568:	4683      	mov	fp, r0
 801156a:	f000 ff03 	bl	8012374 <__mcmp>
 801156e:	2800      	cmp	r0, #0
 8011570:	9b08      	ldr	r3, [sp, #32]
 8011572:	dc02      	bgt.n	801157a <_dtoa_r+0xaba>
 8011574:	d1de      	bne.n	8011534 <_dtoa_r+0xa74>
 8011576:	07da      	lsls	r2, r3, #31
 8011578:	d5dc      	bpl.n	8011534 <_dtoa_r+0xa74>
 801157a:	2b39      	cmp	r3, #57	; 0x39
 801157c:	d1d8      	bne.n	8011530 <_dtoa_r+0xa70>
 801157e:	2339      	movs	r3, #57	; 0x39
 8011580:	9a04      	ldr	r2, [sp, #16]
 8011582:	7013      	strb	r3, [r2, #0]
 8011584:	463b      	mov	r3, r7
 8011586:	461f      	mov	r7, r3
 8011588:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801158c:	3b01      	subs	r3, #1
 801158e:	2a39      	cmp	r2, #57	; 0x39
 8011590:	d050      	beq.n	8011634 <_dtoa_r+0xb74>
 8011592:	3201      	adds	r2, #1
 8011594:	701a      	strb	r2, [r3, #0]
 8011596:	e747      	b.n	8011428 <_dtoa_r+0x968>
 8011598:	2a00      	cmp	r2, #0
 801159a:	dd03      	ble.n	80115a4 <_dtoa_r+0xae4>
 801159c:	2b39      	cmp	r3, #57	; 0x39
 801159e:	d0ee      	beq.n	801157e <_dtoa_r+0xabe>
 80115a0:	3301      	adds	r3, #1
 80115a2:	e7c7      	b.n	8011534 <_dtoa_r+0xa74>
 80115a4:	9a08      	ldr	r2, [sp, #32]
 80115a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80115a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80115ac:	428a      	cmp	r2, r1
 80115ae:	d02a      	beq.n	8011606 <_dtoa_r+0xb46>
 80115b0:	4659      	mov	r1, fp
 80115b2:	2300      	movs	r3, #0
 80115b4:	220a      	movs	r2, #10
 80115b6:	4628      	mov	r0, r5
 80115b8:	f000 fc76 	bl	8011ea8 <__multadd>
 80115bc:	45b0      	cmp	r8, r6
 80115be:	4683      	mov	fp, r0
 80115c0:	f04f 0300 	mov.w	r3, #0
 80115c4:	f04f 020a 	mov.w	r2, #10
 80115c8:	4641      	mov	r1, r8
 80115ca:	4628      	mov	r0, r5
 80115cc:	d107      	bne.n	80115de <_dtoa_r+0xb1e>
 80115ce:	f000 fc6b 	bl	8011ea8 <__multadd>
 80115d2:	4680      	mov	r8, r0
 80115d4:	4606      	mov	r6, r0
 80115d6:	9b08      	ldr	r3, [sp, #32]
 80115d8:	3301      	adds	r3, #1
 80115da:	9308      	str	r3, [sp, #32]
 80115dc:	e775      	b.n	80114ca <_dtoa_r+0xa0a>
 80115de:	f000 fc63 	bl	8011ea8 <__multadd>
 80115e2:	4631      	mov	r1, r6
 80115e4:	4680      	mov	r8, r0
 80115e6:	2300      	movs	r3, #0
 80115e8:	220a      	movs	r2, #10
 80115ea:	4628      	mov	r0, r5
 80115ec:	f000 fc5c 	bl	8011ea8 <__multadd>
 80115f0:	4606      	mov	r6, r0
 80115f2:	e7f0      	b.n	80115d6 <_dtoa_r+0xb16>
 80115f4:	f1b9 0f00 	cmp.w	r9, #0
 80115f8:	bfcc      	ite	gt
 80115fa:	464f      	movgt	r7, r9
 80115fc:	2701      	movle	r7, #1
 80115fe:	f04f 0800 	mov.w	r8, #0
 8011602:	9a03      	ldr	r2, [sp, #12]
 8011604:	4417      	add	r7, r2
 8011606:	4659      	mov	r1, fp
 8011608:	2201      	movs	r2, #1
 801160a:	4628      	mov	r0, r5
 801160c:	9308      	str	r3, [sp, #32]
 801160e:	f000 fe41 	bl	8012294 <__lshift>
 8011612:	4621      	mov	r1, r4
 8011614:	4683      	mov	fp, r0
 8011616:	f000 fead 	bl	8012374 <__mcmp>
 801161a:	2800      	cmp	r0, #0
 801161c:	dcb2      	bgt.n	8011584 <_dtoa_r+0xac4>
 801161e:	d102      	bne.n	8011626 <_dtoa_r+0xb66>
 8011620:	9b08      	ldr	r3, [sp, #32]
 8011622:	07db      	lsls	r3, r3, #31
 8011624:	d4ae      	bmi.n	8011584 <_dtoa_r+0xac4>
 8011626:	463b      	mov	r3, r7
 8011628:	461f      	mov	r7, r3
 801162a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801162e:	2a30      	cmp	r2, #48	; 0x30
 8011630:	d0fa      	beq.n	8011628 <_dtoa_r+0xb68>
 8011632:	e6f9      	b.n	8011428 <_dtoa_r+0x968>
 8011634:	9a03      	ldr	r2, [sp, #12]
 8011636:	429a      	cmp	r2, r3
 8011638:	d1a5      	bne.n	8011586 <_dtoa_r+0xac6>
 801163a:	2331      	movs	r3, #49	; 0x31
 801163c:	f10a 0a01 	add.w	sl, sl, #1
 8011640:	e779      	b.n	8011536 <_dtoa_r+0xa76>
 8011642:	4b14      	ldr	r3, [pc, #80]	; (8011694 <_dtoa_r+0xbd4>)
 8011644:	f7ff baa8 	b.w	8010b98 <_dtoa_r+0xd8>
 8011648:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801164a:	2b00      	cmp	r3, #0
 801164c:	f47f aa81 	bne.w	8010b52 <_dtoa_r+0x92>
 8011650:	4b11      	ldr	r3, [pc, #68]	; (8011698 <_dtoa_r+0xbd8>)
 8011652:	f7ff baa1 	b.w	8010b98 <_dtoa_r+0xd8>
 8011656:	f1b9 0f00 	cmp.w	r9, #0
 801165a:	dc03      	bgt.n	8011664 <_dtoa_r+0xba4>
 801165c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801165e:	2b02      	cmp	r3, #2
 8011660:	f73f aecb 	bgt.w	80113fa <_dtoa_r+0x93a>
 8011664:	9f03      	ldr	r7, [sp, #12]
 8011666:	4621      	mov	r1, r4
 8011668:	4658      	mov	r0, fp
 801166a:	f7ff f99b 	bl	80109a4 <quorem>
 801166e:	9a03      	ldr	r2, [sp, #12]
 8011670:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011674:	f807 3b01 	strb.w	r3, [r7], #1
 8011678:	1aba      	subs	r2, r7, r2
 801167a:	4591      	cmp	r9, r2
 801167c:	ddba      	ble.n	80115f4 <_dtoa_r+0xb34>
 801167e:	4659      	mov	r1, fp
 8011680:	2300      	movs	r3, #0
 8011682:	220a      	movs	r2, #10
 8011684:	4628      	mov	r0, r5
 8011686:	f000 fc0f 	bl	8011ea8 <__multadd>
 801168a:	4683      	mov	fp, r0
 801168c:	e7eb      	b.n	8011666 <_dtoa_r+0xba6>
 801168e:	bf00      	nop
 8011690:	08013ca8 	.word	0x08013ca8
 8011694:	08013b18 	.word	0x08013b18
 8011698:	08013c40 	.word	0x08013c40

0801169c <fiprintf>:
 801169c:	b40e      	push	{r1, r2, r3}
 801169e:	b503      	push	{r0, r1, lr}
 80116a0:	4601      	mov	r1, r0
 80116a2:	ab03      	add	r3, sp, #12
 80116a4:	4805      	ldr	r0, [pc, #20]	; (80116bc <fiprintf+0x20>)
 80116a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80116aa:	6800      	ldr	r0, [r0, #0]
 80116ac:	9301      	str	r3, [sp, #4]
 80116ae:	f001 fac5 	bl	8012c3c <_vfiprintf_r>
 80116b2:	b002      	add	sp, #8
 80116b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80116b8:	b003      	add	sp, #12
 80116ba:	4770      	bx	lr
 80116bc:	2000093c 	.word	0x2000093c

080116c0 <rshift>:
 80116c0:	6903      	ldr	r3, [r0, #16]
 80116c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80116ca:	f100 0414 	add.w	r4, r0, #20
 80116ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80116d2:	dd46      	ble.n	8011762 <rshift+0xa2>
 80116d4:	f011 011f 	ands.w	r1, r1, #31
 80116d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80116dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80116e0:	d10c      	bne.n	80116fc <rshift+0x3c>
 80116e2:	4629      	mov	r1, r5
 80116e4:	f100 0710 	add.w	r7, r0, #16
 80116e8:	42b1      	cmp	r1, r6
 80116ea:	d335      	bcc.n	8011758 <rshift+0x98>
 80116ec:	1a9b      	subs	r3, r3, r2
 80116ee:	009b      	lsls	r3, r3, #2
 80116f0:	1eea      	subs	r2, r5, #3
 80116f2:	4296      	cmp	r6, r2
 80116f4:	bf38      	it	cc
 80116f6:	2300      	movcc	r3, #0
 80116f8:	4423      	add	r3, r4
 80116fa:	e015      	b.n	8011728 <rshift+0x68>
 80116fc:	46a1      	mov	r9, r4
 80116fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011702:	f1c1 0820 	rsb	r8, r1, #32
 8011706:	40cf      	lsrs	r7, r1
 8011708:	f105 0e04 	add.w	lr, r5, #4
 801170c:	4576      	cmp	r6, lr
 801170e:	46f4      	mov	ip, lr
 8011710:	d816      	bhi.n	8011740 <rshift+0x80>
 8011712:	1a9a      	subs	r2, r3, r2
 8011714:	0092      	lsls	r2, r2, #2
 8011716:	3a04      	subs	r2, #4
 8011718:	3501      	adds	r5, #1
 801171a:	42ae      	cmp	r6, r5
 801171c:	bf38      	it	cc
 801171e:	2200      	movcc	r2, #0
 8011720:	18a3      	adds	r3, r4, r2
 8011722:	50a7      	str	r7, [r4, r2]
 8011724:	b107      	cbz	r7, 8011728 <rshift+0x68>
 8011726:	3304      	adds	r3, #4
 8011728:	42a3      	cmp	r3, r4
 801172a:	eba3 0204 	sub.w	r2, r3, r4
 801172e:	bf08      	it	eq
 8011730:	2300      	moveq	r3, #0
 8011732:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011736:	6102      	str	r2, [r0, #16]
 8011738:	bf08      	it	eq
 801173a:	6143      	streq	r3, [r0, #20]
 801173c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011740:	f8dc c000 	ldr.w	ip, [ip]
 8011744:	fa0c fc08 	lsl.w	ip, ip, r8
 8011748:	ea4c 0707 	orr.w	r7, ip, r7
 801174c:	f849 7b04 	str.w	r7, [r9], #4
 8011750:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011754:	40cf      	lsrs	r7, r1
 8011756:	e7d9      	b.n	801170c <rshift+0x4c>
 8011758:	f851 cb04 	ldr.w	ip, [r1], #4
 801175c:	f847 cf04 	str.w	ip, [r7, #4]!
 8011760:	e7c2      	b.n	80116e8 <rshift+0x28>
 8011762:	4623      	mov	r3, r4
 8011764:	e7e0      	b.n	8011728 <rshift+0x68>

08011766 <__hexdig_fun>:
 8011766:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801176a:	2b09      	cmp	r3, #9
 801176c:	d802      	bhi.n	8011774 <__hexdig_fun+0xe>
 801176e:	3820      	subs	r0, #32
 8011770:	b2c0      	uxtb	r0, r0
 8011772:	4770      	bx	lr
 8011774:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011778:	2b05      	cmp	r3, #5
 801177a:	d801      	bhi.n	8011780 <__hexdig_fun+0x1a>
 801177c:	3847      	subs	r0, #71	; 0x47
 801177e:	e7f7      	b.n	8011770 <__hexdig_fun+0xa>
 8011780:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011784:	2b05      	cmp	r3, #5
 8011786:	d801      	bhi.n	801178c <__hexdig_fun+0x26>
 8011788:	3827      	subs	r0, #39	; 0x27
 801178a:	e7f1      	b.n	8011770 <__hexdig_fun+0xa>
 801178c:	2000      	movs	r0, #0
 801178e:	4770      	bx	lr

08011790 <__gethex>:
 8011790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011794:	b08b      	sub	sp, #44	; 0x2c
 8011796:	9305      	str	r3, [sp, #20]
 8011798:	4bb2      	ldr	r3, [pc, #712]	; (8011a64 <__gethex+0x2d4>)
 801179a:	9002      	str	r0, [sp, #8]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	468b      	mov	fp, r1
 80117a0:	4618      	mov	r0, r3
 80117a2:	4690      	mov	r8, r2
 80117a4:	9303      	str	r3, [sp, #12]
 80117a6:	f7ee fcf5 	bl	8000194 <strlen>
 80117aa:	4682      	mov	sl, r0
 80117ac:	9b03      	ldr	r3, [sp, #12]
 80117ae:	f8db 2000 	ldr.w	r2, [fp]
 80117b2:	4403      	add	r3, r0
 80117b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80117b8:	9306      	str	r3, [sp, #24]
 80117ba:	1c93      	adds	r3, r2, #2
 80117bc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80117c0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80117c4:	32fe      	adds	r2, #254	; 0xfe
 80117c6:	18d1      	adds	r1, r2, r3
 80117c8:	461f      	mov	r7, r3
 80117ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80117ce:	9101      	str	r1, [sp, #4]
 80117d0:	2830      	cmp	r0, #48	; 0x30
 80117d2:	d0f8      	beq.n	80117c6 <__gethex+0x36>
 80117d4:	f7ff ffc7 	bl	8011766 <__hexdig_fun>
 80117d8:	4604      	mov	r4, r0
 80117da:	2800      	cmp	r0, #0
 80117dc:	d13a      	bne.n	8011854 <__gethex+0xc4>
 80117de:	4652      	mov	r2, sl
 80117e0:	4638      	mov	r0, r7
 80117e2:	9903      	ldr	r1, [sp, #12]
 80117e4:	f001 fb70 	bl	8012ec8 <strncmp>
 80117e8:	4605      	mov	r5, r0
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d166      	bne.n	80118bc <__gethex+0x12c>
 80117ee:	f817 000a 	ldrb.w	r0, [r7, sl]
 80117f2:	eb07 060a 	add.w	r6, r7, sl
 80117f6:	f7ff ffb6 	bl	8011766 <__hexdig_fun>
 80117fa:	2800      	cmp	r0, #0
 80117fc:	d060      	beq.n	80118c0 <__gethex+0x130>
 80117fe:	4633      	mov	r3, r6
 8011800:	7818      	ldrb	r0, [r3, #0]
 8011802:	461f      	mov	r7, r3
 8011804:	2830      	cmp	r0, #48	; 0x30
 8011806:	f103 0301 	add.w	r3, r3, #1
 801180a:	d0f9      	beq.n	8011800 <__gethex+0x70>
 801180c:	f7ff ffab 	bl	8011766 <__hexdig_fun>
 8011810:	2301      	movs	r3, #1
 8011812:	fab0 f480 	clz	r4, r0
 8011816:	4635      	mov	r5, r6
 8011818:	0964      	lsrs	r4, r4, #5
 801181a:	9301      	str	r3, [sp, #4]
 801181c:	463a      	mov	r2, r7
 801181e:	4616      	mov	r6, r2
 8011820:	7830      	ldrb	r0, [r6, #0]
 8011822:	3201      	adds	r2, #1
 8011824:	f7ff ff9f 	bl	8011766 <__hexdig_fun>
 8011828:	2800      	cmp	r0, #0
 801182a:	d1f8      	bne.n	801181e <__gethex+0x8e>
 801182c:	4652      	mov	r2, sl
 801182e:	4630      	mov	r0, r6
 8011830:	9903      	ldr	r1, [sp, #12]
 8011832:	f001 fb49 	bl	8012ec8 <strncmp>
 8011836:	b980      	cbnz	r0, 801185a <__gethex+0xca>
 8011838:	b94d      	cbnz	r5, 801184e <__gethex+0xbe>
 801183a:	eb06 050a 	add.w	r5, r6, sl
 801183e:	462a      	mov	r2, r5
 8011840:	4616      	mov	r6, r2
 8011842:	7830      	ldrb	r0, [r6, #0]
 8011844:	3201      	adds	r2, #1
 8011846:	f7ff ff8e 	bl	8011766 <__hexdig_fun>
 801184a:	2800      	cmp	r0, #0
 801184c:	d1f8      	bne.n	8011840 <__gethex+0xb0>
 801184e:	1bad      	subs	r5, r5, r6
 8011850:	00ad      	lsls	r5, r5, #2
 8011852:	e004      	b.n	801185e <__gethex+0xce>
 8011854:	2400      	movs	r4, #0
 8011856:	4625      	mov	r5, r4
 8011858:	e7e0      	b.n	801181c <__gethex+0x8c>
 801185a:	2d00      	cmp	r5, #0
 801185c:	d1f7      	bne.n	801184e <__gethex+0xbe>
 801185e:	7833      	ldrb	r3, [r6, #0]
 8011860:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011864:	2b50      	cmp	r3, #80	; 0x50
 8011866:	d139      	bne.n	80118dc <__gethex+0x14c>
 8011868:	7873      	ldrb	r3, [r6, #1]
 801186a:	2b2b      	cmp	r3, #43	; 0x2b
 801186c:	d02a      	beq.n	80118c4 <__gethex+0x134>
 801186e:	2b2d      	cmp	r3, #45	; 0x2d
 8011870:	d02c      	beq.n	80118cc <__gethex+0x13c>
 8011872:	f04f 0900 	mov.w	r9, #0
 8011876:	1c71      	adds	r1, r6, #1
 8011878:	7808      	ldrb	r0, [r1, #0]
 801187a:	f7ff ff74 	bl	8011766 <__hexdig_fun>
 801187e:	1e43      	subs	r3, r0, #1
 8011880:	b2db      	uxtb	r3, r3
 8011882:	2b18      	cmp	r3, #24
 8011884:	d82a      	bhi.n	80118dc <__gethex+0x14c>
 8011886:	f1a0 0210 	sub.w	r2, r0, #16
 801188a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801188e:	f7ff ff6a 	bl	8011766 <__hexdig_fun>
 8011892:	1e43      	subs	r3, r0, #1
 8011894:	b2db      	uxtb	r3, r3
 8011896:	2b18      	cmp	r3, #24
 8011898:	d91b      	bls.n	80118d2 <__gethex+0x142>
 801189a:	f1b9 0f00 	cmp.w	r9, #0
 801189e:	d000      	beq.n	80118a2 <__gethex+0x112>
 80118a0:	4252      	negs	r2, r2
 80118a2:	4415      	add	r5, r2
 80118a4:	f8cb 1000 	str.w	r1, [fp]
 80118a8:	b1d4      	cbz	r4, 80118e0 <__gethex+0x150>
 80118aa:	9b01      	ldr	r3, [sp, #4]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	bf14      	ite	ne
 80118b0:	2700      	movne	r7, #0
 80118b2:	2706      	moveq	r7, #6
 80118b4:	4638      	mov	r0, r7
 80118b6:	b00b      	add	sp, #44	; 0x2c
 80118b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118bc:	463e      	mov	r6, r7
 80118be:	4625      	mov	r5, r4
 80118c0:	2401      	movs	r4, #1
 80118c2:	e7cc      	b.n	801185e <__gethex+0xce>
 80118c4:	f04f 0900 	mov.w	r9, #0
 80118c8:	1cb1      	adds	r1, r6, #2
 80118ca:	e7d5      	b.n	8011878 <__gethex+0xe8>
 80118cc:	f04f 0901 	mov.w	r9, #1
 80118d0:	e7fa      	b.n	80118c8 <__gethex+0x138>
 80118d2:	230a      	movs	r3, #10
 80118d4:	fb03 0202 	mla	r2, r3, r2, r0
 80118d8:	3a10      	subs	r2, #16
 80118da:	e7d6      	b.n	801188a <__gethex+0xfa>
 80118dc:	4631      	mov	r1, r6
 80118de:	e7e1      	b.n	80118a4 <__gethex+0x114>
 80118e0:	4621      	mov	r1, r4
 80118e2:	1bf3      	subs	r3, r6, r7
 80118e4:	3b01      	subs	r3, #1
 80118e6:	2b07      	cmp	r3, #7
 80118e8:	dc0a      	bgt.n	8011900 <__gethex+0x170>
 80118ea:	9802      	ldr	r0, [sp, #8]
 80118ec:	f000 fa7a 	bl	8011de4 <_Balloc>
 80118f0:	4604      	mov	r4, r0
 80118f2:	b940      	cbnz	r0, 8011906 <__gethex+0x176>
 80118f4:	4602      	mov	r2, r0
 80118f6:	21de      	movs	r1, #222	; 0xde
 80118f8:	4b5b      	ldr	r3, [pc, #364]	; (8011a68 <__gethex+0x2d8>)
 80118fa:	485c      	ldr	r0, [pc, #368]	; (8011a6c <__gethex+0x2dc>)
 80118fc:	f7ff f834 	bl	8010968 <__assert_func>
 8011900:	3101      	adds	r1, #1
 8011902:	105b      	asrs	r3, r3, #1
 8011904:	e7ef      	b.n	80118e6 <__gethex+0x156>
 8011906:	f04f 0b00 	mov.w	fp, #0
 801190a:	f100 0914 	add.w	r9, r0, #20
 801190e:	f1ca 0301 	rsb	r3, sl, #1
 8011912:	f8cd 9010 	str.w	r9, [sp, #16]
 8011916:	f8cd b004 	str.w	fp, [sp, #4]
 801191a:	9308      	str	r3, [sp, #32]
 801191c:	42b7      	cmp	r7, r6
 801191e:	d33f      	bcc.n	80119a0 <__gethex+0x210>
 8011920:	9f04      	ldr	r7, [sp, #16]
 8011922:	9b01      	ldr	r3, [sp, #4]
 8011924:	f847 3b04 	str.w	r3, [r7], #4
 8011928:	eba7 0709 	sub.w	r7, r7, r9
 801192c:	10bf      	asrs	r7, r7, #2
 801192e:	6127      	str	r7, [r4, #16]
 8011930:	4618      	mov	r0, r3
 8011932:	f000 fb49 	bl	8011fc8 <__hi0bits>
 8011936:	017f      	lsls	r7, r7, #5
 8011938:	f8d8 6000 	ldr.w	r6, [r8]
 801193c:	1a3f      	subs	r7, r7, r0
 801193e:	42b7      	cmp	r7, r6
 8011940:	dd62      	ble.n	8011a08 <__gethex+0x278>
 8011942:	1bbf      	subs	r7, r7, r6
 8011944:	4639      	mov	r1, r7
 8011946:	4620      	mov	r0, r4
 8011948:	f000 fee3 	bl	8012712 <__any_on>
 801194c:	4682      	mov	sl, r0
 801194e:	b1a8      	cbz	r0, 801197c <__gethex+0x1ec>
 8011950:	f04f 0a01 	mov.w	sl, #1
 8011954:	1e7b      	subs	r3, r7, #1
 8011956:	1159      	asrs	r1, r3, #5
 8011958:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801195c:	f003 021f 	and.w	r2, r3, #31
 8011960:	fa0a f202 	lsl.w	r2, sl, r2
 8011964:	420a      	tst	r2, r1
 8011966:	d009      	beq.n	801197c <__gethex+0x1ec>
 8011968:	4553      	cmp	r3, sl
 801196a:	dd05      	ble.n	8011978 <__gethex+0x1e8>
 801196c:	4620      	mov	r0, r4
 801196e:	1eb9      	subs	r1, r7, #2
 8011970:	f000 fecf 	bl	8012712 <__any_on>
 8011974:	2800      	cmp	r0, #0
 8011976:	d144      	bne.n	8011a02 <__gethex+0x272>
 8011978:	f04f 0a02 	mov.w	sl, #2
 801197c:	4639      	mov	r1, r7
 801197e:	4620      	mov	r0, r4
 8011980:	f7ff fe9e 	bl	80116c0 <rshift>
 8011984:	443d      	add	r5, r7
 8011986:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801198a:	42ab      	cmp	r3, r5
 801198c:	da4a      	bge.n	8011a24 <__gethex+0x294>
 801198e:	4621      	mov	r1, r4
 8011990:	9802      	ldr	r0, [sp, #8]
 8011992:	f000 fa67 	bl	8011e64 <_Bfree>
 8011996:	2300      	movs	r3, #0
 8011998:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801199a:	27a3      	movs	r7, #163	; 0xa3
 801199c:	6013      	str	r3, [r2, #0]
 801199e:	e789      	b.n	80118b4 <__gethex+0x124>
 80119a0:	1e73      	subs	r3, r6, #1
 80119a2:	9a06      	ldr	r2, [sp, #24]
 80119a4:	9307      	str	r3, [sp, #28]
 80119a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80119aa:	4293      	cmp	r3, r2
 80119ac:	d019      	beq.n	80119e2 <__gethex+0x252>
 80119ae:	f1bb 0f20 	cmp.w	fp, #32
 80119b2:	d107      	bne.n	80119c4 <__gethex+0x234>
 80119b4:	9b04      	ldr	r3, [sp, #16]
 80119b6:	9a01      	ldr	r2, [sp, #4]
 80119b8:	f843 2b04 	str.w	r2, [r3], #4
 80119bc:	9304      	str	r3, [sp, #16]
 80119be:	2300      	movs	r3, #0
 80119c0:	469b      	mov	fp, r3
 80119c2:	9301      	str	r3, [sp, #4]
 80119c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80119c8:	f7ff fecd 	bl	8011766 <__hexdig_fun>
 80119cc:	9b01      	ldr	r3, [sp, #4]
 80119ce:	f000 000f 	and.w	r0, r0, #15
 80119d2:	fa00 f00b 	lsl.w	r0, r0, fp
 80119d6:	4303      	orrs	r3, r0
 80119d8:	9301      	str	r3, [sp, #4]
 80119da:	f10b 0b04 	add.w	fp, fp, #4
 80119de:	9b07      	ldr	r3, [sp, #28]
 80119e0:	e00d      	b.n	80119fe <__gethex+0x26e>
 80119e2:	9a08      	ldr	r2, [sp, #32]
 80119e4:	1e73      	subs	r3, r6, #1
 80119e6:	4413      	add	r3, r2
 80119e8:	42bb      	cmp	r3, r7
 80119ea:	d3e0      	bcc.n	80119ae <__gethex+0x21e>
 80119ec:	4618      	mov	r0, r3
 80119ee:	4652      	mov	r2, sl
 80119f0:	9903      	ldr	r1, [sp, #12]
 80119f2:	9309      	str	r3, [sp, #36]	; 0x24
 80119f4:	f001 fa68 	bl	8012ec8 <strncmp>
 80119f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119fa:	2800      	cmp	r0, #0
 80119fc:	d1d7      	bne.n	80119ae <__gethex+0x21e>
 80119fe:	461e      	mov	r6, r3
 8011a00:	e78c      	b.n	801191c <__gethex+0x18c>
 8011a02:	f04f 0a03 	mov.w	sl, #3
 8011a06:	e7b9      	b.n	801197c <__gethex+0x1ec>
 8011a08:	da09      	bge.n	8011a1e <__gethex+0x28e>
 8011a0a:	1bf7      	subs	r7, r6, r7
 8011a0c:	4621      	mov	r1, r4
 8011a0e:	463a      	mov	r2, r7
 8011a10:	9802      	ldr	r0, [sp, #8]
 8011a12:	f000 fc3f 	bl	8012294 <__lshift>
 8011a16:	4604      	mov	r4, r0
 8011a18:	1bed      	subs	r5, r5, r7
 8011a1a:	f100 0914 	add.w	r9, r0, #20
 8011a1e:	f04f 0a00 	mov.w	sl, #0
 8011a22:	e7b0      	b.n	8011986 <__gethex+0x1f6>
 8011a24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011a28:	42a8      	cmp	r0, r5
 8011a2a:	dd72      	ble.n	8011b12 <__gethex+0x382>
 8011a2c:	1b45      	subs	r5, r0, r5
 8011a2e:	42ae      	cmp	r6, r5
 8011a30:	dc35      	bgt.n	8011a9e <__gethex+0x30e>
 8011a32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011a36:	2b02      	cmp	r3, #2
 8011a38:	d029      	beq.n	8011a8e <__gethex+0x2fe>
 8011a3a:	2b03      	cmp	r3, #3
 8011a3c:	d02b      	beq.n	8011a96 <__gethex+0x306>
 8011a3e:	2b01      	cmp	r3, #1
 8011a40:	d11c      	bne.n	8011a7c <__gethex+0x2ec>
 8011a42:	42ae      	cmp	r6, r5
 8011a44:	d11a      	bne.n	8011a7c <__gethex+0x2ec>
 8011a46:	2e01      	cmp	r6, #1
 8011a48:	d112      	bne.n	8011a70 <__gethex+0x2e0>
 8011a4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011a4e:	9a05      	ldr	r2, [sp, #20]
 8011a50:	2762      	movs	r7, #98	; 0x62
 8011a52:	6013      	str	r3, [r2, #0]
 8011a54:	2301      	movs	r3, #1
 8011a56:	6123      	str	r3, [r4, #16]
 8011a58:	f8c9 3000 	str.w	r3, [r9]
 8011a5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a5e:	601c      	str	r4, [r3, #0]
 8011a60:	e728      	b.n	80118b4 <__gethex+0x124>
 8011a62:	bf00      	nop
 8011a64:	08013d20 	.word	0x08013d20
 8011a68:	08013ca8 	.word	0x08013ca8
 8011a6c:	08013cb9 	.word	0x08013cb9
 8011a70:	4620      	mov	r0, r4
 8011a72:	1e71      	subs	r1, r6, #1
 8011a74:	f000 fe4d 	bl	8012712 <__any_on>
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	d1e6      	bne.n	8011a4a <__gethex+0x2ba>
 8011a7c:	4621      	mov	r1, r4
 8011a7e:	9802      	ldr	r0, [sp, #8]
 8011a80:	f000 f9f0 	bl	8011e64 <_Bfree>
 8011a84:	2300      	movs	r3, #0
 8011a86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a88:	2750      	movs	r7, #80	; 0x50
 8011a8a:	6013      	str	r3, [r2, #0]
 8011a8c:	e712      	b.n	80118b4 <__gethex+0x124>
 8011a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d1f3      	bne.n	8011a7c <__gethex+0x2ec>
 8011a94:	e7d9      	b.n	8011a4a <__gethex+0x2ba>
 8011a96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d1d6      	bne.n	8011a4a <__gethex+0x2ba>
 8011a9c:	e7ee      	b.n	8011a7c <__gethex+0x2ec>
 8011a9e:	1e6f      	subs	r7, r5, #1
 8011aa0:	f1ba 0f00 	cmp.w	sl, #0
 8011aa4:	d132      	bne.n	8011b0c <__gethex+0x37c>
 8011aa6:	b127      	cbz	r7, 8011ab2 <__gethex+0x322>
 8011aa8:	4639      	mov	r1, r7
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f000 fe31 	bl	8012712 <__any_on>
 8011ab0:	4682      	mov	sl, r0
 8011ab2:	2101      	movs	r1, #1
 8011ab4:	117b      	asrs	r3, r7, #5
 8011ab6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011aba:	f007 071f 	and.w	r7, r7, #31
 8011abe:	fa01 f707 	lsl.w	r7, r1, r7
 8011ac2:	421f      	tst	r7, r3
 8011ac4:	f04f 0702 	mov.w	r7, #2
 8011ac8:	4629      	mov	r1, r5
 8011aca:	4620      	mov	r0, r4
 8011acc:	bf18      	it	ne
 8011ace:	f04a 0a02 	orrne.w	sl, sl, #2
 8011ad2:	1b76      	subs	r6, r6, r5
 8011ad4:	f7ff fdf4 	bl	80116c0 <rshift>
 8011ad8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011adc:	f1ba 0f00 	cmp.w	sl, #0
 8011ae0:	d048      	beq.n	8011b74 <__gethex+0x3e4>
 8011ae2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ae6:	2b02      	cmp	r3, #2
 8011ae8:	d015      	beq.n	8011b16 <__gethex+0x386>
 8011aea:	2b03      	cmp	r3, #3
 8011aec:	d017      	beq.n	8011b1e <__gethex+0x38e>
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d109      	bne.n	8011b06 <__gethex+0x376>
 8011af2:	f01a 0f02 	tst.w	sl, #2
 8011af6:	d006      	beq.n	8011b06 <__gethex+0x376>
 8011af8:	f8d9 0000 	ldr.w	r0, [r9]
 8011afc:	ea4a 0a00 	orr.w	sl, sl, r0
 8011b00:	f01a 0f01 	tst.w	sl, #1
 8011b04:	d10e      	bne.n	8011b24 <__gethex+0x394>
 8011b06:	f047 0710 	orr.w	r7, r7, #16
 8011b0a:	e033      	b.n	8011b74 <__gethex+0x3e4>
 8011b0c:	f04f 0a01 	mov.w	sl, #1
 8011b10:	e7cf      	b.n	8011ab2 <__gethex+0x322>
 8011b12:	2701      	movs	r7, #1
 8011b14:	e7e2      	b.n	8011adc <__gethex+0x34c>
 8011b16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b18:	f1c3 0301 	rsb	r3, r3, #1
 8011b1c:	9315      	str	r3, [sp, #84]	; 0x54
 8011b1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d0f0      	beq.n	8011b06 <__gethex+0x376>
 8011b24:	f04f 0c00 	mov.w	ip, #0
 8011b28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011b2c:	f104 0314 	add.w	r3, r4, #20
 8011b30:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011b34:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011b42:	d01c      	beq.n	8011b7e <__gethex+0x3ee>
 8011b44:	3201      	adds	r2, #1
 8011b46:	6002      	str	r2, [r0, #0]
 8011b48:	2f02      	cmp	r7, #2
 8011b4a:	f104 0314 	add.w	r3, r4, #20
 8011b4e:	d13d      	bne.n	8011bcc <__gethex+0x43c>
 8011b50:	f8d8 2000 	ldr.w	r2, [r8]
 8011b54:	3a01      	subs	r2, #1
 8011b56:	42b2      	cmp	r2, r6
 8011b58:	d10a      	bne.n	8011b70 <__gethex+0x3e0>
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	1171      	asrs	r1, r6, #5
 8011b5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011b62:	f006 061f 	and.w	r6, r6, #31
 8011b66:	fa02 f606 	lsl.w	r6, r2, r6
 8011b6a:	421e      	tst	r6, r3
 8011b6c:	bf18      	it	ne
 8011b6e:	4617      	movne	r7, r2
 8011b70:	f047 0720 	orr.w	r7, r7, #32
 8011b74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b76:	601c      	str	r4, [r3, #0]
 8011b78:	9b05      	ldr	r3, [sp, #20]
 8011b7a:	601d      	str	r5, [r3, #0]
 8011b7c:	e69a      	b.n	80118b4 <__gethex+0x124>
 8011b7e:	4299      	cmp	r1, r3
 8011b80:	f843 cc04 	str.w	ip, [r3, #-4]
 8011b84:	d8d8      	bhi.n	8011b38 <__gethex+0x3a8>
 8011b86:	68a3      	ldr	r3, [r4, #8]
 8011b88:	459b      	cmp	fp, r3
 8011b8a:	db17      	blt.n	8011bbc <__gethex+0x42c>
 8011b8c:	6861      	ldr	r1, [r4, #4]
 8011b8e:	9802      	ldr	r0, [sp, #8]
 8011b90:	3101      	adds	r1, #1
 8011b92:	f000 f927 	bl	8011de4 <_Balloc>
 8011b96:	4681      	mov	r9, r0
 8011b98:	b918      	cbnz	r0, 8011ba2 <__gethex+0x412>
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	2184      	movs	r1, #132	; 0x84
 8011b9e:	4b19      	ldr	r3, [pc, #100]	; (8011c04 <__gethex+0x474>)
 8011ba0:	e6ab      	b.n	80118fa <__gethex+0x16a>
 8011ba2:	6922      	ldr	r2, [r4, #16]
 8011ba4:	f104 010c 	add.w	r1, r4, #12
 8011ba8:	3202      	adds	r2, #2
 8011baa:	0092      	lsls	r2, r2, #2
 8011bac:	300c      	adds	r0, #12
 8011bae:	f7fd fbc9 	bl	800f344 <memcpy>
 8011bb2:	4621      	mov	r1, r4
 8011bb4:	9802      	ldr	r0, [sp, #8]
 8011bb6:	f000 f955 	bl	8011e64 <_Bfree>
 8011bba:	464c      	mov	r4, r9
 8011bbc:	6923      	ldr	r3, [r4, #16]
 8011bbe:	1c5a      	adds	r2, r3, #1
 8011bc0:	6122      	str	r2, [r4, #16]
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011bc8:	615a      	str	r2, [r3, #20]
 8011bca:	e7bd      	b.n	8011b48 <__gethex+0x3b8>
 8011bcc:	6922      	ldr	r2, [r4, #16]
 8011bce:	455a      	cmp	r2, fp
 8011bd0:	dd0b      	ble.n	8011bea <__gethex+0x45a>
 8011bd2:	2101      	movs	r1, #1
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	f7ff fd73 	bl	80116c0 <rshift>
 8011bda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011bde:	3501      	adds	r5, #1
 8011be0:	42ab      	cmp	r3, r5
 8011be2:	f6ff aed4 	blt.w	801198e <__gethex+0x1fe>
 8011be6:	2701      	movs	r7, #1
 8011be8:	e7c2      	b.n	8011b70 <__gethex+0x3e0>
 8011bea:	f016 061f 	ands.w	r6, r6, #31
 8011bee:	d0fa      	beq.n	8011be6 <__gethex+0x456>
 8011bf0:	4453      	add	r3, sl
 8011bf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011bf6:	f000 f9e7 	bl	8011fc8 <__hi0bits>
 8011bfa:	f1c6 0620 	rsb	r6, r6, #32
 8011bfe:	42b0      	cmp	r0, r6
 8011c00:	dbe7      	blt.n	8011bd2 <__gethex+0x442>
 8011c02:	e7f0      	b.n	8011be6 <__gethex+0x456>
 8011c04:	08013ca8 	.word	0x08013ca8

08011c08 <L_shift>:
 8011c08:	f1c2 0208 	rsb	r2, r2, #8
 8011c0c:	0092      	lsls	r2, r2, #2
 8011c0e:	b570      	push	{r4, r5, r6, lr}
 8011c10:	f1c2 0620 	rsb	r6, r2, #32
 8011c14:	6843      	ldr	r3, [r0, #4]
 8011c16:	6804      	ldr	r4, [r0, #0]
 8011c18:	fa03 f506 	lsl.w	r5, r3, r6
 8011c1c:	432c      	orrs	r4, r5
 8011c1e:	40d3      	lsrs	r3, r2
 8011c20:	6004      	str	r4, [r0, #0]
 8011c22:	f840 3f04 	str.w	r3, [r0, #4]!
 8011c26:	4288      	cmp	r0, r1
 8011c28:	d3f4      	bcc.n	8011c14 <L_shift+0xc>
 8011c2a:	bd70      	pop	{r4, r5, r6, pc}

08011c2c <__match>:
 8011c2c:	b530      	push	{r4, r5, lr}
 8011c2e:	6803      	ldr	r3, [r0, #0]
 8011c30:	3301      	adds	r3, #1
 8011c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c36:	b914      	cbnz	r4, 8011c3e <__match+0x12>
 8011c38:	6003      	str	r3, [r0, #0]
 8011c3a:	2001      	movs	r0, #1
 8011c3c:	bd30      	pop	{r4, r5, pc}
 8011c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011c46:	2d19      	cmp	r5, #25
 8011c48:	bf98      	it	ls
 8011c4a:	3220      	addls	r2, #32
 8011c4c:	42a2      	cmp	r2, r4
 8011c4e:	d0f0      	beq.n	8011c32 <__match+0x6>
 8011c50:	2000      	movs	r0, #0
 8011c52:	e7f3      	b.n	8011c3c <__match+0x10>

08011c54 <__hexnan>:
 8011c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c58:	2500      	movs	r5, #0
 8011c5a:	680b      	ldr	r3, [r1, #0]
 8011c5c:	4682      	mov	sl, r0
 8011c5e:	115e      	asrs	r6, r3, #5
 8011c60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011c64:	f013 031f 	ands.w	r3, r3, #31
 8011c68:	bf18      	it	ne
 8011c6a:	3604      	addne	r6, #4
 8011c6c:	1f37      	subs	r7, r6, #4
 8011c6e:	46b9      	mov	r9, r7
 8011c70:	463c      	mov	r4, r7
 8011c72:	46ab      	mov	fp, r5
 8011c74:	b087      	sub	sp, #28
 8011c76:	4690      	mov	r8, r2
 8011c78:	6802      	ldr	r2, [r0, #0]
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	f846 5c04 	str.w	r5, [r6, #-4]
 8011c80:	9502      	str	r5, [sp, #8]
 8011c82:	7851      	ldrb	r1, [r2, #1]
 8011c84:	1c53      	adds	r3, r2, #1
 8011c86:	9303      	str	r3, [sp, #12]
 8011c88:	b341      	cbz	r1, 8011cdc <__hexnan+0x88>
 8011c8a:	4608      	mov	r0, r1
 8011c8c:	9205      	str	r2, [sp, #20]
 8011c8e:	9104      	str	r1, [sp, #16]
 8011c90:	f7ff fd69 	bl	8011766 <__hexdig_fun>
 8011c94:	2800      	cmp	r0, #0
 8011c96:	d14f      	bne.n	8011d38 <__hexnan+0xe4>
 8011c98:	9904      	ldr	r1, [sp, #16]
 8011c9a:	9a05      	ldr	r2, [sp, #20]
 8011c9c:	2920      	cmp	r1, #32
 8011c9e:	d818      	bhi.n	8011cd2 <__hexnan+0x7e>
 8011ca0:	9b02      	ldr	r3, [sp, #8]
 8011ca2:	459b      	cmp	fp, r3
 8011ca4:	dd13      	ble.n	8011cce <__hexnan+0x7a>
 8011ca6:	454c      	cmp	r4, r9
 8011ca8:	d206      	bcs.n	8011cb8 <__hexnan+0x64>
 8011caa:	2d07      	cmp	r5, #7
 8011cac:	dc04      	bgt.n	8011cb8 <__hexnan+0x64>
 8011cae:	462a      	mov	r2, r5
 8011cb0:	4649      	mov	r1, r9
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f7ff ffa8 	bl	8011c08 <L_shift>
 8011cb8:	4544      	cmp	r4, r8
 8011cba:	d950      	bls.n	8011d5e <__hexnan+0x10a>
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	f1a4 0904 	sub.w	r9, r4, #4
 8011cc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8011cc6:	461d      	mov	r5, r3
 8011cc8:	464c      	mov	r4, r9
 8011cca:	f8cd b008 	str.w	fp, [sp, #8]
 8011cce:	9a03      	ldr	r2, [sp, #12]
 8011cd0:	e7d7      	b.n	8011c82 <__hexnan+0x2e>
 8011cd2:	2929      	cmp	r1, #41	; 0x29
 8011cd4:	d156      	bne.n	8011d84 <__hexnan+0x130>
 8011cd6:	3202      	adds	r2, #2
 8011cd8:	f8ca 2000 	str.w	r2, [sl]
 8011cdc:	f1bb 0f00 	cmp.w	fp, #0
 8011ce0:	d050      	beq.n	8011d84 <__hexnan+0x130>
 8011ce2:	454c      	cmp	r4, r9
 8011ce4:	d206      	bcs.n	8011cf4 <__hexnan+0xa0>
 8011ce6:	2d07      	cmp	r5, #7
 8011ce8:	dc04      	bgt.n	8011cf4 <__hexnan+0xa0>
 8011cea:	462a      	mov	r2, r5
 8011cec:	4649      	mov	r1, r9
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f7ff ff8a 	bl	8011c08 <L_shift>
 8011cf4:	4544      	cmp	r4, r8
 8011cf6:	d934      	bls.n	8011d62 <__hexnan+0x10e>
 8011cf8:	4623      	mov	r3, r4
 8011cfa:	f1a8 0204 	sub.w	r2, r8, #4
 8011cfe:	f853 1b04 	ldr.w	r1, [r3], #4
 8011d02:	429f      	cmp	r7, r3
 8011d04:	f842 1f04 	str.w	r1, [r2, #4]!
 8011d08:	d2f9      	bcs.n	8011cfe <__hexnan+0xaa>
 8011d0a:	1b3b      	subs	r3, r7, r4
 8011d0c:	f023 0303 	bic.w	r3, r3, #3
 8011d10:	3304      	adds	r3, #4
 8011d12:	3401      	adds	r4, #1
 8011d14:	3e03      	subs	r6, #3
 8011d16:	42b4      	cmp	r4, r6
 8011d18:	bf88      	it	hi
 8011d1a:	2304      	movhi	r3, #4
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	4443      	add	r3, r8
 8011d20:	f843 2b04 	str.w	r2, [r3], #4
 8011d24:	429f      	cmp	r7, r3
 8011d26:	d2fb      	bcs.n	8011d20 <__hexnan+0xcc>
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	b91b      	cbnz	r3, 8011d34 <__hexnan+0xe0>
 8011d2c:	4547      	cmp	r7, r8
 8011d2e:	d127      	bne.n	8011d80 <__hexnan+0x12c>
 8011d30:	2301      	movs	r3, #1
 8011d32:	603b      	str	r3, [r7, #0]
 8011d34:	2005      	movs	r0, #5
 8011d36:	e026      	b.n	8011d86 <__hexnan+0x132>
 8011d38:	3501      	adds	r5, #1
 8011d3a:	2d08      	cmp	r5, #8
 8011d3c:	f10b 0b01 	add.w	fp, fp, #1
 8011d40:	dd06      	ble.n	8011d50 <__hexnan+0xfc>
 8011d42:	4544      	cmp	r4, r8
 8011d44:	d9c3      	bls.n	8011cce <__hexnan+0x7a>
 8011d46:	2300      	movs	r3, #0
 8011d48:	2501      	movs	r5, #1
 8011d4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8011d4e:	3c04      	subs	r4, #4
 8011d50:	6822      	ldr	r2, [r4, #0]
 8011d52:	f000 000f 	and.w	r0, r0, #15
 8011d56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011d5a:	6022      	str	r2, [r4, #0]
 8011d5c:	e7b7      	b.n	8011cce <__hexnan+0x7a>
 8011d5e:	2508      	movs	r5, #8
 8011d60:	e7b5      	b.n	8011cce <__hexnan+0x7a>
 8011d62:	9b01      	ldr	r3, [sp, #4]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d0df      	beq.n	8011d28 <__hexnan+0xd4>
 8011d68:	f04f 32ff 	mov.w	r2, #4294967295
 8011d6c:	f1c3 0320 	rsb	r3, r3, #32
 8011d70:	fa22 f303 	lsr.w	r3, r2, r3
 8011d74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011d78:	401a      	ands	r2, r3
 8011d7a:	f846 2c04 	str.w	r2, [r6, #-4]
 8011d7e:	e7d3      	b.n	8011d28 <__hexnan+0xd4>
 8011d80:	3f04      	subs	r7, #4
 8011d82:	e7d1      	b.n	8011d28 <__hexnan+0xd4>
 8011d84:	2004      	movs	r0, #4
 8011d86:	b007      	add	sp, #28
 8011d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d8c <_localeconv_r>:
 8011d8c:	4800      	ldr	r0, [pc, #0]	; (8011d90 <_localeconv_r+0x4>)
 8011d8e:	4770      	bx	lr
 8011d90:	20000a94 	.word	0x20000a94

08011d94 <malloc>:
 8011d94:	4b02      	ldr	r3, [pc, #8]	; (8011da0 <malloc+0xc>)
 8011d96:	4601      	mov	r1, r0
 8011d98:	6818      	ldr	r0, [r3, #0]
 8011d9a:	f000 bd57 	b.w	801284c <_malloc_r>
 8011d9e:	bf00      	nop
 8011da0:	2000093c 	.word	0x2000093c

08011da4 <__ascii_mbtowc>:
 8011da4:	b082      	sub	sp, #8
 8011da6:	b901      	cbnz	r1, 8011daa <__ascii_mbtowc+0x6>
 8011da8:	a901      	add	r1, sp, #4
 8011daa:	b142      	cbz	r2, 8011dbe <__ascii_mbtowc+0x1a>
 8011dac:	b14b      	cbz	r3, 8011dc2 <__ascii_mbtowc+0x1e>
 8011dae:	7813      	ldrb	r3, [r2, #0]
 8011db0:	600b      	str	r3, [r1, #0]
 8011db2:	7812      	ldrb	r2, [r2, #0]
 8011db4:	1e10      	subs	r0, r2, #0
 8011db6:	bf18      	it	ne
 8011db8:	2001      	movne	r0, #1
 8011dba:	b002      	add	sp, #8
 8011dbc:	4770      	bx	lr
 8011dbe:	4610      	mov	r0, r2
 8011dc0:	e7fb      	b.n	8011dba <__ascii_mbtowc+0x16>
 8011dc2:	f06f 0001 	mvn.w	r0, #1
 8011dc6:	e7f8      	b.n	8011dba <__ascii_mbtowc+0x16>

08011dc8 <memchr>:
 8011dc8:	4603      	mov	r3, r0
 8011dca:	b510      	push	{r4, lr}
 8011dcc:	b2c9      	uxtb	r1, r1
 8011dce:	4402      	add	r2, r0
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	d101      	bne.n	8011dda <memchr+0x12>
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	e003      	b.n	8011de2 <memchr+0x1a>
 8011dda:	7804      	ldrb	r4, [r0, #0]
 8011ddc:	3301      	adds	r3, #1
 8011dde:	428c      	cmp	r4, r1
 8011de0:	d1f6      	bne.n	8011dd0 <memchr+0x8>
 8011de2:	bd10      	pop	{r4, pc}

08011de4 <_Balloc>:
 8011de4:	b570      	push	{r4, r5, r6, lr}
 8011de6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011de8:	4604      	mov	r4, r0
 8011dea:	460d      	mov	r5, r1
 8011dec:	b976      	cbnz	r6, 8011e0c <_Balloc+0x28>
 8011dee:	2010      	movs	r0, #16
 8011df0:	f7ff ffd0 	bl	8011d94 <malloc>
 8011df4:	4602      	mov	r2, r0
 8011df6:	6260      	str	r0, [r4, #36]	; 0x24
 8011df8:	b920      	cbnz	r0, 8011e04 <_Balloc+0x20>
 8011dfa:	2166      	movs	r1, #102	; 0x66
 8011dfc:	4b17      	ldr	r3, [pc, #92]	; (8011e5c <_Balloc+0x78>)
 8011dfe:	4818      	ldr	r0, [pc, #96]	; (8011e60 <_Balloc+0x7c>)
 8011e00:	f7fe fdb2 	bl	8010968 <__assert_func>
 8011e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e08:	6006      	str	r6, [r0, #0]
 8011e0a:	60c6      	str	r6, [r0, #12]
 8011e0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011e0e:	68f3      	ldr	r3, [r6, #12]
 8011e10:	b183      	cbz	r3, 8011e34 <_Balloc+0x50>
 8011e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e14:	68db      	ldr	r3, [r3, #12]
 8011e16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011e1a:	b9b8      	cbnz	r0, 8011e4c <_Balloc+0x68>
 8011e1c:	2101      	movs	r1, #1
 8011e1e:	fa01 f605 	lsl.w	r6, r1, r5
 8011e22:	1d72      	adds	r2, r6, #5
 8011e24:	4620      	mov	r0, r4
 8011e26:	0092      	lsls	r2, r2, #2
 8011e28:	f000 fc94 	bl	8012754 <_calloc_r>
 8011e2c:	b160      	cbz	r0, 8011e48 <_Balloc+0x64>
 8011e2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011e32:	e00e      	b.n	8011e52 <_Balloc+0x6e>
 8011e34:	2221      	movs	r2, #33	; 0x21
 8011e36:	2104      	movs	r1, #4
 8011e38:	4620      	mov	r0, r4
 8011e3a:	f000 fc8b 	bl	8012754 <_calloc_r>
 8011e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e40:	60f0      	str	r0, [r6, #12]
 8011e42:	68db      	ldr	r3, [r3, #12]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d1e4      	bne.n	8011e12 <_Balloc+0x2e>
 8011e48:	2000      	movs	r0, #0
 8011e4a:	bd70      	pop	{r4, r5, r6, pc}
 8011e4c:	6802      	ldr	r2, [r0, #0]
 8011e4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011e52:	2300      	movs	r3, #0
 8011e54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011e58:	e7f7      	b.n	8011e4a <_Balloc+0x66>
 8011e5a:	bf00      	nop
 8011e5c:	08013b90 	.word	0x08013b90
 8011e60:	08013d34 	.word	0x08013d34

08011e64 <_Bfree>:
 8011e64:	b570      	push	{r4, r5, r6, lr}
 8011e66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011e68:	4605      	mov	r5, r0
 8011e6a:	460c      	mov	r4, r1
 8011e6c:	b976      	cbnz	r6, 8011e8c <_Bfree+0x28>
 8011e6e:	2010      	movs	r0, #16
 8011e70:	f7ff ff90 	bl	8011d94 <malloc>
 8011e74:	4602      	mov	r2, r0
 8011e76:	6268      	str	r0, [r5, #36]	; 0x24
 8011e78:	b920      	cbnz	r0, 8011e84 <_Bfree+0x20>
 8011e7a:	218a      	movs	r1, #138	; 0x8a
 8011e7c:	4b08      	ldr	r3, [pc, #32]	; (8011ea0 <_Bfree+0x3c>)
 8011e7e:	4809      	ldr	r0, [pc, #36]	; (8011ea4 <_Bfree+0x40>)
 8011e80:	f7fe fd72 	bl	8010968 <__assert_func>
 8011e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e88:	6006      	str	r6, [r0, #0]
 8011e8a:	60c6      	str	r6, [r0, #12]
 8011e8c:	b13c      	cbz	r4, 8011e9e <_Bfree+0x3a>
 8011e8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e90:	6862      	ldr	r2, [r4, #4]
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011e98:	6021      	str	r1, [r4, #0]
 8011e9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011e9e:	bd70      	pop	{r4, r5, r6, pc}
 8011ea0:	08013b90 	.word	0x08013b90
 8011ea4:	08013d34 	.word	0x08013d34

08011ea8 <__multadd>:
 8011ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eac:	4607      	mov	r7, r0
 8011eae:	460c      	mov	r4, r1
 8011eb0:	461e      	mov	r6, r3
 8011eb2:	2000      	movs	r0, #0
 8011eb4:	690d      	ldr	r5, [r1, #16]
 8011eb6:	f101 0c14 	add.w	ip, r1, #20
 8011eba:	f8dc 3000 	ldr.w	r3, [ip]
 8011ebe:	3001      	adds	r0, #1
 8011ec0:	b299      	uxth	r1, r3
 8011ec2:	fb02 6101 	mla	r1, r2, r1, r6
 8011ec6:	0c1e      	lsrs	r6, r3, #16
 8011ec8:	0c0b      	lsrs	r3, r1, #16
 8011eca:	fb02 3306 	mla	r3, r2, r6, r3
 8011ece:	b289      	uxth	r1, r1
 8011ed0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011ed4:	4285      	cmp	r5, r0
 8011ed6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011eda:	f84c 1b04 	str.w	r1, [ip], #4
 8011ede:	dcec      	bgt.n	8011eba <__multadd+0x12>
 8011ee0:	b30e      	cbz	r6, 8011f26 <__multadd+0x7e>
 8011ee2:	68a3      	ldr	r3, [r4, #8]
 8011ee4:	42ab      	cmp	r3, r5
 8011ee6:	dc19      	bgt.n	8011f1c <__multadd+0x74>
 8011ee8:	6861      	ldr	r1, [r4, #4]
 8011eea:	4638      	mov	r0, r7
 8011eec:	3101      	adds	r1, #1
 8011eee:	f7ff ff79 	bl	8011de4 <_Balloc>
 8011ef2:	4680      	mov	r8, r0
 8011ef4:	b928      	cbnz	r0, 8011f02 <__multadd+0x5a>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	21b5      	movs	r1, #181	; 0xb5
 8011efa:	4b0c      	ldr	r3, [pc, #48]	; (8011f2c <__multadd+0x84>)
 8011efc:	480c      	ldr	r0, [pc, #48]	; (8011f30 <__multadd+0x88>)
 8011efe:	f7fe fd33 	bl	8010968 <__assert_func>
 8011f02:	6922      	ldr	r2, [r4, #16]
 8011f04:	f104 010c 	add.w	r1, r4, #12
 8011f08:	3202      	adds	r2, #2
 8011f0a:	0092      	lsls	r2, r2, #2
 8011f0c:	300c      	adds	r0, #12
 8011f0e:	f7fd fa19 	bl	800f344 <memcpy>
 8011f12:	4621      	mov	r1, r4
 8011f14:	4638      	mov	r0, r7
 8011f16:	f7ff ffa5 	bl	8011e64 <_Bfree>
 8011f1a:	4644      	mov	r4, r8
 8011f1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011f20:	3501      	adds	r5, #1
 8011f22:	615e      	str	r6, [r3, #20]
 8011f24:	6125      	str	r5, [r4, #16]
 8011f26:	4620      	mov	r0, r4
 8011f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f2c:	08013ca8 	.word	0x08013ca8
 8011f30:	08013d34 	.word	0x08013d34

08011f34 <__s2b>:
 8011f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f38:	4615      	mov	r5, r2
 8011f3a:	2209      	movs	r2, #9
 8011f3c:	461f      	mov	r7, r3
 8011f3e:	3308      	adds	r3, #8
 8011f40:	460c      	mov	r4, r1
 8011f42:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f46:	4606      	mov	r6, r0
 8011f48:	2201      	movs	r2, #1
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	db09      	blt.n	8011f64 <__s2b+0x30>
 8011f50:	4630      	mov	r0, r6
 8011f52:	f7ff ff47 	bl	8011de4 <_Balloc>
 8011f56:	b940      	cbnz	r0, 8011f6a <__s2b+0x36>
 8011f58:	4602      	mov	r2, r0
 8011f5a:	21ce      	movs	r1, #206	; 0xce
 8011f5c:	4b18      	ldr	r3, [pc, #96]	; (8011fc0 <__s2b+0x8c>)
 8011f5e:	4819      	ldr	r0, [pc, #100]	; (8011fc4 <__s2b+0x90>)
 8011f60:	f7fe fd02 	bl	8010968 <__assert_func>
 8011f64:	0052      	lsls	r2, r2, #1
 8011f66:	3101      	adds	r1, #1
 8011f68:	e7f0      	b.n	8011f4c <__s2b+0x18>
 8011f6a:	9b08      	ldr	r3, [sp, #32]
 8011f6c:	2d09      	cmp	r5, #9
 8011f6e:	6143      	str	r3, [r0, #20]
 8011f70:	f04f 0301 	mov.w	r3, #1
 8011f74:	6103      	str	r3, [r0, #16]
 8011f76:	dd16      	ble.n	8011fa6 <__s2b+0x72>
 8011f78:	f104 0909 	add.w	r9, r4, #9
 8011f7c:	46c8      	mov	r8, r9
 8011f7e:	442c      	add	r4, r5
 8011f80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011f84:	4601      	mov	r1, r0
 8011f86:	220a      	movs	r2, #10
 8011f88:	4630      	mov	r0, r6
 8011f8a:	3b30      	subs	r3, #48	; 0x30
 8011f8c:	f7ff ff8c 	bl	8011ea8 <__multadd>
 8011f90:	45a0      	cmp	r8, r4
 8011f92:	d1f5      	bne.n	8011f80 <__s2b+0x4c>
 8011f94:	f1a5 0408 	sub.w	r4, r5, #8
 8011f98:	444c      	add	r4, r9
 8011f9a:	1b2d      	subs	r5, r5, r4
 8011f9c:	1963      	adds	r3, r4, r5
 8011f9e:	42bb      	cmp	r3, r7
 8011fa0:	db04      	blt.n	8011fac <__s2b+0x78>
 8011fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fa6:	2509      	movs	r5, #9
 8011fa8:	340a      	adds	r4, #10
 8011faa:	e7f6      	b.n	8011f9a <__s2b+0x66>
 8011fac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011fb0:	4601      	mov	r1, r0
 8011fb2:	220a      	movs	r2, #10
 8011fb4:	4630      	mov	r0, r6
 8011fb6:	3b30      	subs	r3, #48	; 0x30
 8011fb8:	f7ff ff76 	bl	8011ea8 <__multadd>
 8011fbc:	e7ee      	b.n	8011f9c <__s2b+0x68>
 8011fbe:	bf00      	nop
 8011fc0:	08013ca8 	.word	0x08013ca8
 8011fc4:	08013d34 	.word	0x08013d34

08011fc8 <__hi0bits>:
 8011fc8:	0c02      	lsrs	r2, r0, #16
 8011fca:	0412      	lsls	r2, r2, #16
 8011fcc:	4603      	mov	r3, r0
 8011fce:	b9ca      	cbnz	r2, 8012004 <__hi0bits+0x3c>
 8011fd0:	0403      	lsls	r3, r0, #16
 8011fd2:	2010      	movs	r0, #16
 8011fd4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011fd8:	bf04      	itt	eq
 8011fda:	021b      	lsleq	r3, r3, #8
 8011fdc:	3008      	addeq	r0, #8
 8011fde:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011fe2:	bf04      	itt	eq
 8011fe4:	011b      	lsleq	r3, r3, #4
 8011fe6:	3004      	addeq	r0, #4
 8011fe8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011fec:	bf04      	itt	eq
 8011fee:	009b      	lsleq	r3, r3, #2
 8011ff0:	3002      	addeq	r0, #2
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	db05      	blt.n	8012002 <__hi0bits+0x3a>
 8011ff6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8011ffa:	f100 0001 	add.w	r0, r0, #1
 8011ffe:	bf08      	it	eq
 8012000:	2020      	moveq	r0, #32
 8012002:	4770      	bx	lr
 8012004:	2000      	movs	r0, #0
 8012006:	e7e5      	b.n	8011fd4 <__hi0bits+0xc>

08012008 <__lo0bits>:
 8012008:	6803      	ldr	r3, [r0, #0]
 801200a:	4602      	mov	r2, r0
 801200c:	f013 0007 	ands.w	r0, r3, #7
 8012010:	d00b      	beq.n	801202a <__lo0bits+0x22>
 8012012:	07d9      	lsls	r1, r3, #31
 8012014:	d421      	bmi.n	801205a <__lo0bits+0x52>
 8012016:	0798      	lsls	r0, r3, #30
 8012018:	bf49      	itett	mi
 801201a:	085b      	lsrmi	r3, r3, #1
 801201c:	089b      	lsrpl	r3, r3, #2
 801201e:	2001      	movmi	r0, #1
 8012020:	6013      	strmi	r3, [r2, #0]
 8012022:	bf5c      	itt	pl
 8012024:	2002      	movpl	r0, #2
 8012026:	6013      	strpl	r3, [r2, #0]
 8012028:	4770      	bx	lr
 801202a:	b299      	uxth	r1, r3
 801202c:	b909      	cbnz	r1, 8012032 <__lo0bits+0x2a>
 801202e:	2010      	movs	r0, #16
 8012030:	0c1b      	lsrs	r3, r3, #16
 8012032:	b2d9      	uxtb	r1, r3
 8012034:	b909      	cbnz	r1, 801203a <__lo0bits+0x32>
 8012036:	3008      	adds	r0, #8
 8012038:	0a1b      	lsrs	r3, r3, #8
 801203a:	0719      	lsls	r1, r3, #28
 801203c:	bf04      	itt	eq
 801203e:	091b      	lsreq	r3, r3, #4
 8012040:	3004      	addeq	r0, #4
 8012042:	0799      	lsls	r1, r3, #30
 8012044:	bf04      	itt	eq
 8012046:	089b      	lsreq	r3, r3, #2
 8012048:	3002      	addeq	r0, #2
 801204a:	07d9      	lsls	r1, r3, #31
 801204c:	d403      	bmi.n	8012056 <__lo0bits+0x4e>
 801204e:	085b      	lsrs	r3, r3, #1
 8012050:	f100 0001 	add.w	r0, r0, #1
 8012054:	d003      	beq.n	801205e <__lo0bits+0x56>
 8012056:	6013      	str	r3, [r2, #0]
 8012058:	4770      	bx	lr
 801205a:	2000      	movs	r0, #0
 801205c:	4770      	bx	lr
 801205e:	2020      	movs	r0, #32
 8012060:	4770      	bx	lr
	...

08012064 <__i2b>:
 8012064:	b510      	push	{r4, lr}
 8012066:	460c      	mov	r4, r1
 8012068:	2101      	movs	r1, #1
 801206a:	f7ff febb 	bl	8011de4 <_Balloc>
 801206e:	4602      	mov	r2, r0
 8012070:	b928      	cbnz	r0, 801207e <__i2b+0x1a>
 8012072:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012076:	4b04      	ldr	r3, [pc, #16]	; (8012088 <__i2b+0x24>)
 8012078:	4804      	ldr	r0, [pc, #16]	; (801208c <__i2b+0x28>)
 801207a:	f7fe fc75 	bl	8010968 <__assert_func>
 801207e:	2301      	movs	r3, #1
 8012080:	6144      	str	r4, [r0, #20]
 8012082:	6103      	str	r3, [r0, #16]
 8012084:	bd10      	pop	{r4, pc}
 8012086:	bf00      	nop
 8012088:	08013ca8 	.word	0x08013ca8
 801208c:	08013d34 	.word	0x08013d34

08012090 <__multiply>:
 8012090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012094:	4691      	mov	r9, r2
 8012096:	690a      	ldr	r2, [r1, #16]
 8012098:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801209c:	460c      	mov	r4, r1
 801209e:	429a      	cmp	r2, r3
 80120a0:	bfbe      	ittt	lt
 80120a2:	460b      	movlt	r3, r1
 80120a4:	464c      	movlt	r4, r9
 80120a6:	4699      	movlt	r9, r3
 80120a8:	6927      	ldr	r7, [r4, #16]
 80120aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80120ae:	68a3      	ldr	r3, [r4, #8]
 80120b0:	6861      	ldr	r1, [r4, #4]
 80120b2:	eb07 060a 	add.w	r6, r7, sl
 80120b6:	42b3      	cmp	r3, r6
 80120b8:	b085      	sub	sp, #20
 80120ba:	bfb8      	it	lt
 80120bc:	3101      	addlt	r1, #1
 80120be:	f7ff fe91 	bl	8011de4 <_Balloc>
 80120c2:	b930      	cbnz	r0, 80120d2 <__multiply+0x42>
 80120c4:	4602      	mov	r2, r0
 80120c6:	f240 115d 	movw	r1, #349	; 0x15d
 80120ca:	4b43      	ldr	r3, [pc, #268]	; (80121d8 <__multiply+0x148>)
 80120cc:	4843      	ldr	r0, [pc, #268]	; (80121dc <__multiply+0x14c>)
 80120ce:	f7fe fc4b 	bl	8010968 <__assert_func>
 80120d2:	f100 0514 	add.w	r5, r0, #20
 80120d6:	462b      	mov	r3, r5
 80120d8:	2200      	movs	r2, #0
 80120da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80120de:	4543      	cmp	r3, r8
 80120e0:	d321      	bcc.n	8012126 <__multiply+0x96>
 80120e2:	f104 0314 	add.w	r3, r4, #20
 80120e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80120ea:	f109 0314 	add.w	r3, r9, #20
 80120ee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80120f2:	9202      	str	r2, [sp, #8]
 80120f4:	1b3a      	subs	r2, r7, r4
 80120f6:	3a15      	subs	r2, #21
 80120f8:	f022 0203 	bic.w	r2, r2, #3
 80120fc:	3204      	adds	r2, #4
 80120fe:	f104 0115 	add.w	r1, r4, #21
 8012102:	428f      	cmp	r7, r1
 8012104:	bf38      	it	cc
 8012106:	2204      	movcc	r2, #4
 8012108:	9201      	str	r2, [sp, #4]
 801210a:	9a02      	ldr	r2, [sp, #8]
 801210c:	9303      	str	r3, [sp, #12]
 801210e:	429a      	cmp	r2, r3
 8012110:	d80c      	bhi.n	801212c <__multiply+0x9c>
 8012112:	2e00      	cmp	r6, #0
 8012114:	dd03      	ble.n	801211e <__multiply+0x8e>
 8012116:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801211a:	2b00      	cmp	r3, #0
 801211c:	d059      	beq.n	80121d2 <__multiply+0x142>
 801211e:	6106      	str	r6, [r0, #16]
 8012120:	b005      	add	sp, #20
 8012122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012126:	f843 2b04 	str.w	r2, [r3], #4
 801212a:	e7d8      	b.n	80120de <__multiply+0x4e>
 801212c:	f8b3 a000 	ldrh.w	sl, [r3]
 8012130:	f1ba 0f00 	cmp.w	sl, #0
 8012134:	d023      	beq.n	801217e <__multiply+0xee>
 8012136:	46a9      	mov	r9, r5
 8012138:	f04f 0c00 	mov.w	ip, #0
 801213c:	f104 0e14 	add.w	lr, r4, #20
 8012140:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012144:	f8d9 1000 	ldr.w	r1, [r9]
 8012148:	fa1f fb82 	uxth.w	fp, r2
 801214c:	b289      	uxth	r1, r1
 801214e:	fb0a 110b 	mla	r1, sl, fp, r1
 8012152:	4461      	add	r1, ip
 8012154:	f8d9 c000 	ldr.w	ip, [r9]
 8012158:	0c12      	lsrs	r2, r2, #16
 801215a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801215e:	fb0a c202 	mla	r2, sl, r2, ip
 8012162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012166:	b289      	uxth	r1, r1
 8012168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801216c:	4577      	cmp	r7, lr
 801216e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012172:	f849 1b04 	str.w	r1, [r9], #4
 8012176:	d8e3      	bhi.n	8012140 <__multiply+0xb0>
 8012178:	9a01      	ldr	r2, [sp, #4]
 801217a:	f845 c002 	str.w	ip, [r5, r2]
 801217e:	9a03      	ldr	r2, [sp, #12]
 8012180:	3304      	adds	r3, #4
 8012182:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012186:	f1b9 0f00 	cmp.w	r9, #0
 801218a:	d020      	beq.n	80121ce <__multiply+0x13e>
 801218c:	46ae      	mov	lr, r5
 801218e:	f04f 0a00 	mov.w	sl, #0
 8012192:	6829      	ldr	r1, [r5, #0]
 8012194:	f104 0c14 	add.w	ip, r4, #20
 8012198:	f8bc b000 	ldrh.w	fp, [ip]
 801219c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80121a0:	b289      	uxth	r1, r1
 80121a2:	fb09 220b 	mla	r2, r9, fp, r2
 80121a6:	4492      	add	sl, r2
 80121a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80121ac:	f84e 1b04 	str.w	r1, [lr], #4
 80121b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80121b4:	f8be 1000 	ldrh.w	r1, [lr]
 80121b8:	0c12      	lsrs	r2, r2, #16
 80121ba:	fb09 1102 	mla	r1, r9, r2, r1
 80121be:	4567      	cmp	r7, ip
 80121c0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80121c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80121c8:	d8e6      	bhi.n	8012198 <__multiply+0x108>
 80121ca:	9a01      	ldr	r2, [sp, #4]
 80121cc:	50a9      	str	r1, [r5, r2]
 80121ce:	3504      	adds	r5, #4
 80121d0:	e79b      	b.n	801210a <__multiply+0x7a>
 80121d2:	3e01      	subs	r6, #1
 80121d4:	e79d      	b.n	8012112 <__multiply+0x82>
 80121d6:	bf00      	nop
 80121d8:	08013ca8 	.word	0x08013ca8
 80121dc:	08013d34 	.word	0x08013d34

080121e0 <__pow5mult>:
 80121e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121e4:	4615      	mov	r5, r2
 80121e6:	f012 0203 	ands.w	r2, r2, #3
 80121ea:	4606      	mov	r6, r0
 80121ec:	460f      	mov	r7, r1
 80121ee:	d007      	beq.n	8012200 <__pow5mult+0x20>
 80121f0:	4c25      	ldr	r4, [pc, #148]	; (8012288 <__pow5mult+0xa8>)
 80121f2:	3a01      	subs	r2, #1
 80121f4:	2300      	movs	r3, #0
 80121f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80121fa:	f7ff fe55 	bl	8011ea8 <__multadd>
 80121fe:	4607      	mov	r7, r0
 8012200:	10ad      	asrs	r5, r5, #2
 8012202:	d03d      	beq.n	8012280 <__pow5mult+0xa0>
 8012204:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012206:	b97c      	cbnz	r4, 8012228 <__pow5mult+0x48>
 8012208:	2010      	movs	r0, #16
 801220a:	f7ff fdc3 	bl	8011d94 <malloc>
 801220e:	4602      	mov	r2, r0
 8012210:	6270      	str	r0, [r6, #36]	; 0x24
 8012212:	b928      	cbnz	r0, 8012220 <__pow5mult+0x40>
 8012214:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012218:	4b1c      	ldr	r3, [pc, #112]	; (801228c <__pow5mult+0xac>)
 801221a:	481d      	ldr	r0, [pc, #116]	; (8012290 <__pow5mult+0xb0>)
 801221c:	f7fe fba4 	bl	8010968 <__assert_func>
 8012220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012224:	6004      	str	r4, [r0, #0]
 8012226:	60c4      	str	r4, [r0, #12]
 8012228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801222c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012230:	b94c      	cbnz	r4, 8012246 <__pow5mult+0x66>
 8012232:	f240 2171 	movw	r1, #625	; 0x271
 8012236:	4630      	mov	r0, r6
 8012238:	f7ff ff14 	bl	8012064 <__i2b>
 801223c:	2300      	movs	r3, #0
 801223e:	4604      	mov	r4, r0
 8012240:	f8c8 0008 	str.w	r0, [r8, #8]
 8012244:	6003      	str	r3, [r0, #0]
 8012246:	f04f 0900 	mov.w	r9, #0
 801224a:	07eb      	lsls	r3, r5, #31
 801224c:	d50a      	bpl.n	8012264 <__pow5mult+0x84>
 801224e:	4639      	mov	r1, r7
 8012250:	4622      	mov	r2, r4
 8012252:	4630      	mov	r0, r6
 8012254:	f7ff ff1c 	bl	8012090 <__multiply>
 8012258:	4680      	mov	r8, r0
 801225a:	4639      	mov	r1, r7
 801225c:	4630      	mov	r0, r6
 801225e:	f7ff fe01 	bl	8011e64 <_Bfree>
 8012262:	4647      	mov	r7, r8
 8012264:	106d      	asrs	r5, r5, #1
 8012266:	d00b      	beq.n	8012280 <__pow5mult+0xa0>
 8012268:	6820      	ldr	r0, [r4, #0]
 801226a:	b938      	cbnz	r0, 801227c <__pow5mult+0x9c>
 801226c:	4622      	mov	r2, r4
 801226e:	4621      	mov	r1, r4
 8012270:	4630      	mov	r0, r6
 8012272:	f7ff ff0d 	bl	8012090 <__multiply>
 8012276:	6020      	str	r0, [r4, #0]
 8012278:	f8c0 9000 	str.w	r9, [r0]
 801227c:	4604      	mov	r4, r0
 801227e:	e7e4      	b.n	801224a <__pow5mult+0x6a>
 8012280:	4638      	mov	r0, r7
 8012282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012286:	bf00      	nop
 8012288:	08013e80 	.word	0x08013e80
 801228c:	08013b90 	.word	0x08013b90
 8012290:	08013d34 	.word	0x08013d34

08012294 <__lshift>:
 8012294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012298:	460c      	mov	r4, r1
 801229a:	4607      	mov	r7, r0
 801229c:	4691      	mov	r9, r2
 801229e:	6923      	ldr	r3, [r4, #16]
 80122a0:	6849      	ldr	r1, [r1, #4]
 80122a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80122a6:	68a3      	ldr	r3, [r4, #8]
 80122a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80122ac:	f108 0601 	add.w	r6, r8, #1
 80122b0:	42b3      	cmp	r3, r6
 80122b2:	db0b      	blt.n	80122cc <__lshift+0x38>
 80122b4:	4638      	mov	r0, r7
 80122b6:	f7ff fd95 	bl	8011de4 <_Balloc>
 80122ba:	4605      	mov	r5, r0
 80122bc:	b948      	cbnz	r0, 80122d2 <__lshift+0x3e>
 80122be:	4602      	mov	r2, r0
 80122c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80122c4:	4b29      	ldr	r3, [pc, #164]	; (801236c <__lshift+0xd8>)
 80122c6:	482a      	ldr	r0, [pc, #168]	; (8012370 <__lshift+0xdc>)
 80122c8:	f7fe fb4e 	bl	8010968 <__assert_func>
 80122cc:	3101      	adds	r1, #1
 80122ce:	005b      	lsls	r3, r3, #1
 80122d0:	e7ee      	b.n	80122b0 <__lshift+0x1c>
 80122d2:	2300      	movs	r3, #0
 80122d4:	f100 0114 	add.w	r1, r0, #20
 80122d8:	f100 0210 	add.w	r2, r0, #16
 80122dc:	4618      	mov	r0, r3
 80122de:	4553      	cmp	r3, sl
 80122e0:	db37      	blt.n	8012352 <__lshift+0xbe>
 80122e2:	6920      	ldr	r0, [r4, #16]
 80122e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80122e8:	f104 0314 	add.w	r3, r4, #20
 80122ec:	f019 091f 	ands.w	r9, r9, #31
 80122f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80122f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80122f8:	d02f      	beq.n	801235a <__lshift+0xc6>
 80122fa:	468a      	mov	sl, r1
 80122fc:	f04f 0c00 	mov.w	ip, #0
 8012300:	f1c9 0e20 	rsb	lr, r9, #32
 8012304:	681a      	ldr	r2, [r3, #0]
 8012306:	fa02 f209 	lsl.w	r2, r2, r9
 801230a:	ea42 020c 	orr.w	r2, r2, ip
 801230e:	f84a 2b04 	str.w	r2, [sl], #4
 8012312:	f853 2b04 	ldr.w	r2, [r3], #4
 8012316:	4298      	cmp	r0, r3
 8012318:	fa22 fc0e 	lsr.w	ip, r2, lr
 801231c:	d8f2      	bhi.n	8012304 <__lshift+0x70>
 801231e:	1b03      	subs	r3, r0, r4
 8012320:	3b15      	subs	r3, #21
 8012322:	f023 0303 	bic.w	r3, r3, #3
 8012326:	3304      	adds	r3, #4
 8012328:	f104 0215 	add.w	r2, r4, #21
 801232c:	4290      	cmp	r0, r2
 801232e:	bf38      	it	cc
 8012330:	2304      	movcc	r3, #4
 8012332:	f841 c003 	str.w	ip, [r1, r3]
 8012336:	f1bc 0f00 	cmp.w	ip, #0
 801233a:	d001      	beq.n	8012340 <__lshift+0xac>
 801233c:	f108 0602 	add.w	r6, r8, #2
 8012340:	3e01      	subs	r6, #1
 8012342:	4638      	mov	r0, r7
 8012344:	4621      	mov	r1, r4
 8012346:	612e      	str	r6, [r5, #16]
 8012348:	f7ff fd8c 	bl	8011e64 <_Bfree>
 801234c:	4628      	mov	r0, r5
 801234e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012352:	f842 0f04 	str.w	r0, [r2, #4]!
 8012356:	3301      	adds	r3, #1
 8012358:	e7c1      	b.n	80122de <__lshift+0x4a>
 801235a:	3904      	subs	r1, #4
 801235c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012360:	4298      	cmp	r0, r3
 8012362:	f841 2f04 	str.w	r2, [r1, #4]!
 8012366:	d8f9      	bhi.n	801235c <__lshift+0xc8>
 8012368:	e7ea      	b.n	8012340 <__lshift+0xac>
 801236a:	bf00      	nop
 801236c:	08013ca8 	.word	0x08013ca8
 8012370:	08013d34 	.word	0x08013d34

08012374 <__mcmp>:
 8012374:	4603      	mov	r3, r0
 8012376:	690a      	ldr	r2, [r1, #16]
 8012378:	6900      	ldr	r0, [r0, #16]
 801237a:	b530      	push	{r4, r5, lr}
 801237c:	1a80      	subs	r0, r0, r2
 801237e:	d10d      	bne.n	801239c <__mcmp+0x28>
 8012380:	3314      	adds	r3, #20
 8012382:	3114      	adds	r1, #20
 8012384:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012388:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801238c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012390:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012394:	4295      	cmp	r5, r2
 8012396:	d002      	beq.n	801239e <__mcmp+0x2a>
 8012398:	d304      	bcc.n	80123a4 <__mcmp+0x30>
 801239a:	2001      	movs	r0, #1
 801239c:	bd30      	pop	{r4, r5, pc}
 801239e:	42a3      	cmp	r3, r4
 80123a0:	d3f4      	bcc.n	801238c <__mcmp+0x18>
 80123a2:	e7fb      	b.n	801239c <__mcmp+0x28>
 80123a4:	f04f 30ff 	mov.w	r0, #4294967295
 80123a8:	e7f8      	b.n	801239c <__mcmp+0x28>
	...

080123ac <__mdiff>:
 80123ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b0:	460d      	mov	r5, r1
 80123b2:	4607      	mov	r7, r0
 80123b4:	4611      	mov	r1, r2
 80123b6:	4628      	mov	r0, r5
 80123b8:	4614      	mov	r4, r2
 80123ba:	f7ff ffdb 	bl	8012374 <__mcmp>
 80123be:	1e06      	subs	r6, r0, #0
 80123c0:	d111      	bne.n	80123e6 <__mdiff+0x3a>
 80123c2:	4631      	mov	r1, r6
 80123c4:	4638      	mov	r0, r7
 80123c6:	f7ff fd0d 	bl	8011de4 <_Balloc>
 80123ca:	4602      	mov	r2, r0
 80123cc:	b928      	cbnz	r0, 80123da <__mdiff+0x2e>
 80123ce:	f240 2132 	movw	r1, #562	; 0x232
 80123d2:	4b3a      	ldr	r3, [pc, #232]	; (80124bc <__mdiff+0x110>)
 80123d4:	483a      	ldr	r0, [pc, #232]	; (80124c0 <__mdiff+0x114>)
 80123d6:	f7fe fac7 	bl	8010968 <__assert_func>
 80123da:	2301      	movs	r3, #1
 80123dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80123e0:	4610      	mov	r0, r2
 80123e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e6:	bfa4      	itt	ge
 80123e8:	4623      	movge	r3, r4
 80123ea:	462c      	movge	r4, r5
 80123ec:	4638      	mov	r0, r7
 80123ee:	6861      	ldr	r1, [r4, #4]
 80123f0:	bfa6      	itte	ge
 80123f2:	461d      	movge	r5, r3
 80123f4:	2600      	movge	r6, #0
 80123f6:	2601      	movlt	r6, #1
 80123f8:	f7ff fcf4 	bl	8011de4 <_Balloc>
 80123fc:	4602      	mov	r2, r0
 80123fe:	b918      	cbnz	r0, 8012408 <__mdiff+0x5c>
 8012400:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012404:	4b2d      	ldr	r3, [pc, #180]	; (80124bc <__mdiff+0x110>)
 8012406:	e7e5      	b.n	80123d4 <__mdiff+0x28>
 8012408:	f102 0814 	add.w	r8, r2, #20
 801240c:	46c2      	mov	sl, r8
 801240e:	f04f 0c00 	mov.w	ip, #0
 8012412:	6927      	ldr	r7, [r4, #16]
 8012414:	60c6      	str	r6, [r0, #12]
 8012416:	692e      	ldr	r6, [r5, #16]
 8012418:	f104 0014 	add.w	r0, r4, #20
 801241c:	f105 0914 	add.w	r9, r5, #20
 8012420:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8012424:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012428:	3410      	adds	r4, #16
 801242a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801242e:	f859 3b04 	ldr.w	r3, [r9], #4
 8012432:	fa1f f18b 	uxth.w	r1, fp
 8012436:	448c      	add	ip, r1
 8012438:	b299      	uxth	r1, r3
 801243a:	0c1b      	lsrs	r3, r3, #16
 801243c:	ebac 0101 	sub.w	r1, ip, r1
 8012440:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012444:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012448:	b289      	uxth	r1, r1
 801244a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801244e:	454e      	cmp	r6, r9
 8012450:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012454:	f84a 3b04 	str.w	r3, [sl], #4
 8012458:	d8e7      	bhi.n	801242a <__mdiff+0x7e>
 801245a:	1b73      	subs	r3, r6, r5
 801245c:	3b15      	subs	r3, #21
 801245e:	f023 0303 	bic.w	r3, r3, #3
 8012462:	3515      	adds	r5, #21
 8012464:	3304      	adds	r3, #4
 8012466:	42ae      	cmp	r6, r5
 8012468:	bf38      	it	cc
 801246a:	2304      	movcc	r3, #4
 801246c:	4418      	add	r0, r3
 801246e:	4443      	add	r3, r8
 8012470:	461e      	mov	r6, r3
 8012472:	4605      	mov	r5, r0
 8012474:	4575      	cmp	r5, lr
 8012476:	d30e      	bcc.n	8012496 <__mdiff+0xea>
 8012478:	f10e 0103 	add.w	r1, lr, #3
 801247c:	1a09      	subs	r1, r1, r0
 801247e:	f021 0103 	bic.w	r1, r1, #3
 8012482:	3803      	subs	r0, #3
 8012484:	4586      	cmp	lr, r0
 8012486:	bf38      	it	cc
 8012488:	2100      	movcc	r1, #0
 801248a:	4419      	add	r1, r3
 801248c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8012490:	b18b      	cbz	r3, 80124b6 <__mdiff+0x10a>
 8012492:	6117      	str	r7, [r2, #16]
 8012494:	e7a4      	b.n	80123e0 <__mdiff+0x34>
 8012496:	f855 8b04 	ldr.w	r8, [r5], #4
 801249a:	fa1f f188 	uxth.w	r1, r8
 801249e:	4461      	add	r1, ip
 80124a0:	140c      	asrs	r4, r1, #16
 80124a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80124a6:	b289      	uxth	r1, r1
 80124a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80124ac:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80124b0:	f846 1b04 	str.w	r1, [r6], #4
 80124b4:	e7de      	b.n	8012474 <__mdiff+0xc8>
 80124b6:	3f01      	subs	r7, #1
 80124b8:	e7e8      	b.n	801248c <__mdiff+0xe0>
 80124ba:	bf00      	nop
 80124bc:	08013ca8 	.word	0x08013ca8
 80124c0:	08013d34 	.word	0x08013d34

080124c4 <__ulp>:
 80124c4:	4b11      	ldr	r3, [pc, #68]	; (801250c <__ulp+0x48>)
 80124c6:	400b      	ands	r3, r1
 80124c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	dd02      	ble.n	80124d6 <__ulp+0x12>
 80124d0:	2000      	movs	r0, #0
 80124d2:	4619      	mov	r1, r3
 80124d4:	4770      	bx	lr
 80124d6:	425b      	negs	r3, r3
 80124d8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80124dc:	f04f 0000 	mov.w	r0, #0
 80124e0:	f04f 0100 	mov.w	r1, #0
 80124e4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80124e8:	da04      	bge.n	80124f4 <__ulp+0x30>
 80124ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80124ee:	fa43 f102 	asr.w	r1, r3, r2
 80124f2:	4770      	bx	lr
 80124f4:	f1a2 0314 	sub.w	r3, r2, #20
 80124f8:	2b1e      	cmp	r3, #30
 80124fa:	bfd6      	itet	le
 80124fc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012500:	2301      	movgt	r3, #1
 8012502:	fa22 f303 	lsrle.w	r3, r2, r3
 8012506:	4618      	mov	r0, r3
 8012508:	4770      	bx	lr
 801250a:	bf00      	nop
 801250c:	7ff00000 	.word	0x7ff00000

08012510 <__b2d>:
 8012510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012514:	6907      	ldr	r7, [r0, #16]
 8012516:	f100 0914 	add.w	r9, r0, #20
 801251a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801251e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8012522:	f1a7 0804 	sub.w	r8, r7, #4
 8012526:	4630      	mov	r0, r6
 8012528:	f7ff fd4e 	bl	8011fc8 <__hi0bits>
 801252c:	f1c0 0320 	rsb	r3, r0, #32
 8012530:	280a      	cmp	r0, #10
 8012532:	600b      	str	r3, [r1, #0]
 8012534:	491f      	ldr	r1, [pc, #124]	; (80125b4 <__b2d+0xa4>)
 8012536:	dc17      	bgt.n	8012568 <__b2d+0x58>
 8012538:	45c1      	cmp	r9, r8
 801253a:	bf28      	it	cs
 801253c:	2200      	movcs	r2, #0
 801253e:	f1c0 0c0b 	rsb	ip, r0, #11
 8012542:	fa26 f30c 	lsr.w	r3, r6, ip
 8012546:	bf38      	it	cc
 8012548:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801254c:	ea43 0501 	orr.w	r5, r3, r1
 8012550:	f100 0315 	add.w	r3, r0, #21
 8012554:	fa06 f303 	lsl.w	r3, r6, r3
 8012558:	fa22 f20c 	lsr.w	r2, r2, ip
 801255c:	ea43 0402 	orr.w	r4, r3, r2
 8012560:	4620      	mov	r0, r4
 8012562:	4629      	mov	r1, r5
 8012564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012568:	45c1      	cmp	r9, r8
 801256a:	bf2e      	itee	cs
 801256c:	2200      	movcs	r2, #0
 801256e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8012572:	f1a7 0808 	subcc.w	r8, r7, #8
 8012576:	f1b0 030b 	subs.w	r3, r0, #11
 801257a:	d016      	beq.n	80125aa <__b2d+0x9a>
 801257c:	f1c3 0720 	rsb	r7, r3, #32
 8012580:	fa22 f107 	lsr.w	r1, r2, r7
 8012584:	45c8      	cmp	r8, r9
 8012586:	fa06 f603 	lsl.w	r6, r6, r3
 801258a:	ea46 0601 	orr.w	r6, r6, r1
 801258e:	bf94      	ite	ls
 8012590:	2100      	movls	r1, #0
 8012592:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8012596:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801259a:	fa02 f003 	lsl.w	r0, r2, r3
 801259e:	40f9      	lsrs	r1, r7
 80125a0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80125a4:	ea40 0401 	orr.w	r4, r0, r1
 80125a8:	e7da      	b.n	8012560 <__b2d+0x50>
 80125aa:	4614      	mov	r4, r2
 80125ac:	ea46 0501 	orr.w	r5, r6, r1
 80125b0:	e7d6      	b.n	8012560 <__b2d+0x50>
 80125b2:	bf00      	nop
 80125b4:	3ff00000 	.word	0x3ff00000

080125b8 <__d2b>:
 80125b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80125bc:	2101      	movs	r1, #1
 80125be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80125c2:	4690      	mov	r8, r2
 80125c4:	461d      	mov	r5, r3
 80125c6:	f7ff fc0d 	bl	8011de4 <_Balloc>
 80125ca:	4604      	mov	r4, r0
 80125cc:	b930      	cbnz	r0, 80125dc <__d2b+0x24>
 80125ce:	4602      	mov	r2, r0
 80125d0:	f240 310a 	movw	r1, #778	; 0x30a
 80125d4:	4b24      	ldr	r3, [pc, #144]	; (8012668 <__d2b+0xb0>)
 80125d6:	4825      	ldr	r0, [pc, #148]	; (801266c <__d2b+0xb4>)
 80125d8:	f7fe f9c6 	bl	8010968 <__assert_func>
 80125dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80125e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80125e4:	bb2d      	cbnz	r5, 8012632 <__d2b+0x7a>
 80125e6:	9301      	str	r3, [sp, #4]
 80125e8:	f1b8 0300 	subs.w	r3, r8, #0
 80125ec:	d026      	beq.n	801263c <__d2b+0x84>
 80125ee:	4668      	mov	r0, sp
 80125f0:	9300      	str	r3, [sp, #0]
 80125f2:	f7ff fd09 	bl	8012008 <__lo0bits>
 80125f6:	9900      	ldr	r1, [sp, #0]
 80125f8:	b1f0      	cbz	r0, 8012638 <__d2b+0x80>
 80125fa:	9a01      	ldr	r2, [sp, #4]
 80125fc:	f1c0 0320 	rsb	r3, r0, #32
 8012600:	fa02 f303 	lsl.w	r3, r2, r3
 8012604:	430b      	orrs	r3, r1
 8012606:	40c2      	lsrs	r2, r0
 8012608:	6163      	str	r3, [r4, #20]
 801260a:	9201      	str	r2, [sp, #4]
 801260c:	9b01      	ldr	r3, [sp, #4]
 801260e:	2b00      	cmp	r3, #0
 8012610:	bf14      	ite	ne
 8012612:	2102      	movne	r1, #2
 8012614:	2101      	moveq	r1, #1
 8012616:	61a3      	str	r3, [r4, #24]
 8012618:	6121      	str	r1, [r4, #16]
 801261a:	b1c5      	cbz	r5, 801264e <__d2b+0x96>
 801261c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012620:	4405      	add	r5, r0
 8012622:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012626:	603d      	str	r5, [r7, #0]
 8012628:	6030      	str	r0, [r6, #0]
 801262a:	4620      	mov	r0, r4
 801262c:	b002      	add	sp, #8
 801262e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012636:	e7d6      	b.n	80125e6 <__d2b+0x2e>
 8012638:	6161      	str	r1, [r4, #20]
 801263a:	e7e7      	b.n	801260c <__d2b+0x54>
 801263c:	a801      	add	r0, sp, #4
 801263e:	f7ff fce3 	bl	8012008 <__lo0bits>
 8012642:	2101      	movs	r1, #1
 8012644:	9b01      	ldr	r3, [sp, #4]
 8012646:	6121      	str	r1, [r4, #16]
 8012648:	6163      	str	r3, [r4, #20]
 801264a:	3020      	adds	r0, #32
 801264c:	e7e5      	b.n	801261a <__d2b+0x62>
 801264e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8012652:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012656:	6038      	str	r0, [r7, #0]
 8012658:	6918      	ldr	r0, [r3, #16]
 801265a:	f7ff fcb5 	bl	8011fc8 <__hi0bits>
 801265e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8012662:	6031      	str	r1, [r6, #0]
 8012664:	e7e1      	b.n	801262a <__d2b+0x72>
 8012666:	bf00      	nop
 8012668:	08013ca8 	.word	0x08013ca8
 801266c:	08013d34 	.word	0x08013d34

08012670 <__ratio>:
 8012670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012674:	4688      	mov	r8, r1
 8012676:	4669      	mov	r1, sp
 8012678:	4681      	mov	r9, r0
 801267a:	f7ff ff49 	bl	8012510 <__b2d>
 801267e:	460f      	mov	r7, r1
 8012680:	4604      	mov	r4, r0
 8012682:	460d      	mov	r5, r1
 8012684:	4640      	mov	r0, r8
 8012686:	a901      	add	r1, sp, #4
 8012688:	f7ff ff42 	bl	8012510 <__b2d>
 801268c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012690:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012694:	468b      	mov	fp, r1
 8012696:	eba3 0c02 	sub.w	ip, r3, r2
 801269a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801269e:	1a9b      	subs	r3, r3, r2
 80126a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	bfd5      	itete	le
 80126a8:	460a      	movle	r2, r1
 80126aa:	462a      	movgt	r2, r5
 80126ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80126b0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80126b4:	bfd8      	it	le
 80126b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80126ba:	465b      	mov	r3, fp
 80126bc:	4602      	mov	r2, r0
 80126be:	4639      	mov	r1, r7
 80126c0:	4620      	mov	r0, r4
 80126c2:	f7ee f855 	bl	8000770 <__aeabi_ddiv>
 80126c6:	b003      	add	sp, #12
 80126c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080126cc <__copybits>:
 80126cc:	3901      	subs	r1, #1
 80126ce:	b570      	push	{r4, r5, r6, lr}
 80126d0:	1149      	asrs	r1, r1, #5
 80126d2:	6914      	ldr	r4, [r2, #16]
 80126d4:	3101      	adds	r1, #1
 80126d6:	f102 0314 	add.w	r3, r2, #20
 80126da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80126de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80126e2:	1f05      	subs	r5, r0, #4
 80126e4:	42a3      	cmp	r3, r4
 80126e6:	d30c      	bcc.n	8012702 <__copybits+0x36>
 80126e8:	1aa3      	subs	r3, r4, r2
 80126ea:	3b11      	subs	r3, #17
 80126ec:	f023 0303 	bic.w	r3, r3, #3
 80126f0:	3211      	adds	r2, #17
 80126f2:	42a2      	cmp	r2, r4
 80126f4:	bf88      	it	hi
 80126f6:	2300      	movhi	r3, #0
 80126f8:	4418      	add	r0, r3
 80126fa:	2300      	movs	r3, #0
 80126fc:	4288      	cmp	r0, r1
 80126fe:	d305      	bcc.n	801270c <__copybits+0x40>
 8012700:	bd70      	pop	{r4, r5, r6, pc}
 8012702:	f853 6b04 	ldr.w	r6, [r3], #4
 8012706:	f845 6f04 	str.w	r6, [r5, #4]!
 801270a:	e7eb      	b.n	80126e4 <__copybits+0x18>
 801270c:	f840 3b04 	str.w	r3, [r0], #4
 8012710:	e7f4      	b.n	80126fc <__copybits+0x30>

08012712 <__any_on>:
 8012712:	f100 0214 	add.w	r2, r0, #20
 8012716:	6900      	ldr	r0, [r0, #16]
 8012718:	114b      	asrs	r3, r1, #5
 801271a:	4298      	cmp	r0, r3
 801271c:	b510      	push	{r4, lr}
 801271e:	db11      	blt.n	8012744 <__any_on+0x32>
 8012720:	dd0a      	ble.n	8012738 <__any_on+0x26>
 8012722:	f011 011f 	ands.w	r1, r1, #31
 8012726:	d007      	beq.n	8012738 <__any_on+0x26>
 8012728:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801272c:	fa24 f001 	lsr.w	r0, r4, r1
 8012730:	fa00 f101 	lsl.w	r1, r0, r1
 8012734:	428c      	cmp	r4, r1
 8012736:	d10b      	bne.n	8012750 <__any_on+0x3e>
 8012738:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801273c:	4293      	cmp	r3, r2
 801273e:	d803      	bhi.n	8012748 <__any_on+0x36>
 8012740:	2000      	movs	r0, #0
 8012742:	bd10      	pop	{r4, pc}
 8012744:	4603      	mov	r3, r0
 8012746:	e7f7      	b.n	8012738 <__any_on+0x26>
 8012748:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801274c:	2900      	cmp	r1, #0
 801274e:	d0f5      	beq.n	801273c <__any_on+0x2a>
 8012750:	2001      	movs	r0, #1
 8012752:	e7f6      	b.n	8012742 <__any_on+0x30>

08012754 <_calloc_r>:
 8012754:	b570      	push	{r4, r5, r6, lr}
 8012756:	fba1 5402 	umull	r5, r4, r1, r2
 801275a:	b934      	cbnz	r4, 801276a <_calloc_r+0x16>
 801275c:	4629      	mov	r1, r5
 801275e:	f000 f875 	bl	801284c <_malloc_r>
 8012762:	4606      	mov	r6, r0
 8012764:	b928      	cbnz	r0, 8012772 <_calloc_r+0x1e>
 8012766:	4630      	mov	r0, r6
 8012768:	bd70      	pop	{r4, r5, r6, pc}
 801276a:	220c      	movs	r2, #12
 801276c:	2600      	movs	r6, #0
 801276e:	6002      	str	r2, [r0, #0]
 8012770:	e7f9      	b.n	8012766 <_calloc_r+0x12>
 8012772:	462a      	mov	r2, r5
 8012774:	4621      	mov	r1, r4
 8012776:	f7fc fdf3 	bl	800f360 <memset>
 801277a:	e7f4      	b.n	8012766 <_calloc_r+0x12>

0801277c <_free_r>:
 801277c:	b538      	push	{r3, r4, r5, lr}
 801277e:	4605      	mov	r5, r0
 8012780:	2900      	cmp	r1, #0
 8012782:	d040      	beq.n	8012806 <_free_r+0x8a>
 8012784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012788:	1f0c      	subs	r4, r1, #4
 801278a:	2b00      	cmp	r3, #0
 801278c:	bfb8      	it	lt
 801278e:	18e4      	addlt	r4, r4, r3
 8012790:	f000 feba 	bl	8013508 <__malloc_lock>
 8012794:	4a1c      	ldr	r2, [pc, #112]	; (8012808 <_free_r+0x8c>)
 8012796:	6813      	ldr	r3, [r2, #0]
 8012798:	b933      	cbnz	r3, 80127a8 <_free_r+0x2c>
 801279a:	6063      	str	r3, [r4, #4]
 801279c:	6014      	str	r4, [r2, #0]
 801279e:	4628      	mov	r0, r5
 80127a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127a4:	f000 beb6 	b.w	8013514 <__malloc_unlock>
 80127a8:	42a3      	cmp	r3, r4
 80127aa:	d908      	bls.n	80127be <_free_r+0x42>
 80127ac:	6820      	ldr	r0, [r4, #0]
 80127ae:	1821      	adds	r1, r4, r0
 80127b0:	428b      	cmp	r3, r1
 80127b2:	bf01      	itttt	eq
 80127b4:	6819      	ldreq	r1, [r3, #0]
 80127b6:	685b      	ldreq	r3, [r3, #4]
 80127b8:	1809      	addeq	r1, r1, r0
 80127ba:	6021      	streq	r1, [r4, #0]
 80127bc:	e7ed      	b.n	801279a <_free_r+0x1e>
 80127be:	461a      	mov	r2, r3
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	b10b      	cbz	r3, 80127c8 <_free_r+0x4c>
 80127c4:	42a3      	cmp	r3, r4
 80127c6:	d9fa      	bls.n	80127be <_free_r+0x42>
 80127c8:	6811      	ldr	r1, [r2, #0]
 80127ca:	1850      	adds	r0, r2, r1
 80127cc:	42a0      	cmp	r0, r4
 80127ce:	d10b      	bne.n	80127e8 <_free_r+0x6c>
 80127d0:	6820      	ldr	r0, [r4, #0]
 80127d2:	4401      	add	r1, r0
 80127d4:	1850      	adds	r0, r2, r1
 80127d6:	4283      	cmp	r3, r0
 80127d8:	6011      	str	r1, [r2, #0]
 80127da:	d1e0      	bne.n	801279e <_free_r+0x22>
 80127dc:	6818      	ldr	r0, [r3, #0]
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	4401      	add	r1, r0
 80127e2:	6011      	str	r1, [r2, #0]
 80127e4:	6053      	str	r3, [r2, #4]
 80127e6:	e7da      	b.n	801279e <_free_r+0x22>
 80127e8:	d902      	bls.n	80127f0 <_free_r+0x74>
 80127ea:	230c      	movs	r3, #12
 80127ec:	602b      	str	r3, [r5, #0]
 80127ee:	e7d6      	b.n	801279e <_free_r+0x22>
 80127f0:	6820      	ldr	r0, [r4, #0]
 80127f2:	1821      	adds	r1, r4, r0
 80127f4:	428b      	cmp	r3, r1
 80127f6:	bf01      	itttt	eq
 80127f8:	6819      	ldreq	r1, [r3, #0]
 80127fa:	685b      	ldreq	r3, [r3, #4]
 80127fc:	1809      	addeq	r1, r1, r0
 80127fe:	6021      	streq	r1, [r4, #0]
 8012800:	6063      	str	r3, [r4, #4]
 8012802:	6054      	str	r4, [r2, #4]
 8012804:	e7cb      	b.n	801279e <_free_r+0x22>
 8012806:	bd38      	pop	{r3, r4, r5, pc}
 8012808:	200019fc 	.word	0x200019fc

0801280c <sbrk_aligned>:
 801280c:	b570      	push	{r4, r5, r6, lr}
 801280e:	4e0e      	ldr	r6, [pc, #56]	; (8012848 <sbrk_aligned+0x3c>)
 8012810:	460c      	mov	r4, r1
 8012812:	6831      	ldr	r1, [r6, #0]
 8012814:	4605      	mov	r5, r0
 8012816:	b911      	cbnz	r1, 801281e <sbrk_aligned+0x12>
 8012818:	f000 fb46 	bl	8012ea8 <_sbrk_r>
 801281c:	6030      	str	r0, [r6, #0]
 801281e:	4621      	mov	r1, r4
 8012820:	4628      	mov	r0, r5
 8012822:	f000 fb41 	bl	8012ea8 <_sbrk_r>
 8012826:	1c43      	adds	r3, r0, #1
 8012828:	d00a      	beq.n	8012840 <sbrk_aligned+0x34>
 801282a:	1cc4      	adds	r4, r0, #3
 801282c:	f024 0403 	bic.w	r4, r4, #3
 8012830:	42a0      	cmp	r0, r4
 8012832:	d007      	beq.n	8012844 <sbrk_aligned+0x38>
 8012834:	1a21      	subs	r1, r4, r0
 8012836:	4628      	mov	r0, r5
 8012838:	f000 fb36 	bl	8012ea8 <_sbrk_r>
 801283c:	3001      	adds	r0, #1
 801283e:	d101      	bne.n	8012844 <sbrk_aligned+0x38>
 8012840:	f04f 34ff 	mov.w	r4, #4294967295
 8012844:	4620      	mov	r0, r4
 8012846:	bd70      	pop	{r4, r5, r6, pc}
 8012848:	20001a00 	.word	0x20001a00

0801284c <_malloc_r>:
 801284c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012850:	1ccd      	adds	r5, r1, #3
 8012852:	f025 0503 	bic.w	r5, r5, #3
 8012856:	3508      	adds	r5, #8
 8012858:	2d0c      	cmp	r5, #12
 801285a:	bf38      	it	cc
 801285c:	250c      	movcc	r5, #12
 801285e:	2d00      	cmp	r5, #0
 8012860:	4607      	mov	r7, r0
 8012862:	db01      	blt.n	8012868 <_malloc_r+0x1c>
 8012864:	42a9      	cmp	r1, r5
 8012866:	d905      	bls.n	8012874 <_malloc_r+0x28>
 8012868:	230c      	movs	r3, #12
 801286a:	2600      	movs	r6, #0
 801286c:	603b      	str	r3, [r7, #0]
 801286e:	4630      	mov	r0, r6
 8012870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012874:	4e2e      	ldr	r6, [pc, #184]	; (8012930 <_malloc_r+0xe4>)
 8012876:	f000 fe47 	bl	8013508 <__malloc_lock>
 801287a:	6833      	ldr	r3, [r6, #0]
 801287c:	461c      	mov	r4, r3
 801287e:	bb34      	cbnz	r4, 80128ce <_malloc_r+0x82>
 8012880:	4629      	mov	r1, r5
 8012882:	4638      	mov	r0, r7
 8012884:	f7ff ffc2 	bl	801280c <sbrk_aligned>
 8012888:	1c43      	adds	r3, r0, #1
 801288a:	4604      	mov	r4, r0
 801288c:	d14d      	bne.n	801292a <_malloc_r+0xde>
 801288e:	6834      	ldr	r4, [r6, #0]
 8012890:	4626      	mov	r6, r4
 8012892:	2e00      	cmp	r6, #0
 8012894:	d140      	bne.n	8012918 <_malloc_r+0xcc>
 8012896:	6823      	ldr	r3, [r4, #0]
 8012898:	4631      	mov	r1, r6
 801289a:	4638      	mov	r0, r7
 801289c:	eb04 0803 	add.w	r8, r4, r3
 80128a0:	f000 fb02 	bl	8012ea8 <_sbrk_r>
 80128a4:	4580      	cmp	r8, r0
 80128a6:	d13a      	bne.n	801291e <_malloc_r+0xd2>
 80128a8:	6821      	ldr	r1, [r4, #0]
 80128aa:	3503      	adds	r5, #3
 80128ac:	1a6d      	subs	r5, r5, r1
 80128ae:	f025 0503 	bic.w	r5, r5, #3
 80128b2:	3508      	adds	r5, #8
 80128b4:	2d0c      	cmp	r5, #12
 80128b6:	bf38      	it	cc
 80128b8:	250c      	movcc	r5, #12
 80128ba:	4638      	mov	r0, r7
 80128bc:	4629      	mov	r1, r5
 80128be:	f7ff ffa5 	bl	801280c <sbrk_aligned>
 80128c2:	3001      	adds	r0, #1
 80128c4:	d02b      	beq.n	801291e <_malloc_r+0xd2>
 80128c6:	6823      	ldr	r3, [r4, #0]
 80128c8:	442b      	add	r3, r5
 80128ca:	6023      	str	r3, [r4, #0]
 80128cc:	e00e      	b.n	80128ec <_malloc_r+0xa0>
 80128ce:	6822      	ldr	r2, [r4, #0]
 80128d0:	1b52      	subs	r2, r2, r5
 80128d2:	d41e      	bmi.n	8012912 <_malloc_r+0xc6>
 80128d4:	2a0b      	cmp	r2, #11
 80128d6:	d916      	bls.n	8012906 <_malloc_r+0xba>
 80128d8:	1961      	adds	r1, r4, r5
 80128da:	42a3      	cmp	r3, r4
 80128dc:	6025      	str	r5, [r4, #0]
 80128de:	bf18      	it	ne
 80128e0:	6059      	strne	r1, [r3, #4]
 80128e2:	6863      	ldr	r3, [r4, #4]
 80128e4:	bf08      	it	eq
 80128e6:	6031      	streq	r1, [r6, #0]
 80128e8:	5162      	str	r2, [r4, r5]
 80128ea:	604b      	str	r3, [r1, #4]
 80128ec:	4638      	mov	r0, r7
 80128ee:	f104 060b 	add.w	r6, r4, #11
 80128f2:	f000 fe0f 	bl	8013514 <__malloc_unlock>
 80128f6:	f026 0607 	bic.w	r6, r6, #7
 80128fa:	1d23      	adds	r3, r4, #4
 80128fc:	1af2      	subs	r2, r6, r3
 80128fe:	d0b6      	beq.n	801286e <_malloc_r+0x22>
 8012900:	1b9b      	subs	r3, r3, r6
 8012902:	50a3      	str	r3, [r4, r2]
 8012904:	e7b3      	b.n	801286e <_malloc_r+0x22>
 8012906:	6862      	ldr	r2, [r4, #4]
 8012908:	42a3      	cmp	r3, r4
 801290a:	bf0c      	ite	eq
 801290c:	6032      	streq	r2, [r6, #0]
 801290e:	605a      	strne	r2, [r3, #4]
 8012910:	e7ec      	b.n	80128ec <_malloc_r+0xa0>
 8012912:	4623      	mov	r3, r4
 8012914:	6864      	ldr	r4, [r4, #4]
 8012916:	e7b2      	b.n	801287e <_malloc_r+0x32>
 8012918:	4634      	mov	r4, r6
 801291a:	6876      	ldr	r6, [r6, #4]
 801291c:	e7b9      	b.n	8012892 <_malloc_r+0x46>
 801291e:	230c      	movs	r3, #12
 8012920:	4638      	mov	r0, r7
 8012922:	603b      	str	r3, [r7, #0]
 8012924:	f000 fdf6 	bl	8013514 <__malloc_unlock>
 8012928:	e7a1      	b.n	801286e <_malloc_r+0x22>
 801292a:	6025      	str	r5, [r4, #0]
 801292c:	e7de      	b.n	80128ec <_malloc_r+0xa0>
 801292e:	bf00      	nop
 8012930:	200019fc 	.word	0x200019fc

08012934 <__ssputs_r>:
 8012934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012938:	688e      	ldr	r6, [r1, #8]
 801293a:	4682      	mov	sl, r0
 801293c:	429e      	cmp	r6, r3
 801293e:	460c      	mov	r4, r1
 8012940:	4690      	mov	r8, r2
 8012942:	461f      	mov	r7, r3
 8012944:	d838      	bhi.n	80129b8 <__ssputs_r+0x84>
 8012946:	898a      	ldrh	r2, [r1, #12]
 8012948:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801294c:	d032      	beq.n	80129b4 <__ssputs_r+0x80>
 801294e:	6825      	ldr	r5, [r4, #0]
 8012950:	6909      	ldr	r1, [r1, #16]
 8012952:	3301      	adds	r3, #1
 8012954:	eba5 0901 	sub.w	r9, r5, r1
 8012958:	6965      	ldr	r5, [r4, #20]
 801295a:	444b      	add	r3, r9
 801295c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012964:	106d      	asrs	r5, r5, #1
 8012966:	429d      	cmp	r5, r3
 8012968:	bf38      	it	cc
 801296a:	461d      	movcc	r5, r3
 801296c:	0553      	lsls	r3, r2, #21
 801296e:	d531      	bpl.n	80129d4 <__ssputs_r+0xa0>
 8012970:	4629      	mov	r1, r5
 8012972:	f7ff ff6b 	bl	801284c <_malloc_r>
 8012976:	4606      	mov	r6, r0
 8012978:	b950      	cbnz	r0, 8012990 <__ssputs_r+0x5c>
 801297a:	230c      	movs	r3, #12
 801297c:	f04f 30ff 	mov.w	r0, #4294967295
 8012980:	f8ca 3000 	str.w	r3, [sl]
 8012984:	89a3      	ldrh	r3, [r4, #12]
 8012986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801298a:	81a3      	strh	r3, [r4, #12]
 801298c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012990:	464a      	mov	r2, r9
 8012992:	6921      	ldr	r1, [r4, #16]
 8012994:	f7fc fcd6 	bl	800f344 <memcpy>
 8012998:	89a3      	ldrh	r3, [r4, #12]
 801299a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801299e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129a2:	81a3      	strh	r3, [r4, #12]
 80129a4:	6126      	str	r6, [r4, #16]
 80129a6:	444e      	add	r6, r9
 80129a8:	6026      	str	r6, [r4, #0]
 80129aa:	463e      	mov	r6, r7
 80129ac:	6165      	str	r5, [r4, #20]
 80129ae:	eba5 0509 	sub.w	r5, r5, r9
 80129b2:	60a5      	str	r5, [r4, #8]
 80129b4:	42be      	cmp	r6, r7
 80129b6:	d900      	bls.n	80129ba <__ssputs_r+0x86>
 80129b8:	463e      	mov	r6, r7
 80129ba:	4632      	mov	r2, r6
 80129bc:	4641      	mov	r1, r8
 80129be:	6820      	ldr	r0, [r4, #0]
 80129c0:	f000 fd88 	bl	80134d4 <memmove>
 80129c4:	68a3      	ldr	r3, [r4, #8]
 80129c6:	2000      	movs	r0, #0
 80129c8:	1b9b      	subs	r3, r3, r6
 80129ca:	60a3      	str	r3, [r4, #8]
 80129cc:	6823      	ldr	r3, [r4, #0]
 80129ce:	4433      	add	r3, r6
 80129d0:	6023      	str	r3, [r4, #0]
 80129d2:	e7db      	b.n	801298c <__ssputs_r+0x58>
 80129d4:	462a      	mov	r2, r5
 80129d6:	f000 fda3 	bl	8013520 <_realloc_r>
 80129da:	4606      	mov	r6, r0
 80129dc:	2800      	cmp	r0, #0
 80129de:	d1e1      	bne.n	80129a4 <__ssputs_r+0x70>
 80129e0:	4650      	mov	r0, sl
 80129e2:	6921      	ldr	r1, [r4, #16]
 80129e4:	f7ff feca 	bl	801277c <_free_r>
 80129e8:	e7c7      	b.n	801297a <__ssputs_r+0x46>
	...

080129ec <_svfiprintf_r>:
 80129ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f0:	4698      	mov	r8, r3
 80129f2:	898b      	ldrh	r3, [r1, #12]
 80129f4:	4607      	mov	r7, r0
 80129f6:	061b      	lsls	r3, r3, #24
 80129f8:	460d      	mov	r5, r1
 80129fa:	4614      	mov	r4, r2
 80129fc:	b09d      	sub	sp, #116	; 0x74
 80129fe:	d50e      	bpl.n	8012a1e <_svfiprintf_r+0x32>
 8012a00:	690b      	ldr	r3, [r1, #16]
 8012a02:	b963      	cbnz	r3, 8012a1e <_svfiprintf_r+0x32>
 8012a04:	2140      	movs	r1, #64	; 0x40
 8012a06:	f7ff ff21 	bl	801284c <_malloc_r>
 8012a0a:	6028      	str	r0, [r5, #0]
 8012a0c:	6128      	str	r0, [r5, #16]
 8012a0e:	b920      	cbnz	r0, 8012a1a <_svfiprintf_r+0x2e>
 8012a10:	230c      	movs	r3, #12
 8012a12:	603b      	str	r3, [r7, #0]
 8012a14:	f04f 30ff 	mov.w	r0, #4294967295
 8012a18:	e0d1      	b.n	8012bbe <_svfiprintf_r+0x1d2>
 8012a1a:	2340      	movs	r3, #64	; 0x40
 8012a1c:	616b      	str	r3, [r5, #20]
 8012a1e:	2300      	movs	r3, #0
 8012a20:	9309      	str	r3, [sp, #36]	; 0x24
 8012a22:	2320      	movs	r3, #32
 8012a24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a28:	2330      	movs	r3, #48	; 0x30
 8012a2a:	f04f 0901 	mov.w	r9, #1
 8012a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012bd8 <_svfiprintf_r+0x1ec>
 8012a36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a3a:	4623      	mov	r3, r4
 8012a3c:	469a      	mov	sl, r3
 8012a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a42:	b10a      	cbz	r2, 8012a48 <_svfiprintf_r+0x5c>
 8012a44:	2a25      	cmp	r2, #37	; 0x25
 8012a46:	d1f9      	bne.n	8012a3c <_svfiprintf_r+0x50>
 8012a48:	ebba 0b04 	subs.w	fp, sl, r4
 8012a4c:	d00b      	beq.n	8012a66 <_svfiprintf_r+0x7a>
 8012a4e:	465b      	mov	r3, fp
 8012a50:	4622      	mov	r2, r4
 8012a52:	4629      	mov	r1, r5
 8012a54:	4638      	mov	r0, r7
 8012a56:	f7ff ff6d 	bl	8012934 <__ssputs_r>
 8012a5a:	3001      	adds	r0, #1
 8012a5c:	f000 80aa 	beq.w	8012bb4 <_svfiprintf_r+0x1c8>
 8012a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a62:	445a      	add	r2, fp
 8012a64:	9209      	str	r2, [sp, #36]	; 0x24
 8012a66:	f89a 3000 	ldrb.w	r3, [sl]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	f000 80a2 	beq.w	8012bb4 <_svfiprintf_r+0x1c8>
 8012a70:	2300      	movs	r3, #0
 8012a72:	f04f 32ff 	mov.w	r2, #4294967295
 8012a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a7a:	f10a 0a01 	add.w	sl, sl, #1
 8012a7e:	9304      	str	r3, [sp, #16]
 8012a80:	9307      	str	r3, [sp, #28]
 8012a82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a86:	931a      	str	r3, [sp, #104]	; 0x68
 8012a88:	4654      	mov	r4, sl
 8012a8a:	2205      	movs	r2, #5
 8012a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a90:	4851      	ldr	r0, [pc, #324]	; (8012bd8 <_svfiprintf_r+0x1ec>)
 8012a92:	f7ff f999 	bl	8011dc8 <memchr>
 8012a96:	9a04      	ldr	r2, [sp, #16]
 8012a98:	b9d8      	cbnz	r0, 8012ad2 <_svfiprintf_r+0xe6>
 8012a9a:	06d0      	lsls	r0, r2, #27
 8012a9c:	bf44      	itt	mi
 8012a9e:	2320      	movmi	r3, #32
 8012aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012aa4:	0711      	lsls	r1, r2, #28
 8012aa6:	bf44      	itt	mi
 8012aa8:	232b      	movmi	r3, #43	; 0x2b
 8012aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012aae:	f89a 3000 	ldrb.w	r3, [sl]
 8012ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8012ab4:	d015      	beq.n	8012ae2 <_svfiprintf_r+0xf6>
 8012ab6:	4654      	mov	r4, sl
 8012ab8:	2000      	movs	r0, #0
 8012aba:	f04f 0c0a 	mov.w	ip, #10
 8012abe:	9a07      	ldr	r2, [sp, #28]
 8012ac0:	4621      	mov	r1, r4
 8012ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ac6:	3b30      	subs	r3, #48	; 0x30
 8012ac8:	2b09      	cmp	r3, #9
 8012aca:	d94e      	bls.n	8012b6a <_svfiprintf_r+0x17e>
 8012acc:	b1b0      	cbz	r0, 8012afc <_svfiprintf_r+0x110>
 8012ace:	9207      	str	r2, [sp, #28]
 8012ad0:	e014      	b.n	8012afc <_svfiprintf_r+0x110>
 8012ad2:	eba0 0308 	sub.w	r3, r0, r8
 8012ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8012ada:	4313      	orrs	r3, r2
 8012adc:	46a2      	mov	sl, r4
 8012ade:	9304      	str	r3, [sp, #16]
 8012ae0:	e7d2      	b.n	8012a88 <_svfiprintf_r+0x9c>
 8012ae2:	9b03      	ldr	r3, [sp, #12]
 8012ae4:	1d19      	adds	r1, r3, #4
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	9103      	str	r1, [sp, #12]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	bfbb      	ittet	lt
 8012aee:	425b      	neglt	r3, r3
 8012af0:	f042 0202 	orrlt.w	r2, r2, #2
 8012af4:	9307      	strge	r3, [sp, #28]
 8012af6:	9307      	strlt	r3, [sp, #28]
 8012af8:	bfb8      	it	lt
 8012afa:	9204      	strlt	r2, [sp, #16]
 8012afc:	7823      	ldrb	r3, [r4, #0]
 8012afe:	2b2e      	cmp	r3, #46	; 0x2e
 8012b00:	d10c      	bne.n	8012b1c <_svfiprintf_r+0x130>
 8012b02:	7863      	ldrb	r3, [r4, #1]
 8012b04:	2b2a      	cmp	r3, #42	; 0x2a
 8012b06:	d135      	bne.n	8012b74 <_svfiprintf_r+0x188>
 8012b08:	9b03      	ldr	r3, [sp, #12]
 8012b0a:	3402      	adds	r4, #2
 8012b0c:	1d1a      	adds	r2, r3, #4
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	9203      	str	r2, [sp, #12]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	bfb8      	it	lt
 8012b16:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b1a:	9305      	str	r3, [sp, #20]
 8012b1c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8012bdc <_svfiprintf_r+0x1f0>
 8012b20:	2203      	movs	r2, #3
 8012b22:	4650      	mov	r0, sl
 8012b24:	7821      	ldrb	r1, [r4, #0]
 8012b26:	f7ff f94f 	bl	8011dc8 <memchr>
 8012b2a:	b140      	cbz	r0, 8012b3e <_svfiprintf_r+0x152>
 8012b2c:	2340      	movs	r3, #64	; 0x40
 8012b2e:	eba0 000a 	sub.w	r0, r0, sl
 8012b32:	fa03 f000 	lsl.w	r0, r3, r0
 8012b36:	9b04      	ldr	r3, [sp, #16]
 8012b38:	3401      	adds	r4, #1
 8012b3a:	4303      	orrs	r3, r0
 8012b3c:	9304      	str	r3, [sp, #16]
 8012b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b42:	2206      	movs	r2, #6
 8012b44:	4826      	ldr	r0, [pc, #152]	; (8012be0 <_svfiprintf_r+0x1f4>)
 8012b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b4a:	f7ff f93d 	bl	8011dc8 <memchr>
 8012b4e:	2800      	cmp	r0, #0
 8012b50:	d038      	beq.n	8012bc4 <_svfiprintf_r+0x1d8>
 8012b52:	4b24      	ldr	r3, [pc, #144]	; (8012be4 <_svfiprintf_r+0x1f8>)
 8012b54:	bb1b      	cbnz	r3, 8012b9e <_svfiprintf_r+0x1b2>
 8012b56:	9b03      	ldr	r3, [sp, #12]
 8012b58:	3307      	adds	r3, #7
 8012b5a:	f023 0307 	bic.w	r3, r3, #7
 8012b5e:	3308      	adds	r3, #8
 8012b60:	9303      	str	r3, [sp, #12]
 8012b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b64:	4433      	add	r3, r6
 8012b66:	9309      	str	r3, [sp, #36]	; 0x24
 8012b68:	e767      	b.n	8012a3a <_svfiprintf_r+0x4e>
 8012b6a:	460c      	mov	r4, r1
 8012b6c:	2001      	movs	r0, #1
 8012b6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b72:	e7a5      	b.n	8012ac0 <_svfiprintf_r+0xd4>
 8012b74:	2300      	movs	r3, #0
 8012b76:	f04f 0c0a 	mov.w	ip, #10
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	3401      	adds	r4, #1
 8012b7e:	9305      	str	r3, [sp, #20]
 8012b80:	4620      	mov	r0, r4
 8012b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b86:	3a30      	subs	r2, #48	; 0x30
 8012b88:	2a09      	cmp	r2, #9
 8012b8a:	d903      	bls.n	8012b94 <_svfiprintf_r+0x1a8>
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d0c5      	beq.n	8012b1c <_svfiprintf_r+0x130>
 8012b90:	9105      	str	r1, [sp, #20]
 8012b92:	e7c3      	b.n	8012b1c <_svfiprintf_r+0x130>
 8012b94:	4604      	mov	r4, r0
 8012b96:	2301      	movs	r3, #1
 8012b98:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b9c:	e7f0      	b.n	8012b80 <_svfiprintf_r+0x194>
 8012b9e:	ab03      	add	r3, sp, #12
 8012ba0:	9300      	str	r3, [sp, #0]
 8012ba2:	462a      	mov	r2, r5
 8012ba4:	4638      	mov	r0, r7
 8012ba6:	4b10      	ldr	r3, [pc, #64]	; (8012be8 <_svfiprintf_r+0x1fc>)
 8012ba8:	a904      	add	r1, sp, #16
 8012baa:	f7fc fc7f 	bl	800f4ac <_printf_float>
 8012bae:	1c42      	adds	r2, r0, #1
 8012bb0:	4606      	mov	r6, r0
 8012bb2:	d1d6      	bne.n	8012b62 <_svfiprintf_r+0x176>
 8012bb4:	89ab      	ldrh	r3, [r5, #12]
 8012bb6:	065b      	lsls	r3, r3, #25
 8012bb8:	f53f af2c 	bmi.w	8012a14 <_svfiprintf_r+0x28>
 8012bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bbe:	b01d      	add	sp, #116	; 0x74
 8012bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bc4:	ab03      	add	r3, sp, #12
 8012bc6:	9300      	str	r3, [sp, #0]
 8012bc8:	462a      	mov	r2, r5
 8012bca:	4638      	mov	r0, r7
 8012bcc:	4b06      	ldr	r3, [pc, #24]	; (8012be8 <_svfiprintf_r+0x1fc>)
 8012bce:	a904      	add	r1, sp, #16
 8012bd0:	f7fc ff08 	bl	800f9e4 <_printf_i>
 8012bd4:	e7eb      	b.n	8012bae <_svfiprintf_r+0x1c2>
 8012bd6:	bf00      	nop
 8012bd8:	08013e8c 	.word	0x08013e8c
 8012bdc:	08013e92 	.word	0x08013e92
 8012be0:	08013e96 	.word	0x08013e96
 8012be4:	0800f4ad 	.word	0x0800f4ad
 8012be8:	08012935 	.word	0x08012935

08012bec <__sfputc_r>:
 8012bec:	6893      	ldr	r3, [r2, #8]
 8012bee:	b410      	push	{r4}
 8012bf0:	3b01      	subs	r3, #1
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	6093      	str	r3, [r2, #8]
 8012bf6:	da07      	bge.n	8012c08 <__sfputc_r+0x1c>
 8012bf8:	6994      	ldr	r4, [r2, #24]
 8012bfa:	42a3      	cmp	r3, r4
 8012bfc:	db01      	blt.n	8012c02 <__sfputc_r+0x16>
 8012bfe:	290a      	cmp	r1, #10
 8012c00:	d102      	bne.n	8012c08 <__sfputc_r+0x1c>
 8012c02:	bc10      	pop	{r4}
 8012c04:	f000 b974 	b.w	8012ef0 <__swbuf_r>
 8012c08:	6813      	ldr	r3, [r2, #0]
 8012c0a:	1c58      	adds	r0, r3, #1
 8012c0c:	6010      	str	r0, [r2, #0]
 8012c0e:	7019      	strb	r1, [r3, #0]
 8012c10:	4608      	mov	r0, r1
 8012c12:	bc10      	pop	{r4}
 8012c14:	4770      	bx	lr

08012c16 <__sfputs_r>:
 8012c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c18:	4606      	mov	r6, r0
 8012c1a:	460f      	mov	r7, r1
 8012c1c:	4614      	mov	r4, r2
 8012c1e:	18d5      	adds	r5, r2, r3
 8012c20:	42ac      	cmp	r4, r5
 8012c22:	d101      	bne.n	8012c28 <__sfputs_r+0x12>
 8012c24:	2000      	movs	r0, #0
 8012c26:	e007      	b.n	8012c38 <__sfputs_r+0x22>
 8012c28:	463a      	mov	r2, r7
 8012c2a:	4630      	mov	r0, r6
 8012c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c30:	f7ff ffdc 	bl	8012bec <__sfputc_r>
 8012c34:	1c43      	adds	r3, r0, #1
 8012c36:	d1f3      	bne.n	8012c20 <__sfputs_r+0xa>
 8012c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012c3c <_vfiprintf_r>:
 8012c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c40:	460d      	mov	r5, r1
 8012c42:	4614      	mov	r4, r2
 8012c44:	4698      	mov	r8, r3
 8012c46:	4606      	mov	r6, r0
 8012c48:	b09d      	sub	sp, #116	; 0x74
 8012c4a:	b118      	cbz	r0, 8012c54 <_vfiprintf_r+0x18>
 8012c4c:	6983      	ldr	r3, [r0, #24]
 8012c4e:	b90b      	cbnz	r3, 8012c54 <_vfiprintf_r+0x18>
 8012c50:	f000 fb3a 	bl	80132c8 <__sinit>
 8012c54:	4b89      	ldr	r3, [pc, #548]	; (8012e7c <_vfiprintf_r+0x240>)
 8012c56:	429d      	cmp	r5, r3
 8012c58:	d11b      	bne.n	8012c92 <_vfiprintf_r+0x56>
 8012c5a:	6875      	ldr	r5, [r6, #4]
 8012c5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c5e:	07d9      	lsls	r1, r3, #31
 8012c60:	d405      	bmi.n	8012c6e <_vfiprintf_r+0x32>
 8012c62:	89ab      	ldrh	r3, [r5, #12]
 8012c64:	059a      	lsls	r2, r3, #22
 8012c66:	d402      	bmi.n	8012c6e <_vfiprintf_r+0x32>
 8012c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c6a:	f000 fbcb 	bl	8013404 <__retarget_lock_acquire_recursive>
 8012c6e:	89ab      	ldrh	r3, [r5, #12]
 8012c70:	071b      	lsls	r3, r3, #28
 8012c72:	d501      	bpl.n	8012c78 <_vfiprintf_r+0x3c>
 8012c74:	692b      	ldr	r3, [r5, #16]
 8012c76:	b9eb      	cbnz	r3, 8012cb4 <_vfiprintf_r+0x78>
 8012c78:	4629      	mov	r1, r5
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	f000 f998 	bl	8012fb0 <__swsetup_r>
 8012c80:	b1c0      	cbz	r0, 8012cb4 <_vfiprintf_r+0x78>
 8012c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c84:	07dc      	lsls	r4, r3, #31
 8012c86:	d50e      	bpl.n	8012ca6 <_vfiprintf_r+0x6a>
 8012c88:	f04f 30ff 	mov.w	r0, #4294967295
 8012c8c:	b01d      	add	sp, #116	; 0x74
 8012c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c92:	4b7b      	ldr	r3, [pc, #492]	; (8012e80 <_vfiprintf_r+0x244>)
 8012c94:	429d      	cmp	r5, r3
 8012c96:	d101      	bne.n	8012c9c <_vfiprintf_r+0x60>
 8012c98:	68b5      	ldr	r5, [r6, #8]
 8012c9a:	e7df      	b.n	8012c5c <_vfiprintf_r+0x20>
 8012c9c:	4b79      	ldr	r3, [pc, #484]	; (8012e84 <_vfiprintf_r+0x248>)
 8012c9e:	429d      	cmp	r5, r3
 8012ca0:	bf08      	it	eq
 8012ca2:	68f5      	ldreq	r5, [r6, #12]
 8012ca4:	e7da      	b.n	8012c5c <_vfiprintf_r+0x20>
 8012ca6:	89ab      	ldrh	r3, [r5, #12]
 8012ca8:	0598      	lsls	r0, r3, #22
 8012caa:	d4ed      	bmi.n	8012c88 <_vfiprintf_r+0x4c>
 8012cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012cae:	f000 fbaa 	bl	8013406 <__retarget_lock_release_recursive>
 8012cb2:	e7e9      	b.n	8012c88 <_vfiprintf_r+0x4c>
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8012cb8:	2320      	movs	r3, #32
 8012cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cbe:	2330      	movs	r3, #48	; 0x30
 8012cc0:	f04f 0901 	mov.w	r9, #1
 8012cc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8012cc8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8012e88 <_vfiprintf_r+0x24c>
 8012ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cd0:	4623      	mov	r3, r4
 8012cd2:	469a      	mov	sl, r3
 8012cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cd8:	b10a      	cbz	r2, 8012cde <_vfiprintf_r+0xa2>
 8012cda:	2a25      	cmp	r2, #37	; 0x25
 8012cdc:	d1f9      	bne.n	8012cd2 <_vfiprintf_r+0x96>
 8012cde:	ebba 0b04 	subs.w	fp, sl, r4
 8012ce2:	d00b      	beq.n	8012cfc <_vfiprintf_r+0xc0>
 8012ce4:	465b      	mov	r3, fp
 8012ce6:	4622      	mov	r2, r4
 8012ce8:	4629      	mov	r1, r5
 8012cea:	4630      	mov	r0, r6
 8012cec:	f7ff ff93 	bl	8012c16 <__sfputs_r>
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	f000 80aa 	beq.w	8012e4a <_vfiprintf_r+0x20e>
 8012cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cf8:	445a      	add	r2, fp
 8012cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8012cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	f000 80a2 	beq.w	8012e4a <_vfiprintf_r+0x20e>
 8012d06:	2300      	movs	r3, #0
 8012d08:	f04f 32ff 	mov.w	r2, #4294967295
 8012d0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d10:	f10a 0a01 	add.w	sl, sl, #1
 8012d14:	9304      	str	r3, [sp, #16]
 8012d16:	9307      	str	r3, [sp, #28]
 8012d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8012d1e:	4654      	mov	r4, sl
 8012d20:	2205      	movs	r2, #5
 8012d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d26:	4858      	ldr	r0, [pc, #352]	; (8012e88 <_vfiprintf_r+0x24c>)
 8012d28:	f7ff f84e 	bl	8011dc8 <memchr>
 8012d2c:	9a04      	ldr	r2, [sp, #16]
 8012d2e:	b9d8      	cbnz	r0, 8012d68 <_vfiprintf_r+0x12c>
 8012d30:	06d1      	lsls	r1, r2, #27
 8012d32:	bf44      	itt	mi
 8012d34:	2320      	movmi	r3, #32
 8012d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d3a:	0713      	lsls	r3, r2, #28
 8012d3c:	bf44      	itt	mi
 8012d3e:	232b      	movmi	r3, #43	; 0x2b
 8012d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d44:	f89a 3000 	ldrb.w	r3, [sl]
 8012d48:	2b2a      	cmp	r3, #42	; 0x2a
 8012d4a:	d015      	beq.n	8012d78 <_vfiprintf_r+0x13c>
 8012d4c:	4654      	mov	r4, sl
 8012d4e:	2000      	movs	r0, #0
 8012d50:	f04f 0c0a 	mov.w	ip, #10
 8012d54:	9a07      	ldr	r2, [sp, #28]
 8012d56:	4621      	mov	r1, r4
 8012d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d5c:	3b30      	subs	r3, #48	; 0x30
 8012d5e:	2b09      	cmp	r3, #9
 8012d60:	d94e      	bls.n	8012e00 <_vfiprintf_r+0x1c4>
 8012d62:	b1b0      	cbz	r0, 8012d92 <_vfiprintf_r+0x156>
 8012d64:	9207      	str	r2, [sp, #28]
 8012d66:	e014      	b.n	8012d92 <_vfiprintf_r+0x156>
 8012d68:	eba0 0308 	sub.w	r3, r0, r8
 8012d6c:	fa09 f303 	lsl.w	r3, r9, r3
 8012d70:	4313      	orrs	r3, r2
 8012d72:	46a2      	mov	sl, r4
 8012d74:	9304      	str	r3, [sp, #16]
 8012d76:	e7d2      	b.n	8012d1e <_vfiprintf_r+0xe2>
 8012d78:	9b03      	ldr	r3, [sp, #12]
 8012d7a:	1d19      	adds	r1, r3, #4
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	9103      	str	r1, [sp, #12]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	bfbb      	ittet	lt
 8012d84:	425b      	neglt	r3, r3
 8012d86:	f042 0202 	orrlt.w	r2, r2, #2
 8012d8a:	9307      	strge	r3, [sp, #28]
 8012d8c:	9307      	strlt	r3, [sp, #28]
 8012d8e:	bfb8      	it	lt
 8012d90:	9204      	strlt	r2, [sp, #16]
 8012d92:	7823      	ldrb	r3, [r4, #0]
 8012d94:	2b2e      	cmp	r3, #46	; 0x2e
 8012d96:	d10c      	bne.n	8012db2 <_vfiprintf_r+0x176>
 8012d98:	7863      	ldrb	r3, [r4, #1]
 8012d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d9c:	d135      	bne.n	8012e0a <_vfiprintf_r+0x1ce>
 8012d9e:	9b03      	ldr	r3, [sp, #12]
 8012da0:	3402      	adds	r4, #2
 8012da2:	1d1a      	adds	r2, r3, #4
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	9203      	str	r2, [sp, #12]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	bfb8      	it	lt
 8012dac:	f04f 33ff 	movlt.w	r3, #4294967295
 8012db0:	9305      	str	r3, [sp, #20]
 8012db2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8012e8c <_vfiprintf_r+0x250>
 8012db6:	2203      	movs	r2, #3
 8012db8:	4650      	mov	r0, sl
 8012dba:	7821      	ldrb	r1, [r4, #0]
 8012dbc:	f7ff f804 	bl	8011dc8 <memchr>
 8012dc0:	b140      	cbz	r0, 8012dd4 <_vfiprintf_r+0x198>
 8012dc2:	2340      	movs	r3, #64	; 0x40
 8012dc4:	eba0 000a 	sub.w	r0, r0, sl
 8012dc8:	fa03 f000 	lsl.w	r0, r3, r0
 8012dcc:	9b04      	ldr	r3, [sp, #16]
 8012dce:	3401      	adds	r4, #1
 8012dd0:	4303      	orrs	r3, r0
 8012dd2:	9304      	str	r3, [sp, #16]
 8012dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dd8:	2206      	movs	r2, #6
 8012dda:	482d      	ldr	r0, [pc, #180]	; (8012e90 <_vfiprintf_r+0x254>)
 8012ddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012de0:	f7fe fff2 	bl	8011dc8 <memchr>
 8012de4:	2800      	cmp	r0, #0
 8012de6:	d03f      	beq.n	8012e68 <_vfiprintf_r+0x22c>
 8012de8:	4b2a      	ldr	r3, [pc, #168]	; (8012e94 <_vfiprintf_r+0x258>)
 8012dea:	bb1b      	cbnz	r3, 8012e34 <_vfiprintf_r+0x1f8>
 8012dec:	9b03      	ldr	r3, [sp, #12]
 8012dee:	3307      	adds	r3, #7
 8012df0:	f023 0307 	bic.w	r3, r3, #7
 8012df4:	3308      	adds	r3, #8
 8012df6:	9303      	str	r3, [sp, #12]
 8012df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dfa:	443b      	add	r3, r7
 8012dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8012dfe:	e767      	b.n	8012cd0 <_vfiprintf_r+0x94>
 8012e00:	460c      	mov	r4, r1
 8012e02:	2001      	movs	r0, #1
 8012e04:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e08:	e7a5      	b.n	8012d56 <_vfiprintf_r+0x11a>
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	f04f 0c0a 	mov.w	ip, #10
 8012e10:	4619      	mov	r1, r3
 8012e12:	3401      	adds	r4, #1
 8012e14:	9305      	str	r3, [sp, #20]
 8012e16:	4620      	mov	r0, r4
 8012e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e1c:	3a30      	subs	r2, #48	; 0x30
 8012e1e:	2a09      	cmp	r2, #9
 8012e20:	d903      	bls.n	8012e2a <_vfiprintf_r+0x1ee>
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d0c5      	beq.n	8012db2 <_vfiprintf_r+0x176>
 8012e26:	9105      	str	r1, [sp, #20]
 8012e28:	e7c3      	b.n	8012db2 <_vfiprintf_r+0x176>
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e32:	e7f0      	b.n	8012e16 <_vfiprintf_r+0x1da>
 8012e34:	ab03      	add	r3, sp, #12
 8012e36:	9300      	str	r3, [sp, #0]
 8012e38:	462a      	mov	r2, r5
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	4b16      	ldr	r3, [pc, #88]	; (8012e98 <_vfiprintf_r+0x25c>)
 8012e3e:	a904      	add	r1, sp, #16
 8012e40:	f7fc fb34 	bl	800f4ac <_printf_float>
 8012e44:	4607      	mov	r7, r0
 8012e46:	1c78      	adds	r0, r7, #1
 8012e48:	d1d6      	bne.n	8012df8 <_vfiprintf_r+0x1bc>
 8012e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e4c:	07d9      	lsls	r1, r3, #31
 8012e4e:	d405      	bmi.n	8012e5c <_vfiprintf_r+0x220>
 8012e50:	89ab      	ldrh	r3, [r5, #12]
 8012e52:	059a      	lsls	r2, r3, #22
 8012e54:	d402      	bmi.n	8012e5c <_vfiprintf_r+0x220>
 8012e56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e58:	f000 fad5 	bl	8013406 <__retarget_lock_release_recursive>
 8012e5c:	89ab      	ldrh	r3, [r5, #12]
 8012e5e:	065b      	lsls	r3, r3, #25
 8012e60:	f53f af12 	bmi.w	8012c88 <_vfiprintf_r+0x4c>
 8012e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e66:	e711      	b.n	8012c8c <_vfiprintf_r+0x50>
 8012e68:	ab03      	add	r3, sp, #12
 8012e6a:	9300      	str	r3, [sp, #0]
 8012e6c:	462a      	mov	r2, r5
 8012e6e:	4630      	mov	r0, r6
 8012e70:	4b09      	ldr	r3, [pc, #36]	; (8012e98 <_vfiprintf_r+0x25c>)
 8012e72:	a904      	add	r1, sp, #16
 8012e74:	f7fc fdb6 	bl	800f9e4 <_printf_i>
 8012e78:	e7e4      	b.n	8012e44 <_vfiprintf_r+0x208>
 8012e7a:	bf00      	nop
 8012e7c:	08013fc0 	.word	0x08013fc0
 8012e80:	08013fe0 	.word	0x08013fe0
 8012e84:	08013fa0 	.word	0x08013fa0
 8012e88:	08013e8c 	.word	0x08013e8c
 8012e8c:	08013e92 	.word	0x08013e92
 8012e90:	08013e96 	.word	0x08013e96
 8012e94:	0800f4ad 	.word	0x0800f4ad
 8012e98:	08012c17 	.word	0x08012c17

08012e9c <nan>:
 8012e9c:	2000      	movs	r0, #0
 8012e9e:	4901      	ldr	r1, [pc, #4]	; (8012ea4 <nan+0x8>)
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	7ff80000 	.word	0x7ff80000

08012ea8 <_sbrk_r>:
 8012ea8:	b538      	push	{r3, r4, r5, lr}
 8012eaa:	2300      	movs	r3, #0
 8012eac:	4d05      	ldr	r5, [pc, #20]	; (8012ec4 <_sbrk_r+0x1c>)
 8012eae:	4604      	mov	r4, r0
 8012eb0:	4608      	mov	r0, r1
 8012eb2:	602b      	str	r3, [r5, #0]
 8012eb4:	f7f1 fd7c 	bl	80049b0 <_sbrk>
 8012eb8:	1c43      	adds	r3, r0, #1
 8012eba:	d102      	bne.n	8012ec2 <_sbrk_r+0x1a>
 8012ebc:	682b      	ldr	r3, [r5, #0]
 8012ebe:	b103      	cbz	r3, 8012ec2 <_sbrk_r+0x1a>
 8012ec0:	6023      	str	r3, [r4, #0]
 8012ec2:	bd38      	pop	{r3, r4, r5, pc}
 8012ec4:	20001a08 	.word	0x20001a08

08012ec8 <strncmp>:
 8012ec8:	4603      	mov	r3, r0
 8012eca:	b510      	push	{r4, lr}
 8012ecc:	b172      	cbz	r2, 8012eec <strncmp+0x24>
 8012ece:	3901      	subs	r1, #1
 8012ed0:	1884      	adds	r4, r0, r2
 8012ed2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012ed6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012eda:	4290      	cmp	r0, r2
 8012edc:	d101      	bne.n	8012ee2 <strncmp+0x1a>
 8012ede:	42a3      	cmp	r3, r4
 8012ee0:	d101      	bne.n	8012ee6 <strncmp+0x1e>
 8012ee2:	1a80      	subs	r0, r0, r2
 8012ee4:	bd10      	pop	{r4, pc}
 8012ee6:	2800      	cmp	r0, #0
 8012ee8:	d1f3      	bne.n	8012ed2 <strncmp+0xa>
 8012eea:	e7fa      	b.n	8012ee2 <strncmp+0x1a>
 8012eec:	4610      	mov	r0, r2
 8012eee:	e7f9      	b.n	8012ee4 <strncmp+0x1c>

08012ef0 <__swbuf_r>:
 8012ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ef2:	460e      	mov	r6, r1
 8012ef4:	4614      	mov	r4, r2
 8012ef6:	4605      	mov	r5, r0
 8012ef8:	b118      	cbz	r0, 8012f02 <__swbuf_r+0x12>
 8012efa:	6983      	ldr	r3, [r0, #24]
 8012efc:	b90b      	cbnz	r3, 8012f02 <__swbuf_r+0x12>
 8012efe:	f000 f9e3 	bl	80132c8 <__sinit>
 8012f02:	4b21      	ldr	r3, [pc, #132]	; (8012f88 <__swbuf_r+0x98>)
 8012f04:	429c      	cmp	r4, r3
 8012f06:	d12b      	bne.n	8012f60 <__swbuf_r+0x70>
 8012f08:	686c      	ldr	r4, [r5, #4]
 8012f0a:	69a3      	ldr	r3, [r4, #24]
 8012f0c:	60a3      	str	r3, [r4, #8]
 8012f0e:	89a3      	ldrh	r3, [r4, #12]
 8012f10:	071a      	lsls	r2, r3, #28
 8012f12:	d52f      	bpl.n	8012f74 <__swbuf_r+0x84>
 8012f14:	6923      	ldr	r3, [r4, #16]
 8012f16:	b36b      	cbz	r3, 8012f74 <__swbuf_r+0x84>
 8012f18:	6923      	ldr	r3, [r4, #16]
 8012f1a:	6820      	ldr	r0, [r4, #0]
 8012f1c:	b2f6      	uxtb	r6, r6
 8012f1e:	1ac0      	subs	r0, r0, r3
 8012f20:	6963      	ldr	r3, [r4, #20]
 8012f22:	4637      	mov	r7, r6
 8012f24:	4283      	cmp	r3, r0
 8012f26:	dc04      	bgt.n	8012f32 <__swbuf_r+0x42>
 8012f28:	4621      	mov	r1, r4
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	f000 f938 	bl	80131a0 <_fflush_r>
 8012f30:	bb30      	cbnz	r0, 8012f80 <__swbuf_r+0x90>
 8012f32:	68a3      	ldr	r3, [r4, #8]
 8012f34:	3001      	adds	r0, #1
 8012f36:	3b01      	subs	r3, #1
 8012f38:	60a3      	str	r3, [r4, #8]
 8012f3a:	6823      	ldr	r3, [r4, #0]
 8012f3c:	1c5a      	adds	r2, r3, #1
 8012f3e:	6022      	str	r2, [r4, #0]
 8012f40:	701e      	strb	r6, [r3, #0]
 8012f42:	6963      	ldr	r3, [r4, #20]
 8012f44:	4283      	cmp	r3, r0
 8012f46:	d004      	beq.n	8012f52 <__swbuf_r+0x62>
 8012f48:	89a3      	ldrh	r3, [r4, #12]
 8012f4a:	07db      	lsls	r3, r3, #31
 8012f4c:	d506      	bpl.n	8012f5c <__swbuf_r+0x6c>
 8012f4e:	2e0a      	cmp	r6, #10
 8012f50:	d104      	bne.n	8012f5c <__swbuf_r+0x6c>
 8012f52:	4621      	mov	r1, r4
 8012f54:	4628      	mov	r0, r5
 8012f56:	f000 f923 	bl	80131a0 <_fflush_r>
 8012f5a:	b988      	cbnz	r0, 8012f80 <__swbuf_r+0x90>
 8012f5c:	4638      	mov	r0, r7
 8012f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f60:	4b0a      	ldr	r3, [pc, #40]	; (8012f8c <__swbuf_r+0x9c>)
 8012f62:	429c      	cmp	r4, r3
 8012f64:	d101      	bne.n	8012f6a <__swbuf_r+0x7a>
 8012f66:	68ac      	ldr	r4, [r5, #8]
 8012f68:	e7cf      	b.n	8012f0a <__swbuf_r+0x1a>
 8012f6a:	4b09      	ldr	r3, [pc, #36]	; (8012f90 <__swbuf_r+0xa0>)
 8012f6c:	429c      	cmp	r4, r3
 8012f6e:	bf08      	it	eq
 8012f70:	68ec      	ldreq	r4, [r5, #12]
 8012f72:	e7ca      	b.n	8012f0a <__swbuf_r+0x1a>
 8012f74:	4621      	mov	r1, r4
 8012f76:	4628      	mov	r0, r5
 8012f78:	f000 f81a 	bl	8012fb0 <__swsetup_r>
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	d0cb      	beq.n	8012f18 <__swbuf_r+0x28>
 8012f80:	f04f 37ff 	mov.w	r7, #4294967295
 8012f84:	e7ea      	b.n	8012f5c <__swbuf_r+0x6c>
 8012f86:	bf00      	nop
 8012f88:	08013fc0 	.word	0x08013fc0
 8012f8c:	08013fe0 	.word	0x08013fe0
 8012f90:	08013fa0 	.word	0x08013fa0

08012f94 <__ascii_wctomb>:
 8012f94:	4603      	mov	r3, r0
 8012f96:	4608      	mov	r0, r1
 8012f98:	b141      	cbz	r1, 8012fac <__ascii_wctomb+0x18>
 8012f9a:	2aff      	cmp	r2, #255	; 0xff
 8012f9c:	d904      	bls.n	8012fa8 <__ascii_wctomb+0x14>
 8012f9e:	228a      	movs	r2, #138	; 0x8a
 8012fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8012fa4:	601a      	str	r2, [r3, #0]
 8012fa6:	4770      	bx	lr
 8012fa8:	2001      	movs	r0, #1
 8012faa:	700a      	strb	r2, [r1, #0]
 8012fac:	4770      	bx	lr
	...

08012fb0 <__swsetup_r>:
 8012fb0:	4b32      	ldr	r3, [pc, #200]	; (801307c <__swsetup_r+0xcc>)
 8012fb2:	b570      	push	{r4, r5, r6, lr}
 8012fb4:	681d      	ldr	r5, [r3, #0]
 8012fb6:	4606      	mov	r6, r0
 8012fb8:	460c      	mov	r4, r1
 8012fba:	b125      	cbz	r5, 8012fc6 <__swsetup_r+0x16>
 8012fbc:	69ab      	ldr	r3, [r5, #24]
 8012fbe:	b913      	cbnz	r3, 8012fc6 <__swsetup_r+0x16>
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	f000 f981 	bl	80132c8 <__sinit>
 8012fc6:	4b2e      	ldr	r3, [pc, #184]	; (8013080 <__swsetup_r+0xd0>)
 8012fc8:	429c      	cmp	r4, r3
 8012fca:	d10f      	bne.n	8012fec <__swsetup_r+0x3c>
 8012fcc:	686c      	ldr	r4, [r5, #4]
 8012fce:	89a3      	ldrh	r3, [r4, #12]
 8012fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012fd4:	0719      	lsls	r1, r3, #28
 8012fd6:	d42c      	bmi.n	8013032 <__swsetup_r+0x82>
 8012fd8:	06dd      	lsls	r5, r3, #27
 8012fda:	d411      	bmi.n	8013000 <__swsetup_r+0x50>
 8012fdc:	2309      	movs	r3, #9
 8012fde:	6033      	str	r3, [r6, #0]
 8012fe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8012fe8:	81a3      	strh	r3, [r4, #12]
 8012fea:	e03e      	b.n	801306a <__swsetup_r+0xba>
 8012fec:	4b25      	ldr	r3, [pc, #148]	; (8013084 <__swsetup_r+0xd4>)
 8012fee:	429c      	cmp	r4, r3
 8012ff0:	d101      	bne.n	8012ff6 <__swsetup_r+0x46>
 8012ff2:	68ac      	ldr	r4, [r5, #8]
 8012ff4:	e7eb      	b.n	8012fce <__swsetup_r+0x1e>
 8012ff6:	4b24      	ldr	r3, [pc, #144]	; (8013088 <__swsetup_r+0xd8>)
 8012ff8:	429c      	cmp	r4, r3
 8012ffa:	bf08      	it	eq
 8012ffc:	68ec      	ldreq	r4, [r5, #12]
 8012ffe:	e7e6      	b.n	8012fce <__swsetup_r+0x1e>
 8013000:	0758      	lsls	r0, r3, #29
 8013002:	d512      	bpl.n	801302a <__swsetup_r+0x7a>
 8013004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013006:	b141      	cbz	r1, 801301a <__swsetup_r+0x6a>
 8013008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801300c:	4299      	cmp	r1, r3
 801300e:	d002      	beq.n	8013016 <__swsetup_r+0x66>
 8013010:	4630      	mov	r0, r6
 8013012:	f7ff fbb3 	bl	801277c <_free_r>
 8013016:	2300      	movs	r3, #0
 8013018:	6363      	str	r3, [r4, #52]	; 0x34
 801301a:	89a3      	ldrh	r3, [r4, #12]
 801301c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013020:	81a3      	strh	r3, [r4, #12]
 8013022:	2300      	movs	r3, #0
 8013024:	6063      	str	r3, [r4, #4]
 8013026:	6923      	ldr	r3, [r4, #16]
 8013028:	6023      	str	r3, [r4, #0]
 801302a:	89a3      	ldrh	r3, [r4, #12]
 801302c:	f043 0308 	orr.w	r3, r3, #8
 8013030:	81a3      	strh	r3, [r4, #12]
 8013032:	6923      	ldr	r3, [r4, #16]
 8013034:	b94b      	cbnz	r3, 801304a <__swsetup_r+0x9a>
 8013036:	89a3      	ldrh	r3, [r4, #12]
 8013038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801303c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013040:	d003      	beq.n	801304a <__swsetup_r+0x9a>
 8013042:	4621      	mov	r1, r4
 8013044:	4630      	mov	r0, r6
 8013046:	f000 fa05 	bl	8013454 <__smakebuf_r>
 801304a:	89a0      	ldrh	r0, [r4, #12]
 801304c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013050:	f010 0301 	ands.w	r3, r0, #1
 8013054:	d00a      	beq.n	801306c <__swsetup_r+0xbc>
 8013056:	2300      	movs	r3, #0
 8013058:	60a3      	str	r3, [r4, #8]
 801305a:	6963      	ldr	r3, [r4, #20]
 801305c:	425b      	negs	r3, r3
 801305e:	61a3      	str	r3, [r4, #24]
 8013060:	6923      	ldr	r3, [r4, #16]
 8013062:	b943      	cbnz	r3, 8013076 <__swsetup_r+0xc6>
 8013064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013068:	d1ba      	bne.n	8012fe0 <__swsetup_r+0x30>
 801306a:	bd70      	pop	{r4, r5, r6, pc}
 801306c:	0781      	lsls	r1, r0, #30
 801306e:	bf58      	it	pl
 8013070:	6963      	ldrpl	r3, [r4, #20]
 8013072:	60a3      	str	r3, [r4, #8]
 8013074:	e7f4      	b.n	8013060 <__swsetup_r+0xb0>
 8013076:	2000      	movs	r0, #0
 8013078:	e7f7      	b.n	801306a <__swsetup_r+0xba>
 801307a:	bf00      	nop
 801307c:	2000093c 	.word	0x2000093c
 8013080:	08013fc0 	.word	0x08013fc0
 8013084:	08013fe0 	.word	0x08013fe0
 8013088:	08013fa0 	.word	0x08013fa0

0801308c <abort>:
 801308c:	2006      	movs	r0, #6
 801308e:	b508      	push	{r3, lr}
 8013090:	f000 fa9e 	bl	80135d0 <raise>
 8013094:	2001      	movs	r0, #1
 8013096:	f7f1 fc18 	bl	80048ca <_exit>
	...

0801309c <__sflush_r>:
 801309c:	898a      	ldrh	r2, [r1, #12]
 801309e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130a0:	4605      	mov	r5, r0
 80130a2:	0710      	lsls	r0, r2, #28
 80130a4:	460c      	mov	r4, r1
 80130a6:	d457      	bmi.n	8013158 <__sflush_r+0xbc>
 80130a8:	684b      	ldr	r3, [r1, #4]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	dc04      	bgt.n	80130b8 <__sflush_r+0x1c>
 80130ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	dc01      	bgt.n	80130b8 <__sflush_r+0x1c>
 80130b4:	2000      	movs	r0, #0
 80130b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130ba:	2e00      	cmp	r6, #0
 80130bc:	d0fa      	beq.n	80130b4 <__sflush_r+0x18>
 80130be:	2300      	movs	r3, #0
 80130c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80130c4:	682f      	ldr	r7, [r5, #0]
 80130c6:	602b      	str	r3, [r5, #0]
 80130c8:	d032      	beq.n	8013130 <__sflush_r+0x94>
 80130ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80130cc:	89a3      	ldrh	r3, [r4, #12]
 80130ce:	075a      	lsls	r2, r3, #29
 80130d0:	d505      	bpl.n	80130de <__sflush_r+0x42>
 80130d2:	6863      	ldr	r3, [r4, #4]
 80130d4:	1ac0      	subs	r0, r0, r3
 80130d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80130d8:	b10b      	cbz	r3, 80130de <__sflush_r+0x42>
 80130da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80130dc:	1ac0      	subs	r0, r0, r3
 80130de:	2300      	movs	r3, #0
 80130e0:	4602      	mov	r2, r0
 80130e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130e4:	4628      	mov	r0, r5
 80130e6:	6a21      	ldr	r1, [r4, #32]
 80130e8:	47b0      	blx	r6
 80130ea:	1c43      	adds	r3, r0, #1
 80130ec:	89a3      	ldrh	r3, [r4, #12]
 80130ee:	d106      	bne.n	80130fe <__sflush_r+0x62>
 80130f0:	6829      	ldr	r1, [r5, #0]
 80130f2:	291d      	cmp	r1, #29
 80130f4:	d82c      	bhi.n	8013150 <__sflush_r+0xb4>
 80130f6:	4a29      	ldr	r2, [pc, #164]	; (801319c <__sflush_r+0x100>)
 80130f8:	40ca      	lsrs	r2, r1
 80130fa:	07d6      	lsls	r6, r2, #31
 80130fc:	d528      	bpl.n	8013150 <__sflush_r+0xb4>
 80130fe:	2200      	movs	r2, #0
 8013100:	6062      	str	r2, [r4, #4]
 8013102:	6922      	ldr	r2, [r4, #16]
 8013104:	04d9      	lsls	r1, r3, #19
 8013106:	6022      	str	r2, [r4, #0]
 8013108:	d504      	bpl.n	8013114 <__sflush_r+0x78>
 801310a:	1c42      	adds	r2, r0, #1
 801310c:	d101      	bne.n	8013112 <__sflush_r+0x76>
 801310e:	682b      	ldr	r3, [r5, #0]
 8013110:	b903      	cbnz	r3, 8013114 <__sflush_r+0x78>
 8013112:	6560      	str	r0, [r4, #84]	; 0x54
 8013114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013116:	602f      	str	r7, [r5, #0]
 8013118:	2900      	cmp	r1, #0
 801311a:	d0cb      	beq.n	80130b4 <__sflush_r+0x18>
 801311c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013120:	4299      	cmp	r1, r3
 8013122:	d002      	beq.n	801312a <__sflush_r+0x8e>
 8013124:	4628      	mov	r0, r5
 8013126:	f7ff fb29 	bl	801277c <_free_r>
 801312a:	2000      	movs	r0, #0
 801312c:	6360      	str	r0, [r4, #52]	; 0x34
 801312e:	e7c2      	b.n	80130b6 <__sflush_r+0x1a>
 8013130:	6a21      	ldr	r1, [r4, #32]
 8013132:	2301      	movs	r3, #1
 8013134:	4628      	mov	r0, r5
 8013136:	47b0      	blx	r6
 8013138:	1c41      	adds	r1, r0, #1
 801313a:	d1c7      	bne.n	80130cc <__sflush_r+0x30>
 801313c:	682b      	ldr	r3, [r5, #0]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d0c4      	beq.n	80130cc <__sflush_r+0x30>
 8013142:	2b1d      	cmp	r3, #29
 8013144:	d001      	beq.n	801314a <__sflush_r+0xae>
 8013146:	2b16      	cmp	r3, #22
 8013148:	d101      	bne.n	801314e <__sflush_r+0xb2>
 801314a:	602f      	str	r7, [r5, #0]
 801314c:	e7b2      	b.n	80130b4 <__sflush_r+0x18>
 801314e:	89a3      	ldrh	r3, [r4, #12]
 8013150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013154:	81a3      	strh	r3, [r4, #12]
 8013156:	e7ae      	b.n	80130b6 <__sflush_r+0x1a>
 8013158:	690f      	ldr	r7, [r1, #16]
 801315a:	2f00      	cmp	r7, #0
 801315c:	d0aa      	beq.n	80130b4 <__sflush_r+0x18>
 801315e:	0793      	lsls	r3, r2, #30
 8013160:	bf18      	it	ne
 8013162:	2300      	movne	r3, #0
 8013164:	680e      	ldr	r6, [r1, #0]
 8013166:	bf08      	it	eq
 8013168:	694b      	ldreq	r3, [r1, #20]
 801316a:	1bf6      	subs	r6, r6, r7
 801316c:	600f      	str	r7, [r1, #0]
 801316e:	608b      	str	r3, [r1, #8]
 8013170:	2e00      	cmp	r6, #0
 8013172:	dd9f      	ble.n	80130b4 <__sflush_r+0x18>
 8013174:	4633      	mov	r3, r6
 8013176:	463a      	mov	r2, r7
 8013178:	4628      	mov	r0, r5
 801317a:	6a21      	ldr	r1, [r4, #32]
 801317c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8013180:	47e0      	blx	ip
 8013182:	2800      	cmp	r0, #0
 8013184:	dc06      	bgt.n	8013194 <__sflush_r+0xf8>
 8013186:	89a3      	ldrh	r3, [r4, #12]
 8013188:	f04f 30ff 	mov.w	r0, #4294967295
 801318c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013190:	81a3      	strh	r3, [r4, #12]
 8013192:	e790      	b.n	80130b6 <__sflush_r+0x1a>
 8013194:	4407      	add	r7, r0
 8013196:	1a36      	subs	r6, r6, r0
 8013198:	e7ea      	b.n	8013170 <__sflush_r+0xd4>
 801319a:	bf00      	nop
 801319c:	20400001 	.word	0x20400001

080131a0 <_fflush_r>:
 80131a0:	b538      	push	{r3, r4, r5, lr}
 80131a2:	690b      	ldr	r3, [r1, #16]
 80131a4:	4605      	mov	r5, r0
 80131a6:	460c      	mov	r4, r1
 80131a8:	b913      	cbnz	r3, 80131b0 <_fflush_r+0x10>
 80131aa:	2500      	movs	r5, #0
 80131ac:	4628      	mov	r0, r5
 80131ae:	bd38      	pop	{r3, r4, r5, pc}
 80131b0:	b118      	cbz	r0, 80131ba <_fflush_r+0x1a>
 80131b2:	6983      	ldr	r3, [r0, #24]
 80131b4:	b90b      	cbnz	r3, 80131ba <_fflush_r+0x1a>
 80131b6:	f000 f887 	bl	80132c8 <__sinit>
 80131ba:	4b14      	ldr	r3, [pc, #80]	; (801320c <_fflush_r+0x6c>)
 80131bc:	429c      	cmp	r4, r3
 80131be:	d11b      	bne.n	80131f8 <_fflush_r+0x58>
 80131c0:	686c      	ldr	r4, [r5, #4]
 80131c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d0ef      	beq.n	80131aa <_fflush_r+0xa>
 80131ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80131cc:	07d0      	lsls	r0, r2, #31
 80131ce:	d404      	bmi.n	80131da <_fflush_r+0x3a>
 80131d0:	0599      	lsls	r1, r3, #22
 80131d2:	d402      	bmi.n	80131da <_fflush_r+0x3a>
 80131d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131d6:	f000 f915 	bl	8013404 <__retarget_lock_acquire_recursive>
 80131da:	4628      	mov	r0, r5
 80131dc:	4621      	mov	r1, r4
 80131de:	f7ff ff5d 	bl	801309c <__sflush_r>
 80131e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131e4:	4605      	mov	r5, r0
 80131e6:	07da      	lsls	r2, r3, #31
 80131e8:	d4e0      	bmi.n	80131ac <_fflush_r+0xc>
 80131ea:	89a3      	ldrh	r3, [r4, #12]
 80131ec:	059b      	lsls	r3, r3, #22
 80131ee:	d4dd      	bmi.n	80131ac <_fflush_r+0xc>
 80131f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131f2:	f000 f908 	bl	8013406 <__retarget_lock_release_recursive>
 80131f6:	e7d9      	b.n	80131ac <_fflush_r+0xc>
 80131f8:	4b05      	ldr	r3, [pc, #20]	; (8013210 <_fflush_r+0x70>)
 80131fa:	429c      	cmp	r4, r3
 80131fc:	d101      	bne.n	8013202 <_fflush_r+0x62>
 80131fe:	68ac      	ldr	r4, [r5, #8]
 8013200:	e7df      	b.n	80131c2 <_fflush_r+0x22>
 8013202:	4b04      	ldr	r3, [pc, #16]	; (8013214 <_fflush_r+0x74>)
 8013204:	429c      	cmp	r4, r3
 8013206:	bf08      	it	eq
 8013208:	68ec      	ldreq	r4, [r5, #12]
 801320a:	e7da      	b.n	80131c2 <_fflush_r+0x22>
 801320c:	08013fc0 	.word	0x08013fc0
 8013210:	08013fe0 	.word	0x08013fe0
 8013214:	08013fa0 	.word	0x08013fa0

08013218 <std>:
 8013218:	2300      	movs	r3, #0
 801321a:	b510      	push	{r4, lr}
 801321c:	4604      	mov	r4, r0
 801321e:	e9c0 3300 	strd	r3, r3, [r0]
 8013222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013226:	6083      	str	r3, [r0, #8]
 8013228:	8181      	strh	r1, [r0, #12]
 801322a:	6643      	str	r3, [r0, #100]	; 0x64
 801322c:	81c2      	strh	r2, [r0, #14]
 801322e:	6183      	str	r3, [r0, #24]
 8013230:	4619      	mov	r1, r3
 8013232:	2208      	movs	r2, #8
 8013234:	305c      	adds	r0, #92	; 0x5c
 8013236:	f7fc f893 	bl	800f360 <memset>
 801323a:	4b05      	ldr	r3, [pc, #20]	; (8013250 <std+0x38>)
 801323c:	6224      	str	r4, [r4, #32]
 801323e:	6263      	str	r3, [r4, #36]	; 0x24
 8013240:	4b04      	ldr	r3, [pc, #16]	; (8013254 <std+0x3c>)
 8013242:	62a3      	str	r3, [r4, #40]	; 0x28
 8013244:	4b04      	ldr	r3, [pc, #16]	; (8013258 <std+0x40>)
 8013246:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013248:	4b04      	ldr	r3, [pc, #16]	; (801325c <std+0x44>)
 801324a:	6323      	str	r3, [r4, #48]	; 0x30
 801324c:	bd10      	pop	{r4, pc}
 801324e:	bf00      	nop
 8013250:	08013609 	.word	0x08013609
 8013254:	0801362b 	.word	0x0801362b
 8013258:	08013663 	.word	0x08013663
 801325c:	08013687 	.word	0x08013687

08013260 <_cleanup_r>:
 8013260:	4901      	ldr	r1, [pc, #4]	; (8013268 <_cleanup_r+0x8>)
 8013262:	f000 b8af 	b.w	80133c4 <_fwalk_reent>
 8013266:	bf00      	nop
 8013268:	080131a1 	.word	0x080131a1

0801326c <__sfmoreglue>:
 801326c:	2268      	movs	r2, #104	; 0x68
 801326e:	b570      	push	{r4, r5, r6, lr}
 8013270:	1e4d      	subs	r5, r1, #1
 8013272:	4355      	muls	r5, r2
 8013274:	460e      	mov	r6, r1
 8013276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801327a:	f7ff fae7 	bl	801284c <_malloc_r>
 801327e:	4604      	mov	r4, r0
 8013280:	b140      	cbz	r0, 8013294 <__sfmoreglue+0x28>
 8013282:	2100      	movs	r1, #0
 8013284:	e9c0 1600 	strd	r1, r6, [r0]
 8013288:	300c      	adds	r0, #12
 801328a:	60a0      	str	r0, [r4, #8]
 801328c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013290:	f7fc f866 	bl	800f360 <memset>
 8013294:	4620      	mov	r0, r4
 8013296:	bd70      	pop	{r4, r5, r6, pc}

08013298 <__sfp_lock_acquire>:
 8013298:	4801      	ldr	r0, [pc, #4]	; (80132a0 <__sfp_lock_acquire+0x8>)
 801329a:	f000 b8b3 	b.w	8013404 <__retarget_lock_acquire_recursive>
 801329e:	bf00      	nop
 80132a0:	20001a05 	.word	0x20001a05

080132a4 <__sfp_lock_release>:
 80132a4:	4801      	ldr	r0, [pc, #4]	; (80132ac <__sfp_lock_release+0x8>)
 80132a6:	f000 b8ae 	b.w	8013406 <__retarget_lock_release_recursive>
 80132aa:	bf00      	nop
 80132ac:	20001a05 	.word	0x20001a05

080132b0 <__sinit_lock_acquire>:
 80132b0:	4801      	ldr	r0, [pc, #4]	; (80132b8 <__sinit_lock_acquire+0x8>)
 80132b2:	f000 b8a7 	b.w	8013404 <__retarget_lock_acquire_recursive>
 80132b6:	bf00      	nop
 80132b8:	20001a06 	.word	0x20001a06

080132bc <__sinit_lock_release>:
 80132bc:	4801      	ldr	r0, [pc, #4]	; (80132c4 <__sinit_lock_release+0x8>)
 80132be:	f000 b8a2 	b.w	8013406 <__retarget_lock_release_recursive>
 80132c2:	bf00      	nop
 80132c4:	20001a06 	.word	0x20001a06

080132c8 <__sinit>:
 80132c8:	b510      	push	{r4, lr}
 80132ca:	4604      	mov	r4, r0
 80132cc:	f7ff fff0 	bl	80132b0 <__sinit_lock_acquire>
 80132d0:	69a3      	ldr	r3, [r4, #24]
 80132d2:	b11b      	cbz	r3, 80132dc <__sinit+0x14>
 80132d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132d8:	f7ff bff0 	b.w	80132bc <__sinit_lock_release>
 80132dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80132e0:	6523      	str	r3, [r4, #80]	; 0x50
 80132e2:	4b13      	ldr	r3, [pc, #76]	; (8013330 <__sinit+0x68>)
 80132e4:	4a13      	ldr	r2, [pc, #76]	; (8013334 <__sinit+0x6c>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80132ea:	42a3      	cmp	r3, r4
 80132ec:	bf08      	it	eq
 80132ee:	2301      	moveq	r3, #1
 80132f0:	4620      	mov	r0, r4
 80132f2:	bf08      	it	eq
 80132f4:	61a3      	streq	r3, [r4, #24]
 80132f6:	f000 f81f 	bl	8013338 <__sfp>
 80132fa:	6060      	str	r0, [r4, #4]
 80132fc:	4620      	mov	r0, r4
 80132fe:	f000 f81b 	bl	8013338 <__sfp>
 8013302:	60a0      	str	r0, [r4, #8]
 8013304:	4620      	mov	r0, r4
 8013306:	f000 f817 	bl	8013338 <__sfp>
 801330a:	2200      	movs	r2, #0
 801330c:	2104      	movs	r1, #4
 801330e:	60e0      	str	r0, [r4, #12]
 8013310:	6860      	ldr	r0, [r4, #4]
 8013312:	f7ff ff81 	bl	8013218 <std>
 8013316:	2201      	movs	r2, #1
 8013318:	2109      	movs	r1, #9
 801331a:	68a0      	ldr	r0, [r4, #8]
 801331c:	f7ff ff7c 	bl	8013218 <std>
 8013320:	2202      	movs	r2, #2
 8013322:	2112      	movs	r1, #18
 8013324:	68e0      	ldr	r0, [r4, #12]
 8013326:	f7ff ff77 	bl	8013218 <std>
 801332a:	2301      	movs	r3, #1
 801332c:	61a3      	str	r3, [r4, #24]
 801332e:	e7d1      	b.n	80132d4 <__sinit+0xc>
 8013330:	08013b04 	.word	0x08013b04
 8013334:	08013261 	.word	0x08013261

08013338 <__sfp>:
 8013338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801333a:	4607      	mov	r7, r0
 801333c:	f7ff ffac 	bl	8013298 <__sfp_lock_acquire>
 8013340:	4b1e      	ldr	r3, [pc, #120]	; (80133bc <__sfp+0x84>)
 8013342:	681e      	ldr	r6, [r3, #0]
 8013344:	69b3      	ldr	r3, [r6, #24]
 8013346:	b913      	cbnz	r3, 801334e <__sfp+0x16>
 8013348:	4630      	mov	r0, r6
 801334a:	f7ff ffbd 	bl	80132c8 <__sinit>
 801334e:	3648      	adds	r6, #72	; 0x48
 8013350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013354:	3b01      	subs	r3, #1
 8013356:	d503      	bpl.n	8013360 <__sfp+0x28>
 8013358:	6833      	ldr	r3, [r6, #0]
 801335a:	b30b      	cbz	r3, 80133a0 <__sfp+0x68>
 801335c:	6836      	ldr	r6, [r6, #0]
 801335e:	e7f7      	b.n	8013350 <__sfp+0x18>
 8013360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013364:	b9d5      	cbnz	r5, 801339c <__sfp+0x64>
 8013366:	4b16      	ldr	r3, [pc, #88]	; (80133c0 <__sfp+0x88>)
 8013368:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801336c:	60e3      	str	r3, [r4, #12]
 801336e:	6665      	str	r5, [r4, #100]	; 0x64
 8013370:	f000 f847 	bl	8013402 <__retarget_lock_init_recursive>
 8013374:	f7ff ff96 	bl	80132a4 <__sfp_lock_release>
 8013378:	2208      	movs	r2, #8
 801337a:	4629      	mov	r1, r5
 801337c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013380:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013384:	6025      	str	r5, [r4, #0]
 8013386:	61a5      	str	r5, [r4, #24]
 8013388:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801338c:	f7fb ffe8 	bl	800f360 <memset>
 8013390:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013394:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013398:	4620      	mov	r0, r4
 801339a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801339c:	3468      	adds	r4, #104	; 0x68
 801339e:	e7d9      	b.n	8013354 <__sfp+0x1c>
 80133a0:	2104      	movs	r1, #4
 80133a2:	4638      	mov	r0, r7
 80133a4:	f7ff ff62 	bl	801326c <__sfmoreglue>
 80133a8:	4604      	mov	r4, r0
 80133aa:	6030      	str	r0, [r6, #0]
 80133ac:	2800      	cmp	r0, #0
 80133ae:	d1d5      	bne.n	801335c <__sfp+0x24>
 80133b0:	f7ff ff78 	bl	80132a4 <__sfp_lock_release>
 80133b4:	230c      	movs	r3, #12
 80133b6:	603b      	str	r3, [r7, #0]
 80133b8:	e7ee      	b.n	8013398 <__sfp+0x60>
 80133ba:	bf00      	nop
 80133bc:	08013b04 	.word	0x08013b04
 80133c0:	ffff0001 	.word	0xffff0001

080133c4 <_fwalk_reent>:
 80133c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133c8:	4606      	mov	r6, r0
 80133ca:	4688      	mov	r8, r1
 80133cc:	2700      	movs	r7, #0
 80133ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80133d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80133d6:	f1b9 0901 	subs.w	r9, r9, #1
 80133da:	d505      	bpl.n	80133e8 <_fwalk_reent+0x24>
 80133dc:	6824      	ldr	r4, [r4, #0]
 80133de:	2c00      	cmp	r4, #0
 80133e0:	d1f7      	bne.n	80133d2 <_fwalk_reent+0xe>
 80133e2:	4638      	mov	r0, r7
 80133e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133e8:	89ab      	ldrh	r3, [r5, #12]
 80133ea:	2b01      	cmp	r3, #1
 80133ec:	d907      	bls.n	80133fe <_fwalk_reent+0x3a>
 80133ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80133f2:	3301      	adds	r3, #1
 80133f4:	d003      	beq.n	80133fe <_fwalk_reent+0x3a>
 80133f6:	4629      	mov	r1, r5
 80133f8:	4630      	mov	r0, r6
 80133fa:	47c0      	blx	r8
 80133fc:	4307      	orrs	r7, r0
 80133fe:	3568      	adds	r5, #104	; 0x68
 8013400:	e7e9      	b.n	80133d6 <_fwalk_reent+0x12>

08013402 <__retarget_lock_init_recursive>:
 8013402:	4770      	bx	lr

08013404 <__retarget_lock_acquire_recursive>:
 8013404:	4770      	bx	lr

08013406 <__retarget_lock_release_recursive>:
 8013406:	4770      	bx	lr

08013408 <__swhatbuf_r>:
 8013408:	b570      	push	{r4, r5, r6, lr}
 801340a:	460e      	mov	r6, r1
 801340c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013410:	4614      	mov	r4, r2
 8013412:	2900      	cmp	r1, #0
 8013414:	461d      	mov	r5, r3
 8013416:	b096      	sub	sp, #88	; 0x58
 8013418:	da08      	bge.n	801342c <__swhatbuf_r+0x24>
 801341a:	2200      	movs	r2, #0
 801341c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013420:	602a      	str	r2, [r5, #0]
 8013422:	061a      	lsls	r2, r3, #24
 8013424:	d410      	bmi.n	8013448 <__swhatbuf_r+0x40>
 8013426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801342a:	e00e      	b.n	801344a <__swhatbuf_r+0x42>
 801342c:	466a      	mov	r2, sp
 801342e:	f000 f951 	bl	80136d4 <_fstat_r>
 8013432:	2800      	cmp	r0, #0
 8013434:	dbf1      	blt.n	801341a <__swhatbuf_r+0x12>
 8013436:	9a01      	ldr	r2, [sp, #4]
 8013438:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801343c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013440:	425a      	negs	r2, r3
 8013442:	415a      	adcs	r2, r3
 8013444:	602a      	str	r2, [r5, #0]
 8013446:	e7ee      	b.n	8013426 <__swhatbuf_r+0x1e>
 8013448:	2340      	movs	r3, #64	; 0x40
 801344a:	2000      	movs	r0, #0
 801344c:	6023      	str	r3, [r4, #0]
 801344e:	b016      	add	sp, #88	; 0x58
 8013450:	bd70      	pop	{r4, r5, r6, pc}
	...

08013454 <__smakebuf_r>:
 8013454:	898b      	ldrh	r3, [r1, #12]
 8013456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013458:	079d      	lsls	r5, r3, #30
 801345a:	4606      	mov	r6, r0
 801345c:	460c      	mov	r4, r1
 801345e:	d507      	bpl.n	8013470 <__smakebuf_r+0x1c>
 8013460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013464:	6023      	str	r3, [r4, #0]
 8013466:	6123      	str	r3, [r4, #16]
 8013468:	2301      	movs	r3, #1
 801346a:	6163      	str	r3, [r4, #20]
 801346c:	b002      	add	sp, #8
 801346e:	bd70      	pop	{r4, r5, r6, pc}
 8013470:	466a      	mov	r2, sp
 8013472:	ab01      	add	r3, sp, #4
 8013474:	f7ff ffc8 	bl	8013408 <__swhatbuf_r>
 8013478:	9900      	ldr	r1, [sp, #0]
 801347a:	4605      	mov	r5, r0
 801347c:	4630      	mov	r0, r6
 801347e:	f7ff f9e5 	bl	801284c <_malloc_r>
 8013482:	b948      	cbnz	r0, 8013498 <__smakebuf_r+0x44>
 8013484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013488:	059a      	lsls	r2, r3, #22
 801348a:	d4ef      	bmi.n	801346c <__smakebuf_r+0x18>
 801348c:	f023 0303 	bic.w	r3, r3, #3
 8013490:	f043 0302 	orr.w	r3, r3, #2
 8013494:	81a3      	strh	r3, [r4, #12]
 8013496:	e7e3      	b.n	8013460 <__smakebuf_r+0xc>
 8013498:	4b0d      	ldr	r3, [pc, #52]	; (80134d0 <__smakebuf_r+0x7c>)
 801349a:	62b3      	str	r3, [r6, #40]	; 0x28
 801349c:	89a3      	ldrh	r3, [r4, #12]
 801349e:	6020      	str	r0, [r4, #0]
 80134a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134a4:	81a3      	strh	r3, [r4, #12]
 80134a6:	9b00      	ldr	r3, [sp, #0]
 80134a8:	6120      	str	r0, [r4, #16]
 80134aa:	6163      	str	r3, [r4, #20]
 80134ac:	9b01      	ldr	r3, [sp, #4]
 80134ae:	b15b      	cbz	r3, 80134c8 <__smakebuf_r+0x74>
 80134b0:	4630      	mov	r0, r6
 80134b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134b6:	f000 f91f 	bl	80136f8 <_isatty_r>
 80134ba:	b128      	cbz	r0, 80134c8 <__smakebuf_r+0x74>
 80134bc:	89a3      	ldrh	r3, [r4, #12]
 80134be:	f023 0303 	bic.w	r3, r3, #3
 80134c2:	f043 0301 	orr.w	r3, r3, #1
 80134c6:	81a3      	strh	r3, [r4, #12]
 80134c8:	89a0      	ldrh	r0, [r4, #12]
 80134ca:	4305      	orrs	r5, r0
 80134cc:	81a5      	strh	r5, [r4, #12]
 80134ce:	e7cd      	b.n	801346c <__smakebuf_r+0x18>
 80134d0:	08013261 	.word	0x08013261

080134d4 <memmove>:
 80134d4:	4288      	cmp	r0, r1
 80134d6:	b510      	push	{r4, lr}
 80134d8:	eb01 0402 	add.w	r4, r1, r2
 80134dc:	d902      	bls.n	80134e4 <memmove+0x10>
 80134de:	4284      	cmp	r4, r0
 80134e0:	4623      	mov	r3, r4
 80134e2:	d807      	bhi.n	80134f4 <memmove+0x20>
 80134e4:	1e43      	subs	r3, r0, #1
 80134e6:	42a1      	cmp	r1, r4
 80134e8:	d008      	beq.n	80134fc <memmove+0x28>
 80134ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134f2:	e7f8      	b.n	80134e6 <memmove+0x12>
 80134f4:	4601      	mov	r1, r0
 80134f6:	4402      	add	r2, r0
 80134f8:	428a      	cmp	r2, r1
 80134fa:	d100      	bne.n	80134fe <memmove+0x2a>
 80134fc:	bd10      	pop	{r4, pc}
 80134fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013506:	e7f7      	b.n	80134f8 <memmove+0x24>

08013508 <__malloc_lock>:
 8013508:	4801      	ldr	r0, [pc, #4]	; (8013510 <__malloc_lock+0x8>)
 801350a:	f7ff bf7b 	b.w	8013404 <__retarget_lock_acquire_recursive>
 801350e:	bf00      	nop
 8013510:	20001a04 	.word	0x20001a04

08013514 <__malloc_unlock>:
 8013514:	4801      	ldr	r0, [pc, #4]	; (801351c <__malloc_unlock+0x8>)
 8013516:	f7ff bf76 	b.w	8013406 <__retarget_lock_release_recursive>
 801351a:	bf00      	nop
 801351c:	20001a04 	.word	0x20001a04

08013520 <_realloc_r>:
 8013520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013524:	4680      	mov	r8, r0
 8013526:	4614      	mov	r4, r2
 8013528:	460e      	mov	r6, r1
 801352a:	b921      	cbnz	r1, 8013536 <_realloc_r+0x16>
 801352c:	4611      	mov	r1, r2
 801352e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013532:	f7ff b98b 	b.w	801284c <_malloc_r>
 8013536:	b92a      	cbnz	r2, 8013544 <_realloc_r+0x24>
 8013538:	f7ff f920 	bl	801277c <_free_r>
 801353c:	4625      	mov	r5, r4
 801353e:	4628      	mov	r0, r5
 8013540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013544:	f000 f8fa 	bl	801373c <_malloc_usable_size_r>
 8013548:	4284      	cmp	r4, r0
 801354a:	4607      	mov	r7, r0
 801354c:	d802      	bhi.n	8013554 <_realloc_r+0x34>
 801354e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013552:	d812      	bhi.n	801357a <_realloc_r+0x5a>
 8013554:	4621      	mov	r1, r4
 8013556:	4640      	mov	r0, r8
 8013558:	f7ff f978 	bl	801284c <_malloc_r>
 801355c:	4605      	mov	r5, r0
 801355e:	2800      	cmp	r0, #0
 8013560:	d0ed      	beq.n	801353e <_realloc_r+0x1e>
 8013562:	42bc      	cmp	r4, r7
 8013564:	4622      	mov	r2, r4
 8013566:	4631      	mov	r1, r6
 8013568:	bf28      	it	cs
 801356a:	463a      	movcs	r2, r7
 801356c:	f7fb feea 	bl	800f344 <memcpy>
 8013570:	4631      	mov	r1, r6
 8013572:	4640      	mov	r0, r8
 8013574:	f7ff f902 	bl	801277c <_free_r>
 8013578:	e7e1      	b.n	801353e <_realloc_r+0x1e>
 801357a:	4635      	mov	r5, r6
 801357c:	e7df      	b.n	801353e <_realloc_r+0x1e>

0801357e <_raise_r>:
 801357e:	291f      	cmp	r1, #31
 8013580:	b538      	push	{r3, r4, r5, lr}
 8013582:	4604      	mov	r4, r0
 8013584:	460d      	mov	r5, r1
 8013586:	d904      	bls.n	8013592 <_raise_r+0x14>
 8013588:	2316      	movs	r3, #22
 801358a:	6003      	str	r3, [r0, #0]
 801358c:	f04f 30ff 	mov.w	r0, #4294967295
 8013590:	bd38      	pop	{r3, r4, r5, pc}
 8013592:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013594:	b112      	cbz	r2, 801359c <_raise_r+0x1e>
 8013596:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801359a:	b94b      	cbnz	r3, 80135b0 <_raise_r+0x32>
 801359c:	4620      	mov	r0, r4
 801359e:	f000 f831 	bl	8013604 <_getpid_r>
 80135a2:	462a      	mov	r2, r5
 80135a4:	4601      	mov	r1, r0
 80135a6:	4620      	mov	r0, r4
 80135a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135ac:	f000 b818 	b.w	80135e0 <_kill_r>
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	d00a      	beq.n	80135ca <_raise_r+0x4c>
 80135b4:	1c59      	adds	r1, r3, #1
 80135b6:	d103      	bne.n	80135c0 <_raise_r+0x42>
 80135b8:	2316      	movs	r3, #22
 80135ba:	6003      	str	r3, [r0, #0]
 80135bc:	2001      	movs	r0, #1
 80135be:	e7e7      	b.n	8013590 <_raise_r+0x12>
 80135c0:	2400      	movs	r4, #0
 80135c2:	4628      	mov	r0, r5
 80135c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80135c8:	4798      	blx	r3
 80135ca:	2000      	movs	r0, #0
 80135cc:	e7e0      	b.n	8013590 <_raise_r+0x12>
	...

080135d0 <raise>:
 80135d0:	4b02      	ldr	r3, [pc, #8]	; (80135dc <raise+0xc>)
 80135d2:	4601      	mov	r1, r0
 80135d4:	6818      	ldr	r0, [r3, #0]
 80135d6:	f7ff bfd2 	b.w	801357e <_raise_r>
 80135da:	bf00      	nop
 80135dc:	2000093c 	.word	0x2000093c

080135e0 <_kill_r>:
 80135e0:	b538      	push	{r3, r4, r5, lr}
 80135e2:	2300      	movs	r3, #0
 80135e4:	4d06      	ldr	r5, [pc, #24]	; (8013600 <_kill_r+0x20>)
 80135e6:	4604      	mov	r4, r0
 80135e8:	4608      	mov	r0, r1
 80135ea:	4611      	mov	r1, r2
 80135ec:	602b      	str	r3, [r5, #0]
 80135ee:	f7f1 f95c 	bl	80048aa <_kill>
 80135f2:	1c43      	adds	r3, r0, #1
 80135f4:	d102      	bne.n	80135fc <_kill_r+0x1c>
 80135f6:	682b      	ldr	r3, [r5, #0]
 80135f8:	b103      	cbz	r3, 80135fc <_kill_r+0x1c>
 80135fa:	6023      	str	r3, [r4, #0]
 80135fc:	bd38      	pop	{r3, r4, r5, pc}
 80135fe:	bf00      	nop
 8013600:	20001a08 	.word	0x20001a08

08013604 <_getpid_r>:
 8013604:	f7f1 b94a 	b.w	800489c <_getpid>

08013608 <__sread>:
 8013608:	b510      	push	{r4, lr}
 801360a:	460c      	mov	r4, r1
 801360c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013610:	f000 f89c 	bl	801374c <_read_r>
 8013614:	2800      	cmp	r0, #0
 8013616:	bfab      	itete	ge
 8013618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801361a:	89a3      	ldrhlt	r3, [r4, #12]
 801361c:	181b      	addge	r3, r3, r0
 801361e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013622:	bfac      	ite	ge
 8013624:	6563      	strge	r3, [r4, #84]	; 0x54
 8013626:	81a3      	strhlt	r3, [r4, #12]
 8013628:	bd10      	pop	{r4, pc}

0801362a <__swrite>:
 801362a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801362e:	461f      	mov	r7, r3
 8013630:	898b      	ldrh	r3, [r1, #12]
 8013632:	4605      	mov	r5, r0
 8013634:	05db      	lsls	r3, r3, #23
 8013636:	460c      	mov	r4, r1
 8013638:	4616      	mov	r6, r2
 801363a:	d505      	bpl.n	8013648 <__swrite+0x1e>
 801363c:	2302      	movs	r3, #2
 801363e:	2200      	movs	r2, #0
 8013640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013644:	f000 f868 	bl	8013718 <_lseek_r>
 8013648:	89a3      	ldrh	r3, [r4, #12]
 801364a:	4632      	mov	r2, r6
 801364c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013650:	81a3      	strh	r3, [r4, #12]
 8013652:	4628      	mov	r0, r5
 8013654:	463b      	mov	r3, r7
 8013656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801365a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801365e:	f000 b817 	b.w	8013690 <_write_r>

08013662 <__sseek>:
 8013662:	b510      	push	{r4, lr}
 8013664:	460c      	mov	r4, r1
 8013666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801366a:	f000 f855 	bl	8013718 <_lseek_r>
 801366e:	1c43      	adds	r3, r0, #1
 8013670:	89a3      	ldrh	r3, [r4, #12]
 8013672:	bf15      	itete	ne
 8013674:	6560      	strne	r0, [r4, #84]	; 0x54
 8013676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801367a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801367e:	81a3      	strheq	r3, [r4, #12]
 8013680:	bf18      	it	ne
 8013682:	81a3      	strhne	r3, [r4, #12]
 8013684:	bd10      	pop	{r4, pc}

08013686 <__sclose>:
 8013686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801368a:	f000 b813 	b.w	80136b4 <_close_r>
	...

08013690 <_write_r>:
 8013690:	b538      	push	{r3, r4, r5, lr}
 8013692:	4604      	mov	r4, r0
 8013694:	4608      	mov	r0, r1
 8013696:	4611      	mov	r1, r2
 8013698:	2200      	movs	r2, #0
 801369a:	4d05      	ldr	r5, [pc, #20]	; (80136b0 <_write_r+0x20>)
 801369c:	602a      	str	r2, [r5, #0]
 801369e:	461a      	mov	r2, r3
 80136a0:	f7f1 f93a 	bl	8004918 <_write>
 80136a4:	1c43      	adds	r3, r0, #1
 80136a6:	d102      	bne.n	80136ae <_write_r+0x1e>
 80136a8:	682b      	ldr	r3, [r5, #0]
 80136aa:	b103      	cbz	r3, 80136ae <_write_r+0x1e>
 80136ac:	6023      	str	r3, [r4, #0]
 80136ae:	bd38      	pop	{r3, r4, r5, pc}
 80136b0:	20001a08 	.word	0x20001a08

080136b4 <_close_r>:
 80136b4:	b538      	push	{r3, r4, r5, lr}
 80136b6:	2300      	movs	r3, #0
 80136b8:	4d05      	ldr	r5, [pc, #20]	; (80136d0 <_close_r+0x1c>)
 80136ba:	4604      	mov	r4, r0
 80136bc:	4608      	mov	r0, r1
 80136be:	602b      	str	r3, [r5, #0]
 80136c0:	f7f1 f946 	bl	8004950 <_close>
 80136c4:	1c43      	adds	r3, r0, #1
 80136c6:	d102      	bne.n	80136ce <_close_r+0x1a>
 80136c8:	682b      	ldr	r3, [r5, #0]
 80136ca:	b103      	cbz	r3, 80136ce <_close_r+0x1a>
 80136cc:	6023      	str	r3, [r4, #0]
 80136ce:	bd38      	pop	{r3, r4, r5, pc}
 80136d0:	20001a08 	.word	0x20001a08

080136d4 <_fstat_r>:
 80136d4:	b538      	push	{r3, r4, r5, lr}
 80136d6:	2300      	movs	r3, #0
 80136d8:	4d06      	ldr	r5, [pc, #24]	; (80136f4 <_fstat_r+0x20>)
 80136da:	4604      	mov	r4, r0
 80136dc:	4608      	mov	r0, r1
 80136de:	4611      	mov	r1, r2
 80136e0:	602b      	str	r3, [r5, #0]
 80136e2:	f7f1 f940 	bl	8004966 <_fstat>
 80136e6:	1c43      	adds	r3, r0, #1
 80136e8:	d102      	bne.n	80136f0 <_fstat_r+0x1c>
 80136ea:	682b      	ldr	r3, [r5, #0]
 80136ec:	b103      	cbz	r3, 80136f0 <_fstat_r+0x1c>
 80136ee:	6023      	str	r3, [r4, #0]
 80136f0:	bd38      	pop	{r3, r4, r5, pc}
 80136f2:	bf00      	nop
 80136f4:	20001a08 	.word	0x20001a08

080136f8 <_isatty_r>:
 80136f8:	b538      	push	{r3, r4, r5, lr}
 80136fa:	2300      	movs	r3, #0
 80136fc:	4d05      	ldr	r5, [pc, #20]	; (8013714 <_isatty_r+0x1c>)
 80136fe:	4604      	mov	r4, r0
 8013700:	4608      	mov	r0, r1
 8013702:	602b      	str	r3, [r5, #0]
 8013704:	f7f1 f93e 	bl	8004984 <_isatty>
 8013708:	1c43      	adds	r3, r0, #1
 801370a:	d102      	bne.n	8013712 <_isatty_r+0x1a>
 801370c:	682b      	ldr	r3, [r5, #0]
 801370e:	b103      	cbz	r3, 8013712 <_isatty_r+0x1a>
 8013710:	6023      	str	r3, [r4, #0]
 8013712:	bd38      	pop	{r3, r4, r5, pc}
 8013714:	20001a08 	.word	0x20001a08

08013718 <_lseek_r>:
 8013718:	b538      	push	{r3, r4, r5, lr}
 801371a:	4604      	mov	r4, r0
 801371c:	4608      	mov	r0, r1
 801371e:	4611      	mov	r1, r2
 8013720:	2200      	movs	r2, #0
 8013722:	4d05      	ldr	r5, [pc, #20]	; (8013738 <_lseek_r+0x20>)
 8013724:	602a      	str	r2, [r5, #0]
 8013726:	461a      	mov	r2, r3
 8013728:	f7f1 f936 	bl	8004998 <_lseek>
 801372c:	1c43      	adds	r3, r0, #1
 801372e:	d102      	bne.n	8013736 <_lseek_r+0x1e>
 8013730:	682b      	ldr	r3, [r5, #0]
 8013732:	b103      	cbz	r3, 8013736 <_lseek_r+0x1e>
 8013734:	6023      	str	r3, [r4, #0]
 8013736:	bd38      	pop	{r3, r4, r5, pc}
 8013738:	20001a08 	.word	0x20001a08

0801373c <_malloc_usable_size_r>:
 801373c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013740:	1f18      	subs	r0, r3, #4
 8013742:	2b00      	cmp	r3, #0
 8013744:	bfbc      	itt	lt
 8013746:	580b      	ldrlt	r3, [r1, r0]
 8013748:	18c0      	addlt	r0, r0, r3
 801374a:	4770      	bx	lr

0801374c <_read_r>:
 801374c:	b538      	push	{r3, r4, r5, lr}
 801374e:	4604      	mov	r4, r0
 8013750:	4608      	mov	r0, r1
 8013752:	4611      	mov	r1, r2
 8013754:	2200      	movs	r2, #0
 8013756:	4d05      	ldr	r5, [pc, #20]	; (801376c <_read_r+0x20>)
 8013758:	602a      	str	r2, [r5, #0]
 801375a:	461a      	mov	r2, r3
 801375c:	f7f1 f8bf 	bl	80048de <_read>
 8013760:	1c43      	adds	r3, r0, #1
 8013762:	d102      	bne.n	801376a <_read_r+0x1e>
 8013764:	682b      	ldr	r3, [r5, #0]
 8013766:	b103      	cbz	r3, 801376a <_read_r+0x1e>
 8013768:	6023      	str	r3, [r4, #0]
 801376a:	bd38      	pop	{r3, r4, r5, pc}
 801376c:	20001a08 	.word	0x20001a08

08013770 <_init>:
 8013770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013772:	bf00      	nop
 8013774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013776:	bc08      	pop	{r3}
 8013778:	469e      	mov	lr, r3
 801377a:	4770      	bx	lr

0801377c <_fini>:
 801377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801377e:	bf00      	nop
 8013780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013782:	bc08      	pop	{r3}
 8013784:	469e      	mov	lr, r3
 8013786:	4770      	bx	lr
